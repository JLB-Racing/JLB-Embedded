
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e330  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008fc  0801e530  0801e530  0002e530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ee2c  0801ee2c  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0801ee2c  0801ee2c  0002ee2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ee34  0801ee34  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ee34  0801ee34  0002ee34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ee38  0801ee38  0002ee38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801ee3c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037cc  20000084  0801eec0  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003850  0801eec0  00033850  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300ba  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004c0ea  00000000  00000000  000300fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007261  00000000  00000000  0007c1e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003a88  00000000  00000000  00083448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002d4c  00000000  00000000  00086ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00037f19  00000000  00000000  00089c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003cbc4  00000000  00000000  000c1b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00164df7  00000000  00000000  000fe6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000118a4  00000000  00000000  002634f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00274d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000084 	.word	0x20000084
 800021c:	00000000 	.word	0x00000000
 8000220:	0801e518 	.word	0x0801e518

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000088 	.word	0x20000088
 800023c:	0801e518 	.word	0x0801e518

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b982 	b.w	8000f38 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000c52:	460d      	mov	r5, r1
 8000c54:	4604      	mov	r4, r0
 8000c56:	460f      	mov	r7, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d146      	bne.n	8000cea <__udivmoddi4+0x9e>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4694      	mov	ip, r2
 8000c60:	d95e      	bls.n	8000d20 <__udivmoddi4+0xd4>
 8000c62:	fab2 f382 	clz	r3, r2
 8000c66:	b143      	cbz	r3, 8000c7a <__udivmoddi4+0x2e>
 8000c68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c6c:	f1c3 0220 	rsb	r2, r3, #32
 8000c70:	409f      	lsls	r7, r3
 8000c72:	409c      	lsls	r4, r3
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	4317      	orrs	r7, r2
 8000c7a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c7e:	fa1f f58c 	uxth.w	r5, ip
 8000c82:	0c22      	lsrs	r2, r4, #16
 8000c84:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c88:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c8c:	fb01 f005 	mul.w	r0, r1, r5
 8000c90:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c94:	4290      	cmp	r0, r2
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x5e>
 8000c98:	eb1c 0202 	adds.w	r2, ip, r2
 8000c9c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ca0:	d202      	bcs.n	8000ca8 <__udivmoddi4+0x5c>
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	f200 8134 	bhi.w	8000f10 <__udivmoddi4+0x2c4>
 8000ca8:	4639      	mov	r1, r7
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	fb00 f505 	mul.w	r5, r0, r5
 8000cba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x88>
 8000cc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x86>
 8000ccc:	42a5      	cmp	r5, r4
 8000cce:	f200 8119 	bhi.w	8000f04 <__udivmoddi4+0x2b8>
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cd8:	1b64      	subs	r4, r4, r5
 8000cda:	2100      	movs	r1, #0
 8000cdc:	b11e      	cbz	r6, 8000ce6 <__udivmoddi4+0x9a>
 8000cde:	40dc      	lsrs	r4, r3
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0xb4>
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	f000 80fc 	beq.w	8000eec <__udivmoddi4+0x2a0>
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d00:	fab3 f183 	clz	r1, r3
 8000d04:	2900      	cmp	r1, #0
 8000d06:	d14c      	bne.n	8000da2 <__udivmoddi4+0x156>
 8000d08:	42ab      	cmp	r3, r5
 8000d0a:	f0c0 80f2 	bcc.w	8000ef2 <__udivmoddi4+0x2a6>
 8000d0e:	4282      	cmp	r2, r0
 8000d10:	f240 80ef 	bls.w	8000ef2 <__udivmoddi4+0x2a6>
 8000d14:	4608      	mov	r0, r1
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d0e5      	beq.n	8000ce6 <__udivmoddi4+0x9a>
 8000d1a:	e9c6 4700 	strd	r4, r7, [r6]
 8000d1e:	e7e2      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xd8>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f382 	clz	r3, r2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f040 809f 	bne.w	8000e6c <__udivmoddi4+0x220>
 8000d2e:	1a8a      	subs	r2, r1, r2
 8000d30:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb2 f5fe 	udiv	r5, r2, lr
 8000d3e:	fb0e 2015 	mls	r0, lr, r5, r2
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d48:	fb07 f005 	mul.w	r0, r7, r5
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	d90f      	bls.n	8000d70 <__udivmoddi4+0x124>
 8000d50:	eb1c 0202 	adds.w	r2, ip, r2
 8000d54:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d58:	bf2c      	ite	cs
 8000d5a:	f04f 0901 	movcs.w	r9, #1
 8000d5e:	f04f 0900 	movcc.w	r9, #0
 8000d62:	4290      	cmp	r0, r2
 8000d64:	d903      	bls.n	8000d6e <__udivmoddi4+0x122>
 8000d66:	f1b9 0f00 	cmp.w	r9, #0
 8000d6a:	f000 80ce 	beq.w	8000f0a <__udivmoddi4+0x2be>
 8000d6e:	4645      	mov	r5, r8
 8000d70:	1a12      	subs	r2, r2, r0
 8000d72:	b2a4      	uxth	r4, r4
 8000d74:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d78:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d7c:	fb00 f707 	mul.w	r7, r0, r7
 8000d80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d84:	42a7      	cmp	r7, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x14e>
 8000d88:	eb1c 0404 	adds.w	r4, ip, r4
 8000d8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d90:	d202      	bcs.n	8000d98 <__udivmoddi4+0x14c>
 8000d92:	42a7      	cmp	r7, r4
 8000d94:	f200 80b3 	bhi.w	8000efe <__udivmoddi4+0x2b2>
 8000d98:	4610      	mov	r0, r2
 8000d9a:	1be4      	subs	r4, r4, r7
 8000d9c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000da0:	e79c      	b.n	8000cdc <__udivmoddi4+0x90>
 8000da2:	f1c1 0420 	rsb	r4, r1, #32
 8000da6:	408b      	lsls	r3, r1
 8000da8:	fa05 fc01 	lsl.w	ip, r5, r1
 8000dac:	fa22 f704 	lsr.w	r7, r2, r4
 8000db0:	40e5      	lsrs	r5, r4
 8000db2:	408a      	lsls	r2, r1
 8000db4:	431f      	orrs	r7, r3
 8000db6:	fa20 f304 	lsr.w	r3, r0, r4
 8000dba:	4088      	lsls	r0, r1
 8000dbc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dc0:	ea43 030c 	orr.w	r3, r3, ip
 8000dc4:	fa1f fc87 	uxth.w	ip, r7
 8000dc8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dcc:	fbb5 fef8 	udiv	lr, r5, r8
 8000dd0:	fb08 551e 	mls	r5, r8, lr, r5
 8000dd4:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000dd8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ddc:	45a9      	cmp	r9, r5
 8000dde:	d90e      	bls.n	8000dfe <__udivmoddi4+0x1b2>
 8000de0:	197d      	adds	r5, r7, r5
 8000de2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000de6:	bf2c      	ite	cs
 8000de8:	f04f 0b01 	movcs.w	fp, #1
 8000dec:	f04f 0b00 	movcc.w	fp, #0
 8000df0:	45a9      	cmp	r9, r5
 8000df2:	d903      	bls.n	8000dfc <__udivmoddi4+0x1b0>
 8000df4:	f1bb 0f00 	cmp.w	fp, #0
 8000df8:	f000 808d 	beq.w	8000f16 <__udivmoddi4+0x2ca>
 8000dfc:	46d6      	mov	lr, sl
 8000dfe:	eba5 0509 	sub.w	r5, r5, r9
 8000e02:	fa1f f983 	uxth.w	r9, r3
 8000e06:	fbb5 f3f8 	udiv	r3, r5, r8
 8000e0a:	fb08 5513 	mls	r5, r8, r3, r5
 8000e0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e12:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000e16:	45ac      	cmp	ip, r5
 8000e18:	d906      	bls.n	8000e28 <__udivmoddi4+0x1dc>
 8000e1a:	197d      	adds	r5, r7, r5
 8000e1c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e20:	d201      	bcs.n	8000e26 <__udivmoddi4+0x1da>
 8000e22:	45ac      	cmp	ip, r5
 8000e24:	d87e      	bhi.n	8000f24 <__udivmoddi4+0x2d8>
 8000e26:	4643      	mov	r3, r8
 8000e28:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000e2c:	eba5 050c 	sub.w	r5, r5, ip
 8000e30:	fba3 9802 	umull	r9, r8, r3, r2
 8000e34:	4545      	cmp	r5, r8
 8000e36:	46ce      	mov	lr, r9
 8000e38:	46c4      	mov	ip, r8
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0x1f6>
 8000e3c:	d106      	bne.n	8000e4c <__udivmoddi4+0x200>
 8000e3e:	4548      	cmp	r0, r9
 8000e40:	d204      	bcs.n	8000e4c <__udivmoddi4+0x200>
 8000e42:	3b01      	subs	r3, #1
 8000e44:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e48:	eb68 0c07 	sbc.w	ip, r8, r7
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d06f      	beq.n	8000f30 <__udivmoddi4+0x2e4>
 8000e50:	ebb0 020e 	subs.w	r2, r0, lr
 8000e54:	eb65 050c 	sbc.w	r5, r5, ip
 8000e58:	40ca      	lsrs	r2, r1
 8000e5a:	fa05 f404 	lsl.w	r4, r5, r4
 8000e5e:	40cd      	lsrs	r5, r1
 8000e60:	4618      	mov	r0, r3
 8000e62:	4314      	orrs	r4, r2
 8000e64:	2100      	movs	r1, #0
 8000e66:	e9c6 4500 	strd	r4, r5, [r6]
 8000e6a:	e73c      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000e6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e70:	f1c3 0220 	rsb	r2, r3, #32
 8000e74:	4099      	lsls	r1, r3
 8000e76:	409c      	lsls	r4, r3
 8000e78:	40d5      	lsrs	r5, r2
 8000e7a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000e82:	fa1f f78c 	uxth.w	r7, ip
 8000e86:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e90:	0c11      	lsrs	r1, r2, #16
 8000e92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e96:	fb00 f507 	mul.w	r5, r0, r7
 8000e9a:	428d      	cmp	r5, r1
 8000e9c:	d90e      	bls.n	8000ebc <__udivmoddi4+0x270>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea6:	bf2c      	ite	cs
 8000ea8:	f04f 0901 	movcs.w	r9, #1
 8000eac:	f04f 0900 	movcc.w	r9, #0
 8000eb0:	428d      	cmp	r5, r1
 8000eb2:	d902      	bls.n	8000eba <__udivmoddi4+0x26e>
 8000eb4:	f1b9 0f00 	cmp.w	r9, #0
 8000eb8:	d031      	beq.n	8000f1e <__udivmoddi4+0x2d2>
 8000eba:	4640      	mov	r0, r8
 8000ebc:	1b49      	subs	r1, r1, r5
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	fbb1 f5fe 	udiv	r5, r1, lr
 8000ec4:	fb0e 1115 	mls	r1, lr, r5, r1
 8000ec8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ecc:	fb05 f107 	mul.w	r1, r5, r7
 8000ed0:	4291      	cmp	r1, r2
 8000ed2:	d907      	bls.n	8000ee4 <__udivmoddi4+0x298>
 8000ed4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000edc:	d201      	bcs.n	8000ee2 <__udivmoddi4+0x296>
 8000ede:	4291      	cmp	r1, r2
 8000ee0:	d823      	bhi.n	8000f2a <__udivmoddi4+0x2de>
 8000ee2:	4645      	mov	r5, r8
 8000ee4:	1a52      	subs	r2, r2, r1
 8000ee6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eea:	e726      	b.n	8000d3a <__udivmoddi4+0xee>
 8000eec:	4631      	mov	r1, r6
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e6f9      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000ef2:	1a84      	subs	r4, r0, r2
 8000ef4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ef8:	2001      	movs	r0, #1
 8000efa:	4617      	mov	r7, r2
 8000efc:	e70b      	b.n	8000d16 <__udivmoddi4+0xca>
 8000efe:	4464      	add	r4, ip
 8000f00:	3802      	subs	r0, #2
 8000f02:	e74a      	b.n	8000d9a <__udivmoddi4+0x14e>
 8000f04:	4464      	add	r4, ip
 8000f06:	3802      	subs	r0, #2
 8000f08:	e6e4      	b.n	8000cd4 <__udivmoddi4+0x88>
 8000f0a:	3d02      	subs	r5, #2
 8000f0c:	4462      	add	r2, ip
 8000f0e:	e72f      	b.n	8000d70 <__udivmoddi4+0x124>
 8000f10:	3902      	subs	r1, #2
 8000f12:	4462      	add	r2, ip
 8000f14:	e6c9      	b.n	8000caa <__udivmoddi4+0x5e>
 8000f16:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f1a:	443d      	add	r5, r7
 8000f1c:	e76f      	b.n	8000dfe <__udivmoddi4+0x1b2>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	e7cb      	b.n	8000ebc <__udivmoddi4+0x270>
 8000f24:	3b02      	subs	r3, #2
 8000f26:	443d      	add	r5, r7
 8000f28:	e77e      	b.n	8000e28 <__udivmoddi4+0x1dc>
 8000f2a:	3d02      	subs	r5, #2
 8000f2c:	4462      	add	r2, ip
 8000f2e:	e7d9      	b.n	8000ee4 <__udivmoddi4+0x298>
 8000f30:	4618      	mov	r0, r3
 8000f32:	4631      	mov	r1, r6
 8000f34:	e6d7      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000f36:	bf00      	nop

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <Pack_measurements_1_jlb>:
}

#else

uint32_t Pack_measurements_1_jlb(measurements_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	75fb      	strb	r3, [r7, #23]
 8000f4e:	e007      	b.n	8000f60 <Pack_measurements_1_jlb+0x24>
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	75fa      	strb	r2, [r7, #23]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	2b07      	cmp	r3, #7
 8000f64:	d9f4      	bls.n	8000f50 <Pack_measurements_1_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->line_sensor_1 & (0x03U)) | ((_m->line_sensor_2 & (0x03U)) << 2U) | ((_m->line_sensor_3 & (0x03U)) << 4U) | ((_m->line_sensor_4 & (0x03U)) << 6U) );
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	781a      	ldrb	r2, [r3, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	b2d9      	uxtb	r1, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	785b      	ldrb	r3, [r3, #1]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	430b      	orrs	r3, r1
 8000f84:	b2d9      	uxtb	r1, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	789b      	ldrb	r3, [r3, #2]
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	430b      	orrs	r3, r1
 8000f96:	b2d9      	uxtb	r1, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	78db      	ldrb	r3, [r3, #3]
 8000f9c:	019b      	lsls	r3, r3, #6
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->line_sensor_5 & (0x03U)) | ((_m->line_sensor_6 & (0x03U)) << 2U) | ((_m->line_sensor_7 & (0x03U)) << 4U) | ((_m->line_sensor_8 & (0x03U)) << 6U) );
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	7819      	ldrb	r1, [r3, #0]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	791b      	ldrb	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	795b      	ldrb	r3, [r3, #5]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	799b      	ldrb	r3, [r3, #6]
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	79db      	ldrb	r3, [r3, #7]
 8000fe4:	019b      	lsls	r3, r3, #6
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_sensor_9 & (0x03U)) | ((_m->line_sensor_10 & (0x03U)) << 2U) | ((_m->line_sensor_11 & (0x03U)) << 4U) | ((_m->line_sensor_12 & (0x03U)) << 6U) );
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	7819      	ldrb	r1, [r3, #0]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	7a1b      	ldrb	r3, [r3, #8]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	b2da      	uxtb	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	7a5b      	ldrb	r3, [r3, #9]
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b2da      	uxtb	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	7a9b      	ldrb	r3, [r3, #10]
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	b2db      	uxtb	r3, r3
 8001020:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b2da      	uxtb	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	7adb      	ldrb	r3, [r3, #11]
 800102e:	019b      	lsls	r3, r3, #6
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b2da      	uxtb	r2, r3
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	3302      	adds	r3, #2
 800103a:	430a      	orrs	r2, r1
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->line_sensor_13 & (0x03U)) | ((_m->line_sensor_14 & (0x03U)) << 2U) | ((_m->line_sensor_15 & (0x03U)) << 4U) | ((_m->line_sensor_16 & (0x03U)) << 6U) );
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	3303      	adds	r3, #3
 8001044:	7819      	ldrb	r1, [r3, #0]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	7b1b      	ldrb	r3, [r3, #12]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	b2da      	uxtb	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	7b5b      	ldrb	r3, [r3, #13]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b2da      	uxtb	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	7b9b      	ldrb	r3, [r3, #14]
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	b2db      	uxtb	r3, r3
 800106a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b2da      	uxtb	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	7bdb      	ldrb	r3, [r3, #15]
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b2da      	uxtb	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	3303      	adds	r3, #3
 8001084:	430a      	orrs	r2, r1
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_sensor_17 & (0x03U)) | ((_m->line_sensor_18 & (0x03U)) << 2U) | ((_m->line_sensor_19 & (0x03U)) << 4U) | ((_m->line_sensor_20 & (0x03U)) << 6U) );
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	3304      	adds	r3, #4
 800108e:	7819      	ldrb	r1, [r3, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	7c1b      	ldrb	r3, [r3, #16]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	b2da      	uxtb	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	7c5b      	ldrb	r3, [r3, #17]
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	7c9b      	ldrb	r3, [r3, #18]
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	7cdb      	ldrb	r3, [r3, #19]
 80010c2:	019b      	lsls	r3, r3, #6
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3304      	adds	r3, #4
 80010ce:	430a      	orrs	r2, r1
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->line_sensor_21 & (0x03U)) | ((_m->line_sensor_22 & (0x03U)) << 2U) | ((_m->line_sensor_23 & (0x03U)) << 4U) | ((_m->line_sensor_24 & (0x03U)) << 6U) );
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	3305      	adds	r3, #5
 80010d8:	7819      	ldrb	r1, [r3, #0]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	7d1b      	ldrb	r3, [r3, #20]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	7d5b      	ldrb	r3, [r3, #21]
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	f003 030c 	and.w	r3, r3, #12
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	7d9b      	ldrb	r3, [r3, #22]
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b2da      	uxtb	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	7ddb      	ldrb	r3, [r3, #23]
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b2da      	uxtb	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	3305      	adds	r3, #5
 8001118:	430a      	orrs	r2, r1
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->line_sensor_25 & (0x03U)) | ((_m->line_sensor_26 & (0x03U)) << 2U) | ((_m->line_sensor_27 & (0x03U)) << 4U) | ((_m->line_sensor_28 & (0x03U)) << 6U) );
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	3306      	adds	r3, #6
 8001122:	7819      	ldrb	r1, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	7e1b      	ldrb	r3, [r3, #24]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	b2da      	uxtb	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	7e5b      	ldrb	r3, [r3, #25]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b2da      	uxtb	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	7e9b      	ldrb	r3, [r3, #26]
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b2da      	uxtb	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	7edb      	ldrb	r3, [r3, #27]
 8001156:	019b      	lsls	r3, r3, #6
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b2da      	uxtb	r2, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	3306      	adds	r3, #6
 8001162:	430a      	orrs	r2, r1
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( (_m->line_sensor_29 & (0x03U)) | ((_m->line_sensor_30 & (0x03U)) << 2U) | ((_m->line_sensor_31 & (0x03U)) << 4U) | ((_m->line_sensor_32 & (0x03U)) << 6U) );
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3307      	adds	r3, #7
 800116c:	7819      	ldrb	r1, [r3, #0]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	7f1b      	ldrb	r3, [r3, #28]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	b2da      	uxtb	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	7f5b      	ldrb	r3, [r3, #29]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b2da      	uxtb	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	7f9b      	ldrb	r3, [r3, #30]
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001196:	b2db      	uxtb	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b2da      	uxtb	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	7fdb      	ldrb	r3, [r3, #31]
 80011a0:	019b      	lsls	r3, r3, #6
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	3307      	adds	r3, #7
 80011ac:	430a      	orrs	r2, r1
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_1_DLC;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2208      	movs	r2, #8
 80011b6:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_1_IDE;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
  return measurements_1_CANID;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <Pack_measurements_2_jlb>:
}

#else

uint32_t Pack_measurements_2_jlb(measurements_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]
 80011de:	e007      	b.n	80011f0 <Pack_measurements_2_jlb+0x24>
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	75fa      	strb	r2, [r7, #23]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4413      	add	r3, r2
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	2b07      	cmp	r3, #7
 80011f4:	d9f4      	bls.n	80011e0 <Pack_measurements_2_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->line_sensor_1 & (0x03U)) | ((_m->line_sensor_2 & (0x03U)) << 2U) | ((_m->line_sensor_3 & (0x03U)) << 4U) | ((_m->line_sensor_4 & (0x03U)) << 6U) );
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	b2d9      	uxtb	r1, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	b2db      	uxtb	r3, r3
 8001212:	430b      	orrs	r3, r1
 8001214:	b2d9      	uxtb	r1, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	789b      	ldrb	r3, [r3, #2]
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001222:	b2db      	uxtb	r3, r3
 8001224:	430b      	orrs	r3, r1
 8001226:	b2d9      	uxtb	r1, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	78db      	ldrb	r3, [r3, #3]
 800122c:	019b      	lsls	r3, r3, #6
 800122e:	b2db      	uxtb	r3, r3
 8001230:	430b      	orrs	r3, r1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b2da      	uxtb	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->line_sensor_5 & (0x03U)) | ((_m->line_sensor_6 & (0x03U)) << 2U) | ((_m->line_sensor_7 & (0x03U)) << 4U) | ((_m->line_sensor_8 & (0x03U)) << 6U) );
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	3301      	adds	r3, #1
 8001240:	7819      	ldrb	r1, [r3, #0]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	791b      	ldrb	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	b2da      	uxtb	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	795b      	ldrb	r3, [r3, #5]
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f003 030c 	and.w	r3, r3, #12
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b2da      	uxtb	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	799b      	ldrb	r3, [r3, #6]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b2da      	uxtb	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	79db      	ldrb	r3, [r3, #7]
 8001274:	019b      	lsls	r3, r3, #6
 8001276:	b2db      	uxtb	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b2da      	uxtb	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	3301      	adds	r3, #1
 8001280:	430a      	orrs	r2, r1
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_sensor_9 & (0x03U)) | ((_m->line_sensor_10 & (0x03U)) << 2U) | ((_m->line_sensor_11 & (0x03U)) << 4U) | ((_m->line_sensor_12 & (0x03U)) << 6U) );
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	3302      	adds	r3, #2
 800128a:	7819      	ldrb	r1, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	7a1b      	ldrb	r3, [r3, #8]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	b2da      	uxtb	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	7a5b      	ldrb	r3, [r3, #9]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	7a9b      	ldrb	r3, [r3, #10]
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	7adb      	ldrb	r3, [r3, #11]
 80012be:	019b      	lsls	r3, r3, #6
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	3302      	adds	r3, #2
 80012ca:	430a      	orrs	r2, r1
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->line_sensor_13 & (0x03U)) | ((_m->line_sensor_14 & (0x03U)) << 2U) | ((_m->line_sensor_15 & (0x03U)) << 4U) | ((_m->line_sensor_16 & (0x03U)) << 6U) );
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	3303      	adds	r3, #3
 80012d4:	7819      	ldrb	r1, [r3, #0]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	7b1b      	ldrb	r3, [r3, #12]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	7b5b      	ldrb	r3, [r3, #13]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	7b9b      	ldrb	r3, [r3, #14]
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	b2da      	uxtb	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	7bdb      	ldrb	r3, [r3, #15]
 8001308:	019b      	lsls	r3, r3, #6
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b2da      	uxtb	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3303      	adds	r3, #3
 8001314:	430a      	orrs	r2, r1
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_sensor_17 & (0x03U)) | ((_m->line_sensor_18 & (0x03U)) << 2U) | ((_m->line_sensor_19 & (0x03U)) << 4U) | ((_m->line_sensor_20 & (0x03U)) << 6U) );
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	3304      	adds	r3, #4
 800131e:	7819      	ldrb	r1, [r3, #0]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	7c1b      	ldrb	r3, [r3, #16]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	b2da      	uxtb	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	7c5b      	ldrb	r3, [r3, #17]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	b2db      	uxtb	r3, r3
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b2da      	uxtb	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	7c9b      	ldrb	r3, [r3, #18]
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001348:	b2db      	uxtb	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b2da      	uxtb	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	7cdb      	ldrb	r3, [r3, #19]
 8001352:	019b      	lsls	r3, r3, #6
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	b2da      	uxtb	r2, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3304      	adds	r3, #4
 800135e:	430a      	orrs	r2, r1
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->line_sensor_21 & (0x03U)) | ((_m->line_sensor_22 & (0x03U)) << 2U) | ((_m->line_sensor_23 & (0x03U)) << 4U) | ((_m->line_sensor_24 & (0x03U)) << 6U) );
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3305      	adds	r3, #5
 8001368:	7819      	ldrb	r1, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	7d1b      	ldrb	r3, [r3, #20]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	b2da      	uxtb	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	7d5b      	ldrb	r3, [r3, #21]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b2da      	uxtb	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	7d9b      	ldrb	r3, [r3, #22]
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b2da      	uxtb	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	7ddb      	ldrb	r3, [r3, #23]
 800139c:	019b      	lsls	r3, r3, #6
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	3305      	adds	r3, #5
 80013a8:	430a      	orrs	r2, r1
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->line_sensor_25 & (0x03U)) | ((_m->line_sensor_26 & (0x03U)) << 2U) | ((_m->line_sensor_27 & (0x03U)) << 4U) | ((_m->line_sensor_28 & (0x03U)) << 6U) );
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3306      	adds	r3, #6
 80013b2:	7819      	ldrb	r1, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	7e1b      	ldrb	r3, [r3, #24]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	7e5b      	ldrb	r3, [r3, #25]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	7e9b      	ldrb	r3, [r3, #26]
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4313      	orrs	r3, r2
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	7edb      	ldrb	r3, [r3, #27]
 80013e6:	019b      	lsls	r3, r3, #6
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	3306      	adds	r3, #6
 80013f2:	430a      	orrs	r2, r1
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( (_m->line_sensor_29 & (0x03U)) | ((_m->line_sensor_30 & (0x03U)) << 2U) | ((_m->line_sensor_31 & (0x03U)) << 4U) | ((_m->line_sensor_32 & (0x03U)) << 6U) );
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	3307      	adds	r3, #7
 80013fc:	7819      	ldrb	r1, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	7f1b      	ldrb	r3, [r3, #28]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	b2da      	uxtb	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	7f5b      	ldrb	r3, [r3, #29]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b2da      	uxtb	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	7f9b      	ldrb	r3, [r3, #30]
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b2da      	uxtb	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	7fdb      	ldrb	r3, [r3, #31]
 8001430:	019b      	lsls	r3, r3, #6
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b2da      	uxtb	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	3307      	adds	r3, #7
 800143c:	430a      	orrs	r2, r1
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_2_DLC;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2208      	movs	r2, #8
 8001446:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_2_IDE;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
  return measurements_2_CANID;
 800144e:	2302      	movs	r3, #2
}
 8001450:	4618      	mov	r0, r3
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	0000      	movs	r0, r0
	...

08001460 <Pack_measurements_3_jlb>:
}

#else

uint32_t Pack_measurements_3_jlb(measurements_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_3_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
 8001472:	e007      	b.n	8001484 <Pack_measurements_3_jlb+0x24>
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	75fa      	strb	r2, [r7, #23]
 800147a:	461a      	mov	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4413      	add	r3, r2
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	2b07      	cmp	r3, #7
 8001488:	d9f4      	bls.n	8001474 <Pack_measurements_3_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->angular_velocity_x_ro = (uint16_t) JLB_angular_velocity_x_ro_toS(_m->angular_velocity_x_phys);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001490:	a34f      	add	r3, pc, #316	; (adr r3, 80015d0 <Pack_measurements_3_jlb+0x170>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7fe feeb 	bl	8000270 <__adddf3>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	a34d      	add	r3, pc, #308	; (adr r3, 80015d8 <Pack_measurements_3_jlb+0x178>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7ff f9c2 	bl	8000830 <__aeabi_ddiv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff fb42 	bl	8000b3c <__aeabi_d2uiz>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	801a      	strh	r2, [r3, #0]
  _m->angular_velocity_y_ro = (uint16_t) JLB_angular_velocity_y_ro_toS(_m->angular_velocity_y_phys);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80014c6:	a342      	add	r3, pc, #264	; (adr r3, 80015d0 <Pack_measurements_3_jlb+0x170>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7fe fed0 	bl	8000270 <__adddf3>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	a33f      	add	r3, pc, #252	; (adr r3, 80015d8 <Pack_measurements_3_jlb+0x178>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f9a7 	bl	8000830 <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb27 	bl	8000b3c <__aeabi_d2uiz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	821a      	strh	r2, [r3, #16]
  _m->angular_velocity_z_ro = (uint16_t) JLB_angular_velocity_z_ro_toS(_m->angular_velocity_z_phys);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014fc:	a334      	add	r3, pc, #208	; (adr r3, 80015d0 <Pack_measurements_3_jlb+0x170>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7fe feb5 	bl	8000270 <__adddf3>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	a332      	add	r3, pc, #200	; (adr r3, 80015d8 <Pack_measurements_3_jlb+0x178>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7ff f98c 	bl	8000830 <__aeabi_ddiv>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fb0c 	bl	8000b3c <__aeabi_d2uiz>
 8001524:	4603      	mov	r3, r0
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->angular_velocity_x_ro & (0xFFU)) );
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	781a      	ldrb	r2, [r3, #0]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b2da      	uxtb	r2, r3
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->angular_velocity_x_ro >> 8U) & (0xFFU)) );
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	3301      	adds	r3, #1
 8001542:	7819      	ldrb	r1, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	b29b      	uxth	r3, r3
 800154c:	b2da      	uxtb	r2, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3301      	adds	r3, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->angular_velocity_y_ro & (0xFFU)) );
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	3302      	adds	r3, #2
 800155c:	7819      	ldrb	r1, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8a1b      	ldrh	r3, [r3, #16]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	3302      	adds	r3, #2
 8001568:	430a      	orrs	r2, r1
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->angular_velocity_y_ro >> 8U) & (0xFFU)) );
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	3303      	adds	r3, #3
 8001572:	7819      	ldrb	r1, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8a1b      	ldrh	r3, [r3, #16]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	b29b      	uxth	r3, r3
 800157c:	b2da      	uxtb	r2, r3
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	3303      	adds	r3, #3
 8001582:	430a      	orrs	r2, r1
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->angular_velocity_z_ro & (0xFFU)) );
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	3304      	adds	r3, #4
 800158c:	7819      	ldrb	r1, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8c1b      	ldrh	r3, [r3, #32]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	3304      	adds	r3, #4
 8001598:	430a      	orrs	r2, r1
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->angular_velocity_z_ro >> 8U) & (0xFFU)) );
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3305      	adds	r3, #5
 80015a2:	7819      	ldrb	r1, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8c1b      	ldrh	r3, [r3, #32]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	3305      	adds	r3, #5
 80015b2:	430a      	orrs	r2, r1
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_3_DLC;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2208      	movs	r2, #8
 80015bc:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_3_IDE;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
  return measurements_3_CANID;
 80015c4:	2303      	movs	r3, #3
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	b4395810 	.word	0xb4395810
 80015d4:	401a36c8 	.word	0x401a36c8
 80015d8:	eb1c432d 	.word	0xeb1c432d
 80015dc:	3f2a36e2 	.word	0x3f2a36e2

080015e0 <Pack_measurements_4_jlb>:
}

#else

uint32_t Pack_measurements_4_jlb(measurements_4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_4_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]
 80015f2:	e007      	b.n	8001604 <Pack_measurements_4_jlb+0x24>
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	75fa      	strb	r2, [r7, #23]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4413      	add	r3, r2
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	2b07      	cmp	r3, #7
 8001608:	d9f4      	bls.n	80015f4 <Pack_measurements_4_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->linear_acceleration_x_ro = (uint16_t) JLB_linear_acceleration_x_ro_toS(_m->linear_acceleration_x_phys);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001610:	a34f      	add	r3, pc, #316	; (adr r3, 8001750 <Pack_measurements_4_jlb+0x170>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7fe fe2b 	bl	8000270 <__adddf3>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	a34d      	add	r3, pc, #308	; (adr r3, 8001758 <Pack_measurements_4_jlb+0x178>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f902 	bl	8000830 <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fa82 	bl	8000b3c <__aeabi_d2uiz>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	801a      	strh	r2, [r3, #0]
  _m->linear_acceleration_y_ro = (uint16_t) JLB_linear_acceleration_y_ro_toS(_m->linear_acceleration_y_phys);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001646:	a342      	add	r3, pc, #264	; (adr r3, 8001750 <Pack_measurements_4_jlb+0x170>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe fe10 	bl	8000270 <__adddf3>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	a33f      	add	r3, pc, #252	; (adr r3, 8001758 <Pack_measurements_4_jlb+0x178>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7ff f8e7 	bl	8000830 <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa67 	bl	8000b3c <__aeabi_d2uiz>
 800166e:	4603      	mov	r3, r0
 8001670:	b29a      	uxth	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	821a      	strh	r2, [r3, #16]
  _m->linear_acceleration_z_ro = (uint16_t) JLB_linear_acceleration_z_ro_toS(_m->linear_acceleration_z_phys);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800167c:	a334      	add	r3, pc, #208	; (adr r3, 8001750 <Pack_measurements_4_jlb+0x170>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe fdf5 	bl	8000270 <__adddf3>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	a332      	add	r3, pc, #200	; (adr r3, 8001758 <Pack_measurements_4_jlb+0x178>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7ff f8cc 	bl	8000830 <__aeabi_ddiv>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff fa4c 	bl	8000b3c <__aeabi_d2uiz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->linear_acceleration_x_ro & (0xFFU)) );
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	781a      	ldrb	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->linear_acceleration_x_ro >> 8U) & (0xFFU)) );
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3301      	adds	r3, #1
 80016c2:	7819      	ldrb	r1, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	3301      	adds	r3, #1
 80016d2:	430a      	orrs	r2, r1
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->linear_acceleration_y_ro & (0xFFU)) );
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	3302      	adds	r3, #2
 80016dc:	7819      	ldrb	r1, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8a1b      	ldrh	r3, [r3, #16]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	3302      	adds	r3, #2
 80016e8:	430a      	orrs	r2, r1
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->linear_acceleration_y_ro >> 8U) & (0xFFU)) );
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3303      	adds	r3, #3
 80016f2:	7819      	ldrb	r1, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8a1b      	ldrh	r3, [r3, #16]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3303      	adds	r3, #3
 8001702:	430a      	orrs	r2, r1
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->linear_acceleration_z_ro & (0xFFU)) );
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	3304      	adds	r3, #4
 800170c:	7819      	ldrb	r1, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8c1b      	ldrh	r3, [r3, #32]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	3304      	adds	r3, #4
 8001718:	430a      	orrs	r2, r1
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->linear_acceleration_z_ro >> 8U) & (0xFFU)) );
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3305      	adds	r3, #5
 8001722:	7819      	ldrb	r1, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8c1b      	ldrh	r3, [r3, #32]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	b29b      	uxth	r3, r3
 800172c:	b2da      	uxtb	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	3305      	adds	r3, #5
 8001732:	430a      	orrs	r2, r1
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_4_DLC;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2208      	movs	r2, #8
 800173c:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_4_IDE;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
  return measurements_4_CANID;
 8001744:	2304      	movs	r3, #4
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	70a3d70a 	.word	0x70a3d70a
 8001754:	4030623d 	.word	0x4030623d
 8001758:	d2f1a9fc 	.word	0xd2f1a9fc
 800175c:	3f40624d 	.word	0x3f40624d

08001760 <Pack_measurements_5_jlb>:
}

#else

uint32_t Pack_measurements_5_jlb(measurements_5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_5_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]
 8001772:	e007      	b.n	8001784 <Pack_measurements_5_jlb+0x24>
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	75fa      	strb	r2, [r7, #23]
 800177a:	461a      	mov	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4413      	add	r3, r2
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
 8001784:	7dfb      	ldrb	r3, [r7, #23]
 8001786:	2b07      	cmp	r3, #7
 8001788:	d9f4      	bls.n	8001774 <Pack_measurements_5_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->motor_rpm_ro = (uint16_t) JLB_motor_rpm_ro_toS(_m->motor_rpm_phys);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001790:	a31d      	add	r3, pc, #116	; (adr r3, 8001808 <Pack_measurements_5_jlb+0xa8>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe fd6b 	bl	8000270 <__adddf3>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	a31b      	add	r3, pc, #108	; (adr r3, 8001810 <Pack_measurements_5_jlb+0xb0>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7ff f842 	bl	8000830 <__aeabi_ddiv>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff f9c2 	bl	8000b3c <__aeabi_d2uiz>
 80017b8:	4603      	mov	r3, r0
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	801a      	strh	r2, [r3, #0]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->motor_rpm_ro & (0xFFU)) );
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	781a      	ldrb	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->motor_rpm_ro >> 8U) & (0xFFU)) );
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	3301      	adds	r3, #1
 80017d6:	7819      	ldrb	r1, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	b29b      	uxth	r3, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	3301      	adds	r3, #1
 80017e6:	430a      	orrs	r2, r1
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_5_DLC;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2208      	movs	r2, #8
 80017f0:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_5_IDE;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
  return measurements_5_CANID;
 80017f8:	2305      	movs	r3, #5
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	f3af 8000 	nop.w
 8001808:	00000000 	.word	0x00000000
 800180c:	40999980 	.word	0x40999980
 8001810:	9999999a 	.word	0x9999999a
 8001814:	3fa99999 	.word	0x3fa99999

08001818 <Pack_odometry_1_jlb>:
}

#else

uint32_t Pack_odometry_1_jlb(odometry_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(odometry_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001826:	2300      	movs	r3, #0
 8001828:	75fb      	strb	r3, [r7, #23]
 800182a:	e007      	b.n	800183c <Pack_odometry_1_jlb+0x24>
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	75fa      	strb	r2, [r7, #23]
 8001832:	461a      	mov	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4413      	add	r3, r2
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	2b07      	cmp	r3, #7
 8001840:	d9f4      	bls.n	800182c <Pack_odometry_1_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->orientation_ro = (uint16_t) JLB_orientation_ro_toS(_m->orientation_phys);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001848:	a34f      	add	r3, pc, #316	; (adr r3, 8001988 <Pack_odometry_1_jlb+0x170>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe fd0f 	bl	8000270 <__adddf3>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	a34d      	add	r3, pc, #308	; (adr r3, 8001990 <Pack_odometry_1_jlb+0x178>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7fe ffe6 	bl	8000830 <__aeabi_ddiv>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f7ff f966 	bl	8000b3c <__aeabi_d2uiz>
 8001870:	4603      	mov	r3, r0
 8001872:	b29a      	uxth	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	801a      	strh	r2, [r3, #0]
  _m->position_x_ro = (uint16_t) JLB_position_x_ro_toS(_m->position_x_phys);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800187e:	a346      	add	r3, pc, #280	; (adr r3, 8001998 <Pack_odometry_1_jlb+0x180>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fcf4 	bl	8000270 <__adddf3>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	a343      	add	r3, pc, #268	; (adr r3, 80019a0 <Pack_odometry_1_jlb+0x188>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe ffcb 	bl	8000830 <__aeabi_ddiv>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff f94b 	bl	8000b3c <__aeabi_d2uiz>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	821a      	strh	r2, [r3, #16]
  _m->position_y_ro = (uint16_t) JLB_position_y_ro_toS(_m->position_y_phys);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80018b4:	a338      	add	r3, pc, #224	; (adr r3, 8001998 <Pack_odometry_1_jlb+0x180>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe fcd9 	bl	8000270 <__adddf3>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	a336      	add	r3, pc, #216	; (adr r3, 80019a0 <Pack_odometry_1_jlb+0x188>)
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	f7fe ffb0 	bl	8000830 <__aeabi_ddiv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7ff f930 	bl	8000b3c <__aeabi_d2uiz>
 80018dc:	4603      	mov	r3, r0
 80018de:	b29a      	uxth	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->orientation_ro & (0xFFU)) );
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	781a      	ldrb	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	4313      	orrs	r3, r2
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->orientation_ro >> 8U) & (0xFFU)) );
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	3301      	adds	r3, #1
 80018fa:	7819      	ldrb	r1, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	b29b      	uxth	r3, r3
 8001904:	b2da      	uxtb	r2, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	3301      	adds	r3, #1
 800190a:	430a      	orrs	r2, r1
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->position_x_ro & (0xFFU)) );
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	3302      	adds	r3, #2
 8001914:	7819      	ldrb	r1, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8a1b      	ldrh	r3, [r3, #16]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	3302      	adds	r3, #2
 8001920:	430a      	orrs	r2, r1
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->position_x_ro >> 8U) & (0xFFU)) );
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	3303      	adds	r3, #3
 800192a:	7819      	ldrb	r1, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8a1b      	ldrh	r3, [r3, #16]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	b29b      	uxth	r3, r3
 8001934:	b2da      	uxtb	r2, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	3303      	adds	r3, #3
 800193a:	430a      	orrs	r2, r1
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->position_y_ro & (0xFFU)) );
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	3304      	adds	r3, #4
 8001944:	7819      	ldrb	r1, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8c1b      	ldrh	r3, [r3, #32]
 800194a:	b2da      	uxtb	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	3304      	adds	r3, #4
 8001950:	430a      	orrs	r2, r1
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->position_y_ro >> 8U) & (0xFFU)) );
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	3305      	adds	r3, #5
 800195a:	7819      	ldrb	r1, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8c1b      	ldrh	r3, [r3, #32]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	b29b      	uxth	r3, r3
 8001964:	b2da      	uxtb	r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3305      	adds	r3, #5
 800196a:	430a      	orrs	r2, r1
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) odometry_1_DLC;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2208      	movs	r2, #8
 8001974:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) odometry_1_IDE;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
  return odometry_1_CANID;
 800197c:	2311      	movs	r3, #17
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	b4395810 	.word	0xb4395810
 800198c:	401a36c8 	.word	0x401a36c8
 8001990:	eb1c432d 	.word	0xeb1c432d
 8001994:	3f2a36e2 	.word	0x3f2a36e2
 8001998:	70a3d70a 	.word	0x70a3d70a
 800199c:	4030623d 	.word	0x4030623d
 80019a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80019a4:	3f40624d 	.word	0x3f40624d

080019a8 <Pack_odometry_2_jlb>:
}

#else

uint32_t Pack_odometry_2_jlb(odometry_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(odometry_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80019b6:	2300      	movs	r3, #0
 80019b8:	75fb      	strb	r3, [r7, #23]
 80019ba:	e007      	b.n	80019cc <Pack_odometry_2_jlb+0x24>
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	75fa      	strb	r2, [r7, #23]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4413      	add	r3, r2
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
 80019ce:	2b07      	cmp	r3, #7
 80019d0:	d9f4      	bls.n	80019bc <Pack_odometry_2_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->angular_velocity_z_ro = (uint16_t) JLB_angular_velocity_z_ro_toS(_m->angular_velocity_z_phys);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80019d8:	a335      	add	r3, pc, #212	; (adr r3, 8001ab0 <Pack_odometry_2_jlb+0x108>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f7fe fc47 	bl	8000270 <__adddf3>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	a333      	add	r3, pc, #204	; (adr r3, 8001ab8 <Pack_odometry_2_jlb+0x110>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe ff1e 	bl	8000830 <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f89e 	bl	8000b3c <__aeabi_d2uiz>
 8001a00:	4603      	mov	r3, r0
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	801a      	strh	r2, [r3, #0]
  _m->linear_velocity_x_ro = (uint16_t) JLB_linear_velocity_x_ro_toS(_m->linear_velocity_x_phys);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a0e:	a32c      	add	r3, pc, #176	; (adr r3, 8001ac0 <Pack_odometry_2_jlb+0x118>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	f7fe fc2c 	bl	8000270 <__adddf3>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	a329      	add	r3, pc, #164	; (adr r3, 8001ac8 <Pack_odometry_2_jlb+0x120>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe ff03 	bl	8000830 <__aeabi_ddiv>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	f7ff f883 	bl	8000b3c <__aeabi_d2uiz>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	821a      	strh	r2, [r3, #16]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->angular_velocity_z_ro & (0xFFU)) );
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	781a      	ldrb	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->angular_velocity_z_ro >> 8U) & (0xFFU)) );
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	3301      	adds	r3, #1
 8001a54:	7819      	ldrb	r1, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	0a1b      	lsrs	r3, r3, #8
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	3301      	adds	r3, #1
 8001a64:	430a      	orrs	r2, r1
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->linear_velocity_x_ro & (0xFFU)) );
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	7819      	ldrb	r1, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8a1b      	ldrh	r3, [r3, #16]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	3302      	adds	r3, #2
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->linear_velocity_x_ro >> 8U) & (0xFFU)) );
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	3303      	adds	r3, #3
 8001a84:	7819      	ldrb	r1, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8a1b      	ldrh	r3, [r3, #16]
 8001a8a:	0a1b      	lsrs	r3, r3, #8
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	3303      	adds	r3, #3
 8001a94:	430a      	orrs	r2, r1
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) odometry_2_DLC;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2208      	movs	r2, #8
 8001a9e:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) odometry_2_IDE;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
  return odometry_2_CANID;
 8001aa6:	2312      	movs	r3, #18
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	b4395810 	.word	0xb4395810
 8001ab4:	401a36c8 	.word	0x401a36c8
 8001ab8:	eb1c432d 	.word	0xeb1c432d
 8001abc:	3f2a36e2 	.word	0x3f2a36e2
 8001ac0:	70a3d70a 	.word	0x70a3d70a
 8001ac4:	4030623d 	.word	0x4030623d
 8001ac8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001acc:	3f40624d 	.word	0x3f40624d

08001ad0 <Pack_logic_1_jlb>:
}

#else

uint32_t Pack_logic_1_jlb(logic_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001ade:	2300      	movs	r3, #0
 8001ae0:	75fb      	strb	r3, [r7, #23]
 8001ae2:	e007      	b.n	8001af4 <Pack_logic_1_jlb+0x24>
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	75fa      	strb	r2, [r7, #23]
 8001aea:	461a      	mov	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4413      	add	r3, r2
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	2b07      	cmp	r3, #7
 8001af8:	d9f4      	bls.n	8001ae4 <Pack_logic_1_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->target_angle_ro = (uint16_t) JLB_target_angle_ro_toS(_m->target_angle_phys);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b00:	a335      	add	r3, pc, #212	; (adr r3, 8001bd8 <Pack_logic_1_jlb+0x108>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	f7fe fbb3 	bl	8000270 <__adddf3>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	a333      	add	r3, pc, #204	; (adr r3, 8001be0 <Pack_logic_1_jlb+0x110>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fe8a 	bl	8000830 <__aeabi_ddiv>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff f80a 	bl	8000b3c <__aeabi_d2uiz>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	801a      	strh	r2, [r3, #0]
  _m->target_speed_ro = (uint16_t) JLB_target_speed_ro_toS(_m->target_speed_phys);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b36:	a32c      	add	r3, pc, #176	; (adr r3, 8001be8 <Pack_logic_1_jlb+0x118>)
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	f7fe fb98 	bl	8000270 <__adddf3>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	a329      	add	r3, pc, #164	; (adr r3, 8001bf0 <Pack_logic_1_jlb+0x120>)
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	f7fe fe6f 	bl	8000830 <__aeabi_ddiv>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f7fe ffef 	bl	8000b3c <__aeabi_d2uiz>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	821a      	strh	r2, [r3, #16]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->target_angle_ro & (0xFFU)) );
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	781a      	ldrb	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	4313      	orrs	r3, r2
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->target_angle_ro >> 8U) & (0xFFU)) );
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	7819      	ldrb	r1, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	0a1b      	lsrs	r3, r3, #8
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->target_speed_ro & (0xFFU)) );
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3302      	adds	r3, #2
 8001b96:	7819      	ldrb	r1, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8a1b      	ldrh	r3, [r3, #16]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->target_speed_ro >> 8U) & (0xFFU)) );
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	3303      	adds	r3, #3
 8001bac:	7819      	ldrb	r1, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8a1b      	ldrh	r3, [r3, #16]
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	3303      	adds	r3, #3
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_1_DLC;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_1_IDE;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
  return logic_1_CANID;
 8001bce:	2321      	movs	r3, #33	; 0x21
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	b4395810 	.word	0xb4395810
 8001bdc:	400a36c8 	.word	0x400a36c8
 8001be0:	eb1c432d 	.word	0xeb1c432d
 8001be4:	3f1a36e2 	.word	0x3f1a36e2
 8001be8:	70a3d70a 	.word	0x70a3d70a
 8001bec:	4030623d 	.word	0x4030623d
 8001bf0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bf4:	3f40624d 	.word	0x3f40624d

08001bf8 <HAL_ADC_ConvCpltCallback>:
uint32_t adc_values_raw[8];
analog_signals_s adc_values = {0u};
uint8_t channel_idx = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	adc_values.motor_batt_voltage_raw = adc_values_raw[0];
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_ADC_ConvCpltCallback+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_ADC_ConvCpltCallback+0x68>)
 8001c08:	801a      	strh	r2, [r3, #0]
	adc_values.motor_curr_raw = adc_values_raw[1];
 8001c0a:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_ADC_ConvCpltCallback+0x64>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_ADC_ConvCpltCallback+0x68>)
 8001c12:	805a      	strh	r2, [r3, #2]
	adc_values.vbus_raw = adc_values_raw[2];
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_ADC_ConvCpltCallback+0x64>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_ADC_ConvCpltCallback+0x68>)
 8001c1c:	809a      	strh	r2, [r3, #4]
	adc_values.distance_short2_raw = adc_values_raw[3];
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_ADC_ConvCpltCallback+0x64>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_ADC_ConvCpltCallback+0x68>)
 8001c26:	80da      	strh	r2, [r3, #6]
	adc_values.distance_short1_raw = adc_values_raw[4];
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <HAL_ADC_ConvCpltCallback+0x64>)
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_ADC_ConvCpltCallback+0x68>)
 8001c30:	811a      	strh	r2, [r3, #8]
	adc_values.distance_long1_raw = adc_values_raw[5];
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_ADC_ConvCpltCallback+0x64>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_ADC_ConvCpltCallback+0x68>)
 8001c3a:	815a      	strh	r2, [r3, #10]
	adc_values.lv_batt_voltage_raw = adc_values_raw[6];
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <HAL_ADC_ConvCpltCallback+0x64>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_ADC_ConvCpltCallback+0x68>)
 8001c44:	819a      	strh	r2, [r3, #12]
	adc_values.distance_long2_raw = adc_values_raw[7];
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_ADC_ConvCpltCallback+0x64>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <HAL_ADC_ConvCpltCallback+0x68>)
 8001c4e:	81da      	strh	r2, [r3, #14]

	//vTaskResume(mainTaskHandle);
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	200000a0 	.word	0x200000a0
 8001c60:	200000c0 	.word	0x200000c0

08001c64 <_Z16MotorControlTaskv>:
extern TIM_HandleTypeDef htim5;

float pi_integral_error = 0;

void MotorControlTask()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_SET);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2108      	movs	r1, #8
 8001c6e:	4835      	ldr	r0, [pc, #212]	; (8001d44 <_Z16MotorControlTaskv+0xe0>)
 8001c70:	f00f ffa0 	bl	8011bb4 <HAL_GPIO_WritePin>
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 8001c74:	4b34      	ldr	r3, [pc, #208]	; (8001d48 <_Z16MotorControlTaskv+0xe4>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	ee07 3a90 	vmov	s15, r3
 8001c7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c80:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001d4c <_Z16MotorControlTaskv+0xe8>
 8001c84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c88:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001d50 <_Z16MotorControlTaskv+0xec>
 8001c8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c90:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001d54 <_Z16MotorControlTaskv+0xf0>
 8001c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c98:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <_Z16MotorControlTaskv+0xf4>)
 8001c9a:	edc3 7a00 	vstr	s15, [r3]
	motorcontrol.motor_current = (((float)(adc_values.motor_curr_raw)) / 4096.0f * 3.3f - MOTOR_CURR_NULL) * MOTOR_CURR_SENSITIVITY;
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <_Z16MotorControlTaskv+0xe4>)
 8001ca0:	885b      	ldrh	r3, [r3, #2]
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001caa:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001d4c <_Z16MotorControlTaskv+0xe8>
 8001cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001d50 <_Z16MotorControlTaskv+0xec>
 8001cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cba:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001d5c <_Z16MotorControlTaskv+0xf8>
 8001cbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cc2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001d60 <_Z16MotorControlTaskv+0xfc>
 8001cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cca:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <_Z16MotorControlTaskv+0xf4>)
 8001ccc:	edc3 7a01 	vstr	s15, [r3, #4]

	float pi_error = motorcontrol.target_velocity - motorcontrol.actual_velocity;
 8001cd0:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <_Z16MotorControlTaskv+0xf4>)
 8001cd2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cd6:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <_Z16MotorControlTaskv+0xf4>)
 8001cd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce0:	edc7 7a03 	vstr	s15, [r7, #12]
	float pi_proportional_error = pi_error * SPEED_CONTROLER_KP;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	60bb      	str	r3, [r7, #8]
	pi_integral_error = pi_error * SPEED_CONTROLLER_KI / MOTOR_CONTROL_TASK_FREQ;
 8001ce8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cec:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001d64 <_Z16MotorControlTaskv+0x100>
 8001cf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cf4:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <_Z16MotorControlTaskv+0x104>)
 8001cf6:	edc3 7a00 	vstr	s15, [r3]

	//float duty_cycle = pi_integral_error + pi_proportional_error;
	float duty_cycle = 0.42f;
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <_Z16MotorControlTaskv+0x108>)
 8001cfc:	607b      	str	r3, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, duty_cycle * PWM_COUNTER_PREIOD);
 8001cfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d02:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001d70 <_Z16MotorControlTaskv+0x10c>
 8001d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <_Z16MotorControlTaskv+0x110>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d12:	ee17 2a90 	vmov	r2, s15
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (duty_cycle * PWM_COUNTER_PREIOD));
 8001d18:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d1c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001d70 <_Z16MotorControlTaskv+0x10c>
 8001d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d24:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001d70 <_Z16MotorControlTaskv+0x10c>
 8001d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <_Z16MotorControlTaskv+0x110>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d34:	ee17 2a90 	vmov	r2, s15
 8001d38:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	42021400 	.word	0x42021400
 8001d48:	200000c0 	.word	0x200000c0
 8001d4c:	45800000 	.word	0x45800000
 8001d50:	40533333 	.word	0x40533333
 8001d54:	40b66666 	.word	0x40b66666
 8001d58:	200000d0 	.word	0x200000d0
 8001d5c:	3fd47ae1 	.word	0x3fd47ae1
 8001d60:	3c112989 	.word	0x3c112989
 8001d64:	43480000 	.word	0x43480000
 8001d68:	200000e4 	.word	0x200000e4
 8001d6c:	3ed70a3d 	.word	0x3ed70a3d
 8001d70:	44e54000 	.word	0x44e54000
 8001d74:	200005d4 	.word	0x200005d4

08001d78 <_Z10Radio_Initv>:
bool flood_active = false;
uint8_t flood_counter = 0;
char pirate_from, pirate_to, pirate_next;
int pirate_percentage = 0;
void Radio_Init()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT (&huart4, radio_rxBuffer, 12);
 8001d7c:	220c      	movs	r2, #12
 8001d7e:	4903      	ldr	r1, [pc, #12]	; (8001d8c <_Z10Radio_Initv+0x14>)
 8001d80:	4803      	ldr	r0, [pc, #12]	; (8001d90 <_Z10Radio_Initv+0x18>)
 8001d82:	f013 fef9 	bl	8015b78 <HAL_UART_Receive_IT>

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200000e8 	.word	0x200000e8
 8001d90:	200002c0 	.word	0x200002c0

08001d94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	6078      	str	r0, [r7, #4]
	uint8_t i, length;
    HAL_UART_Receive_IT(&huart4, radio_rxBuffer, 12);
 8001d9c:	220c      	movs	r2, #12
 8001d9e:	4922      	ldr	r1, [pc, #136]	; (8001e28 <HAL_UART_RxCpltCallback+0x94>)
 8001da0:	4822      	ldr	r0, [pc, #136]	; (8001e2c <HAL_UART_RxCpltCallback+0x98>)
 8001da2:	f013 fee9 	bl	8015b78 <HAL_UART_Receive_IT>
    // Check to see where is the termination character to determine what type of message is received
    for(i = 0; i < 12; ++i)
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]
 8001daa:	e009      	b.n	8001dc0 <HAL_UART_RxCpltCallback+0x2c>
    {
    	if(radio_rxBuffer[i] == '\r')
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	4a1e      	ldr	r2, [pc, #120]	; (8001e28 <HAL_UART_RxCpltCallback+0x94>)
 8001db0:	5cd3      	ldrb	r3, [r2, r3]
 8001db2:	2b0d      	cmp	r3, #13
 8001db4:	d101      	bne.n	8001dba <HAL_UART_RxCpltCallback+0x26>
    	{
    		length = i;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < 12; ++i)
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	2b0b      	cmp	r3, #11
 8001dc4:	d9f2      	bls.n	8001dac <HAL_UART_RxCpltCallback+0x18>
    	}
    }
    // Labirinth countdown message received
    if(length == 1)
 8001dc6:	7bbb      	ldrb	r3, [r7, #14]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d103      	bne.n	8001dd4 <HAL_UART_RxCpltCallback+0x40>
    {
    	countdown_value = radio_rxBuffer[0];
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_UART_RxCpltCallback+0x94>)
 8001dce:	781a      	ldrb	r2, [r3, #0]
 8001dd0:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <HAL_UART_RxCpltCallback+0x9c>)
 8001dd2:	701a      	strb	r2, [r3, #0]
    }
    if(length == 6)
 8001dd4:	7bbb      	ldrb	r3, [r7, #14]
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d115      	bne.n	8001e06 <HAL_UART_RxCpltCallback+0x72>
    {
    	//FLOOD message received
    	if(!strcmp("FLOOD!\r", reinterpret_cast<const char*>(radio_rxBuffer)))
 8001dda:	4913      	ldr	r1, [pc, #76]	; (8001e28 <HAL_UART_RxCpltCallback+0x94>)
 8001ddc:	4815      	ldr	r0, [pc, #84]	; (8001e34 <HAL_UART_RxCpltCallback+0xa0>)
 8001dde:	f7fe fa2f 	bl	8000240 <strcmp>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d103      	bne.n	8001df0 <HAL_UART_RxCpltCallback+0x5c>
    	{
    		flood_active = true;
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <HAL_UART_RxCpltCallback+0xa4>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	e010      	b.n	8001e12 <HAL_UART_RxCpltCallback+0x7e>
    	}
    	else
    	{
    		sscanf(reinterpret_cast<const char*>(radio_rxBuffer), "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_UART_RxCpltCallback+0xa8>)
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_UART_RxCpltCallback+0xac>)
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_UART_RxCpltCallback+0xb0>)
 8001dfa:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <HAL_UART_RxCpltCallback+0xb4>)
 8001dfc:	4913      	ldr	r1, [pc, #76]	; (8001e4c <HAL_UART_RxCpltCallback+0xb8>)
 8001dfe:	480a      	ldr	r0, [pc, #40]	; (8001e28 <HAL_UART_RxCpltCallback+0x94>)
 8001e00:	f01b f83e 	bl	801ce80 <siscanf>
 8001e04:	e005      	b.n	8001e12 <HAL_UART_RxCpltCallback+0x7e>
    	}
    }

    else
    {
    	flood_counter++;
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_UART_RxCpltCallback+0xbc>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_UART_RxCpltCallback+0xbc>)
 8001e10:	701a      	strb	r2, [r3, #0]
    }

    if(flood_counter > 10)
 8001e12:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <HAL_UART_RxCpltCallback+0xbc>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b0a      	cmp	r3, #10
 8001e18:	d902      	bls.n	8001e20 <HAL_UART_RxCpltCallback+0x8c>
    {
    	flood_active = false;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <HAL_UART_RxCpltCallback+0xa4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
    }

}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	200000e8 	.word	0x200000e8
 8001e2c:	200002c0 	.word	0x200002c0
 8001e30:	20000000 	.word	0x20000000
 8001e34:	0801e530 	.word	0x0801e530
 8001e38:	200000f4 	.word	0x200000f4
 8001e3c:	200000fc 	.word	0x200000fc
 8001e40:	200000f8 	.word	0x200000f8
 8001e44:	200000f7 	.word	0x200000f7
 8001e48:	200000f6 	.word	0x200000f6
 8001e4c:	0801e538 	.word	0x0801e538
 8001e50:	200000f5 	.word	0x200000f5

08001e54 <_Z16SetSteeringAnglef>:
#include "main.h"

extern TIM_HandleTypeDef htim1;
/* Angle in +90 to -90 degree */
void SetSteeringAngle(float angle)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t compare = SERVO_NULL + (angle / 90.0f * SERVO_RANGE);
 8001e5e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e62:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001e98 <_Z16SetSteeringAnglef+0x44>
 8001e66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e6a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001e9c <_Z16SetSteeringAnglef+0x48>
 8001e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e72:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001ea0 <_Z16SetSteeringAnglef+0x4c>
 8001e76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e7e:	ee17 3a90 	vmov	r3, s15
 8001e82:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare);
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <_Z16SetSteeringAnglef+0x50>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	89fa      	ldrh	r2, [r7, #14]
 8001e8a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	42b40000 	.word	0x42b40000
 8001e9c:	442f0000 	.word	0x442f0000
 8001ea0:	44bb8000 	.word	0x44bb8000
 8001ea4:	2000053c 	.word	0x2000053c

08001ea8 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	ed87 0a01 	vstr	s0, [r7, #4]
 8001eb2:	edc7 0a00 	vstr	s1, [r7]
 8001eb6:	edd7 0a00 	vldr	s1, [r7]
 8001eba:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ebe:	f018 fd21 	bl	801a904 <atan2f>
 8001ec2:	eef0 7a40 	vmov.f32	s15, s0
 8001ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001eda:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ede:	f018 fd13 	bl	801a908 <cosf>
 8001ee2:	eef0 7a40 	vmov.f32	s15, s0
 8001ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001efa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001efe:	eef0 7ae7 	vabs.f32	s15, s15
 8001f02:	eeb0 0a67 	vmov.f32	s0, s15
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f1a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f1e:	f018 fd37 	bl	801a990 <sinf>
 8001f22:	eef0 7a40 	vmov.f32	s15, s0
 8001f26:	eeb0 0a67 	vmov.f32	s0, s15
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_ZSt21is_constant_evaluatedv>:
#define __cpp_lib_is_constant_evaluated 201811L

  /// Returns true only when called during constant evaluation.
  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	2300      	movs	r3, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:

    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	7138      	strb	r0, [r7, #4]
 8001f60:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 8001f62:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	09db      	lsrs	r3, r3, #7
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	bf00      	nop
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	7138      	strb	r0, [r7, #4]
 8001fa8:	bf00      	nop
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	f1c3 031f 	rsb	r3, r3, #31
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe2:	d205      	bcs.n	8001ff0 <_ZSt16__deque_buf_sizej+0x1c>
 8001fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fee:	e000      	b.n	8001ff2 <_ZSt16__deque_buf_sizej+0x1e>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <_ZNSt5dequeIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4618      	mov	r0, r3
 800200a:	f006 fab9 	bl	8008580 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_ZN3jlb8OdometryC1Efff>:
        float meas_ang_vel_z = 0.0f;
        float meas_lin_acc_x = 0.0f;
        float meas_lin_acc_y = 0.0f;
        float meas_lin_acc_z = 0.0f;

        Odometry(const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f)
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	ed87 0a02 	vstr	s0, [r7, #8]
 8002024:	edc7 0a01 	vstr	s1, [r7, #4]
 8002028:	ed87 1a00 	vstr	s2, [r7]
            : x_t(x_t_), y_t(y_t_), theta_t(normalize_angle(theta_t_)) {}
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	ed97 0a00 	vldr	s0, [r7]
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 fa43 	bl	80024d8 <_ZN3jlb8Odometry15normalize_angleEf>
 8002052:	eef0 7a40 	vmov.f32	s15, s0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	edc3 7a04 	vstr	s15, [r3, #16]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	615a      	str	r2, [r3, #20]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	61da      	str	r2, [r3, #28]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	621a      	str	r2, [r3, #32]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3330      	adds	r3, #48	; 0x30
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ffb0 	bl	8001ffe <_ZNSt5dequeIfSaIfEEC1Ev>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3358      	adds	r3, #88	; 0x58
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ffab 	bl	8001ffe <_ZNSt5dequeIfSaIfEEC1Ev>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	0000      	movs	r0, r0
 80020bc:	0000      	movs	r0, r0
	...

080020c0 <_ZN3jlb8Odometry12rpm_callbackEf>:

        ~Odometry() {}

        void rpm_callback(const float motor_rpm)
 80020c0:	b580      	push	{r7, lr}
 80020c2:	ed2d 8b02 	vpush	{d8}
 80020c6:	b08c      	sub	sp, #48	; 0x30
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	ed87 0a00 	vstr	s0, [r7]
        {
            meas_motor_rpm = motor_rpm;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	615a      	str	r2, [r3, #20]

            float wheel_rpm = motor_rpm * jlb::GEAR_RATIO_MOTOR_TO_WHEEL;
 80020d6:	edd7 7a00 	vldr	s15, [r7]
 80020da:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80021e8 <_ZN3jlb8Odometry12rpm_callbackEf+0x128>
 80020de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020e2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            float velocity = M_PI * jlb::WHEEL_DIAMETER * wheel_rpm / 60.0f;
 80020e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020e8:	f7fe fa20 	bl	800052c <__aeabi_f2d>
 80020ec:	a33c      	add	r3, pc, #240	; (adr r3, 80021e0 <_ZN3jlb8Odometry12rpm_callbackEf+0x120>)
 80020ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f2:	f7fe fa73 	bl	80005dc <__aeabi_dmul>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	4b3a      	ldr	r3, [pc, #232]	; (80021ec <_ZN3jlb8Odometry12rpm_callbackEf+0x12c>)
 8002104:	f7fe fb94 	bl	8000830 <__aeabi_ddiv>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	f7fe fd34 	bl	8000b7c <__aeabi_d2f>
 8002114:	4603      	mov	r3, r0
 8002116:	60bb      	str	r3, [r7, #8]

            if (std::fabs(velocity) > jlb::MAX_VELOCITY)
 8002118:	edd7 7a02 	vldr	s15, [r7, #8]
 800211c:	eeb0 0a67 	vmov.f32	s0, s15
 8002120:	f7ff fee6 	bl	8001ef0 <_ZSt4fabsf>
 8002124:	eef0 7a40 	vmov.f32	s15, s0
 8002128:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800212c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002134:	bfcc      	ite	gt
 8002136:	2301      	movgt	r3, #1
 8002138:	2300      	movle	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d146      	bne.n	80021ce <_ZN3jlb8Odometry12rpm_callbackEf+0x10e>
            {
                return;
            }

            v_buffer_.push_back(velocity);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3330      	adds	r3, #48	; 0x30
 8002144:	f107 0208 	add.w	r2, r7, #8
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f006 fa29 	bl	80085a2 <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (v_buffer_.size() > jlb::VELOCITY_BUFFER_SIZE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3330      	adds	r3, #48	; 0x30
 8002154:	4618      	mov	r0, r3
 8002156:	f006 fa45 	bl	80085e4 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800215a:	4603      	mov	r3, r0
 800215c:	2b03      	cmp	r3, #3
 800215e:	bf8c      	ite	hi
 8002160:	2301      	movhi	r3, #1
 8002162:	2300      	movls	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d004      	beq.n	8002174 <_ZN3jlb8Odometry12rpm_callbackEf+0xb4>
            {
                v_buffer_.pop_front();
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3330      	adds	r3, #48	; 0x30
 800216e:	4618      	mov	r0, r3
 8002170:	f006 fa4a 	bl	8008608 <_ZNSt5dequeIfSaIfEE9pop_frontEv>
            }

            vx_t = std::accumulate(v_buffer_.begin(), v_buffer_.end(), 0.0f) / v_buffer_.size();
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f006 fa64 	bl	800864e <_ZNSt5dequeIfSaIfEE5beginEv>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f006 fa6a 	bl	800866c <_ZNSt5dequeIfSaIfEE3endEv>
 8002198:	f107 021c 	add.w	r2, r7, #28
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80021f0 <_ZN3jlb8Odometry12rpm_callbackEf+0x130>
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f006 fa7a 	bl	80086a0 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 80021ac:	eeb0 8a40 	vmov.f32	s16, s0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3330      	adds	r3, #48	; 0x30
 80021b4:	4618      	mov	r0, r3
 80021b6:	f006 fa15 	bl	80085e4 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 80021ba:	ee07 0a90 	vmov	s15, r0
 80021be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021c2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	edc3 7a00 	vstr	s15, [r3]
 80021cc:	e000      	b.n	80021d0 <_ZN3jlb8Odometry12rpm_callbackEf+0x110>
                return;
 80021ce:	bf00      	nop
        }
 80021d0:	3730      	adds	r7, #48	; 0x30
 80021d2:	46bd      	mov	sp, r7
 80021d4:	ecbd 8b02 	vpop	{d8}
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	f3af 8000 	nop.w
 80021e0:	64af6f9d 	.word	0x64af6f9d
 80021e4:	3fd51c8b 	.word	0x3fd51c8b
 80021e8:	406c4ec5 	.word	0x406c4ec5
 80021ec:	404e0000 	.word	0x404e0000
 80021f0:	00000000 	.word	0x00000000

080021f4 <_ZN3jlb8Odometry12imu_callbackEf>:

        void imu_callback(const float ang_vel_z)
 80021f4:	b580      	push	{r7, lr}
 80021f6:	ed2d 8b02 	vpush	{d8}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	ed87 0a00 	vstr	s0, [r7]
        {
            meas_ang_vel_z = ang_vel_z;
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	621a      	str	r2, [r3, #32]

            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE)
 800220a:	edd7 7a00 	vldr	s15, [r7]
 800220e:	eeb0 0a67 	vmov.f32	s0, s15
 8002212:	f7ff fe6d 	bl	8001ef0 <_ZSt4fabsf>
 8002216:	eef0 7a40 	vmov.f32	s15, s0
 800221a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80022cc <_ZN3jlb8Odometry12imu_callbackEf+0xd8>
 800221e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002226:	bfcc      	ite	gt
 8002228:	2301      	movgt	r3, #1
 800222a:	2300      	movle	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d145      	bne.n	80022be <_ZN3jlb8Odometry12imu_callbackEf+0xca>
            {
                return;
            }

            w_buffer_.push_back(ang_vel_z);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3358      	adds	r3, #88	; 0x58
 8002236:	463a      	mov	r2, r7
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f006 f9b1 	bl	80085a2 <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (w_buffer_.size() > jlb::IMU_BUFFER_SIZE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3358      	adds	r3, #88	; 0x58
 8002244:	4618      	mov	r0, r3
 8002246:	f006 f9cd 	bl	80085e4 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800224a:	4603      	mov	r3, r0
 800224c:	2b03      	cmp	r3, #3
 800224e:	bf8c      	ite	hi
 8002250:	2301      	movhi	r3, #1
 8002252:	2300      	movls	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d004      	beq.n	8002264 <_ZN3jlb8Odometry12imu_callbackEf+0x70>
            {
                w_buffer_.pop_front();
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3358      	adds	r3, #88	; 0x58
 800225e:	4618      	mov	r0, r3
 8002260:	f006 f9d2 	bl	8008608 <_ZNSt5dequeIfSaIfEE9pop_frontEv>
            }

            w_t = std::accumulate(w_buffer_.begin(), w_buffer_.end(), 0.0f) / w_buffer_.size();
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800226a:	f107 0308 	add.w	r3, r7, #8
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f006 f9ec 	bl	800864e <_ZNSt5dequeIfSaIfEE5beginEv>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800227c:	f107 0318 	add.w	r3, r7, #24
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f006 f9f2 	bl	800866c <_ZNSt5dequeIfSaIfEE3endEv>
 8002288:	f107 0218 	add.w	r2, r7, #24
 800228c:	f107 0308 	add.w	r3, r7, #8
 8002290:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80022d0 <_ZN3jlb8Odometry12imu_callbackEf+0xdc>
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f006 fa02 	bl	80086a0 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 800229c:	eeb0 8a40 	vmov.f32	s16, s0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3358      	adds	r3, #88	; 0x58
 80022a4:	4618      	mov	r0, r3
 80022a6:	f006 f99d 	bl	80085e4 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 80022aa:	ee07 0a90 	vmov	s15, r0
 80022ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022b2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	edc3 7a01 	vstr	s15, [r3, #4]
 80022bc:	e000      	b.n	80022c0 <_ZN3jlb8Odometry12imu_callbackEf+0xcc>
                return;
 80022be:	bf00      	nop
        }
 80022c0:	3728      	adds	r7, #40	; 0x28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	ecbd 8b02 	vpop	{d8}
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	4096cbe4 	.word	0x4096cbe4
	...

080022d8 <_ZN3jlb8Odometry11update_odomEv>:

        Odom update_odom()
 80022d8:	b580      	push	{r7, lr}
 80022da:	ed2d 8b02 	vpush	{d8}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6178      	str	r0, [r7, #20]
        {
#ifdef STM32
            // TODO: add timestamp and dt
        	float dt = 5.0f;
 80022e4:	4b6c      	ldr	r3, [pc, #432]	; (8002498 <_ZN3jlb8Odometry11update_odomEv+0x1c0>)
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c

            auto update_timestamp = std::chrono::steady_clock::now();
            float dt = std::chrono::duration_cast<std::chrono::milliseconds>(update_timestamp - odom_timestamp_).count() / 1000.0f;
#endif

            if (dt > 0.0f)
 80022e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80022ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f4:	f340 80a1 	ble.w	800243a <_ZN3jlb8Odometry11update_odomEv+0x162>
            {
                vx_t = std::fabs(vx_t) < 0.03 ? 0.0 : vx_t;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002302:	f7ff fdf5 	bl	8001ef0 <_ZSt4fabsf>
 8002306:	ee10 3a10 	vmov	r3, s0
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe f90e 	bl	800052c <__aeabi_f2d>
 8002310:	a35d      	add	r3, pc, #372	; (adr r3, 8002488 <_ZN3jlb8Odometry11update_odomEv+0x1b0>)
 8002312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002316:	f7fe fbd3 	bl	8000ac0 <__aeabi_dcmplt>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <_ZN3jlb8Odometry11update_odomEv+0x4e>
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e001      	b.n	800232a <_ZN3jlb8Odometry11update_odomEv+0x52>
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	6013      	str	r3, [r2, #0]
                w_t = std::fabs(w_t) < 0.015 ? 0.0 : w_t;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	edd3 7a01 	vldr	s15, [r3, #4]
 8002334:	eeb0 0a67 	vmov.f32	s0, s15
 8002338:	f7ff fdda 	bl	8001ef0 <_ZSt4fabsf>
 800233c:	ee10 3a10 	vmov	r3, s0
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f8f3 	bl	800052c <__aeabi_f2d>
 8002346:	a352      	add	r3, pc, #328	; (adr r3, 8002490 <_ZN3jlb8Odometry11update_odomEv+0x1b8>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe fbb8 	bl	8000ac0 <__aeabi_dcmplt>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <_ZN3jlb8Odometry11update_odomEv+0x84>
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	e001      	b.n	8002360 <_ZN3jlb8Odometry11update_odomEv+0x88>
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	6053      	str	r3, [r2, #4]
                // float vy_t = WHEELBASE * w_t / 2.0f;
                float vy_t = 0.0f;
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28

                x_t += (vx_t * std::cos(theta_t) - vy_t * std::sin(theta_t)) * dt;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	ed93 8a00 	vldr	s16, [r3]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	edd3 7a04 	vldr	s15, [r3, #16]
 8002376:	eeb0 0a67 	vmov.f32	s0, s15
 800237a:	f7ff fda9 	bl	8001ed0 <_ZSt3cosf>
 800237e:	eef0 7a40 	vmov.f32	s15, s0
 8002382:	ee28 8a27 	vmul.f32	s16, s16, s15
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	edd3 7a04 	vldr	s15, [r3, #16]
 800238c:	eeb0 0a67 	vmov.f32	s0, s15
 8002390:	f7ff fdbe 	bl	8001f10 <_ZSt3sinf>
 8002394:	eeb0 7a40 	vmov.f32	s14, s0
 8002398:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800239c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a0:	ee38 7a67 	vsub.f32	s14, s16, s15
 80023a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80023b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	edc3 7a02 	vstr	s15, [r3, #8]
                y_t += (vx_t * std::sin(theta_t) + vy_t * std::cos(theta_t)) * dt;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	ed93 8a00 	vldr	s16, [r3]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80023c8:	eeb0 0a67 	vmov.f32	s0, s15
 80023cc:	f7ff fda0 	bl	8001f10 <_ZSt3sinf>
 80023d0:	eef0 7a40 	vmov.f32	s15, s0
 80023d4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	edd3 7a04 	vldr	s15, [r3, #16]
 80023de:	eeb0 0a67 	vmov.f32	s0, s15
 80023e2:	f7ff fd75 	bl	8001ed0 <_ZSt3cosf>
 80023e6:	eeb0 7a40 	vmov.f32	s14, s0
 80023ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80023ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f2:	ee38 7a27 	vadd.f32	s14, s16, s15
 80023f6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	edd3 7a03 	vldr	s15, [r3, #12]
 8002404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	edc3 7a03 	vstr	s15, [r3, #12]
                theta_t = normalize_angle(theta_t + w_t * dt);
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	ed93 7a04 	vldr	s14, [r3, #16]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	edd3 6a01 	vldr	s13, [r3, #4]
 800241a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800241e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002426:	eeb0 0a67 	vmov.f32	s0, s15
 800242a:	6978      	ldr	r0, [r7, #20]
 800242c:	f000 f854 	bl	80024d8 <_ZN3jlb8Odometry15normalize_angleEf>
 8002430:	eef0 7a40 	vmov.f32	s15, s0
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	edc3 7a04 	vstr	s15, [r3, #16]
            }
#ifndef STM32
            odom_timestamp_ = update_timestamp > odom_timestamp_ ? update_timestamp : odom_timestamp_;
#endif
            return {vx_t, x_t, y_t, theta_t};
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	61bb      	str	r3, [r7, #24]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	623b      	str	r3, [r7, #32]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
 8002452:	69b8      	ldr	r0, [r7, #24]
 8002454:	69f9      	ldr	r1, [r7, #28]
 8002456:	6a3a      	ldr	r2, [r7, #32]
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	ee06 0a10 	vmov	s12, r0
 800245e:	ee06 1a90 	vmov	s13, r1
 8002462:	ee07 2a10 	vmov	s14, r2
 8002466:	ee07 3a90 	vmov	s15, r3
        }
 800246a:	eeb0 0a46 	vmov.f32	s0, s12
 800246e:	eef0 0a66 	vmov.f32	s1, s13
 8002472:	eeb0 1a47 	vmov.f32	s2, s14
 8002476:	eef0 1a67 	vmov.f32	s3, s15
 800247a:	3730      	adds	r7, #48	; 0x30
 800247c:	46bd      	mov	sp, r7
 800247e:	ecbd 8b02 	vpop	{d8}
 8002482:	bd80      	pop	{r7, pc}
 8002484:	f3af 8000 	nop.w
 8002488:	eb851eb8 	.word	0xeb851eb8
 800248c:	3f9eb851 	.word	0x3f9eb851
 8002490:	eb851eb8 	.word	0xeb851eb8
 8002494:	3f8eb851 	.word	0x3f8eb851
 8002498:	40a00000 	.word	0x40a00000

0800249c <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    fmod(_Tp __x, _Up __y)
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80024a6:	ed87 1b00 	vstr	d1, [r7]
      return fmod(__type(__x), __type(__y));
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7fe f83e 	bl	800052c <__aeabi_f2d>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	ed97 1b00 	vldr	d1, [r7]
 80024b8:	ec43 2b10 	vmov	d0, r2, r3
 80024bc:	f018 f958 	bl	801a770 <fmod>
 80024c0:	eeb0 7a40 	vmov.f32	s14, s0
 80024c4:	eef0 7a60 	vmov.f32	s15, s1
    }
 80024c8:	eeb0 0a47 	vmov.f32	s0, s14
 80024cc:	eef0 0a67 	vmov.f32	s1, s15
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <_ZN3jlb8Odometry15normalize_angleEf>:

        float normalize_angle(float angle)
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	ed87 0a00 	vstr	s0, [r7]
        {
            angle = std::fmod(angle, 2.0f * M_PI);
 80024e4:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8002540 <_ZN3jlb8Odometry15normalize_angleEf+0x68>
 80024e8:	ed97 0a00 	vldr	s0, [r7]
 80024ec:	f7ff ffd6 	bl	800249c <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80024f0:	ec53 2b10 	vmov	r2, r3, d0
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	f7fe fb40 	bl	8000b7c <__aeabi_d2f>
 80024fc:	4603      	mov	r3, r0
 80024fe:	603b      	str	r3, [r7, #0]
            if (angle < 0.0f)
 8002500:	edd7 7a00 	vldr	s15, [r7]
 8002504:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d50f      	bpl.n	800252e <_ZN3jlb8Odometry15normalize_angleEf+0x56>
            {
                angle += 2.0f * M_PI;
 800250e:	6838      	ldr	r0, [r7, #0]
 8002510:	f7fe f80c 	bl	800052c <__aeabi_f2d>
 8002514:	a30a      	add	r3, pc, #40	; (adr r3, 8002540 <_ZN3jlb8Odometry15normalize_angleEf+0x68>)
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251a:	f7fd fea9 	bl	8000270 <__adddf3>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	f7fe fb29 	bl	8000b7c <__aeabi_d2f>
 800252a:	4603      	mov	r3, r0
 800252c:	603b      	str	r3, [r7, #0]
            }
            return angle;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	ee07 3a90 	vmov	s15, r3
        }
 8002534:	eeb0 0a67 	vmov.f32	s0, s15
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	54442d18 	.word	0x54442d18
 8002544:	401921fb 	.word	0x401921fb

08002548 <_ZN3jlb8Odometry10correctionEff>:

        void correction([[maybe_unused]] float x_t_, [[maybe_unused]] float y_t_)
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	ed87 0a02 	vstr	s0, [r7, #8]
 8002554:	edc7 0a01 	vstr	s1, [r7, #4]
        {
            x_t = x_t_ - (SENSOR_BASE / 4.0f * std::cos(theta_t));
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	edd3 7a04 	vldr	s15, [r3, #16]
 800255e:	eeb0 0a67 	vmov.f32	s0, s15
 8002562:	f7ff fcb5 	bl	8001ed0 <_ZSt3cosf>
 8002566:	eef0 7a40 	vmov.f32	s15, s0
 800256a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800256e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002572:	ed97 7a02 	vldr	s14, [r7, #8]
 8002576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	edc3 7a02 	vstr	s15, [r3, #8]
            y_t = y_t_ - (SENSOR_BASE / 4.0f * std::sin(theta_t));
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	edd3 7a04 	vldr	s15, [r3, #16]
 8002586:	eeb0 0a67 	vmov.f32	s0, s15
 800258a:	f7ff fcc1 	bl	8001f10 <_ZSt3sinf>
 800258e:	eef0 7a40 	vmov.f32	s15, s0
 8002592:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800259a:	ed97 7a01 	vldr	s14, [r7, #4]
 800259e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	edc3 7a03 	vstr	s15, [r3, #12]
        }
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f006 f8b3 	bl	8008724 <_ZNSaIfED1Ev>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f006 f896 	bl	8008704 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ffeb 	bl	80025c8 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_ZN3jlb10ControllerC1ENS_9DirectionE>:
        std::vector<float> line_positions_rear;

        Direction direction = Direction::STRAIGHT;
        Mission mission = Mission::LABYRINTH;

        Controller(Direction direction_ = Direction::STRAIGHT) : direction{direction_} {}
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2210      	movs	r2, #16
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2210      	movs	r2, #16
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	615a      	str	r2, [r3, #20]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	61da      	str	r2, [r3, #28]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3360      	adds	r3, #96	; 0x60
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff ffcb 	bl	80025e2 <_ZNSt6vectorIfSaIfEEC1Ev>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	336c      	adds	r3, #108	; 0x6c
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ffc6 	bl	80025e2 <_ZNSt6vectorIfSaIfEEC1Ev>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	679a      	str	r2, [r3, #120]	; 0x78
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	67da      	str	r2, [r3, #124]	; 0x7c
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <_ZN3jlb10Controller7stanleyEff>:
            integral += Ki * error * dt;
            float derivative_term = Kd * (error - prev_error) / dt;
            return proportional_term + integral + derivative_term;
        }

        float stanley(const float cross_track_error, const float heading_error)
 800268a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	ed87 0a02 	vstr	s0, [r7, #8]
 8002698:	edc7 0a01 	vstr	s1, [r7, #4]
        {
            return kAng * heading_error + atan2(kDist * cross_track_error, kSoft + kDamp * current_velocity);
 800269c:	edd7 7a01 	vldr	s15, [r7, #4]
 80026a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026a8:	ee17 0a90 	vmov	r0, s15
 80026ac:	f7fd ff3e 	bl	800052c <__aeabi_f2d>
 80026b0:	4604      	mov	r4, r0
 80026b2:	460d      	mov	r5, r1
 80026b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80026b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026c0:	ee17 0a90 	vmov	r0, s15
 80026c4:	f7fd ff32 	bl	800052c <__aeabi_f2d>
 80026c8:	4680      	mov	r8, r0
 80026ca:	4689      	mov	r9, r1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80026d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026da:	ee17 0a90 	vmov	r0, s15
 80026de:	f7fd ff25 	bl	800052c <__aeabi_f2d>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	ec43 2b11 	vmov	d1, r2, r3
 80026ea:	ec49 8b10 	vmov	d0, r8, r9
 80026ee:	f018 f83d 	bl	801a76c <atan2>
 80026f2:	ec53 2b10 	vmov	r2, r3, d0
 80026f6:	4620      	mov	r0, r4
 80026f8:	4629      	mov	r1, r5
 80026fa:	f7fd fdb9 	bl	8000270 <__adddf3>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f7fe fa39 	bl	8000b7c <__aeabi_d2f>
 800270a:	4603      	mov	r3, r0
 800270c:	ee07 3a90 	vmov	s15, r3
        }
 8002710:	eeb0 0a67 	vmov.f32	s0, s15
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800271c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>:
                selected = center;

            return selected;
        }

        float select_control_point(std::vector<float> line_positions, float prev_line_position)
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	ed2d 8b02 	vpush	{d8}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	ed87 0a01 	vstr	s0, [r7, #4]
        {
            // sort by ascending order
            std::sort(line_positions.begin(), line_positions.end());
 800272e:	68b8      	ldr	r0, [r7, #8]
 8002730:	f006 f837 	bl	80087a2 <_ZNSt6vectorIfSaIfEE5beginEv>
 8002734:	4604      	mov	r4, r0
 8002736:	68b8      	ldr	r0, [r7, #8]
 8002738:	f006 f843 	bl	80087c2 <_ZNSt6vectorIfSaIfEE3endEv>
 800273c:	4603      	mov	r3, r0
 800273e:	4619      	mov	r1, r3
 8002740:	4620      	mov	r0, r4
 8002742:	f006 f84f 	bl	80087e4 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>

            if (line_positions.size() == 1)
 8002746:	68b8      	ldr	r0, [r7, #8]
 8002748:	f006 f85c 	bl	8008804 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800274c:	4603      	mov	r3, r0
 800274e:	2b01      	cmp	r3, #1
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x50>
            {
                return line_positions[0];
 800275c:	2100      	movs	r1, #0
 800275e:	68b8      	ldr	r0, [r7, #8]
 8002760:	f006 f860 	bl	8008824 <_ZNSt6vectorIfSaIfEEixEj>
 8002764:	4603      	mov	r3, r0
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	e0d0      	b.n	800290e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
            }
            else if (line_positions.size() == 2)
 800276c:	68b8      	ldr	r0, [r7, #8]
 800276e:	f006 f849 	bl	8008804 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002772:	4603      	mov	r3, r0
 8002774:	2b02      	cmp	r3, #2
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d054      	beq.n	800282c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x110>
            {
                switch (direction)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002786:	2b02      	cmp	r3, #2
 8002788:	d006      	beq.n	8002798 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x7c>
 800278a:	2b02      	cmp	r3, #2
 800278c:	dc4b      	bgt.n	8002826 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x10a>
 800278e:	2b00      	cmp	r3, #0
 8002790:	d039      	beq.n	8002806 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0xea>
 8002792:	2b01      	cmp	r3, #1
 8002794:	d03f      	beq.n	8002816 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0xfa>
 8002796:	e046      	b.n	8002826 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x10a>
                {
                case Direction::STRAIGHT:
                {
                    return std::fabs(line_positions[0] - prev_line_position) < std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 8002798:	2100      	movs	r1, #0
 800279a:	68b8      	ldr	r0, [r7, #8]
 800279c:	f006 f842 	bl	8008824 <_ZNSt6vectorIfSaIfEEixEj>
 80027a0:	4603      	mov	r3, r0
 80027a2:	ed93 7a00 	vldr	s14, [r3]
 80027a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80027aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ae:	eeb0 0a67 	vmov.f32	s0, s15
 80027b2:	f7ff fb9d 	bl	8001ef0 <_ZSt4fabsf>
 80027b6:	eeb0 8a40 	vmov.f32	s16, s0
 80027ba:	2101      	movs	r1, #1
 80027bc:	68b8      	ldr	r0, [r7, #8]
 80027be:	f006 f831 	bl	8008824 <_ZNSt6vectorIfSaIfEEixEj>
 80027c2:	4603      	mov	r3, r0
 80027c4:	ed93 7a00 	vldr	s14, [r3]
 80027c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80027cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d0:	eeb0 0a67 	vmov.f32	s0, s15
 80027d4:	f7ff fb8c 	bl	8001ef0 <_ZSt4fabsf>
 80027d8:	eef0 7a40 	vmov.f32	s15, s0
 80027dc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80027e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e4:	d507      	bpl.n	80027f6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0xda>
 80027e6:	2100      	movs	r1, #0
 80027e8:	68b8      	ldr	r0, [r7, #8]
 80027ea:	f006 f81b 	bl	8008824 <_ZNSt6vectorIfSaIfEEixEj>
 80027ee:	4603      	mov	r3, r0
 80027f0:	edd3 7a00 	vldr	s15, [r3]
 80027f4:	e08b      	b.n	800290e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
 80027f6:	2101      	movs	r1, #1
 80027f8:	68b8      	ldr	r0, [r7, #8]
 80027fa:	f006 f813 	bl	8008824 <_ZNSt6vectorIfSaIfEEixEj>
 80027fe:	4603      	mov	r3, r0
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	e083      	b.n	800290e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                }
                case Direction::LEFT:
                {
                    return line_positions[0];
 8002806:	2100      	movs	r1, #0
 8002808:	68b8      	ldr	r0, [r7, #8]
 800280a:	f006 f80b 	bl	8008824 <_ZNSt6vectorIfSaIfEEixEj>
 800280e:	4603      	mov	r3, r0
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	e07b      	b.n	800290e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                }
                case Direction::RIGHT:
                {
                    return line_positions[1];
 8002816:	2101      	movs	r1, #1
 8002818:	68b8      	ldr	r0, [r7, #8]
 800281a:	f006 f803 	bl	8008824 <_ZNSt6vectorIfSaIfEEixEj>
 800281e:	4603      	mov	r3, r0
 8002820:	edd3 7a00 	vldr	s15, [r3]
 8002824:	e073      	b.n	800290e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                }
                default:
                    return 0.0f;
 8002826:	eddf 7a3d 	vldr	s15, [pc, #244]	; 800291c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x200>
 800282a:	e070      	b.n	800290e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                }
            }
            else if (line_positions.size() == 3)
 800282c:	68b8      	ldr	r0, [r7, #8]
 800282e:	f005 ffe9 	bl	8008804 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002832:	4603      	mov	r3, r0
 8002834:	2b03      	cmp	r3, #3
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d025      	beq.n	800288e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x172>
            {
                switch (direction)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002846:	2b02      	cmp	r3, #2
 8002848:	d006      	beq.n	8002858 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x13c>
 800284a:	2b02      	cmp	r3, #2
 800284c:	dc1c      	bgt.n	8002888 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x16c>
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x14c>
 8002852:	2b01      	cmp	r3, #1
 8002854:	d010      	beq.n	8002878 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x15c>
 8002856:	e017      	b.n	8002888 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x16c>
                {
                case Direction::STRAIGHT:
                {
                    // return the middle one
                    return line_positions[1];
 8002858:	2101      	movs	r1, #1
 800285a:	68b8      	ldr	r0, [r7, #8]
 800285c:	f005 ffe2 	bl	8008824 <_ZNSt6vectorIfSaIfEEixEj>
 8002860:	4603      	mov	r3, r0
 8002862:	edd3 7a00 	vldr	s15, [r3]
 8002866:	e052      	b.n	800290e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                }
                case Direction::LEFT:
                {
                    return line_positions[0];
 8002868:	2100      	movs	r1, #0
 800286a:	68b8      	ldr	r0, [r7, #8]
 800286c:	f005 ffda 	bl	8008824 <_ZNSt6vectorIfSaIfEEixEj>
 8002870:	4603      	mov	r3, r0
 8002872:	edd3 7a00 	vldr	s15, [r3]
 8002876:	e04a      	b.n	800290e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                }
                case Direction::RIGHT:
                {
                    return line_positions[2];
 8002878:	2102      	movs	r1, #2
 800287a:	68b8      	ldr	r0, [r7, #8]
 800287c:	f005 ffd2 	bl	8008824 <_ZNSt6vectorIfSaIfEEixEj>
 8002880:	4603      	mov	r3, r0
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	e042      	b.n	800290e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                }
                default:
                    return 0.0f;
 8002888:	eddf 7a24 	vldr	s15, [pc, #144]	; 800291c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x200>
 800288c:	e03f      	b.n	800290e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                }
            }
            else if (line_positions.size() == 4)
 800288e:	68b8      	ldr	r0, [r7, #8]
 8002890:	f005 ffb8 	bl	8008804 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002894:	4603      	mov	r3, r0
 8002896:	2b04      	cmp	r3, #4
 8002898:	bf0c      	ite	eq
 800289a:	2301      	moveq	r3, #1
 800289c:	2300      	movne	r3, #0
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d032      	beq.n	800290a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1ee>
            {
                switch (direction)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d006      	beq.n	80028ba <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x19e>
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	dc29      	bgt.n	8002904 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1e8>
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d017      	beq.n	80028e4 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1c8>
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d01d      	beq.n	80028f4 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1d8>
 80028b8:	e024      	b.n	8002904 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1e8>
                {
                case Direction::STRAIGHT:
                {
                    // return the middle one
                    return line_positions[1] + line_positions[2] / 2.0f;
 80028ba:	2101      	movs	r1, #1
 80028bc:	68b8      	ldr	r0, [r7, #8]
 80028be:	f005 ffb1 	bl	8008824 <_ZNSt6vectorIfSaIfEEixEj>
 80028c2:	4603      	mov	r3, r0
 80028c4:	ed93 8a00 	vldr	s16, [r3]
 80028c8:	2102      	movs	r1, #2
 80028ca:	68b8      	ldr	r0, [r7, #8]
 80028cc:	f005 ffaa 	bl	8008824 <_ZNSt6vectorIfSaIfEEixEj>
 80028d0:	4603      	mov	r3, r0
 80028d2:	ed93 7a00 	vldr	s14, [r3]
 80028d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80028da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028de:	ee78 7a27 	vadd.f32	s15, s16, s15
 80028e2:	e014      	b.n	800290e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                }
                case Direction::LEFT:
                {
                    return line_positions[0];
 80028e4:	2100      	movs	r1, #0
 80028e6:	68b8      	ldr	r0, [r7, #8]
 80028e8:	f005 ff9c 	bl	8008824 <_ZNSt6vectorIfSaIfEEixEj>
 80028ec:	4603      	mov	r3, r0
 80028ee:	edd3 7a00 	vldr	s15, [r3]
 80028f2:	e00c      	b.n	800290e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                }
                case Direction::RIGHT:
                {
                    return line_positions[3];
 80028f4:	2103      	movs	r1, #3
 80028f6:	68b8      	ldr	r0, [r7, #8]
 80028f8:	f005 ff94 	bl	8008824 <_ZNSt6vectorIfSaIfEEixEj>
 80028fc:	4603      	mov	r3, r0
 80028fe:	edd3 7a00 	vldr	s15, [r3]
 8002902:	e004      	b.n	800290e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                }
                default:
                    return 0.0f;
 8002904:	eddf 7a05 	vldr	s15, [pc, #20]	; 800291c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x200>
 8002908:	e001      	b.n	800290e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
            }
            else
            {
                // this should never happen

                return 0.0f;
 800290a:	eddf 7a04 	vldr	s15, [pc, #16]	; 800291c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x200>
            }
        }
 800290e:	eeb0 0a67 	vmov.f32	s0, s15
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	ecbd 8b02 	vpop	{d8}
 800291a:	bd90      	pop	{r4, r7, pc}
 800291c:	00000000 	.word	0x00000000

08002920 <_ZZN3jlb10Controller15lateral_controlEvENKUlbE_clEb>:

        void lateral_control()
        {
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b)
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	70fb      	strb	r3, [r7, #3]
                            { return b; }))
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <_ZZN3jlb10Controller15lateral_controlEvENKUlbE0_clEb>:
            {
                return;
            }

            if (std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b)
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	70fb      	strb	r3, [r7, #3]
                            { return b; }))
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <_ZN3jlb10Controller15lateral_controlEv>:
        void lateral_control()
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	b08f      	sub	sp, #60	; 0x3c
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3320      	adds	r3, #32
 8002960:	4618      	mov	r0, r3
 8002962:	f005 ff6f 	bl	8008844 <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 8002966:	4604      	mov	r4, r0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3320      	adds	r3, #32
 800296c:	4618      	mov	r0, r3
 800296e:	f005 ff74 	bl	800885a <_ZSt3endIbLj32EEPT_RAT0__S0_>
 8002972:	4603      	mov	r3, r0
 8002974:	4632      	mov	r2, r6
 8002976:	4619      	mov	r1, r3
 8002978:	4620      	mov	r0, r4
 800297a:	f005 ff7a 	bl	8008872 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEvEUlbE_EbT_S4_T0_>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	f040 80e5 	bne.w	8002b50 <_ZN3jlb10Controller15lateral_controlEv+0x1fc>
            if (std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3340      	adds	r3, #64	; 0x40
 800298a:	4618      	mov	r0, r3
 800298c:	f005 ff5a 	bl	8008844 <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 8002990:	4604      	mov	r4, r0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3340      	adds	r3, #64	; 0x40
 8002996:	4618      	mov	r0, r3
 8002998:	f005 ff5f 	bl	800885a <_ZSt3endIbLj32EEPT_RAT0__S0_>
 800299c:	4603      	mov	r3, r0
 800299e:	462a      	mov	r2, r5
 80029a0:	4619      	mov	r1, r3
 80029a2:	4620      	mov	r0, r4
 80029a4:	f005 ff7b 	bl	800889e <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEvEUlbE0_EbT_S4_T0_>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 80d2 	bne.w	8002b54 <_ZN3jlb10Controller15lateral_controlEv+0x200>
            {
                return;
            }

            if (line_positions_front.size() == 0 || line_positions_rear.size() == 0 || line_positions_front.size() > 4 || line_positions_rear.size() > 4)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3360      	adds	r3, #96	; 0x60
 80029b4:	4618      	mov	r0, r3
 80029b6:	f005 ff25 	bl	8008804 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d017      	beq.n	80029f0 <_ZN3jlb10Controller15lateral_controlEv+0x9c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	336c      	adds	r3, #108	; 0x6c
 80029c4:	4618      	mov	r0, r3
 80029c6:	f005 ff1d 	bl	8008804 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00f      	beq.n	80029f0 <_ZN3jlb10Controller15lateral_controlEv+0x9c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3360      	adds	r3, #96	; 0x60
 80029d4:	4618      	mov	r0, r3
 80029d6:	f005 ff15 	bl	8008804 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d807      	bhi.n	80029f0 <_ZN3jlb10Controller15lateral_controlEv+0x9c>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	336c      	adds	r3, #108	; 0x6c
 80029e4:	4618      	mov	r0, r3
 80029e6:	f005 ff0d 	bl	8008804 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d901      	bls.n	80029f4 <_ZN3jlb10Controller15lateral_controlEv+0xa0>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <_ZN3jlb10Controller15lateral_controlEv+0xa2>
 80029f4:	2300      	movs	r3, #0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f040 80ae 	bne.w	8002b58 <_ZN3jlb10Controller15lateral_controlEv+0x204>
                return;
            }

#ifdef STM32
            // TODO: add timestamp
            float dt = 5.0f;
 80029fc:	4b58      	ldr	r3, [pc, #352]	; (8002b60 <_ZN3jlb10Controller15lateral_controlEv+0x20c>)
 80029fe:	637b      	str	r3, [r7, #52]	; 0x34
#else
            auto control_timestamp_ = std::chrono::steady_clock::now();
            [[maybe_unused]] float dt = std::chrono::duration_cast<std::chrono::milliseconds>(control_timestamp_ - prev_control_timestamp_).count() / 1000.0f;
            prev_control_timestamp_ = control_timestamp_;
#endif
            float sensor_rate = SENSOR_WIDTH / SENSOR_COUNT;
 8002a00:	4b58      	ldr	r3, [pc, #352]	; (8002b64 <_ZN3jlb10Controller15lateral_controlEv+0x210>)
 8002a02:	633b      	str	r3, [r7, #48]	; 0x30

            unsigned long sensor_center = SENSOR_COUNT / 2.0f;
 8002a04:	2310      	movs	r3, #16
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c

            line_position_front = select_control_point(line_positions_front, prev_line_position_front);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002a0e:	f107 030c 	add.w	r3, r7, #12
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f005 ff58 	bl	80088ca <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a20:	f107 030c 	add.w	r3, r7, #12
 8002a24:	eeb0 0a67 	vmov.f32	s0, s15
 8002a28:	4619      	mov	r1, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fe76 	bl	800271c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 8002a30:	eef0 7a40 	vmov.f32	s15, s0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	edc3 7a02 	vstr	s15, [r3, #8]
 8002a3a:	f107 030c 	add.w	r3, r7, #12
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f005 fe94 	bl	800876c <_ZNSt6vectorIfSaIfEED1Ev>
            line_position_rear = select_control_point(line_positions_rear, prev_line_position_rear);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8002a4a:	f107 0318 	add.w	r3, r7, #24
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f005 ff3a 	bl	80088ca <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a5c:	f107 0318 	add.w	r3, r7, #24
 8002a60:	eeb0 0a67 	vmov.f32	s0, s15
 8002a64:	4619      	mov	r1, r3
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff fe58 	bl	800271c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 8002a6c:	eef0 7a40 	vmov.f32	s15, s0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	edc3 7a03 	vstr	s15, [r3, #12]
 8002a76:	f107 0318 	add.w	r3, r7, #24
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f005 fe76 	bl	800876c <_ZNSt6vectorIfSaIfEED1Ev>
            prev_line_position_front = line_position_front;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	611a      	str	r2, [r3, #16]
            prev_line_position_rear = line_position_rear;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	615a      	str	r2, [r3, #20]
            // selected_front = select_control_point(detection_front);
            // selected_rear = select_control_point(detection_rear);
            // line_position_front = (static_cast<float>(selected_front) - static_cast<float>(sensor_center) + 1) * sensor_rate;
            // line_position_rear = (static_cast<float>(selected_rear) - static_cast<float>(sensor_center) + 1) * sensor_rate;

            float cross_track_error = line_position_front / (static_cast<float>(sensor_center) * sensor_rate);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	ee07 3a90 	vmov	s15, r3
 8002a9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002aa0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002aa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aac:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            [[maybe_unused]] float heading_error = std::atan2(line_position_front - line_position_rear, SENSOR_BASE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac8:	f7ff f9ee 	bl	8001ea8 <_ZSt5atan2ff>
 8002acc:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

            if (USE_STANLEY)
            {
                target_angle = stanley(cross_track_error, heading_error);
 8002ad0:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8002ad4:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff fdd6 	bl	800268a <_ZN3jlb10Controller7stanleyEff>
 8002ade:	eef0 7a40 	vmov.f32	s15, s0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	edc3 7a06 	vstr	s15, [r3, #24]
            else
            {
                target_angle = PID(cross_track_error, dt);
            }

            if (target_angle > MAX_WHEEL_ANGLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	edd3 7a06 	vldr	s15, [r3, #24]
 8002aee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afa:	dd03      	ble.n	8002b04 <_ZN3jlb10Controller15lateral_controlEv+0x1b0>
                target_angle = MAX_WHEEL_ANGLE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b02:	619a      	str	r2, [r3, #24]
            if (target_angle < -MAX_WHEEL_ANGLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b0a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b16:	d502      	bpl.n	8002b1e <_ZN3jlb10Controller15lateral_controlEv+0x1ca>
                target_angle = -MAX_WHEEL_ANGLE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a13      	ldr	r2, [pc, #76]	; (8002b68 <_ZN3jlb10Controller15lateral_controlEv+0x214>)
 8002b1c:	619a      	str	r2, [r3, #24]

            if (direction == Direction::REVERSE_LEFT || direction == Direction::REVERSE_RIGHT || direction == Direction::REVERSE_STRAIGHT)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d007      	beq.n	8002b36 <_ZN3jlb10Controller15lateral_controlEv+0x1e2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d003      	beq.n	8002b36 <_ZN3jlb10Controller15lateral_controlEv+0x1e2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	d107      	bne.n	8002b46 <_ZN3jlb10Controller15lateral_controlEv+0x1f2>
            {
                target_angle = -target_angle;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b3c:	eef1 7a67 	vneg.f32	s15, s15
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	edc3 7a06 	vstr	s15, [r3, #24]
            }

            prev_error = cross_track_error;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002b4e:	e004      	b.n	8002b5a <_ZN3jlb10Controller15lateral_controlEv+0x206>
                return;
 8002b50:	bf00      	nop
 8002b52:	e002      	b.n	8002b5a <_ZN3jlb10Controller15lateral_controlEv+0x206>
                return;
 8002b54:	bf00      	nop
 8002b56:	e000      	b.n	8002b5a <_ZN3jlb10Controller15lateral_controlEv+0x206>
                return;
 8002b58:	bf00      	nop
        }
 8002b5a:	373c      	adds	r7, #60	; 0x3c
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b60:	40a00000 	.word	0x40a00000
 8002b64:	3bcccccd 	.word	0x3bcccccd
 8002b68:	bf800000 	.word	0xbf800000

08002b6c <_ZN3jlb10Controller20longitudinal_controlEv>:

        void longitudinal_control()
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
        {
            switch (mission)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d82f      	bhi.n	8002bdc <_ZN3jlb10Controller20longitudinal_controlEv+0x70>
 8002b7c:	a201      	add	r2, pc, #4	; (adr r2, 8002b84 <_ZN3jlb10Controller20longitudinal_controlEv+0x18>)
 8002b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b82:	bf00      	nop
 8002b84:	08002b95 	.word	0x08002b95
 8002b88:	08002bc5 	.word	0x08002bc5
 8002b8c:	08002bcd 	.word	0x08002bcd
 8002b90:	08002bd5 	.word	0x08002bd5
            {
            case Mission::LABYRINTH:
            {
                target_speed = LABYRINTH_SPEED;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a16      	ldr	r2, [pc, #88]	; (8002bf0 <_ZN3jlb10Controller20longitudinal_controlEv+0x84>)
 8002b98:	61da      	str	r2, [r3, #28]

                if (direction == Direction::REVERSE_LEFT || direction == Direction::REVERSE_RIGHT || direction == Direction::REVERSE_STRAIGHT)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d007      	beq.n	8002bb2 <_ZN3jlb10Controller20longitudinal_controlEv+0x46>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d003      	beq.n	8002bb2 <_ZN3jlb10Controller20longitudinal_controlEv+0x46>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d116      	bne.n	8002be0 <_ZN3jlb10Controller20longitudinal_controlEv+0x74>
                {
                    target_speed = -target_speed;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	edd3 7a07 	vldr	s15, [r3, #28]
 8002bb8:	eef1 7a67 	vneg.f32	s15, s15
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	edc3 7a07 	vstr	s15, [r3, #28]
                }
            }
            break;
 8002bc2:	e00d      	b.n	8002be0 <_ZN3jlb10Controller20longitudinal_controlEv+0x74>

            case Mission::FAST:
                target_speed = FAST_SPEED;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a0b      	ldr	r2, [pc, #44]	; (8002bf4 <_ZN3jlb10Controller20longitudinal_controlEv+0x88>)
 8002bc8:	61da      	str	r2, [r3, #28]
                break;
 8002bca:	e00a      	b.n	8002be2 <_ZN3jlb10Controller20longitudinal_controlEv+0x76>

            case Mission::FAST_TURN:
                target_speed = FAST_SPEED_TURN;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <_ZN3jlb10Controller20longitudinal_controlEv+0x84>)
 8002bd0:	61da      	str	r2, [r3, #28]
                break;
 8002bd2:	e006      	b.n	8002be2 <_ZN3jlb10Controller20longitudinal_controlEv+0x76>

            case Mission::FAST_OVERTAKE:
                target_speed = FAST_SPEED_OVERTAKE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a08      	ldr	r2, [pc, #32]	; (8002bf8 <_ZN3jlb10Controller20longitudinal_controlEv+0x8c>)
 8002bd8:	61da      	str	r2, [r3, #28]
                break;
 8002bda:	e002      	b.n	8002be2 <_ZN3jlb10Controller20longitudinal_controlEv+0x76>

            default:
                break;
 8002bdc:	bf00      	nop
 8002bde:	e000      	b.n	8002be2 <_ZN3jlb10Controller20longitudinal_controlEv+0x76>
            break;
 8002be0:	bf00      	nop
            }
        }
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	41200000 	.word	0x41200000
 8002bf4:	41f00000 	.word	0x41f00000
 8002bf8:	41a00000 	.word	0x41a00000

08002bfc <_ZN3jlb10Controller6updateEv>:

        ControlSignal update()
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
        {
            lateral_control();
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f7ff fea5 	bl	8002954 <_ZN3jlb10Controller15lateral_controlEv>
            longitudinal_control();
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f7ff ffae 	bl	8002b6c <_ZN3jlb10Controller20longitudinal_controlEv>

            return {target_angle, target_speed};
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	ee07 2a10 	vmov	s14, r2
 8002c24:	ee07 3a90 	vmov	s15, r3
        }
 8002c28:	eeb0 0a47 	vmov.f32	s0, s14
 8002c2c:	eef0 0a67 	vmov.f32	s1, s15
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>:

        void set_detection_front(bool *detection_front_, std::vector<float> line_positions_front_)
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b086      	sub	sp, #24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	e00c      	b.n	8002c62 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x2c>
                detection_front[i] = detection_front_[i];
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	7819      	ldrb	r1, [r3, #0]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	4413      	add	r3, r2
 8002c56:	3320      	adds	r3, #32
 8002c58:	460a      	mov	r2, r1
 8002c5a:	701a      	strb	r2, [r3, #0]
            for (unsigned long i = 0; i < SENSOR_COUNT; i++)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	d9ef      	bls.n	8002c48 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x12>
            line_positions_front = line_positions_front_;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3360      	adds	r3, #96	; 0x60
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f005 fe9c 	bl	80089ac <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 8002c74:	bf00      	nop
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>:

        void set_detection_rear(bool *detection_rear_, std::vector<float> line_positions_rear_)
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++)
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	e00c      	b.n	8002ca8 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x2c>
                detection_rear[i] = detection_rear_[i];
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	4413      	add	r3, r2
 8002c94:	7819      	ldrb	r1, [r3, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3340      	adds	r3, #64	; 0x40
 8002c9e:	460a      	mov	r2, r1
 8002ca0:	701a      	strb	r2, [r3, #0]
            for (unsigned long i = 0; i < SENSOR_COUNT; i++)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b1f      	cmp	r3, #31
 8002cac:	d9ef      	bls.n	8002c8e <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x12>
            line_positions_rear = line_positions_rear_;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	336c      	adds	r3, #108	; 0x6c
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f005 fe79 	bl	80089ac <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 8002cba:	bf00      	nop
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <_ZN3jlb10Controller20set_current_velocityEf>:

        void set_current_velocity(const float current_velocity_)
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	ed87 0a00 	vstr	s0, [r7]
        {
            current_velocity = current_velocity_;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        }
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <_ZN3jlb10Controller13set_directionENS_9DirectionE>:

        void set_direction(const Direction direction_)
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	6039      	str	r1, [r7, #0]
        {
            direction = direction_;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	679a      	str	r2, [r3, #120]	; 0x78
        }
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateE>:
                const Controller &controller;
                const ASState &as_state;

#ifdef STM32
                // TODO: initialize UDPClient for STM32
                SignalSender(const Odometry &odometry_, const Controller &controller_, const ASState &as_state_) : odometry(odometry_), controller(controller_), as_state(as_state_)
 8002cfe:	b480      	push	{r7}
 8002d00:	b085      	sub	sp, #20
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
                {
                }
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <_ZN3jlb12SignalSender14send_telemetryEv>:

                ~SignalSender()
                {
                }

                void send_telemetry()
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
                {
                        measurements_1();
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f826 	bl	8002d8c <_ZN3jlb12SignalSender14measurements_1Ev>
                        measurements_2();
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fdab 	bl	800389c <_ZN3jlb12SignalSender14measurements_2Ev>
                        measurements_3();
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f001 fcb2 	bl	80046b0 <_ZN3jlb12SignalSender14measurements_3Ev>
                        measurements_4();
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f001 fcfd 	bl	800474c <_ZN3jlb12SignalSender14measurements_4Ev>
                        measurements_5();
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f001 fd48 	bl	80047e8 <_ZN3jlb12SignalSender14measurements_5Ev>
                        odometry_1();
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f001 fd7b 	bl	8004854 <_ZN3jlb12SignalSender10odometry_1Ev>
                        odometry_2();
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f001 fdc6 	bl	80048f0 <_ZN3jlb12SignalSender10odometry_2Ev>
                        logic_1();
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f001 fe05 	bl	8004974 <_ZN3jlb12SignalSender7logic_1Ev>
                }
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <_ZN3jlb12SignalSender4sendEPcj>:
                // TODO: add UDPClient for STM32
#else
                UDPClient client;
#endif

                int send(char *msg, size_t max_size)
 8002d72:	b480      	push	{r7}
 8002d74:	b085      	sub	sp, #20
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
#ifdef STM32
                        // TODO: send UDP packet for STM32
#else
                        return client.send(msg, max_size);
#endif
                }
 8002d7e:	bf00      	nop
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <_ZN3jlb12SignalSender14measurements_1Ev>:

                void measurements_1()
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.measurements_1.line_sensor_1 = 0 == controller.selected_front ? controller.detection_front[0] + 2.0f : controller.detection_front[0];
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d113      	bne.n	8002dc8 <_ZN3jlb12SignalSender14measurements_1Ev+0x3c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002daa:	ee07 3a90 	vmov	s15, r3
 8002dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002db2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002db6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dbe:	edc7 7a00 	vstr	s15, [r7]
 8002dc2:	783b      	ldrb	r3, [r7, #0]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	e00e      	b.n	8002de6 <_ZN3jlb12SignalSender14measurements_1Ev+0x5a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dde:	edc7 7a00 	vstr	s15, [r7]
 8002de2:	783b      	ldrb	r3, [r7, #0]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	7013      	strb	r3, [r2, #0]
                        jlb_rx.measurements_1.line_sensor_2 = 1 == controller.selected_front ? controller.detection_front[1] + 2.0f : controller.detection_front[1];
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d113      	bne.n	8002e1e <_ZN3jlb12SignalSender14measurements_1Ev+0x92>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002dfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e00:	ee07 3a90 	vmov	s15, r3
 8002e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e08:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002e0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e14:	edc7 7a00 	vstr	s15, [r7]
 8002e18:	783b      	ldrb	r3, [r7, #0]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	e00e      	b.n	8002e3c <_ZN3jlb12SignalSender14measurements_1Ev+0xb0>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002e24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e28:	ee07 3a90 	vmov	s15, r3
 8002e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e34:	edc7 7a00 	vstr	s15, [r7]
 8002e38:	783b      	ldrb	r3, [r7, #0]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	7053      	strb	r3, [r2, #1]
                        jlb_rx.measurements_1.line_sensor_3 = 2 == controller.selected_front ? controller.detection_front[2] + 2.0f : controller.detection_front[2];
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d113      	bne.n	8002e74 <_ZN3jlb12SignalSender14measurements_1Ev+0xe8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002e52:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002e56:	ee07 3a90 	vmov	s15, r3
 8002e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e5e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002e62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e6a:	edc7 7a00 	vstr	s15, [r7]
 8002e6e:	783b      	ldrb	r3, [r7, #0]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	e00e      	b.n	8002e92 <_ZN3jlb12SignalSender14measurements_1Ev+0x106>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002e7a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e8a:	edc7 7a00 	vstr	s15, [r7]
 8002e8e:	783b      	ldrb	r3, [r7, #0]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	7093      	strb	r3, [r2, #2]
                        jlb_rx.measurements_1.line_sensor_4 = 3 == controller.selected_front ? controller.detection_front[3] + 2.0f : controller.detection_front[3];
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d113      	bne.n	8002eca <_ZN3jlb12SignalSender14measurements_1Ev+0x13e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002ea8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002eac:	ee07 3a90 	vmov	s15, r3
 8002eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eb4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002eb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ec0:	edc7 7a00 	vstr	s15, [r7]
 8002ec4:	783b      	ldrb	r3, [r7, #0]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	e00e      	b.n	8002ee8 <_ZN3jlb12SignalSender14measurements_1Ev+0x15c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002ed0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002ed4:	ee07 3a90 	vmov	s15, r3
 8002ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ee0:	edc7 7a00 	vstr	s15, [r7]
 8002ee4:	783b      	ldrb	r3, [r7, #0]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	70d3      	strb	r3, [r2, #3]
                        jlb_rx.measurements_1.line_sensor_5 = 4 == controller.selected_front ? controller.detection_front[4] + 2.0f : controller.detection_front[4];
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d113      	bne.n	8002f20 <_ZN3jlb12SignalSender14measurements_1Ev+0x194>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002efe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f02:	ee07 3a90 	vmov	s15, r3
 8002f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f0a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002f0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f16:	edc7 7a00 	vstr	s15, [r7]
 8002f1a:	783b      	ldrb	r3, [r7, #0]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e00e      	b.n	8002f3e <_ZN3jlb12SignalSender14measurements_1Ev+0x1b2>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002f26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f2a:	ee07 3a90 	vmov	s15, r3
 8002f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f36:	edc7 7a00 	vstr	s15, [r7]
 8002f3a:	783b      	ldrb	r3, [r7, #0]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	7113      	strb	r3, [r2, #4]
                        jlb_rx.measurements_1.line_sensor_6 = 5 == controller.selected_front ? controller.detection_front[5] + 2.0f : controller.detection_front[5];
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b05      	cmp	r3, #5
 8002f4c:	d113      	bne.n	8002f76 <_ZN3jlb12SignalSender14measurements_1Ev+0x1ea>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002f54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f58:	ee07 3a90 	vmov	s15, r3
 8002f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f60:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002f64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f6c:	edc7 7a00 	vstr	s15, [r7]
 8002f70:	783b      	ldrb	r3, [r7, #0]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	e00e      	b.n	8002f94 <_ZN3jlb12SignalSender14measurements_1Ev+0x208>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002f7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f80:	ee07 3a90 	vmov	s15, r3
 8002f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f8c:	edc7 7a00 	vstr	s15, [r7]
 8002f90:	783b      	ldrb	r3, [r7, #0]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	7153      	strb	r3, [r2, #5]
                        jlb_rx.measurements_1.line_sensor_7 = 6 == controller.selected_front ? controller.detection_front[6] + 2.0f : controller.detection_front[6];
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b06      	cmp	r3, #6
 8002fa2:	d113      	bne.n	8002fcc <_ZN3jlb12SignalSender14measurements_1Ev+0x240>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002faa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fb6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002fba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fc2:	edc7 7a00 	vstr	s15, [r7]
 8002fc6:	783b      	ldrb	r3, [r7, #0]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e00e      	b.n	8002fea <_ZN3jlb12SignalSender14measurements_1Ev+0x25e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002fd2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fe2:	edc7 7a00 	vstr	s15, [r7]
 8002fe6:	783b      	ldrb	r3, [r7, #0]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	7193      	strb	r3, [r2, #6]
                        jlb_rx.measurements_1.line_sensor_8 = 7 == controller.selected_front ? controller.detection_front[7] + 2.0f : controller.detection_front[7];
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b07      	cmp	r3, #7
 8002ff8:	d113      	bne.n	8003022 <_ZN3jlb12SignalSender14measurements_1Ev+0x296>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003000:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800300c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003010:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003018:	edc7 7a00 	vstr	s15, [r7]
 800301c:	783b      	ldrb	r3, [r7, #0]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	e00e      	b.n	8003040 <_ZN3jlb12SignalSender14measurements_1Ev+0x2b4>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003028:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800302c:	ee07 3a90 	vmov	s15, r3
 8003030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003038:	edc7 7a00 	vstr	s15, [r7]
 800303c:	783b      	ldrb	r3, [r7, #0]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	71d3      	strb	r3, [r2, #7]
                        jlb_rx.measurements_1.line_sensor_9 = 8 == controller.selected_front ? controller.detection_front[8] + 2.0f : controller.detection_front[8];
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d113      	bne.n	8003078 <_ZN3jlb12SignalSender14measurements_1Ev+0x2ec>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003062:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003066:	ee77 7a87 	vadd.f32	s15, s15, s14
 800306a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800306e:	edc7 7a00 	vstr	s15, [r7]
 8003072:	783b      	ldrb	r3, [r7, #0]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e00e      	b.n	8003096 <_ZN3jlb12SignalSender14measurements_1Ev+0x30a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800307e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800308e:	edc7 7a00 	vstr	s15, [r7]
 8003092:	783b      	ldrb	r3, [r7, #0]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	7213      	strb	r3, [r2, #8]
                        jlb_rx.measurements_1.line_sensor_10 = 9 == controller.selected_front ? controller.detection_front[9] + 2.0f : controller.detection_front[9];
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b09      	cmp	r3, #9
 80030a4:	d113      	bne.n	80030ce <_ZN3jlb12SignalSender14measurements_1Ev+0x342>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80030ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80030b0:	ee07 3a90 	vmov	s15, r3
 80030b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030b8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80030bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030c4:	edc7 7a00 	vstr	s15, [r7]
 80030c8:	783b      	ldrb	r3, [r7, #0]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	e00e      	b.n	80030ec <_ZN3jlb12SignalSender14measurements_1Ev+0x360>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80030d4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80030d8:	ee07 3a90 	vmov	s15, r3
 80030dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030e4:	edc7 7a00 	vstr	s15, [r7]
 80030e8:	783b      	ldrb	r3, [r7, #0]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	7253      	strb	r3, [r2, #9]
                        jlb_rx.measurements_1.line_sensor_11 = 10 == controller.selected_front ? controller.detection_front[10] + 2.0f : controller.detection_front[10];
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b0a      	cmp	r3, #10
 80030fa:	d113      	bne.n	8003124 <_ZN3jlb12SignalSender14measurements_1Ev+0x398>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003102:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800310e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003112:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800311a:	edc7 7a00 	vstr	s15, [r7]
 800311e:	783b      	ldrb	r3, [r7, #0]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	e00e      	b.n	8003142 <_ZN3jlb12SignalSender14measurements_1Ev+0x3b6>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800312a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800313a:	edc7 7a00 	vstr	s15, [r7]
 800313e:	783b      	ldrb	r3, [r7, #0]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	7293      	strb	r3, [r2, #10]
                        jlb_rx.measurements_1.line_sensor_12 = 11 == controller.selected_front ? controller.detection_front[11] + 2.0f : controller.detection_front[11];
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b0b      	cmp	r3, #11
 8003150:	d113      	bne.n	800317a <_ZN3jlb12SignalSender14measurements_1Ev+0x3ee>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003158:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800315c:	ee07 3a90 	vmov	s15, r3
 8003160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003164:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003168:	ee77 7a87 	vadd.f32	s15, s15, s14
 800316c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003170:	edc7 7a00 	vstr	s15, [r7]
 8003174:	783b      	ldrb	r3, [r7, #0]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	e00e      	b.n	8003198 <_ZN3jlb12SignalSender14measurements_1Ev+0x40c>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003180:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003184:	ee07 3a90 	vmov	s15, r3
 8003188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003190:	edc7 7a00 	vstr	s15, [r7]
 8003194:	783b      	ldrb	r3, [r7, #0]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	72d3      	strb	r3, [r2, #11]
                        jlb_rx.measurements_1.line_sensor_13 = 12 == controller.selected_front ? controller.detection_front[12] + 2.0f : controller.detection_front[12];
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b0c      	cmp	r3, #12
 80031a6:	d113      	bne.n	80031d0 <_ZN3jlb12SignalSender14measurements_1Ev+0x444>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80031ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80031be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031c6:	edc7 7a00 	vstr	s15, [r7]
 80031ca:	783b      	ldrb	r3, [r7, #0]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e00e      	b.n	80031ee <_ZN3jlb12SignalSender14measurements_1Ev+0x462>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80031d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e6:	edc7 7a00 	vstr	s15, [r7]
 80031ea:	783b      	ldrb	r3, [r7, #0]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	7313      	strb	r3, [r2, #12]
                        jlb_rx.measurements_1.line_sensor_14 = 13 == controller.selected_front ? controller.detection_front[13] + 2.0f : controller.detection_front[13];
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b0d      	cmp	r3, #13
 80031fc:	d113      	bne.n	8003226 <_ZN3jlb12SignalSender14measurements_1Ev+0x49a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003204:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003210:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003214:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800321c:	edc7 7a00 	vstr	s15, [r7]
 8003220:	783b      	ldrb	r3, [r7, #0]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	e00e      	b.n	8003244 <_ZN3jlb12SignalSender14measurements_1Ev+0x4b8>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800322c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800323c:	edc7 7a00 	vstr	s15, [r7]
 8003240:	783b      	ldrb	r3, [r7, #0]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	7353      	strb	r3, [r2, #13]
                        jlb_rx.measurements_1.line_sensor_15 = 14 == controller.selected_front ? controller.detection_front[14] + 2.0f : controller.detection_front[14];
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b0e      	cmp	r3, #14
 8003252:	d113      	bne.n	800327c <_ZN3jlb12SignalSender14measurements_1Ev+0x4f0>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800325a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003266:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800326a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800326e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003272:	edc7 7a00 	vstr	s15, [r7]
 8003276:	783b      	ldrb	r3, [r7, #0]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e00e      	b.n	800329a <_ZN3jlb12SignalSender14measurements_1Ev+0x50e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003282:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003292:	edc7 7a00 	vstr	s15, [r7]
 8003296:	783b      	ldrb	r3, [r7, #0]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	7393      	strb	r3, [r2, #14]
                        jlb_rx.measurements_1.line_sensor_16 = 15 == controller.selected_front ? controller.detection_front[15] + 2.0f : controller.detection_front[15];
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b0f      	cmp	r3, #15
 80032a8:	d113      	bne.n	80032d2 <_ZN3jlb12SignalSender14measurements_1Ev+0x546>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80032b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80032b4:	ee07 3a90 	vmov	s15, r3
 80032b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80032c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032c8:	edc7 7a00 	vstr	s15, [r7]
 80032cc:	783b      	ldrb	r3, [r7, #0]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	e00e      	b.n	80032f0 <_ZN3jlb12SignalSender14measurements_1Ev+0x564>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80032d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80032dc:	ee07 3a90 	vmov	s15, r3
 80032e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032e8:	edc7 7a00 	vstr	s15, [r7]
 80032ec:	783b      	ldrb	r3, [r7, #0]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	73d3      	strb	r3, [r2, #15]
#ifndef SIMULATION
                        jlb_rx.measurements_1.line_sensor_17 = 16 == controller.selected_front ? controller.detection_front[16] + 2.0f : controller.detection_front[16];
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b10      	cmp	r3, #16
 80032fe:	d113      	bne.n	8003328 <_ZN3jlb12SignalSender14measurements_1Ev+0x59c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003306:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800330a:	ee07 3a90 	vmov	s15, r3
 800330e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003312:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003316:	ee77 7a87 	vadd.f32	s15, s15, s14
 800331a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800331e:	edc7 7a00 	vstr	s15, [r7]
 8003322:	783b      	ldrb	r3, [r7, #0]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	e00e      	b.n	8003346 <_ZN3jlb12SignalSender14measurements_1Ev+0x5ba>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800332e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800333e:	edc7 7a00 	vstr	s15, [r7]
 8003342:	783b      	ldrb	r3, [r7, #0]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	7413      	strb	r3, [r2, #16]
                        jlb_rx.measurements_1.line_sensor_18 = 17 == controller.selected_front ? controller.detection_front[17] + 2.0f : controller.detection_front[17];
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b11      	cmp	r3, #17
 8003354:	d113      	bne.n	800337e <_ZN3jlb12SignalSender14measurements_1Ev+0x5f2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800335c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003360:	ee07 3a90 	vmov	s15, r3
 8003364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003368:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800336c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003374:	edc7 7a00 	vstr	s15, [r7]
 8003378:	783b      	ldrb	r3, [r7, #0]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	e00e      	b.n	800339c <_ZN3jlb12SignalSender14measurements_1Ev+0x610>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003384:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003388:	ee07 3a90 	vmov	s15, r3
 800338c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003394:	edc7 7a00 	vstr	s15, [r7]
 8003398:	783b      	ldrb	r3, [r7, #0]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	7453      	strb	r3, [r2, #17]
                        jlb_rx.measurements_1.line_sensor_19 = 18 == controller.selected_front ? controller.detection_front[18] + 2.0f : controller.detection_front[18];
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b12      	cmp	r3, #18
 80033aa:	d113      	bne.n	80033d4 <_ZN3jlb12SignalSender14measurements_1Ev+0x648>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80033b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033be:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80033c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ca:	edc7 7a00 	vstr	s15, [r7]
 80033ce:	783b      	ldrb	r3, [r7, #0]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	e00e      	b.n	80033f2 <_ZN3jlb12SignalSender14measurements_1Ev+0x666>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80033da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ea:	edc7 7a00 	vstr	s15, [r7]
 80033ee:	783b      	ldrb	r3, [r7, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	7493      	strb	r3, [r2, #18]
                        jlb_rx.measurements_1.line_sensor_20 = 19 == controller.selected_front ? controller.detection_front[19] + 2.0f : controller.detection_front[19];
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b13      	cmp	r3, #19
 8003400:	d113      	bne.n	800342a <_ZN3jlb12SignalSender14measurements_1Ev+0x69e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003408:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800340c:	ee07 3a90 	vmov	s15, r3
 8003410:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003414:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003418:	ee77 7a87 	vadd.f32	s15, s15, s14
 800341c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003420:	edc7 7a00 	vstr	s15, [r7]
 8003424:	783b      	ldrb	r3, [r7, #0]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	e00e      	b.n	8003448 <_ZN3jlb12SignalSender14measurements_1Ev+0x6bc>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003430:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003434:	ee07 3a90 	vmov	s15, r3
 8003438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003440:	edc7 7a00 	vstr	s15, [r7]
 8003444:	783b      	ldrb	r3, [r7, #0]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	74d3      	strb	r3, [r2, #19]
                        jlb_rx.measurements_1.line_sensor_21 = 20 == controller.selected_front ? controller.detection_front[20] + 2.0f : controller.detection_front[20];
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b14      	cmp	r3, #20
 8003456:	d113      	bne.n	8003480 <_ZN3jlb12SignalSender14measurements_1Ev+0x6f4>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800345e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003462:	ee07 3a90 	vmov	s15, r3
 8003466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800346a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800346e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003476:	edc7 7a00 	vstr	s15, [r7]
 800347a:	783b      	ldrb	r3, [r7, #0]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e00e      	b.n	800349e <_ZN3jlb12SignalSender14measurements_1Ev+0x712>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003486:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003496:	edc7 7a00 	vstr	s15, [r7]
 800349a:	783b      	ldrb	r3, [r7, #0]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	7513      	strb	r3, [r2, #20]
                        jlb_rx.measurements_1.line_sensor_22 = 21 == controller.selected_front ? controller.detection_front[21] + 2.0f : controller.detection_front[21];
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b15      	cmp	r3, #21
 80034ac:	d113      	bne.n	80034d6 <_ZN3jlb12SignalSender14measurements_1Ev+0x74a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80034b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034b8:	ee07 3a90 	vmov	s15, r3
 80034bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80034c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034cc:	edc7 7a00 	vstr	s15, [r7]
 80034d0:	783b      	ldrb	r3, [r7, #0]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	e00e      	b.n	80034f4 <_ZN3jlb12SignalSender14measurements_1Ev+0x768>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80034dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ec:	edc7 7a00 	vstr	s15, [r7]
 80034f0:	783b      	ldrb	r3, [r7, #0]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	7553      	strb	r3, [r2, #21]
                        jlb_rx.measurements_1.line_sensor_23 = 22 == controller.selected_front ? controller.detection_front[22] + 2.0f : controller.detection_front[22];
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b16      	cmp	r3, #22
 8003502:	d113      	bne.n	800352c <_ZN3jlb12SignalSender14measurements_1Ev+0x7a0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800350a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003516:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800351a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800351e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003522:	edc7 7a00 	vstr	s15, [r7]
 8003526:	783b      	ldrb	r3, [r7, #0]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	e00e      	b.n	800354a <_ZN3jlb12SignalSender14measurements_1Ev+0x7be>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003532:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003542:	edc7 7a00 	vstr	s15, [r7]
 8003546:	783b      	ldrb	r3, [r7, #0]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	7593      	strb	r3, [r2, #22]
                        jlb_rx.measurements_1.line_sensor_24 = 23 == controller.selected_front ? controller.detection_front[23] + 2.0f : controller.detection_front[23];
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b17      	cmp	r3, #23
 8003558:	d113      	bne.n	8003582 <_ZN3jlb12SignalSender14measurements_1Ev+0x7f6>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003560:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003564:	ee07 3a90 	vmov	s15, r3
 8003568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800356c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003570:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003578:	edc7 7a00 	vstr	s15, [r7]
 800357c:	783b      	ldrb	r3, [r7, #0]
 800357e:	b2db      	uxtb	r3, r3
 8003580:	e00e      	b.n	80035a0 <_ZN3jlb12SignalSender14measurements_1Ev+0x814>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003588:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800358c:	ee07 3a90 	vmov	s15, r3
 8003590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003598:	edc7 7a00 	vstr	s15, [r7]
 800359c:	783b      	ldrb	r3, [r7, #0]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	75d3      	strb	r3, [r2, #23]
                        jlb_rx.measurements_1.line_sensor_25 = 24 == controller.selected_front ? controller.detection_front[24] + 2.0f : controller.detection_front[24];
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b18      	cmp	r3, #24
 80035ae:	d113      	bne.n	80035d8 <_ZN3jlb12SignalSender14measurements_1Ev+0x84c>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80035b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80035c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ce:	edc7 7a00 	vstr	s15, [r7]
 80035d2:	783b      	ldrb	r3, [r7, #0]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e00e      	b.n	80035f6 <_ZN3jlb12SignalSender14measurements_1Ev+0x86a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80035de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ee:	edc7 7a00 	vstr	s15, [r7]
 80035f2:	783b      	ldrb	r3, [r7, #0]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	7613      	strb	r3, [r2, #24]
                        jlb_rx.measurements_1.line_sensor_26 = 25 == controller.selected_front ? controller.detection_front[25] + 2.0f : controller.detection_front[25];
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b19      	cmp	r3, #25
 8003604:	d113      	bne.n	800362e <_ZN3jlb12SignalSender14measurements_1Ev+0x8a2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800360c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003610:	ee07 3a90 	vmov	s15, r3
 8003614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003618:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800361c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003624:	edc7 7a00 	vstr	s15, [r7]
 8003628:	783b      	ldrb	r3, [r7, #0]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	e00e      	b.n	800364c <_ZN3jlb12SignalSender14measurements_1Ev+0x8c0>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003634:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003638:	ee07 3a90 	vmov	s15, r3
 800363c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003644:	edc7 7a00 	vstr	s15, [r7]
 8003648:	783b      	ldrb	r3, [r7, #0]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	7653      	strb	r3, [r2, #25]
                        jlb_rx.measurements_1.line_sensor_27 = 26 == controller.selected_front ? controller.detection_front[26] + 2.0f : controller.detection_front[26];
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b1a      	cmp	r3, #26
 800365a:	d113      	bne.n	8003684 <_ZN3jlb12SignalSender14measurements_1Ev+0x8f8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003662:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003666:	ee07 3a90 	vmov	s15, r3
 800366a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800366e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003672:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800367a:	edc7 7a00 	vstr	s15, [r7]
 800367e:	783b      	ldrb	r3, [r7, #0]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	e00e      	b.n	80036a2 <_ZN3jlb12SignalSender14measurements_1Ev+0x916>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800368a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800369a:	edc7 7a00 	vstr	s15, [r7]
 800369e:	783b      	ldrb	r3, [r7, #0]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	7693      	strb	r3, [r2, #26]
                        jlb_rx.measurements_1.line_sensor_28 = 27 == controller.selected_front ? controller.detection_front[27] + 2.0f : controller.detection_front[27];
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b1b      	cmp	r3, #27
 80036b0:	d113      	bne.n	80036da <_ZN3jlb12SignalSender14measurements_1Ev+0x94e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80036b8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80036bc:	ee07 3a90 	vmov	s15, r3
 80036c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80036c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d0:	edc7 7a00 	vstr	s15, [r7]
 80036d4:	783b      	ldrb	r3, [r7, #0]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	e00e      	b.n	80036f8 <_ZN3jlb12SignalSender14measurements_1Ev+0x96c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80036e0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80036e4:	ee07 3a90 	vmov	s15, r3
 80036e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f0:	edc7 7a00 	vstr	s15, [r7]
 80036f4:	783b      	ldrb	r3, [r7, #0]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	76d3      	strb	r3, [r2, #27]
                        jlb_rx.measurements_1.line_sensor_29 = 28 == controller.selected_front ? controller.detection_front[28] + 2.0f : controller.detection_front[28];
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b1c      	cmp	r3, #28
 8003706:	d113      	bne.n	8003730 <_ZN3jlb12SignalSender14measurements_1Ev+0x9a4>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800370e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800371a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800371e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003726:	edc7 7a00 	vstr	s15, [r7]
 800372a:	783b      	ldrb	r3, [r7, #0]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	e00e      	b.n	800374e <_ZN3jlb12SignalSender14measurements_1Ev+0x9c2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003746:	edc7 7a00 	vstr	s15, [r7]
 800374a:	783b      	ldrb	r3, [r7, #0]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	7713      	strb	r3, [r2, #28]
                        jlb_rx.measurements_1.line_sensor_30 = 29 == controller.selected_front ? controller.detection_front[29] + 2.0f : controller.detection_front[29];
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b1d      	cmp	r3, #29
 800375c:	d113      	bne.n	8003786 <_ZN3jlb12SignalSender14measurements_1Ev+0x9fa>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003768:	ee07 3a90 	vmov	s15, r3
 800376c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003770:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003774:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800377c:	edc7 7a00 	vstr	s15, [r7]
 8003780:	783b      	ldrb	r3, [r7, #0]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	e00e      	b.n	80037a4 <_ZN3jlb12SignalSender14measurements_1Ev+0xa18>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003790:	ee07 3a90 	vmov	s15, r3
 8003794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800379c:	edc7 7a00 	vstr	s15, [r7]
 80037a0:	783b      	ldrb	r3, [r7, #0]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	7753      	strb	r3, [r2, #29]
                        jlb_rx.measurements_1.line_sensor_31 = 30 == controller.selected_front ? controller.detection_front[30] + 2.0f : controller.detection_front[30];
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b1e      	cmp	r3, #30
 80037b2:	d113      	bne.n	80037dc <_ZN3jlb12SignalSender14measurements_1Ev+0xa50>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80037ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037c6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80037ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037d2:	edc7 7a00 	vstr	s15, [r7]
 80037d6:	783b      	ldrb	r3, [r7, #0]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e00e      	b.n	80037fa <_ZN3jlb12SignalSender14measurements_1Ev+0xa6e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80037e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037f2:	edc7 7a00 	vstr	s15, [r7]
 80037f6:	783b      	ldrb	r3, [r7, #0]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	7793      	strb	r3, [r2, #30]
                        jlb_rx.measurements_1.line_sensor_32 = 31 == controller.selected_front ? controller.detection_front[31] + 2.0f : controller.detection_front[31];
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b1f      	cmp	r3, #31
 8003808:	d113      	bne.n	8003832 <_ZN3jlb12SignalSender14measurements_1Ev+0xaa6>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003810:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003814:	ee07 3a90 	vmov	s15, r3
 8003818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800381c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003820:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003828:	edc7 7a00 	vstr	s15, [r7]
 800382c:	783b      	ldrb	r3, [r7, #0]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	e00e      	b.n	8003850 <_ZN3jlb12SignalSender14measurements_1Ev+0xac4>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003838:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800383c:	ee07 3a90 	vmov	s15, r3
 8003840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003848:	edc7 7a00 	vstr	s15, [r7]
 800384c:	783b      	ldrb	r3, [r7, #0]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	77d3      	strb	r3, [r2, #31]
#endif

                        char data[measurements_1_DLC + 2] = {0};
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	f107 0310 	add.w	r3, r7, #16
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = measurements_1_IDE;
 8003862:	2300      	movs	r3, #0
 8003864:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = measurements_1_DLC;
 8003866:	2308      	movs	r3, #8
 8003868:	72bb      	strb	r3, [r7, #10]
                        data[0] = measurements_1_CANID;
 800386a:	2301      	movs	r3, #1
 800386c:	733b      	strb	r3, [r7, #12]
                        data[1] = measurements_1_DLC;
 800386e:	2308      	movs	r3, #8
 8003870:	737b      	strb	r3, [r7, #13]
                        Pack_measurements_1_jlb(&jlb_rx.measurements_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f107 010c 	add.w	r1, r7, #12
 8003878:	3102      	adds	r1, #2
 800387a:	f107 030b 	add.w	r3, r7, #11
 800387e:	f107 020a 	add.w	r2, r7, #10
 8003882:	f7fd fb5b 	bl	8000f3c <Pack_measurements_1_jlb>
                        send(data, measurements_1_DLC + 2);
 8003886:	f107 030c 	add.w	r3, r7, #12
 800388a:	220a      	movs	r2, #10
 800388c:	4619      	mov	r1, r3
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff fa6f 	bl	8002d72 <_ZN3jlb12SignalSender4sendEPcj>
                }
 8003894:	bf00      	nop
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <_ZN3jlb12SignalSender14measurements_2Ev>:

                void measurements_2()
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.measurements_2.line_sensor_1 = 0 == controller.selected_rear ? controller.detection_rear[0] + 2.0f : controller.detection_rear[0];
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d113      	bne.n	80038d8 <_ZN3jlb12SignalSender14measurements_2Ev+0x3c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80038b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80038c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ce:	edc7 7a00 	vstr	s15, [r7]
 80038d2:	783b      	ldrb	r3, [r7, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	e00e      	b.n	80038f6 <_ZN3jlb12SignalSender14measurements_2Ev+0x5a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80038de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038e2:	ee07 3a90 	vmov	s15, r3
 80038e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ee:	edc7 7a00 	vstr	s15, [r7]
 80038f2:	783b      	ldrb	r3, [r7, #0]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	f882 3020 	strb.w	r3, [r2, #32]
                        jlb_rx.measurements_2.line_sensor_2 = 1 == controller.selected_rear ? controller.detection_rear[1] + 2.0f : controller.detection_rear[1];
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d113      	bne.n	8003930 <_ZN3jlb12SignalSender14measurements_2Ev+0x94>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800390e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800391a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800391e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003926:	edc7 7a00 	vstr	s15, [r7]
 800392a:	783b      	ldrb	r3, [r7, #0]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	e00e      	b.n	800394e <_ZN3jlb12SignalSender14measurements_2Ev+0xb2>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003946:	edc7 7a00 	vstr	s15, [r7]
 800394a:	783b      	ldrb	r3, [r7, #0]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
                        jlb_rx.measurements_2.line_sensor_3 = 2 == controller.selected_rear ? controller.detection_rear[2] + 2.0f : controller.detection_rear[2];
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d113      	bne.n	8003988 <_ZN3jlb12SignalSender14measurements_2Ev+0xec>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003966:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800396a:	ee07 3a90 	vmov	s15, r3
 800396e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003972:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003976:	ee77 7a87 	vadd.f32	s15, s15, s14
 800397a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800397e:	edc7 7a00 	vstr	s15, [r7]
 8003982:	783b      	ldrb	r3, [r7, #0]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	e00e      	b.n	80039a6 <_ZN3jlb12SignalSender14measurements_2Ev+0x10a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800398e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800399e:	edc7 7a00 	vstr	s15, [r7]
 80039a2:	783b      	ldrb	r3, [r7, #0]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
                        jlb_rx.measurements_2.line_sensor_4 = 3 == controller.selected_rear ? controller.detection_rear[3] + 2.0f : controller.detection_rear[3];
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d113      	bne.n	80039e0 <_ZN3jlb12SignalSender14measurements_2Ev+0x144>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80039be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80039ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039d6:	edc7 7a00 	vstr	s15, [r7]
 80039da:	783b      	ldrb	r3, [r7, #0]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	e00e      	b.n	80039fe <_ZN3jlb12SignalSender14measurements_2Ev+0x162>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80039e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039ea:	ee07 3a90 	vmov	s15, r3
 80039ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039f6:	edc7 7a00 	vstr	s15, [r7]
 80039fa:	783b      	ldrb	r3, [r7, #0]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
                        jlb_rx.measurements_2.line_sensor_5 = 4 == controller.selected_rear ? controller.detection_rear[4] + 2.0f : controller.detection_rear[4];
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d113      	bne.n	8003a38 <_ZN3jlb12SignalSender14measurements_2Ev+0x19c>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003a16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a22:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003a26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a2e:	edc7 7a00 	vstr	s15, [r7]
 8003a32:	783b      	ldrb	r3, [r7, #0]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	e00e      	b.n	8003a56 <_ZN3jlb12SignalSender14measurements_2Ev+0x1ba>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003a3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a4e:	edc7 7a00 	vstr	s15, [r7]
 8003a52:	783b      	ldrb	r3, [r7, #0]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
                        jlb_rx.measurements_2.line_sensor_6 = 5 == controller.selected_rear ? controller.detection_rear[5] + 2.0f : controller.detection_rear[5];
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b05      	cmp	r3, #5
 8003a66:	d113      	bne.n	8003a90 <_ZN3jlb12SignalSender14measurements_2Ev+0x1f4>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a7a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003a7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a86:	edc7 7a00 	vstr	s15, [r7]
 8003a8a:	783b      	ldrb	r3, [r7, #0]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e00e      	b.n	8003aae <_ZN3jlb12SignalSender14measurements_2Ev+0x212>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003a96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aa6:	edc7 7a00 	vstr	s15, [r7]
 8003aaa:	783b      	ldrb	r3, [r7, #0]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
                        jlb_rx.measurements_2.line_sensor_7 = 6 == controller.selected_rear ? controller.detection_rear[6] + 2.0f : controller.detection_rear[6];
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b06      	cmp	r3, #6
 8003abe:	d113      	bne.n	8003ae8 <_ZN3jlb12SignalSender14measurements_2Ev+0x24c>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003ac6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003aca:	ee07 3a90 	vmov	s15, r3
 8003ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ad2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003ad6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ade:	edc7 7a00 	vstr	s15, [r7]
 8003ae2:	783b      	ldrb	r3, [r7, #0]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	e00e      	b.n	8003b06 <_ZN3jlb12SignalSender14measurements_2Ev+0x26a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003aee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003afe:	edc7 7a00 	vstr	s15, [r7]
 8003b02:	783b      	ldrb	r3, [r7, #0]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
                        jlb_rx.measurements_2.line_sensor_8 = 7 == controller.selected_rear ? controller.detection_rear[7] + 2.0f : controller.detection_rear[7];
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b07      	cmp	r3, #7
 8003b16:	d113      	bne.n	8003b40 <_ZN3jlb12SignalSender14measurements_2Ev+0x2a4>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003b1e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b2a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b36:	edc7 7a00 	vstr	s15, [r7]
 8003b3a:	783b      	ldrb	r3, [r7, #0]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	e00e      	b.n	8003b5e <_ZN3jlb12SignalSender14measurements_2Ev+0x2c2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003b46:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b56:	edc7 7a00 	vstr	s15, [r7]
 8003b5a:	783b      	ldrb	r3, [r7, #0]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
                        jlb_rx.measurements_2.line_sensor_9 = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d113      	bne.n	8003b98 <_ZN3jlb12SignalSender14measurements_2Ev+0x2fc>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003b76:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b82:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003b86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b8e:	edc7 7a00 	vstr	s15, [r7]
 8003b92:	783b      	ldrb	r3, [r7, #0]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e00e      	b.n	8003bb6 <_ZN3jlb12SignalSender14measurements_2Ev+0x31a>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003b9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bae:	edc7 7a00 	vstr	s15, [r7]
 8003bb2:	783b      	ldrb	r3, [r7, #0]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
                        jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b09      	cmp	r3, #9
 8003bc6:	d113      	bne.n	8003bf0 <_ZN3jlb12SignalSender14measurements_2Ev+0x354>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003bce:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bda:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003bde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003be6:	edc7 7a00 	vstr	s15, [r7]
 8003bea:	783b      	ldrb	r3, [r7, #0]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e00e      	b.n	8003c0e <_ZN3jlb12SignalSender14measurements_2Ev+0x372>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003bf6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c06:	edc7 7a00 	vstr	s15, [r7]
 8003c0a:	783b      	ldrb	r3, [r7, #0]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
                        jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b0a      	cmp	r3, #10
 8003c1e:	d113      	bne.n	8003c48 <_ZN3jlb12SignalSender14measurements_2Ev+0x3ac>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003c26:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c32:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003c36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c3e:	edc7 7a00 	vstr	s15, [r7]
 8003c42:	783b      	ldrb	r3, [r7, #0]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	e00e      	b.n	8003c66 <_ZN3jlb12SignalSender14measurements_2Ev+0x3ca>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003c4e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c5e:	edc7 7a00 	vstr	s15, [r7]
 8003c62:	783b      	ldrb	r3, [r7, #0]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                        jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b0b      	cmp	r3, #11
 8003c76:	d113      	bne.n	8003ca0 <_ZN3jlb12SignalSender14measurements_2Ev+0x404>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003c7e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c8a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003c8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c96:	edc7 7a00 	vstr	s15, [r7]
 8003c9a:	783b      	ldrb	r3, [r7, #0]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e00e      	b.n	8003cbe <_ZN3jlb12SignalSender14measurements_2Ev+0x422>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003ca6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cb6:	edc7 7a00 	vstr	s15, [r7]
 8003cba:	783b      	ldrb	r3, [r7, #0]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                        jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b0c      	cmp	r3, #12
 8003cce:	d113      	bne.n	8003cf8 <_ZN3jlb12SignalSender14measurements_2Ev+0x45c>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003cd6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ce2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003ce6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cee:	edc7 7a00 	vstr	s15, [r7]
 8003cf2:	783b      	ldrb	r3, [r7, #0]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	e00e      	b.n	8003d16 <_ZN3jlb12SignalSender14measurements_2Ev+0x47a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003cfe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d0e:	edc7 7a00 	vstr	s15, [r7]
 8003d12:	783b      	ldrb	r3, [r7, #0]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                        jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b0d      	cmp	r3, #13
 8003d26:	d113      	bne.n	8003d50 <_ZN3jlb12SignalSender14measurements_2Ev+0x4b4>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003d2e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d3a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003d3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d46:	edc7 7a00 	vstr	s15, [r7]
 8003d4a:	783b      	ldrb	r3, [r7, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	e00e      	b.n	8003d6e <_ZN3jlb12SignalSender14measurements_2Ev+0x4d2>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003d56:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d66:	edc7 7a00 	vstr	s15, [r7]
 8003d6a:	783b      	ldrb	r3, [r7, #0]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
                        jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b0e      	cmp	r3, #14
 8003d7e:	d113      	bne.n	8003da8 <_ZN3jlb12SignalSender14measurements_2Ev+0x50c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003d86:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003d96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d9e:	edc7 7a00 	vstr	s15, [r7]
 8003da2:	783b      	ldrb	r3, [r7, #0]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	e00e      	b.n	8003dc6 <_ZN3jlb12SignalSender14measurements_2Ev+0x52a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003dae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dbe:	edc7 7a00 	vstr	s15, [r7]
 8003dc2:	783b      	ldrb	r3, [r7, #0]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
                        jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b0f      	cmp	r3, #15
 8003dd6:	d113      	bne.n	8003e00 <_ZN3jlb12SignalSender14measurements_2Ev+0x564>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003dde:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003dee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003df6:	edc7 7a00 	vstr	s15, [r7]
 8003dfa:	783b      	ldrb	r3, [r7, #0]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e00e      	b.n	8003e1e <_ZN3jlb12SignalSender14measurements_2Ev+0x582>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003e06:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8003e0a:	ee07 3a90 	vmov	s15, r3
 8003e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e16:	edc7 7a00 	vstr	s15, [r7]
 8003e1a:	783b      	ldrb	r3, [r7, #0]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
#ifndef SIMULATION
                        jlb_rx.measurements_2.line_sensor_9 = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d113      	bne.n	8003e58 <_ZN3jlb12SignalSender14measurements_2Ev+0x5bc>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003e36:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003e3a:	ee07 3a90 	vmov	s15, r3
 8003e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e42:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003e46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e4e:	edc7 7a00 	vstr	s15, [r7]
 8003e52:	783b      	ldrb	r3, [r7, #0]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	e00e      	b.n	8003e76 <_ZN3jlb12SignalSender14measurements_2Ev+0x5da>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003e5e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e6e:	edc7 7a00 	vstr	s15, [r7]
 8003e72:	783b      	ldrb	r3, [r7, #0]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
                        jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b09      	cmp	r3, #9
 8003e86:	d113      	bne.n	8003eb0 <_ZN3jlb12SignalSender14measurements_2Ev+0x614>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003e8e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003e9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ea6:	edc7 7a00 	vstr	s15, [r7]
 8003eaa:	783b      	ldrb	r3, [r7, #0]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	e00e      	b.n	8003ece <_ZN3jlb12SignalSender14measurements_2Ev+0x632>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003eb6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec6:	edc7 7a00 	vstr	s15, [r7]
 8003eca:	783b      	ldrb	r3, [r7, #0]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
                        jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b0a      	cmp	r3, #10
 8003ede:	d113      	bne.n	8003f08 <_ZN3jlb12SignalSender14measurements_2Ev+0x66c>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003ee6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ef2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003ef6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003efe:	edc7 7a00 	vstr	s15, [r7]
 8003f02:	783b      	ldrb	r3, [r7, #0]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e00e      	b.n	8003f26 <_ZN3jlb12SignalSender14measurements_2Ev+0x68a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003f0e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f1e:	edc7 7a00 	vstr	s15, [r7]
 8003f22:	783b      	ldrb	r3, [r7, #0]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                        jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b0b      	cmp	r3, #11
 8003f36:	d113      	bne.n	8003f60 <_ZN3jlb12SignalSender14measurements_2Ev+0x6c4>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003f3e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f4a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003f4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f56:	edc7 7a00 	vstr	s15, [r7]
 8003f5a:	783b      	ldrb	r3, [r7, #0]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	e00e      	b.n	8003f7e <_ZN3jlb12SignalSender14measurements_2Ev+0x6e2>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003f66:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f76:	edc7 7a00 	vstr	s15, [r7]
 8003f7a:	783b      	ldrb	r3, [r7, #0]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                        jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	d113      	bne.n	8003fb8 <_ZN3jlb12SignalSender14measurements_2Ev+0x71c>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003f96:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003fa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fae:	edc7 7a00 	vstr	s15, [r7]
 8003fb2:	783b      	ldrb	r3, [r7, #0]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e00e      	b.n	8003fd6 <_ZN3jlb12SignalSender14measurements_2Ev+0x73a>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003fbe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fce:	edc7 7a00 	vstr	s15, [r7]
 8003fd2:	783b      	ldrb	r3, [r7, #0]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                        jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b0d      	cmp	r3, #13
 8003fe6:	d113      	bne.n	8004010 <_ZN3jlb12SignalSender14measurements_2Ev+0x774>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003fee:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ffa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003ffe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004006:	edc7 7a00 	vstr	s15, [r7]
 800400a:	783b      	ldrb	r3, [r7, #0]
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e00e      	b.n	800402e <_ZN3jlb12SignalSender14measurements_2Ev+0x792>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004016:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004026:	edc7 7a00 	vstr	s15, [r7]
 800402a:	783b      	ldrb	r3, [r7, #0]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
                        jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b0e      	cmp	r3, #14
 800403e:	d113      	bne.n	8004068 <_ZN3jlb12SignalSender14measurements_2Ev+0x7cc>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004046:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004052:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004056:	ee77 7a87 	vadd.f32	s15, s15, s14
 800405a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800405e:	edc7 7a00 	vstr	s15, [r7]
 8004062:	783b      	ldrb	r3, [r7, #0]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e00e      	b.n	8004086 <_ZN3jlb12SignalSender14measurements_2Ev+0x7ea>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800406e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800407e:	edc7 7a00 	vstr	s15, [r7]
 8004082:	783b      	ldrb	r3, [r7, #0]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
                        jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b0f      	cmp	r3, #15
 8004096:	d113      	bne.n	80040c0 <_ZN3jlb12SignalSender14measurements_2Ev+0x824>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800409e:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040aa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80040ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b6:	edc7 7a00 	vstr	s15, [r7]
 80040ba:	783b      	ldrb	r3, [r7, #0]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	e00e      	b.n	80040de <_ZN3jlb12SignalSender14measurements_2Ev+0x842>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80040c6:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040d6:	edc7 7a00 	vstr	s15, [r7]
 80040da:	783b      	ldrb	r3, [r7, #0]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
                        jlb_rx.measurements_2.line_sensor_17 = 16 == controller.selected_rear ? controller.detection_rear[16] + 2.0f : controller.detection_rear[16];
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d113      	bne.n	8004118 <_ZN3jlb12SignalSender14measurements_2Ev+0x87c>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80040f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004102:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004106:	ee77 7a87 	vadd.f32	s15, s15, s14
 800410a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800410e:	edc7 7a00 	vstr	s15, [r7]
 8004112:	783b      	ldrb	r3, [r7, #0]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	e00e      	b.n	8004136 <_ZN3jlb12SignalSender14measurements_2Ev+0x89a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800411e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800412e:	edc7 7a00 	vstr	s15, [r7]
 8004132:	783b      	ldrb	r3, [r7, #0]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
                        jlb_rx.measurements_2.line_sensor_18 = 17 == controller.selected_rear ? controller.detection_rear[17] + 2.0f : controller.detection_rear[17];
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b11      	cmp	r3, #17
 8004146:	d113      	bne.n	8004170 <_ZN3jlb12SignalSender14measurements_2Ev+0x8d4>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800414e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800415a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800415e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004166:	edc7 7a00 	vstr	s15, [r7]
 800416a:	783b      	ldrb	r3, [r7, #0]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e00e      	b.n	800418e <_ZN3jlb12SignalSender14measurements_2Ev+0x8f2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004176:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004186:	edc7 7a00 	vstr	s15, [r7]
 800418a:	783b      	ldrb	r3, [r7, #0]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                        jlb_rx.measurements_2.line_sensor_19 = 18 == controller.selected_rear ? controller.detection_rear[18] + 2.0f : controller.detection_rear[18];
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b12      	cmp	r3, #18
 800419e:	d113      	bne.n	80041c8 <_ZN3jlb12SignalSender14measurements_2Ev+0x92c>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80041a6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041b2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80041b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041be:	edc7 7a00 	vstr	s15, [r7]
 80041c2:	783b      	ldrb	r3, [r7, #0]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	e00e      	b.n	80041e6 <_ZN3jlb12SignalSender14measurements_2Ev+0x94a>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80041ce:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041de:	edc7 7a00 	vstr	s15, [r7]
 80041e2:	783b      	ldrb	r3, [r7, #0]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
                        jlb_rx.measurements_2.line_sensor_20 = 19 == controller.selected_rear ? controller.detection_rear[19] + 2.0f : controller.detection_rear[19];
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b13      	cmp	r3, #19
 80041f6:	d113      	bne.n	8004220 <_ZN3jlb12SignalSender14measurements_2Ev+0x984>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80041fe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8004202:	ee07 3a90 	vmov	s15, r3
 8004206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800420a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800420e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004216:	edc7 7a00 	vstr	s15, [r7]
 800421a:	783b      	ldrb	r3, [r7, #0]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e00e      	b.n	800423e <_ZN3jlb12SignalSender14measurements_2Ev+0x9a2>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004226:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004236:	edc7 7a00 	vstr	s15, [r7]
 800423a:	783b      	ldrb	r3, [r7, #0]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                        jlb_rx.measurements_2.line_sensor_21 = 20 == controller.selected_rear ? controller.detection_rear[20] + 2.0f : controller.detection_rear[20];
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b14      	cmp	r3, #20
 800424e:	d113      	bne.n	8004278 <_ZN3jlb12SignalSender14measurements_2Ev+0x9dc>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004256:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004262:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004266:	ee77 7a87 	vadd.f32	s15, s15, s14
 800426a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800426e:	edc7 7a00 	vstr	s15, [r7]
 8004272:	783b      	ldrb	r3, [r7, #0]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	e00e      	b.n	8004296 <_ZN3jlb12SignalSender14measurements_2Ev+0x9fa>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800427e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800428e:	edc7 7a00 	vstr	s15, [r7]
 8004292:	783b      	ldrb	r3, [r7, #0]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                        jlb_rx.measurements_2.line_sensor_22 = 21 == controller.selected_rear ? controller.detection_rear[21] + 2.0f : controller.detection_rear[21];
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b15      	cmp	r3, #21
 80042a6:	d113      	bne.n	80042d0 <_ZN3jlb12SignalSender14measurements_2Ev+0xa34>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80042ae:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042ba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80042be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042c6:	edc7 7a00 	vstr	s15, [r7]
 80042ca:	783b      	ldrb	r3, [r7, #0]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	e00e      	b.n	80042ee <_ZN3jlb12SignalSender14measurements_2Ev+0xa52>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80042d6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042e6:	edc7 7a00 	vstr	s15, [r7]
 80042ea:	783b      	ldrb	r3, [r7, #0]
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
                        jlb_rx.measurements_2.line_sensor_23 = 22 == controller.selected_rear ? controller.detection_rear[22] + 2.0f : controller.detection_rear[22];
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b16      	cmp	r3, #22
 80042fe:	d113      	bne.n	8004328 <_ZN3jlb12SignalSender14measurements_2Ev+0xa8c>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004306:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004312:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004316:	ee77 7a87 	vadd.f32	s15, s15, s14
 800431a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800431e:	edc7 7a00 	vstr	s15, [r7]
 8004322:	783b      	ldrb	r3, [r7, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	e00e      	b.n	8004346 <_ZN3jlb12SignalSender14measurements_2Ev+0xaaa>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800432e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800433e:	edc7 7a00 	vstr	s15, [r7]
 8004342:	783b      	ldrb	r3, [r7, #0]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
                        jlb_rx.measurements_2.line_sensor_24 = 23 == controller.selected_rear ? controller.detection_rear[23] + 2.0f : controller.detection_rear[23];
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b17      	cmp	r3, #23
 8004356:	d113      	bne.n	8004380 <_ZN3jlb12SignalSender14measurements_2Ev+0xae4>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800435e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800436a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800436e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004376:	edc7 7a00 	vstr	s15, [r7]
 800437a:	783b      	ldrb	r3, [r7, #0]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	e00e      	b.n	800439e <_ZN3jlb12SignalSender14measurements_2Ev+0xb02>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004386:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004396:	edc7 7a00 	vstr	s15, [r7]
 800439a:	783b      	ldrb	r3, [r7, #0]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
                        jlb_rx.measurements_2.line_sensor_25 = 24 == controller.selected_rear ? controller.detection_rear[24] + 2.0f : controller.detection_rear[24];
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b18      	cmp	r3, #24
 80043ae:	d113      	bne.n	80043d8 <_ZN3jlb12SignalSender14measurements_2Ev+0xb3c>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80043b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80043c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ce:	edc7 7a00 	vstr	s15, [r7]
 80043d2:	783b      	ldrb	r3, [r7, #0]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	e00e      	b.n	80043f6 <_ZN3jlb12SignalSender14measurements_2Ev+0xb5a>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80043de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ee:	edc7 7a00 	vstr	s15, [r7]
 80043f2:	783b      	ldrb	r3, [r7, #0]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
                        jlb_rx.measurements_2.line_sensor_26 = 25 == controller.selected_rear ? controller.detection_rear[25] + 2.0f : controller.detection_rear[25];
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b19      	cmp	r3, #25
 8004406:	d113      	bne.n	8004430 <_ZN3jlb12SignalSender14measurements_2Ev+0xb94>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800440e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800441a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800441e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004426:	edc7 7a00 	vstr	s15, [r7]
 800442a:	783b      	ldrb	r3, [r7, #0]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	e00e      	b.n	800444e <_ZN3jlb12SignalSender14measurements_2Ev+0xbb2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004436:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004446:	edc7 7a00 	vstr	s15, [r7]
 800444a:	783b      	ldrb	r3, [r7, #0]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
                        jlb_rx.measurements_2.line_sensor_27 = 26 == controller.selected_rear ? controller.detection_rear[26] + 2.0f : controller.detection_rear[26];
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b1a      	cmp	r3, #26
 800445e:	d113      	bne.n	8004488 <_ZN3jlb12SignalSender14measurements_2Ev+0xbec>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004466:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004472:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004476:	ee77 7a87 	vadd.f32	s15, s15, s14
 800447a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800447e:	edc7 7a00 	vstr	s15, [r7]
 8004482:	783b      	ldrb	r3, [r7, #0]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	e00e      	b.n	80044a6 <_ZN3jlb12SignalSender14measurements_2Ev+0xc0a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800448e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800449e:	edc7 7a00 	vstr	s15, [r7]
 80044a2:	783b      	ldrb	r3, [r7, #0]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                        jlb_rx.measurements_2.line_sensor_28 = 27 == controller.selected_rear ? controller.detection_rear[27] + 2.0f : controller.detection_rear[27];
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b1b      	cmp	r3, #27
 80044b6:	d113      	bne.n	80044e0 <_ZN3jlb12SignalSender14measurements_2Ev+0xc44>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80044be:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80044ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d6:	edc7 7a00 	vstr	s15, [r7]
 80044da:	783b      	ldrb	r3, [r7, #0]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	e00e      	b.n	80044fe <_ZN3jlb12SignalSender14measurements_2Ev+0xc62>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80044e6:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f6:	edc7 7a00 	vstr	s15, [r7]
 80044fa:	783b      	ldrb	r3, [r7, #0]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	f882 303b 	strb.w	r3, [r2, #59]	; 0x3b
                        jlb_rx.measurements_2.line_sensor_29 = 28 == controller.selected_rear ? controller.detection_rear[28] + 2.0f : controller.detection_rear[28];
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b1c      	cmp	r3, #28
 800450e:	d113      	bne.n	8004538 <_ZN3jlb12SignalSender14measurements_2Ev+0xc9c>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004516:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004522:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004526:	ee77 7a87 	vadd.f32	s15, s15, s14
 800452a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800452e:	edc7 7a00 	vstr	s15, [r7]
 8004532:	783b      	ldrb	r3, [r7, #0]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e00e      	b.n	8004556 <_ZN3jlb12SignalSender14measurements_2Ev+0xcba>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800453e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800454e:	edc7 7a00 	vstr	s15, [r7]
 8004552:	783b      	ldrb	r3, [r7, #0]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
                        jlb_rx.measurements_2.line_sensor_30 = 29 == controller.selected_rear ? controller.detection_rear[29] + 2.0f : controller.detection_rear[29];
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b1d      	cmp	r3, #29
 8004566:	d113      	bne.n	8004590 <_ZN3jlb12SignalSender14measurements_2Ev+0xcf4>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800456e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800457a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800457e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004586:	edc7 7a00 	vstr	s15, [r7]
 800458a:	783b      	ldrb	r3, [r7, #0]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	e00e      	b.n	80045ae <_ZN3jlb12SignalSender14measurements_2Ev+0xd12>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004596:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a6:	edc7 7a00 	vstr	s15, [r7]
 80045aa:	783b      	ldrb	r3, [r7, #0]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
                        jlb_rx.measurements_2.line_sensor_31 = 30 == controller.selected_rear ? controller.detection_rear[30] + 2.0f : controller.detection_rear[30];
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b1e      	cmp	r3, #30
 80045be:	d113      	bne.n	80045e8 <_ZN3jlb12SignalSender14measurements_2Ev+0xd4c>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80045c6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045d2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80045d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045de:	edc7 7a00 	vstr	s15, [r7]
 80045e2:	783b      	ldrb	r3, [r7, #0]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	e00e      	b.n	8004606 <_ZN3jlb12SignalSender14measurements_2Ev+0xd6a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80045ee:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045fe:	edc7 7a00 	vstr	s15, [r7]
 8004602:	783b      	ldrb	r3, [r7, #0]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
                        jlb_rx.measurements_2.line_sensor_32 = 31 == controller.selected_rear ? controller.detection_rear[31] + 2.0f : controller.detection_rear[31];
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b1f      	cmp	r3, #31
 8004616:	d113      	bne.n	8004640 <_ZN3jlb12SignalSender14measurements_2Ev+0xda4>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800461e:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800462a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800462e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004636:	edc7 7a00 	vstr	s15, [r7]
 800463a:	783b      	ldrb	r3, [r7, #0]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e00e      	b.n	800465e <_ZN3jlb12SignalSender14measurements_2Ev+0xdc2>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004646:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800464a:	ee07 3a90 	vmov	s15, r3
 800464e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004656:	edc7 7a00 	vstr	s15, [r7]
 800465a:	783b      	ldrb	r3, [r7, #0]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
#endif

                        char data[measurements_2_DLC + 2] = {0};
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	f107 0310 	add.w	r3, r7, #16
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = measurements_2_IDE;
 8004672:	2300      	movs	r3, #0
 8004674:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = measurements_2_DLC;
 8004676:	2308      	movs	r3, #8
 8004678:	72bb      	strb	r3, [r7, #10]
                        data[0] = measurements_2_CANID;
 800467a:	2302      	movs	r3, #2
 800467c:	733b      	strb	r3, [r7, #12]
                        data[1] = measurements_2_DLC;
 800467e:	2308      	movs	r3, #8
 8004680:	737b      	strb	r3, [r7, #13]
                        Pack_measurements_2_jlb(&jlb_rx.measurements_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f103 0020 	add.w	r0, r3, #32
 8004688:	f107 010c 	add.w	r1, r7, #12
 800468c:	3102      	adds	r1, #2
 800468e:	f107 030b 	add.w	r3, r7, #11
 8004692:	f107 020a 	add.w	r2, r7, #10
 8004696:	f7fc fd99 	bl	80011cc <Pack_measurements_2_jlb>
                        send(data, measurements_2_DLC + 2);
 800469a:	f107 030c 	add.w	r3, r7, #12
 800469e:	220a      	movs	r2, #10
 80046a0:	4619      	mov	r1, r3
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fe fb65 	bl	8002d72 <_ZN3jlb12SignalSender4sendEPcj>
                }
 80046a8:	bf00      	nop
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <_ZN3jlb12SignalSender14measurements_3Ev>:

                void measurements_3()
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.measurements_3.angular_velocity_x_phys = odometry.meas_ang_vel_x;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fb ff33 	bl	800052c <__aeabi_f2d>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
                        jlb_rx.measurements_3.angular_velocity_y_phys = odometry.meas_ang_vel_y;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fb ff27 	bl	800052c <__aeabi_f2d>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
                        jlb_rx.measurements_3.angular_velocity_z_phys = odometry.meas_ang_vel_z;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fb ff1b 	bl	800052c <__aeabi_f2d>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

                        char data[measurements_2_DLC + 2] = {0};
 8004700:	2300      	movs	r3, #0
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	f107 0310 	add.w	r3, r7, #16
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = measurements_3_IDE;
 800470e:	2300      	movs	r3, #0
 8004710:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = measurements_3_DLC;
 8004712:	2308      	movs	r3, #8
 8004714:	72bb      	strb	r3, [r7, #10]
                        data[0] = measurements_3_CANID;
 8004716:	2303      	movs	r3, #3
 8004718:	733b      	strb	r3, [r7, #12]
                        data[1] = measurements_3_DLC;
 800471a:	2308      	movs	r3, #8
 800471c:	737b      	strb	r3, [r7, #13]
                        Pack_measurements_3_jlb(&jlb_rx.measurements_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8004724:	f107 010c 	add.w	r1, r7, #12
 8004728:	3102      	adds	r1, #2
 800472a:	f107 030b 	add.w	r3, r7, #11
 800472e:	f107 020a 	add.w	r2, r7, #10
 8004732:	f7fc fe95 	bl	8001460 <Pack_measurements_3_jlb>
                        send(data, measurements_3_DLC + 2);
 8004736:	f107 030c 	add.w	r3, r7, #12
 800473a:	220a      	movs	r2, #10
 800473c:	4619      	mov	r1, r3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fe fb17 	bl	8002d72 <_ZN3jlb12SignalSender4sendEPcj>
                }
 8004744:	bf00      	nop
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <_ZN3jlb12SignalSender14measurements_4Ev>:

                void measurements_4()
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.measurements_4.linear_acceleration_x_phys = odometry.meas_lin_acc_x;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	4618      	mov	r0, r3
 800475e:	f7fb fee5 	bl	800052c <__aeabi_f2d>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                        jlb_rx.measurements_4.linear_acceleration_y_phys = odometry.meas_lin_acc_y;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	4618      	mov	r0, r3
 8004776:	f7fb fed9 	bl	800052c <__aeabi_f2d>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                        jlb_rx.measurements_4.linear_acceleration_z_phys = odometry.meas_lin_acc_z;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	4618      	mov	r0, r3
 800478e:	f7fb fecd 	bl	800052c <__aeabi_f2d>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

                        char data[measurements_3_DLC + 2] = {0};
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	f107 0310 	add.w	r3, r7, #16
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = measurements_4_IDE;
 80047aa:	2300      	movs	r3, #0
 80047ac:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = measurements_4_DLC;
 80047ae:	2308      	movs	r3, #8
 80047b0:	72bb      	strb	r3, [r7, #10]
                        data[0] = measurements_4_CANID;
 80047b2:	2304      	movs	r3, #4
 80047b4:	733b      	strb	r3, [r7, #12]
                        data[1] = measurements_4_DLC;
 80047b6:	2308      	movs	r3, #8
 80047b8:	737b      	strb	r3, [r7, #13]
                        Pack_measurements_4_jlb(&jlb_rx.measurements_4, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80047c0:	f107 010c 	add.w	r1, r7, #12
 80047c4:	3102      	adds	r1, #2
 80047c6:	f107 030b 	add.w	r3, r7, #11
 80047ca:	f107 020a 	add.w	r2, r7, #10
 80047ce:	f7fc ff07 	bl	80015e0 <Pack_measurements_4_jlb>
                        send(data, measurements_4_DLC + 2);
 80047d2:	f107 030c 	add.w	r3, r7, #12
 80047d6:	220a      	movs	r2, #10
 80047d8:	4619      	mov	r1, r3
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fe fac9 	bl	8002d72 <_ZN3jlb12SignalSender4sendEPcj>
                }
 80047e0:	bf00      	nop
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <_ZN3jlb12SignalSender14measurements_5Ev>:

                void measurements_5()
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.measurements_5.motor_rpm_phys = odometry.meas_motor_rpm;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fb fe97 	bl	800052c <__aeabi_f2d>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8

                        char data[measurements_4_DLC + 2] = {0};
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	f107 0310 	add.w	r3, r7, #16
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = measurements_5_IDE;
 8004816:	2300      	movs	r3, #0
 8004818:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = measurements_5_DLC;
 800481a:	2308      	movs	r3, #8
 800481c:	72bb      	strb	r3, [r7, #10]
                        data[0] = measurements_5_CANID;
 800481e:	2305      	movs	r3, #5
 8004820:	733b      	strb	r3, [r7, #12]
                        data[1] = measurements_5_DLC;
 8004822:	2308      	movs	r3, #8
 8004824:	737b      	strb	r3, [r7, #13]
                        Pack_measurements_5_jlb(&jlb_rx.measurements_5, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800482c:	f107 010c 	add.w	r1, r7, #12
 8004830:	3102      	adds	r1, #2
 8004832:	f107 030b 	add.w	r3, r7, #11
 8004836:	f107 020a 	add.w	r2, r7, #10
 800483a:	f7fc ff91 	bl	8001760 <Pack_measurements_5_jlb>
                        send(data, measurements_5_DLC + 2);
 800483e:	f107 030c 	add.w	r3, r7, #12
 8004842:	220a      	movs	r2, #10
 8004844:	4619      	mov	r1, r3
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fe fa93 	bl	8002d72 <_ZN3jlb12SignalSender4sendEPcj>
                }
 800484c:	bf00      	nop
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <_ZN3jlb12SignalSender10odometry_1Ev>:

                void odometry_1()
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.odometry_1.position_x_phys = odometry.x_t;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4618      	mov	r0, r3
 8004866:	f7fb fe61 	bl	800052c <__aeabi_f2d>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
                        jlb_rx.odometry_1.position_y_phys = odometry.y_t;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fb fe55 	bl	800052c <__aeabi_f2d>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
                        jlb_rx.odometry_1.orientation_phys = odometry.theta_t;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	4618      	mov	r0, r3
 8004896:	f7fb fe49 	bl	800052c <__aeabi_f2d>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8

                        char data[odometry_1_DLC + 2] = {0};
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	f107 0310 	add.w	r3, r7, #16
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = odometry_1_IDE;
 80048b2:	2300      	movs	r3, #0
 80048b4:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = odometry_1_DLC;
 80048b6:	2308      	movs	r3, #8
 80048b8:	72bb      	strb	r3, [r7, #10]
                        data[0] = odometry_1_CANID;
 80048ba:	2311      	movs	r3, #17
 80048bc:	733b      	strb	r3, [r7, #12]
                        data[1] = odometry_1_DLC;
 80048be:	2308      	movs	r3, #8
 80048c0:	737b      	strb	r3, [r7, #13]
                        Pack_odometry_1_jlb(&jlb_rx.odometry_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 80048c8:	f107 010c 	add.w	r1, r7, #12
 80048cc:	3102      	adds	r1, #2
 80048ce:	f107 030b 	add.w	r3, r7, #11
 80048d2:	f107 020a 	add.w	r2, r7, #10
 80048d6:	f7fc ff9f 	bl	8001818 <Pack_odometry_1_jlb>
                        send(data, odometry_1_DLC + 2);
 80048da:	f107 030c 	add.w	r3, r7, #12
 80048de:	220a      	movs	r2, #10
 80048e0:	4619      	mov	r1, r3
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fe fa45 	bl	8002d72 <_ZN3jlb12SignalSender4sendEPcj>
                }
 80048e8:	bf00      	nop
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <_ZN3jlb12SignalSender10odometry_2Ev>:

                void odometry_2()
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.odometry_2.linear_velocity_x_phys = odometry.vx_t;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f7fb fe13 	bl	800052c <__aeabi_f2d>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
                        jlb_rx.odometry_2.angular_velocity_z_phys = odometry.w_t;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	4618      	mov	r0, r3
 800491a:	f7fb fe07 	bl	800052c <__aeabi_f2d>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8

                        char data[odometry_2_DLC + 2] = {0};
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	f107 0310 	add.w	r3, r7, #16
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = odometry_2_IDE;
 8004936:	2300      	movs	r3, #0
 8004938:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = odometry_2_DLC;
 800493a:	2308      	movs	r3, #8
 800493c:	72bb      	strb	r3, [r7, #10]
                        data[0] = odometry_2_CANID;
 800493e:	2312      	movs	r3, #18
 8004940:	733b      	strb	r3, [r7, #12]
                        data[1] = odometry_2_DLC;
 8004942:	2308      	movs	r3, #8
 8004944:	737b      	strb	r3, [r7, #13]
                        Pack_odometry_2_jlb(&jlb_rx.odometry_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 800494c:	f107 010c 	add.w	r1, r7, #12
 8004950:	3102      	adds	r1, #2
 8004952:	f107 030b 	add.w	r3, r7, #11
 8004956:	f107 020a 	add.w	r2, r7, #10
 800495a:	f7fd f825 	bl	80019a8 <Pack_odometry_2_jlb>
                        send(data, odometry_2_DLC + 2);
 800495e:	f107 030c 	add.w	r3, r7, #12
 8004962:	220a      	movs	r2, #10
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fe fa03 	bl	8002d72 <_ZN3jlb12SignalSender4sendEPcj>
                }
 800496c:	bf00      	nop
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <_ZN3jlb12SignalSender7logic_1Ev>:

                void logic_1()
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.logic_1.target_angle_phys = controller.target_angle;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	4618      	mov	r0, r3
 8004986:	f7fb fdd1 	bl	800052c <__aeabi_f2d>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
                        jlb_rx.logic_1.target_speed_phys = controller.target_speed;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	4618      	mov	r0, r3
 800499e:	f7fb fdc5 	bl	800052c <__aeabi_f2d>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118

                        char data[logic_1_DLC + 2] = {0};
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	f107 0310 	add.w	r3, r7, #16
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = logic_1_IDE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = logic_1_DLC;
 80049be:	2308      	movs	r3, #8
 80049c0:	72bb      	strb	r3, [r7, #10]
                        data[0] = logic_1_CANID;
 80049c2:	2321      	movs	r3, #33	; 0x21
 80049c4:	733b      	strb	r3, [r7, #12]
                        data[1] = logic_1_DLC;
 80049c6:	2308      	movs	r3, #8
 80049c8:	737b      	strb	r3, [r7, #13]
                        Pack_logic_1_jlb(&jlb_rx.logic_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80049d0:	f107 010c 	add.w	r1, r7, #12
 80049d4:	3102      	adds	r1, #2
 80049d6:	f107 030b 	add.w	r3, r7, #11
 80049da:	f107 020a 	add.w	r2, r7, #10
 80049de:	f7fd f877 	bl	8001ad0 <Pack_logic_1_jlb>
                        send(data, logic_1_DLC + 2);
 80049e2:	f107 030c 	add.w	r3, r7, #12
 80049e6:	220a      	movs	r2, #10
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fe f9c1 	bl	8002d72 <_ZN3jlb12SignalSender4sendEPcj>
                }
 80049f0:	bf00      	nop
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f004 f8f3 	bl	8008bec <_ZNSaIN3jlb4EdgeEED1Ev>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f004 f8d6 	bl	8008bcc <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>:
      vector() = default;
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff ffeb 	bl	8004a10 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <_ZN3jlb4NodeC1Ecff>:
        char name;
        float x;
        float y;
        std::vector<Edge> edges;

        Node(char name_, float x_, float y_) : name{name_}, x(x_), y(y_) {}
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004a52:	edc7 0a00 	vstr	s1, [r7]
 8004a56:	72fb      	strb	r3, [r7, #11]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	7afa      	ldrb	r2, [r7, #11]
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	609a      	str	r2, [r3, #8]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	330c      	adds	r3, #12
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff ffdb 	bl	8004a2a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <_ZN3jlb4NodeD1Ev>:
        ~Node() {}
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b082      	sub	sp, #8
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	330c      	adds	r3, #12
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f004 f8d8 	bl	8008c40 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <_ZN3jlb4EdgeD1Ev>:
    struct Edge
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f004 f922 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>:

        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f)
 8004ab6:	b590      	push	{r4, r7, lr}
 8004ab8:	b08d      	sub	sp, #52	; 0x34
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6178      	str	r0, [r7, #20]
 8004abe:	60fa      	str	r2, [r7, #12]
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	ed87 0a01 	vstr	s0, [r7, #4]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	74fb      	strb	r3, [r7, #19]
        {
            edges.push_back(Edge{name_, direction_, prev_nodes_, weight_});
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f103 040c 	add.w	r4, r3, #12
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	763b      	strb	r3, [r7, #24]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	61fb      	str	r3, [r7, #28]
 8004ad8:	f107 0318 	add.w	r3, r7, #24
 8004adc:	3308      	adds	r3, #8
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f004 f8c8 	bl	8008c76 <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aea:	f107 0318 	add.w	r3, r7, #24
 8004aee:	4619      	mov	r1, r3
 8004af0:	4620      	mov	r0, r4
 8004af2:	f004 f918 	bl	8008d26 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>
 8004af6:	f107 0318 	add.w	r3, r7, #24
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff ffcd 	bl	8004a9a <_ZN3jlb4EdgeD1Ev>
        }
 8004b00:	bf00      	nop
 8004b02:	3734      	adds	r7, #52	; 0x34
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd90      	pop	{r4, r7, pc}

08004b08 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f004 f918 	bl	8008d48 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>:
      vector() = default;
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b082      	sub	sp, #8
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff ffeb 	bl	8004b08 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	0000      	movs	r0, r0
	...

08004b40 <_ZN3jlb5GraphC1Ev>:
    class Graph
    {
    public:
        std::vector<Node> nodes;

        Graph()
 8004b40:	b590      	push	{r4, r7, lr}
 8004b42:	f6ad 4d6c 	subw	sp, sp, #3180	; 0xc6c
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b4c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004b50:	6018      	str	r0, [r3, #0]
        {
 8004b52:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b56:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff ffe0 	bl	8004b22 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>
            nodes.push_back(Node{static_cast<char>('A'), px_to_m(704), px_to_m(448)});
 8004b62:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b66:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004b6a:	681c      	ldr	r4, [r3, #0]
 8004b6c:	f107 0308 	add.w	r3, r7, #8
 8004b70:	eddf 0af3 	vldr	s1, [pc, #972]	; 8004f40 <_ZN3jlb5GraphC1Ev+0x400>
 8004b74:	ed9f 0af3 	vldr	s0, [pc, #972]	; 8004f44 <_ZN3jlb5GraphC1Ev+0x404>
 8004b78:	2141      	movs	r1, #65	; 0x41
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff ff62 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004b80:	f107 0308 	add.w	r3, r7, #8
 8004b84:	4619      	mov	r1, r3
 8004b86:	4620      	mov	r0, r4
 8004b88:	f004 f8ee 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004b8c:	f107 0308 	add.w	r3, r7, #8
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff ff74 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('B'), px_to_m(704), px_to_m(576)});
 8004b96:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b9a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004b9e:	681c      	ldr	r4, [r3, #0]
 8004ba0:	f107 0320 	add.w	r3, r7, #32
 8004ba4:	eddf 0aeb 	vldr	s1, [pc, #940]	; 8004f54 <_ZN3jlb5GraphC1Ev+0x414>
 8004ba8:	ed9f 0ae6 	vldr	s0, [pc, #920]	; 8004f44 <_ZN3jlb5GraphC1Ev+0x404>
 8004bac:	2142      	movs	r1, #66	; 0x42
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff ff48 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004bb4:	f107 0320 	add.w	r3, r7, #32
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f004 f8d4 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004bc0:	f107 0320 	add.w	r3, r7, #32
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff ff5a 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('C'), px_to_m(640), px_to_m(384)});
 8004bca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004bce:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004bd2:	681c      	ldr	r4, [r3, #0]
 8004bd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004bd8:	eddf 0adb 	vldr	s1, [pc, #876]	; 8004f48 <_ZN3jlb5GraphC1Ev+0x408>
 8004bdc:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8004be0:	2143      	movs	r1, #67	; 0x43
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff ff2e 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004be8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004bec:	4619      	mov	r1, r3
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f004 f8ba 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004bf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff ff40 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('D'), px_to_m(640), px_to_m(512)});
 8004bfe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c02:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004c06:	681c      	ldr	r4, [r3, #0]
 8004c08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004c0c:	eddf 0acf 	vldr	s1, [pc, #828]	; 8004f4c <_ZN3jlb5GraphC1Ev+0x40c>
 8004c10:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8004c14:	2144      	movs	r1, #68	; 0x44
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff ff14 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004c1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004c20:	4619      	mov	r1, r3
 8004c22:	4620      	mov	r0, r4
 8004c24:	f004 f8a0 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004c28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff ff26 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('E'), px_to_m(640), px_to_m(640)});
 8004c32:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c36:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004c3a:	681c      	ldr	r4, [r3, #0]
 8004c3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004c40:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004c44:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8004c48:	2145      	movs	r1, #69	; 0x45
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fefa 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004c50:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004c54:	4619      	mov	r1, r3
 8004c56:	4620      	mov	r0, r4
 8004c58:	f004 f886 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004c5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff ff0c 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('F'), px_to_m(576), px_to_m(448)});
 8004c66:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c6a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004c6e:	681c      	ldr	r4, [r3, #0]
 8004c70:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004c74:	eddf 0ab2 	vldr	s1, [pc, #712]	; 8004f40 <_ZN3jlb5GraphC1Ev+0x400>
 8004c78:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8004f54 <_ZN3jlb5GraphC1Ev+0x414>
 8004c7c:	2146      	movs	r1, #70	; 0x46
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fee0 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004c84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f004 f86c 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004c90:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fef2 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('G'), px_to_m(576), px_to_m(576)});
 8004c9a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c9e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004ca2:	681c      	ldr	r4, [r3, #0]
 8004ca4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004ca8:	eddf 0aaa 	vldr	s1, [pc, #680]	; 8004f54 <_ZN3jlb5GraphC1Ev+0x414>
 8004cac:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8004f54 <_ZN3jlb5GraphC1Ev+0x414>
 8004cb0:	2147      	movs	r1, #71	; 0x47
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff fec6 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004cb8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f004 f852 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004cc4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff fed8 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('H'), px_to_m(512), px_to_m(384)});
 8004cce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004cd2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004cd6:	681c      	ldr	r4, [r3, #0]
 8004cd8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004cdc:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8004f48 <_ZN3jlb5GraphC1Ev+0x408>
 8004ce0:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8004f4c <_ZN3jlb5GraphC1Ev+0x40c>
 8004ce4:	2148      	movs	r1, #72	; 0x48
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff feac 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004cec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f004 f838 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004cf8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff febe 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('I'), px_to_m(512), px_to_m(512)});
 8004d02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d06:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004d0a:	681c      	ldr	r4, [r3, #0]
 8004d0c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004d10:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8004f4c <_ZN3jlb5GraphC1Ev+0x40c>
 8004d14:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8004f4c <_ZN3jlb5GraphC1Ev+0x40c>
 8004d18:	2149      	movs	r1, #73	; 0x49
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff fe92 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004d20:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004d24:	4619      	mov	r1, r3
 8004d26:	4620      	mov	r0, r4
 8004d28:	f004 f81e 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004d2c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff fea4 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('J'), px_to_m(512), px_to_m(640)});
 8004d36:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d3a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004d3e:	681c      	ldr	r4, [r3, #0]
 8004d40:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004d44:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004d48:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8004f4c <_ZN3jlb5GraphC1Ev+0x40c>
 8004d4c:	214a      	movs	r1, #74	; 0x4a
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fe78 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004d54:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f004 f804 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004d60:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff fe8a 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('K'), px_to_m(448), px_to_m(448)});
 8004d6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d6e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004d72:	681c      	ldr	r4, [r3, #0]
 8004d74:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004d78:	eddf 0a71 	vldr	s1, [pc, #452]	; 8004f40 <_ZN3jlb5GraphC1Ev+0x400>
 8004d7c:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8004f40 <_ZN3jlb5GraphC1Ev+0x400>
 8004d80:	214b      	movs	r1, #75	; 0x4b
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff fe5e 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004d88:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f003 ffea 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004d94:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fe70 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('L'), px_to_m(448), px_to_m(576)});
 8004d9e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004da2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004da6:	681c      	ldr	r4, [r3, #0]
 8004da8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dac:	eddf 0a69 	vldr	s1, [pc, #420]	; 8004f54 <_ZN3jlb5GraphC1Ev+0x414>
 8004db0:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8004f40 <_ZN3jlb5GraphC1Ev+0x400>
 8004db4:	214c      	movs	r1, #76	; 0x4c
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff fe44 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004dbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f003 ffd0 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004dc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff fe56 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('M'), px_to_m(384), px_to_m(384)});
 8004dd2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004dd6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004dda:	681c      	ldr	r4, [r3, #0]
 8004ddc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004de0:	eddf 0a59 	vldr	s1, [pc, #356]	; 8004f48 <_ZN3jlb5GraphC1Ev+0x408>
 8004de4:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8004f48 <_ZN3jlb5GraphC1Ev+0x408>
 8004de8:	214d      	movs	r1, #77	; 0x4d
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff fe2a 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004df0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004df4:	4619      	mov	r1, r3
 8004df6:	4620      	mov	r0, r4
 8004df8:	f003 ffb6 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004dfc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff fe3c 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('N'), px_to_m(384), px_to_m(512)});
 8004e06:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e0a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004e0e:	681c      	ldr	r4, [r3, #0]
 8004e10:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004e14:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8004f4c <_ZN3jlb5GraphC1Ev+0x40c>
 8004e18:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8004f48 <_ZN3jlb5GraphC1Ev+0x408>
 8004e1c:	214e      	movs	r1, #78	; 0x4e
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff fe10 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004e24:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f003 ff9c 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004e30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fe22 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('O'), px_to_m(384), px_to_m(640)});
 8004e3a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e3e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004e42:	681c      	ldr	r4, [r3, #0]
 8004e44:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004e48:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004e4c:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8004f48 <_ZN3jlb5GraphC1Ev+0x408>
 8004e50:	214f      	movs	r1, #79	; 0x4f
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fdf6 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004e58:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f003 ff82 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004e64:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff fe08 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('P'), px_to_m(320), px_to_m(320)});
 8004e6e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e72:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004e76:	681c      	ldr	r4, [r3, #0]
 8004e78:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004e7c:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8004e80:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004e84:	2150      	movs	r1, #80	; 0x50
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff fddc 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004e8c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004e90:	4619      	mov	r1, r3
 8004e92:	4620      	mov	r0, r4
 8004e94:	f003 ff68 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004e98:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff fdee 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('Q'), px_to_m(320), px_to_m(384)});
 8004ea2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ea6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004eaa:	681c      	ldr	r4, [r3, #0]
 8004eac:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004eb0:	eddf 0a25 	vldr	s1, [pc, #148]	; 8004f48 <_ZN3jlb5GraphC1Ev+0x408>
 8004eb4:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004eb8:	2151      	movs	r1, #81	; 0x51
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff fdc2 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004ec0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f003 ff4e 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004ecc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff fdd4 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('R'), px_to_m(320), px_to_m(448)});
 8004ed6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004eda:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004ede:	681c      	ldr	r4, [r3, #0]
 8004ee0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004ee4:	eddf 0a16 	vldr	s1, [pc, #88]	; 8004f40 <_ZN3jlb5GraphC1Ev+0x400>
 8004ee8:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004eec:	2152      	movs	r1, #82	; 0x52
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff fda8 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004ef4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4620      	mov	r0, r4
 8004efc:	f003 ff34 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004f00:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff fdba 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('S'), px_to_m(320), px_to_m(512)});
 8004f0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f0e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004f12:	681c      	ldr	r4, [r3, #0]
 8004f14:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8004f18:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8004f4c <_ZN3jlb5GraphC1Ev+0x40c>
 8004f1c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004f20:	2153      	movs	r1, #83	; 0x53
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff fd8e 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004f28:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f003 ff1a 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004f34:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff fda0 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
 8004f3e:	e011      	b.n	8004f64 <_ZN3jlb5GraphC1Ev+0x424>
 8004f40:	40866667 	.word	0x40866667
 8004f44:	40d33334 	.word	0x40d33334
 8004f48:	40666667 	.word	0x40666667
 8004f4c:	4099999a 	.word	0x4099999a
 8004f50:	40d33334 	.word	0x40d33334
 8004f54:	40accccd 	.word	0x40accccd
 8004f58:	4019999a 	.word	0x4019999a
 8004f5c:	40866667 	.word	0x40866667
 8004f60:	3f666667 	.word	0x3f666667
            nodes.push_back(Node{static_cast<char>('T'), px_to_m(320), px_to_m(576)});
 8004f64:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f68:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004f6c:	681c      	ldr	r4, [r3, #0]
 8004f6e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004f72:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8004f54 <_ZN3jlb5GraphC1Ev+0x414>
 8004f76:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004f7a:	2154      	movs	r1, #84	; 0x54
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff fd61 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004f82:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004f86:	4619      	mov	r1, r3
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f003 feed 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004f8e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fd73 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('U'), px_to_m(320), px_to_m(704)});
 8004f98:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f9c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004fa0:	681c      	ldr	r4, [r3, #0]
 8004fa2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8004fa6:	ed5f 0a16 	vldr	s1, [pc, #-88]	; 8004f50 <_ZN3jlb5GraphC1Ev+0x410>
 8004faa:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004fae:	2155      	movs	r1, #85	; 0x55
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff fd47 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004fb6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f003 fed3 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004fc2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fd59 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('V'), px_to_m(256), px_to_m(448)});
 8004fcc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004fd0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004fd4:	681c      	ldr	r4, [r3, #0]
 8004fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fda:	ed5f 0a20 	vldr	s1, [pc, #-128]	; 8004f5c <_ZN3jlb5GraphC1Ev+0x41c>
 8004fde:	ed1f 0a22 	vldr	s0, [pc, #-136]	; 8004f58 <_ZN3jlb5GraphC1Ev+0x418>
 8004fe2:	2156      	movs	r1, #86	; 0x56
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff fd2d 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8004fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f003 feb9 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff fd3f 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('W'), px_to_m(256), px_to_m(576)});
 8005000:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005004:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005008:	681c      	ldr	r4, [r3, #0]
 800500a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800500e:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 8004f54 <_ZN3jlb5GraphC1Ev+0x414>
 8005012:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 8004f58 <_ZN3jlb5GraphC1Ev+0x418>
 8005016:	2157      	movs	r1, #87	; 0x57
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff fd13 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 800501e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005022:	4619      	mov	r1, r3
 8005024:	4620      	mov	r0, r4
 8005026:	f003 fe9f 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800502a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff fd25 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('X'), px_to_m(96), px_to_m(448)});
 8005034:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005038:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800503c:	681c      	ldr	r4, [r3, #0]
 800503e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005042:	ed5f 0a3a 	vldr	s1, [pc, #-232]	; 8004f5c <_ZN3jlb5GraphC1Ev+0x41c>
 8005046:	ed1f 0a3a 	vldr	s0, [pc, #-232]	; 8004f60 <_ZN3jlb5GraphC1Ev+0x420>
 800504a:	2158      	movs	r1, #88	; 0x58
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff fcf9 	bl	8004a44 <_ZN3jlb4NodeC1Ecff>
 8005052:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005056:	4619      	mov	r1, r3
 8005058:	4620      	mov	r0, r4
 800505a:	f003 fe85 	bl	8008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800505e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fd0b 	bl	8004a7e <_ZN3jlb4NodeD1Ev>

            const auto UNIT = SQUARE_LENGTH;
 8005068:	4be9      	ldr	r3, [pc, #932]	; (8005410 <_ZN3jlb5GraphC1Ev+0x8d0>)
 800506a:	f607 4264 	addw	r2, r7, #3172	; 0xc64
 800506e:	6013      	str	r3, [r2, #0]
            const auto QUARTER_CIRCLE = 2 * UNIT * M_PI / 4.0f;
 8005070:	a3e5      	add	r3, pc, #916	; (adr r3, 8005408 <_ZN3jlb5GraphC1Ev+0x8c8>)
 8005072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005076:	f607 4158 	addw	r1, r7, #3160	; 0xc58
 800507a:	e9c1 2300 	strd	r2, r3, [r1]

            this->operator[]('A').add_edge('C', Direction::LEFT, {'B', 'D'}, QUARTER_CIRCLE);
 800507e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005082:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005086:	2141      	movs	r1, #65	; 0x41
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	f002 ff7f 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800508e:	4604      	mov	r4, r0
 8005090:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005094:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8005098:	4ade      	ldr	r2, [pc, #888]	; (8005414 <_ZN3jlb5GraphC1Ev+0x8d4>)
 800509a:	8812      	ldrh	r2, [r2, #0]
 800509c:	801a      	strh	r2, [r3, #0]
 800509e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050a2:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 80050a6:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050b0:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 80050b4:	2202      	movs	r2, #2
 80050b6:	605a      	str	r2, [r3, #4]
 80050b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050bc:	4618      	mov	r0, r3
 80050be:	f015 fb42 	bl	801a746 <_ZNSaIcEC1Ev>
 80050c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050c6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80050ca:	f6a2 2214 	subw	r2, r2, #2580	; 0xa14
 80050ce:	f507 7012 	add.w	r0, r7, #584	; 0x248
 80050d2:	ca06      	ldmia	r2, {r1, r2}
 80050d4:	f003 fe59 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80050d8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80050dc:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 8005420 <_ZN3jlb5GraphC1Ev+0x8e0>
 80050e0:	2200      	movs	r2, #0
 80050e2:	2143      	movs	r1, #67	; 0x43
 80050e4:	4620      	mov	r0, r4
 80050e6:	f7ff fce6 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80050ea:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80050ee:	4618      	mov	r0, r3
 80050f0:	f003 fdfe 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80050f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050f8:	4618      	mov	r0, r3
 80050fa:	f015 fb26 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('B', Direction::STRAIGHT, {'C'}, 2.0f * UNIT);
 80050fe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005102:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005106:	2141      	movs	r1, #65	; 0x41
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	f002 ff3f 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800510e:	4604      	mov	r4, r0
 8005110:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005114:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 8005118:	2243      	movs	r2, #67	; 0x43
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005120:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 8005124:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800512e:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 8005132:	2201      	movs	r2, #1
 8005134:	605a      	str	r2, [r3, #4]
 8005136:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800513a:	4618      	mov	r0, r3
 800513c:	f015 fb03 	bl	801a746 <_ZNSaIcEC1Ev>
 8005140:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8005144:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005148:	f6a2 12f8 	subw	r2, r2, #2552	; 0x9f8
 800514c:	f507 7019 	add.w	r0, r7, #612	; 0x264
 8005150:	ca06      	ldmia	r2, {r1, r2}
 8005152:	f003 fe1a 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005156:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800515a:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8005418 <_ZN3jlb5GraphC1Ev+0x8d8>
 800515e:	2202      	movs	r2, #2
 8005160:	2142      	movs	r1, #66	; 0x42
 8005162:	4620      	mov	r0, r4
 8005164:	f7ff fca7 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005168:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800516c:	4618      	mov	r0, r3
 800516e:	f003 fdbf 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005172:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8005176:	4618      	mov	r0, r3
 8005178:	f015 fae7 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('D', Direction::RIGHT, {'C'}, QUARTER_CIRCLE);
 800517c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005180:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005184:	2141      	movs	r1, #65	; 0x41
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	f002 ff00 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800518c:	4604      	mov	r4, r0
 800518e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005192:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 8005196:	2243      	movs	r2, #67	; 0x43
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800519e:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80051a2:	f507 7225 	add.w	r2, r7, #660	; 0x294
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051ac:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80051b0:	2201      	movs	r2, #1
 80051b2:	605a      	str	r2, [r3, #4]
 80051b4:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80051b8:	4618      	mov	r0, r3
 80051ba:	f015 fac4 	bl	801a746 <_ZNSaIcEC1Ev>
 80051be:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80051c2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80051c6:	f6a2 12dc 	subw	r2, r2, #2524	; 0x9dc
 80051ca:	f507 7020 	add.w	r0, r7, #640	; 0x280
 80051ce:	ca06      	ldmia	r2, {r1, r2}
 80051d0:	f003 fddb 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80051d4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80051d8:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8005420 <_ZN3jlb5GraphC1Ev+0x8e0>
 80051dc:	2201      	movs	r2, #1
 80051de:	2144      	movs	r1, #68	; 0x44
 80051e0:	4620      	mov	r0, r4
 80051e2:	f7ff fc68 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80051e6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80051ea:	4618      	mov	r0, r3
 80051ec:	f003 fd80 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80051f0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80051f4:	4618      	mov	r0, r3
 80051f6:	f015 faa8 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('A', Direction::STRAIGHT, {'E'}, 2.0f * UNIT);
 80051fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051fe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005202:	2142      	movs	r1, #66	; 0x42
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	f002 fec1 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800520a:	4604      	mov	r4, r0
 800520c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005210:	f6a3 13b8 	subw	r3, r3, #2488	; 0x9b8
 8005214:	2245      	movs	r2, #69	; 0x45
 8005216:	701a      	strb	r2, [r3, #0]
 8005218:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800521c:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8005220:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800522a:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 800522e:	2201      	movs	r2, #1
 8005230:	605a      	str	r2, [r3, #4]
 8005232:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8005236:	4618      	mov	r0, r3
 8005238:	f015 fa85 	bl	801a746 <_ZNSaIcEC1Ev>
 800523c:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8005240:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005244:	f5a2 621c 	sub.w	r2, r2, #2496	; 0x9c0
 8005248:	f507 7027 	add.w	r0, r7, #668	; 0x29c
 800524c:	ca06      	ldmia	r2, {r1, r2}
 800524e:	f003 fd9c 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005252:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8005256:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8005418 <_ZN3jlb5GraphC1Ev+0x8d8>
 800525a:	2202      	movs	r2, #2
 800525c:	2141      	movs	r1, #65	; 0x41
 800525e:	4620      	mov	r0, r4
 8005260:	f7ff fc29 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005264:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8005268:	4618      	mov	r0, r3
 800526a:	f003 fd41 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 800526e:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8005272:	4618      	mov	r0, r3
 8005274:	f015 fa69 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('E', Direction::RIGHT, {'A', 'D'}, QUARTER_CIRCLE);
 8005278:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800527c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005280:	2142      	movs	r1, #66	; 0x42
 8005282:	6818      	ldr	r0, [r3, #0]
 8005284:	f002 fe82 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005288:	4604      	mov	r4, r0
 800528a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800528e:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 8005292:	4a62      	ldr	r2, [pc, #392]	; (800541c <_ZN3jlb5GraphC1Ev+0x8dc>)
 8005294:	8812      	ldrh	r2, [r2, #0]
 8005296:	801a      	strh	r2, [r3, #0]
 8005298:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800529c:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 80052a0:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052aa:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 80052ae:	2202      	movs	r2, #2
 80052b0:	605a      	str	r2, [r3, #4]
 80052b2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80052b6:	4618      	mov	r0, r3
 80052b8:	f015 fa45 	bl	801a746 <_ZNSaIcEC1Ev>
 80052bc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80052c0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80052c4:	f6a2 12a4 	subw	r2, r2, #2468	; 0x9a4
 80052c8:	f507 702e 	add.w	r0, r7, #696	; 0x2b8
 80052cc:	ca06      	ldmia	r2, {r1, r2}
 80052ce:	f003 fd5c 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80052d2:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80052d6:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8005420 <_ZN3jlb5GraphC1Ev+0x8e0>
 80052da:	2201      	movs	r2, #1
 80052dc:	2145      	movs	r1, #69	; 0x45
 80052de:	4620      	mov	r0, r4
 80052e0:	f7ff fbe9 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80052e4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80052e8:	4618      	mov	r0, r3
 80052ea:	f003 fd01 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80052ee:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80052f2:	4618      	mov	r0, r3
 80052f4:	f015 fa29 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('D', Direction::LEFT, {'E'}, QUARTER_CIRCLE);
 80052f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052fc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005300:	2142      	movs	r1, #66	; 0x42
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	f002 fe42 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005308:	4604      	mov	r4, r0
 800530a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800530e:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8005312:	2245      	movs	r2, #69	; 0x45
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800531a:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 800531e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005328:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 800532c:	2201      	movs	r2, #1
 800532e:	605a      	str	r2, [r3, #4]
 8005330:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8005334:	4618      	mov	r0, r3
 8005336:	f015 fa06 	bl	801a746 <_ZNSaIcEC1Ev>
 800533a:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 800533e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005342:	f6a2 1288 	subw	r2, r2, #2440	; 0x988
 8005346:	f507 7035 	add.w	r0, r7, #724	; 0x2d4
 800534a:	ca06      	ldmia	r2, {r1, r2}
 800534c:	f003 fd1d 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005350:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8005354:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8005420 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005358:	2200      	movs	r2, #0
 800535a:	2144      	movs	r1, #68	; 0x44
 800535c:	4620      	mov	r0, r4
 800535e:	f7ff fbaa 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005362:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8005366:	4618      	mov	r0, r3
 8005368:	f003 fcc2 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 800536c:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8005370:	4618      	mov	r0, r3
 8005372:	f015 f9ea 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('A', Direction::RIGHT, {'F'}, QUARTER_CIRCLE);
 8005376:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800537a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800537e:	2143      	movs	r1, #67	; 0x43
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	f002 fe03 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005386:	4604      	mov	r4, r0
 8005388:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800538c:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 8005390:	2246      	movs	r2, #70	; 0x46
 8005392:	701a      	strb	r2, [r3, #0]
 8005394:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005398:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 800539c:	f507 7241 	add.w	r2, r7, #772	; 0x304
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053a6:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 80053aa:	2201      	movs	r2, #1
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80053b2:	4618      	mov	r0, r3
 80053b4:	f015 f9c7 	bl	801a746 <_ZNSaIcEC1Ev>
 80053b8:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80053bc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80053c0:	f6a2 126c 	subw	r2, r2, #2412	; 0x96c
 80053c4:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80053c8:	ca06      	ldmia	r2, {r1, r2}
 80053ca:	f003 fcde 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80053ce:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80053d2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005420 <_ZN3jlb5GraphC1Ev+0x8e0>
 80053d6:	2201      	movs	r2, #1
 80053d8:	2141      	movs	r1, #65	; 0x41
 80053da:	4620      	mov	r0, r4
 80053dc:	f7ff fb6b 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80053e0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80053e4:	4618      	mov	r0, r3
 80053e6:	f003 fc83 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80053ea:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80053ee:	4618      	mov	r0, r3
 80053f0:	f015 f9ab 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('F', Direction::LEFT, {'A'}, QUARTER_CIRCLE);
 80053f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053f8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80053fc:	2143      	movs	r1, #67	; 0x43
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	f002 fdc4 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005404:	e00e      	b.n	8005424 <_ZN3jlb5GraphC1Ev+0x8e4>
 8005406:	bf00      	nop
 8005408:	460698c7 	.word	0x460698c7
 800540c:	3fee28c7 	.word	0x3fee28c7
 8005410:	3f19999a 	.word	0x3f19999a
 8005414:	0801e550 	.word	0x0801e550
 8005418:	3f99999a 	.word	0x3f99999a
 800541c:	0801e554 	.word	0x0801e554
 8005420:	3f71463a 	.word	0x3f71463a
 8005424:	4604      	mov	r4, r0
 8005426:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800542a:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 800542e:	2241      	movs	r2, #65	; 0x41
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005436:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 800543a:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005444:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8005448:	2201      	movs	r2, #1
 800544a:	605a      	str	r2, [r3, #4]
 800544c:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8005450:	4618      	mov	r0, r3
 8005452:	f015 f978 	bl	801a746 <_ZNSaIcEC1Ev>
 8005456:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800545a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800545e:	f5a2 6215 	sub.w	r2, r2, #2384	; 0x950
 8005462:	f507 7043 	add.w	r0, r7, #780	; 0x30c
 8005466:	ca06      	ldmia	r2, {r1, r2}
 8005468:	f003 fc8f 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800546c:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8005470:	ed1f 0a15 	vldr	s0, [pc, #-84]	; 8005420 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005474:	2200      	movs	r2, #0
 8005476:	2146      	movs	r1, #70	; 0x46
 8005478:	4620      	mov	r0, r4
 800547a:	f7ff fb1c 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800547e:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8005482:	4618      	mov	r0, r3
 8005484:	f003 fc34 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005488:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800548c:	4618      	mov	r0, r3
 800548e:	f015 f95c 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('A', Direction::LEFT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 8005492:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005496:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800549a:	2144      	movs	r1, #68	; 0x44
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	f002 fd75 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80054a2:	4604      	mov	r4, r0
 80054a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054a8:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 80054ac:	4ae5      	ldr	r2, [pc, #916]	; (8005844 <_ZN3jlb5GraphC1Ev+0xd04>)
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	4611      	mov	r1, r2
 80054b2:	8019      	strh	r1, [r3, #0]
 80054b4:	3302      	adds	r3, #2
 80054b6:	0c12      	lsrs	r2, r2, #16
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054be:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 80054c2:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054cc:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 80054d0:	2203      	movs	r2, #3
 80054d2:	605a      	str	r2, [r3, #4]
 80054d4:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80054d8:	4618      	mov	r0, r3
 80054da:	f015 f934 	bl	801a746 <_ZNSaIcEC1Ev>
 80054de:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80054e2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80054e6:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 80054ea:	f507 704a 	add.w	r0, r7, #808	; 0x328
 80054ee:	ca06      	ldmia	r2, {r1, r2}
 80054f0:	f003 fc4b 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80054f4:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80054f8:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8005854 <_ZN3jlb5GraphC1Ev+0xd14>
 80054fc:	2200      	movs	r2, #0
 80054fe:	2141      	movs	r1, #65	; 0x41
 8005500:	4620      	mov	r0, r4
 8005502:	f7ff fad8 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005506:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800550a:	4618      	mov	r0, r3
 800550c:	f003 fbf0 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005510:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8005514:	4618      	mov	r0, r3
 8005516:	f015 f918 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('B', Direction::RIGHT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 800551a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800551e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005522:	2144      	movs	r1, #68	; 0x44
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	f002 fd31 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800552a:	4604      	mov	r4, r0
 800552c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005530:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 8005534:	4ac3      	ldr	r2, [pc, #780]	; (8005844 <_ZN3jlb5GraphC1Ev+0xd04>)
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	4611      	mov	r1, r2
 800553a:	8019      	strh	r1, [r3, #0]
 800553c:	3302      	adds	r3, #2
 800553e:	0c12      	lsrs	r2, r2, #16
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005546:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 800554a:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005554:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8005558:	2203      	movs	r2, #3
 800555a:	605a      	str	r2, [r3, #4]
 800555c:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8005560:	4618      	mov	r0, r3
 8005562:	f015 f8f0 	bl	801a746 <_ZNSaIcEC1Ev>
 8005566:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800556a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800556e:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 8005572:	f507 7051 	add.w	r0, r7, #836	; 0x344
 8005576:	ca06      	ldmia	r2, {r1, r2}
 8005578:	f003 fc07 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800557c:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8005580:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8005854 <_ZN3jlb5GraphC1Ev+0xd14>
 8005584:	2201      	movs	r2, #1
 8005586:	2142      	movs	r1, #66	; 0x42
 8005588:	4620      	mov	r0, r4
 800558a:	f7ff fa94 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800558e:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8005592:	4618      	mov	r0, r3
 8005594:	f003 fbac 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005598:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800559c:	4618      	mov	r0, r3
 800559e:	f015 f8d4 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('G', Direction::LEFT, {'A', 'B'}, QUARTER_CIRCLE);
 80055a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055a6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80055aa:	2144      	movs	r1, #68	; 0x44
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	f002 fced 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80055b2:	4604      	mov	r4, r0
 80055b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055b8:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 80055bc:	4aa2      	ldr	r2, [pc, #648]	; (8005848 <_ZN3jlb5GraphC1Ev+0xd08>)
 80055be:	8812      	ldrh	r2, [r2, #0]
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055c6:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 80055ca:	f507 725d 	add.w	r2, r7, #884	; 0x374
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055d4:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 80055d8:	2202      	movs	r2, #2
 80055da:	605a      	str	r2, [r3, #4]
 80055dc:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80055e0:	4618      	mov	r0, r3
 80055e2:	f015 f8b0 	bl	801a746 <_ZNSaIcEC1Ev>
 80055e6:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80055ea:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80055ee:	f6a2 02fc 	subw	r2, r2, #2300	; 0x8fc
 80055f2:	f507 7058 	add.w	r0, r7, #864	; 0x360
 80055f6:	ca06      	ldmia	r2, {r1, r2}
 80055f8:	f003 fbc7 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80055fc:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8005600:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8005854 <_ZN3jlb5GraphC1Ev+0xd14>
 8005604:	2200      	movs	r2, #0
 8005606:	2147      	movs	r1, #71	; 0x47
 8005608:	4620      	mov	r0, r4
 800560a:	f7ff fa54 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800560e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8005612:	4618      	mov	r0, r3
 8005614:	f003 fb6c 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005618:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800561c:	4618      	mov	r0, r3
 800561e:	f015 f894 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('I', Direction::STRAIGHT, {'A', 'B'}, 2.0f * UNIT);
 8005622:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005626:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800562a:	2144      	movs	r1, #68	; 0x44
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	f002 fcad 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005632:	4604      	mov	r4, r0
 8005634:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005638:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 800563c:	4a82      	ldr	r2, [pc, #520]	; (8005848 <_ZN3jlb5GraphC1Ev+0xd08>)
 800563e:	8812      	ldrh	r2, [r2, #0]
 8005640:	801a      	strh	r2, [r3, #0]
 8005642:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005646:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 800564a:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005654:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 8005658:	2202      	movs	r2, #2
 800565a:	605a      	str	r2, [r3, #4]
 800565c:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8005660:	4618      	mov	r0, r3
 8005662:	f015 f870 	bl	801a746 <_ZNSaIcEC1Ev>
 8005666:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800566a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800566e:	f5a2 620e 	sub.w	r2, r2, #2272	; 0x8e0
 8005672:	f507 705f 	add.w	r0, r7, #892	; 0x37c
 8005676:	ca06      	ldmia	r2, {r1, r2}
 8005678:	f003 fb87 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800567c:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8005680:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800584c <_ZN3jlb5GraphC1Ev+0xd0c>
 8005684:	2202      	movs	r2, #2
 8005686:	2149      	movs	r1, #73	; 0x49
 8005688:	4620      	mov	r0, r4
 800568a:	f7ff fa14 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800568e:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8005692:	4618      	mov	r0, r3
 8005694:	f003 fb2c 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005698:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800569c:	4618      	mov	r0, r3
 800569e:	f015 f854 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('F', Direction::RIGHT, {'A', 'B'}, QUARTER_CIRCLE);
 80056a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056a6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80056aa:	2144      	movs	r1, #68	; 0x44
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	f002 fc6d 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80056b2:	4604      	mov	r4, r0
 80056b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056b8:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 80056bc:	4a62      	ldr	r2, [pc, #392]	; (8005848 <_ZN3jlb5GraphC1Ev+0xd08>)
 80056be:	8812      	ldrh	r2, [r2, #0]
 80056c0:	801a      	strh	r2, [r3, #0]
 80056c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056c6:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 80056ca:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056d4:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 80056d8:	2202      	movs	r2, #2
 80056da:	605a      	str	r2, [r3, #4]
 80056dc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80056e0:	4618      	mov	r0, r3
 80056e2:	f015 f830 	bl	801a746 <_ZNSaIcEC1Ev>
 80056e6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80056ea:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80056ee:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 80056f2:	f507 7066 	add.w	r0, r7, #920	; 0x398
 80056f6:	ca06      	ldmia	r2, {r1, r2}
 80056f8:	f003 fb47 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80056fc:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8005700:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8005854 <_ZN3jlb5GraphC1Ev+0xd14>
 8005704:	2201      	movs	r2, #1
 8005706:	2146      	movs	r1, #70	; 0x46
 8005708:	4620      	mov	r0, r4
 800570a:	f7ff f9d4 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800570e:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8005712:	4618      	mov	r0, r3
 8005714:	f003 faec 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005718:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800571c:	4618      	mov	r0, r3
 800571e:	f015 f814 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('B', Direction::LEFT, {'G', 'J'}, QUARTER_CIRCLE);
 8005722:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005726:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800572a:	2145      	movs	r1, #69	; 0x45
 800572c:	6818      	ldr	r0, [r3, #0]
 800572e:	f002 fc2d 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005732:	4604      	mov	r4, r0
 8005734:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005738:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 800573c:	4a44      	ldr	r2, [pc, #272]	; (8005850 <_ZN3jlb5GraphC1Ev+0xd10>)
 800573e:	8812      	ldrh	r2, [r2, #0]
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005746:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 800574a:	f507 7272 	add.w	r2, r7, #968	; 0x3c8
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005754:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8005758:	2202      	movs	r2, #2
 800575a:	605a      	str	r2, [r3, #4]
 800575c:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8005760:	4618      	mov	r0, r3
 8005762:	f014 fff0 	bl	801a746 <_ZNSaIcEC1Ev>
 8005766:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 800576a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800576e:	f6a2 02a8 	subw	r2, r2, #2216	; 0x8a8
 8005772:	f507 706d 	add.w	r0, r7, #948	; 0x3b4
 8005776:	ca06      	ldmia	r2, {r1, r2}
 8005778:	f003 fb07 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800577c:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8005780:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8005854 <_ZN3jlb5GraphC1Ev+0xd14>
 8005784:	2200      	movs	r2, #0
 8005786:	2142      	movs	r1, #66	; 0x42
 8005788:	4620      	mov	r0, r4
 800578a:	f7ff f994 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800578e:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8005792:	4618      	mov	r0, r3
 8005794:	f003 faac 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005798:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 800579c:	4618      	mov	r0, r3
 800579e:	f014 ffd4 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('J', Direction::STRAIGHT, {'B'}, 2.0f * UNIT);
 80057a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057a6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80057aa:	2145      	movs	r1, #69	; 0x45
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	f002 fbed 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80057b2:	4604      	mov	r4, r0
 80057b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057b8:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 80057bc:	2242      	movs	r2, #66	; 0x42
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057c4:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80057c8:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057d2:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80057d6:	2201      	movs	r2, #1
 80057d8:	605a      	str	r2, [r3, #4]
 80057da:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80057de:	4618      	mov	r0, r3
 80057e0:	f014 ffb1 	bl	801a746 <_ZNSaIcEC1Ev>
 80057e4:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80057e8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80057ec:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 80057f0:	f507 7074 	add.w	r0, r7, #976	; 0x3d0
 80057f4:	ca06      	ldmia	r2, {r1, r2}
 80057f6:	f003 fac8 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80057fa:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80057fe:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800584c <_ZN3jlb5GraphC1Ev+0xd0c>
 8005802:	2202      	movs	r2, #2
 8005804:	214a      	movs	r1, #74	; 0x4a
 8005806:	4620      	mov	r0, r4
 8005808:	f7ff f955 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800580c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005810:	4618      	mov	r0, r3
 8005812:	f003 fa6d 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005816:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800581a:	4618      	mov	r0, r3
 800581c:	f014 ff95 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('G', Direction::RIGHT, {'B'}, QUARTER_CIRCLE);
 8005820:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005824:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005828:	2145      	movs	r1, #69	; 0x45
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	f002 fbae 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005830:	4604      	mov	r4, r0
 8005832:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005836:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 800583a:	2242      	movs	r2, #66	; 0x42
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005842:	e009      	b.n	8005858 <_ZN3jlb5GraphC1Ev+0xd18>
 8005844:	0801e558 	.word	0x0801e558
 8005848:	0801e55c 	.word	0x0801e55c
 800584c:	3f99999a 	.word	0x3f99999a
 8005850:	0801e560 	.word	0x0801e560
 8005854:	3f71463a 	.word	0x3f71463a
 8005858:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 800585c:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005866:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 800586a:	2201      	movs	r2, #1
 800586c:	605a      	str	r2, [r3, #4]
 800586e:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8005872:	4618      	mov	r0, r3
 8005874:	f014 ff67 	bl	801a746 <_ZNSaIcEC1Ev>
 8005878:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800587c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005880:	f5a2 6207 	sub.w	r2, r2, #2160	; 0x870
 8005884:	f507 707b 	add.w	r0, r7, #1004	; 0x3ec
 8005888:	ca06      	ldmia	r2, {r1, r2}
 800588a:	f003 fa7e 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800588e:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8005892:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8005854 <_ZN3jlb5GraphC1Ev+0xd14>
 8005896:	2201      	movs	r2, #1
 8005898:	2147      	movs	r1, #71	; 0x47
 800589a:	4620      	mov	r0, r4
 800589c:	f7ff f90b 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80058a0:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80058a4:	4618      	mov	r0, r3
 80058a6:	f003 fa23 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80058aa:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80058ae:	4618      	mov	r0, r3
 80058b0:	f014 ff4b 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('C', Direction::RIGHT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 80058b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058b8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80058bc:	2146      	movs	r1, #70	; 0x46
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	f002 fb64 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80058c4:	4604      	mov	r4, r0
 80058c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058ca:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 80058ce:	4ae4      	ldr	r2, [pc, #912]	; (8005c60 <_ZN3jlb5GraphC1Ev+0x1120>)
 80058d0:	6812      	ldr	r2, [r2, #0]
 80058d2:	4611      	mov	r1, r2
 80058d4:	8019      	strh	r1, [r3, #0]
 80058d6:	3302      	adds	r3, #2
 80058d8:	0c12      	lsrs	r2, r2, #16
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058e0:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 80058e4:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058ee:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 80058f2:	2203      	movs	r2, #3
 80058f4:	605a      	str	r2, [r3, #4]
 80058f6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80058fa:	4618      	mov	r0, r3
 80058fc:	f014 ff23 	bl	801a746 <_ZNSaIcEC1Ev>
 8005900:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005904:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005908:	f6a2 0254 	subw	r2, r2, #2132	; 0x854
 800590c:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 8005910:	ca06      	ldmia	r2, {r1, r2}
 8005912:	f003 fa3a 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005916:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800591a:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8005c64 <_ZN3jlb5GraphC1Ev+0x1124>
 800591e:	2201      	movs	r2, #1
 8005920:	2143      	movs	r1, #67	; 0x43
 8005922:	4620      	mov	r0, r4
 8005924:	f7ff f8c7 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005928:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800592c:	4618      	mov	r0, r3
 800592e:	f003 f9df 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005932:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005936:	4618      	mov	r0, r3
 8005938:	f014 ff07 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('D', Direction::LEFT, {'C', 'H'}, QUARTER_CIRCLE);
 800593c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005940:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005944:	2146      	movs	r1, #70	; 0x46
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	f002 fb20 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800594c:	4604      	mov	r4, r0
 800594e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005952:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 8005956:	4ac4      	ldr	r2, [pc, #784]	; (8005c68 <_ZN3jlb5GraphC1Ev+0x1128>)
 8005958:	8812      	ldrh	r2, [r2, #0]
 800595a:	801a      	strh	r2, [r3, #0]
 800595c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005960:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8005964:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800596e:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8005972:	2202      	movs	r2, #2
 8005974:	605a      	str	r2, [r3, #4]
 8005976:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800597a:	4618      	mov	r0, r3
 800597c:	f014 fee3 	bl	801a746 <_ZNSaIcEC1Ev>
 8005980:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8005984:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005988:	f6a2 0238 	subw	r2, r2, #2104	; 0x838
 800598c:	f207 4024 	addw	r0, r7, #1060	; 0x424
 8005990:	ca06      	ldmia	r2, {r1, r2}
 8005992:	f003 f9fa 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005996:	f207 4324 	addw	r3, r7, #1060	; 0x424
 800599a:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8005c64 <_ZN3jlb5GraphC1Ev+0x1124>
 800599e:	2200      	movs	r2, #0
 80059a0:	2144      	movs	r1, #68	; 0x44
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7ff f887 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80059a8:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80059ac:	4618      	mov	r0, r3
 80059ae:	f003 f99f 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80059b2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80059b6:	4618      	mov	r0, r3
 80059b8:	f014 fec7 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('G', Direction::STRAIGHT, {'C', 'H'}, 2.0f * UNIT);
 80059bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059c0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80059c4:	2146      	movs	r1, #70	; 0x46
 80059c6:	6818      	ldr	r0, [r3, #0]
 80059c8:	f002 fae0 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80059cc:	4604      	mov	r4, r0
 80059ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059d2:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80059d6:	4aa4      	ldr	r2, [pc, #656]	; (8005c68 <_ZN3jlb5GraphC1Ev+0x1128>)
 80059d8:	8812      	ldrh	r2, [r2, #0]
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059e0:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80059e4:	f207 4254 	addw	r2, r7, #1108	; 0x454
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059ee:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80059f2:	2202      	movs	r2, #2
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80059fa:	4618      	mov	r0, r3
 80059fc:	f014 fea3 	bl	801a746 <_ZNSaIcEC1Ev>
 8005a00:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8005a04:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005a08:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 8005a0c:	f507 6088 	add.w	r0, r7, #1088	; 0x440
 8005a10:	ca06      	ldmia	r2, {r1, r2}
 8005a12:	f003 f9ba 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005a16:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8005a1a:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8005c6c <_ZN3jlb5GraphC1Ev+0x112c>
 8005a1e:	2202      	movs	r2, #2
 8005a20:	2147      	movs	r1, #71	; 0x47
 8005a22:	4620      	mov	r0, r4
 8005a24:	f7ff f847 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005a28:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f003 f95f 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005a32:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8005a36:	4618      	mov	r0, r3
 8005a38:	f014 fe87 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('I', Direction::RIGHT, {'C', 'H'}, QUARTER_CIRCLE);
 8005a3c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a40:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005a44:	2146      	movs	r1, #70	; 0x46
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	f002 faa0 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a52:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8005a56:	4a84      	ldr	r2, [pc, #528]	; (8005c68 <_ZN3jlb5GraphC1Ev+0x1128>)
 8005a58:	8812      	ldrh	r2, [r2, #0]
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a60:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005a64:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a6e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005a72:	2202      	movs	r2, #2
 8005a74:	605a      	str	r2, [r3, #4]
 8005a76:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f014 fe63 	bl	801a746 <_ZNSaIcEC1Ev>
 8005a80:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8005a84:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005a88:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8005a8c:	f207 405c 	addw	r0, r7, #1116	; 0x45c
 8005a90:	ca06      	ldmia	r2, {r1, r2}
 8005a92:	f003 f97a 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005a96:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8005a9a:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8005c64 <_ZN3jlb5GraphC1Ev+0x1124>
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	2149      	movs	r1, #73	; 0x49
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f7ff f807 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005aa8:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8005aac:	4618      	mov	r0, r3
 8005aae:	f003 f91f 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005ab2:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f014 fe47 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('H', Direction::LEFT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 8005abc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ac0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005ac4:	2146      	movs	r1, #70	; 0x46
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	f002 fa60 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005acc:	4604      	mov	r4, r0
 8005ace:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ad2:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8005ad6:	4a62      	ldr	r2, [pc, #392]	; (8005c60 <_ZN3jlb5GraphC1Ev+0x1120>)
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	4611      	mov	r1, r2
 8005adc:	8019      	strh	r1, [r3, #0]
 8005ade:	3302      	adds	r3, #2
 8005ae0:	0c12      	lsrs	r2, r2, #16
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ae8:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8005aec:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005af6:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8005afa:	2203      	movs	r2, #3
 8005afc:	605a      	str	r2, [r3, #4]
 8005afe:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8005b02:	4618      	mov	r0, r3
 8005b04:	f014 fe1f 	bl	801a746 <_ZNSaIcEC1Ev>
 8005b08:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8005b0c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005b10:	f2a2 72e4 	subw	r2, r2, #2020	; 0x7e4
 8005b14:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 8005b18:	ca06      	ldmia	r2, {r1, r2}
 8005b1a:	f003 f936 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005b1e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8005b22:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8005c64 <_ZN3jlb5GraphC1Ev+0x1124>
 8005b26:	2200      	movs	r2, #0
 8005b28:	2148      	movs	r1, #72	; 0x48
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f7fe ffc3 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005b30:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8005b34:	4618      	mov	r0, r3
 8005b36:	f003 f8db 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005b3a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f014 fe03 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('F', Direction::STRAIGHT, {'E', 'J'}, 2.0f * UNIT);
 8005b44:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b48:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005b4c:	2147      	movs	r1, #71	; 0x47
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	f002 fa1c 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005b54:	4604      	mov	r4, r0
 8005b56:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b5a:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 8005b5e:	4a44      	ldr	r2, [pc, #272]	; (8005c70 <_ZN3jlb5GraphC1Ev+0x1130>)
 8005b60:	8812      	ldrh	r2, [r2, #0]
 8005b62:	801a      	strh	r2, [r3, #0]
 8005b64:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b68:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8005b6c:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b76:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	605a      	str	r2, [r3, #4]
 8005b7e:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8005b82:	4618      	mov	r0, r3
 8005b84:	f014 fddf 	bl	801a746 <_ZNSaIcEC1Ev>
 8005b88:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8005b8c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005b90:	f5a2 62f9 	sub.w	r2, r2, #1992	; 0x7c8
 8005b94:	f207 4094 	addw	r0, r7, #1172	; 0x494
 8005b98:	ca06      	ldmia	r2, {r1, r2}
 8005b9a:	f003 f8f6 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005b9e:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8005ba2:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8005c6c <_ZN3jlb5GraphC1Ev+0x112c>
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	2146      	movs	r1, #70	; 0x46
 8005baa:	4620      	mov	r0, r4
 8005bac:	f7fe ff83 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005bb0:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f003 f89b 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005bba:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f014 fdc3 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('D', Direction::RIGHT, {'E', 'J'}, QUARTER_CIRCLE);
 8005bc4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bc8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005bcc:	2147      	movs	r1, #71	; 0x47
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	f002 f9dc 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bda:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 8005bde:	4a24      	ldr	r2, [pc, #144]	; (8005c70 <_ZN3jlb5GraphC1Ev+0x1130>)
 8005be0:	8812      	ldrh	r2, [r2, #0]
 8005be2:	801a      	strh	r2, [r3, #0]
 8005be4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005be8:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8005bec:	f207 42c4 	addw	r2, r7, #1220	; 0x4c4
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bf6:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	605a      	str	r2, [r3, #4]
 8005bfe:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8005c02:	4618      	mov	r0, r3
 8005c04:	f014 fd9f 	bl	801a746 <_ZNSaIcEC1Ev>
 8005c08:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8005c0c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005c10:	f2a2 72ac 	subw	r2, r2, #1964	; 0x7ac
 8005c14:	f507 6096 	add.w	r0, r7, #1200	; 0x4b0
 8005c18:	ca06      	ldmia	r2, {r1, r2}
 8005c1a:	f003 f8b6 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005c1e:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8005c22:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005c64 <_ZN3jlb5GraphC1Ev+0x1124>
 8005c26:	2201      	movs	r2, #1
 8005c28:	2144      	movs	r1, #68	; 0x44
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f7fe ff43 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005c30:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8005c34:	4618      	mov	r0, r3
 8005c36:	f003 f85b 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005c3a:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f014 fd83 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('E', Direction::LEFT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 8005c44:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c48:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005c4c:	2147      	movs	r1, #71	; 0x47
 8005c4e:	6818      	ldr	r0, [r3, #0]
 8005c50:	f002 f99c 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005c54:	4604      	mov	r4, r0
 8005c56:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c5a:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 8005c5e:	e009      	b.n	8005c74 <_ZN3jlb5GraphC1Ev+0x1134>
 8005c60:	0801e564 	.word	0x0801e564
 8005c64:	3f71463a 	.word	0x3f71463a
 8005c68:	0801e568 	.word	0x0801e568
 8005c6c:	3f99999a 	.word	0x3f99999a
 8005c70:	0801e56c 	.word	0x0801e56c
 8005c74:	4ae6      	ldr	r2, [pc, #920]	; (8006010 <_ZN3jlb5GraphC1Ev+0x14d0>)
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	4611      	mov	r1, r2
 8005c7a:	8019      	strh	r1, [r3, #0]
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	0c12      	lsrs	r2, r2, #16
 8005c80:	701a      	strb	r2, [r3, #0]
 8005c82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c86:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8005c8a:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c94:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8005c98:	2203      	movs	r2, #3
 8005c9a:	605a      	str	r2, [r3, #4]
 8005c9c:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f014 fd50 	bl	801a746 <_ZNSaIcEC1Ev>
 8005ca6:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8005caa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005cae:	f5a2 62f2 	sub.w	r2, r2, #1936	; 0x790
 8005cb2:	f207 40cc 	addw	r0, r7, #1228	; 0x4cc
 8005cb6:	ca06      	ldmia	r2, {r1, r2}
 8005cb8:	f003 f867 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005cbc:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8005cc0:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 8006014 <_ZN3jlb5GraphC1Ev+0x14d4>
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2145      	movs	r1, #69	; 0x45
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f7fe fef4 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005cce:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f003 f80c 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005cd8:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f014 fd34 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('J', Direction::RIGHT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 8005ce2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ce6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005cea:	2147      	movs	r1, #71	; 0x47
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	f002 f94d 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cf8:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8005cfc:	4ac4      	ldr	r2, [pc, #784]	; (8006010 <_ZN3jlb5GraphC1Ev+0x14d0>)
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	4611      	mov	r1, r2
 8005d02:	8019      	strh	r1, [r3, #0]
 8005d04:	3302      	adds	r3, #2
 8005d06:	0c12      	lsrs	r2, r2, #16
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d0e:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8005d12:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d1c:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8005d20:	2203      	movs	r2, #3
 8005d22:	605a      	str	r2, [r3, #4]
 8005d24:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f014 fd0c 	bl	801a746 <_ZNSaIcEC1Ev>
 8005d2e:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8005d32:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005d36:	f2a2 7274 	subw	r2, r2, #1908	; 0x774
 8005d3a:	f507 609d 	add.w	r0, r7, #1256	; 0x4e8
 8005d3e:	ca06      	ldmia	r2, {r1, r2}
 8005d40:	f003 f823 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005d44:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005d48:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8006014 <_ZN3jlb5GraphC1Ev+0x14d4>
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	214a      	movs	r1, #74	; 0x4a
 8005d50:	4620      	mov	r0, r4
 8005d52:	f7fe feb0 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005d56:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f002 ffc8 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005d60:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8005d64:	4618      	mov	r0, r3
 8005d66:	f014 fcf0 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('I', Direction::LEFT, {'E', 'J'}, QUARTER_CIRCLE);
 8005d6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d6e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005d72:	2147      	movs	r1, #71	; 0x47
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	f002 f909 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d80:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 8005d84:	4aa4      	ldr	r2, [pc, #656]	; (8006018 <_ZN3jlb5GraphC1Ev+0x14d8>)
 8005d86:	8812      	ldrh	r2, [r2, #0]
 8005d88:	801a      	strh	r2, [r3, #0]
 8005d8a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d8e:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8005d92:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d9c:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8005da0:	2202      	movs	r2, #2
 8005da2:	605a      	str	r2, [r3, #4]
 8005da4:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8005da8:	4618      	mov	r0, r3
 8005daa:	f014 fccc 	bl	801a746 <_ZNSaIcEC1Ev>
 8005dae:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8005db2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005db6:	f5a2 62eb 	sub.w	r2, r2, #1880	; 0x758
 8005dba:	f207 5004 	addw	r0, r7, #1284	; 0x504
 8005dbe:	ca06      	ldmia	r2, {r1, r2}
 8005dc0:	f002 ffe3 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005dc4:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8005dc8:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8006014 <_ZN3jlb5GraphC1Ev+0x14d4>
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2149      	movs	r1, #73	; 0x49
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f7fe fe70 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005dd6:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f002 ff88 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005de0:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8005de4:	4618      	mov	r0, r3
 8005de6:	f014 fcb0 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('F', Direction::RIGHT, {'K', 'M'}, QUARTER_CIRCLE);
 8005dea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005dee:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005df2:	2148      	movs	r1, #72	; 0x48
 8005df4:	6818      	ldr	r0, [r3, #0]
 8005df6:	f002 f8c9 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e00:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 8005e04:	4a85      	ldr	r2, [pc, #532]	; (800601c <_ZN3jlb5GraphC1Ev+0x14dc>)
 8005e06:	8812      	ldrh	r2, [r2, #0]
 8005e08:	801a      	strh	r2, [r3, #0]
 8005e0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e0e:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8005e12:	f207 5234 	addw	r2, r7, #1332	; 0x534
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e1c:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8005e20:	2202      	movs	r2, #2
 8005e22:	605a      	str	r2, [r3, #4]
 8005e24:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f014 fc8c 	bl	801a746 <_ZNSaIcEC1Ev>
 8005e2e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8005e32:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005e36:	f2a2 723c 	subw	r2, r2, #1852	; 0x73c
 8005e3a:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 8005e3e:	ca06      	ldmia	r2, {r1, r2}
 8005e40:	f002 ffa3 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005e44:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8005e48:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8006014 <_ZN3jlb5GraphC1Ev+0x14d4>
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	2146      	movs	r1, #70	; 0x46
 8005e50:	4620      	mov	r0, r4
 8005e52:	f7fe fe30 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005e56:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f002 ff48 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005e60:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8005e64:	4618      	mov	r0, r3
 8005e66:	f014 fc70 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('K', Direction::LEFT, {'F'}, QUARTER_CIRCLE);
 8005e6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e6e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005e72:	2148      	movs	r1, #72	; 0x48
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	f002 f889 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e80:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 8005e84:	2246      	movs	r2, #70	; 0x46
 8005e86:	701a      	strb	r2, [r3, #0]
 8005e88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e8c:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8005e90:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e9a:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	605a      	str	r2, [r3, #4]
 8005ea2:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f014 fc4d 	bl	801a746 <_ZNSaIcEC1Ev>
 8005eac:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8005eb0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005eb4:	f5a2 62e4 	sub.w	r2, r2, #1824	; 0x720
 8005eb8:	f207 503c 	addw	r0, r7, #1340	; 0x53c
 8005ebc:	ca06      	ldmia	r2, {r1, r2}
 8005ebe:	f002 ff64 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005ec2:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8005ec6:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8006014 <_ZN3jlb5GraphC1Ev+0x14d4>
 8005eca:	2200      	movs	r2, #0
 8005ecc:	214b      	movs	r1, #75	; 0x4b
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f7fe fdf1 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005ed4:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f002 ff09 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005ede:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f014 fc31 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('M', Direction::STRAIGHT, {'F'}, 2.0f * UNIT);
 8005ee8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005eec:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005ef0:	2148      	movs	r1, #72	; 0x48
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	f002 f84a 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005ef8:	4604      	mov	r4, r0
 8005efa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005efe:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 8005f02:	2246      	movs	r2, #70	; 0x46
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f0a:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 8005f0e:	f207 526c 	addw	r2, r7, #1388	; 0x56c
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f18:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	605a      	str	r2, [r3, #4]
 8005f20:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8005f24:	4618      	mov	r0, r3
 8005f26:	f014 fc0e 	bl	801a746 <_ZNSaIcEC1Ev>
 8005f2a:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8005f2e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005f32:	f2a2 7204 	subw	r2, r2, #1796	; 0x704
 8005f36:	f507 60ab 	add.w	r0, r7, #1368	; 0x558
 8005f3a:	ca06      	ldmia	r2, {r1, r2}
 8005f3c:	f002 ff25 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005f40:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8005f44:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8006024 <_ZN3jlb5GraphC1Ev+0x14e4>
 8005f48:	2202      	movs	r2, #2
 8005f4a:	214d      	movs	r1, #77	; 0x4d
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f7fe fdb2 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005f52:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8005f56:	4618      	mov	r0, r3
 8005f58:	f002 feca 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005f5c:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8005f60:	4618      	mov	r0, r3
 8005f62:	f014 fbf2 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('F', Direction::LEFT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 8005f66:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f6a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005f6e:	2149      	movs	r1, #73	; 0x49
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	f002 f80b 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005f76:	4604      	mov	r4, r0
 8005f78:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f7c:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8005f80:	4a27      	ldr	r2, [pc, #156]	; (8006020 <_ZN3jlb5GraphC1Ev+0x14e0>)
 8005f82:	6812      	ldr	r2, [r2, #0]
 8005f84:	4611      	mov	r1, r2
 8005f86:	8019      	strh	r1, [r3, #0]
 8005f88:	3302      	adds	r3, #2
 8005f8a:	0c12      	lsrs	r2, r2, #16
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f92:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8005f96:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fa0:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8005fa4:	2203      	movs	r2, #3
 8005fa6:	605a      	str	r2, [r3, #4]
 8005fa8:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8005fac:	4618      	mov	r0, r3
 8005fae:	f014 fbca 	bl	801a746 <_ZNSaIcEC1Ev>
 8005fb2:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8005fb6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005fba:	f5a2 62dd 	sub.w	r2, r2, #1768	; 0x6e8
 8005fbe:	f207 5074 	addw	r0, r7, #1396	; 0x574
 8005fc2:	ca06      	ldmia	r2, {r1, r2}
 8005fc4:	f002 fee1 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005fc8:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8005fcc:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8006014 <_ZN3jlb5GraphC1Ev+0x14d4>
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2146      	movs	r1, #70	; 0x46
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f7fe fd6e 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005fda:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f002 fe86 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8005fe4:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f014 fbae 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('D', Direction::STRAIGHT, {'K', 'L', 'N'}, 2.0f * UNIT);
 8005fee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ff2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005ff6:	2149      	movs	r1, #73	; 0x49
 8005ff8:	6818      	ldr	r0, [r3, #0]
 8005ffa:	f001 ffc7 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8005ffe:	4604      	mov	r4, r0
 8006000:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006004:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8006008:	4a05      	ldr	r2, [pc, #20]	; (8006020 <_ZN3jlb5GraphC1Ev+0x14e0>)
 800600a:	6812      	ldr	r2, [r2, #0]
 800600c:	4611      	mov	r1, r2
 800600e:	e00b      	b.n	8006028 <_ZN3jlb5GraphC1Ev+0x14e8>
 8006010:	0801e570 	.word	0x0801e570
 8006014:	3f71463a 	.word	0x3f71463a
 8006018:	0801e56c 	.word	0x0801e56c
 800601c:	0801e574 	.word	0x0801e574
 8006020:	0801e578 	.word	0x0801e578
 8006024:	3f99999a 	.word	0x3f99999a
 8006028:	8019      	strh	r1, [r3, #0]
 800602a:	3302      	adds	r3, #2
 800602c:	0c12      	lsrs	r2, r2, #16
 800602e:	701a      	strb	r2, [r3, #0]
 8006030:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006034:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8006038:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006042:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8006046:	2203      	movs	r2, #3
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800604e:	4618      	mov	r0, r3
 8006050:	f014 fb79 	bl	801a746 <_ZNSaIcEC1Ev>
 8006054:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8006058:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800605c:	f2a2 62cc 	subw	r2, r2, #1740	; 0x6cc
 8006060:	f507 60b2 	add.w	r0, r7, #1424	; 0x590
 8006064:	ca06      	ldmia	r2, {r1, r2}
 8006066:	f002 fe90 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800606a:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800606e:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 8006024 <_ZN3jlb5GraphC1Ev+0x14e4>
 8006072:	2202      	movs	r2, #2
 8006074:	2144      	movs	r1, #68	; 0x44
 8006076:	4620      	mov	r0, r4
 8006078:	f7fe fd1d 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800607c:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8006080:	4618      	mov	r0, r3
 8006082:	f002 fe35 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006086:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800608a:	4618      	mov	r0, r3
 800608c:	f014 fb5d 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('G', Direction::RIGHT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 8006090:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006094:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006098:	2149      	movs	r1, #73	; 0x49
 800609a:	6818      	ldr	r0, [r3, #0]
 800609c:	f001 ff76 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80060a0:	4604      	mov	r4, r0
 80060a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060a6:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 80060aa:	4ae7      	ldr	r2, [pc, #924]	; (8006448 <_ZN3jlb5GraphC1Ev+0x1908>)
 80060ac:	6812      	ldr	r2, [r2, #0]
 80060ae:	4611      	mov	r1, r2
 80060b0:	8019      	strh	r1, [r3, #0]
 80060b2:	3302      	adds	r3, #2
 80060b4:	0c12      	lsrs	r2, r2, #16
 80060b6:	701a      	strb	r2, [r3, #0]
 80060b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060bc:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 80060c0:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060ca:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 80060ce:	2203      	movs	r2, #3
 80060d0:	605a      	str	r2, [r3, #4]
 80060d2:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 80060d6:	4618      	mov	r0, r3
 80060d8:	f014 fb35 	bl	801a746 <_ZNSaIcEC1Ev>
 80060dc:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 80060e0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80060e4:	f5a2 62d6 	sub.w	r2, r2, #1712	; 0x6b0
 80060e8:	f207 50ac 	addw	r0, r7, #1452	; 0x5ac
 80060ec:	ca06      	ldmia	r2, {r1, r2}
 80060ee:	f002 fe4c 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80060f2:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 80060f6:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800644c <_ZN3jlb5GraphC1Ev+0x190c>
 80060fa:	2201      	movs	r2, #1
 80060fc:	2147      	movs	r1, #71	; 0x47
 80060fe:	4620      	mov	r0, r4
 8006100:	f7fe fcd9 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006104:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 8006108:	4618      	mov	r0, r3
 800610a:	f002 fdf1 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 800610e:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8006112:	4618      	mov	r0, r3
 8006114:	f014 fb19 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('L', Direction::LEFT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8006118:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800611c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006120:	2149      	movs	r1, #73	; 0x49
 8006122:	6818      	ldr	r0, [r3, #0]
 8006124:	f001 ff32 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8006128:	4604      	mov	r4, r0
 800612a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800612e:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8006132:	4ac7      	ldr	r2, [pc, #796]	; (8006450 <_ZN3jlb5GraphC1Ev+0x1910>)
 8006134:	6812      	ldr	r2, [r2, #0]
 8006136:	4611      	mov	r1, r2
 8006138:	8019      	strh	r1, [r3, #0]
 800613a:	3302      	adds	r3, #2
 800613c:	0c12      	lsrs	r2, r2, #16
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006144:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8006148:	f207 52dc 	addw	r2, r7, #1500	; 0x5dc
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006152:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8006156:	2203      	movs	r2, #3
 8006158:	605a      	str	r2, [r3, #4]
 800615a:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800615e:	4618      	mov	r0, r3
 8006160:	f014 faf1 	bl	801a746 <_ZNSaIcEC1Ev>
 8006164:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8006168:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800616c:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 8006170:	f507 60b9 	add.w	r0, r7, #1480	; 0x5c8
 8006174:	ca06      	ldmia	r2, {r1, r2}
 8006176:	f002 fe08 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800617a:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800617e:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 800644c <_ZN3jlb5GraphC1Ev+0x190c>
 8006182:	2200      	movs	r2, #0
 8006184:	214c      	movs	r1, #76	; 0x4c
 8006186:	4620      	mov	r0, r4
 8006188:	f7fe fc95 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800618c:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8006190:	4618      	mov	r0, r3
 8006192:	f002 fdad 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006196:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800619a:	4618      	mov	r0, r3
 800619c:	f014 fad5 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('N', Direction::STRAIGHT, {'D', 'F', 'G'}, 2.0f * UNIT);
 80061a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061a4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80061a8:	2149      	movs	r1, #73	; 0x49
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	f001 feee 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80061b0:	4604      	mov	r4, r0
 80061b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061b6:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 80061ba:	4aa5      	ldr	r2, [pc, #660]	; (8006450 <_ZN3jlb5GraphC1Ev+0x1910>)
 80061bc:	6812      	ldr	r2, [r2, #0]
 80061be:	4611      	mov	r1, r2
 80061c0:	8019      	strh	r1, [r3, #0]
 80061c2:	3302      	adds	r3, #2
 80061c4:	0c12      	lsrs	r2, r2, #16
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061cc:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 80061d0:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061da:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 80061de:	2203      	movs	r2, #3
 80061e0:	605a      	str	r2, [r3, #4]
 80061e2:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 80061e6:	4618      	mov	r0, r3
 80061e8:	f014 faad 	bl	801a746 <_ZNSaIcEC1Ev>
 80061ec:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 80061f0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80061f4:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 80061f8:	f207 50e4 	addw	r0, r7, #1508	; 0x5e4
 80061fc:	ca06      	ldmia	r2, {r1, r2}
 80061fe:	f002 fdc4 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006202:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8006206:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8006454 <_ZN3jlb5GraphC1Ev+0x1914>
 800620a:	2202      	movs	r2, #2
 800620c:	214e      	movs	r1, #78	; 0x4e
 800620e:	4620      	mov	r0, r4
 8006210:	f7fe fc51 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006214:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8006218:	4618      	mov	r0, r3
 800621a:	f002 fd69 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 800621e:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8006222:	4618      	mov	r0, r3
 8006224:	f014 fa91 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('K', Direction::RIGHT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8006228:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800622c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006230:	2149      	movs	r1, #73	; 0x49
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	f001 feaa 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8006238:	4604      	mov	r4, r0
 800623a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800623e:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8006242:	4a83      	ldr	r2, [pc, #524]	; (8006450 <_ZN3jlb5GraphC1Ev+0x1910>)
 8006244:	6812      	ldr	r2, [r2, #0]
 8006246:	4611      	mov	r1, r2
 8006248:	8019      	strh	r1, [r3, #0]
 800624a:	3302      	adds	r3, #2
 800624c:	0c12      	lsrs	r2, r2, #16
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006254:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8006258:	f207 6214 	addw	r2, r7, #1556	; 0x614
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006262:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8006266:	2203      	movs	r2, #3
 8006268:	605a      	str	r2, [r3, #4]
 800626a:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800626e:	4618      	mov	r0, r3
 8006270:	f014 fa69 	bl	801a746 <_ZNSaIcEC1Ev>
 8006274:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8006278:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800627c:	f2a2 625c 	subw	r2, r2, #1628	; 0x65c
 8006280:	f507 60c0 	add.w	r0, r7, #1536	; 0x600
 8006284:	ca06      	ldmia	r2, {r1, r2}
 8006286:	f002 fd80 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800628a:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800628e:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 800644c <_ZN3jlb5GraphC1Ev+0x190c>
 8006292:	2201      	movs	r2, #1
 8006294:	214b      	movs	r1, #75	; 0x4b
 8006296:	4620      	mov	r0, r4
 8006298:	f7fe fc0d 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800629c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80062a0:	4618      	mov	r0, r3
 80062a2:	f002 fd25 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80062a6:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80062aa:	4618      	mov	r0, r3
 80062ac:	f014 fa4d 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('G', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 80062b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062b4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80062b8:	214a      	movs	r1, #74	; 0x4a
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	f001 fe66 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80062c0:	4604      	mov	r4, r0
 80062c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062c6:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 80062ca:	224c      	movs	r2, #76	; 0x4c
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062d2:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 80062d6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062e0:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 80062e4:	2201      	movs	r2, #1
 80062e6:	605a      	str	r2, [r3, #4]
 80062e8:	f207 6334 	addw	r3, r7, #1588	; 0x634
 80062ec:	4618      	mov	r0, r3
 80062ee:	f014 fa2a 	bl	801a746 <_ZNSaIcEC1Ev>
 80062f2:	f207 6334 	addw	r3, r7, #1588	; 0x634
 80062f6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80062fa:	f5a2 62c8 	sub.w	r2, r2, #1600	; 0x640
 80062fe:	f207 601c 	addw	r0, r7, #1564	; 0x61c
 8006302:	ca06      	ldmia	r2, {r1, r2}
 8006304:	f002 fd41 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006308:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800630c:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800644c <_ZN3jlb5GraphC1Ev+0x190c>
 8006310:	2200      	movs	r2, #0
 8006312:	2147      	movs	r1, #71	; 0x47
 8006314:	4620      	mov	r0, r4
 8006316:	f7fe fbce 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800631a:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800631e:	4618      	mov	r0, r3
 8006320:	f002 fce6 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006324:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8006328:	4618      	mov	r0, r3
 800632a:	f014 fa0e 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('E', Direction::STRAIGHT, {'L'}, 2.0f * UNIT);
 800632e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006332:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006336:	214a      	movs	r1, #74	; 0x4a
 8006338:	6818      	ldr	r0, [r3, #0]
 800633a:	f001 fe27 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800633e:	4604      	mov	r4, r0
 8006340:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006344:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8006348:	224c      	movs	r2, #76	; 0x4c
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006350:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8006354:	f207 624c 	addw	r2, r7, #1612	; 0x64c
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800635e:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8006362:	2201      	movs	r2, #1
 8006364:	605a      	str	r2, [r3, #4]
 8006366:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800636a:	4618      	mov	r0, r3
 800636c:	f014 f9eb 	bl	801a746 <_ZNSaIcEC1Ev>
 8006370:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8006374:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006378:	f2a2 6224 	subw	r2, r2, #1572	; 0x624
 800637c:	f507 60c7 	add.w	r0, r7, #1592	; 0x638
 8006380:	ca06      	ldmia	r2, {r1, r2}
 8006382:	f002 fd02 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006386:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800638a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8006454 <_ZN3jlb5GraphC1Ev+0x1914>
 800638e:	2202      	movs	r2, #2
 8006390:	2145      	movs	r1, #69	; 0x45
 8006392:	4620      	mov	r0, r4
 8006394:	f7fe fb8f 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006398:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800639c:	4618      	mov	r0, r3
 800639e:	f002 fca7 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80063a2:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80063a6:	4618      	mov	r0, r3
 80063a8:	f014 f9cf 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('L', Direction::RIGHT, {'E', 'G'}, QUARTER_CIRCLE);
 80063ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063b0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80063b4:	214a      	movs	r1, #74	; 0x4a
 80063b6:	6818      	ldr	r0, [r3, #0]
 80063b8:	f001 fde8 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80063bc:	4604      	mov	r4, r0
 80063be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063c2:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 80063c6:	4a24      	ldr	r2, [pc, #144]	; (8006458 <_ZN3jlb5GraphC1Ev+0x1918>)
 80063c8:	8812      	ldrh	r2, [r2, #0]
 80063ca:	801a      	strh	r2, [r3, #0]
 80063cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063d0:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 80063d4:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063de:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 80063e2:	2202      	movs	r2, #2
 80063e4:	605a      	str	r2, [r3, #4]
 80063e6:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80063ea:	4618      	mov	r0, r3
 80063ec:	f014 f9ab 	bl	801a746 <_ZNSaIcEC1Ev>
 80063f0:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80063f4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80063f8:	f5a2 62c1 	sub.w	r2, r2, #1544	; 0x608
 80063fc:	f207 6054 	addw	r0, r7, #1620	; 0x654
 8006400:	ca06      	ldmia	r2, {r1, r2}
 8006402:	f002 fcc2 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006406:	f207 6354 	addw	r3, r7, #1620	; 0x654
 800640a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800644c <_ZN3jlb5GraphC1Ev+0x190c>
 800640e:	2201      	movs	r2, #1
 8006410:	214c      	movs	r1, #76	; 0x4c
 8006412:	4620      	mov	r0, r4
 8006414:	f7fe fb4f 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006418:	f207 6354 	addw	r3, r7, #1620	; 0x654
 800641c:	4618      	mov	r0, r3
 800641e:	f002 fc67 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006422:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8006426:	4618      	mov	r0, r3
 8006428:	f014 f98f 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('H', Direction::RIGHT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 800642c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006430:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006434:	214b      	movs	r1, #75	; 0x4b
 8006436:	6818      	ldr	r0, [r3, #0]
 8006438:	f001 fda8 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800643c:	4604      	mov	r4, r0
 800643e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006442:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8006446:	e009      	b.n	800645c <_ZN3jlb5GraphC1Ev+0x191c>
 8006448:	0801e578 	.word	0x0801e578
 800644c:	3f71463a 	.word	0x3f71463a
 8006450:	0801e57c 	.word	0x0801e57c
 8006454:	3f99999a 	.word	0x3f99999a
 8006458:	0801e580 	.word	0x0801e580
 800645c:	4ae4      	ldr	r2, [pc, #912]	; (80067f0 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 800645e:	6812      	ldr	r2, [r2, #0]
 8006460:	4611      	mov	r1, r2
 8006462:	8019      	strh	r1, [r3, #0]
 8006464:	3302      	adds	r3, #2
 8006466:	0c12      	lsrs	r2, r2, #16
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800646e:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8006472:	f207 6284 	addw	r2, r7, #1668	; 0x684
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800647c:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8006480:	2203      	movs	r2, #3
 8006482:	605a      	str	r2, [r3, #4]
 8006484:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8006488:	4618      	mov	r0, r3
 800648a:	f014 f95c 	bl	801a746 <_ZNSaIcEC1Ev>
 800648e:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8006492:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006496:	f2a2 52ec 	subw	r2, r2, #1516	; 0x5ec
 800649a:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 800649e:	ca06      	ldmia	r2, {r1, r2}
 80064a0:	f002 fc73 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80064a4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80064a8:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 80067f4 <_ZN3jlb5GraphC1Ev+0x1cb4>
 80064ac:	2201      	movs	r2, #1
 80064ae:	2148      	movs	r1, #72	; 0x48
 80064b0:	4620      	mov	r0, r4
 80064b2:	f7fe fb00 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80064b6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80064ba:	4618      	mov	r0, r3
 80064bc:	f002 fc18 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80064c0:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 80064c4:	4618      	mov	r0, r3
 80064c6:	f014 f940 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('I', Direction::LEFT, {'H', 'M'}, QUARTER_CIRCLE);
 80064ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064ce:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80064d2:	214b      	movs	r1, #75	; 0x4b
 80064d4:	6818      	ldr	r0, [r3, #0]
 80064d6:	f001 fd59 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80064da:	4604      	mov	r4, r0
 80064dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064e0:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 80064e4:	4ac4      	ldr	r2, [pc, #784]	; (80067f8 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 80064e6:	8812      	ldrh	r2, [r2, #0]
 80064e8:	801a      	strh	r2, [r3, #0]
 80064ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064ee:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 80064f2:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064fc:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8006500:	2202      	movs	r2, #2
 8006502:	605a      	str	r2, [r3, #4]
 8006504:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8006508:	4618      	mov	r0, r3
 800650a:	f014 f91c 	bl	801a746 <_ZNSaIcEC1Ev>
 800650e:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8006512:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006516:	f5a2 62ba 	sub.w	r2, r2, #1488	; 0x5d0
 800651a:	f207 608c 	addw	r0, r7, #1676	; 0x68c
 800651e:	ca06      	ldmia	r2, {r1, r2}
 8006520:	f002 fc33 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006524:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 8006528:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 80067f4 <_ZN3jlb5GraphC1Ev+0x1cb4>
 800652c:	2200      	movs	r2, #0
 800652e:	2149      	movs	r1, #73	; 0x49
 8006530:	4620      	mov	r0, r4
 8006532:	f7fe fac0 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006536:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 800653a:	4618      	mov	r0, r3
 800653c:	f002 fbd8 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006540:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8006544:	4618      	mov	r0, r3
 8006546:	f014 f900 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('L', Direction::STRAIGHT, {'H', 'M'}, 2.0f * UNIT);
 800654a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800654e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006552:	214b      	movs	r1, #75	; 0x4b
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	f001 fd19 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800655a:	4604      	mov	r4, r0
 800655c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006560:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8006564:	4aa4      	ldr	r2, [pc, #656]	; (80067f8 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8006566:	8812      	ldrh	r2, [r2, #0]
 8006568:	801a      	strh	r2, [r3, #0]
 800656a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800656e:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8006572:	f207 62bc 	addw	r2, r7, #1724	; 0x6bc
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800657c:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8006580:	2202      	movs	r2, #2
 8006582:	605a      	str	r2, [r3, #4]
 8006584:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8006588:	4618      	mov	r0, r3
 800658a:	f014 f8dc 	bl	801a746 <_ZNSaIcEC1Ev>
 800658e:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8006592:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006596:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 800659a:	f507 60d5 	add.w	r0, r7, #1704	; 0x6a8
 800659e:	ca06      	ldmia	r2, {r1, r2}
 80065a0:	f002 fbf3 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80065a4:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 80065a8:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80067fc <_ZN3jlb5GraphC1Ev+0x1cbc>
 80065ac:	2202      	movs	r2, #2
 80065ae:	214c      	movs	r1, #76	; 0x4c
 80065b0:	4620      	mov	r0, r4
 80065b2:	f7fe fa80 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80065b6:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 80065ba:	4618      	mov	r0, r3
 80065bc:	f002 fb98 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80065c0:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 80065c4:	4618      	mov	r0, r3
 80065c6:	f014 f8c0 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('N', Direction::RIGHT, {'H', 'M'}, QUARTER_CIRCLE);
 80065ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065ce:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80065d2:	214b      	movs	r1, #75	; 0x4b
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	f001 fcd9 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80065da:	4604      	mov	r4, r0
 80065dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065e0:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 80065e4:	4a84      	ldr	r2, [pc, #528]	; (80067f8 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 80065e6:	8812      	ldrh	r2, [r2, #0]
 80065e8:	801a      	strh	r2, [r3, #0]
 80065ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065ee:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 80065f2:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065fc:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8006600:	2202      	movs	r2, #2
 8006602:	605a      	str	r2, [r3, #4]
 8006604:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8006608:	4618      	mov	r0, r3
 800660a:	f014 f89c 	bl	801a746 <_ZNSaIcEC1Ev>
 800660e:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8006612:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006616:	f5a2 62b3 	sub.w	r2, r2, #1432	; 0x598
 800661a:	f207 60c4 	addw	r0, r7, #1732	; 0x6c4
 800661e:	ca06      	ldmia	r2, {r1, r2}
 8006620:	f002 fbb3 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006624:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 8006628:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80067f4 <_ZN3jlb5GraphC1Ev+0x1cb4>
 800662c:	2201      	movs	r2, #1
 800662e:	214e      	movs	r1, #78	; 0x4e
 8006630:	4620      	mov	r0, r4
 8006632:	f7fe fa40 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006636:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 800663a:	4618      	mov	r0, r3
 800663c:	f002 fb58 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006640:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8006644:	4618      	mov	r0, r3
 8006646:	f014 f880 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('M', Direction::LEFT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 800664a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800664e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006652:	214b      	movs	r1, #75	; 0x4b
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	f001 fc99 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800665a:	4604      	mov	r4, r0
 800665c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006660:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 8006664:	4a62      	ldr	r2, [pc, #392]	; (80067f0 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 8006666:	6812      	ldr	r2, [r2, #0]
 8006668:	4611      	mov	r1, r2
 800666a:	8019      	strh	r1, [r3, #0]
 800666c:	3302      	adds	r3, #2
 800666e:	0c12      	lsrs	r2, r2, #16
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006676:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800667a:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006684:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8006688:	2203      	movs	r2, #3
 800668a:	605a      	str	r2, [r3, #4]
 800668c:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8006690:	4618      	mov	r0, r3
 8006692:	f014 f858 	bl	801a746 <_ZNSaIcEC1Ev>
 8006696:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800669a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800669e:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 80066a2:	f507 60dc 	add.w	r0, r7, #1760	; 0x6e0
 80066a6:	ca06      	ldmia	r2, {r1, r2}
 80066a8:	f002 fb6f 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80066ac:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 80066b0:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80067f4 <_ZN3jlb5GraphC1Ev+0x1cb4>
 80066b4:	2200      	movs	r2, #0
 80066b6:	214d      	movs	r1, #77	; 0x4d
 80066b8:	4620      	mov	r0, r4
 80066ba:	f7fe f9fc 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80066be:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 80066c2:	4618      	mov	r0, r3
 80066c4:	f002 fb14 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80066c8:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 80066cc:	4618      	mov	r0, r3
 80066ce:	f014 f83c 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('K', Direction::STRAIGHT, {'J', 'O'}, 2.0f * UNIT);
 80066d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066d6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80066da:	214c      	movs	r1, #76	; 0x4c
 80066dc:	6818      	ldr	r0, [r3, #0]
 80066de:	f001 fc55 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80066e2:	4604      	mov	r4, r0
 80066e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066e8:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80066ec:	4a44      	ldr	r2, [pc, #272]	; (8006800 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 80066ee:	8812      	ldrh	r2, [r2, #0]
 80066f0:	801a      	strh	r2, [r3, #0]
 80066f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066f6:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 80066fa:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006704:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8006708:	2202      	movs	r2, #2
 800670a:	605a      	str	r2, [r3, #4]
 800670c:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8006710:	4618      	mov	r0, r3
 8006712:	f014 f818 	bl	801a746 <_ZNSaIcEC1Ev>
 8006716:	f207 7314 	addw	r3, r7, #1812	; 0x714
 800671a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800671e:	f5a2 62ac 	sub.w	r2, r2, #1376	; 0x560
 8006722:	f207 60fc 	addw	r0, r7, #1788	; 0x6fc
 8006726:	ca06      	ldmia	r2, {r1, r2}
 8006728:	f002 fb2f 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800672c:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8006730:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80067fc <_ZN3jlb5GraphC1Ev+0x1cbc>
 8006734:	2202      	movs	r2, #2
 8006736:	214b      	movs	r1, #75	; 0x4b
 8006738:	4620      	mov	r0, r4
 800673a:	f7fe f9bc 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800673e:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8006742:	4618      	mov	r0, r3
 8006744:	f002 fad4 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006748:	f207 7314 	addw	r3, r7, #1812	; 0x714
 800674c:	4618      	mov	r0, r3
 800674e:	f013 fffc 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('I', Direction::RIGHT, {'J', 'O'}, QUARTER_CIRCLE);
 8006752:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006756:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800675a:	214c      	movs	r1, #76	; 0x4c
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	f001 fc15 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8006762:	4604      	mov	r4, r0
 8006764:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006768:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 800676c:	4a24      	ldr	r2, [pc, #144]	; (8006800 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 800676e:	8812      	ldrh	r2, [r2, #0]
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006776:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800677a:	f207 722c 	addw	r2, r7, #1836	; 0x72c
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006784:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8006788:	2202      	movs	r2, #2
 800678a:	605a      	str	r2, [r3, #4]
 800678c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8006790:	4618      	mov	r0, r3
 8006792:	f013 ffd8 	bl	801a746 <_ZNSaIcEC1Ev>
 8006796:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800679a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800679e:	f2a2 5244 	subw	r2, r2, #1348	; 0x544
 80067a2:	f507 60e3 	add.w	r0, r7, #1816	; 0x718
 80067a6:	ca06      	ldmia	r2, {r1, r2}
 80067a8:	f002 faef 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80067ac:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 80067b0:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80067f4 <_ZN3jlb5GraphC1Ev+0x1cb4>
 80067b4:	2201      	movs	r2, #1
 80067b6:	2149      	movs	r1, #73	; 0x49
 80067b8:	4620      	mov	r0, r4
 80067ba:	f7fe f97c 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80067be:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 80067c2:	4618      	mov	r0, r3
 80067c4:	f002 fa94 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80067c8:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80067cc:	4618      	mov	r0, r3
 80067ce:	f013 ffbc 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('J', Direction::LEFT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 80067d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067d6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80067da:	214c      	movs	r1, #76	; 0x4c
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	f001 fbd5 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80067e2:	4604      	mov	r4, r0
 80067e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067e8:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80067ec:	e00a      	b.n	8006804 <_ZN3jlb5GraphC1Ev+0x1cc4>
 80067ee:	bf00      	nop
 80067f0:	0801e584 	.word	0x0801e584
 80067f4:	3f71463a 	.word	0x3f71463a
 80067f8:	0801e588 	.word	0x0801e588
 80067fc:	3f99999a 	.word	0x3f99999a
 8006800:	0801e58c 	.word	0x0801e58c
 8006804:	4ae4      	ldr	r2, [pc, #912]	; (8006b98 <_ZN3jlb5GraphC1Ev+0x2058>)
 8006806:	6812      	ldr	r2, [r2, #0]
 8006808:	4611      	mov	r1, r2
 800680a:	8019      	strh	r1, [r3, #0]
 800680c:	3302      	adds	r3, #2
 800680e:	0c12      	lsrs	r2, r2, #16
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006816:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800681a:	f507 62e9 	add.w	r2, r7, #1864	; 0x748
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006824:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8006828:	2203      	movs	r2, #3
 800682a:	605a      	str	r2, [r3, #4]
 800682c:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8006830:	4618      	mov	r0, r3
 8006832:	f013 ff88 	bl	801a746 <_ZNSaIcEC1Ev>
 8006836:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 800683a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800683e:	f5a2 62a5 	sub.w	r2, r2, #1320	; 0x528
 8006842:	f207 7034 	addw	r0, r7, #1844	; 0x734
 8006846:	ca06      	ldmia	r2, {r1, r2}
 8006848:	f002 fa9f 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800684c:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8006850:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8006b9c <_ZN3jlb5GraphC1Ev+0x205c>
 8006854:	2200      	movs	r2, #0
 8006856:	214a      	movs	r1, #74	; 0x4a
 8006858:	4620      	mov	r0, r4
 800685a:	f7fe f92c 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800685e:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8006862:	4618      	mov	r0, r3
 8006864:	f002 fa44 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006868:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 800686c:	4618      	mov	r0, r3
 800686e:	f013 ff6c 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('O', Direction::RIGHT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 8006872:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006876:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800687a:	214c      	movs	r1, #76	; 0x4c
 800687c:	6818      	ldr	r0, [r3, #0]
 800687e:	f001 fb85 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8006882:	4604      	mov	r4, r0
 8006884:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006888:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800688c:	4ac2      	ldr	r2, [pc, #776]	; (8006b98 <_ZN3jlb5GraphC1Ev+0x2058>)
 800688e:	6812      	ldr	r2, [r2, #0]
 8006890:	4611      	mov	r1, r2
 8006892:	8019      	strh	r1, [r3, #0]
 8006894:	3302      	adds	r3, #2
 8006896:	0c12      	lsrs	r2, r2, #16
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800689e:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 80068a2:	f207 7264 	addw	r2, r7, #1892	; 0x764
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068ac:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 80068b0:	2203      	movs	r2, #3
 80068b2:	605a      	str	r2, [r3, #4]
 80068b4:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80068b8:	4618      	mov	r0, r3
 80068ba:	f013 ff44 	bl	801a746 <_ZNSaIcEC1Ev>
 80068be:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80068c2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80068c6:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 80068ca:	f507 60ea 	add.w	r0, r7, #1872	; 0x750
 80068ce:	ca06      	ldmia	r2, {r1, r2}
 80068d0:	f002 fa5b 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80068d4:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80068d8:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8006b9c <_ZN3jlb5GraphC1Ev+0x205c>
 80068dc:	2201      	movs	r2, #1
 80068de:	214f      	movs	r1, #79	; 0x4f
 80068e0:	4620      	mov	r0, r4
 80068e2:	f7fe f8e8 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80068e6:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80068ea:	4618      	mov	r0, r3
 80068ec:	f002 fa00 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80068f0:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80068f4:	4618      	mov	r0, r3
 80068f6:	f013 ff28 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('N', Direction::LEFT, {'J', 'O'}, QUARTER_CIRCLE);
 80068fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068fe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006902:	214c      	movs	r1, #76	; 0x4c
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	f001 fb41 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800690a:	4604      	mov	r4, r0
 800690c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006910:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8006914:	4aa2      	ldr	r2, [pc, #648]	; (8006ba0 <_ZN3jlb5GraphC1Ev+0x2060>)
 8006916:	8812      	ldrh	r2, [r2, #0]
 8006918:	801a      	strh	r2, [r3, #0]
 800691a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800691e:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8006922:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800692c:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8006930:	2202      	movs	r2, #2
 8006932:	605a      	str	r2, [r3, #4]
 8006934:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8006938:	4618      	mov	r0, r3
 800693a:	f013 ff04 	bl	801a746 <_ZNSaIcEC1Ev>
 800693e:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8006942:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006946:	f5a2 629e 	sub.w	r2, r2, #1264	; 0x4f0
 800694a:	f207 706c 	addw	r0, r7, #1900	; 0x76c
 800694e:	ca06      	ldmia	r2, {r1, r2}
 8006950:	f002 fa1b 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006954:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8006958:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8006b9c <_ZN3jlb5GraphC1Ev+0x205c>
 800695c:	2200      	movs	r2, #0
 800695e:	214e      	movs	r1, #78	; 0x4e
 8006960:	4620      	mov	r0, r4
 8006962:	f7fe f8a8 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006966:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 800696a:	4618      	mov	r0, r3
 800696c:	f002 f9c0 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006970:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8006974:	4618      	mov	r0, r3
 8006976:	f013 fee8 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('H', Direction::STRAIGHT, {'P', 'Q', 'R'}, 2.0f * UNIT);
 800697a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800697e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006982:	214d      	movs	r1, #77	; 0x4d
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	f001 fb01 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800698a:	4604      	mov	r4, r0
 800698c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006990:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8006994:	4a83      	ldr	r2, [pc, #524]	; (8006ba4 <_ZN3jlb5GraphC1Ev+0x2064>)
 8006996:	6812      	ldr	r2, [r2, #0]
 8006998:	4611      	mov	r1, r2
 800699a:	8019      	strh	r1, [r3, #0]
 800699c:	3302      	adds	r3, #2
 800699e:	0c12      	lsrs	r2, r2, #16
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069a6:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 80069aa:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069b4:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 80069b8:	2203      	movs	r2, #3
 80069ba:	605a      	str	r2, [r3, #4]
 80069bc:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80069c0:	4618      	mov	r0, r3
 80069c2:	f013 fec0 	bl	801a746 <_ZNSaIcEC1Ev>
 80069c6:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80069ca:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80069ce:	f2a2 42d4 	subw	r2, r2, #1236	; 0x4d4
 80069d2:	f507 60f1 	add.w	r0, r7, #1928	; 0x788
 80069d6:	ca06      	ldmia	r2, {r1, r2}
 80069d8:	f002 f9d7 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80069dc:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 80069e0:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8006ba8 <_ZN3jlb5GraphC1Ev+0x2068>
 80069e4:	2202      	movs	r2, #2
 80069e6:	2148      	movs	r1, #72	; 0x48
 80069e8:	4620      	mov	r0, r4
 80069ea:	f7fe f864 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80069ee:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 80069f2:	4618      	mov	r0, r3
 80069f4:	f002 f97c 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80069f8:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80069fc:	4618      	mov	r0, r3
 80069fe:	f013 fea4 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('K', Direction::RIGHT, {'P', 'Q', 'R'}, QUARTER_CIRCLE);
 8006a02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a06:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006a0a:	214d      	movs	r1, #77	; 0x4d
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	f001 fabd 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8006a12:	4604      	mov	r4, r0
 8006a14:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a18:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8006a1c:	4a61      	ldr	r2, [pc, #388]	; (8006ba4 <_ZN3jlb5GraphC1Ev+0x2064>)
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	4611      	mov	r1, r2
 8006a22:	8019      	strh	r1, [r3, #0]
 8006a24:	3302      	adds	r3, #2
 8006a26:	0c12      	lsrs	r2, r2, #16
 8006a28:	701a      	strb	r2, [r3, #0]
 8006a2a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a2e:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8006a32:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a3c:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8006a40:	2203      	movs	r2, #3
 8006a42:	605a      	str	r2, [r3, #4]
 8006a44:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f013 fe7c 	bl	801a746 <_ZNSaIcEC1Ev>
 8006a4e:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8006a52:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006a56:	f5a2 6297 	sub.w	r2, r2, #1208	; 0x4b8
 8006a5a:	f207 70a4 	addw	r0, r7, #1956	; 0x7a4
 8006a5e:	ca06      	ldmia	r2, {r1, r2}
 8006a60:	f002 f993 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006a64:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8006a68:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8006b9c <_ZN3jlb5GraphC1Ev+0x205c>
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	214b      	movs	r1, #75	; 0x4b
 8006a70:	4620      	mov	r0, r4
 8006a72:	f7fe f820 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006a76:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f002 f938 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006a80:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8006a84:	4618      	mov	r0, r3
 8006a86:	f013 fe60 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('R', Direction::LEFT, {'H', 'K'}, QUARTER_CIRCLE);
 8006a8a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a8e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006a92:	214d      	movs	r1, #77	; 0x4d
 8006a94:	6818      	ldr	r0, [r3, #0]
 8006a96:	f001 fa79 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006aa0:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8006aa4:	4a41      	ldr	r2, [pc, #260]	; (8006bac <_ZN3jlb5GraphC1Ev+0x206c>)
 8006aa6:	8812      	ldrh	r2, [r2, #0]
 8006aa8:	801a      	strh	r2, [r3, #0]
 8006aaa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006aae:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8006ab2:	f207 72d4 	addw	r2, r7, #2004	; 0x7d4
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006abc:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	605a      	str	r2, [r3, #4]
 8006ac4:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f013 fe3c 	bl	801a746 <_ZNSaIcEC1Ev>
 8006ace:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8006ad2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006ad6:	f2a2 429c 	subw	r2, r2, #1180	; 0x49c
 8006ada:	f507 60f8 	add.w	r0, r7, #1984	; 0x7c0
 8006ade:	ca06      	ldmia	r2, {r1, r2}
 8006ae0:	f002 f953 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006ae4:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8006ae8:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8006b9c <_ZN3jlb5GraphC1Ev+0x205c>
 8006aec:	2200      	movs	r2, #0
 8006aee:	2152      	movs	r1, #82	; 0x52
 8006af0:	4620      	mov	r0, r4
 8006af2:	f7fd ffe0 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006af6:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8006afa:	4618      	mov	r0, r3
 8006afc:	f002 f8f8 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006b00:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8006b04:	4618      	mov	r0, r3
 8006b06:	f013 fe20 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('Q', Direction::STRAIGHT, {'H', 'K'}, UNIT);
 8006b0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b0e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006b12:	214d      	movs	r1, #77	; 0x4d
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	f001 fa39 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b20:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8006b24:	4a21      	ldr	r2, [pc, #132]	; (8006bac <_ZN3jlb5GraphC1Ev+0x206c>)
 8006b26:	8812      	ldrh	r2, [r2, #0]
 8006b28:	801a      	strh	r2, [r3, #0]
 8006b2a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b2e:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8006b32:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b3c:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8006b40:	2202      	movs	r2, #2
 8006b42:	605a      	str	r2, [r3, #4]
 8006b44:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f013 fdfc 	bl	801a746 <_ZNSaIcEC1Ev>
 8006b4e:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8006b52:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006b56:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 8006b5a:	f207 70dc 	addw	r0, r7, #2012	; 0x7dc
 8006b5e:	ca06      	ldmia	r2, {r1, r2}
 8006b60:	f002 f913 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006b64:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8006b68:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8006bb0 <_ZN3jlb5GraphC1Ev+0x2070>
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	2151      	movs	r1, #81	; 0x51
 8006b70:	4620      	mov	r0, r4
 8006b72:	f7fd ffa0 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006b76:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f002 f8b8 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006b80:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8006b84:	4618      	mov	r0, r3
 8006b86:	f013 fde0 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('P', Direction::RIGHT, {'H', 'K'}, QUARTER_CIRCLE);
 8006b8a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b8e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006b92:	214d      	movs	r1, #77	; 0x4d
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	e00d      	b.n	8006bb4 <_ZN3jlb5GraphC1Ev+0x2074>
 8006b98:	0801e590 	.word	0x0801e590
 8006b9c:	3f71463a 	.word	0x3f71463a
 8006ba0:	0801e58c 	.word	0x0801e58c
 8006ba4:	0801e594 	.word	0x0801e594
 8006ba8:	3f99999a 	.word	0x3f99999a
 8006bac:	0801e598 	.word	0x0801e598
 8006bb0:	3f19999a 	.word	0x3f19999a
 8006bb4:	f001 f9ea 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8006bb8:	4604      	mov	r4, r0
 8006bba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bbe:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8006bc2:	4ae5      	ldr	r2, [pc, #916]	; (8006f58 <_ZN3jlb5GraphC1Ev+0x2418>)
 8006bc4:	8812      	ldrh	r2, [r2, #0]
 8006bc6:	801a      	strh	r2, [r3, #0]
 8006bc8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bcc:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006bd0:	f607 020c 	addw	r2, r7, #2060	; 0x80c
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bda:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006bde:	2202      	movs	r2, #2
 8006be0:	605a      	str	r2, [r3, #4]
 8006be2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006be6:	4618      	mov	r0, r3
 8006be8:	f013 fdad 	bl	801a746 <_ZNSaIcEC1Ev>
 8006bec:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006bf0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006bf4:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8006bf8:	f507 60ff 	add.w	r0, r7, #2040	; 0x7f8
 8006bfc:	ca06      	ldmia	r2, {r1, r2}
 8006bfe:	f002 f8c4 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006c02:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8006c06:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8006f5c <_ZN3jlb5GraphC1Ev+0x241c>
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	2150      	movs	r1, #80	; 0x50
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f7fd ff51 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006c14:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f002 f869 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006c1e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006c22:	4618      	mov	r0, r3
 8006c24:	f013 fd91 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('K', Direction::LEFT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8006c28:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c2c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006c30:	214e      	movs	r1, #78	; 0x4e
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	f001 f9aa 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8006c38:	4604      	mov	r4, r0
 8006c3a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c3e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006c42:	4ac7      	ldr	r2, [pc, #796]	; (8006f60 <_ZN3jlb5GraphC1Ev+0x2420>)
 8006c44:	6812      	ldr	r2, [r2, #0]
 8006c46:	4611      	mov	r1, r2
 8006c48:	8019      	strh	r1, [r3, #0]
 8006c4a:	3302      	adds	r3, #2
 8006c4c:	0c12      	lsrs	r2, r2, #16
 8006c4e:	701a      	strb	r2, [r3, #0]
 8006c50:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c54:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8006c58:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c62:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8006c66:	2203      	movs	r2, #3
 8006c68:	605a      	str	r2, [r3, #4]
 8006c6a:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f013 fd69 	bl	801a746 <_ZNSaIcEC1Ev>
 8006c74:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8006c78:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006c7c:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8006c80:	f607 0014 	addw	r0, r7, #2068	; 0x814
 8006c84:	ca06      	ldmia	r2, {r1, r2}
 8006c86:	f002 f880 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006c8a:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8006c8e:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8006f5c <_ZN3jlb5GraphC1Ev+0x241c>
 8006c92:	2200      	movs	r2, #0
 8006c94:	214b      	movs	r1, #75	; 0x4b
 8006c96:	4620      	mov	r0, r4
 8006c98:	f7fd ff0d 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006c9c:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f002 f825 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ca6:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8006caa:	4618      	mov	r0, r3
 8006cac:	f013 fd4d 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('I', Direction::STRAIGHT, {'R', 'S', 'T'}, 2.0f * UNIT);
 8006cb0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cb4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006cb8:	214e      	movs	r1, #78	; 0x4e
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	f001 f966 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cc6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8006cca:	4aa5      	ldr	r2, [pc, #660]	; (8006f60 <_ZN3jlb5GraphC1Ev+0x2420>)
 8006ccc:	6812      	ldr	r2, [r2, #0]
 8006cce:	4611      	mov	r1, r2
 8006cd0:	8019      	strh	r1, [r3, #0]
 8006cd2:	3302      	adds	r3, #2
 8006cd4:	0c12      	lsrs	r2, r2, #16
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cdc:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8006ce0:	f607 0244 	addw	r2, r7, #2116	; 0x844
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cea:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8006cee:	2203      	movs	r2, #3
 8006cf0:	605a      	str	r2, [r3, #4]
 8006cf2:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f013 fd25 	bl	801a746 <_ZNSaIcEC1Ev>
 8006cfc:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8006d00:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006d04:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 8006d08:	f507 6003 	add.w	r0, r7, #2096	; 0x830
 8006d0c:	ca06      	ldmia	r2, {r1, r2}
 8006d0e:	f002 f83c 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006d12:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8006d16:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8006f64 <_ZN3jlb5GraphC1Ev+0x2424>
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	2149      	movs	r1, #73	; 0x49
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f7fd fec9 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006d24:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f001 ffe1 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006d2e:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8006d32:	4618      	mov	r0, r3
 8006d34:	f013 fd09 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('L', Direction::RIGHT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8006d38:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d3c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006d40:	214e      	movs	r1, #78	; 0x4e
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	f001 f922 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8006d48:	4604      	mov	r4, r0
 8006d4a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d4e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8006d52:	4a83      	ldr	r2, [pc, #524]	; (8006f60 <_ZN3jlb5GraphC1Ev+0x2420>)
 8006d54:	6812      	ldr	r2, [r2, #0]
 8006d56:	4611      	mov	r1, r2
 8006d58:	8019      	strh	r1, [r3, #0]
 8006d5a:	3302      	adds	r3, #2
 8006d5c:	0c12      	lsrs	r2, r2, #16
 8006d5e:	701a      	strb	r2, [r3, #0]
 8006d60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d64:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8006d68:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d72:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8006d76:	2203      	movs	r2, #3
 8006d78:	605a      	str	r2, [r3, #4]
 8006d7a:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f013 fce1 	bl	801a746 <_ZNSaIcEC1Ev>
 8006d84:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8006d88:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006d8c:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8006d90:	f607 004c 	addw	r0, r7, #2124	; 0x84c
 8006d94:	ca06      	ldmia	r2, {r1, r2}
 8006d96:	f001 fff8 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006d9a:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8006d9e:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8006f5c <_ZN3jlb5GraphC1Ev+0x241c>
 8006da2:	2201      	movs	r2, #1
 8006da4:	214c      	movs	r1, #76	; 0x4c
 8006da6:	4620      	mov	r0, r4
 8006da8:	f7fd fe85 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006dac:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8006db0:	4618      	mov	r0, r3
 8006db2:	f001 ff9d 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006db6:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f013 fcc5 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('T', Direction::LEFT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8006dc0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006dc4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006dc8:	214e      	movs	r1, #78	; 0x4e
 8006dca:	6818      	ldr	r0, [r3, #0]
 8006dcc:	f001 f8de 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006dd6:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8006dda:	4a63      	ldr	r2, [pc, #396]	; (8006f68 <_ZN3jlb5GraphC1Ev+0x2428>)
 8006ddc:	6812      	ldr	r2, [r2, #0]
 8006dde:	4611      	mov	r1, r2
 8006de0:	8019      	strh	r1, [r3, #0]
 8006de2:	3302      	adds	r3, #2
 8006de4:	0c12      	lsrs	r2, r2, #16
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006dec:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8006df0:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006dfa:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8006dfe:	2203      	movs	r2, #3
 8006e00:	605a      	str	r2, [r3, #4]
 8006e02:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8006e06:	4618      	mov	r0, r3
 8006e08:	f013 fc9d 	bl	801a746 <_ZNSaIcEC1Ev>
 8006e0c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8006e10:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006e14:	f5a2 727d 	sub.w	r2, r2, #1012	; 0x3f4
 8006e18:	f607 0068 	addw	r0, r7, #2152	; 0x868
 8006e1c:	ca06      	ldmia	r2, {r1, r2}
 8006e1e:	f001 ffb4 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006e22:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8006e26:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8006f5c <_ZN3jlb5GraphC1Ev+0x241c>
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	2154      	movs	r1, #84	; 0x54
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f7fd fe41 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006e34:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f001 ff59 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006e3e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8006e42:	4618      	mov	r0, r3
 8006e44:	f013 fc81 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('S', Direction::STRAIGHT, {'K', 'I', 'L'}, UNIT);
 8006e48:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e4c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006e50:	214e      	movs	r1, #78	; 0x4e
 8006e52:	6818      	ldr	r0, [r3, #0]
 8006e54:	f001 f89a 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8006e58:	4604      	mov	r4, r0
 8006e5a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e5e:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8006e62:	4a41      	ldr	r2, [pc, #260]	; (8006f68 <_ZN3jlb5GraphC1Ev+0x2428>)
 8006e64:	6812      	ldr	r2, [r2, #0]
 8006e66:	4611      	mov	r1, r2
 8006e68:	8019      	strh	r1, [r3, #0]
 8006e6a:	3302      	adds	r3, #2
 8006e6c:	0c12      	lsrs	r2, r2, #16
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e74:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8006e78:	f607 0298 	addw	r2, r7, #2200	; 0x898
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e82:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8006e86:	2203      	movs	r2, #3
 8006e88:	605a      	str	r2, [r3, #4]
 8006e8a:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f013 fc59 	bl	801a746 <_ZNSaIcEC1Ev>
 8006e94:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8006e98:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006e9c:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8006ea0:	f607 0084 	addw	r0, r7, #2180	; 0x884
 8006ea4:	ca06      	ldmia	r2, {r1, r2}
 8006ea6:	f001 ff70 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006eaa:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8006eae:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8006f6c <_ZN3jlb5GraphC1Ev+0x242c>
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	2153      	movs	r1, #83	; 0x53
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f7fd fdfd 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006ebc:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f001 ff15 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ec6:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f013 fc3d 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('R', Direction::RIGHT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8006ed0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ed4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006ed8:	214e      	movs	r1, #78	; 0x4e
 8006eda:	6818      	ldr	r0, [r3, #0]
 8006edc:	f001 f856 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ee6:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8006eea:	4a1f      	ldr	r2, [pc, #124]	; (8006f68 <_ZN3jlb5GraphC1Ev+0x2428>)
 8006eec:	6812      	ldr	r2, [r2, #0]
 8006eee:	4611      	mov	r1, r2
 8006ef0:	8019      	strh	r1, [r3, #0]
 8006ef2:	3302      	adds	r3, #2
 8006ef4:	0c12      	lsrs	r2, r2, #16
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006efc:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8006f00:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f0a:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8006f0e:	2203      	movs	r2, #3
 8006f10:	605a      	str	r2, [r3, #4]
 8006f12:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8006f16:	4618      	mov	r0, r3
 8006f18:	f013 fc15 	bl	801a746 <_ZNSaIcEC1Ev>
 8006f1c:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8006f20:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006f24:	f5a2 726f 	sub.w	r2, r2, #956	; 0x3bc
 8006f28:	f507 600a 	add.w	r0, r7, #2208	; 0x8a0
 8006f2c:	ca06      	ldmia	r2, {r1, r2}
 8006f2e:	f001 ff2c 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006f32:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8006f36:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8006f5c <_ZN3jlb5GraphC1Ev+0x241c>
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	2152      	movs	r1, #82	; 0x52
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f7fd fdb9 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006f44:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f001 fed1 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006f4e:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8006f52:	4618      	mov	r0, r3
 8006f54:	e00c      	b.n	8006f70 <_ZN3jlb5GraphC1Ev+0x2430>
 8006f56:	bf00      	nop
 8006f58:	0801e598 	.word	0x0801e598
 8006f5c:	3f71463a 	.word	0x3f71463a
 8006f60:	0801e59c 	.word	0x0801e59c
 8006f64:	3f99999a 	.word	0x3f99999a
 8006f68:	0801e5a0 	.word	0x0801e5a0
 8006f6c:	3f19999a 	.word	0x3f19999a
 8006f70:	f013 fbeb 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('L', Direction::LEFT, {'T', 'U', 'W'}, QUARTER_CIRCLE);
 8006f74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f78:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006f7c:	214f      	movs	r1, #79	; 0x4f
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	f001 f804 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8006f84:	4604      	mov	r4, r0
 8006f86:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f8a:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8006f8e:	4aeb      	ldr	r2, [pc, #940]	; (800733c <_ZN3jlb5GraphC1Ev+0x27fc>)
 8006f90:	6812      	ldr	r2, [r2, #0]
 8006f92:	4611      	mov	r1, r2
 8006f94:	8019      	strh	r1, [r3, #0]
 8006f96:	3302      	adds	r3, #2
 8006f98:	0c12      	lsrs	r2, r2, #16
 8006f9a:	701a      	strb	r2, [r3, #0]
 8006f9c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fa0:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8006fa4:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fae:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8006fb2:	2203      	movs	r2, #3
 8006fb4:	605a      	str	r2, [r3, #4]
 8006fb6:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f013 fbc3 	bl	801a746 <_ZNSaIcEC1Ev>
 8006fc0:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8006fc4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006fc8:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8006fcc:	f607 00bc 	addw	r0, r7, #2236	; 0x8bc
 8006fd0:	ca06      	ldmia	r2, {r1, r2}
 8006fd2:	f001 feda 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006fd6:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8006fda:	ed9f 0adc 	vldr	s0, [pc, #880]	; 800734c <_ZN3jlb5GraphC1Ev+0x280c>
 8006fde:	2200      	movs	r2, #0
 8006fe0:	214c      	movs	r1, #76	; 0x4c
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f7fd fd67 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006fe8:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8006fec:	4618      	mov	r0, r3
 8006fee:	f001 fe7f 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ff2:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f013 fba7 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('U', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8006ffc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007000:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007004:	214f      	movs	r1, #79	; 0x4f
 8007006:	6818      	ldr	r0, [r3, #0]
 8007008:	f000 ffc0 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800700c:	4604      	mov	r4, r0
 800700e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007012:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8007016:	224c      	movs	r2, #76	; 0x4c
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800701e:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8007022:	f607 02ec 	addw	r2, r7, #2284	; 0x8ec
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800702c:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8007030:	2201      	movs	r2, #1
 8007032:	605a      	str	r2, [r3, #4]
 8007034:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8007038:	4618      	mov	r0, r3
 800703a:	f013 fb84 	bl	801a746 <_ZNSaIcEC1Ev>
 800703e:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8007042:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007046:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 800704a:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
 800704e:	ca06      	ldmia	r2, {r1, r2}
 8007050:	f001 fe9b 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007054:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8007058:	ed9f 0abc 	vldr	s0, [pc, #752]	; 800734c <_ZN3jlb5GraphC1Ev+0x280c>
 800705c:	2200      	movs	r2, #0
 800705e:	2155      	movs	r1, #85	; 0x55
 8007060:	4620      	mov	r0, r4
 8007062:	f7fd fd28 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007066:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 800706a:	4618      	mov	r0, r3
 800706c:	f001 fe40 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007070:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8007074:	4618      	mov	r0, r3
 8007076:	f013 fb68 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('W', Direction::STRAIGHT, {'L'}, UNIT + QUARTER_CIRCLE);
 800707a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800707e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007082:	214f      	movs	r1, #79	; 0x4f
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	f000 ff81 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800708a:	4604      	mov	r4, r0
 800708c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007090:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8007094:	224c      	movs	r2, #76	; 0x4c
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800709c:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80070a0:	f607 1208 	addw	r2, r7, #2312	; 0x908
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070aa:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80070ae:	2201      	movs	r2, #1
 80070b0:	605a      	str	r2, [r3, #4]
 80070b2:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80070b6:	4618      	mov	r0, r3
 80070b8:	f013 fb45 	bl	801a746 <_ZNSaIcEC1Ev>
 80070bc:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80070c0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80070c4:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 80070c8:	f607 00f4 	addw	r0, r7, #2292	; 0x8f4
 80070cc:	ca06      	ldmia	r2, {r1, r2}
 80070ce:	f001 fe5c 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80070d2:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 80070d6:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8007340 <_ZN3jlb5GraphC1Ev+0x2800>
 80070da:	2202      	movs	r2, #2
 80070dc:	2157      	movs	r1, #87	; 0x57
 80070de:	4620      	mov	r0, r4
 80070e0:	f7fd fce9 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80070e4:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 fe01 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80070ee:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80070f2:	4618      	mov	r0, r3
 80070f4:	f013 fb29 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('T', Direction::RIGHT, {'L'}, QUARTER_CIRCLE);
 80070f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070fc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007100:	214f      	movs	r1, #79	; 0x4f
 8007102:	6818      	ldr	r0, [r3, #0]
 8007104:	f000 ff42 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007108:	4604      	mov	r4, r0
 800710a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800710e:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8007112:	224c      	movs	r2, #76	; 0x4c
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800711a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800711e:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007128:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800712c:	2201      	movs	r2, #1
 800712e:	605a      	str	r2, [r3, #4]
 8007130:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007134:	4618      	mov	r0, r3
 8007136:	f013 fb06 	bl	801a746 <_ZNSaIcEC1Ev>
 800713a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800713e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007142:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 8007146:	f507 6011 	add.w	r0, r7, #2320	; 0x910
 800714a:	ca06      	ldmia	r2, {r1, r2}
 800714c:	f001 fe1d 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007150:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8007154:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800734c <_ZN3jlb5GraphC1Ev+0x280c>
 8007158:	2201      	movs	r2, #1
 800715a:	2154      	movs	r1, #84	; 0x54
 800715c:	4620      	mov	r0, r4
 800715e:	f7fd fcaa 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007162:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8007166:	4618      	mov	r0, r3
 8007168:	f001 fdc2 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 800716c:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007170:	4618      	mov	r0, r3
 8007172:	f013 faea 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('M', Direction::LEFT, {'P'}, QUARTER_CIRCLE);
 8007176:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800717a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800717e:	2150      	movs	r1, #80	; 0x50
 8007180:	6818      	ldr	r0, [r3, #0]
 8007182:	f000 ff03 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007186:	4604      	mov	r4, r0
 8007188:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800718c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8007190:	2250      	movs	r2, #80	; 0x50
 8007192:	701a      	strb	r2, [r3, #0]
 8007194:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007198:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800719c:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071a6:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80071aa:	2201      	movs	r2, #1
 80071ac:	605a      	str	r2, [r3, #4]
 80071ae:	f607 1344 	addw	r3, r7, #2372	; 0x944
 80071b2:	4618      	mov	r0, r3
 80071b4:	f013 fac7 	bl	801a746 <_ZNSaIcEC1Ev>
 80071b8:	f607 1344 	addw	r3, r7, #2372	; 0x944
 80071bc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80071c0:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 80071c4:	f607 102c 	addw	r0, r7, #2348	; 0x92c
 80071c8:	ca06      	ldmia	r2, {r1, r2}
 80071ca:	f001 fdde 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80071ce:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 80071d2:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 800734c <_ZN3jlb5GraphC1Ev+0x280c>
 80071d6:	2200      	movs	r2, #0
 80071d8:	214d      	movs	r1, #77	; 0x4d
 80071da:	4620      	mov	r0, r4
 80071dc:	f7fd fc6b 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80071e0:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 80071e4:	4618      	mov	r0, r3
 80071e6:	f001 fd83 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80071ea:	f607 1344 	addw	r3, r7, #2372	; 0x944
 80071ee:	4618      	mov	r0, r3
 80071f0:	f013 faab 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('Q', Direction::STRAIGHT, {'P'}, UNIT);
 80071f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071f8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80071fc:	2150      	movs	r1, #80	; 0x50
 80071fe:	6818      	ldr	r0, [r3, #0]
 8007200:	f000 fec4 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007204:	4604      	mov	r4, r0
 8007206:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800720a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800720e:	2250      	movs	r2, #80	; 0x50
 8007210:	701a      	strb	r2, [r3, #0]
 8007212:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007216:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800721a:	f607 125c 	addw	r2, r7, #2396	; 0x95c
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007224:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8007228:	2201      	movs	r2, #1
 800722a:	605a      	str	r2, [r3, #4]
 800722c:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8007230:	4618      	mov	r0, r3
 8007232:	f013 fa88 	bl	801a746 <_ZNSaIcEC1Ev>
 8007236:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800723a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800723e:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8007242:	f607 1048 	addw	r0, r7, #2376	; 0x948
 8007246:	ca06      	ldmia	r2, {r1, r2}
 8007248:	f001 fd9f 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800724c:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8007250:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8007348 <_ZN3jlb5GraphC1Ev+0x2808>
 8007254:	2202      	movs	r2, #2
 8007256:	2151      	movs	r1, #81	; 0x51
 8007258:	4620      	mov	r0, r4
 800725a:	f7fd fc2c 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800725e:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8007262:	4618      	mov	r0, r3
 8007264:	f001 fd44 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007268:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800726c:	4618      	mov	r0, r3
 800726e:	f013 fa6c 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('P', Direction::STRAIGHT, {'R'}, UNIT);
 8007272:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007276:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800727a:	2151      	movs	r1, #81	; 0x51
 800727c:	6818      	ldr	r0, [r3, #0]
 800727e:	f000 fe85 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007282:	4604      	mov	r4, r0
 8007284:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007288:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800728c:	2252      	movs	r2, #82	; 0x52
 800728e:	701a      	strb	r2, [r3, #0]
 8007290:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007294:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8007298:	f607 1278 	addw	r2, r7, #2424	; 0x978
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072a2:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80072a6:	2201      	movs	r2, #1
 80072a8:	605a      	str	r2, [r3, #4]
 80072aa:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 80072ae:	4618      	mov	r0, r3
 80072b0:	f013 fa49 	bl	801a746 <_ZNSaIcEC1Ev>
 80072b4:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 80072b8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80072bc:	f5a2 723e 	sub.w	r2, r2, #760	; 0x2f8
 80072c0:	f607 1064 	addw	r0, r7, #2404	; 0x964
 80072c4:	ca06      	ldmia	r2, {r1, r2}
 80072c6:	f001 fd60 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80072ca:	f607 1364 	addw	r3, r7, #2404	; 0x964
 80072ce:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8007348 <_ZN3jlb5GraphC1Ev+0x2808>
 80072d2:	2202      	movs	r2, #2
 80072d4:	2150      	movs	r1, #80	; 0x50
 80072d6:	4620      	mov	r0, r4
 80072d8:	f7fd fbed 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80072dc:	f607 1364 	addw	r3, r7, #2404	; 0x964
 80072e0:	4618      	mov	r0, r3
 80072e2:	f001 fd05 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80072e6:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 80072ea:	4618      	mov	r0, r3
 80072ec:	f013 fa2d 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('M', Direction::STRAIGHT, {'V', 'X'}, UNIT);
 80072f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072f4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80072f8:	2151      	movs	r1, #81	; 0x51
 80072fa:	6818      	ldr	r0, [r3, #0]
 80072fc:	f000 fe46 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007300:	4604      	mov	r4, r0
 8007302:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007306:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800730a:	4a0e      	ldr	r2, [pc, #56]	; (8007344 <_ZN3jlb5GraphC1Ev+0x2804>)
 800730c:	8812      	ldrh	r2, [r2, #0]
 800730e:	801a      	strh	r2, [r3, #0]
 8007310:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007314:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8007318:	f607 1294 	addw	r2, r7, #2452	; 0x994
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007322:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8007326:	2202      	movs	r2, #2
 8007328:	605a      	str	r2, [r3, #4]
 800732a:	f607 1398 	addw	r3, r7, #2456	; 0x998
 800732e:	4618      	mov	r0, r3
 8007330:	f013 fa09 	bl	801a746 <_ZNSaIcEC1Ev>
 8007334:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8007338:	e00c      	b.n	8007354 <_ZN3jlb5GraphC1Ev+0x2814>
 800733a:	bf00      	nop
 800733c:	0801e5a4 	.word	0x0801e5a4
 8007340:	3fc56fea 	.word	0x3fc56fea
 8007344:	0801e5a8 	.word	0x0801e5a8
 8007348:	3f19999a 	.word	0x3f19999a
 800734c:	3f71463a 	.word	0x3f71463a
 8007350:	401c518f 	.word	0x401c518f
 8007354:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007358:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 800735c:	f507 6018 	add.w	r0, r7, #2432	; 0x980
 8007360:	ca06      	ldmia	r2, {r1, r2}
 8007362:	f001 fd12 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007366:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 800736a:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 8007348 <_ZN3jlb5GraphC1Ev+0x2808>
 800736e:	2202      	movs	r2, #2
 8007370:	214d      	movs	r1, #77	; 0x4d
 8007372:	4620      	mov	r0, r4
 8007374:	f7fd fb9f 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007378:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 800737c:	4618      	mov	r0, r3
 800737e:	f001 fcb7 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007382:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8007386:	4618      	mov	r0, r3
 8007388:	f013 f9df 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('R', Direction::STRAIGHT, {'P'}, UNIT);
 800738c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007390:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007394:	2151      	movs	r1, #81	; 0x51
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	f000 fdf8 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800739c:	4604      	mov	r4, r0
 800739e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073a2:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 80073a6:	2250      	movs	r2, #80	; 0x50
 80073a8:	701a      	strb	r2, [r3, #0]
 80073aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073ae:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80073b2:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073bc:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80073c0:	2201      	movs	r2, #1
 80073c2:	605a      	str	r2, [r3, #4]
 80073c4:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 80073c8:	4618      	mov	r0, r3
 80073ca:	f013 f9bc 	bl	801a746 <_ZNSaIcEC1Ev>
 80073ce:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 80073d2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80073d6:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 80073da:	f607 109c 	addw	r0, r7, #2460	; 0x99c
 80073de:	ca06      	ldmia	r2, {r1, r2}
 80073e0:	f001 fcd3 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80073e4:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80073e8:	ed1f 0a29 	vldr	s0, [pc, #-164]	; 8007348 <_ZN3jlb5GraphC1Ev+0x2808>
 80073ec:	2202      	movs	r2, #2
 80073ee:	2152      	movs	r1, #82	; 0x52
 80073f0:	4620      	mov	r0, r4
 80073f2:	f7fd fb60 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80073f6:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80073fa:	4618      	mov	r0, r3
 80073fc:	f001 fc78 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007400:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8007404:	4618      	mov	r0, r3
 8007406:	f013 f9a0 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('V', Direction::LEFT, {'M'}, QUARTER_CIRCLE);
 800740a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800740e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007412:	2151      	movs	r1, #81	; 0x51
 8007414:	6818      	ldr	r0, [r3, #0]
 8007416:	f000 fdb9 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800741a:	4604      	mov	r4, r0
 800741c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007420:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8007424:	224d      	movs	r2, #77	; 0x4d
 8007426:	701a      	strb	r2, [r3, #0]
 8007428:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800742c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8007430:	f607 12cc 	addw	r2, r7, #2508	; 0x9cc
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800743a:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800743e:	2201      	movs	r2, #1
 8007440:	605a      	str	r2, [r3, #4]
 8007442:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8007446:	4618      	mov	r0, r3
 8007448:	f013 f97d 	bl	801a746 <_ZNSaIcEC1Ev>
 800744c:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8007450:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007454:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8007458:	f607 10b8 	addw	r0, r7, #2488	; 0x9b8
 800745c:	ca06      	ldmia	r2, {r1, r2}
 800745e:	f001 fc94 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007462:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8007466:	ed1f 0a47 	vldr	s0, [pc, #-284]	; 800734c <_ZN3jlb5GraphC1Ev+0x280c>
 800746a:	2200      	movs	r2, #0
 800746c:	2156      	movs	r1, #86	; 0x56
 800746e:	4620      	mov	r0, r4
 8007470:	f7fd fb21 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007474:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8007478:	4618      	mov	r0, r3
 800747a:	f001 fc39 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 800747e:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8007482:	4618      	mov	r0, r3
 8007484:	f013 f961 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('X', Direction::STRAIGHT, {'M'}, 2.5f * UNIT + QUARTER_CIRCLE);
 8007488:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800748c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007490:	2151      	movs	r1, #81	; 0x51
 8007492:	6818      	ldr	r0, [r3, #0]
 8007494:	f000 fd7a 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007498:	4604      	mov	r4, r0
 800749a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800749e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80074a2:	224d      	movs	r2, #77	; 0x4d
 80074a4:	701a      	strb	r2, [r3, #0]
 80074a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074aa:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80074ae:	f607 12e8 	addw	r2, r7, #2536	; 0x9e8
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074b8:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80074bc:	2201      	movs	r2, #1
 80074be:	605a      	str	r2, [r3, #4]
 80074c0:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 80074c4:	4618      	mov	r0, r3
 80074c6:	f013 f93e 	bl	801a746 <_ZNSaIcEC1Ev>
 80074ca:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 80074ce:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80074d2:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 80074d6:	f607 10d4 	addw	r0, r7, #2516	; 0x9d4
 80074da:	ca06      	ldmia	r2, {r1, r2}
 80074dc:	f001 fc55 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80074e0:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 80074e4:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 8007350 <_ZN3jlb5GraphC1Ev+0x2810>
 80074e8:	2202      	movs	r2, #2
 80074ea:	2158      	movs	r1, #88	; 0x58
 80074ec:	4620      	mov	r0, r4
 80074ee:	f7fd fae2 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80074f2:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 80074f6:	4618      	mov	r0, r3
 80074f8:	f001 fbfa 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80074fc:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8007500:	4618      	mov	r0, r3
 8007502:	f013 f922 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('Q', Direction::STRAIGHT, {'N', 'S'}, UNIT);
 8007506:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800750a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800750e:	2152      	movs	r1, #82	; 0x52
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	f000 fd3b 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007516:	4604      	mov	r4, r0
 8007518:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800751c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007520:	4ae6      	ldr	r2, [pc, #920]	; (80078bc <_ZN3jlb5GraphC1Ev+0x2d7c>)
 8007522:	8812      	ldrh	r2, [r2, #0]
 8007524:	801a      	strh	r2, [r3, #0]
 8007526:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800752a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800752e:	f607 2204 	addw	r2, r7, #2564	; 0xa04
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007538:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800753c:	2202      	movs	r2, #2
 800753e:	605a      	str	r2, [r3, #4]
 8007540:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8007544:	4618      	mov	r0, r3
 8007546:	f013 f8fe 	bl	801a746 <_ZNSaIcEC1Ev>
 800754a:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 800754e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007552:	f5a2 721b 	sub.w	r2, r2, #620	; 0x26c
 8007556:	f507 601f 	add.w	r0, r7, #2544	; 0x9f0
 800755a:	ca06      	ldmia	r2, {r1, r2}
 800755c:	f001 fc15 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007560:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8007564:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 80078c0 <_ZN3jlb5GraphC1Ev+0x2d80>
 8007568:	2202      	movs	r2, #2
 800756a:	2151      	movs	r1, #81	; 0x51
 800756c:	4620      	mov	r0, r4
 800756e:	f7fd faa2 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007572:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8007576:	4618      	mov	r0, r3
 8007578:	f001 fbba 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 800757c:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8007580:	4618      	mov	r0, r3
 8007582:	f013 f8e2 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('M', Direction::RIGHT, {'N', 'S'}, QUARTER_CIRCLE);
 8007586:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800758a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800758e:	2152      	movs	r1, #82	; 0x52
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	f000 fcfb 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007596:	4604      	mov	r4, r0
 8007598:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800759c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80075a0:	4ac6      	ldr	r2, [pc, #792]	; (80078bc <_ZN3jlb5GraphC1Ev+0x2d7c>)
 80075a2:	8812      	ldrh	r2, [r2, #0]
 80075a4:	801a      	strh	r2, [r3, #0]
 80075a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075aa:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80075ae:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075b8:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80075bc:	2202      	movs	r2, #2
 80075be:	605a      	str	r2, [r3, #4]
 80075c0:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 80075c4:	4618      	mov	r0, r3
 80075c6:	f013 f8be 	bl	801a746 <_ZNSaIcEC1Ev>
 80075ca:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 80075ce:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80075d2:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 80075d6:	f607 200c 	addw	r0, r7, #2572	; 0xa0c
 80075da:	ca06      	ldmia	r2, {r1, r2}
 80075dc:	f001 fbd5 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80075e0:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 80075e4:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 80078cc <_ZN3jlb5GraphC1Ev+0x2d8c>
 80075e8:	2201      	movs	r2, #1
 80075ea:	214d      	movs	r1, #77	; 0x4d
 80075ec:	4620      	mov	r0, r4
 80075ee:	f7fd fa62 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80075f2:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 80075f6:	4618      	mov	r0, r3
 80075f8:	f001 fb7a 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80075fc:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8007600:	4618      	mov	r0, r3
 8007602:	f013 f8a2 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('N', Direction::LEFT, {'M', 'Q'}, QUARTER_CIRCLE);
 8007606:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800760a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800760e:	2152      	movs	r1, #82	; 0x52
 8007610:	6818      	ldr	r0, [r3, #0]
 8007612:	f000 fcbb 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007616:	4604      	mov	r4, r0
 8007618:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800761c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8007620:	4aa8      	ldr	r2, [pc, #672]	; (80078c4 <_ZN3jlb5GraphC1Ev+0x2d84>)
 8007622:	8812      	ldrh	r2, [r2, #0]
 8007624:	801a      	strh	r2, [r3, #0]
 8007626:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800762a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800762e:	f607 223c 	addw	r2, r7, #2620	; 0xa3c
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007638:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800763c:	2202      	movs	r2, #2
 800763e:	605a      	str	r2, [r3, #4]
 8007640:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8007644:	4618      	mov	r0, r3
 8007646:	f013 f87e 	bl	801a746 <_ZNSaIcEC1Ev>
 800764a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800764e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007652:	f5a2 720d 	sub.w	r2, r2, #564	; 0x234
 8007656:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 800765a:	ca06      	ldmia	r2, {r1, r2}
 800765c:	f001 fb95 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007660:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8007664:	ed9f 0a99 	vldr	s0, [pc, #612]	; 80078cc <_ZN3jlb5GraphC1Ev+0x2d8c>
 8007668:	2200      	movs	r2, #0
 800766a:	214e      	movs	r1, #78	; 0x4e
 800766c:	4620      	mov	r0, r4
 800766e:	f7fd fa22 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007672:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8007676:	4618      	mov	r0, r3
 8007678:	f001 fb3a 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 800767c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8007680:	4618      	mov	r0, r3
 8007682:	f013 f862 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('S', Direction::STRAIGHT, {'M', 'Q'}, UNIT);
 8007686:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800768a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800768e:	2152      	movs	r1, #82	; 0x52
 8007690:	6818      	ldr	r0, [r3, #0]
 8007692:	f000 fc7b 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007696:	4604      	mov	r4, r0
 8007698:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800769c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80076a0:	4a88      	ldr	r2, [pc, #544]	; (80078c4 <_ZN3jlb5GraphC1Ev+0x2d84>)
 80076a2:	8812      	ldrh	r2, [r2, #0]
 80076a4:	801a      	strh	r2, [r3, #0]
 80076a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076aa:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80076ae:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076b8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80076bc:	2202      	movs	r2, #2
 80076be:	605a      	str	r2, [r3, #4]
 80076c0:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 80076c4:	4618      	mov	r0, r3
 80076c6:	f013 f83e 	bl	801a746 <_ZNSaIcEC1Ev>
 80076ca:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 80076ce:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80076d2:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80076d6:	f607 2044 	addw	r0, r7, #2628	; 0xa44
 80076da:	ca06      	ldmia	r2, {r1, r2}
 80076dc:	f001 fb55 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80076e0:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 80076e4:	ed9f 0a76 	vldr	s0, [pc, #472]	; 80078c0 <_ZN3jlb5GraphC1Ev+0x2d80>
 80076e8:	2202      	movs	r2, #2
 80076ea:	2153      	movs	r1, #83	; 0x53
 80076ec:	4620      	mov	r0, r4
 80076ee:	f7fd f9e2 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80076f2:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 80076f6:	4618      	mov	r0, r3
 80076f8:	f001 fafa 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80076fc:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8007700:	4618      	mov	r0, r3
 8007702:	f013 f822 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('R', Direction::STRAIGHT, {'T'}, UNIT);
 8007706:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800770a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800770e:	2153      	movs	r1, #83	; 0x53
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	f000 fc3b 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007716:	4604      	mov	r4, r0
 8007718:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800771c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8007720:	2254      	movs	r2, #84	; 0x54
 8007722:	701a      	strb	r2, [r3, #0]
 8007724:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007728:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800772c:	f607 2274 	addw	r2, r7, #2676	; 0xa74
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007736:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800773a:	2201      	movs	r2, #1
 800773c:	605a      	str	r2, [r3, #4]
 800773e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8007742:	4618      	mov	r0, r3
 8007744:	f012 ffff 	bl	801a746 <_ZNSaIcEC1Ev>
 8007748:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800774c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007750:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 8007754:	f507 6026 	add.w	r0, r7, #2656	; 0xa60
 8007758:	ca06      	ldmia	r2, {r1, r2}
 800775a:	f001 fb16 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800775e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007762:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80078c0 <_ZN3jlb5GraphC1Ev+0x2d80>
 8007766:	2202      	movs	r2, #2
 8007768:	2152      	movs	r1, #82	; 0x52
 800776a:	4620      	mov	r0, r4
 800776c:	f7fd f9a3 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007770:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007774:	4618      	mov	r0, r3
 8007776:	f001 fabb 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 800777a:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800777e:	4618      	mov	r0, r3
 8007780:	f012 ffe3 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('N', Direction::STRAIGHT, {'V', 'W'}, UNIT);
 8007784:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007788:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800778c:	2153      	movs	r1, #83	; 0x53
 800778e:	6818      	ldr	r0, [r3, #0]
 8007790:	f000 fbfc 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007794:	4604      	mov	r4, r0
 8007796:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800779a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800779e:	4a4a      	ldr	r2, [pc, #296]	; (80078c8 <_ZN3jlb5GraphC1Ev+0x2d88>)
 80077a0:	8812      	ldrh	r2, [r2, #0]
 80077a2:	801a      	strh	r2, [r3, #0]
 80077a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077a8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80077ac:	f507 6229 	add.w	r2, r7, #2704	; 0xa90
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077b6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80077ba:	2202      	movs	r2, #2
 80077bc:	605a      	str	r2, [r3, #4]
 80077be:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 80077c2:	4618      	mov	r0, r3
 80077c4:	f012 ffbf 	bl	801a746 <_ZNSaIcEC1Ev>
 80077c8:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 80077cc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80077d0:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 80077d4:	f607 207c 	addw	r0, r7, #2684	; 0xa7c
 80077d8:	ca06      	ldmia	r2, {r1, r2}
 80077da:	f001 fad6 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80077de:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 80077e2:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80078c0 <_ZN3jlb5GraphC1Ev+0x2d80>
 80077e6:	2202      	movs	r2, #2
 80077e8:	214e      	movs	r1, #78	; 0x4e
 80077ea:	4620      	mov	r0, r4
 80077ec:	f7fd f963 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80077f0:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 80077f4:	4618      	mov	r0, r3
 80077f6:	f001 fa7b 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 80077fa:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 80077fe:	4618      	mov	r0, r3
 8007800:	f012 ffa3 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('T', Direction::STRAIGHT, {'R'}, UNIT);
 8007804:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007808:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800780c:	2153      	movs	r1, #83	; 0x53
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	f000 fbbc 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007814:	4604      	mov	r4, r0
 8007816:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800781a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800781e:	2252      	movs	r2, #82	; 0x52
 8007820:	701a      	strb	r2, [r3, #0]
 8007822:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007826:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800782a:	f607 22ac 	addw	r2, r7, #2732	; 0xaac
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007834:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007838:	2201      	movs	r2, #1
 800783a:	605a      	str	r2, [r3, #4]
 800783c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8007840:	4618      	mov	r0, r3
 8007842:	f012 ff80 	bl	801a746 <_ZNSaIcEC1Ev>
 8007846:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800784a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800784e:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8007852:	f607 2098 	addw	r0, r7, #2712	; 0xa98
 8007856:	ca06      	ldmia	r2, {r1, r2}
 8007858:	f001 fa97 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800785c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8007860:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80078c0 <_ZN3jlb5GraphC1Ev+0x2d80>
 8007864:	2202      	movs	r2, #2
 8007866:	2154      	movs	r1, #84	; 0x54
 8007868:	4620      	mov	r0, r4
 800786a:	f7fd f924 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800786e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8007872:	4618      	mov	r0, r3
 8007874:	f001 fa3c 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007878:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800787c:	4618      	mov	r0, r3
 800787e:	f012 ff64 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('W', Direction::LEFT, {'N'}, QUARTER_CIRCLE);
 8007882:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007886:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800788a:	2153      	movs	r1, #83	; 0x53
 800788c:	6818      	ldr	r0, [r3, #0]
 800788e:	f000 fb7d 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007892:	4604      	mov	r4, r0
 8007894:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007898:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800789c:	224e      	movs	r2, #78	; 0x4e
 800789e:	701a      	strb	r2, [r3, #0]
 80078a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078a4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80078a8:	f607 22c8 	addw	r2, r7, #2760	; 0xac8
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078b2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80078b6:	2201      	movs	r2, #1
 80078b8:	605a      	str	r2, [r3, #4]
 80078ba:	e009      	b.n	80078d0 <_ZN3jlb5GraphC1Ev+0x2d90>
 80078bc:	0801e5ac 	.word	0x0801e5ac
 80078c0:	3f19999a 	.word	0x3f19999a
 80078c4:	0801e5b0 	.word	0x0801e5b0
 80078c8:	0801e5b4 	.word	0x0801e5b4
 80078cc:	3f71463a 	.word	0x3f71463a
 80078d0:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 80078d4:	4618      	mov	r0, r3
 80078d6:	f012 ff36 	bl	801a746 <_ZNSaIcEC1Ev>
 80078da:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 80078de:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80078e2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80078e6:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 80078ea:	ca06      	ldmia	r2, {r1, r2}
 80078ec:	f001 fa4d 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80078f0:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 80078f4:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 80078cc <_ZN3jlb5GraphC1Ev+0x2d8c>
 80078f8:	2200      	movs	r2, #0
 80078fa:	2157      	movs	r1, #87	; 0x57
 80078fc:	4620      	mov	r0, r4
 80078fe:	f7fd f8da 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007902:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 8007906:	4618      	mov	r0, r3
 8007908:	f001 f9f2 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 800790c:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8007910:	4618      	mov	r0, r3
 8007912:	f012 ff1a 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('V', Direction::RIGHT, {'N'}, QUARTER_CIRCLE);
 8007916:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800791a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800791e:	2153      	movs	r1, #83	; 0x53
 8007920:	6818      	ldr	r0, [r3, #0]
 8007922:	f000 fb33 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007926:	4604      	mov	r4, r0
 8007928:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800792c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007930:	224e      	movs	r2, #78	; 0x4e
 8007932:	701a      	strb	r2, [r3, #0]
 8007934:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007938:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800793c:	f607 22e4 	addw	r2, r7, #2788	; 0xae4
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007946:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800794a:	2201      	movs	r2, #1
 800794c:	605a      	str	r2, [r3, #4]
 800794e:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8007952:	4618      	mov	r0, r3
 8007954:	f012 fef7 	bl	801a746 <_ZNSaIcEC1Ev>
 8007958:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800795c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007960:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 8007964:	f507 602d 	add.w	r0, r7, #2768	; 0xad0
 8007968:	ca06      	ldmia	r2, {r1, r2}
 800796a:	f001 fa0e 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800796e:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8007972:	ed1f 0a2a 	vldr	s0, [pc, #-168]	; 80078cc <_ZN3jlb5GraphC1Ev+0x2d8c>
 8007976:	2201      	movs	r2, #1
 8007978:	2156      	movs	r1, #86	; 0x56
 800797a:	4620      	mov	r0, r4
 800797c:	f7fd f89b 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007980:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8007984:	4618      	mov	r0, r3
 8007986:	f001 f9b3 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 800798a:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800798e:	4618      	mov	r0, r3
 8007990:	f012 fedb 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('S', Direction::STRAIGHT, {'O', 'U'}, UNIT);
 8007994:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007998:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800799c:	2154      	movs	r1, #84	; 0x54
 800799e:	6818      	ldr	r0, [r3, #0]
 80079a0:	f000 faf4 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80079a4:	4604      	mov	r4, r0
 80079a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80079ae:	4ae9      	ldr	r2, [pc, #932]	; (8007d54 <_ZN3jlb5GraphC1Ev+0x3214>)
 80079b0:	8812      	ldrh	r2, [r2, #0]
 80079b2:	801a      	strh	r2, [r3, #0]
 80079b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079b8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80079bc:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80079ca:	2202      	movs	r2, #2
 80079cc:	605a      	str	r2, [r3, #4]
 80079ce:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 80079d2:	4618      	mov	r0, r3
 80079d4:	f012 feb7 	bl	801a746 <_ZNSaIcEC1Ev>
 80079d8:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 80079dc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80079e0:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 80079e4:	f607 20ec 	addw	r0, r7, #2796	; 0xaec
 80079e8:	ca06      	ldmia	r2, {r1, r2}
 80079ea:	f001 f9ce 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80079ee:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 80079f2:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8007d58 <_ZN3jlb5GraphC1Ev+0x3218>
 80079f6:	2202      	movs	r2, #2
 80079f8:	2153      	movs	r1, #83	; 0x53
 80079fa:	4620      	mov	r0, r4
 80079fc:	f7fd f85b 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007a00:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 8007a04:	4618      	mov	r0, r3
 8007a06:	f001 f973 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007a0a:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f012 fe9b 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('N', Direction::RIGHT, {'O', 'U'}, QUARTER_CIRCLE);
 8007a14:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a18:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007a1c:	2154      	movs	r1, #84	; 0x54
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	f000 fab4 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007a24:	4604      	mov	r4, r0
 8007a26:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a2a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007a2e:	4ac9      	ldr	r2, [pc, #804]	; (8007d54 <_ZN3jlb5GraphC1Ev+0x3214>)
 8007a30:	8812      	ldrh	r2, [r2, #0]
 8007a32:	801a      	strh	r2, [r3, #0]
 8007a34:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a38:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007a3c:	f607 321c 	addw	r2, r7, #2844	; 0xb1c
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a46:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	605a      	str	r2, [r3, #4]
 8007a4e:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007a52:	4618      	mov	r0, r3
 8007a54:	f012 fe77 	bl	801a746 <_ZNSaIcEC1Ev>
 8007a58:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007a5c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007a60:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8007a64:	f607 3008 	addw	r0, r7, #2824	; 0xb08
 8007a68:	ca06      	ldmia	r2, {r1, r2}
 8007a6a:	f001 f98e 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007a6e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8007a72:	ed9f 0abd 	vldr	s0, [pc, #756]	; 8007d68 <_ZN3jlb5GraphC1Ev+0x3228>
 8007a76:	2201      	movs	r2, #1
 8007a78:	214e      	movs	r1, #78	; 0x4e
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f7fd f81b 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007a80:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8007a84:	4618      	mov	r0, r3
 8007a86:	f001 f933 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007a8a:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f012 fe5b 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('O', Direction::LEFT, {'N', 'S'}, QUARTER_CIRCLE);
 8007a94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a98:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007a9c:	2154      	movs	r1, #84	; 0x54
 8007a9e:	6818      	ldr	r0, [r3, #0]
 8007aa0:	f000 fa74 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aae:	4aab      	ldr	r2, [pc, #684]	; (8007d5c <_ZN3jlb5GraphC1Ev+0x321c>)
 8007ab0:	8812      	ldrh	r2, [r2, #0]
 8007ab2:	801a      	strh	r2, [r3, #0]
 8007ab4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ab8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007abc:	f607 3238 	addw	r2, r7, #2872	; 0xb38
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ac6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007aca:	2202      	movs	r2, #2
 8007acc:	605a      	str	r2, [r3, #4]
 8007ace:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f012 fe37 	bl	801a746 <_ZNSaIcEC1Ev>
 8007ad8:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8007adc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007ae0:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8007ae4:	f607 3024 	addw	r0, r7, #2852	; 0xb24
 8007ae8:	ca06      	ldmia	r2, {r1, r2}
 8007aea:	f001 f94e 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007aee:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 8007af2:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8007d68 <_ZN3jlb5GraphC1Ev+0x3228>
 8007af6:	2200      	movs	r2, #0
 8007af8:	214f      	movs	r1, #79	; 0x4f
 8007afa:	4620      	mov	r0, r4
 8007afc:	f7fc ffdb 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007b00:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 8007b04:	4618      	mov	r0, r3
 8007b06:	f001 f8f3 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007b0a:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f012 fe1b 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('U', Direction::STRAIGHT, {'N', 'S'}, 2.0f * UNIT);
 8007b14:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b18:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007b1c:	2154      	movs	r1, #84	; 0x54
 8007b1e:	6818      	ldr	r0, [r3, #0]
 8007b20:	f000 fa34 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007b24:	4604      	mov	r4, r0
 8007b26:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007b2e:	4a8b      	ldr	r2, [pc, #556]	; (8007d5c <_ZN3jlb5GraphC1Ev+0x321c>)
 8007b30:	8812      	ldrh	r2, [r2, #0]
 8007b32:	801a      	strh	r2, [r3, #0]
 8007b34:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b38:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007b3c:	f607 3254 	addw	r2, r7, #2900	; 0xb54
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	605a      	str	r2, [r3, #4]
 8007b4e:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8007b52:	4618      	mov	r0, r3
 8007b54:	f012 fdf7 	bl	801a746 <_ZNSaIcEC1Ev>
 8007b58:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8007b5c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007b60:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8007b64:	f507 6034 	add.w	r0, r7, #2880	; 0xb40
 8007b68:	ca06      	ldmia	r2, {r1, r2}
 8007b6a:	f001 f90e 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007b6e:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8007b72:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8007d64 <_ZN3jlb5GraphC1Ev+0x3224>
 8007b76:	2202      	movs	r2, #2
 8007b78:	2155      	movs	r1, #85	; 0x55
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7fc ff9b 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007b80:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8007b84:	4618      	mov	r0, r3
 8007b86:	f001 f8b3 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007b8a:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f012 fddb 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('T', Direction::STRAIGHT, {'U'}, 2.0f * UNIT);
 8007b94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b98:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007b9c:	2155      	movs	r1, #85	; 0x55
 8007b9e:	6818      	ldr	r0, [r3, #0]
 8007ba0:	f000 f9f4 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	2355      	movs	r3, #85	; 0x55
 8007ba8:	f887 3b70 	strb.w	r3, [r7, #2928]	; 0xb70
 8007bac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007bb0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007bb4:	f507 6237 	add.w	r2, r7, #2928	; 0xb70
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007bbe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	605a      	str	r2, [r3, #4]
 8007bc6:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f012 fdbb 	bl	801a746 <_ZNSaIcEC1Ev>
 8007bd0:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8007bd4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007bd8:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007bdc:	f607 305c 	addw	r0, r7, #2908	; 0xb5c
 8007be0:	ca06      	ldmia	r2, {r1, r2}
 8007be2:	f001 f8d2 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007be6:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8007bea:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8007d64 <_ZN3jlb5GraphC1Ev+0x3224>
 8007bee:	2202      	movs	r2, #2
 8007bf0:	2154      	movs	r1, #84	; 0x54
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f7fc ff5f 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007bf8:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f001 f877 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007c02:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8007c06:	4618      	mov	r0, r3
 8007c08:	f012 fd9f 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('O', Direction::RIGHT, {'U'}, QUARTER_CIRCLE);
 8007c0c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c10:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007c14:	2155      	movs	r1, #85	; 0x55
 8007c16:	6818      	ldr	r0, [r3, #0]
 8007c18:	f000 f9b8 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	2355      	movs	r3, #85	; 0x55
 8007c20:	f887 3b8c 	strb.w	r3, [r7, #2956]	; 0xb8c
 8007c24:	f607 338c 	addw	r3, r7, #2956	; 0xb8c
 8007c28:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f8c7 3b88 	str.w	r3, [r7, #2952]	; 0xb88
 8007c32:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007c36:	4618      	mov	r0, r3
 8007c38:	f012 fd85 	bl	801a746 <_ZNSaIcEC1Ev>
 8007c3c:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007c40:	f607 3078 	addw	r0, r7, #2936	; 0xb78
 8007c44:	f607 3284 	addw	r2, r7, #2948	; 0xb84
 8007c48:	ca06      	ldmia	r2, {r1, r2}
 8007c4a:	f001 f89e 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007c4e:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8007c52:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8007d68 <_ZN3jlb5GraphC1Ev+0x3228>
 8007c56:	2201      	movs	r2, #1
 8007c58:	214f      	movs	r1, #79	; 0x4f
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f7fc ff2b 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007c60:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8007c64:	4618      	mov	r0, r3
 8007c66:	f001 f843 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007c6a:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f012 fd6b 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('Q', Direction::RIGHT, {'S', 'W'}, QUARTER_CIRCLE);
 8007c74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c78:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007c7c:	2156      	movs	r1, #86	; 0x56
 8007c7e:	6818      	ldr	r0, [r3, #0]
 8007c80:	f000 f984 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007c84:	4604      	mov	r4, r0
 8007c86:	4b36      	ldr	r3, [pc, #216]	; (8007d60 <_ZN3jlb5GraphC1Ev+0x3220>)
 8007c88:	881b      	ldrh	r3, [r3, #0]
 8007c8a:	f8a7 3ba8 	strh.w	r3, [r7, #2984]	; 0xba8
 8007c8e:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 8007c92:	f8c7 3ba0 	str.w	r3, [r7, #2976]	; 0xba0
 8007c96:	2302      	movs	r3, #2
 8007c98:	f8c7 3ba4 	str.w	r3, [r7, #2980]	; 0xba4
 8007c9c:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f012 fd50 	bl	801a746 <_ZNSaIcEC1Ev>
 8007ca6:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8007caa:	f607 3094 	addw	r0, r7, #2964	; 0xb94
 8007cae:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8007cb2:	ca06      	ldmia	r2, {r1, r2}
 8007cb4:	f001 f869 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007cb8:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8007cbc:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8007d68 <_ZN3jlb5GraphC1Ev+0x3228>
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	2151      	movs	r1, #81	; 0x51
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f7fc fef6 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007cca:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f001 f80e 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007cd4:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f012 fd36 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('S', Direction::LEFT, {'Q'}, QUARTER_CIRCLE);
 8007cde:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ce2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007ce6:	2156      	movs	r1, #86	; 0x56
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	f000 f94f 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007cee:	4604      	mov	r4, r0
 8007cf0:	2351      	movs	r3, #81	; 0x51
 8007cf2:	f887 3bc4 	strb.w	r3, [r7, #3012]	; 0xbc4
 8007cf6:	f607 33c4 	addw	r3, r7, #3012	; 0xbc4
 8007cfa:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
 8007cfe:	2301      	movs	r3, #1
 8007d00:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0
 8007d04:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f012 fd1c 	bl	801a746 <_ZNSaIcEC1Ev>
 8007d0e:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8007d12:	f507 603b 	add.w	r0, r7, #2992	; 0xbb0
 8007d16:	f607 32bc 	addw	r2, r7, #3004	; 0xbbc
 8007d1a:	ca06      	ldmia	r2, {r1, r2}
 8007d1c:	f001 f835 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007d20:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8007d24:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007d68 <_ZN3jlb5GraphC1Ev+0x3228>
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2153      	movs	r1, #83	; 0x53
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f7fc fec2 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007d32:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 ffda 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007d3c:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8007d40:	4618      	mov	r0, r3
 8007d42:	f012 fd02 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('W', Direction::STRAIGHT, {'Q'}, 2.0f * UNIT);
 8007d46:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d4a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007d4e:	2156      	movs	r1, #86	; 0x56
 8007d50:	6818      	ldr	r0, [r3, #0]
 8007d52:	e00b      	b.n	8007d6c <_ZN3jlb5GraphC1Ev+0x322c>
 8007d54:	0801e5b8 	.word	0x0801e5b8
 8007d58:	3f19999a 	.word	0x3f19999a
 8007d5c:	0801e5ac 	.word	0x0801e5ac
 8007d60:	0801e5bc 	.word	0x0801e5bc
 8007d64:	3f99999a 	.word	0x3f99999a
 8007d68:	3f71463a 	.word	0x3f71463a
 8007d6c:	f000 f90e 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007d70:	4604      	mov	r4, r0
 8007d72:	2351      	movs	r3, #81	; 0x51
 8007d74:	f887 3be0 	strb.w	r3, [r7, #3040]	; 0xbe0
 8007d78:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8007d7c:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 8007d80:	2301      	movs	r3, #1
 8007d82:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 8007d86:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f012 fcdb 	bl	801a746 <_ZNSaIcEC1Ev>
 8007d90:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8007d94:	f607 30cc 	addw	r0, r7, #3020	; 0xbcc
 8007d98:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 8007d9c:	ca06      	ldmia	r2, {r1, r2}
 8007d9e:	f000 fff4 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007da2:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8007da6:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 8007d64 <_ZN3jlb5GraphC1Ev+0x3224>
 8007daa:	2202      	movs	r2, #2
 8007dac:	2157      	movs	r1, #87	; 0x57
 8007dae:	4620      	mov	r0, r4
 8007db0:	f7fc fe81 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007db4:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8007db8:	4618      	mov	r0, r3
 8007dba:	f000 ff99 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007dbe:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f012 fcc1 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('V', Direction::STRAIGHT, {'O'}, 2.0f * UNIT);
 8007dc8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007dcc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007dd0:	2157      	movs	r1, #87	; 0x57
 8007dd2:	6818      	ldr	r0, [r3, #0]
 8007dd4:	f000 f8da 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007dd8:	4604      	mov	r4, r0
 8007dda:	234f      	movs	r3, #79	; 0x4f
 8007ddc:	f887 3bfc 	strb.w	r3, [r7, #3068]	; 0xbfc
 8007de0:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 8007de4:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 8007de8:	2301      	movs	r3, #1
 8007dea:	f8c7 3bf8 	str.w	r3, [r7, #3064]	; 0xbf8
 8007dee:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8007df2:	4618      	mov	r0, r3
 8007df4:	f012 fca7 	bl	801a746 <_ZNSaIcEC1Ev>
 8007df8:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8007dfc:	f607 30e8 	addw	r0, r7, #3048	; 0xbe8
 8007e00:	f607 32f4 	addw	r2, r7, #3060	; 0xbf4
 8007e04:	ca06      	ldmia	r2, {r1, r2}
 8007e06:	f000 ffc0 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007e0a:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 8007e0e:	ed1f 0a2b 	vldr	s0, [pc, #-172]	; 8007d64 <_ZN3jlb5GraphC1Ev+0x3224>
 8007e12:	2202      	movs	r2, #2
 8007e14:	2156      	movs	r1, #86	; 0x56
 8007e16:	4620      	mov	r0, r4
 8007e18:	f7fc fe4d 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007e1c:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 ff65 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007e26:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f012 fc8d 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('S', Direction::RIGHT, {'O'}, QUARTER_CIRCLE);
 8007e30:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e34:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007e38:	2157      	movs	r1, #87	; 0x57
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	f000 f8a6 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007e40:	4604      	mov	r4, r0
 8007e42:	234f      	movs	r3, #79	; 0x4f
 8007e44:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
 8007e48:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 8007e4c:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
 8007e50:	2301      	movs	r3, #1
 8007e52:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 8007e56:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f012 fc73 	bl	801a746 <_ZNSaIcEC1Ev>
 8007e60:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 8007e64:	f607 4004 	addw	r0, r7, #3076	; 0xc04
 8007e68:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 8007e6c:	ca06      	ldmia	r2, {r1, r2}
 8007e6e:	f000 ff8c 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007e72:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8007e76:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 8007d68 <_ZN3jlb5GraphC1Ev+0x3228>
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	2153      	movs	r1, #83	; 0x53
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f7fc fe19 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007e84:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 ff31 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007e8e:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 8007e92:	4618      	mov	r0, r3
 8007e94:	f012 fc59 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('O', Direction::STRAIGHT, {'S', 'V'}, UNIT + QUARTER_CIRCLE);
 8007e98:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e9c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007ea0:	2157      	movs	r1, #87	; 0x57
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	f000 f872 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	4b35      	ldr	r3, [pc, #212]	; (8007f80 <_ZN3jlb5GraphC1Ev+0x3440>)
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	f8a7 3c34 	strh.w	r3, [r7, #3124]	; 0xc34
 8007eb2:	f607 4334 	addw	r3, r7, #3124	; 0xc34
 8007eb6:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8007eba:	2302      	movs	r3, #2
 8007ebc:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30
 8007ec0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f012 fc3e 	bl	801a746 <_ZNSaIcEC1Ev>
 8007eca:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007ece:	f507 6042 	add.w	r0, r7, #3104	; 0xc20
 8007ed2:	f607 422c 	addw	r2, r7, #3116	; 0xc2c
 8007ed6:	ca06      	ldmia	r2, {r1, r2}
 8007ed8:	f000 ff57 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007edc:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8007ee0:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8007f84 <_ZN3jlb5GraphC1Ev+0x3444>
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	214f      	movs	r1, #79	; 0x4f
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f7fc fde4 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007eee:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fefc 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007ef8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007efc:	4618      	mov	r0, r3
 8007efe:	f012 fc24 	bl	801a74a <_ZNSaIcED1Ev>
            this->operator[]('X').add_edge('Q', Direction::STRAIGHT, {'X'}, 2.5f * UNIT + QUARTER_CIRCLE);
 8007f02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f06:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007f0a:	2158      	movs	r1, #88	; 0x58
 8007f0c:	6818      	ldr	r0, [r3, #0]
 8007f0e:	f000 f83d 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8007f12:	4604      	mov	r4, r0
 8007f14:	2358      	movs	r3, #88	; 0x58
 8007f16:	f887 3c50 	strb.w	r3, [r7, #3152]	; 0xc50
 8007f1a:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8007f1e:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 8007f22:	2301      	movs	r3, #1
 8007f24:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
 8007f28:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f012 fc0a 	bl	801a746 <_ZNSaIcEC1Ev>
 8007f32:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 8007f36:	f607 403c 	addw	r0, r7, #3132	; 0xc3c
 8007f3a:	f607 4248 	addw	r2, r7, #3144	; 0xc48
 8007f3e:	ca06      	ldmia	r2, {r1, r2}
 8007f40:	f000 ff23 	bl	8008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007f44:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 8007f48:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8007f88 <_ZN3jlb5GraphC1Ev+0x3448>
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	2151      	movs	r1, #81	; 0x51
 8007f50:	4620      	mov	r0, r4
 8007f52:	f7fc fdb0 	bl	8004ab6 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007f56:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 fec8 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 8007f60:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 8007f64:	4618      	mov	r0, r3
 8007f66:	f012 fbf0 	bl	801a74a <_ZNSaIcED1Ev>
        }
 8007f6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f6e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f607 476c 	addw	r7, r7, #3180	; 0xc6c
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd90      	pop	{r4, r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	0801e5c0 	.word	0x0801e5c0
 8007f84:	3fc56fea 	.word	0x3fc56fea
 8007f88:	401c518f 	.word	0x401c518f

08007f8c <_ZN3jlb5GraphixEc>:

        ~Graph() {}

        Node &operator[](char name)
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	70fb      	strb	r3, [r7, #3]
            if (nodes.empty())
                throw std::runtime_error("Graph is empty");
            if (name < 'A' || name > 'X')
                throw std::runtime_error("Invalid node name");
#endif
            return nodes[static_cast<int>(name - 'A')];
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	3b41      	subs	r3, #65	; 0x41
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	f000 ff13 	bl	8008dcc <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>
 8007fa6:	4603      	mov	r3, r0
        }
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <_ZN3jlb5LogicC1ENS_9DirectionEfff>:
        Controller controller;
        ASState as_state;
        Graph graph;
        SignalSender signal_sender = SignalSender(odometry, controller, as_state);

        Logic(Direction direction_ = Direction::STRAIGHT, const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : odometry(x_t_, y_t_, theta_t_), controller(direction_) {}
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6178      	str	r0, [r7, #20]
 8007fb8:	6139      	str	r1, [r7, #16]
 8007fba:	ed87 0a03 	vstr	s0, [r7, #12]
 8007fbe:	edc7 0a02 	vstr	s1, [r7, #8]
 8007fc2:	ed87 1a01 	vstr	s2, [r7, #4]
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	ed97 1a01 	vldr	s2, [r7, #4]
 8007fcc:	edd7 0a02 	vldr	s1, [r7, #8]
 8007fd0:	ed97 0a03 	vldr	s0, [r7, #12]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fa f81f 	bl	8002018 <_ZN3jlb8OdometryC1Efff>
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	3384      	adds	r3, #132	; 0x84
 8007fde:	6939      	ldr	r1, [r7, #16]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fa fb0b 	bl	80025fc <_ZN3jlb10ControllerC1ENS_9DirectionE>
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fc fda7 	bl	8004b40 <_ZN3jlb5GraphC1Ev>
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8007ff8:	6979      	ldr	r1, [r7, #20]
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8008006:	f7fa fe7a 	bl	8002cfe <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateE>
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2255      	movs	r2, #85	; 0x55
 8008026:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2255      	movs	r2, #85	; 0x55
 800802e:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4618      	mov	r0, r3
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <_ZN3jlb5Logic6updateEv>:

        ControlSignal update()
 8008052:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008054:	ed2d 8b02 	vpush	{d8}
 8008058:	b097      	sub	sp, #92	; 0x5c
 800805a:	af00      	add	r7, sp, #0
 800805c:	60f8      	str	r0, [r7, #12]
        {
            auto [vx, x, y, theta] = odometry.update_odom();
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	4618      	mov	r0, r3
 8008062:	f7fa f939 	bl	80022d8 <_ZN3jlb8Odometry11update_odomEv>
 8008066:	eeb0 6a40 	vmov.f32	s12, s0
 800806a:	eef0 6a60 	vmov.f32	s13, s1
 800806e:	eeb0 7a41 	vmov.f32	s14, s2
 8008072:	eef0 7a61 	vmov.f32	s15, s3
 8008076:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800807a:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800807e:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8008082:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            controller.set_current_velocity(vx);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3384      	adds	r3, #132	; 0x84
            auto [vx, x, y, theta] = odometry.update_odom();
 800808a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
            controller.set_current_velocity(vx);
 800808e:	eeb0 0a67 	vmov.f32	s0, s15
 8008092:	4618      	mov	r0, r3
 8008094:	f7fa fe15 	bl	8002cc2 <_ZN3jlb10Controller20set_current_velocityEf>

            bool at_decision_point = under_gate || at_cross_section;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d104      	bne.n	80080ac <_ZN3jlb5Logic6updateEv+0x5a>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f893 3251 	ldrb.w	r3, [r3, #593]	; 0x251
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <_ZN3jlb5Logic6updateEv+0x5e>
 80080ac:	2301      	movs	r3, #1
 80080ae:	e000      	b.n	80080b2 <_ZN3jlb5Logic6updateEv+0x60>
 80080b0:	2300      	movs	r3, #0
 80080b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

            if (!prev_at_decision_point && at_decision_point)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f893 3252 	ldrb.w	r3, [r3, #594]	; 0x252
 80080bc:	f083 0301 	eor.w	r3, r3, #1
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 815e 	beq.w	8008384 <_ZN3jlb5Logic6updateEv+0x332>
 80080c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 8159 	beq.w	8008384 <_ZN3jlb5Logic6updateEv+0x332>
            {
                float inaccuracy = 0.25f;
 80080d2:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80080d6:	653b      	str	r3, [r7, #80]	; 0x50
                if (std::sqrt(std::pow(graph[next_node].x - odometry.x_t, 2) + std::pow(graph[next_node].y - odometry.y_t, 2)) < inaccuracy)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f503 728a 	add.w	r2, r3, #276	; 0x114
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f893 3254 	ldrb.w	r3, [r3, #596]	; 0x254
 80080e4:	4619      	mov	r1, r3
 80080e6:	4610      	mov	r0, r2
 80080e8:	f7ff ff50 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80080ec:	4603      	mov	r3, r0
 80080ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80080f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080fc:	2002      	movs	r0, #2
 80080fe:	eeb0 0a67 	vmov.f32	s0, s15
 8008102:	f000 fe76 	bl	8008df2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8008106:	ec55 4b10 	vmov	r4, r5, d0
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f503 728a 	add.w	r2, r3, #276	; 0x114
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f893 3254 	ldrb.w	r3, [r3, #596]	; 0x254
 8008116:	4619      	mov	r1, r3
 8008118:	4610      	mov	r0, r2
 800811a:	f7ff ff37 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800811e:	4603      	mov	r3, r0
 8008120:	ed93 7a02 	vldr	s14, [r3, #8]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	edd3 7a03 	vldr	s15, [r3, #12]
 800812a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800812e:	2002      	movs	r0, #2
 8008130:	eeb0 0a67 	vmov.f32	s0, s15
 8008134:	f000 fe5d 	bl	8008df2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8008138:	ec53 2b10 	vmov	r2, r3, d0
 800813c:	4620      	mov	r0, r4
 800813e:	4629      	mov	r1, r5
 8008140:	f7f8 f896 	bl	8000270 <__adddf3>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	ec43 2b17 	vmov	d7, r2, r3
 800814c:	eeb0 0a47 	vmov.f32	s0, s14
 8008150:	eef0 0a67 	vmov.f32	s1, s15
 8008154:	f012 fbaa 	bl	801a8ac <sqrt>
 8008158:	ec55 4b10 	vmov	r4, r5, d0
 800815c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800815e:	f7f8 f9e5 	bl	800052c <__aeabi_f2d>
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	2101      	movs	r1, #1
 8008168:	460e      	mov	r6, r1
 800816a:	4620      	mov	r0, r4
 800816c:	4629      	mov	r1, r5
 800816e:	f7f8 fca7 	bl	8000ac0 <__aeabi_dcmplt>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <_ZN3jlb5Logic6updateEv+0x12a>
 8008178:	2300      	movs	r3, #0
 800817a:	461e      	mov	r6, r3
 800817c:	b2f3      	uxtb	r3, r6
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 8100 	beq.w	8008384 <_ZN3jlb5Logic6updateEv+0x332>
                {
                    auto at_node = next_node;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f893 3254 	ldrb.w	r3, [r3, #596]	; 0x254
 800818a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

                    while (true)
                    {
                        unsigned long num_neighbors = graph[at_node].edges.size();
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008194:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8008198:	4611      	mov	r1, r2
 800819a:	4618      	mov	r0, r3
 800819c:	f7ff fef6 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80081a0:	4603      	mov	r3, r0
 80081a2:	330c      	adds	r3, #12
 80081a4:	4618      	mov	r0, r3
 80081a6:	f000 fe45 	bl	8008e34 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 80081aa:	64b8      	str	r0, [r7, #72]	; 0x48
                        auto selected_edge = rand() % num_neighbors;
 80081ac:	f014 fd68 	bl	801cc80 <rand>
 80081b0:	4603      	mov	r3, r0
 80081b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80081b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80081ba:	fb01 f202 	mul.w	r2, r1, r2
 80081be:	1a9b      	subs	r3, r3, r2
 80081c0:	647b      	str	r3, [r7, #68]	; 0x44

                        if (graph[at_node].edges[selected_edge].node == 'P' ||
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80081c8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80081cc:	4611      	mov	r1, r2
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff fedc 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80081d4:	4603      	mov	r3, r0
 80081d6:	330c      	adds	r3, #12
 80081d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 fe40 	bl	8008e60 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 80081e0:	4603      	mov	r3, r0
 80081e2:	781b      	ldrb	r3, [r3, #0]
                            graph[at_node].edges[selected_edge].node == 'U' ||
 80081e4:	2b50      	cmp	r3, #80	; 0x50
 80081e6:	d025      	beq.n	8008234 <_ZN3jlb5Logic6updateEv+0x1e2>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80081ee:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80081f2:	4611      	mov	r1, r2
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7ff fec9 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80081fa:	4603      	mov	r3, r0
 80081fc:	330c      	adds	r3, #12
 80081fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fe2d 	bl	8008e60 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8008206:	4603      	mov	r3, r0
 8008208:	781b      	ldrb	r3, [r3, #0]
                        if (graph[at_node].edges[selected_edge].node == 'P' ||
 800820a:	2b55      	cmp	r3, #85	; 0x55
 800820c:	d012      	beq.n	8008234 <_ZN3jlb5Logic6updateEv+0x1e2>
                            graph[at_node].edges[selected_edge].node == 'X')
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008214:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8008218:	4611      	mov	r1, r2
 800821a:	4618      	mov	r0, r3
 800821c:	f7ff feb6 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8008220:	4603      	mov	r3, r0
 8008222:	330c      	adds	r3, #12
 8008224:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008226:	4618      	mov	r0, r3
 8008228:	f000 fe1a 	bl	8008e60 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 800822c:	4603      	mov	r3, r0
 800822e:	781b      	ldrb	r3, [r3, #0]
                            graph[at_node].edges[selected_edge].node == 'U' ||
 8008230:	2b58      	cmp	r3, #88	; 0x58
 8008232:	d101      	bne.n	8008238 <_ZN3jlb5Logic6updateEv+0x1e6>
 8008234:	2301      	movs	r3, #1
 8008236:	e000      	b.n	800823a <_ZN3jlb5Logic6updateEv+0x1e8>
 8008238:	2300      	movs	r3, #0
                        if (graph[at_node].edges[selected_edge].node == 'P' ||
 800823a:	2b00      	cmp	r3, #0
 800823c:	f040 80a0 	bne.w	8008380 <_ZN3jlb5Logic6updateEv+0x32e>
                        {
                            continue;
                        }

                        auto prev_nodes = graph[at_node].edges[selected_edge].prev_nodes;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008246:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800824a:	4611      	mov	r1, r2
 800824c:	4618      	mov	r0, r3
 800824e:	f7ff fe9d 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8008252:	4603      	mov	r3, r0
 8008254:	330c      	adds	r3, #12
 8008256:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008258:	4618      	mov	r0, r3
 800825a:	f000 fe01 	bl	8008e60 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 800825e:	4603      	mov	r3, r0
 8008260:	f103 0208 	add.w	r2, r3, #8
 8008264:	f107 0310 	add.w	r3, r7, #16
 8008268:	4611      	mov	r1, r2
 800826a:	4618      	mov	r0, r3
 800826c:	f000 fd03 	bl	8008c76 <_ZNSt6vectorIcSaIcEEC1ERKS1_>
                        if (std::find(prev_nodes.begin(), prev_nodes.end(), previous_node) != prev_nodes.end())
 8008270:	f107 0310 	add.w	r3, r7, #16
 8008274:	4618      	mov	r0, r3
 8008276:	f000 fe06 	bl	8008e86 <_ZNSt6vectorIcSaIcEE5beginEv>
 800827a:	4604      	mov	r4, r0
 800827c:	f107 0310 	add.w	r3, r7, #16
 8008280:	4618      	mov	r0, r3
 8008282:	f000 fe10 	bl	8008ea6 <_ZNSt6vectorIcSaIcEE3endEv>
 8008286:	4601      	mov	r1, r0
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f203 2353 	addw	r3, r3, #595	; 0x253
 800828e:	461a      	mov	r2, r3
 8008290:	4620      	mov	r0, r4
 8008292:	f000 fe19 	bl	8008ec8 <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>
 8008296:	4603      	mov	r3, r0
 8008298:	637b      	str	r3, [r7, #52]	; 0x34
 800829a:	f107 0310 	add.w	r3, r7, #16
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fe01 	bl	8008ea6 <_ZNSt6vectorIcSaIcEE3endEv>
 80082a4:	4603      	mov	r3, r0
 80082a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80082a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80082ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80082b0:	4611      	mov	r1, r2
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fe1c 	bl	8008ef0 <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 80082b8:	4603      	mov	r3, r0
 80082ba:	f083 0301 	eor.w	r3, r3, #1
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d054      	beq.n	800836e <_ZN3jlb5Logic6updateEv+0x31c>
                        {
                            next_node = graph[at_node].edges[selected_edge].node;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80082ca:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80082ce:	4611      	mov	r1, r2
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7ff fe5b 	bl	8007f8c <_ZN3jlb5GraphixEc>
 80082d6:	4603      	mov	r3, r0
 80082d8:	330c      	adds	r3, #12
 80082da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 fdbf 	bl	8008e60 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 80082e2:	4603      	mov	r3, r0
 80082e4:	781a      	ldrb	r2, [r3, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254
                            previous_node = at_node;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80082f2:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253

                            controller.set_direction(graph[at_node].edges[selected_edge].direction);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f103 0484 	add.w	r4, r3, #132	; 0x84
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008302:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8008306:	4611      	mov	r1, r2
 8008308:	4618      	mov	r0, r3
 800830a:	f7ff fe3f 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800830e:	4603      	mov	r3, r0
 8008310:	330c      	adds	r3, #12
 8008312:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008314:	4618      	mov	r0, r3
 8008316:	f000 fda3 	bl	8008e60 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 800831a:	4603      	mov	r3, r0
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	4619      	mov	r1, r3
 8008320:	4620      	mov	r0, r4
 8008322:	f7fa fcde 	bl	8002ce2 <_ZN3jlb10Controller13set_directionENS_9DirectionE>
                            odometry.correction(graph[previous_node].x, graph[previous_node].y);
 8008326:	68fc      	ldr	r4, [r7, #12]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f503 728a 	add.w	r2, r3, #276	; 0x114
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f893 3253 	ldrb.w	r3, [r3, #595]	; 0x253
 8008334:	4619      	mov	r1, r3
 8008336:	4610      	mov	r0, r2
 8008338:	f7ff fe28 	bl	8007f8c <_ZN3jlb5GraphixEc>
 800833c:	4603      	mov	r3, r0
 800833e:	ed93 8a01 	vldr	s16, [r3, #4]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f503 728a 	add.w	r2, r3, #276	; 0x114
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f893 3253 	ldrb.w	r3, [r3, #595]	; 0x253
 800834e:	4619      	mov	r1, r3
 8008350:	4610      	mov	r0, r2
 8008352:	f7ff fe1b 	bl	8007f8c <_ZN3jlb5GraphixEc>
 8008356:	4603      	mov	r3, r0
 8008358:	edd3 7a02 	vldr	s15, [r3, #8]
 800835c:	eef0 0a67 	vmov.f32	s1, s15
 8008360:	eeb0 0a48 	vmov.f32	s0, s16
 8008364:	4620      	mov	r0, r4
 8008366:	f7fa f8ef 	bl	8002548 <_ZN3jlb8Odometry10correctionEff>

                            break;
 800836a:	2400      	movs	r4, #0
 800836c:	e000      	b.n	8008370 <_ZN3jlb5Logic6updateEv+0x31e>
                        }
                    }
 800836e:	2401      	movs	r4, #1
 8008370:	f107 0310 	add.w	r3, r7, #16
 8008374:	4618      	mov	r0, r3
 8008376:	f000 fcbb 	bl	8008cf0 <_ZNSt6vectorIcSaIcEED1Ev>
 800837a:	2c01      	cmp	r4, #1
 800837c:	d102      	bne.n	8008384 <_ZN3jlb5Logic6updateEv+0x332>
 800837e:	e000      	b.n	8008382 <_ZN3jlb5Logic6updateEv+0x330>
                            continue;
 8008380:	bf00      	nop
                    }
 8008382:	e704      	b.n	800818e <_ZN3jlb5Logic6updateEv+0x13c>
                    }
#endif
                }
            }

            prev_at_decision_point = at_decision_point;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800838a:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252

            auto [target_angle, target_speed] = controller.update();
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3384      	adds	r3, #132	; 0x84
 8008392:	4618      	mov	r0, r3
 8008394:	f7fa fc32 	bl	8002bfc <_ZN3jlb10Controller6updateEv>
 8008398:	eeb0 7a40 	vmov.f32	s14, s0
 800839c:	eef0 7a60 	vmov.f32	s15, s1
 80083a0:	ed87 7a07 	vstr	s14, [r7, #28]
 80083a4:	edc7 7a08 	vstr	s15, [r7, #32]
 80083a8:	69fb      	ldr	r3, [r7, #28]
            return ControlSignal{target_angle, target_speed};
 80083aa:	63fb      	str	r3, [r7, #60]	; 0x3c
            auto [target_angle, target_speed] = controller.update();
 80083ac:	6a3b      	ldr	r3, [r7, #32]
            return ControlSignal{target_angle, target_speed};
 80083ae:	643b      	str	r3, [r7, #64]	; 0x40
 80083b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083b4:	ee07 2a10 	vmov	s14, r2
 80083b8:	ee07 3a90 	vmov	s15, r3
        }
 80083bc:	eeb0 0a47 	vmov.f32	s0, s14
 80083c0:	eef0 0a67 	vmov.f32	s1, s15
 80083c4:	375c      	adds	r7, #92	; 0x5c
 80083c6:	46bd      	mov	sp, r7
 80083c8:	ecbd 8b02 	vpop	{d8}
 80083cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080083d0 <_Z19RegistrateUserTasksv>:




void RegistrateUserTasks()
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	af00      	add	r7, sp, #0
	adcTaskHandle = osThreadNew(ADCTask, NULL, &adcTask_attributes);
 80083d4:	4a08      	ldr	r2, [pc, #32]	; (80083f8 <_Z19RegistrateUserTasksv+0x28>)
 80083d6:	2100      	movs	r1, #0
 80083d8:	4808      	ldr	r0, [pc, #32]	; (80083fc <_Z19RegistrateUserTasksv+0x2c>)
 80083da:	f00f fe9b 	bl	8018114 <osThreadNew>
 80083de:	4603      	mov	r3, r0
 80083e0:	4a07      	ldr	r2, [pc, #28]	; (8008400 <_Z19RegistrateUserTasksv+0x30>)
 80083e2:	6013      	str	r3, [r2, #0]
	mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 80083e4:	4a07      	ldr	r2, [pc, #28]	; (8008404 <_Z19RegistrateUserTasksv+0x34>)
 80083e6:	2100      	movs	r1, #0
 80083e8:	4807      	ldr	r0, [pc, #28]	; (8008408 <_Z19RegistrateUserTasksv+0x38>)
 80083ea:	f00f fe93 	bl	8018114 <osThreadNew>
 80083ee:	4603      	mov	r3, r0
 80083f0:	4a06      	ldr	r2, [pc, #24]	; (800840c <_Z19RegistrateUserTasksv+0x3c>)
 80083f2:	6013      	str	r3, [r2, #0]

}
 80083f4:	bf00      	nop
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	0801e68c 	.word	0x0801e68c
 80083fc:	08008411 	.word	0x08008411
 8008400:	20000100 	.word	0x20000100
 8008404:	0801e6b0 	.word	0x0801e6b0
 8008408:	08008441 	.word	0x08008441
 800840c:	20000104 	.word	0x20000104

08008410 <_Z7ADCTaskPv>:

void ADCTask(void *argument)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8008418:	f010 ff12 	bl	8019240 <xTaskGetTickCount>
 800841c:	4603      	mov	r3, r0
 800841e:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 8008420:	2208      	movs	r2, #8
 8008422:	4905      	ldr	r1, [pc, #20]	; (8008438 <_Z7ADCTaskPv+0x28>)
 8008424:	4805      	ldr	r0, [pc, #20]	; (800843c <_Z7ADCTaskPv+0x2c>)
 8008426:	f007 fccb 	bl	800fdc0 <HAL_ADC_Start_DMA>
		vTaskDelayUntil(&xLastWakeTime, 5u);
 800842a:	f107 030c 	add.w	r3, r7, #12
 800842e:	2105      	movs	r1, #5
 8008430:	4618      	mov	r0, r3
 8008432:	f010 fd91 	bl	8018f58 <vTaskDelayUntil>
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 8008436:	e7f3      	b.n	8008420 <_Z7ADCTaskPv+0x10>
 8008438:	200000a0 	.word	0x200000a0
 800843c:	20000108 	.word	0x20000108

08008440 <_Z8MainTaskPv>:
	}
}

void MainTask(void * argument)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 8008446:	af00      	add	r7, sp, #0
 8008448:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800844c:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8008450:	6018      	str	r0, [r3, #0]
	static uint8_t direction = 1u;
	jlb::Logic logic;
 8008452:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008456:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8008578 <_Z8MainTaskPv+0x138>
 800845a:	eddf 0a47 	vldr	s1, [pc, #284]	; 8008578 <_Z8MainTaskPv+0x138>
 800845e:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8008578 <_Z8MainTaskPv+0x138>
 8008462:	2102      	movs	r1, #2
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff fda3 	bl	8007fb0 <_ZN3jlb5LogicC1ENS_9DirectionEfff>
		{
			pwm_servo_test-= 0.1f;
		}*/
		MotorControlTask();
#else
		logic.odometry.imu_callback(0.0f);
 800846a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800846e:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8008578 <_Z8MainTaskPv+0x138>
 8008472:	4618      	mov	r0, r3
 8008474:	f7f9 febe 	bl	80021f4 <_ZN3jlb8Odometry12imu_callbackEf>
		logic.odometry.rpm_callback(0.0f);
 8008478:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800847c:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8008578 <_Z8MainTaskPv+0x138>
 8008480:	4618      	mov	r0, r3
 8008482:	f7f9 fe1d 	bl	80020c0 <_ZN3jlb8Odometry12rpm_callbackEf>

		bool kisfaszom[32] = {false};
 8008486:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800848a:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800848e:	4618      	mov	r0, r3
 8008490:	2320      	movs	r3, #32
 8008492:	461a      	mov	r2, r3
 8008494:	2100      	movs	r1, #0
 8008496:	f014 fd7e 	bl	801cf96 <memset>
		std::vector<float> nagyfaszom;
 800849a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fa f89f 	bl	80025e2 <_ZNSt6vectorIfSaIfEEC1Ev>

		logic.controller.set_detection_front(kisfaszom, nagyfaszom);
 80084a4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80084a8:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80084ac:	4611      	mov	r1, r2
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 fa0b 	bl	80088ca <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80084b4:	f507 7226 	add.w	r2, r7, #664	; 0x298
 80084b8:	f107 010c 	add.w	r1, r7, #12
 80084bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80084c0:	3384      	adds	r3, #132	; 0x84
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fa fbb7 	bl	8002c36 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>
 80084c8:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 f94d 	bl	800876c <_ZNSt6vectorIfSaIfEED1Ev>
		logic.controller.set_detection_rear(kisfaszom, nagyfaszom);
 80084d2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80084d6:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80084da:	4611      	mov	r1, r2
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 f9f4 	bl	80088ca <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80084e2:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 80084e6:	f107 010c 	add.w	r1, r7, #12
 80084ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80084ee:	3384      	adds	r3, #132	; 0x84
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fa fbc3 	bl	8002c7c <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>
 80084f6:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 f936 	bl	800876c <_ZNSt6vectorIfSaIfEED1Ev>

		auto [target_angle, target_speed] = logic.update();
 8008500:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008504:	4618      	mov	r0, r3
 8008506:	f7ff fda4 	bl	8008052 <_ZN3jlb5Logic6updateEv>
 800850a:	eeb0 7a40 	vmov.f32	s14, s0
 800850e:	eef0 7a60 	vmov.f32	s15, s1
 8008512:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8008516:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800851a:	ed83 7a00 	vstr	s14, [r3]
 800851e:	edc3 7a01 	vstr	s15, [r3, #4]
 8008522:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8008526:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800852a:	edd3 7a00 	vldr	s15, [r3]
		SetSteeringAngle(target_angle);
 800852e:	eeb0 0a67 	vmov.f32	s0, s15
 8008532:	f7f9 fc8f 	bl	8001e54 <_Z16SetSteeringAnglef>
		motorcontrol.actual_velocity = logic.odometry.vx_t;
 8008536:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800853a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a0e      	ldr	r2, [pc, #56]	; (800857c <_Z8MainTaskPv+0x13c>)
 8008542:	6093      	str	r3, [r2, #8]
		auto [target_angle, target_speed] = logic.update();
 8008544:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8008548:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800854c:	685b      	ldr	r3, [r3, #4]
		motorcontrol.target_velocity = target_speed;
 800854e:	4a0b      	ldr	r2, [pc, #44]	; (800857c <_Z8MainTaskPv+0x13c>)
 8008550:	60d3      	str	r3, [r2, #12]
		MotorControlTask();
 8008552:	f7f9 fb87 	bl	8001c64 <_Z16MotorControlTaskv>

		logic.signal_sender.send_telemetry();
 8008556:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800855a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800855e:	4618      	mov	r0, r3
 8008560:	f7fa fbe7 	bl	8002d32 <_ZN3jlb12SignalSender14send_telemetryEv>

#endif
		//vTaskSuspend(static_cast<TaskHandle_t>(mainTaskHandle));
		vTaskDelay(5);
 8008564:	2005      	movs	r0, #5
 8008566:	f010 fd55 	bl	8019014 <vTaskDelay>
	}
 800856a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800856e:	4618      	mov	r0, r3
 8008570:	f000 f8fc 	bl	800876c <_ZNSt6vectorIfSaIfEED1Ev>
 8008574:	e779      	b.n	800846a <_Z8MainTaskPv+0x2a>
 8008576:	bf00      	nop
 8008578:	00000000 	.word	0x00000000
 800857c:	200000d0 	.word	0x200000d0

08008580 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>:
      _Deque_base()
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fcc8 	bl	8008f20 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8008590:	2100      	movs	r1, #0
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fcd4 	bl	8008f40 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <_ZNSt5dequeIfSaIfEE9push_backERKf>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish._M_cur
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a1b      	ldr	r3, [r3, #32]
 80085b4:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d00c      	beq.n	80085d4 <_ZNSt5dequeIfSaIfEE9push_backERKf+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	4619      	mov	r1, r3
 80085c4:	f000 fd5a 	bl	800907c <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	1d1a      	adds	r2, r3, #4
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	619a      	str	r2, [r3, #24]
	  }
	else
	  _M_push_back_aux(__x);
      }
 80085d2:	e003      	b.n	80085dc <_ZNSt5dequeIfSaIfEE9push_backERKf+0x3a>
	  _M_push_back_aux(__x);
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fd62 	bl	80090a0 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>
      }
 80085dc:	bf00      	nop
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <_ZNKSt5dequeIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f103 0218 	add.w	r2, r3, #24
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3308      	adds	r3, #8
 80085f6:	4619      	mov	r1, r3
 80085f8:	4610      	mov	r0, r2
 80085fa:	f000 fd95 	bl	8009128 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>
 80085fe:	4603      	mov	r3, r0
 8008600:	4618      	mov	r0, r3
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <_ZNSt5dequeIfSaIfEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 800861a:	429a      	cmp	r2, r3
 800861c:	d010      	beq.n	8008640 <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x38>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4618      	mov	r0, r3
 8008622:	f000 fd0b 	bl	800903c <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8008626:	4602      	mov	r2, r0
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	4619      	mov	r1, r3
 800862e:	4610      	mov	r0, r2
 8008630:	f000 fda6 	bl	8009180 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	1d1a      	adds	r2, r3, #4
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 800863e:	e002      	b.n	8008646 <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fda9 	bl	8009198 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>
      }
 8008646:	bf00      	nop
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <_ZNSt5dequeIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800864e:	b580      	push	{r7, lr}
 8008650:	b082      	sub	sp, #8
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	3308      	adds	r3, #8
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fdc2 	bl	80091e8 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <_ZNSt5dequeIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	3318      	adds	r3, #24
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fdb3 	bl	80091e8 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800868a:	b480      	push	{r7}
 800868c:	b083      	sub	sp, #12
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>:
   *  @return  The final sum.
   */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
 80086a0:	b580      	push	{r7, lr}
 80086a2:	ed2d 8b02 	vpush	{d8}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	ed87 0a01 	vstr	s0, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      for (; __first != __last; ++__first)
 80086b2:	e013      	b.n	80086dc <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x3c>
	__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;
 80086b4:	1d3b      	adds	r3, r7, #4
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff ffe7 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80086bc:	4603      	mov	r3, r0
 80086be:	ed93 8a00 	vldr	s16, [r3]
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f000 fddf 	bl	8009286 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>
 80086c8:	4603      	mov	r3, r0
 80086ca:	edd3 7a00 	vldr	s15, [r3]
 80086ce:	ee78 7a27 	vadd.f32	s15, s16, s15
 80086d2:	edc7 7a01 	vstr	s15, [r7, #4]
      for (; __first != __last; ++__first)
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f000 fdb6 	bl	8009248 <_ZNSt15_Deque_iteratorIfRfPfEppEv>
 80086dc:	68b9      	ldr	r1, [r7, #8]
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 fd9e 	bl	8009220 <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>
 80086e4:	4603      	mov	r3, r0
 80086e6:	f083 0301 	eor.w	r3, r3, #1
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e1      	bne.n	80086b4 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x14>
      return __init;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	ee07 3a90 	vmov	s15, r3
    }
 80086f6:	eeb0 0a67 	vmov.f32	s0, s15
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	ecbd 8b02 	vpop	{d8}
 8008702:	bd80      	pop	{r7, pc}

08008704 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fdc6 	bl	800929e <_ZNSaIfEC1Ev>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 fdce 	bl	80092b6 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <_ZNSaIfED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4618      	mov	r0, r3
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800873a:	b580      	push	{r7, lr}
 800873c:	b082      	sub	sp, #8
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8008752:	461a      	mov	r2, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fdc2 	bl	80092de <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4618      	mov	r0, r3
 800875e:	f7f9 ff27 	bl	80025b0 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4618      	mov	r0, r3
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800876c:	b5b0      	push	{r4, r5, r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681c      	ldr	r4, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fdc0 	bl	8009304 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8008784:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008786:	461a      	mov	r2, r3
 8008788:	4629      	mov	r1, r5
 800878a:	4620      	mov	r0, r4
 800878c:	f000 fdc5 	bl	800931a <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4618      	mov	r0, r3
 8008794:	f7ff ffd1 	bl	800873a <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4618      	mov	r0, r3
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bdb0      	pop	{r4, r5, r7, pc}

080087a2 <_ZNSt6vectorIfSaIfEE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b084      	sub	sp, #16
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	f107 030c 	add.w	r3, r7, #12
 80087b0:	4611      	mov	r1, r2
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 fdbf 	bl	8009336 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <_ZNSt6vectorIfSaIfEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b084      	sub	sp, #16
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	1d1a      	adds	r2, r3, #4
 80087ce:	f107 030c 	add.w	r3, r7, #12
 80087d2:	4611      	mov	r1, r2
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fdae 	bl	8009336 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 80087e4:	b590      	push	{r4, r7, lr}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 80087ee:	f7f9 fbcf 	bl	8001f90 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 80087f2:	4622      	mov	r2, r4
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fde5 	bl	80093c6 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	bd90      	pop	{r4, r7, pc}

08008804 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	109b      	asrs	r3, r3, #2
 8008818:	4618      	mov	r0, r3
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <_ZNSt6vectorIfSaIfEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
      }
 8008838:	4618      	mov	r0, r3
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <_ZSt5beginIbLj32EEPT_RAT0__S0_>:
   *  @brief  Return an iterator pointing to the first element of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
    { return __arr; }
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4618      	mov	r0, r3
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <_ZSt3endIbLj32EEPT_RAT0__S0_>:
   *          of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 800885a:	b480      	push	{r7}
 800885c:	b083      	sub	sp, #12
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	3320      	adds	r3, #32
 8008866:	4618      	mov	r0, r3
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEvEUlbE_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	60f8      	str	r0, [r7, #12]
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 800887e:	461a      	mov	r2, r3
 8008880:	68b9      	ldr	r1, [r7, #8]
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 fdcf 	bl	8009426 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEvEUlbE_ET_S4_S4_T0_>
 8008888:	4602      	mov	r2, r0
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	4293      	cmp	r3, r2
 800888e:	bf0c      	ite	eq
 8008890:	2301      	moveq	r3, #1
 8008892:	2300      	movne	r3, #0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEvEUlbE0_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	60f8      	str	r0, [r7, #12]
 80088a6:	60b9      	str	r1, [r7, #8]
 80088a8:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 80088aa:	461a      	mov	r2, r3
 80088ac:	68b9      	ldr	r1, [r7, #8]
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f000 fdcc 	bl	800944c <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEvEUlbE0_ET_S4_S4_T0_>
 80088b4:	4602      	mov	r2, r0
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	4293      	cmp	r3, r2
 80088ba:	bf0c      	ite	eq
 80088bc:	2301      	moveq	r3, #1
 80088be:	2300      	movne	r3, #0
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 80088ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088cc:	b085      	sub	sp, #20
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 80088d4:	687c      	ldr	r4, [r7, #4]
 80088d6:	6838      	ldr	r0, [r7, #0]
 80088d8:	f7ff ff94 	bl	8008804 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80088dc:	4605      	mov	r5, r0
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 fdd4 	bl	800948e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80088e6:	4602      	mov	r2, r0
 80088e8:	f107 030c 	add.w	r3, r7, #12
 80088ec:	4611      	mov	r1, r2
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 fdbf 	bl	8009472 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 80088f4:	f107 030c 	add.w	r3, r7, #12
 80088f8:	461a      	mov	r2, r3
 80088fa:	4629      	mov	r1, r5
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 fdd1 	bl	80094a4 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 8008902:	f107 030c 	add.w	r3, r7, #12
 8008906:	4618      	mov	r0, r3
 8008908:	f7ff ff0c 	bl	8008724 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800890c:	6838      	ldr	r0, [r7, #0]
 800890e:	f000 fddd 	bl	80094cc <_ZNKSt6vectorIfSaIfEE5beginEv>
 8008912:	4605      	mov	r5, r0
 8008914:	6838      	ldr	r0, [r7, #0]
 8008916:	f000 fde9 	bl	80094ec <_ZNKSt6vectorIfSaIfEE3endEv>
 800891a:	4606      	mov	r6, r0
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4618      	mov	r0, r3
 8008924:	f000 fcee 	bl	8009304 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8008928:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800892a:	4622      	mov	r2, r4
 800892c:	4631      	mov	r1, r6
 800892e:	4628      	mov	r0, r5
 8008930:	f000 fded 	bl	800950e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 8008934:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	605a      	str	r2, [r3, #4]
      }
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008944 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 8008944:	b480      	push	{r7}
 8008946:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8008948:	2300      	movs	r3, #0
 800894a:	4618      	mov	r0, r3
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 8008954:	b480      	push	{r7}
 8008956:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8008958:	2301      	movs	r3, #1
 800895a:	4618      	mov	r0, r3
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <_ZSteqRKSaIfES1_>:
	__allocator_base<_Tp>::deallocate(__p, __n);
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
      { return true; }
 800896e:	2301      	movs	r3, #1
 8008970:	4618      	mov	r0, r3
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800897c:	b590      	push	{r4, r7, lr}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 fe3c 	bl	8009606 <_ZSt12__miter_baseIPfET_S1_>
 800898e:	4604      	mov	r4, r0
 8008990:	68b8      	ldr	r0, [r7, #8]
 8008992:	f000 fe38 	bl	8009606 <_ZSt12__miter_baseIPfET_S1_>
 8008996:	4603      	mov	r3, r0
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	4619      	mov	r1, r3
 800899c:	4620      	mov	r0, r4
 800899e:	f000 fe3d 	bl	800961c <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 80089a2:	4603      	mov	r3, r0
    }
 80089a4:	4618      	mov	r0, r3
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd90      	pop	{r4, r7, pc}

080089ac <_ZNSt6vectorIfSaIfEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 80089ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	f000 80e9 	beq.w	8008b92 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e6>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 80089c0:	f7ff ffc0 	bl	8008944 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d046      	beq.n	8008a58 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xac>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 80089ca:	f7ff ffc3 	bl	8008954 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>
 80089ce:	4603      	mov	r3, r0
 80089d0:	f083 0301 	eor.w	r3, r3, #1
 80089d4:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d015      	beq.n	8008a06 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4618      	mov	r0, r3
 80089de:	f000 fc91 	bl	8009304 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80089e2:	4604      	mov	r4, r0
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 fd51 	bl	800948e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80089ec:	4603      	mov	r3, r0
 80089ee:	4619      	mov	r1, r3
 80089f0:	4620      	mov	r0, r4
 80089f2:	f7ff ffb7 	bl	8008964 <_ZSteqRKSaIfES1_>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f083 0301 	eor.w	r3, r3, #1
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 8008a02:	2301      	movs	r3, #1
 8008a04:	e000      	b.n	8008a08 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5c>
 8008a06:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d017      	beq.n	8008a3c <_ZNSt6vectorIfSaIfEEaSERKS1_+0x90>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fd8f 	bl	8009530 <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 8008a24:	461a      	mov	r2, r3
 8008a26:	f000 fc5a 	bl	80092de <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fc60 	bl	8009304 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8008a44:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 fd20 	bl	800948e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8008a4e:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8008a50:	4619      	mov	r1, r3
 8008a52:	4620      	mov	r0, r4
 8008a54:	f000 fd7a 	bl	800954c <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	    }
#endif
	  const size_type __xlen = __x.size();
 8008a58:	6838      	ldr	r0, [r7, #0]
 8008a5a:	f7ff fed3 	bl	8008804 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8008a5e:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fd7e 	bl	8009562 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 8008a66:	4602      	mov	r2, r0
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	bf8c      	ite	hi
 8008a6e:	2301      	movhi	r3, #1
 8008a70:	2300      	movls	r3, #0
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d032      	beq.n	8008ade <_ZNSt6vectorIfSaIfEEaSERKS1_+0x132>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8008a78:	6838      	ldr	r0, [r7, #0]
 8008a7a:	f000 fd27 	bl	80094cc <_ZNKSt6vectorIfSaIfEE5beginEv>
 8008a7e:	4604      	mov	r4, r0
 8008a80:	6838      	ldr	r0, [r7, #0]
 8008a82:	f000 fd33 	bl	80094ec <_ZNKSt6vectorIfSaIfEE3endEv>
 8008a86:	4603      	mov	r3, r0
 8008a88:	4622      	mov	r2, r4
 8008a8a:	68f9      	ldr	r1, [r7, #12]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fd78 	bl	8009582 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 8008a92:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681c      	ldr	r4, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 fc30 	bl	8009304 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8008aa4:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f000 fc35 	bl	800931a <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f000 fc0b 	bl	80092de <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	441a      	add	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	609a      	str	r2, [r3, #8]
 8008adc:	e052      	b.n	8008b84 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	    }
	  else if (size() >= __xlen)
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f7ff fe90 	bl	8008804 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	bf94      	ite	ls
 8008aec:	2301      	movls	r3, #1
 8008aee:	2300      	movhi	r3, #0
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d020      	beq.n	8008b38 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18c>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8008af6:	6838      	ldr	r0, [r7, #0]
 8008af8:	f000 fce8 	bl	80094cc <_ZNKSt6vectorIfSaIfEE5beginEv>
 8008afc:	4604      	mov	r4, r0
 8008afe:	6838      	ldr	r0, [r7, #0]
 8008b00:	f000 fcf4 	bl	80094ec <_ZNKSt6vectorIfSaIfEE3endEv>
 8008b04:	4605      	mov	r5, r0
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7ff fe4b 	bl	80087a2 <_ZNSt6vectorIfSaIfEE5beginEv>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	461a      	mov	r2, r3
 8008b10:	4629      	mov	r1, r5
 8008b12:	4620      	mov	r0, r4
 8008b14:	f000 fd51 	bl	80095ba <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 8008b18:	4604      	mov	r4, r0
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7ff fe51 	bl	80087c2 <_ZNSt6vectorIfSaIfEE3endEv>
 8008b20:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 fbed 	bl	8009304 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8008b2a:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	4629      	mov	r1, r5
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 fd5a 	bl	80095ea <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 8008b36:	e025      	b.n	8008b84 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	681d      	ldr	r5, [r3, #0]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681c      	ldr	r4, [r3, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f7ff fe5f 	bl	8008804 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8008b46:	4603      	mov	r3, r0
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	18e1      	adds	r1, r4, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	461a      	mov	r2, r3
 8008b52:	4628      	mov	r0, r5
 8008b54:	f7ff ff12 	bl	800897c <_ZSt4copyIPfS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681c      	ldr	r4, [r3, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7ff fe51 	bl	8008804 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8008b62:	4603      	mov	r3, r0
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 fbc6 	bl	8009304 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8008b78:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8008b7a:	4632      	mov	r2, r6
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f000 fd6f 	bl	8009662 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	441a      	add	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	605a      	str	r2, [r3, #4]
	}
      return *this;
 8008b92:	687b      	ldr	r3, [r7, #4]
    }
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b9c <_ZSt4copyIPKcPcET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8008b9c:	b590      	push	{r4, r7, lr}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 fd6b 	bl	8009684 <_ZSt12__miter_baseIPKcET_S2_>
 8008bae:	4604      	mov	r4, r0
 8008bb0:	68b8      	ldr	r0, [r7, #8]
 8008bb2:	f000 fd67 	bl	8009684 <_ZSt12__miter_baseIPKcET_S2_>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f000 fd6c 	bl	800969a <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 8008bc2:	4603      	mov	r3, r0
    }
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3714      	adds	r7, #20
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd90      	pop	{r4, r7, pc}

08008bcc <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fd83 	bl	80096e0 <_ZNSaIN3jlb4EdgeEEC1Ev>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 fd8b 	bl	80096f8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4618      	mov	r0, r3
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <_ZNSaIN3jlb4EdgeEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
	...

08008c04 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	10db      	asrs	r3, r3, #3
 8008c1c:	4a07      	ldr	r2, [pc, #28]	; (8008c3c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev+0x38>)
 8008c1e:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8008c22:	461a      	mov	r2, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fd7b 	bl	8009720 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      }
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fb fee3 	bl	80049f8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	aaaaaaab 	.word	0xaaaaaaab

08008c40 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8008c40:	b5b0      	push	{r4, r5, r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681c      	ldr	r4, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 fd77 	bl	8009746 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8008c58:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f000 fd7c 	bl	800975c <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>
      }
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7ff ffcc 	bl	8008c04 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bdb0      	pop	{r4, r5, r7, pc}

08008c76 <_ZNSt6vectorIcSaIcEEC1ERKS1_>:
      vector(const vector& __x)
 8008c76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8008c80:	687c      	ldr	r4, [r7, #4]
 8008c82:	6838      	ldr	r0, [r7, #0]
 8008c84:	f000 fd78 	bl	8009778 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 8008c88:	4605      	mov	r5, r0
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 fd90 	bl	80097b2 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8008c92:	4602      	mov	r2, r0
 8008c94:	f107 030c 	add.w	r3, r7, #12
 8008c98:	4611      	mov	r1, r2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 fd7b 	bl	8009796 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 8008ca0:	f107 030c 	add.w	r3, r7, #12
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 fd99 	bl	80097e0 <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>
 8008cae:	f107 030c 	add.w	r3, r7, #12
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f011 fd49 	bl	801a74a <_ZNSaIcED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8008cb8:	6838      	ldr	r0, [r7, #0]
 8008cba:	f000 fdbd 	bl	8009838 <_ZNKSt6vectorIcSaIcEE5beginEv>
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	6838      	ldr	r0, [r7, #0]
 8008cc2:	f000 fdc9 	bl	8009858 <_ZNKSt6vectorIcSaIcEE3endEv>
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 fdd3 	bl	800987a <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8008cd4:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4628      	mov	r0, r5
 8008cdc:	f000 fdd8 	bl	8009890 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>
 8008ce0:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	605a      	str	r2, [r3, #4]
      }
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3714      	adds	r7, #20
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008cf0 <_ZNSt6vectorIcSaIcEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8008cf0:	b5b0      	push	{r4, r5, r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681c      	ldr	r4, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 fdb9 	bl	800987a <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8008d08:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f000 fdcf 	bl	80098b2 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      }
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 fd76 	bl	8009808 <_ZNSt12_Vector_baseIcSaIcEED1Ev>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bdb0      	pop	{r4, r5, r7, pc}

08008d26 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b082      	sub	sp, #8
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8008d30:	6838      	ldr	r0, [r7, #0]
 8008d32:	f000 fdcc 	bl	80098ce <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 8008d36:	4603      	mov	r3, r0
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fdd2 	bl	80098e4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fdfa 	bl	800994a <_ZNSaIN3jlb4NodeEEC1Ev>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 fe02 	bl	8009962 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4618      	mov	r0, r3
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8008d72:	6838      	ldr	r0, [r7, #0]
 8008d74:	f000 fe35 	bl	80099e2 <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fe3b 	bl	80099f8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8008d82:	bf00      	nop
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>:
      vector(initializer_list<value_type> __l,
 8008d8a:	b5b0      	push	{r4, r5, r7, lr}
 8008d8c:	b086      	sub	sp, #24
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	1d38      	adds	r0, r7, #4
 8008d94:	e880 0006 	stmia.w	r0, {r1, r2}
 8008d98:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 fe5d 	bl	8009a5e <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8008da4:	1d3b      	adds	r3, r7, #4
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 fe68 	bl	8009a7c <_ZNKSt16initializer_listIcE5beginEv>
 8008dac:	4604      	mov	r4, r0
 8008dae:	1d3b      	adds	r3, r7, #4
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fe6f 	bl	8009a94 <_ZNKSt16initializer_listIcE3endEv>
 8008db6:	4602      	mov	r2, r0
 8008db8:	462b      	mov	r3, r5
 8008dba:	4621      	mov	r1, r4
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 fe8e 	bl	8009ade <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>
      }
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bdb0      	pop	{r4, r5, r7, pc}

08008dcc <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6819      	ldr	r1, [r3, #0]
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	005b      	lsls	r3, r3, #1
 8008de0:	4413      	add	r3, r2
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	440b      	add	r3, r1
      }
 8008de6:	4618      	mov	r0, r3
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8008df2:	b5b0      	push	{r4, r5, r7, lr}
 8008df4:	b082      	sub	sp, #8
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	ed87 0a01 	vstr	s0, [r7, #4]
 8008dfc:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7f7 fb94 	bl	800052c <__aeabi_f2d>
 8008e04:	4604      	mov	r4, r0
 8008e06:	460d      	mov	r5, r1
 8008e08:	6838      	ldr	r0, [r7, #0]
 8008e0a:	f7f7 fb7d 	bl	8000508 <__aeabi_i2d>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	ec43 2b11 	vmov	d1, r2, r3
 8008e16:	ec45 4b10 	vmov	d0, r4, r5
 8008e1a:	f011 fcd7 	bl	801a7cc <pow>
 8008e1e:	eeb0 7a40 	vmov.f32	s14, s0
 8008e22:	eef0 7a60 	vmov.f32	s15, s1
    }
 8008e26:	eeb0 0a47 	vmov.f32	s0, s14
 8008e2a:	eef0 0a67 	vmov.f32	s1, s15
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bdb0      	pop	{r4, r5, r7, pc}

08008e34 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	10db      	asrs	r3, r3, #3
 8008e48:	4a04      	ldr	r2, [pc, #16]	; (8008e5c <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv+0x28>)
 8008e4a:	fb02 f303 	mul.w	r3, r2, r3
 8008e4e:	4618      	mov	r0, r3
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	aaaaaaab 	.word	0xaaaaaaab

08008e60 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6819      	ldr	r1, [r3, #0]
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	4613      	mov	r3, r2
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	4413      	add	r3, r2
 8008e76:	00db      	lsls	r3, r3, #3
 8008e78:	440b      	add	r3, r1
      }
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <_ZNSt6vectorIcSaIcEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b084      	sub	sp, #16
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	f107 030c 	add.w	r3, r7, #12
 8008e94:	4611      	mov	r1, r2
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 fe59 	bl	8009b4e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <_ZNSt6vectorIcSaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	1d1a      	adds	r2, r3, #4
 8008eb2:	f107 030c 	add.w	r3, r7, #12
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 fe48 	bl	8009b4e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>:
    find(_InputIterator __first, _InputIterator __last,
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
      return std::__find_if(__first, __last,
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fe4a 	bl	8009b6e <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 8008eda:	4603      	mov	r3, r0
 8008edc:	461a      	mov	r2, r3
 8008ede:	68b9      	ldr	r1, [r7, #8]
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 fe53 	bl	8009b8c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>
 8008ee6:	4603      	mov	r3, r0
    }
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }

  template<typename _Iterator, typename _Container>
    constexpr bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008ef0:	b590      	push	{r4, r7, lr}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    requires requires {
      { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;
    }
    { return __lhs.base() == __rhs.base(); }
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7ff f89e 	bl	800803c <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8008f00:	4603      	mov	r3, r0
 8008f02:	681c      	ldr	r4, [r3, #0]
 8008f04:	6838      	ldr	r0, [r7, #0]
 8008f06:	f7ff f899 	bl	800803c <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	429c      	cmp	r4, r3
 8008f10:	bf0c      	ite	eq
 8008f12:	2301      	moveq	r3, #1
 8008f14:	2300      	movne	r3, #0
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	4618      	mov	r0, r3
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd90      	pop	{r4, r7, pc}

08008f20 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f9b8 	bl	800929e <_ZNSaIfEC1Ev>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 fe41 	bl	8009bb8 <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>
	{ }
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8008f40:	b590      	push	{r4, r7, lr}
 8008f42:	b089      	sub	sp, #36	; 0x24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8008f4a:	2004      	movs	r0, #4
 8008f4c:	f7f9 f842 	bl	8001fd4 <_ZSt16__deque_buf_sizej>
 8008f50:	4602      	mov	r2, r0
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f58:	3301      	adds	r3, #1
 8008f5a:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8008f5c:	2308      	movs	r3, #8
 8008f5e:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	3302      	adds	r3, #2
 8008f64:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8008f66:	f107 0210 	add.w	r2, r7, #16
 8008f6a:	f107 030c 	add.w	r3, r7, #12
 8008f6e:	4611      	mov	r1, r2
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 fe3a 	bl	8009bea <_ZSt3maxIjERKT_S2_S2_>
 8008f76:	4603      	mov	r3, r0
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fe44 	bl	8009c12 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6859      	ldr	r1, [r3, #4]
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	1acb      	subs	r3, r1, r3
 8008f9c:	085b      	lsrs	r3, r3, #1
 8008f9e:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8008fa0:	4413      	add	r3, r2
 8008fa2:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	69ba      	ldr	r2, [r7, #24]
 8008faa:	4413      	add	r3, r2
 8008fac:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	69b9      	ldr	r1, [r7, #24]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fe4a 	bl	8009c4c <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3308      	adds	r3, #8
 8008fbc:	69b9      	ldr	r1, [r7, #24]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 fe5f 	bl	8009c82 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f103 0218 	add.w	r2, r3, #24
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	3b04      	subs	r3, #4
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f000 fe56 	bl	8009c82 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68da      	ldr	r2, [r3, #12]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8008fe2:	2004      	movs	r0, #4
 8008fe4:	f7f8 fff6 	bl	8001fd4 <_ZSt16__deque_buf_sizej>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ff0:	fb01 f202 	mul.w	r2, r1, r2
 8008ff4:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	619a      	str	r2, [r3, #24]
    }
 8008ffe:	bf00      	nop
 8009000:	3724      	adds	r7, #36	; 0x24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd90      	pop	{r4, r7, pc}

08009006 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8009006:	b580      	push	{r7, lr}
 8009008:	b086      	sub	sp, #24
 800900a:	af00      	add	r7, sp, #0
 800900c:	60f8      	str	r0, [r7, #12]
 800900e:	60b9      	str	r1, [r7, #8]
 8009010:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8009012:	f107 0314 	add.w	r3, r7, #20
 8009016:	68f9      	ldr	r1, [r7, #12]
 8009018:	4618      	mov	r0, r3
 800901a:	f000 fe5e 	bl	8009cda <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800901e:	f107 0314 	add.w	r3, r7, #20
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	68b9      	ldr	r1, [r7, #8]
 8009026:	4618      	mov	r0, r3
 8009028:	f000 fe73 	bl	8009d12 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>
      }
 800902c:	f107 0314 	add.w	r3, r7, #20
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fe63 	bl	8009cfc <_ZNSaIPfED1Ev>
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4618      	mov	r0, r3
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8009052:	b590      	push	{r4, r7, lr}
 8009054:	b083      	sub	sp, #12
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800905c:	6838      	ldr	r0, [r7, #0]
 800905e:	f000 fe77 	bl	8009d50 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8009062:	4603      	mov	r3, r0
 8009064:	681c      	ldr	r4, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4619      	mov	r1, r3
 800906a:	2004      	movs	r0, #4
 800906c:	f7f8 ff84 	bl	8001f78 <_ZnwjPv>
 8009070:	4603      	mov	r3, r0
 8009072:	601c      	str	r4, [r3, #0]
 8009074:	4618      	mov	r0, r3
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	bd90      	pop	{r4, r7, pc}

0800907c <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fe61 	bl	8009d50 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800908e:	4603      	mov	r3, r0
 8009090:	4619      	mov	r1, r3
 8009092:	68b8      	ldr	r0, [r7, #8]
 8009094:	f7ff ffdd 	bl	8009052 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
#endif
	}
 8009098:	bf00      	nop
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 80090a0:	b5b0      	push	{r4, r5, r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7ff fa9a 	bl	80085e4 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 80090b0:	4604      	mov	r4, r0
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fe57 	bl	8009d66 <_ZNKSt5dequeIfSaIfEE8max_sizeEv>
 80090b8:	4603      	mov	r3, r0
 80090ba:	429c      	cmp	r4, r3
 80090bc:	bf0c      	ite	eq
 80090be:	2301      	moveq	r3, #1
 80090c0:	2300      	movne	r3, #0
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x2e>
	  __throw_length_error(
 80090c8:	4816      	ldr	r0, [pc, #88]	; (8009124 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x84>)
 80090ca:	f011 fb45 	bl	801a758 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 80090ce:	2101      	movs	r1, #1
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fe59 	bl	8009d88 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	1d1c      	adds	r4, r3, #4
 80090de:	4610      	mov	r0, r2
 80090e0:	f000 fe6d 	bl	8009dbe <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 80090e4:	4603      	mov	r3, r0
 80090e6:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 80090e8:	687c      	ldr	r4, [r7, #4]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	699d      	ldr	r5, [r3, #24]
 80090ee:	6838      	ldr	r0, [r7, #0]
 80090f0:	f000 fe2e 	bl	8009d50 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80090f4:	4603      	mov	r3, r0
 80090f6:	461a      	mov	r2, r3
 80090f8:	4629      	mov	r1, r5
 80090fa:	4620      	mov	r0, r4
 80090fc:	f7ff ffbe 	bl	800907c <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f103 0218 	add.w	r2, r3, #24
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	3304      	adds	r3, #4
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f000 fdb7 	bl	8009c82 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	69da      	ldr	r2, [r3, #28]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 800911c:	bf00      	nop
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bdb0      	pop	{r4, r5, r7, pc}
 8009124:	0801e5d8 	.word	0x0801e5d8

08009128 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8009132:	f000 fe56 	bl	8009de2 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8009136:	4603      	mov	r3, r0
 8009138:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68da      	ldr	r2, [r3, #12]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	109b      	asrs	r3, r3, #2
 8009146:	461a      	mov	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	2b00      	cmp	r3, #0
 800914e:	bf14      	ite	ne
 8009150:	2301      	movne	r3, #1
 8009152:	2300      	moveq	r3, #0
 8009154:	b2db      	uxtb	r3, r3
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	6811      	ldr	r1, [r2, #0]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	6852      	ldr	r2, [r2, #4]
 8009164:	1a8a      	subs	r2, r1, r2
 8009166:	1092      	asrs	r2, r2, #2
 8009168:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	6891      	ldr	r1, [r2, #8]
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	6812      	ldr	r2, [r2, #0]
 8009172:	1a8a      	subs	r2, r1, r2
 8009174:	1092      	asrs	r2, r2, #2
 8009176:	4413      	add	r3, r2
      }
 8009178:	4618      	mov	r0, r3
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
 800918a:	6838      	ldr	r0, [r7, #0]
 800918c:	f000 fe31 	bl	8009df2 <_ZSt10destroy_atIfEvPT_>
#endif
	}
 8009190:	bf00      	nop
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7ff ff4a 	bl	800903c <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80091a8:	4602      	mov	r2, r0
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	4619      	mov	r1, r3
 80091b0:	4610      	mov	r0, r2
 80091b2:	f7ff ffe5 	bl	8009180 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	4619      	mov	r1, r3
 80091be:	4610      	mov	r0, r2
 80091c0:	f000 fd78 	bl	8009cb4 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f103 0208 	add.w	r2, r3, #8
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	3304      	adds	r3, #4
 80091d0:	4619      	mov	r1, r3
 80091d2:	4610      	mov	r0, r2
 80091d4:	f000 fd55 	bl	8009c82 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68da      	ldr	r2, [r3, #12]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	609a      	str	r2, [r3, #8]
    }
 80091e0:	bf00      	nop
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	601a      	str	r2, [r3, #0]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	685a      	ldr	r2, [r3, #4]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	689a      	ldr	r2, [r3, #8]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	609a      	str	r2, [r3, #8]
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	60da      	str	r2, [r3, #12]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	429a      	cmp	r2, r3
 8009234:	bf0c      	ite	eq
 8009236:	2301      	moveq	r3, #1
 8009238:	2300      	movne	r3, #0
 800923a:	b2db      	uxtb	r3, r3
 800923c:	4618      	mov	r0, r3
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <_ZNSt15_Deque_iteratorIfRfPfEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
	++_M_cur;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	1d1a      	adds	r2, r3, #4
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	429a      	cmp	r2, r3
 8009264:	d10a      	bne.n	800927c <_ZNSt15_Deque_iteratorIfRfPfEppEv+0x34>
	    _M_set_node(_M_node + 1);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	3304      	adds	r3, #4
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 fd07 	bl	8009c82 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    _M_cur = _M_first;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	601a      	str	r2, [r3, #0]
	return *this;
 800927c:	687b      	ldr	r3, [r7, #4]
      }
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009286:	b480      	push	{r7}
 8009288:	b083      	sub	sp, #12
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4618      	mov	r0, r3
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800929e:	b580      	push	{r7, lr}
 80092a0:	b082      	sub	sp, #8
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fdad 	bl	8009e06 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4618      	mov	r0, r3
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80092b6:	b480      	push	{r7}
 80092b8:	b083      	sub	sp, #12
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	605a      	str	r2, [r3, #4]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	609a      	str	r2, [r3, #8]
	{ }
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4618      	mov	r0, r3
 80092d4:	370c      	adds	r7, #12
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	60f8      	str	r0, [r7, #12]
 80092e6:	60b9      	str	r1, [r7, #8]
 80092e8:	607a      	str	r2, [r7, #4]
	if (__p)
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d005      	beq.n	80092fc <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	68b9      	ldr	r1, [r7, #8]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 fd90 	bl	8009e1c <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 80092fc:	bf00      	nop
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4618      	mov	r0, r3
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	60f8      	str	r0, [r7, #12]
 8009322:	60b9      	str	r1, [r7, #8]
 8009324:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8009326:	68b9      	ldr	r1, [r7, #8]
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 fd96 	bl	8009e5a <_ZSt8_DestroyIPfEvT_S1_>
    }
 800932e:	bf00      	nop
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009336:	b480      	push	{r7}
 8009338:	b083      	sub	sp, #12
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4618      	mov	r0, r3
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009356:	b480      	push	{r7}
 8009358:	b083      	sub	sp, #12
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4618      	mov	r0, r3
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800936c:	b590      	push	{r4, r7, lr}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7ff ffed 	bl	8009356 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800937c:	4603      	mov	r3, r0
 800937e:	681c      	ldr	r4, [r3, #0]
 8009380:	6838      	ldr	r0, [r7, #0]
 8009382:	f7ff ffe8 	bl	8009356 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8009386:	4603      	mov	r3, r0
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	429c      	cmp	r4, r3
 800938c:	bf0c      	ite	eq
 800938e:	2301      	moveq	r3, #1
 8009390:	2300      	movne	r3, #0
 8009392:	b2db      	uxtb	r3, r3
 8009394:	4618      	mov	r0, r3
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	bd90      	pop	{r4, r7, pc}

0800939c <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800939c:	b590      	push	{r4, r7, lr}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7ff ffd5 	bl	8009356 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80093ac:	4603      	mov	r3, r0
 80093ae:	681c      	ldr	r4, [r3, #0]
 80093b0:	6838      	ldr	r0, [r7, #0]
 80093b2:	f7ff ffd0 	bl	8009356 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80093b6:	4603      	mov	r3, r0
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	1ae3      	subs	r3, r4, r3
 80093bc:	109b      	asrs	r3, r3, #2
 80093be:	4618      	mov	r0, r3
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd90      	pop	{r4, r7, pc}

080093c6 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80093c6:	b5b0      	push	{r4, r5, r7, lr}
 80093c8:	b084      	sub	sp, #16
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	60f8      	str	r0, [r7, #12]
 80093ce:	60b9      	str	r1, [r7, #8]
 80093d0:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 80093d2:	f107 0208 	add.w	r2, r7, #8
 80093d6:	f107 030c 	add.w	r3, r7, #12
 80093da:	4611      	mov	r1, r2
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff ffc5 	bl	800936c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 80093e2:	4603      	mov	r3, r0
 80093e4:	f083 0301 	eor.w	r3, r3, #1
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d017      	beq.n	800941e <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x58>
				std::__lg(__last - __first) * 2,
 80093ee:	f107 020c 	add.w	r2, r7, #12
 80093f2:	f107 0308 	add.w	r3, r7, #8
 80093f6:	4611      	mov	r1, r2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7ff ffcf 	bl	800939c <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80093fe:	4603      	mov	r3, r0
 8009400:	4618      	mov	r0, r3
 8009402:	f7f8 fdd8 	bl	8001fb6 <_ZSt4__lgi>
 8009406:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 8009408:	005a      	lsls	r2, r3, #1
 800940a:	462b      	mov	r3, r5
 800940c:	68b9      	ldr	r1, [r7, #8]
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 fd39 	bl	8009e86 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 8009414:	4622      	mov	r2, r4
 8009416:	68b9      	ldr	r1, [r7, #8]
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f000 fd6b 	bl	8009ef4 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800941e:	bf00      	nop
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bdb0      	pop	{r4, r5, r7, pc}

08009426 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEvEUlbE_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 8009426:	b590      	push	{r4, r7, lr}
 8009428:	b085      	sub	sp, #20
 800942a:	af00      	add	r7, sp, #0
 800942c:	60f8      	str	r0, [r7, #12]
 800942e:	60b9      	str	r1, [r7, #8]
 8009430:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 8009432:	4618      	mov	r0, r3
 8009434:	f000 fd96 	bl	8009f64 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEvEUlbE_EENS0_10_Iter_predIT_EES6_>
 8009438:	4622      	mov	r2, r4
 800943a:	68b9      	ldr	r1, [r7, #8]
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f000 fda4 	bl	8009f8a <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_>
 8009442:	4603      	mov	r3, r0
    }
 8009444:	4618      	mov	r0, r3
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	bd90      	pop	{r4, r7, pc}

0800944c <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEvEUlbE0_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 800944c:	b590      	push	{r4, r7, lr}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 8009458:	4618      	mov	r0, r3
 800945a:	f000 fdb0 	bl	8009fbe <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEvEUlbE0_EENS0_10_Iter_predIT_EES6_>
 800945e:	4622      	mov	r2, r4
 8009460:	68b9      	ldr	r1, [r7, #8]
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 fdbe 	bl	8009fe4 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_>
 8009468:	4603      	mov	r3, r0
    }
 800946a:	4618      	mov	r0, r3
 800946c:	3714      	adds	r7, #20
 800946e:	46bd      	mov	sp, r7
 8009470:	bd90      	pop	{r4, r7, pc}

08009472 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8009472:	b580      	push	{r7, lr}
 8009474:	b082      	sub	sp, #8
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	4618      	mov	r0, r3
 8009482:	f000 fdc9 	bl	800a018 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800948e:	b480      	push	{r7}
 8009490:	b083      	sub	sp, #12
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4618      	mov	r0, r3
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f000 fdbc 	bl	800a032 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 80094ba:	68b9      	ldr	r1, [r7, #8]
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 fdca 	bl	800a056 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	f107 030c 	add.w	r3, r7, #12
 80094da:	4611      	mov	r1, r2
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 fdd5 	bl	800a08c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	1d1a      	adds	r2, r3, #4
 80094f8:	f107 030c 	add.w	r3, r7, #12
 80094fc:	4611      	mov	r1, r2
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 fdc4 	bl	800a08c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	60f8      	str	r0, [r7, #12]
 8009516:	60b9      	str	r1, [r7, #8]
 8009518:	607a      	str	r2, [r7, #4]
 800951a:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	68b9      	ldr	r1, [r7, #8]
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 fdc3 	bl	800a0ac <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8009526:	4603      	mov	r3, r0
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <_ZNSt6vectorIfSaIfEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fdc6 	bl	800a0d0 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 8009544:	bf00      	nop
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
    }
 8009556:	bf00      	nop
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8009562:	b480      	push	{r7}
 8009564:	b083      	sub	sp, #12
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	109b      	asrs	r3, r3, #2
 8009576:	4618      	mov	r0, r3
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
       *  Memory expansion handler.  Uses the member allocation function to
       *  obtain @a n bytes of memory, and then copies [first,last) into it.
       */
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
 8009582:	b580      	push	{r7, lr}
 8009584:	b086      	sub	sp, #24
 8009586:	af00      	add	r7, sp, #0
 8009588:	60f8      	str	r0, [r7, #12]
 800958a:	60b9      	str	r1, [r7, #8]
 800958c:	607a      	str	r2, [r7, #4]
 800958e:	603b      	str	r3, [r7, #0]
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	68b9      	ldr	r1, [r7, #8]
 8009594:	4618      	mov	r0, r3
 8009596:	f000 fdbc 	bl	800a112 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800959a:	6178      	str	r0, [r7, #20]
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
					  _M_get_Tp_allocator());
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4618      	mov	r0, r3
 80095a0:	f7ff feb0 	bl	8009304 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80095a4:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 80095a6:	697a      	ldr	r2, [r7, #20]
 80095a8:	6839      	ldr	r1, [r7, #0]
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7ff ffaf 	bl	800950e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 80095b0:	697b      	ldr	r3, [r7, #20]
	  __catch(...)
	    {
	      _M_deallocate(__result, __n);
	      __throw_exception_again;
	    }
	}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 80095ba:	b590      	push	{r4, r7, lr}
 80095bc:	b085      	sub	sp, #20
 80095be:	af00      	add	r7, sp, #0
 80095c0:	60f8      	str	r0, [r7, #12]
 80095c2:	60b9      	str	r1, [r7, #8]
 80095c4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f000 fdb7 	bl	800a13a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 80095cc:	4604      	mov	r4, r0
 80095ce:	68b8      	ldr	r0, [r7, #8]
 80095d0:	f000 fdb3 	bl	800a13a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 80095d4:	4603      	mov	r3, r0
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	4619      	mov	r1, r3
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 fdb8 	bl	800a150 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 80095e0:	4603      	mov	r3, r0
    }
 80095e2:	4618      	mov	r0, r3
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd90      	pop	{r4, r7, pc}

080095ea <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	60b9      	str	r1, [r7, #8]
 80095f4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80095f6:	68b9      	ldr	r1, [r7, #8]
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f000 fdca 	bl	800a192 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 80095fe:	bf00      	nop
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <_ZSt12__miter_baseIPfET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8009606:	b480      	push	{r7}
 8009608:	b083      	sub	sp, #12
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4618      	mov	r0, r3
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800961c:	b5b0      	push	{r4, r5, r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 fdc8 	bl	800a1be <_ZSt12__niter_baseIPfET_S1_>
 800962e:	4604      	mov	r4, r0
 8009630:	68b8      	ldr	r0, [r7, #8]
 8009632:	f000 fdc4 	bl	800a1be <_ZSt12__niter_baseIPfET_S1_>
 8009636:	4605      	mov	r5, r0
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4618      	mov	r0, r3
 800963c:	f000 fdbf 	bl	800a1be <_ZSt12__niter_baseIPfET_S1_>
 8009640:	4603      	mov	r3, r0
 8009642:	461a      	mov	r2, r3
 8009644:	4629      	mov	r1, r5
 8009646:	4620      	mov	r0, r4
 8009648:	f000 fdc4 	bl	800a1d4 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>
 800964c:	4602      	mov	r2, r0
 800964e:	1d3b      	adds	r3, r7, #4
 8009650:	4611      	mov	r1, r2
 8009652:	4618      	mov	r0, r3
 8009654:	f000 fdce 	bl	800a1f4 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8009658:	4603      	mov	r3, r0
    }
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bdb0      	pop	{r4, r5, r7, pc}

08009662 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	60f8      	str	r0, [r7, #12]
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	607a      	str	r2, [r7, #4]
 800966e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	68b9      	ldr	r1, [r7, #8]
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f000 fdc9 	bl	800a20c <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 800967a:	4603      	mov	r3, r0
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <_ZSt12__miter_baseIPKcET_S2_>:
    __miter_base(_Iterator __it)
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4618      	mov	r0, r3
 8009690:	370c      	adds	r7, #12
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr

0800969a <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800969a:	b5b0      	push	{r4, r5, r7, lr}
 800969c:	b084      	sub	sp, #16
 800969e:	af00      	add	r7, sp, #0
 80096a0:	60f8      	str	r0, [r7, #12]
 80096a2:	60b9      	str	r1, [r7, #8]
 80096a4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f000 fdc2 	bl	800a230 <_ZSt12__niter_baseIPKcET_S2_>
 80096ac:	4604      	mov	r4, r0
 80096ae:	68b8      	ldr	r0, [r7, #8]
 80096b0:	f000 fdbe 	bl	800a230 <_ZSt12__niter_baseIPKcET_S2_>
 80096b4:	4605      	mov	r5, r0
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f000 fdc4 	bl	800a246 <_ZSt12__niter_baseIPcET_S1_>
 80096be:	4603      	mov	r3, r0
 80096c0:	461a      	mov	r2, r3
 80096c2:	4629      	mov	r1, r5
 80096c4:	4620      	mov	r0, r4
 80096c6:	f000 fdc9 	bl	800a25c <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 80096ca:	4602      	mov	r2, r0
 80096cc:	1d3b      	adds	r3, r7, #4
 80096ce:	4611      	mov	r1, r2
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 fdd3 	bl	800a27c <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 80096d6:	4603      	mov	r3, r0
    }
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bdb0      	pop	{r4, r5, r7, pc}

080096e0 <_ZNSaIN3jlb4EdgeEEC1Ev>:
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fdd3 	bl	800a294 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	605a      	str	r2, [r3, #4]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	609a      	str	r2, [r3, #8]
	{ }
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4618      	mov	r0, r3
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
	if (__p)
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d005      	beq.n	800973e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	68b9      	ldr	r1, [r7, #8]
 8009738:	4618      	mov	r0, r3
 800973a:	f000 fdb6 	bl	800a2aa <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>
      }
 800973e:	bf00      	nop
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8009746:	b480      	push	{r7}
 8009748:	b083      	sub	sp, #12
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4618      	mov	r0, r3
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8009768:	68b9      	ldr	r1, [r7, #8]
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 fdbc 	bl	800a2e8 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>
    }
 8009770:	bf00      	nop
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	4618      	mov	r0, r3
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8009796:	b580      	push	{r7, lr}
 8009798:	b082      	sub	sp, #8
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fdb5 	bl	800a314 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
      struct _Vector_impl
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f010 ffba 	bl	801a74a <_ZNSaIcED1Ev>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4618      	mov	r0, r3
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6879      	ldr	r1, [r7, #4]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 fd9c 	bl	800a32e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 80097f6:	68b9      	ldr	r1, [r7, #8]
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f000 fdaa 	bl	800a352 <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <_ZNSt12_Vector_baseIcSaIcEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	689a      	ldr	r2, [r3, #8]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800981e:	461a      	mov	r2, r3
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fdb0 	bl	800a386 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      }
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4618      	mov	r0, r3
 800982a:	f7ff ffcd 	bl	80097c8 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4618      	mov	r0, r3
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <_ZNKSt6vectorIcSaIcEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	f107 030c 	add.w	r3, r7, #12
 8009846:	4611      	mov	r1, r2
 8009848:	4618      	mov	r0, r3
 800984a:	f000 fdaf 	bl	800a3ac <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <_ZNKSt6vectorIcSaIcEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	1d1a      	adds	r2, r3, #4
 8009864:	f107 030c 	add.w	r3, r7, #12
 8009868:	4611      	mov	r1, r2
 800986a:	4618      	mov	r0, r3
 800986c:	f000 fd9e 	bl	800a3ac <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800987a:	b480      	push	{r7}
 800987c:	b083      	sub	sp, #12
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4618      	mov	r0, r3
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
 800989c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	68b9      	ldr	r1, [r7, #8]
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 fd92 	bl	800a3cc <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 80098a8:	4603      	mov	r3, r0
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	60b9      	str	r1, [r7, #8]
 80098bc:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80098be:	68b9      	ldr	r1, [r7, #8]
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 fd95 	bl	800a3f0 <_ZSt8_DestroyIPcEvT_S1_>
    }
 80098c6:	bf00      	nop
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80098ce:	b480      	push	{r7}
 80098d0:	b083      	sub	sp, #12
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4618      	mov	r0, r3
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80098e4:	b5b0      	push	{r4, r5, r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685a      	ldr	r2, [r3, #4]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d012      	beq.n	8009920 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80098fa:	687c      	ldr	r4, [r7, #4]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685d      	ldr	r5, [r3, #4]
 8009900:	6838      	ldr	r0, [r7, #0]
 8009902:	f000 fd8b 	bl	800a41c <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009906:	4603      	mov	r3, r0
 8009908:	461a      	mov	r2, r3
 800990a:	4629      	mov	r1, r5
 800990c:	4620      	mov	r0, r4
 800990e:	f000 fde7 	bl	800a4e0 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	f103 0218 	add.w	r2, r3, #24
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	605a      	str	r2, [r3, #4]
 800991e:	e00c      	b.n	800993a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fdef 	bl	800a504 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 8009926:	4604      	mov	r4, r0
 8009928:	6838      	ldr	r0, [r7, #0]
 800992a:	f000 fd77 	bl	800a41c <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800992e:	4603      	mov	r3, r0
 8009930:	461a      	mov	r2, r3
 8009932:	4621      	mov	r1, r4
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fdf7 	bl	800a528 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fe7e 	bl	800a63c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>
 8009940:	4603      	mov	r3, r0
      }
 8009942:	4618      	mov	r0, r3
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bdb0      	pop	{r4, r5, r7, pc}

0800994a <_ZNSaIN3jlb4NodeEEC1Ev>:
 800994a:	b580      	push	{r7, lr}
 800994c:	b082      	sub	sp, #8
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fe8d 	bl	800a672 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4618      	mov	r0, r3
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8009962:	b480      	push	{r7}
 8009964:	b083      	sub	sp, #12
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	601a      	str	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	605a      	str	r2, [r3, #4]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	609a      	str	r2, [r3, #8]
	{ }
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4618      	mov	r0, r3
 8009980:	370c      	adds	r7, #12
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	60f8      	str	r0, [r7, #12]
 8009992:	60b9      	str	r1, [r7, #8]
 8009994:	607a      	str	r2, [r7, #4]
	if (__p)
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d005      	beq.n	80099a8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	68b9      	ldr	r1, [r7, #8]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 fe70 	bl	800a688 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>
      }
 80099a8:	bf00      	nop
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4618      	mov	r0, r3
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b084      	sub	sp, #16
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	60f8      	str	r0, [r7, #12]
 80099ce:	60b9      	str	r1, [r7, #8]
 80099d0:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80099d2:	68b9      	ldr	r1, [r7, #8]
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 fe76 	bl	800a6c6 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>
    }
 80099da:	bf00      	nop
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80099e2:	b480      	push	{r7}
 80099e4:	b083      	sub	sp, #12
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4618      	mov	r0, r3
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80099f8:	b5b0      	push	{r4, r5, r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d012      	beq.n	8009a34 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8009a0e:	687c      	ldr	r4, [r7, #4]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685d      	ldr	r5, [r3, #4]
 8009a14:	6838      	ldr	r0, [r7, #0]
 8009a16:	f000 fe6c 	bl	800a6f2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	4629      	mov	r1, r5
 8009a20:	4620      	mov	r0, r4
 8009a22:	f000 fea8 	bl	800a776 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	f103 0218 	add.w	r2, r3, #24
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	605a      	str	r2, [r3, #4]
 8009a32:	e00c      	b.n	8009a4e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 feb0 	bl	800a79a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	6838      	ldr	r0, [r7, #0]
 8009a3e:	f000 fe58 	bl	800a6f2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009a42:	4603      	mov	r3, r0
 8009a44:	461a      	mov	r2, r3
 8009a46:	4621      	mov	r1, r4
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 feb7 	bl	800a7bc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 ff48 	bl	800a8e4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>
 8009a54:	4603      	mov	r3, r0
      }
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bdb0      	pop	{r4, r5, r7, pc}

08009a5e <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b082      	sub	sp, #8
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
 8009a66:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 fc5e 	bl	800a32e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4618      	mov	r0, r3
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <_ZNKSt16initializer_listIcE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <_ZNKSt16initializer_listIcE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8009a94:	b590      	push	{r4, r7, lr}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f7ff ffed 	bl	8009a7c <_ZNKSt16initializer_listIcE5beginEv>
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 ff38 	bl	800a91a <_ZNKSt16initializer_listIcE4sizeEv>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	4423      	add	r3, r4
 8009aae:	4618      	mov	r0, r3
 8009ab0:	370c      	adds	r7, #12
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd90      	pop	{r4, r7, pc}

08009ab6 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8009ab6:	b5b0      	push	{r4, r5, r7, lr}
 8009ab8:	b082      	sub	sp, #8
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
 8009abe:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8009ac0:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8009ac2:	1d3b      	adds	r3, r7, #4
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 ff34 	bl	800a932 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8009aca:	462a      	mov	r2, r5
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f000 ff39 	bl	800a946 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8009ad4:	4603      	mov	r3, r0
    }
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3708      	adds	r7, #8
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bdb0      	pop	{r4, r5, r7, pc}

08009ade <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8009ade:	b590      	push	{r4, r7, lr}
 8009ae0:	b087      	sub	sp, #28
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	60f8      	str	r0, [r7, #12]
 8009ae6:	60b9      	str	r1, [r7, #8]
 8009ae8:	607a      	str	r2, [r7, #4]
 8009aea:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8009aec:	6879      	ldr	r1, [r7, #4]
 8009aee:	68b8      	ldr	r0, [r7, #8]
 8009af0:	f7ff ffe1 	bl	8009ab6 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8009af4:	4603      	mov	r3, r0
 8009af6:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8009af8:	68fc      	ldr	r4, [r7, #12]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7ff febc 	bl	800987a <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8009b02:	4603      	mov	r3, r0
 8009b04:	4619      	mov	r1, r3
 8009b06:	6978      	ldr	r0, [r7, #20]
 8009b08:	f000 ff2c 	bl	800a964 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	4619      	mov	r1, r3
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 ff4f 	bl	800a9b4 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 8009b16:	4602      	mov	r2, r0
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	441a      	add	r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7ff fea3 	bl	800987a <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8009b34:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8009b36:	4622      	mov	r2, r4
 8009b38:	6879      	ldr	r1, [r7, #4]
 8009b3a:	68b8      	ldr	r0, [r7, #8]
 8009b3c:	f000 ff4e 	bl	800a9dc <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>
 8009b40:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	605a      	str	r2, [r3, #4]
	}
 8009b46:	bf00      	nop
 8009b48:	371c      	adds	r7, #28
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd90      	pop	{r4, r7, pc}

08009b4e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009b4e:	b480      	push	{r7}
 8009b50:	b083      	sub	sp, #12
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
 8009b56:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	601a      	str	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4618      	mov	r0, r3
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b084      	sub	sp, #16
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 8009b76:	f107 030c 	add.w	r3, r7, #12
 8009b7a:	6879      	ldr	r1, [r7, #4]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f000 ff3e 	bl	800a9fe <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>:
    }

  template<typename _Iterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 8009b8c:	b590      	push	{r4, r7, lr}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
    {
      return __find_if(__first, __last, __pred,
		       std::__iterator_category(__first));
 8009b98:	f107 030c 	add.w	r3, r7, #12
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 ff3d 	bl	800aa1c <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return __find_if(__first, __last, __pred,
 8009ba2:	4623      	mov	r3, r4
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	68b9      	ldr	r1, [r7, #8]
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 ff88 	bl	800aabe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>
 8009bae:	4603      	mov	r3, r0
    }
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd90      	pop	{r4, r7, pc}

08009bb8 <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	601a      	str	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	605a      	str	r2, [r3, #4]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	3308      	adds	r3, #8
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f001 f80d 	bl	800abf0 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3318      	adds	r3, #24
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f001 f808 	bl	800abf0 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
	{ }
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4618      	mov	r0, r3
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8009bea:	b480      	push	{r7}
 8009bec:	b083      	sub	sp, #12
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d201      	bcs.n	8009c04 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	e000      	b.n	8009c06 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8009c04:	687b      	ldr	r3, [r7, #4]
    }
 8009c06:	4618      	mov	r0, r3
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8009c12:	b590      	push	{r4, r7, lr}
 8009c14:	b085      	sub	sp, #20
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
 8009c1a:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8009c1c:	f107 030c 	add.w	r3, r7, #12
 8009c20:	6879      	ldr	r1, [r7, #4]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f000 f859 	bl	8009cda <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8009c28:	f107 030c 	add.w	r3, r7, #12
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 fff5 	bl	800ac1e <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>
 8009c34:	4604      	mov	r4, r0
 8009c36:	bf00      	nop
      }
 8009c38:	f107 030c 	add.w	r3, r7, #12
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f000 f85d 	bl	8009cfc <_ZNSaIPfED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8009c42:	4623      	mov	r3, r4
      }
 8009c44:	4618      	mov	r0, r3
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd90      	pop	{r4, r7, pc}

08009c4c <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b086      	sub	sp, #24
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	617b      	str	r3, [r7, #20]
 8009c5c:	e008      	b.n	8009c70 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x24>
	    *__cur = this->_M_allocate_node();
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f000 f8ad 	bl	8009dbe <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 8009c64:	4602      	mov	r2, r0
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	617b      	str	r3, [r7, #20]
 8009c70:	697a      	ldr	r2, [r7, #20]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d3f2      	bcc.n	8009c5e <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x12>
    }
 8009c78:	bf00      	nop
 8009c7a:	bf00      	nop
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8009c82:	b590      	push	{r4, r7, lr}
 8009c84:	b083      	sub	sp, #12
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
 8009c8a:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685c      	ldr	r4, [r3, #4]
 8009c9e:	f000 f8a0 	bl	8009de2 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	18e2      	adds	r2, r4, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	609a      	str	r2, [r3, #8]
      }
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd90      	pop	{r4, r7, pc}

08009cb4 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8009cb4:	b590      	push	{r4, r7, lr}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8009cbe:	687c      	ldr	r4, [r7, #4]
 8009cc0:	2004      	movs	r0, #4
 8009cc2:	f7f8 f987 	bl	8001fd4 <_ZSt16__deque_buf_sizej>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	461a      	mov	r2, r3
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f000 f8a5 	bl	8009e1c <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8009cd2:	bf00      	nop
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd90      	pop	{r4, r7, pc}

08009cda <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b082      	sub	sp, #8
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8009ce4:	6838      	ldr	r0, [r7, #0]
 8009ce6:	f000 ffba 	bl	800ac5e <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8009cea:	4603      	mov	r3, r0
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 ffc0 	bl	800ac74 <_ZNSaIPfEC1IfEERKSaIT_E>
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <_ZNSaIPfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4618      	mov	r0, r3
 8009d08:	370c      	adds	r7, #12
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr

08009d12 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b088      	sub	sp, #32
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	60f8      	str	r0, [r7, #12]
 8009d1a:	60b9      	str	r1, [r7, #8]
 8009d1c:	607a      	str	r2, [r7, #4]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	61fb      	str	r3, [r7, #28]
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	61bb      	str	r3, [r7, #24]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8009d2a:	f7f8 f901 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d003      	beq.n	8009d3c <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 8009d34:	69b8      	ldr	r0, [r7, #24]
 8009d36:	f010 fcf1 	bl	801a71c <_ZdlPv>
	    return;
 8009d3a:	e005      	b.n	8009d48 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	69b9      	ldr	r1, [r7, #24]
 8009d40:	69f8      	ldr	r0, [r7, #28]
 8009d42:	f001 ffb2 	bl	800bcaa <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 8009d46:	bf00      	nop
 8009d48:	bf00      	nop
 8009d4a:	3720      	adds	r7, #32
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <_ZNKSt5dequeIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 ff74 	bl	800ac5e <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8009d76:	4603      	mov	r3, r0
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 ff94 	bl	800aca6 <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	4618      	mov	r0, r3
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8009d9a:	6879      	ldr	r1, [r7, #4]
 8009d9c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8009d9e:	6879      	ldr	r1, [r7, #4]
 8009da0:	6809      	ldr	r1, [r1, #0]
 8009da2:	1a41      	subs	r1, r0, r1
 8009da4:	1089      	asrs	r1, r1, #2
 8009da6:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d904      	bls.n	8009db6 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8009dac:	2200      	movs	r2, #0
 8009dae:	6839      	ldr	r1, [r7, #0]
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 ffc2 	bl	800ad3a <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>
      }
 8009db6:	bf00      	nop
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8009dbe:	b590      	push	{r4, r7, lr}
 8009dc0:	b083      	sub	sp, #12
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8009dc6:	687c      	ldr	r4, [r7, #4]
 8009dc8:	2004      	movs	r0, #4
 8009dca:	f7f8 f903 	bl	8001fd4 <_ZSt16__deque_buf_sizej>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f001 f84b 	bl	800ae6e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8009dd8:	4603      	mov	r3, r0
      }
 8009dda:	4618      	mov	r0, r3
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd90      	pop	{r4, r7, pc}

08009de2 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8009de2:	b580      	push	{r7, lr}
 8009de4:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8009de6:	2004      	movs	r0, #4
 8009de8:	f7f8 f8f4 	bl	8001fd4 <_ZSt16__deque_buf_sizej>
 8009dec:	4603      	mov	r3, r0
 8009dee:	4618      	mov	r0, r3
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <_ZSt10destroy_atIfEvPT_>:
    destroy_at(_Tp* __location)
 8009df2:	b480      	push	{r7}
 8009df4:	b083      	sub	sp, #12
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
    }
 8009dfa:	bf00      	nop
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009e06:	b480      	push	{r7}
 8009e08:	b083      	sub	sp, #12
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4618      	mov	r0, r3
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b088      	sub	sp, #32
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	61fb      	str	r3, [r7, #28]
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	61bb      	str	r3, [r7, #24]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8009e34:	f7f8 f87c 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x2a>
	    ::operator delete(__p);
 8009e3e:	69b8      	ldr	r0, [r7, #24]
 8009e40:	f010 fc6c 	bl	801a71c <_ZdlPv>
	    return;
 8009e44:	e005      	b.n	8009e52 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	69b9      	ldr	r1, [r7, #24]
 8009e4a:	69f8      	ldr	r0, [r7, #28]
 8009e4c:	f001 ffa1 	bl	800bd92 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
      { __a.deallocate(__p, __n); }
 8009e50:	bf00      	nop
 8009e52:	bf00      	nop
 8009e54:	3720      	adds	r7, #32
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <_ZSt8_DestroyIPfEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b082      	sub	sp, #8
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 8009e64:	f7f8 f864 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d004      	beq.n	8009e78 <_ZSt8_DestroyIPfEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 f81c 	bl	800aeae <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>
 8009e76:	e003      	b.n	8009e80 <_ZSt8_DestroyIPfEvT_S1_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f001 f830 	bl	800aee0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8009e86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e88:	b087      	sub	sp, #28
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	60f8      	str	r0, [r7, #12]
 8009e8e:	60b9      	str	r1, [r7, #8]
 8009e90:	607a      	str	r2, [r7, #4]
 8009e92:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 8009e94:	e01b      	b.n	8009ece <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x48>
	  if (__depth_limit == 0)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d106      	bne.n	8009eaa <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 8009e9c:	4633      	mov	r3, r6
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	68b9      	ldr	r1, [r7, #8]
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f001 f827 	bl	800aef6 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 8009ea8:	e021      	b.n	8009eee <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	3b01      	subs	r3, #1
 8009eae:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 8009eb0:	462a      	mov	r2, r5
 8009eb2:	68b9      	ldr	r1, [r7, #8]
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f001 f835 	bl	800af24 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8009ebe:	4623      	mov	r3, r4
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	68b9      	ldr	r1, [r7, #8]
 8009ec4:	6978      	ldr	r0, [r7, #20]
 8009ec6:	f7ff ffde 	bl	8009e86 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8009ece:	f107 020c 	add.w	r2, r7, #12
 8009ed2:	f107 0308 	add.w	r3, r7, #8
 8009ed6:	4611      	mov	r1, r2
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7ff fa5f 	bl	800939c <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b10      	cmp	r3, #16
 8009ee2:	bfcc      	ite	gt
 8009ee4:	2301      	movgt	r3, #1
 8009ee6:	2300      	movle	r3, #0
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1d3      	bne.n	8009e96 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x10>
    }
 8009eee:	371c      	adds	r7, #28
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ef4 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8009ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 8009f00:	f107 020c 	add.w	r2, r7, #12
 8009f04:	f107 0308 	add.w	r3, r7, #8
 8009f08:	4611      	mov	r1, r2
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7ff fa46 	bl	800939c <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b10      	cmp	r3, #16
 8009f14:	bfcc      	ite	gt
 8009f16:	2301      	movgt	r3, #1
 8009f18:	2300      	movle	r3, #0
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d018      	beq.n	8009f52 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8009f20:	f107 030c 	add.w	r3, r7, #12
 8009f24:	2110      	movs	r1, #16
 8009f26:	4618      	mov	r0, r3
 8009f28:	f001 f83c 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	4632      	mov	r2, r6
 8009f30:	4619      	mov	r1, r3
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f001 f8a7 	bl	800b086 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 8009f38:	f107 030c 	add.w	r3, r7, #12
 8009f3c:	2110      	movs	r1, #16
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f001 f830 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8009f44:	4603      	mov	r3, r0
 8009f46:	462a      	mov	r2, r5
 8009f48:	68b9      	ldr	r1, [r7, #8]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f001 f904 	bl	800b158 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8009f50:	e004      	b.n	8009f5c <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 8009f52:	4622      	mov	r2, r4
 8009f54:	68b9      	ldr	r1, [r7, #8]
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f001 f895 	bl	800b086 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8009f5c:	bf00      	nop
 8009f5e:	3714      	adds	r7, #20
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f64 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEvEUlbE_EENS0_10_Iter_predIT_EES6_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 8009f64:	b5b0      	push	{r4, r5, r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 8009f6c:	1d3b      	adds	r3, r7, #4
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f001 f91a 	bl	800b1a8 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 8009f74:	f107 030c 	add.w	r3, r7, #12
 8009f78:	4629      	mov	r1, r5
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f001 f91f 	bl	800b1be <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE_EC1ES4_>
 8009f80:	bf00      	nop
 8009f82:	4620      	mov	r0, r4
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bdb0      	pop	{r4, r5, r7, pc}

08009f8a <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 8009f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f8c:	b085      	sub	sp, #20
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	60b9      	str	r1, [r7, #8]
 8009f94:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 8009f96:	68fc      	ldr	r4, [r7, #12]
 8009f98:	7938      	ldrb	r0, [r7, #4]
 8009f9a:	f001 f91e 	bl	800b1da <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEvEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 8009f9e:	f107 030c 	add.w	r3, r7, #12
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f001 f92c 	bl	800b200 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 8009fa8:	4633      	mov	r3, r6
 8009faa:	462a      	mov	r2, r5
 8009fac:	68b9      	ldr	r1, [r7, #8]
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f001 f944 	bl	800b23c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>
 8009fb4:	4603      	mov	r3, r0
    }
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fbe <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEvEUlbE0_EENS0_10_Iter_predIT_EES6_>:
    __pred_iter(_Predicate __pred)
 8009fbe:	b5b0      	push	{r4, r5, r7, lr}
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 8009fc6:	1d3b      	adds	r3, r7, #4
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f001 f9b6 	bl	800b33a <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 8009fce:	f107 030c 	add.w	r3, r7, #12
 8009fd2:	4629      	mov	r1, r5
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f001 f9bb 	bl	800b350 <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE0_EC1ES4_>
 8009fda:	bf00      	nop
 8009fdc:	4620      	mov	r0, r4
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bdb0      	pop	{r4, r5, r7, pc}

08009fe4 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 8009fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 8009ff0:	68fc      	ldr	r4, [r7, #12]
 8009ff2:	7938      	ldrb	r0, [r7, #4]
 8009ff4:	f001 f9ba 	bl	800b36c <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 8009ff8:	f107 030c 	add.w	r3, r7, #12
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f001 f8ff 	bl	800b200 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 800a002:	4633      	mov	r3, r6
 800a004:	462a      	mov	r2, r5
 800a006:	68b9      	ldr	r1, [r7, #8]
 800a008:	4620      	mov	r0, r4
 800a00a:	f001 f9d6 	bl	800b3ba <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>
 800a00e:	4603      	mov	r3, r0
    }
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a018 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f001 fa47 	bl	800b4b8 <_ZNSaIfEC1ERKS_>
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800a032:	b580      	push	{r7, lr}
 800a034:	b082      	sub	sp, #8
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f001 fa3a 	bl	800b4b8 <_ZNSaIfEC1ERKS_>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4618      	mov	r0, r3
 800a048:	f7ff f935 	bl	80092b6 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4618      	mov	r0, r3
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800a056:	b580      	push	{r7, lr}
 800a058:	b082      	sub	sp, #8
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f855 	bl	800a112 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800a068:	4602      	mov	r2, r0
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	441a      	add	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	609a      	str	r2, [r3, #8]
      }
 800a084:	bf00      	nop
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	601a      	str	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	68b9      	ldr	r1, [r7, #8]
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f001 fa07 	bl	800b4d4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 800a0c6:	4603      	mov	r3, r0
    }
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3718      	adds	r7, #24
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800a0d0:	b590      	push	{r4, r7, lr}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	685a      	ldr	r2, [r3, #4]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	109b      	asrs	r3, r3, #2
 800a0e4:	60fb      	str	r3, [r7, #12]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00e      	beq.n	800a10a <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff f906 	bl	8009304 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800a0f8:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	6838      	ldr	r0, [r7, #0]
 800a100:	f7ff f90b 	bl	800931a <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800a10a:	bf00      	nop
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd90      	pop	{r4, r7, pc}

0800a112 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800a112:	b580      	push	{r7, lr}
 800a114:	b082      	sub	sp, #8
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d006      	beq.n	800a130 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	4618      	mov	r0, r3
 800a128:	f000 fea1 	bl	800ae6e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 800a12c:	4603      	mov	r3, r0
 800a12e:	e000      	b.n	800a132 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 800a130:	2300      	movs	r3, #0
      }
 800a132:	4618      	mov	r0, r3
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 800a13a:	b480      	push	{r7}
 800a13c:	b083      	sub	sp, #12
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
    { return __it; }
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4618      	mov	r0, r3
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800a150:	b5b0      	push	{r4, r5, r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f001 f9c9 	bl	800b4f4 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800a162:	4604      	mov	r4, r0
 800a164:	68b8      	ldr	r0, [r7, #8]
 800a166:	f001 f9c5 	bl	800b4f4 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800a16a:	4605      	mov	r5, r0
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f001 f9cf 	bl	800b510 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800a172:	4603      	mov	r3, r0
 800a174:	461a      	mov	r2, r3
 800a176:	4629      	mov	r1, r5
 800a178:	4620      	mov	r0, r4
 800a17a:	f001 f9d7 	bl	800b52c <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 800a17e:	4603      	mov	r3, r0
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f001 f9e2 	bl	800b54c <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 800a188:	4603      	mov	r3, r0
    }
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bdb0      	pop	{r4, r5, r7, pc}

0800a192 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a192:	b580      	push	{r7, lr}
 800a194:	b082      	sub	sp, #8
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800a19c:	f7f7 fec8 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d004      	beq.n	800a1b0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f001 f9e6 	bl	800b57a <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
 800a1ae:	e003      	b.n	800a1b8 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x26>
	__destroy(__first, __last);
 800a1b0:	6839      	ldr	r1, [r7, #0]
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f001 fa08 	bl	800b5c8 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 800a1be:	b480      	push	{r7}
 800a1c0:	b083      	sub	sp, #12
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
    { return __it; }
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	68b9      	ldr	r1, [r7, #8]
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f001 f9fa 	bl	800b5de <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
    { return __res; }
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	4618      	mov	r0, r3
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800a218:	2301      	movs	r3, #1
 800a21a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	68b9      	ldr	r1, [r7, #8]
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f001 f9f9 	bl	800b618 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 800a226:	4603      	mov	r3, r0
    }
 800a228:	4618      	mov	r0, r3
 800a22a:	3718      	adds	r7, #24
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <_ZSt12__niter_baseIPKcET_S2_>:
    __niter_base(_Iterator __it)
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
    { return __it; }
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4618      	mov	r0, r3
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr

0800a246 <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 800a246:	b480      	push	{r7}
 800a248:	b083      	sub	sp, #12
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4618      	mov	r0, r3
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	68b9      	ldr	r1, [r7, #8]
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f001 f9e3 	bl	800b638 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>
 800a272:	4603      	mov	r3, r0
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
    { return __res; }
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	4618      	mov	r0, r3
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>:
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr

0800a2aa <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b088      	sub	sp, #32
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	60f8      	str	r0, [r7, #12]
 800a2b2:	60b9      	str	r1, [r7, #8]
 800a2b4:	607a      	str	r2, [r7, #4]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	61fb      	str	r3, [r7, #28]
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	61bb      	str	r3, [r7, #24]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800a2c2:	f7f7 fe35 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d003      	beq.n	800a2d4 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800a2cc:	69b8      	ldr	r0, [r7, #24]
 800a2ce:	f010 fa25 	bl	801a71c <_ZdlPv>
	    return;
 800a2d2:	e005      	b.n	800a2e0 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	69b9      	ldr	r1, [r7, #24]
 800a2d8:	69f8      	ldr	r0, [r7, #28]
 800a2da:	f002 f873 	bl	800c3c4 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800a2de:	bf00      	nop
 800a2e0:	bf00      	nop
 800a2e2:	3720      	adds	r7, #32
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800a2f2:	f7f7 fe1d 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d004      	beq.n	800a306 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800a2fc:	6839      	ldr	r1, [r7, #0]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f001 f9f4 	bl	800b6ec <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
 800a304:	e003      	b.n	800a30e <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x26>
	__destroy(__first, __last);
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f001 f9ef 	bl	800b6ec <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
    }
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800a31e:	6839      	ldr	r1, [r7, #0]
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f010 fa11 	bl	801a748 <_ZNSaIcEC1ERKS_>
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800a338:	6839      	ldr	r1, [r7, #0]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f010 fa04 	bl	801a748 <_ZNSaIcEC1ERKS_>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4618      	mov	r0, r3
 800a344:	f001 f9eb 	bl	800b71e <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800a352:	b580      	push	{r7, lr}
 800a354:	b082      	sub	sp, #8
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fb28 	bl	800a9b4 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800a364:	4602      	mov	r2, r0
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	441a      	add	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	609a      	str	r2, [r3, #8]
      }
 800a37e:	bf00      	nop
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>:
      _M_deallocate(pointer __p, size_t __n)
 800a386:	b580      	push	{r7, lr}
 800a388:	b084      	sub	sp, #16
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	60f8      	str	r0, [r7, #12]
 800a38e:	60b9      	str	r1, [r7, #8]
 800a390:	607a      	str	r2, [r7, #4]
	if (__p)
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d005      	beq.n	800a3a4 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	68b9      	ldr	r1, [r7, #8]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f001 f985 	bl	800b6ae <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 800a3a4:	bf00      	nop
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	601a      	str	r2, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	68b9      	ldr	r1, [r7, #8]
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f001 f9b0 	bl	800b746 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>
 800a3e6:	4603      	mov	r3, r0
    }
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3718      	adds	r7, #24
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <_ZSt8_DestroyIPcEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800a3fa:	f7f7 fd99 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d004      	beq.n	800a40e <_ZSt8_DestroyIPcEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800a404:	6839      	ldr	r1, [r7, #0]
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f001 f9ad 	bl	800b766 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>
 800a40c:	e003      	b.n	800a416 <_ZSt8_DestroyIPcEvT_S1_+0x26>
	__destroy(__first, __last);
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f001 f9c1 	bl	800b798 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>
    }
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4618      	mov	r0, r3
 800a428:	370c      	adds	r7, #12
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 800a432:	b580      	push	{r7, lr}
 800a434:	b082      	sub	sp, #8
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
 800a43a:	6039      	str	r1, [r7, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	4611      	mov	r1, r2
 800a442:	4618      	mov	r0, r3
 800a444:	f001 f9b3 	bl	800b7ae <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <_ZNSt6vectorIcSaIcEEC1EOS1_>:
      vector(vector&&) noexcept = default;
 800a452:	b580      	push	{r7, lr}
 800a454:	b082      	sub	sp, #8
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
 800a45a:	6039      	str	r1, [r7, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	4611      	mov	r1, r2
 800a462:	4618      	mov	r0, r3
 800a464:	f7ff ffe5 	bl	800a432 <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4618      	mov	r0, r3
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <_ZN3jlb4EdgeC1EOS0_>:
    struct Edge
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	6039      	str	r1, [r7, #0]
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	781a      	ldrb	r2, [r3, #0]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	701a      	strb	r2, [r3, #0]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	685a      	ldr	r2, [r3, #4]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	605a      	str	r2, [r3, #4]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f103 0208 	add.w	r2, r3, #8
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	3308      	adds	r3, #8
 800a496:	4619      	mov	r1, r3
 800a498:	4610      	mov	r0, r2
 800a49a:	f7ff ffda 	bl	800a452 <_ZNSt6vectorIcSaIcEEC1EOS1_>
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	695a      	ldr	r2, [r3, #20]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	615a      	str	r2, [r3, #20]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800a4b0:	b5b0      	push	{r4, r5, r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800a4ba:	6838      	ldr	r0, [r7, #0]
 800a4bc:	f7ff ffae 	bl	800a41c <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	2018      	movs	r0, #24
 800a4c8:	f7f7 fd56 	bl	8001f78 <_ZnwjPv>
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f7ff ffce 	bl	800a472 <_ZN3jlb4EdgeC1EOS0_>
 800a4d6:	4623      	mov	r3, r4
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bdb0      	pop	{r4, r5, r7, pc}

0800a4e0 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7ff ff95 	bl	800a41c <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	68b8      	ldr	r0, [r7, #8]
 800a4f8:	f7ff ffda 	bl	800a4b0 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800a4fc:	bf00      	nop
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	1d1a      	adds	r2, r3, #4
 800a510:	f107 030c 	add.w	r3, r7, #12
 800a514:	4611      	mov	r1, r2
 800a516:	4618      	mov	r0, r3
 800a518:	f001 f964 	bl	800b7e4 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4618      	mov	r0, r3
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
	...

0800a528 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800a528:	b5b0      	push	{r4, r5, r7, lr}
 800a52a:	b08c      	sub	sp, #48	; 0x30
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800a534:	4a3f      	ldr	r2, [pc, #252]	; (800a634 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x10c>)
 800a536:	2101      	movs	r1, #1
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f001 f963 	bl	800b804 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>
 800a53e:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f001 f9a0 	bl	800b892 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800a552:	4603      	mov	r3, r0
 800a554:	617b      	str	r3, [r7, #20]
 800a556:	f107 0214 	add.w	r2, r7, #20
 800a55a:	f107 0308 	add.w	r3, r7, #8
 800a55e:	4611      	mov	r1, r2
 800a560:	4618      	mov	r0, r3
 800a562:	f001 f9a7 	bl	800b8b4 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800a566:	4603      	mov	r3, r0
 800a568:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a56e:	4618      	mov	r0, r3
 800a570:	f001 f9ba 	bl	800b8e8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 800a574:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800a57a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800a57c:	6a3a      	ldr	r2, [r7, #32]
 800a57e:	4613      	mov	r3, r2
 800a580:	005b      	lsls	r3, r3, #1
 800a582:	4413      	add	r3, r2
 800a584:	00db      	lsls	r3, r3, #3
 800a586:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	189d      	adds	r5, r3, r2
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7ff ff45 	bl	800a41c <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a592:	4603      	mov	r3, r0
 800a594:	461a      	mov	r2, r3
 800a596:	4629      	mov	r1, r5
 800a598:	4620      	mov	r0, r4
 800a59a:	f7ff ffa1 	bl	800a4e0 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800a59e:	2300      	movs	r3, #0
 800a5a0:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800a5a2:	f107 0308 	add.w	r3, r7, #8
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f001 f9c6 	bl	800b938 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7ff f8c7 	bl	8009746 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800a5b8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800a5ba:	69fa      	ldr	r2, [r7, #28]
 800a5bc:	4621      	mov	r1, r4
 800a5be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5c0:	f001 f9a6 	bl	800b910 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800a5c4:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	3318      	adds	r3, #24
 800a5ca:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800a5cc:	f107 0308 	add.w	r3, r7, #8
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f001 f9b1 	bl	800b938 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7ff f8b2 	bl	8009746 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800a5e2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800a5e4:	69ba      	ldr	r2, [r7, #24]
 800a5e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f001 f991 	bl	800b910 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800a5ee:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800a5f0:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	689a      	ldr	r2, [r3, #8]
 800a5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f8:	1ad3      	subs	r3, r2, r3
 800a5fa:	10db      	asrs	r3, r3, #3
 800a5fc:	4a0e      	ldr	r2, [pc, #56]	; (800a638 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 800a5fe:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800a602:	461a      	mov	r2, r3
 800a604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a606:	f7ff f88b 	bl	8009720 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	69fa      	ldr	r2, [r7, #28]
 800a60e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800a616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a618:	4613      	mov	r3, r2
 800a61a:	005b      	lsls	r3, r3, #1
 800a61c:	4413      	add	r3, r2
 800a61e:	00db      	lsls	r3, r3, #3
 800a620:	461a      	mov	r2, r3
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	441a      	add	r2, r3
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	609a      	str	r2, [r3, #8]
    }
 800a62a:	bf00      	nop
 800a62c:	3730      	adds	r7, #48	; 0x30
 800a62e:	46bd      	mov	sp, r7
 800a630:	bdb0      	pop	{r4, r5, r7, pc}
 800a632:	bf00      	nop
 800a634:	0801e608 	.word	0x0801e608
 800a638:	aaaaaaab 	.word	0xaaaaaaab

0800a63c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7ff ff5d 	bl	800a504 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800a64a:	4603      	mov	r3, r0
 800a64c:	60fb      	str	r3, [r7, #12]
 800a64e:	f107 030c 	add.w	r3, r7, #12
 800a652:	2101      	movs	r1, #1
 800a654:	4618      	mov	r0, r3
 800a656:	f001 f986 	bl	800b966 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>
 800a65a:	4603      	mov	r3, r0
 800a65c:	60bb      	str	r3, [r7, #8]
 800a65e:	f107 0308 	add.w	r3, r7, #8
 800a662:	4618      	mov	r0, r3
 800a664:	f001 f99b 	bl	800b99e <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 800a668:	4603      	mov	r3, r0
      }
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>:
 800a672:	b480      	push	{r7}
 800a674:	b083      	sub	sp, #12
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4618      	mov	r0, r3
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a688:	b580      	push	{r7, lr}
 800a68a:	b088      	sub	sp, #32
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	61fb      	str	r3, [r7, #28]
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	61bb      	str	r3, [r7, #24]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800a6a0:	f7f7 fc46 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800a6aa:	69b8      	ldr	r0, [r7, #24]
 800a6ac:	f010 f836 	bl	801a71c <_ZdlPv>
	    return;
 800a6b0:	e005      	b.n	800a6be <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	69b9      	ldr	r1, [r7, #24]
 800a6b6:	69f8      	ldr	r0, [r7, #28]
 800a6b8:	f001 ff4e 	bl	800c558 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800a6bc:	bf00      	nop
 800a6be:	bf00      	nop
 800a6c0:	3720      	adds	r7, #32
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b082      	sub	sp, #8
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800a6d0:	f7f7 fc2e 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d004      	beq.n	800a6e4 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800a6da:	6839      	ldr	r1, [r7, #0]
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f001 f96a 	bl	800b9b6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
 800a6e2:	e003      	b.n	800a6ec <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x26>
	__destroy(__first, __last);
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f001 f965 	bl	800b9b6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
    }
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a6f2:	b480      	push	{r7}
 800a6f4:	b083      	sub	sp, #12
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <_ZN3jlb4NodeC1ERKS0_>:
    class Node
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	781a      	ldrb	r2, [r3, #0]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	701a      	strb	r2, [r3, #0]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	605a      	str	r2, [r3, #4]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	689a      	ldr	r2, [r3, #8]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	609a      	str	r2, [r3, #8]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f103 020c 	add.w	r2, r3, #12
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	330c      	adds	r3, #12
 800a734:	4619      	mov	r1, r3
 800a736:	4610      	mov	r0, r2
 800a738:	f001 f956 	bl	800b9e8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800a746:	b5b0      	push	{r4, r5, r7, lr}
 800a748:	b082      	sub	sp, #8
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800a750:	6838      	ldr	r0, [r7, #0]
 800a752:	f7ff ffce 	bl	800a6f2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a756:	4605      	mov	r5, r0
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4619      	mov	r1, r3
 800a75c:	2018      	movs	r0, #24
 800a75e:	f7f7 fc0b 	bl	8001f78 <_ZnwjPv>
 800a762:	4604      	mov	r4, r0
 800a764:	4629      	mov	r1, r5
 800a766:	4620      	mov	r0, r4
 800a768:	f7ff ffce 	bl	800a708 <_ZN3jlb4NodeC1ERKS0_>
 800a76c:	4623      	mov	r3, r4
 800a76e:	4618      	mov	r0, r3
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bdb0      	pop	{r4, r5, r7, pc}

0800a776 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800a776:	b580      	push	{r7, lr}
 800a778:	b084      	sub	sp, #16
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	60f8      	str	r0, [r7, #12]
 800a77e:	60b9      	str	r1, [r7, #8]
 800a780:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7ff ffb5 	bl	800a6f2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a788:	4603      	mov	r3, r0
 800a78a:	4619      	mov	r1, r3
 800a78c:	68b8      	ldr	r0, [r7, #8]
 800a78e:	f7ff ffda 	bl	800a746 <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800a792:	bf00      	nop
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b084      	sub	sp, #16
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	1d1a      	adds	r2, r3, #4
 800a7a6:	f107 030c 	add.w	r3, r7, #12
 800a7aa:	4611      	mov	r1, r2
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f001 f958 	bl	800ba62 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3710      	adds	r7, #16
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800a7bc:	b5b0      	push	{r4, r5, r7, lr}
 800a7be:	b08c      	sub	sp, #48	; 0x30
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800a7c8:	4a44      	ldr	r2, [pc, #272]	; (800a8dc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x120>)
 800a7ca:	2101      	movs	r1, #1
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f001 f958 	bl	800ba82 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>
 800a7d2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f001 f995 	bl	800bb10 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	617b      	str	r3, [r7, #20]
 800a7ea:	f107 0214 	add.w	r2, r7, #20
 800a7ee:	f107 0308 	add.w	r3, r7, #8
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f001 f99b 	bl	800bb30 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a802:	4618      	mov	r0, r3
 800a804:	f001 f9ae 	bl	800bb64 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>
 800a808:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800a80e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800a810:	6a3a      	ldr	r2, [r7, #32]
 800a812:	4613      	mov	r3, r2
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	4413      	add	r3, r2
 800a818:	00db      	lsls	r3, r3, #3
 800a81a:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	189d      	adds	r5, r3, r2
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7ff ff66 	bl	800a6f2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a826:	4603      	mov	r3, r0
 800a828:	461a      	mov	r2, r3
 800a82a:	4629      	mov	r1, r5
 800a82c:	4620      	mov	r0, r4
 800a82e:	f7ff ffa2 	bl	800a776 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800a832:	2300      	movs	r3, #0
 800a834:	61bb      	str	r3, [r7, #24]
		(__old_start, __position.base(),
 800a836:	f107 0308 	add.w	r3, r7, #8
 800a83a:	4618      	mov	r0, r3
 800a83c:	f001 f9a6 	bl	800bb8c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800a840:	4603      	mov	r3, r0
 800a842:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	4618      	mov	r0, r3
 800a848:	f7ff f8b2 	bl	80099b0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800a84c:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800a84e:	69fa      	ldr	r2, [r7, #28]
 800a850:	4621      	mov	r1, r4
 800a852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a854:	f001 f9a5 	bl	800bba2 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800a858:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	3318      	adds	r3, #24
 800a85e:	61bb      	str	r3, [r7, #24]
		(__position.base(), __old_finish,
 800a860:	f107 0308 	add.w	r3, r7, #8
 800a864:	4618      	mov	r0, r3
 800a866:	f001 f991 	bl	800bb8c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800a86a:	4603      	mov	r3, r0
 800a86c:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	4618      	mov	r0, r3
 800a872:	f7ff f89d 	bl	80099b0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800a876:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800a878:	69ba      	ldr	r2, [r7, #24]
 800a87a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a87c:	4620      	mov	r0, r4
 800a87e:	f001 f990 	bl	800bba2 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800a882:	61b8      	str	r0, [r7, #24]
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	4618      	mov	r0, r3
 800a888:	f7ff f892 	bl	80099b0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800a88c:	4603      	mov	r3, r0
 800a88e:	461a      	mov	r2, r3
 800a890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a894:	f7ff f897 	bl	80099c6 <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 800a898:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	689a      	ldr	r2, [r3, #8]
 800a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	10db      	asrs	r3, r3, #3
 800a8a4:	4a0e      	ldr	r2, [pc, #56]	; (800a8e0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x124>)
 800a8a6:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8ae:	f7ff f86c 	bl	800998a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	69fa      	ldr	r2, [r7, #28]
 800a8b6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	69ba      	ldr	r2, [r7, #24]
 800a8bc:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800a8be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	005b      	lsls	r3, r3, #1
 800a8c4:	4413      	add	r3, r2
 800a8c6:	00db      	lsls	r3, r3, #3
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	441a      	add	r2, r3
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	609a      	str	r2, [r3, #8]
    }
 800a8d2:	bf00      	nop
 800a8d4:	3730      	adds	r7, #48	; 0x30
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bdb0      	pop	{r4, r5, r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	0801e608 	.word	0x0801e608
 800a8e0:	aaaaaaab 	.word	0xaaaaaaab

0800a8e4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7ff ff54 	bl	800a79a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	60fb      	str	r3, [r7, #12]
 800a8f6:	f107 030c 	add.w	r3, r7, #12
 800a8fa:	2101      	movs	r1, #1
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f001 f969 	bl	800bbd4 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>
 800a902:	4603      	mov	r3, r0
 800a904:	60bb      	str	r3, [r7, #8]
 800a906:	f107 0308 	add.w	r3, r7, #8
 800a90a:	4618      	mov	r0, r3
 800a90c:	f001 f97e 	bl	800bc0c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>
 800a910:	4603      	mov	r3, r0
      }
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <_ZNKSt16initializer_listIcE4sizeEv>:
      size() const noexcept { return _M_len; }
 800a91a:	b480      	push	{r7}
 800a91c:	b083      	sub	sp, #12
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	4618      	mov	r0, r3
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800a93a:	4618      	mov	r0, r3
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800a946:	b480      	push	{r7}
 800a948:	b085      	sub	sp, #20
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	60f8      	str	r0, [r7, #12]
 800a94e:	60b9      	str	r1, [r7, #8]
 800a950:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	1ad3      	subs	r3, r2, r3
    }
 800a958:	4618      	mov	r0, r3
 800a95a:	3714      	adds	r7, #20
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800a964:	b590      	push	{r4, r7, lr}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800a96e:	f107 030c 	add.w	r3, r7, #12
 800a972:	6839      	ldr	r1, [r7, #0]
 800a974:	4618      	mov	r0, r3
 800a976:	f00f fee7 	bl	801a748 <_ZNSaIcEC1ERKS_>
 800a97a:	f107 030c 	add.w	r3, r7, #12
 800a97e:	4618      	mov	r0, r3
 800a980:	f001 f95c 	bl	800bc3c <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 800a984:	4602      	mov	r2, r0
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	4293      	cmp	r3, r2
 800a98a:	bf8c      	ite	hi
 800a98c:	2301      	movhi	r3, #1
 800a98e:	2300      	movls	r3, #0
 800a990:	b2dc      	uxtb	r4, r3
 800a992:	f107 030c 	add.w	r3, r7, #12
 800a996:	4618      	mov	r0, r3
 800a998:	f00f fed7 	bl	801a74a <_ZNSaIcED1Ev>
 800a99c:	2c00      	cmp	r4, #0
 800a99e:	d002      	beq.n	800a9a6 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 800a9a0:	4803      	ldr	r0, [pc, #12]	; (800a9b0 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x4c>)
 800a9a2:	f00f fed9 	bl	801a758 <_ZSt20__throw_length_errorPKc>
	return __n;
 800a9a6:	687b      	ldr	r3, [r7, #4]
      }
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3714      	adds	r7, #20
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd90      	pop	{r4, r7, pc}
 800a9b0:	0801e624 	.word	0x0801e624

0800a9b4 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d006      	beq.n	800a9d2 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x1e>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 fe52 	bl	800b672 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	e000      	b.n	800a9d4 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x20>
 800a9d2:	2300      	movs	r3, #0
      }
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3708      	adds	r7, #8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
 800a9e8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	68b9      	ldr	r1, [r7, #8]
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f001 f93e 	bl	800bc70 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	601a      	str	r2, [r3, #0]
      { }
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4618      	mov	r0, r3
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
    __iterator_category(const _Iter&)
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800aa24:	4618      	mov	r0, r3
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800aa30:	b590      	push	{r4, r7, lr}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7fd fafe 	bl	800803c <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800aa40:	4603      	mov	r3, r0
 800aa42:	681c      	ldr	r4, [r3, #0]
 800aa44:	6838      	ldr	r0, [r7, #0]
 800aa46:	f7fd faf9 	bl	800803c <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	1ae3      	subs	r3, r4, r3
 800aa50:	4618      	mov	r0, r3
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd90      	pop	{r4, r7, pc}

0800aa58 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4618      	mov	r0, r3
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>:
	operator()(_Iterator __it)
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 800aa7a:	463b      	mov	r3, r7
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7ff ffeb 	bl	800aa58 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>
 800aa82:	4603      	mov	r3, r0
 800aa84:	781a      	ldrb	r2, [r3, #0]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	bf0c      	ite	eq
 800aa90:	2301      	moveq	r3, #1
 800aa92:	2300      	movne	r3, #0
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	4618      	mov	r0, r3
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800aa9e:	b480      	push	{r7}
 800aaa0:	b083      	sub	sp, #12
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
	++_M_current;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	1c5a      	adds	r2, r3, #1
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	601a      	str	r2, [r3, #0]
	return *this;
 800aab0:	687b      	ldr	r3, [r7, #4]
      }
 800aab2:	4618      	mov	r0, r3
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr

0800aabe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b086      	sub	sp, #24
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	60f8      	str	r0, [r7, #12]
 800aac6:	60b9      	str	r1, [r7, #8]
 800aac8:	607a      	str	r2, [r7, #4]
 800aaca:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800aacc:	f107 020c 	add.w	r2, r7, #12
 800aad0:	f107 0308 	add.w	r3, r7, #8
 800aad4:	4611      	mov	r1, r2
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7ff ffaa 	bl	800aa30 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800aadc:	4603      	mov	r3, r0
 800aade:	109b      	asrs	r3, r3, #2
 800aae0:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800aae2:	e03e      	b.n	800ab62 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 800aae4:	1d3b      	adds	r3, r7, #4
 800aae6:	68f9      	ldr	r1, [r7, #12]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7ff ffc1 	bl	800aa70 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d001      	beq.n	800aaf8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	e077      	b.n	800abe8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800aaf8:	f107 030c 	add.w	r3, r7, #12
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7ff ffce 	bl	800aa9e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800ab02:	1d3b      	adds	r3, r7, #4
 800ab04:	68f9      	ldr	r1, [r7, #12]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7ff ffb2 	bl	800aa70 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d001      	beq.n	800ab16 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	e068      	b.n	800abe8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800ab16:	f107 030c 	add.w	r3, r7, #12
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7ff ffbf 	bl	800aa9e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800ab20:	1d3b      	adds	r3, r7, #4
 800ab22:	68f9      	ldr	r1, [r7, #12]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7ff ffa3 	bl	800aa70 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	e059      	b.n	800abe8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800ab34:	f107 030c 	add.w	r3, r7, #12
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7ff ffb0 	bl	800aa9e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800ab3e:	1d3b      	adds	r3, r7, #4
 800ab40:	68f9      	ldr	r1, [r7, #12]
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7ff ff94 	bl	800aa70 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	e04a      	b.n	800abe8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800ab52:	f107 030c 	add.w	r3, r7, #12
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7ff ffa1 	bl	800aa9e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
      for (; __trip_count > 0; --__trip_count)
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	617b      	str	r3, [r7, #20]
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	dcbd      	bgt.n	800aae4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 800ab68:	f107 020c 	add.w	r2, r7, #12
 800ab6c:	f107 0308 	add.w	r3, r7, #8
 800ab70:	4611      	mov	r1, r2
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7ff ff5c 	bl	800aa30 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b03      	cmp	r3, #3
 800ab7c:	d006      	beq.n	800ab8c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xce>
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	dc31      	bgt.n	800abe6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d020      	beq.n	800abc8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x10a>
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d00f      	beq.n	800abaa <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xec>
 800ab8a:	e02c      	b.n	800abe6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 800ab8c:	1d3b      	adds	r3, r7, #4
 800ab8e:	68f9      	ldr	r1, [r7, #12]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7ff ff6d 	bl	800aa70 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d001      	beq.n	800aba0 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	e023      	b.n	800abe8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800aba0:	f107 030c 	add.w	r3, r7, #12
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7ff ff7a 	bl	800aa9e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800abaa:	1d3b      	adds	r3, r7, #4
 800abac:	68f9      	ldr	r1, [r7, #12]
 800abae:	4618      	mov	r0, r3
 800abb0:	f7ff ff5e 	bl	800aa70 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	e014      	b.n	800abe8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800abbe:	f107 030c 	add.w	r3, r7, #12
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7ff ff6b 	bl	800aa9e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800abc8:	1d3b      	adds	r3, r7, #4
 800abca:	68f9      	ldr	r1, [r7, #12]
 800abcc:	4618      	mov	r0, r3
 800abce:	f7ff ff4f 	bl	800aa70 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	e005      	b.n	800abe8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800abdc:	f107 030c 	add.w	r3, r7, #12
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7ff ff5c 	bl	800aa9e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  return __last;
 800abe6:	68bb      	ldr	r3, [r7, #8]
    }
 800abe8:	4618      	mov	r0, r3
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	605a      	str	r2, [r3, #4]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	609a      	str	r2, [r3, #8]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	60da      	str	r2, [r3, #12]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4618      	mov	r0, r3
 800ac14:	370c      	adds	r7, #12
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b084      	sub	sp, #16
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	60fb      	str	r3, [r7, #12]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800ac30:	f7f7 f97e 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d006      	beq.n	800ac48 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f00f fd70 	bl	801a724 <_Znwj>
 800ac44:	4603      	mov	r3, r0
 800ac46:	e006      	b.n	800ac56 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800ac48:	2200      	movs	r2, #0
 800ac4a:	68b9      	ldr	r1, [r7, #8]
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f001 fd97 	bl	800c780 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>
 800ac52:	4603      	mov	r3, r0
 800ac54:	bf00      	nop
      { return __a.allocate(__n); }
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800ac5e:	b480      	push	{r7}
 800ac60:	b083      	sub	sp, #12
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <_ZNSaIPfEC1IfEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f001 f808 	bl	800bc94 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4618      	mov	r0, r3
 800ac88:	3708      	adds	r7, #8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800ac8e:	b480      	push	{r7}
 800ac90:	b083      	sub	sp, #12
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800ac96:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	370c      	adds	r7, #12
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b084      	sub	sp, #16
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 800acae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800acb2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f7ff ffea 	bl	800ac8e <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 800acba:	4603      	mov	r3, r0
 800acbc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800acbe:	f107 0208 	add.w	r2, r7, #8
 800acc2:	f107 030c 	add.w	r3, r7, #12
 800acc6:	4611      	mov	r1, r2
 800acc8:	4618      	mov	r0, r3
 800acca:	f000 fffd 	bl	800bcc8 <_ZSt3minIjERKT_S2_S2_>
 800acce:	4603      	mov	r3, r0
 800acd0:	681b      	ldr	r3, [r3, #0]
      }
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <_ZSt4copyIPPfS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 800acda:	b590      	push	{r4, r7, lr}
 800acdc:	b085      	sub	sp, #20
 800acde:	af00      	add	r7, sp, #0
 800ace0:	60f8      	str	r0, [r7, #12]
 800ace2:	60b9      	str	r1, [r7, #8]
 800ace4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f001 f802 	bl	800bcf0 <_ZSt12__miter_baseIPPfET_S2_>
 800acec:	4604      	mov	r4, r0
 800acee:	68b8      	ldr	r0, [r7, #8]
 800acf0:	f000 fffe 	bl	800bcf0 <_ZSt12__miter_baseIPPfET_S2_>
 800acf4:	4603      	mov	r3, r0
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	4619      	mov	r1, r3
 800acfa:	4620      	mov	r0, r4
 800acfc:	f001 f803 	bl	800bd06 <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>
 800ad00:	4603      	mov	r3, r0
    }
 800ad02:	4618      	mov	r0, r3
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd90      	pop	{r4, r7, pc}

0800ad0a <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800ad0a:	b590      	push	{r4, r7, lr}
 800ad0c:	b085      	sub	sp, #20
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	60f8      	str	r0, [r7, #12]
 800ad12:	60b9      	str	r1, [r7, #8]
 800ad14:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f000 ffea 	bl	800bcf0 <_ZSt12__miter_baseIPPfET_S2_>
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	68b8      	ldr	r0, [r7, #8]
 800ad20:	f000 ffe6 	bl	800bcf0 <_ZSt12__miter_baseIPPfET_S2_>
 800ad24:	4603      	mov	r3, r0
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	4619      	mov	r1, r3
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f001 f80e 	bl	800bd4c <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>
 800ad30:	4603      	mov	r3, r0
    }
 800ad32:	4618      	mov	r0, r3
 800ad34:	3714      	adds	r7, #20
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd90      	pop	{r4, r7, pc}

0800ad3a <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800ad3a:	b590      	push	{r4, r7, lr}
 800ad3c:	b08b      	sub	sp, #44	; 0x2c
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	60f8      	str	r0, [r7, #12]
 800ad42:	60b9      	str	r1, [r7, #8]
 800ad44:	4613      	mov	r3, r2
 800ad46:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	695b      	ldr	r3, [r3, #20]
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	109b      	asrs	r3, r3, #2
 800ad54:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800ad56:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	6a3a      	ldr	r2, [r7, #32]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	685a      	ldr	r2, [r3, #4]
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	005b      	lsls	r3, r3, #1
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d92d      	bls.n	800adc8 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	1acb      	subs	r3, r1, r3
 800ad78:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800ad7a:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d002      	beq.n	800ad88 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x4e>
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	e000      	b.n	800ad8a <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x50>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800ad8c:	4413      	add	r3, r2
 800ad8e:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	695b      	ldr	r3, [r3, #20]
 800ad94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d209      	bcs.n	800adae <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800ada2:	3304      	adds	r3, #4
 800ada4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ada6:	4619      	mov	r1, r3
 800ada8:	f7ff ff97 	bl	800acda <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
 800adac:	e048      	b.n	800ae40 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800adb6:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800adb8:	6a3b      	ldr	r3, [r7, #32]
 800adba:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800adbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adbe:	4413      	add	r3, r2
 800adc0:	461a      	mov	r2, r3
 800adc2:	f7ff ffa2 	bl	800ad0a <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>
 800adc6:	e03b      	b.n	800ae40 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	3304      	adds	r3, #4
 800add0:	f107 0208 	add.w	r2, r7, #8
 800add4:	4611      	mov	r1, r2
 800add6:	4618      	mov	r0, r3
 800add8:	f7fe ff07 	bl	8009bea <_ZSt3maxIjERKT_S2_S2_>
 800addc:	4603      	mov	r3, r0
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 800ade2:	3302      	adds	r3, #2
 800ade4:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	69b9      	ldr	r1, [r7, #24]
 800adea:	4618      	mov	r0, r3
 800adec:	f7fe ff11 	bl	8009c12 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 800adf0:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	085b      	lsrs	r3, r3, #1
 800adfa:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800adfc:	79fb      	ldrb	r3, [r7, #7]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d002      	beq.n	800ae08 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xce>
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	e000      	b.n	800ae0a <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xd0>
 800ae08:	2300      	movs	r3, #0
 800ae0a:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800ae0c:	697a      	ldr	r2, [r7, #20]
 800ae0e:	4413      	add	r3, r2
 800ae10:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae1e:	4619      	mov	r1, r3
 800ae20:	f7ff ff5b 	bl	800acda <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6819      	ldr	r1, [r3, #0]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	f7fe f8e9 	bl	8009006 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>

	  this->_M_impl._M_map = __new_map;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	69ba      	ldr	r2, [r7, #24]
 800ae3e:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	3308      	adds	r3, #8
 800ae44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fe ff1b 	bl	8009c82 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f103 0018 	add.w	r0, r3, #24
 800ae52:	6a3b      	ldr	r3, [r7, #32]
 800ae54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae5e:	4413      	add	r3, r2
 800ae60:	4619      	mov	r1, r3
 800ae62:	f7fe ff0e 	bl	8009c82 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
    }
 800ae66:	bf00      	nop
 800ae68:	372c      	adds	r7, #44	; 0x2c
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd90      	pop	{r4, r7, pc}

0800ae6e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b084      	sub	sp, #16
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
 800ae76:	6039      	str	r1, [r7, #0]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	60fb      	str	r3, [r7, #12]
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800ae80:	f7f7 f856 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d006      	beq.n	800ae98 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f00f fc48 	bl	801a724 <_Znwj>
 800ae94:	4603      	mov	r3, r0
 800ae96:	e006      	b.n	800aea6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800ae98:	2200      	movs	r2, #0
 800ae9a:	68b9      	ldr	r1, [r7, #8]
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f001 fcdc 	bl	800c85a <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 800aea2:	4603      	mov	r3, r0
 800aea4:	bf00      	nop
      { return __a.allocate(__n); }
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800aeb8:	e009      	b.n	800aece <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 ff78 	bl	800bdb0 <_ZSt11__addressofIfEPT_RS0_>
 800aec0:	4603      	mov	r3, r0
 800aec2:	4618      	mov	r0, r3
 800aec4:	f000 ff7f 	bl	800bdc6 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	3304      	adds	r3, #4
 800aecc:	607b      	str	r3, [r7, #4]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d1f1      	bne.n	800aeba <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0xc>
	}
 800aed6:	bf00      	nop
 800aed8:	bf00      	nop
 800aeda:	3708      	adds	r7, #8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
 800aeea:	bf00      	nop
 800aeec:	370c      	adds	r7, #12
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr

0800aef6 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800aef6:	b590      	push	{r4, r7, lr}
 800aef8:	b085      	sub	sp, #20
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	60f8      	str	r0, [r7, #12]
 800aefe:	60b9      	str	r1, [r7, #8]
 800af00:	607a      	str	r2, [r7, #4]
 800af02:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800af04:	4623      	mov	r3, r4
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	68b9      	ldr	r1, [r7, #8]
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f000 ff9e 	bl	800be4c <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800af10:	463b      	mov	r3, r7
 800af12:	461a      	mov	r2, r3
 800af14:	68b9      	ldr	r1, [r7, #8]
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f000 ffe6 	bl	800bee8 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 800af1c:	bf00      	nop
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	bd90      	pop	{r4, r7, pc}

0800af24 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800af24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af26:	b089      	sub	sp, #36	; 0x24
 800af28:	af02      	add	r7, sp, #8
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800af30:	f107 020c 	add.w	r2, r7, #12
 800af34:	f107 0308 	add.w	r3, r7, #8
 800af38:	4611      	mov	r1, r2
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fe fa2e 	bl	800939c <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800af40:	4603      	mov	r3, r0
 800af42:	0fda      	lsrs	r2, r3, #31
 800af44:	4413      	add	r3, r2
 800af46:	105b      	asrs	r3, r3, #1
 800af48:	461a      	mov	r2, r3
 800af4a:	f107 030c 	add.w	r3, r7, #12
 800af4e:	4611      	mov	r1, r2
 800af50:	4618      	mov	r0, r3
 800af52:	f000 f827 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800af56:	4603      	mov	r3, r0
 800af58:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800af5a:	f107 030c 	add.w	r3, r7, #12
 800af5e:	2101      	movs	r1, #1
 800af60:	4618      	mov	r0, r3
 800af62:	f000 f81f 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800af66:	4604      	mov	r4, r0
 800af68:	f107 0308 	add.w	r3, r7, #8
 800af6c:	2101      	movs	r1, #1
 800af6e:	4618      	mov	r0, r3
 800af70:	f000 ffe1 	bl	800bf36 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 800af74:	4603      	mov	r3, r0
 800af76:	f88d 5000 	strb.w	r5, [sp]
 800af7a:	697a      	ldr	r2, [r7, #20]
 800af7c:	4621      	mov	r1, r4
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f000 fff2 	bl	800bf68 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800af84:	f107 030c 	add.w	r3, r7, #12
 800af88:	2101      	movs	r1, #1
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 f80a 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800af90:	4633      	mov	r3, r6
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	68b9      	ldr	r1, [r7, #8]
 800af96:	f001 f83c 	bl	800c012 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 800af9a:	4603      	mov	r3, r0
    }
 800af9c:	4618      	mov	r0, r3
 800af9e:	371c      	adds	r7, #28
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	4413      	add	r3, r2
 800afb8:	60fb      	str	r3, [r7, #12]
 800afba:	f107 020c 	add.w	r2, r7, #12
 800afbe:	f107 0308 	add.w	r3, r7, #8
 800afc2:	4611      	mov	r1, r2
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fe f9b6 	bl	8009336 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	4618      	mov	r0, r3
 800afce:	3710      	adds	r7, #16
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
	++_M_current;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	1d1a      	adds	r2, r3, #4
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	601a      	str	r2, [r3, #0]
	return *this;
 800afe6:	687b      	ldr	r3, [r7, #4]
      }
 800afe8:	4618      	mov	r0, r3
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4618      	mov	r0, r3
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800b00c:	b580      	push	{r7, lr}
 800b00e:	ed2d 8b02 	vpush	{d8}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800b01c:	f107 0308 	add.w	r3, r7, #8
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff ffe7 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800b026:	4603      	mov	r3, r0
 800b028:	ed93 8a00 	vldr	s16, [r3]
 800b02c:	1d3b      	adds	r3, r7, #4
 800b02e:	4618      	mov	r0, r3
 800b030:	f7ff ffe0 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800b034:	4603      	mov	r3, r0
 800b036:	edd3 7a00 	vldr	s15, [r3]
 800b03a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b042:	bf4c      	ite	mi
 800b044:	2301      	movmi	r3, #1
 800b046:	2300      	movpl	r3, #0
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	4618      	mov	r0, r3
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	ecbd 8b02 	vpop	{d8}
 800b054:	bd80      	pop	{r7, pc}

0800b056 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800b056:	b590      	push	{r4, r7, lr}
 800b058:	b085      	sub	sp, #20
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	60f8      	str	r0, [r7, #12]
 800b05e:	60b9      	str	r1, [r7, #8]
 800b060:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f001 f828 	bl	800c0b8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 800b068:	4604      	mov	r4, r0
 800b06a:	68b8      	ldr	r0, [r7, #8]
 800b06c:	f001 f824 	bl	800c0b8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 800b070:	4603      	mov	r3, r0
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	4619      	mov	r1, r3
 800b076:	4620      	mov	r0, r4
 800b078:	f001 f829 	bl	800c0ce <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 800b07c:	4603      	mov	r3, r0
    }
 800b07e:	4618      	mov	r0, r3
 800b080:	3714      	adds	r7, #20
 800b082:	46bd      	mov	sp, r7
 800b084:	bd90      	pop	{r4, r7, pc}

0800b086 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800b086:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b088:	b087      	sub	sp, #28
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	60f8      	str	r0, [r7, #12]
 800b08e:	60b9      	str	r1, [r7, #8]
 800b090:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800b092:	f107 0208 	add.w	r2, r7, #8
 800b096:	f107 030c 	add.w	r3, r7, #12
 800b09a:	4611      	mov	r1, r2
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7fe f965 	bl	800936c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d153      	bne.n	800b150 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xca>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800b0a8:	f107 030c 	add.w	r3, r7, #12
 800b0ac:	2101      	movs	r1, #1
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7ff ff78 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	617b      	str	r3, [r7, #20]
 800b0b8:	e03b      	b.n	800b132 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xac>
	  if (__comp(__i, __first))
 800b0ba:	1d3b      	adds	r3, r7, #4
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	6979      	ldr	r1, [r7, #20]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7ff ffa3 	bl	800b00c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d026      	beq.n	800b11a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 800b0cc:	f107 0314 	add.w	r3, r7, #20
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7ff ff8f 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fd fad6 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800b0e4:	f107 0314 	add.w	r3, r7, #20
 800b0e8:	2101      	movs	r1, #1
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7ff ff5a 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	6979      	ldr	r1, [r7, #20]
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	f7ff ffad 	bl	800b056 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 800b0fc:	f107 0310 	add.w	r3, r7, #16
 800b100:	4618      	mov	r0, r3
 800b102:	f7fd fac2 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800b106:	4603      	mov	r3, r0
 800b108:	681c      	ldr	r4, [r3, #0]
 800b10a:	f107 030c 	add.w	r3, r7, #12
 800b10e:	4618      	mov	r0, r3
 800b110:	f7ff ff70 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800b114:	4603      	mov	r3, r0
 800b116:	601c      	str	r4, [r3, #0]
 800b118:	e006      	b.n	800b128 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800b11a:	4630      	mov	r0, r6
 800b11c:	f7f6 ff40 	bl	8001fa0 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 800b120:	4629      	mov	r1, r5
 800b122:	6978      	ldr	r0, [r7, #20]
 800b124:	f001 f814 	bl	800c150 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800b128:	f107 0314 	add.w	r3, r7, #20
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7ff ff51 	bl	800afd4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800b132:	f107 0208 	add.w	r2, r7, #8
 800b136:	f107 0314 	add.w	r3, r7, #20
 800b13a:	4611      	mov	r1, r2
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7fe f915 	bl	800936c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800b142:	4603      	mov	r3, r0
 800b144:	f083 0301 	eor.w	r3, r3, #1
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1b5      	bne.n	800b0ba <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x34>
 800b14e:	e000      	b.n	800b152 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xcc>
      if (__first == __last) return;
 800b150:	bf00      	nop
    }
 800b152:	371c      	adds	r7, #28
 800b154:	46bd      	mov	sp, r7
 800b156:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b158 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800b158:	b5b0      	push	{r4, r5, r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	617b      	str	r3, [r7, #20]
 800b168:	e00b      	b.n	800b182 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800b16a:	4628      	mov	r0, r5
 800b16c:	f7f6 ff18 	bl	8001fa0 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 800b170:	4621      	mov	r1, r4
 800b172:	6978      	ldr	r0, [r7, #20]
 800b174:	f000 ffec 	bl	800c150 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800b178:	f107 0314 	add.w	r3, r7, #20
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7ff ff29 	bl	800afd4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800b182:	f107 0208 	add.w	r2, r7, #8
 800b186:	f107 0314 	add.w	r3, r7, #20
 800b18a:	4611      	mov	r1, r2
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fe f8ed 	bl	800936c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800b192:	4603      	mov	r3, r0
 800b194:	f083 0301 	eor.w	r3, r3, #1
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1e5      	bne.n	800b16a <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x12>
    }
 800b19e:	bf00      	nop
 800b1a0:	bf00      	nop
 800b1a2:	3718      	adds	r7, #24
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bdb0      	pop	{r4, r5, r7, pc}

0800b1a8 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr

0800b1be <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b082      	sub	sp, #8
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800b1c8:	463b      	mov	r3, r7
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7ff ffec 	bl	800b1a8 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3708      	adds	r7, #8
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEvEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
 800b1da:	b5b0      	push	{r4, r5, r7, lr}
 800b1dc:	b084      	sub	sp, #16
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800b1e2:	1d3b      	adds	r3, r7, #4
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7ff ffdf 	bl	800b1a8 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800b1ea:	f107 030c 	add.w	r3, r7, #12
 800b1ee:	4629      	mov	r1, r5
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f000 fff8 	bl	800c1e6 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EC1ES4_>
 800b1f6:	bf00      	nop
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bdb0      	pop	{r4, r5, r7, pc}

0800b200 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800b208:	4618      	mov	r0, r3
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>:
	operator()(_Iterator __it)
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	4619      	mov	r1, r3
 800b226:	4610      	mov	r0, r2
 800b228:	f7f7 fb7a 	bl	8002920 <_ZZN3jlb10Controller15lateral_controlEvENKUlbE_clEb>
 800b22c:	4603      	mov	r3, r0
 800b22e:	f083 0301 	eor.w	r3, r3, #1
 800b232:	b2db      	uxtb	r3, r3
 800b234:	4618      	mov	r0, r3
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	713a      	strb	r2, [r7, #4]
 800b248:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800b24a:	68ba      	ldr	r2, [r7, #8]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	109b      	asrs	r3, r3, #2
 800b252:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800b254:	e036      	b.n	800b2c4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x88>
	  if (__pred(__first))
 800b256:	1d3b      	adds	r3, r7, #4
 800b258:	68f9      	ldr	r1, [r7, #12]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7ff ffda 	bl	800b214 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d001      	beq.n	800b26a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	e063      	b.n	800b332 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	3301      	adds	r3, #1
 800b26e:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800b270:	1d3b      	adds	r3, r7, #4
 800b272:	68f9      	ldr	r1, [r7, #12]
 800b274:	4618      	mov	r0, r3
 800b276:	f7ff ffcd 	bl	800b214 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d001      	beq.n	800b284 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	e056      	b.n	800b332 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	3301      	adds	r3, #1
 800b288:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800b28a:	1d3b      	adds	r3, r7, #4
 800b28c:	68f9      	ldr	r1, [r7, #12]
 800b28e:	4618      	mov	r0, r3
 800b290:	f7ff ffc0 	bl	800b214 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d001      	beq.n	800b29e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	e049      	b.n	800b332 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800b2a4:	1d3b      	adds	r3, r7, #4
 800b2a6:	68f9      	ldr	r1, [r7, #12]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7ff ffb3 	bl	800b214 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d001      	beq.n	800b2b8 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	e03c      	b.n	800b332 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	617b      	str	r3, [r7, #20]
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	dcc5      	bgt.n	800b256 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x1a>
      switch (__last - __first)
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	2b03      	cmp	r3, #3
 800b2d2:	d006      	beq.n	800b2e2 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 800b2d4:	2b03      	cmp	r3, #3
 800b2d6:	dc2b      	bgt.n	800b330 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d01c      	beq.n	800b316 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d00d      	beq.n	800b2fc <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 800b2e0:	e026      	b.n	800b330 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 800b2e2:	1d3b      	adds	r3, r7, #4
 800b2e4:	68f9      	ldr	r1, [r7, #12]
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7ff ff94 	bl	800b214 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	e01d      	b.n	800b332 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800b2fc:	1d3b      	adds	r3, r7, #4
 800b2fe:	68f9      	ldr	r1, [r7, #12]
 800b300:	4618      	mov	r0, r3
 800b302:	f7ff ff87 	bl	800b214 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d001      	beq.n	800b310 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	e010      	b.n	800b332 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	3301      	adds	r3, #1
 800b314:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800b316:	1d3b      	adds	r3, r7, #4
 800b318:	68f9      	ldr	r1, [r7, #12]
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7ff ff7a 	bl	800b214 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d001      	beq.n	800b32a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	e003      	b.n	800b332 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	3301      	adds	r3, #1
 800b32e:	60fb      	str	r3, [r7, #12]
	  return __last;
 800b330:	68bb      	ldr	r3, [r7, #8]
    }
 800b332:	4618      	mov	r0, r3
 800b334:	3718      	adds	r7, #24
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800b33a:	b480      	push	{r7}
 800b33c:	b083      	sub	sp, #12
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4618      	mov	r0, r3
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE0_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800b35a:	463b      	mov	r3, r7
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7ff ffec 	bl	800b33a <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4618      	mov	r0, r3
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    __negate(_Iter_pred<_Predicate> __pred)
 800b36c:	b5b0      	push	{r4, r5, r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800b374:	1d3b      	adds	r3, r7, #4
 800b376:	4618      	mov	r0, r3
 800b378:	f7ff ffdf 	bl	800b33a <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 800b37c:	f107 030c 	add.w	r3, r7, #12
 800b380:	4629      	mov	r1, r5
 800b382:	4618      	mov	r0, r3
 800b384:	f000 ff3d 	bl	800c202 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EC1ES4_>
 800b388:	bf00      	nop
 800b38a:	4620      	mov	r0, r4
 800b38c:	3710      	adds	r7, #16
 800b38e:	46bd      	mov	sp, r7
 800b390:	bdb0      	pop	{r4, r5, r7, pc}

0800b392 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>:
	operator()(_Iterator __it)
 800b392:	b580      	push	{r7, lr}
 800b394:	b082      	sub	sp, #8
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
 800b39a:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	4610      	mov	r0, r2
 800b3a6:	f7f7 fac8 	bl	800293a <_ZZN3jlb10Controller15lateral_controlEvENKUlbE0_clEb>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	f083 0301 	eor.w	r3, r3, #1
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3708      	adds	r7, #8
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b086      	sub	sp, #24
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	60f8      	str	r0, [r7, #12]
 800b3c2:	60b9      	str	r1, [r7, #8]
 800b3c4:	713a      	strb	r2, [r7, #4]
 800b3c6:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	109b      	asrs	r3, r3, #2
 800b3d0:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800b3d2:	e036      	b.n	800b442 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x88>
	  if (__pred(__first))
 800b3d4:	1d3b      	adds	r3, r7, #4
 800b3d6:	68f9      	ldr	r1, [r7, #12]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7ff ffda 	bl	800b392 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d001      	beq.n	800b3e8 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	e063      	b.n	800b4b0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800b3ee:	1d3b      	adds	r3, r7, #4
 800b3f0:	68f9      	ldr	r1, [r7, #12]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7ff ffcd 	bl	800b392 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	e056      	b.n	800b4b0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	3301      	adds	r3, #1
 800b406:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800b408:	1d3b      	adds	r3, r7, #4
 800b40a:	68f9      	ldr	r1, [r7, #12]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7ff ffc0 	bl	800b392 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d001      	beq.n	800b41c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	e049      	b.n	800b4b0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3301      	adds	r3, #1
 800b420:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800b422:	1d3b      	adds	r3, r7, #4
 800b424:	68f9      	ldr	r1, [r7, #12]
 800b426:	4618      	mov	r0, r3
 800b428:	f7ff ffb3 	bl	800b392 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d001      	beq.n	800b436 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	e03c      	b.n	800b4b0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	3301      	adds	r3, #1
 800b43a:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	3b01      	subs	r3, #1
 800b440:	617b      	str	r3, [r7, #20]
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	2b00      	cmp	r3, #0
 800b446:	dcc5      	bgt.n	800b3d4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x1a>
      switch (__last - __first)
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	1ad3      	subs	r3, r2, r3
 800b44e:	2b03      	cmp	r3, #3
 800b450:	d006      	beq.n	800b460 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 800b452:	2b03      	cmp	r3, #3
 800b454:	dc2b      	bgt.n	800b4ae <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 800b456:	2b01      	cmp	r3, #1
 800b458:	d01c      	beq.n	800b494 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	d00d      	beq.n	800b47a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 800b45e:	e026      	b.n	800b4ae <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 800b460:	1d3b      	adds	r3, r7, #4
 800b462:	68f9      	ldr	r1, [r7, #12]
 800b464:	4618      	mov	r0, r3
 800b466:	f7ff ff94 	bl	800b392 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d001      	beq.n	800b474 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	e01d      	b.n	800b4b0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	3301      	adds	r3, #1
 800b478:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800b47a:	1d3b      	adds	r3, r7, #4
 800b47c:	68f9      	ldr	r1, [r7, #12]
 800b47e:	4618      	mov	r0, r3
 800b480:	f7ff ff87 	bl	800b392 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d001      	beq.n	800b48e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	e010      	b.n	800b4b0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	3301      	adds	r3, #1
 800b492:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800b494:	1d3b      	adds	r3, r7, #4
 800b496:	68f9      	ldr	r1, [r7, #12]
 800b498:	4618      	mov	r0, r3
 800b49a:	f7ff ff7a 	bl	800b392 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	e003      	b.n	800b4b0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	60fb      	str	r3, [r7, #12]
	  return __last;
 800b4ae:	68bb      	ldr	r3, [r7, #8]
    }
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3718      	adds	r7, #24
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800b4c2:	6839      	ldr	r1, [r7, #0]
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 feaa 	bl	800c21e <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	68b9      	ldr	r1, [r7, #8]
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 fea6 	bl	800c236 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 800b4fc:	1d3b      	adds	r3, r7, #4
 800b4fe:	4618      	mov	r0, r3
 800b500:	f000 feb1 	bl	800c266 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 800b504:	4603      	mov	r3, r0
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4618      	mov	r0, r3
 800b50a:	3708      	adds	r7, #8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800b518:	1d3b      	adds	r3, r7, #4
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fd ff1b 	bl	8009356 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800b520:	4603      	mov	r3, r0
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4618      	mov	r0, r3
 800b526:	3708      	adds	r7, #8
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	68b9      	ldr	r1, [r7, #8]
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f000 fe9d 	bl	800c27c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 800b542:	4603      	mov	r3, r0
 800b544:	4618      	mov	r0, r3
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7ff ffda 	bl	800b510 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800b55c:	4602      	mov	r2, r0
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	1a9b      	subs	r3, r3, r2
 800b562:	109b      	asrs	r3, r3, #2
 800b564:	461a      	mov	r2, r3
 800b566:	1d3b      	adds	r3, r7, #4
 800b568:	4611      	mov	r1, r2
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7ff fd1a 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800b570:	4603      	mov	r3, r0
 800b572:	4618      	mov	r0, r3
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b082      	sub	sp, #8
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
 800b582:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800b584:	e00f      	b.n	800b5a6 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0x2c>
	    std::_Destroy(std::__addressof(*__first));
 800b586:	1d3b      	adds	r3, r7, #4
 800b588:	4618      	mov	r0, r3
 800b58a:	f7ff fd33 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800b58e:	4603      	mov	r3, r0
 800b590:	4618      	mov	r0, r3
 800b592:	f000 fc0d 	bl	800bdb0 <_ZSt11__addressofIfEPT_RS0_>
 800b596:	4603      	mov	r3, r0
 800b598:	4618      	mov	r0, r3
 800b59a:	f000 fc14 	bl	800bdc6 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 800b59e:	1d3b      	adds	r3, r7, #4
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7ff fd17 	bl	800afd4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800b5a6:	463a      	mov	r2, r7
 800b5a8:	1d3b      	adds	r3, r7, #4
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fd fedd 	bl	800936c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	f083 0301 	eor.w	r3, r3, #1
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1e3      	bne.n	800b586 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0xc>
	}
 800b5be:	bf00      	nop
 800b5c0:	bf00      	nop
 800b5c2:	3708      	adds	r7, #8
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
 800b5d2:	bf00      	nop
 800b5d4:	370c      	adds	r7, #12
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr

0800b5de <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b084      	sub	sp, #16
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	60f8      	str	r0, [r7, #12]
 800b5e6:	60b9      	str	r1, [r7, #8]
 800b5e8:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800b5ea:	f7f6 fca1 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d006      	beq.n	800b602 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	68b9      	ldr	r1, [r7, #8]
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f000 fe5c 	bl	800c2b6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>
 800b5fe:	4603      	mov	r3, r0
 800b600:	e006      	b.n	800b610 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	68b9      	ldr	r1, [r7, #8]
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f000 fe78 	bl	800c2fc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800b60c:	4603      	mov	r3, r0
 800b60e:	bf00      	nop
    }
 800b610:	4618      	mov	r0, r3
 800b612:	3710      	adds	r7, #16
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	68b9      	ldr	r1, [r7, #8]
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f7fd f9a7 	bl	800897c <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 800b62e:	4603      	mov	r3, r0
 800b630:	4618      	mov	r0, r3
 800b632:	3710      	adds	r7, #16
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800b644:	f7f6 fc74 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d006      	beq.n	800b65c <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	68b9      	ldr	r1, [r7, #8]
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f000 fe6f 	bl	800c336 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>
 800b658:	4603      	mov	r3, r0
 800b65a:	e006      	b.n	800b66a <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	68b9      	ldr	r1, [r7, #8]
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f000 fe8a 	bl	800c37a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 800b666:	4603      	mov	r3, r0
 800b668:	bf00      	nop
    }
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800b672:	b580      	push	{r7, lr}
 800b674:	b084      	sub	sp, #16
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	6039      	str	r1, [r7, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	60fb      	str	r3, [r7, #12]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800b684:	f7f6 fc54 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d004      	beq.n	800b698 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x26>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b68e:	68b8      	ldr	r0, [r7, #8]
 800b690:	f00f f848 	bl	801a724 <_Znwj>
 800b694:	4603      	mov	r3, r0
 800b696:	e006      	b.n	800b6a6 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x34>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800b698:	2200      	movs	r2, #0
 800b69a:	68b9      	ldr	r1, [r7, #8]
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f001 fa15 	bl	800cacc <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	bf00      	nop
      { return __a.allocate(__n); }
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b088      	sub	sp, #32
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	60f8      	str	r0, [r7, #12]
 800b6b6:	60b9      	str	r1, [r7, #8]
 800b6b8:	607a      	str	r2, [r7, #4]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	61fb      	str	r3, [r7, #28]
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	61bb      	str	r3, [r7, #24]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800b6c6:	f7f6 fc33 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d003      	beq.n	800b6d8 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x2a>
	    ::operator delete(__p);
 800b6d0:	69b8      	ldr	r0, [r7, #24]
 800b6d2:	f00f f823 	bl	801a71c <_ZdlPv>
	    return;
 800b6d6:	e005      	b.n	800b6e4 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800b6d8:	697a      	ldr	r2, [r7, #20]
 800b6da:	69b9      	ldr	r1, [r7, #24]
 800b6dc:	69f8      	ldr	r0, [r7, #28]
 800b6de:	f001 fa17 	bl	800cb10 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
      { __a.deallocate(__p, __n); }
 800b6e2:	bf00      	nop
 800b6e4:	bf00      	nop
 800b6e6:	3720      	adds	r7, #32
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800b6f6:	e009      	b.n	800b70c <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 fe75 	bl	800c3e8 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800b6fe:	4603      	mov	r3, r0
 800b700:	4618      	mov	r0, r3
 800b702:	f000 fe7c 	bl	800c3fe <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>
	  for (; __first != __last; ++__first)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	3318      	adds	r3, #24
 800b70a:	607b      	str	r3, [r7, #4]
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	429a      	cmp	r2, r3
 800b712:	d1f1      	bne.n	800b6f8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0xc>
	}
 800b714:	bf00      	nop
 800b716:	bf00      	nop
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b71e:	b480      	push	{r7}
 800b720:	b083      	sub	sp, #12
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	601a      	str	r2, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	605a      	str	r2, [r3, #4]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	609a      	str	r2, [r3, #8]
	{ }
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	4618      	mov	r0, r3
 800b73c:	370c      	adds	r7, #12
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b746:	b580      	push	{r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	60f8      	str	r0, [r7, #12]
 800b74e:	60b9      	str	r1, [r7, #8]
 800b750:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	68b9      	ldr	r1, [r7, #8]
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f000 fe5c 	bl	800c414 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 800b75c:	4603      	mov	r3, r0
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b766:	b580      	push	{r7, lr}
 800b768:	b082      	sub	sp, #8
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800b770:	e009      	b.n	800b786 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 fe1b 	bl	800c3ae <_ZSt11__addressofIcEPT_RS0_>
 800b778:	4603      	mov	r3, r0
 800b77a:	4618      	mov	r0, r3
 800b77c:	f000 fe62 	bl	800c444 <_ZSt8_DestroyIcEvPT_>
	  for (; __first != __last; ++__first)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	3301      	adds	r3, #1
 800b784:	607b      	str	r3, [r7, #4]
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d1f1      	bne.n	800b772 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0xc>
	}
 800b78e:	bf00      	nop
 800b790:	bf00      	nop
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
 800b7a2:	bf00      	nop
 800b7a4:	370c      	adds	r7, #12
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr

0800b7ae <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 800b7ae:	b590      	push	{r4, r7, lr}
 800b7b0:	b083      	sub	sp, #12
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
 800b7b6:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 800b7b8:	6838      	ldr	r0, [r7, #0]
 800b7ba:	f000 fe4e 	bl	800c45a <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f00e ffc0 	bl	801a748 <_ZNSaIcEC1ERKS_>
 800b7c8:	687c      	ldr	r4, [r7, #4]
 800b7ca:	6838      	ldr	r0, [r7, #0]
 800b7cc:	f000 fe45 	bl	800c45a <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f000 fe4b 	bl	800c470 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>
	{ }
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4618      	mov	r0, r3
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd90      	pop	{r4, r7, pc}

0800b7e4 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	601a      	str	r2, [r3, #0]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800b804:	b590      	push	{r4, r7, lr}
 800b806:	b087      	sub	sp, #28
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f000 fe50 	bl	800c4b6 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800b816:	4604      	mov	r4, r0
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f7fd fb0b 	bl	8008e34 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800b81e:	4603      	mov	r3, r0
 800b820:	1ae2      	subs	r2, r4, r3
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	429a      	cmp	r2, r3
 800b826:	bf34      	ite	cc
 800b828:	2301      	movcc	r3, #1
 800b82a:	2300      	movcs	r3, #0
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d002      	beq.n	800b838 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f00e ff90 	bl	801a758 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f7fd fafb 	bl	8008e34 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800b83e:	4604      	mov	r4, r0
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f7fd faf7 	bl	8008e34 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800b846:	4603      	mov	r3, r0
 800b848:	613b      	str	r3, [r7, #16]
 800b84a:	f107 0208 	add.w	r2, r7, #8
 800b84e:	f107 0310 	add.w	r3, r7, #16
 800b852:	4611      	mov	r1, r2
 800b854:	4618      	mov	r0, r3
 800b856:	f7fe f9c8 	bl	8009bea <_ZSt3maxIjERKT_S2_S2_>
 800b85a:	4603      	mov	r3, r0
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4423      	add	r3, r4
 800b860:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f7fd fae6 	bl	8008e34 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800b868:	4602      	mov	r2, r0
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d306      	bcc.n	800b87e <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f000 fe20 	bl	800c4b6 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800b876:	4602      	mov	r2, r0
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d904      	bls.n	800b888 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x84>
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f000 fe19 	bl	800c4b6 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800b884:	4603      	mov	r3, r0
 800b886:	e000      	b.n	800b88a <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800b888:	697b      	ldr	r3, [r7, #20]
      }
 800b88a:	4618      	mov	r0, r3
 800b88c:	371c      	adds	r7, #28
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd90      	pop	{r4, r7, pc}

0800b892 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b892:	b580      	push	{r7, lr}
 800b894:	b084      	sub	sp, #16
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	f107 030c 	add.w	r3, r7, #12
 800b8a0:	4611      	mov	r1, r2
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7ff ff9e 	bl	800b7e4 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
	...

0800b8b4 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b8b4:	b590      	push	{r4, r7, lr}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f83a 	bl	800b938 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	681c      	ldr	r4, [r3, #0]
 800b8c8:	6838      	ldr	r0, [r7, #0]
 800b8ca:	f000 f835 	bl	800b938 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	1ae3      	subs	r3, r4, r3
 800b8d4:	10db      	asrs	r3, r3, #3
 800b8d6:	4a03      	ldr	r2, [pc, #12]	; (800b8e4 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 800b8d8:	fb02 f303 	mul.w	r3, r2, r3
 800b8dc:	4618      	mov	r0, r3
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd90      	pop	{r4, r7, pc}
 800b8e4:	aaaaaaab 	.word	0xaaaaaaab

0800b8e8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d006      	beq.n	800b906 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x1e>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6839      	ldr	r1, [r7, #0]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f000 fdeb 	bl	800c4d8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>
 800b902:	4603      	mov	r3, r0
 800b904:	e000      	b.n	800b908 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x20>
 800b906:	2300      	movs	r3, #0
      }
 800b908:	4618      	mov	r0, r3
 800b90a:	3708      	adds	r7, #8
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800b910:	b590      	push	{r4, r7, lr}
 800b912:	b087      	sub	sp, #28
 800b914:	af02      	add	r7, sp, #8
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
 800b91c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800b91e:	f88d 4000 	strb.w	r4, [sp]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	68b9      	ldr	r1, [r7, #8]
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f000 fdf8 	bl	800c51e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800b92e:	4603      	mov	r3, r0
      }
 800b930:	4618      	mov	r0, r3
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	bd90      	pop	{r4, r7, pc}

0800b938 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4618      	mov	r0, r3
 800b944:	370c      	adds	r7, #12
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr

0800b94e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800b94e:	b580      	push	{r7, lr}
 800b950:	b082      	sub	sp, #8
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800b958:	6838      	ldr	r0, [r7, #0]
 800b95a:	f000 fdf2 	bl	800c542 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
	}
 800b95e:	bf00      	nop
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800b966:	b580      	push	{r7, lr}
 800b968:	b084      	sub	sp, #16
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
 800b96e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6819      	ldr	r1, [r3, #0]
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	4613      	mov	r3, r2
 800b978:	005b      	lsls	r3, r3, #1
 800b97a:	4413      	add	r3, r2
 800b97c:	00db      	lsls	r3, r3, #3
 800b97e:	425b      	negs	r3, r3
 800b980:	440b      	add	r3, r1
 800b982:	60fb      	str	r3, [r7, #12]
 800b984:	f107 020c 	add.w	r2, r7, #12
 800b988:	f107 0308 	add.w	r3, r7, #8
 800b98c:	4611      	mov	r1, r2
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff ff28 	bl	800b7e4 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800b99e:	b480      	push	{r7}
 800b9a0:	b083      	sub	sp, #12
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	370c      	adds	r7, #12
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr

0800b9b6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800b9c0:	e009      	b.n	800b9d6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fdda 	bl	800c57c <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f000 fde1 	bl	800c592 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>
	  for (; __first != __last; ++__first)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	3318      	adds	r3, #24
 800b9d4:	607b      	str	r3, [r7, #4]
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d1f1      	bne.n	800b9c2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0xc>
	}
 800b9de:	bf00      	nop
 800b9e0:	bf00      	nop
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 800b9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800b9f2:	687c      	ldr	r4, [r7, #4]
 800b9f4:	6838      	ldr	r0, [r7, #0]
 800b9f6:	f7fd fa1d 	bl	8008e34 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800b9fa:	4605      	mov	r5, r0
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f000 fde0 	bl	800c5c4 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800ba04:	4602      	mov	r2, r0
 800ba06:	f107 030c 	add.w	r3, r7, #12
 800ba0a:	4611      	mov	r1, r2
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f000 fdcb 	bl	800c5a8 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>
 800ba12:	f107 030c 	add.w	r3, r7, #12
 800ba16:	461a      	mov	r2, r3
 800ba18:	4629      	mov	r1, r5
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	f000 fddd 	bl	800c5da <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>
 800ba20:	f107 030c 	add.w	r3, r7, #12
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7fd f8e1 	bl	8008bec <_ZNSaIN3jlb4EdgeEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800ba2a:	6838      	ldr	r0, [r7, #0]
 800ba2c:	f000 fde9 	bl	800c602 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800ba30:	4605      	mov	r5, r0
 800ba32:	6838      	ldr	r0, [r7, #0]
 800ba34:	f000 fdf5 	bl	800c622 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800ba38:	4606      	mov	r6, r0
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fd fe80 	bl	8009746 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800ba46:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800ba48:	4622      	mov	r2, r4
 800ba4a:	4631      	mov	r1, r6
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	f000 fdf9 	bl	800c644 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 800ba52:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	605a      	str	r2, [r3, #4]
      }
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3714      	adds	r7, #20
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba62 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800ba62:	b480      	push	{r7}
 800ba64:	b083      	sub	sp, #12
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
 800ba6a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	601a      	str	r2, [r3, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4618      	mov	r0, r3
 800ba78:	370c      	adds	r7, #12
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr

0800ba82 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800ba82:	b590      	push	{r4, r7, lr}
 800ba84:	b087      	sub	sp, #28
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	60f8      	str	r0, [r7, #12]
 800ba8a:	60b9      	str	r1, [r7, #8]
 800ba8c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	f000 fde9 	bl	800c666 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800ba94:	4604      	mov	r4, r0
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f000 fdf6 	bl	800c688 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	1ae2      	subs	r2, r4, r3
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	bf34      	ite	cc
 800baa6:	2301      	movcc	r3, #1
 800baa8:	2300      	movcs	r3, #0
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b00      	cmp	r3, #0
 800baae:	d002      	beq.n	800bab6 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f00e fe51 	bl	801a758 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f000 fde6 	bl	800c688 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800babc:	4604      	mov	r4, r0
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f000 fde2 	bl	800c688 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800bac4:	4603      	mov	r3, r0
 800bac6:	613b      	str	r3, [r7, #16]
 800bac8:	f107 0208 	add.w	r2, r7, #8
 800bacc:	f107 0310 	add.w	r3, r7, #16
 800bad0:	4611      	mov	r1, r2
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe f889 	bl	8009bea <_ZSt3maxIjERKT_S2_S2_>
 800bad8:	4603      	mov	r3, r0
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4423      	add	r3, r4
 800bade:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	f000 fdd1 	bl	800c688 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800bae6:	4602      	mov	r2, r0
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	4293      	cmp	r3, r2
 800baec:	d306      	bcc.n	800bafc <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f000 fdb9 	bl	800c666 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800baf4:	4602      	mov	r2, r0
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d904      	bls.n	800bb06 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x84>
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f000 fdb2 	bl	800c666 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800bb02:	4603      	mov	r3, r0
 800bb04:	e000      	b.n	800bb08 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800bb06:	697b      	ldr	r3, [r7, #20]
      }
 800bb08:	4618      	mov	r0, r3
 800bb0a:	371c      	adds	r7, #28
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd90      	pop	{r4, r7, pc}

0800bb10 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	f107 030c 	add.w	r3, r7, #12
 800bb1e:	4611      	mov	r1, r2
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7ff ff9e 	bl	800ba62 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800bb30:	b590      	push	{r4, r7, lr}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f826 	bl	800bb8c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800bb40:	4603      	mov	r3, r0
 800bb42:	681c      	ldr	r4, [r3, #0]
 800bb44:	6838      	ldr	r0, [r7, #0]
 800bb46:	f000 f821 	bl	800bb8c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	1ae3      	subs	r3, r4, r3
 800bb50:	10db      	asrs	r3, r3, #3
 800bb52:	4a03      	ldr	r2, [pc, #12]	; (800bb60 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 800bb54:	fb02 f303 	mul.w	r3, r2, r3
 800bb58:	4618      	mov	r0, r3
 800bb5a:	370c      	adds	r7, #12
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd90      	pop	{r4, r7, pc}
 800bb60:	aaaaaaab 	.word	0xaaaaaaab

0800bb64 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d006      	beq.n	800bb82 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x1e>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6839      	ldr	r1, [r7, #0]
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f000 fd9b 	bl	800c6b4 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	e000      	b.n	800bb84 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x20>
 800bb82:	2300      	movs	r3, #0
      }
 800bb84:	4618      	mov	r0, r3
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4618      	mov	r0, r3
 800bb98:	370c      	adds	r7, #12
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr

0800bba2 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800bba2:	b590      	push	{r4, r7, lr}
 800bba4:	b085      	sub	sp, #20
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	60f8      	str	r0, [r7, #12]
 800bbaa:	60b9      	str	r1, [r7, #8]
 800bbac:	607a      	str	r2, [r7, #4]
 800bbae:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f000 fda2 	bl	800c6fa <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	68b8      	ldr	r0, [r7, #8]
 800bbba:	f000 fd9e 	bl	800c6fa <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800bbbe:	4601      	mov	r1, r0
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f000 fda3 	bl	800c710 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>
 800bbca:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3714      	adds	r7, #20
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd90      	pop	{r4, r7, pc}

0800bbd4 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6819      	ldr	r1, [r3, #0]
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	005b      	lsls	r3, r3, #1
 800bbe8:	4413      	add	r3, r2
 800bbea:	00db      	lsls	r3, r3, #3
 800bbec:	425b      	negs	r3, r3
 800bbee:	440b      	add	r3, r1
 800bbf0:	60fb      	str	r3, [r7, #12]
 800bbf2:	f107 020c 	add.w	r2, r7, #12
 800bbf6:	f107 0308 	add.w	r3, r7, #8
 800bbfa:	4611      	mov	r1, r2
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7ff ff30 	bl	800ba62 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	4618      	mov	r0, r3
 800bc06:	3710      	adds	r7, #16
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4618      	mov	r0, r3
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800bc2c:	f04f 33ff 	mov.w	r3, #4294967295
      }
 800bc30:	4618      	mov	r0, r3
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800bc44:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bc48:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f7ff ffea 	bl	800bc24 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 800bc50:	4603      	mov	r3, r0
 800bc52:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800bc54:	f107 0208 	add.w	r2, r7, #8
 800bc58:	f107 030c 	add.w	r3, r7, #12
 800bc5c:	4611      	mov	r1, r2
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 f832 	bl	800bcc8 <_ZSt3minIjERKT_S2_S2_>
 800bc64:	4603      	mov	r3, r0
 800bc66:	681b      	ldr	r3, [r3, #0]
      }
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b086      	sub	sp, #24
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	68b9      	ldr	r1, [r7, #8]
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	f000 fd5f 	bl	800c748 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>
 800bc8a:	4603      	mov	r3, r0
    }
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3718      	adds	r7, #24
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>:
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b084      	sub	sp, #16
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	60f8      	str	r0, [r7, #12]
 800bcb2:	60b9      	str	r1, [r7, #8]
 800bcb4:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	4619      	mov	r1, r3
 800bcbc:	68b8      	ldr	r0, [r7, #8]
 800bcbe:	f00e fd2f 	bl	801a720 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d201      	bcs.n	800bce2 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	e000      	b.n	800bce4 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800bce2:	687b      	ldr	r3, [r7, #4]
    }
 800bce4:	4618      	mov	r0, r3
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <_ZSt12__miter_baseIPPfET_S2_>:
    __miter_base(_Iterator __it)
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
    { return __it; }
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	370c      	adds	r7, #12
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800bd06:	b5b0      	push	{r4, r5, r7, lr}
 800bd08:	b084      	sub	sp, #16
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	60f8      	str	r0, [r7, #12]
 800bd0e:	60b9      	str	r1, [r7, #8]
 800bd10:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f000 fd5e 	bl	800c7d4 <_ZSt12__niter_baseIPPfET_S2_>
 800bd18:	4604      	mov	r4, r0
 800bd1a:	68b8      	ldr	r0, [r7, #8]
 800bd1c:	f000 fd5a 	bl	800c7d4 <_ZSt12__niter_baseIPPfET_S2_>
 800bd20:	4605      	mov	r5, r0
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f000 fd55 	bl	800c7d4 <_ZSt12__niter_baseIPPfET_S2_>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	4629      	mov	r1, r5
 800bd30:	4620      	mov	r0, r4
 800bd32:	f000 fd5a 	bl	800c7ea <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 800bd36:	4602      	mov	r2, r0
 800bd38:	1d3b      	adds	r3, r7, #4
 800bd3a:	4611      	mov	r1, r2
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f000 fd64 	bl	800c80a <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 800bd42:	4603      	mov	r3, r0
    }
 800bd44:	4618      	mov	r0, r3
 800bd46:	3710      	adds	r7, #16
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bdb0      	pop	{r4, r5, r7, pc}

0800bd4c <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800bd4c:	b5b0      	push	{r4, r5, r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f000 fd3b 	bl	800c7d4 <_ZSt12__niter_baseIPPfET_S2_>
 800bd5e:	4604      	mov	r4, r0
 800bd60:	68b8      	ldr	r0, [r7, #8]
 800bd62:	f000 fd37 	bl	800c7d4 <_ZSt12__niter_baseIPPfET_S2_>
 800bd66:	4605      	mov	r5, r0
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 fd32 	bl	800c7d4 <_ZSt12__niter_baseIPPfET_S2_>
 800bd70:	4603      	mov	r3, r0
 800bd72:	461a      	mov	r2, r3
 800bd74:	4629      	mov	r1, r5
 800bd76:	4620      	mov	r0, r4
 800bd78:	f000 fd53 	bl	800c822 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	1d3b      	adds	r3, r7, #4
 800bd80:	4611      	mov	r1, r2
 800bd82:	4618      	mov	r0, r3
 800bd84:	f000 fd41 	bl	800c80a <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 800bd88:	4603      	mov	r3, r0
    }
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bdb0      	pop	{r4, r5, r7, pc}

0800bd92 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	60f8      	str	r0, [r7, #12]
 800bd9a:	60b9      	str	r1, [r7, #8]
 800bd9c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4619      	mov	r1, r3
 800bda4:	68b8      	ldr	r0, [r7, #8]
 800bda6:	f00e fcbb 	bl	801a720 <_ZdlPvj>
      }
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	370c      	adds	r7, #12
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr

0800bdc6 <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b082      	sub	sp, #8
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f7fe f80f 	bl	8009df2 <_ZSt10destroy_atIfEvPT_>
    }
 800bdd4:	bf00      	nop
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>:
	    return noexcept(*__t < *__u) && noexcept(*__u < *__t);
	}

      template<typename _Tp, typename _Up>
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 800bddc:	b480      	push	{r7}
 800bdde:	b085      	sub	sp, #20
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
	  { __t < __u } -> __boolean_testable;
	  { __u < __t } -> __boolean_testable;
	}
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d009      	beq.n	800be08 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2c>
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d201      	bcs.n	800be04 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x28>
 800be00:	23ff      	movs	r3, #255	; 0xff
 800be02:	e002      	b.n	800be0a <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 800be04:	2301      	movs	r3, #1
 800be06:	e000      	b.n	800be0a <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 800be08:	2300      	movs	r3, #0
	      else if (__u < __t)
		return weak_ordering::greater;
	      else
		return weak_ordering::equivalent;
	    }
	}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3714      	adds	r7, #20
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
	...

0800be18 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>:
    operator<=>(const __normal_iterator<_Iterator, _Container>& __lhs,
 800be18:	b590      	push	{r4, r7, lr}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f7fd fa97 	bl	8009356 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800be28:	4604      	mov	r4, r0
 800be2a:	6838      	ldr	r0, [r7, #0]
 800be2c:	f7fd fa93 	bl	8009356 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800be30:	4603      	mov	r3, r0
 800be32:	461a      	mov	r2, r3
 800be34:	4621      	mov	r1, r4
 800be36:	4804      	ldr	r0, [pc, #16]	; (800be48 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_+0x30>)
 800be38:	f7ff ffd0 	bl	800bddc <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>
 800be3c:	4603      	mov	r3, r0
 800be3e:	4618      	mov	r0, r3
 800be40:	370c      	adds	r7, #12
 800be42:	46bd      	mov	sp, r7
 800be44:	bd90      	pop	{r4, r7, pc}
 800be46:	bf00      	nop
 800be48:	0801e688 	.word	0x0801e688

0800be4c <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800be4c:	b590      	push	{r4, r7, lr}
 800be4e:	b087      	sub	sp, #28
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
 800be58:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800be5a:	463b      	mov	r3, r7
 800be5c:	461a      	mov	r2, r3
 800be5e:	68b9      	ldr	r1, [r7, #8]
 800be60:	68f8      	ldr	r0, [r7, #12]
 800be62:	f000 fd24 	bl	800c8ae <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	613b      	str	r3, [r7, #16]
 800be6a:	e013      	b.n	800be94 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x48>
	if (__comp(__i, __first))
 800be6c:	463b      	mov	r3, r7
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	6939      	ldr	r1, [r7, #16]
 800be72:	4618      	mov	r0, r3
 800be74:	f7ff f8ca 	bl	800b00c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d005      	beq.n	800be8a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800be7e:	463b      	mov	r3, r7
 800be80:	693a      	ldr	r2, [r7, #16]
 800be82:	68b9      	ldr	r1, [r7, #8]
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f000 fd68 	bl	800c95a <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800be8a:	f107 0310 	add.w	r3, r7, #16
 800be8e:	4618      	mov	r0, r3
 800be90:	f7ff f8a0 	bl	800afd4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800be94:	1d3a      	adds	r2, r7, #4
 800be96:	f107 0310 	add.w	r3, r7, #16
 800be9a:	4611      	mov	r1, r2
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7ff ffbb 	bl	800be18 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 800bea2:	4604      	mov	r4, r0
 800bea4:	f107 0314 	add.w	r3, r7, #20
 800bea8:	2100      	movs	r1, #0
 800beaa:	4618      	mov	r0, r3
 800beac:	f7f6 f848 	bl	8001f40 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 800beb0:	7d39      	ldrb	r1, [r7, #20]
 800beb2:	4620      	mov	r0, r4
 800beb4:	f7f6 f850 	bl	8001f58 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1d6      	bne.n	800be6c <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x20>
    }
 800bebe:	bf00      	nop
 800bec0:	bf00      	nop
 800bec2:	371c      	adds	r7, #28
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd90      	pop	{r4, r7, pc}

0800bec8 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800bec8:	b480      	push	{r7}
 800beca:	b083      	sub	sp, #12
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
	--_M_current;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	1f1a      	subs	r2, r3, #4
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	601a      	str	r2, [r3, #0]
	return *this;
 800beda:	687b      	ldr	r3, [r7, #4]
      }
 800bedc:	4618      	mov	r0, r3
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 800bef4:	e00a      	b.n	800bf0c <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x24>
	{
	  --__last;
 800bef6:	f107 0308 	add.w	r3, r7, #8
 800befa:	4618      	mov	r0, r3
 800befc:	f7ff ffe4 	bl	800bec8 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	68b9      	ldr	r1, [r7, #8]
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f000 fd27 	bl	800c95a <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 800bf0c:	f107 020c 	add.w	r2, r7, #12
 800bf10:	f107 0308 	add.w	r3, r7, #8
 800bf14:	4611      	mov	r1, r2
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fd fa40 	bl	800939c <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	bfcc      	ite	gt
 800bf22:	2301      	movgt	r3, #1
 800bf24:	2300      	movle	r3, #0
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1e4      	bne.n	800bef6 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xe>
	}
    }
 800bf2c:	bf00      	nop
 800bf2e:	bf00      	nop
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b084      	sub	sp, #16
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
 800bf3e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	425b      	negs	r3, r3
 800bf4a:	4413      	add	r3, r2
 800bf4c:	60fb      	str	r3, [r7, #12]
 800bf4e:	f107 020c 	add.w	r2, r7, #12
 800bf52:	f107 0308 	add.w	r3, r7, #8
 800bf56:	4611      	mov	r1, r2
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7fd f9ec 	bl	8009336 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	4618      	mov	r0, r3
 800bf62:	3710      	adds	r7, #16
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	607a      	str	r2, [r7, #4]
 800bf74:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	68b9      	ldr	r1, [r7, #8]
 800bf7a:	f107 0018 	add.w	r0, r7, #24
 800bf7e:	f7ff f845 	bl	800b00c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d020      	beq.n	800bfca <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 800bf88:	683a      	ldr	r2, [r7, #0]
 800bf8a:	6879      	ldr	r1, [r7, #4]
 800bf8c:	f107 0018 	add.w	r0, r7, #24
 800bf90:	f7ff f83c 	bl	800b00c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d004      	beq.n	800bfa4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800bf9a:	6879      	ldr	r1, [r7, #4]
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f000 fd1c 	bl	800c9da <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800bfa2:	e032      	b.n	800c00a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 800bfa4:	683a      	ldr	r2, [r7, #0]
 800bfa6:	68b9      	ldr	r1, [r7, #8]
 800bfa8:	f107 0018 	add.w	r0, r7, #24
 800bfac:	f7ff f82e 	bl	800b00c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d004      	beq.n	800bfc0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f000 fd0e 	bl	800c9da <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800bfbe:	e024      	b.n	800c00a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800bfc0:	68b9      	ldr	r1, [r7, #8]
 800bfc2:	68f8      	ldr	r0, [r7, #12]
 800bfc4:	f000 fd09 	bl	800c9da <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800bfc8:	e01f      	b.n	800c00a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 800bfca:	683a      	ldr	r2, [r7, #0]
 800bfcc:	68b9      	ldr	r1, [r7, #8]
 800bfce:	f107 0018 	add.w	r0, r7, #24
 800bfd2:	f7ff f81b 	bl	800b00c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d004      	beq.n	800bfe6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 800bfdc:	68b9      	ldr	r1, [r7, #8]
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f000 fcfb 	bl	800c9da <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800bfe4:	e011      	b.n	800c00a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 800bfe6:	683a      	ldr	r2, [r7, #0]
 800bfe8:	6879      	ldr	r1, [r7, #4]
 800bfea:	f107 0018 	add.w	r0, r7, #24
 800bfee:	f7ff f80d 	bl	800b00c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d004      	beq.n	800c002 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 800bff8:	6839      	ldr	r1, [r7, #0]
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f000 fced 	bl	800c9da <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800c000:	e003      	b.n	800c00a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 800c002:	6879      	ldr	r1, [r7, #4]
 800c004:	68f8      	ldr	r0, [r7, #12]
 800c006:	f000 fce8 	bl	800c9da <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800c00a:	bf00      	nop
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800c012:	b590      	push	{r4, r7, lr}
 800c014:	b087      	sub	sp, #28
 800c016:	af00      	add	r7, sp, #0
 800c018:	60f8      	str	r0, [r7, #12]
 800c01a:	60b9      	str	r1, [r7, #8]
 800c01c:	607a      	str	r2, [r7, #4]
 800c01e:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800c020:	e004      	b.n	800c02c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
	    ++__first;
 800c022:	f107 030c 	add.w	r3, r7, #12
 800c026:	4618      	mov	r0, r3
 800c028:	f7fe ffd4 	bl	800afd4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 800c02c:	463b      	mov	r3, r7
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	68f9      	ldr	r1, [r7, #12]
 800c032:	4618      	mov	r0, r3
 800c034:	f7fe ffea 	bl	800b00c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1f1      	bne.n	800c022 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x10>
	  --__last;
 800c03e:	f107 0308 	add.w	r3, r7, #8
 800c042:	4618      	mov	r0, r3
 800c044:	f7ff ff40 	bl	800bec8 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 800c048:	e004      	b.n	800c054 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x42>
	    --__last;
 800c04a:	f107 0308 	add.w	r3, r7, #8
 800c04e:	4618      	mov	r0, r3
 800c050:	f7ff ff3a 	bl	800bec8 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 800c054:	463b      	mov	r3, r7
 800c056:	68ba      	ldr	r2, [r7, #8]
 800c058:	6879      	ldr	r1, [r7, #4]
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fe ffd6 	bl	800b00c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d1f1      	bne.n	800c04a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x38>
	  if (!(__first < __last))
 800c066:	f107 0208 	add.w	r2, r7, #8
 800c06a:	f107 030c 	add.w	r3, r7, #12
 800c06e:	4611      	mov	r1, r2
 800c070:	4618      	mov	r0, r3
 800c072:	f7ff fed1 	bl	800be18 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 800c076:	4604      	mov	r4, r0
 800c078:	f107 0314 	add.w	r3, r7, #20
 800c07c:	2100      	movs	r1, #0
 800c07e:	4618      	mov	r0, r3
 800c080:	f7f5 ff5e 	bl	8001f40 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 800c084:	7d39      	ldrb	r1, [r7, #20]
 800c086:	4620      	mov	r0, r4
 800c088:	f7f5 ff66 	bl	8001f58 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 800c08c:	4603      	mov	r3, r0
 800c08e:	f083 0301 	eor.w	r3, r3, #1
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b00      	cmp	r3, #0
 800c096:	d001      	beq.n	800c09c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x8a>
	    return __first;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	e009      	b.n	800c0b0 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x9e>
	  std::iter_swap(__first, __last);
 800c09c:	68b9      	ldr	r1, [r7, #8]
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f000 fc9b 	bl	800c9da <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	  ++__first;
 800c0a4:	f107 030c 	add.w	r3, r7, #12
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fe ff93 	bl	800afd4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 800c0ae:	e7bd      	b.n	800c02c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
    }
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	371c      	adds	r7, #28
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd90      	pop	{r4, r7, pc}

0800c0b8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>:
    __miter_base(_Iterator __it)
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
    { return __it; }
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800c0ce:	b5b0      	push	{r4, r5, r7, lr}
 800c0d0:	b084      	sub	sp, #16
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	60f8      	str	r0, [r7, #12]
 800c0d6:	60b9      	str	r1, [r7, #8]
 800c0d8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800c0da:	68f8      	ldr	r0, [r7, #12]
 800c0dc:	f7ff fa18 	bl	800b510 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800c0e0:	4604      	mov	r4, r0
 800c0e2:	68b8      	ldr	r0, [r7, #8]
 800c0e4:	f7ff fa14 	bl	800b510 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800c0e8:	4605      	mov	r5, r0
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f7ff fa10 	bl	800b510 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	4629      	mov	r1, r5
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f000 fc86 	bl	800ca08 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	4619      	mov	r1, r3
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7ff fa23 	bl	800b54c <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 800c106:	4603      	mov	r3, r0
    }
 800c108:	4618      	mov	r0, r3
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bdb0      	pop	{r4, r5, r7, pc}

0800c110 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 800c110:	b580      	push	{r7, lr}
 800c112:	ed2d 8b02 	vpush	{d8}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	ed93 8a00 	vldr	s16, [r3]
 800c126:	1d3b      	adds	r3, r7, #4
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fe ff63 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c12e:	4603      	mov	r3, r0
 800c130:	edd3 7a00 	vldr	s15, [r3]
 800c134:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13c:	bf4c      	ite	mi
 800c13e:	2301      	movmi	r3, #1
 800c140:	2300      	movpl	r3, #0
 800c142:	b2db      	uxtb	r3, r3
 800c144:	4618      	mov	r0, r3
 800c146:	3710      	adds	r7, #16
 800c148:	46bd      	mov	sp, r7
 800c14a:	ecbd 8b02 	vpop	{d8}
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800c150:	b590      	push	{r4, r7, lr}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800c15a:	1d3b      	adds	r3, r7, #4
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7fe ff49 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c162:	4603      	mov	r3, r0
 800c164:	4618      	mov	r0, r3
 800c166:	f7fc fa90 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c16a:	4603      	mov	r3, r0
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	60bb      	str	r3, [r7, #8]
      --__next;
 800c174:	f107 0308 	add.w	r3, r7, #8
 800c178:	4618      	mov	r0, r3
 800c17a:	f7ff fea5 	bl	800bec8 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 800c17e:	e017      	b.n	800c1b0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 800c180:	f107 0308 	add.w	r3, r7, #8
 800c184:	4618      	mov	r0, r3
 800c186:	f7fe ff35 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c18a:	4603      	mov	r3, r0
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7fc fa7c 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c192:	4603      	mov	r3, r0
 800c194:	681c      	ldr	r4, [r3, #0]
 800c196:	1d3b      	adds	r3, r7, #4
 800c198:	4618      	mov	r0, r3
 800c19a:	f7fe ff2b 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	601c      	str	r4, [r3, #0]
	  __last = __next;
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	607b      	str	r3, [r7, #4]
	  --__next;
 800c1a6:	f107 0308 	add.w	r3, r7, #8
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7ff fe8c 	bl	800bec8 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 800c1b0:	f107 010c 	add.w	r1, r7, #12
 800c1b4:	463b      	mov	r3, r7
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7ff ffa9 	bl	800c110 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d1dd      	bne.n	800c180 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 800c1c4:	f107 030c 	add.w	r3, r7, #12
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7fc fa5e 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	681c      	ldr	r4, [r3, #0]
 800c1d2:	1d3b      	adds	r3, r7, #4
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fe ff0d 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	601c      	str	r4, [r3, #0]
    }
 800c1de:	bf00      	nop
 800c1e0:	3714      	adds	r7, #20
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd90      	pop	{r4, r7, pc}

0800c1e6 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b082      	sub	sp, #8
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800c1f0:	463b      	mov	r3, r7
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fe ffd8 	bl	800b1a8 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 800c202:	b580      	push	{r7, lr}
 800c204:	b082      	sub	sp, #8
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800c20c:	463b      	mov	r3, r7
 800c20e:	4618      	mov	r0, r3
 800c210:	f7ff f893 	bl	800b33a <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	4618      	mov	r0, r3
 800c218:	3708      	adds	r7, #8
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800c21e:	b480      	push	{r7}
 800c220:	b083      	sub	sp, #12
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
 800c226:	6039      	str	r1, [r7, #0]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4618      	mov	r0, r3
 800c22c:	370c      	adds	r7, #12
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr

0800c236 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800c236:	b590      	push	{r4, r7, lr}
 800c238:	b085      	sub	sp, #20
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	60f8      	str	r0, [r7, #12]
 800c23e:	60b9      	str	r1, [r7, #8]
 800c240:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f7fd ff79 	bl	800a13a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800c248:	4604      	mov	r4, r0
 800c24a:	68b8      	ldr	r0, [r7, #8]
 800c24c:	f7fd ff75 	bl	800a13a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800c250:	4603      	mov	r3, r0
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	4619      	mov	r1, r3
 800c256:	4620      	mov	r0, r4
 800c258:	f000 fbe6 	bl	800ca28 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 800c25c:	4603      	mov	r3, r0
    }
 800c25e:	4618      	mov	r0, r3
 800c260:	3714      	adds	r7, #20
 800c262:	46bd      	mov	sp, r7
 800c264:	bd90      	pop	{r4, r7, pc}

0800c266 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c266:	b480      	push	{r7}
 800c268:	b083      	sub	sp, #12
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4618      	mov	r0, r3
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800c288:	f7f5 fe52 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d006      	beq.n	800c2a0 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	68b9      	ldr	r1, [r7, #8]
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f000 fbe9 	bl	800ca6e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 800c29c:	4603      	mov	r3, r0
 800c29e:	e006      	b.n	800c2ae <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	68b9      	ldr	r1, [r7, #8]
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f000 f829 	bl	800c2fc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	bf00      	nop
    }
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800c2b6:	b480      	push	{r7}
 800c2b8:	b087      	sub	sp, #28
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	60f8      	str	r0, [r7, #12]
 800c2be:	60b9      	str	r1, [r7, #8]
 800c2c0:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	1ad3      	subs	r3, r2, r3
 800c2c8:	109b      	asrs	r3, r3, #2
 800c2ca:	617b      	str	r3, [r7, #20]
 800c2cc:	e00c      	b.n	800c2e8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x32>
	      *__result = *__first;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	601a      	str	r2, [r3, #0]
	      ++__first;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	3304      	adds	r3, #4
 800c2da:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	3304      	adds	r3, #4
 800c2e0:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	617b      	str	r3, [r7, #20]
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	dcef      	bgt.n	800c2ce <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 800c2ee:	687b      	ldr	r3, [r7, #4]
	}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	371c      	adds	r7, #28
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	1ad3      	subs	r3, r2, r3
 800c30e:	109b      	asrs	r3, r3, #2
 800c310:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d006      	beq.n	800c326 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	009b      	lsls	r3, r3, #2
 800c31c:	461a      	mov	r2, r3
 800c31e:	68f9      	ldr	r1, [r7, #12]
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f010 fe1e 	bl	801cf62 <memmove>
	  return __result + _Num;
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	4413      	add	r3, r2
	}
 800c32e:	4618      	mov	r0, r3
 800c330:	3718      	adds	r7, #24
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800c336:	b480      	push	{r7}
 800c338:	b087      	sub	sp, #28
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	60f8      	str	r0, [r7, #12]
 800c33e:	60b9      	str	r1, [r7, #8]
 800c340:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800c342:	68ba      	ldr	r2, [r7, #8]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	1ad3      	subs	r3, r2, r3
 800c348:	617b      	str	r3, [r7, #20]
 800c34a:	e00c      	b.n	800c366 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x30>
	      *__result = *__first;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	781a      	ldrb	r2, [r3, #0]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	701a      	strb	r2, [r3, #0]
	      ++__first;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	3301      	adds	r3, #1
 800c358:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	3301      	adds	r3, #1
 800c35e:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	3b01      	subs	r3, #1
 800c364:	617b      	str	r3, [r7, #20]
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	dcef      	bgt.n	800c34c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x16>
	  return __result;
 800c36c:	687b      	ldr	r3, [r7, #4]
	}
 800c36e:	4618      	mov	r0, r3
 800c370:	371c      	adds	r7, #28
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b086      	sub	sp, #24
 800c37e:	af00      	add	r7, sp, #0
 800c380:	60f8      	str	r0, [r7, #12]
 800c382:	60b9      	str	r1, [r7, #8]
 800c384:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800c386:	68ba      	ldr	r2, [r7, #8]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	1ad3      	subs	r3, r2, r3
 800c38c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d005      	beq.n	800c3a0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	461a      	mov	r2, r3
 800c398:	68f9      	ldr	r1, [r7, #12]
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f010 fde1 	bl	801cf62 <memmove>
	  return __result + _Num;
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	4413      	add	r3, r2
	}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3718      	adds	r7, #24
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c3ae:	b480      	push	{r7}
 800c3b0:	b083      	sub	sp, #12
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	370c      	adds	r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	005b      	lsls	r3, r3, #1
 800c3d6:	4413      	add	r3, r2
 800c3d8:	00db      	lsls	r3, r3, #3
 800c3da:	4619      	mov	r1, r3
 800c3dc:	68b8      	ldr	r0, [r7, #8]
 800c3de:	f00e f99f 	bl	801a720 <_ZdlPvj>
      }
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	370c      	adds	r7, #12
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr

0800c3fe <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>:
    _Destroy(_Tp* __pointer)
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b082      	sub	sp, #8
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 f89b 	bl	800c542 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
    }
 800c40c:	bf00      	nop
 800c40e:	3708      	adds	r7, #8
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800c414:	b590      	push	{r4, r7, lr}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f000 fb82 	bl	800cb2a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 800c426:	4604      	mov	r4, r0
 800c428:	68b8      	ldr	r0, [r7, #8]
 800c42a:	f000 fb7e 	bl	800cb2a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 800c42e:	4603      	mov	r3, r0
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	4619      	mov	r1, r3
 800c434:	4620      	mov	r0, r4
 800c436:	f000 fb83 	bl	800cb40 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>
 800c43a:	4603      	mov	r3, r0
    }
 800c43c:	4618      	mov	r0, r3
 800c43e:	3714      	adds	r7, #20
 800c440:	46bd      	mov	sp, r7
 800c442:	bd90      	pop	{r4, r7, pc}

0800c444 <_ZSt8_DestroyIcEvPT_>:
    _Destroy(_Tp* __pointer)
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 fb9a 	bl	800cb86 <_ZSt10destroy_atIcEvPT_>
    }
 800c452:	bf00      	nop
 800c454:	3708      	adds	r7, #8
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800c45a:	b480      	push	{r7}
 800c45c:	b083      	sub	sp, #12
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4618      	mov	r0, r3
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 800c470:	b480      	push	{r7}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	601a      	str	r2, [r3, #0]
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	685a      	ldr	r2, [r3, #4]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	689a      	ldr	r2, [r3, #8]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	2200      	movs	r2, #0
 800c496:	609a      	str	r2, [r3, #8]
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	689a      	ldr	r2, [r3, #8]
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	605a      	str	r2, [r3, #4]
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	601a      	str	r2, [r3, #0]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	370c      	adds	r7, #12
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr

0800c4b6 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b082      	sub	sp, #8
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f000 f87f 	bl	800c5c4 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 fb75 	bl	800cbb8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	60fb      	str	r3, [r7, #12]
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800c4ea:	f7f5 fd21 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d009      	beq.n	800c508 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c4f4:	68ba      	ldr	r2, [r7, #8]
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	005b      	lsls	r3, r3, #1
 800c4fa:	4413      	add	r3, r2
 800c4fc:	00db      	lsls	r3, r3, #3
 800c4fe:	4618      	mov	r0, r3
 800c500:	f00e f910 	bl	801a724 <_Znwj>
 800c504:	4603      	mov	r3, r0
 800c506:	e006      	b.n	800c516 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800c508:	2200      	movs	r2, #0
 800c50a:	68b9      	ldr	r1, [r7, #8]
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	f000 fd6d 	bl	800cfec <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>
 800c512:	4603      	mov	r3, r0
 800c514:	bf00      	nop
      { return __a.allocate(__n); }
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800c51e:	b580      	push	{r7, lr}
 800c520:	b084      	sub	sp, #16
 800c522:	af00      	add	r7, sp, #0
 800c524:	60f8      	str	r0, [r7, #12]
 800c526:	60b9      	str	r1, [r7, #8]
 800c528:	607a      	str	r2, [r7, #4]
 800c52a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	68b9      	ldr	r1, [r7, #8]
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	f000 fb5c 	bl	800cbf0 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800c538:	4603      	mov	r3, r0
      }
 800c53a:	4618      	mov	r0, r3
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>:
    destroy_at(_Tp* __location)
 800c542:	b580      	push	{r7, lr}
 800c544:	b082      	sub	sp, #8
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f7f8 faa5 	bl	8004a9a <_ZN3jlb4EdgeD1Ev>
    }
 800c550:	bf00      	nop
 800c552:	3708      	adds	r7, #8
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	4613      	mov	r3, r2
 800c568:	005b      	lsls	r3, r3, #1
 800c56a:	4413      	add	r3, r2
 800c56c:	00db      	lsls	r3, r3, #3
 800c56e:	4619      	mov	r1, r3
 800c570:	68b8      	ldr	r0, [r7, #8]
 800c572:	f00e f8d5 	bl	801a720 <_ZdlPvj>
      }
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4618      	mov	r0, r3
 800c588:	370c      	adds	r7, #12
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>:
    _Destroy(_Tp* __pointer)
 800c592:	b580      	push	{r7, lr}
 800c594:	b082      	sub	sp, #8
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 f8c9 	bl	800c732 <_ZSt10destroy_atIN3jlb4NodeEEvPT_>
    }
 800c5a0:	bf00      	nop
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6839      	ldr	r1, [r7, #0]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f000 fb37 	bl	800cc2a <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	3708      	adds	r7, #8
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	370c      	adds	r7, #12
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr

0800c5da <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b084      	sub	sp, #16
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	60f8      	str	r0, [r7, #12]
 800c5e2:	60b9      	str	r1, [r7, #8]
 800c5e4:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6879      	ldr	r1, [r7, #4]
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f000 fb2a 	bl	800cc44 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800c5f0:	68b9      	ldr	r1, [r7, #8]
 800c5f2:	68f8      	ldr	r0, [r7, #12]
 800c5f4:	f000 fb38 	bl	800cc68 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800c602:	b580      	push	{r7, lr}
 800c604:	b084      	sub	sp, #16
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	f107 030c 	add.w	r3, r7, #12
 800c610:	4611      	mov	r1, r2
 800c612:	4618      	mov	r0, r3
 800c614:	f000 fb46 	bl	800cca4 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	4618      	mov	r0, r3
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800c622:	b580      	push	{r7, lr}
 800c624:	b084      	sub	sp, #16
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	1d1a      	adds	r2, r3, #4
 800c62e:	f107 030c 	add.w	r3, r7, #12
 800c632:	4611      	mov	r1, r2
 800c634:	4618      	mov	r0, r3
 800c636:	f000 fb35 	bl	800cca4 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	4618      	mov	r0, r3
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	607a      	str	r2, [r7, #4]
 800c650:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	68b9      	ldr	r1, [r7, #8]
 800c656:	68f8      	ldr	r0, [r7, #12]
 800c658:	f000 fb34 	bl	800ccc4 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800c65c:	4603      	mov	r3, r0
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800c666:	b580      	push	{r7, lr}
 800c668:	b082      	sub	sp, #8
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4618      	mov	r0, r3
 800c672:	f000 fb63 	bl	800cd3c <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800c676:	4603      	mov	r3, r0
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 fb43 	bl	800cd04 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>
 800c67e:	4603      	mov	r3, r0
 800c680:	4618      	mov	r0, r3
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	685a      	ldr	r2, [r3, #4]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	10db      	asrs	r3, r3, #3
 800c69c:	4a04      	ldr	r2, [pc, #16]	; (800c6b0 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv+0x28>)
 800c69e:	fb02 f303 	mul.w	r3, r2, r3
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	370c      	adds	r7, #12
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop
 800c6b0:	aaaaaaab 	.word	0xaaaaaaab

0800c6b4 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	60fb      	str	r3, [r7, #12]
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800c6c6:	f7f5 fc33 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d009      	beq.n	800c6e4 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c6d0:	68ba      	ldr	r2, [r7, #8]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	005b      	lsls	r3, r3, #1
 800c6d6:	4413      	add	r3, r2
 800c6d8:	00db      	lsls	r3, r3, #3
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f00e f822 	bl	801a724 <_Znwj>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	e006      	b.n	800c6f2 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	68b9      	ldr	r1, [r7, #8]
 800c6e8:	68f8      	ldr	r0, [r7, #12]
 800c6ea:	f000 fd4b 	bl	800d184 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	bf00      	nop
      { return __a.allocate(__n); }
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3710      	adds	r7, #16
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800c6fa:	b480      	push	{r7}
 800c6fc:	b083      	sub	sp, #12
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	4618      	mov	r0, r3
 800c706:	370c      	adds	r7, #12
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr

0800c710 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
 800c71c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	68b9      	ldr	r1, [r7, #8]
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	f000 fb15 	bl	800cd52 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>
 800c728:	4603      	mov	r3, r0
 800c72a:	4618      	mov	r0, r3
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}

0800c732 <_ZSt10destroy_atIN3jlb4NodeEEvPT_>:
    destroy_at(_Tp* __location)
 800c732:	b580      	push	{r7, lr}
 800c734:	b082      	sub	sp, #8
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f7f8 f99f 	bl	8004a7e <_ZN3jlb4NodeD1Ev>
    }
 800c740:	bf00      	nop
 800c742:	3708      	adds	r7, #8
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	68b9      	ldr	r1, [r7, #8]
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f7fc fa1f 	bl	8008b9c <_ZSt4copyIPKcPcET0_T_S4_S3_>
 800c75e:	4603      	mov	r3, r0
 800c760:	4618      	mov	r0, r3
 800c762:	3710      	adds	r7, #16
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800c770:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800c774:	4618      	mov	r0, r3
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f7ff ffeb 	bl	800c768 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>
 800c792:	4602      	mov	r2, r0
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	4293      	cmp	r3, r2
 800c798:	bf8c      	ite	hi
 800c79a:	2301      	movhi	r3, #1
 800c79c:	2300      	movls	r3, #0
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	bf14      	ite	ne
 800c7a4:	2301      	movne	r3, #1
 800c7a6:	2300      	moveq	r3, #0
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d007      	beq.n	800c7be <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7b4:	d301      	bcc.n	800c7ba <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800c7b6:	f00d ffcc 	bl	801a752 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800c7ba:	f00d ffc7 	bl	801a74c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f00d ffae 	bl	801a724 <_Znwj>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	bf00      	nop
      }
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <_ZSt12__niter_baseIPPfET_S2_>:
    __niter_base(_Iterator __it)
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
    { return __it; }
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr

0800c7ea <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b084      	sub	sp, #16
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	60f8      	str	r0, [r7, #12]
 800c7f2:	60b9      	str	r1, [r7, #8]
 800c7f4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	68b9      	ldr	r1, [r7, #8]
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f000 fabb 	bl	800cd76 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 800c800:	4603      	mov	r3, r0
 800c802:	4618      	mov	r0, r3
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <_ZSt12__niter_wrapIPPfET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800c80a:	b480      	push	{r7}
 800c80c:	b083      	sub	sp, #12
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
 800c812:	6039      	str	r1, [r7, #0]
    { return __res; }
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	4618      	mov	r0, r3
 800c818:	370c      	adds	r7, #12
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr

0800c822 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800c822:	b580      	push	{r7, lr}
 800c824:	b084      	sub	sp, #16
 800c826:	af00      	add	r7, sp, #0
 800c828:	60f8      	str	r0, [r7, #12]
 800c82a:	60b9      	str	r1, [r7, #8]
 800c82c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	68b9      	ldr	r1, [r7, #8]
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f000 fabc 	bl	800cdb0 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 800c838:	4603      	mov	r3, r0
 800c83a:	4618      	mov	r0, r3
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800c842:	b480      	push	{r7}
 800c844:	b083      	sub	sp, #12
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800c84a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800c84e:	4618      	mov	r0, r3
 800c850:	370c      	adds	r7, #12
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr

0800c85a <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b084      	sub	sp, #16
 800c85e:	af00      	add	r7, sp, #0
 800c860:	60f8      	str	r0, [r7, #12]
 800c862:	60b9      	str	r1, [r7, #8]
 800c864:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800c866:	68f8      	ldr	r0, [r7, #12]
 800c868:	f7ff ffeb 	bl	800c842 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 800c86c:	4602      	mov	r2, r0
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	4293      	cmp	r3, r2
 800c872:	bf8c      	ite	hi
 800c874:	2301      	movhi	r3, #1
 800c876:	2300      	movls	r3, #0
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	bf14      	ite	ne
 800c87e:	2301      	movne	r3, #1
 800c880:	2300      	moveq	r3, #0
 800c882:	b2db      	uxtb	r3, r3
 800c884:	2b00      	cmp	r3, #0
 800c886:	d007      	beq.n	800c898 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c88e:	d301      	bcc.n	800c894 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800c890:	f00d ff5f 	bl	801a752 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800c894:	f00d ff5a 	bl	801a74c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	009b      	lsls	r3, r3, #2
 800c89c:	4618      	mov	r0, r3
 800c89e:	f00d ff41 	bl	801a724 <_Znwj>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	bf00      	nop
      }
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800c8ae:	b590      	push	{r4, r7, lr}
 800c8b0:	b089      	sub	sp, #36	; 0x24
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	60f8      	str	r0, [r7, #12]
 800c8b6:	60b9      	str	r1, [r7, #8]
 800c8b8:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800c8ba:	f107 020c 	add.w	r2, r7, #12
 800c8be:	f107 0308 	add.w	r3, r7, #8
 800c8c2:	4611      	mov	r1, r2
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fc fd69 	bl	800939c <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	bfd4      	ite	le
 800c8d0:	2301      	movle	r3, #1
 800c8d2:	2300      	movgt	r3, #0
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d139      	bne.n	800c94e <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 800c8da:	f107 020c 	add.w	r2, r7, #12
 800c8de:	f107 0308 	add.w	r3, r7, #8
 800c8e2:	4611      	mov	r1, r2
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7fc fd59 	bl	800939c <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800c8ea:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	3b02      	subs	r3, #2
 800c8f0:	0fda      	lsrs	r2, r3, #31
 800c8f2:	4413      	add	r3, r2
 800c8f4:	105b      	asrs	r3, r3, #1
 800c8f6:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800c8f8:	f107 030c 	add.w	r3, r7, #12
 800c8fc:	69f9      	ldr	r1, [r7, #28]
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7fe fb50 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800c904:	4603      	mov	r3, r0
 800c906:	617b      	str	r3, [r7, #20]
 800c908:	f107 0314 	add.w	r3, r7, #20
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fe fb71 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c912:	4603      	mov	r3, r0
 800c914:	4618      	mov	r0, r3
 800c916:	f7fb feb8 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c91a:	4603      	mov	r3, r0
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800c920:	f107 0310 	add.w	r3, r7, #16
 800c924:	4618      	mov	r0, r3
 800c926:	f7fb feb0 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c92a:	4603      	mov	r3, r0
 800c92c:	edd3 7a00 	vldr	s15, [r3]
 800c930:	4623      	mov	r3, r4
 800c932:	eeb0 0a67 	vmov.f32	s0, s15
 800c936:	69ba      	ldr	r2, [r7, #24]
 800c938:	69f9      	ldr	r1, [r7, #28]
 800c93a:	68f8      	ldr	r0, [r7, #12]
 800c93c:	f000 fa55 	bl	800cdea <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d005      	beq.n	800c952 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa4>
	  __parent--;
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	3b01      	subs	r3, #1
 800c94a:	61fb      	str	r3, [r7, #28]
      while (true)
 800c94c:	e7d4      	b.n	800c8f8 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4a>
	return;
 800c94e:	bf00      	nop
 800c950:	e000      	b.n	800c954 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	    return;
 800c952:	bf00      	nop
    }
 800c954:	3724      	adds	r7, #36	; 0x24
 800c956:	46bd      	mov	sp, r7
 800c958:	bd90      	pop	{r4, r7, pc}

0800c95a <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800c95a:	b5b0      	push	{r4, r5, r7, lr}
 800c95c:	b086      	sub	sp, #24
 800c95e:	af00      	add	r7, sp, #0
 800c960:	60f8      	str	r0, [r7, #12]
 800c962:	60b9      	str	r1, [r7, #8]
 800c964:	607a      	str	r2, [r7, #4]
 800c966:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800c968:	1d3b      	adds	r3, r7, #4
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fe fb42 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c970:	4603      	mov	r3, r0
 800c972:	4618      	mov	r0, r3
 800c974:	f7fb fe89 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c978:	4603      	mov	r3, r0
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 800c97e:	f107 030c 	add.w	r3, r7, #12
 800c982:	4618      	mov	r0, r3
 800c984:	f7fe fb36 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c988:	4603      	mov	r3, r0
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7fb fe7d 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c990:	4603      	mov	r3, r0
 800c992:	681c      	ldr	r4, [r3, #0]
 800c994:	1d3b      	adds	r3, r7, #4
 800c996:	4618      	mov	r0, r3
 800c998:	f7fe fb2c 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c99c:	4603      	mov	r3, r0
 800c99e:	601c      	str	r4, [r3, #0]
			 _DistanceType(__last - __first),
 800c9a0:	f107 020c 	add.w	r2, r7, #12
 800c9a4:	f107 0308 	add.w	r3, r7, #8
 800c9a8:	4611      	mov	r1, r2
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7fc fcf6 	bl	800939c <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800c9b0:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800c9b2:	f107 0314 	add.w	r3, r7, #20
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7fb fe67 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c9bc:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800c9be:	edd3 7a00 	vldr	s15, [r3]
 800c9c2:	462b      	mov	r3, r5
 800c9c4:	eeb0 0a67 	vmov.f32	s0, s15
 800c9c8:	4622      	mov	r2, r4
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f000 fa0c 	bl	800cdea <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 800c9d2:	bf00      	nop
 800c9d4:	3718      	adds	r7, #24
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bdb0      	pop	{r4, r5, r7, pc}

0800c9da <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800c9da:	b590      	push	{r4, r7, lr}
 800c9dc:	b083      	sub	sp, #12
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
 800c9e2:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800c9e4:	1d3b      	adds	r3, r7, #4
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7fe fb04 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	463b      	mov	r3, r7
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7fe faff 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f000 fa9d 	bl	800cf3a <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 800ca00:	bf00      	nop
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd90      	pop	{r4, r7, pc}

0800ca08 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	68b9      	ldr	r1, [r7, #8]
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f000 faad 	bl	800cf78 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	4618      	mov	r0, r3
 800ca22:	3710      	adds	r7, #16
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800ca28:	b5b0      	push	{r4, r5, r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f7fe fd5d 	bl	800b4f4 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	68b8      	ldr	r0, [r7, #8]
 800ca3e:	f7fe fd59 	bl	800b4f4 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800ca42:	4605      	mov	r5, r0
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fd fbb9 	bl	800a1be <_ZSt12__niter_baseIPfET_S1_>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	461a      	mov	r2, r3
 800ca50:	4629      	mov	r1, r5
 800ca52:	4620      	mov	r0, r4
 800ca54:	f7fe fd6a 	bl	800b52c <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	1d3b      	adds	r3, r7, #4
 800ca5c:	4611      	mov	r1, r2
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7fd fbc8 	bl	800a1f4 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 800ca64:	4603      	mov	r3, r0
    }
 800ca66:	4618      	mov	r0, r3
 800ca68:	3710      	adds	r7, #16
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bdb0      	pop	{r4, r5, r7, pc}

0800ca6e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800ca6e:	b480      	push	{r7}
 800ca70:	b087      	sub	sp, #28
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	60f8      	str	r0, [r7, #12]
 800ca76:	60b9      	str	r1, [r7, #8]
 800ca78:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800ca7a:	68ba      	ldr	r2, [r7, #8]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	1ad3      	subs	r3, r2, r3
 800ca80:	109b      	asrs	r3, r3, #2
 800ca82:	617b      	str	r3, [r7, #20]
 800ca84:	e00c      	b.n	800caa0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x32>
	      *__result = *__first;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	601a      	str	r2, [r3, #0]
	      ++__first;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	3304      	adds	r3, #4
 800ca92:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	3304      	adds	r3, #4
 800ca98:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	617b      	str	r3, [r7, #20]
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	dcef      	bgt.n	800ca86 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x18>
	  return __result;
 800caa6:	687b      	ldr	r3, [r7, #4]
	}
 800caa8:	4618      	mov	r0, r3
 800caaa:	371c      	adds	r7, #28
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800cabc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 800cac0:	4618      	mov	r0, r3
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f7ff ffeb 	bl	800cab4 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 800cade:	4602      	mov	r2, r0
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	4293      	cmp	r3, r2
 800cae4:	bf8c      	ite	hi
 800cae6:	2301      	movhi	r3, #1
 800cae8:	2300      	movls	r3, #0
 800caea:	b2db      	uxtb	r3, r3
 800caec:	2b00      	cmp	r3, #0
 800caee:	bf14      	ite	ne
 800caf0:	2301      	movne	r3, #1
 800caf2:	2300      	moveq	r3, #0
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 800cafa:	f00d fe27 	bl	801a74c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cafe:	68b8      	ldr	r0, [r7, #8]
 800cb00:	f00d fe10 	bl	801a724 <_Znwj>
 800cb04:	4603      	mov	r3, r0
 800cb06:	bf00      	nop
      }
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800cb1c:	6879      	ldr	r1, [r7, #4]
 800cb1e:	68b8      	ldr	r0, [r7, #8]
 800cb20:	f00d fdfe 	bl	801a720 <_ZdlPvj>
      }
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>:
    __miter_base(_Iterator __it)
 800cb2a:	b480      	push	{r7}
 800cb2c:	b083      	sub	sp, #12
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
    { return __it; }
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4618      	mov	r0, r3
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800cb40:	b5b0      	push	{r4, r5, r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800cb4c:	68f8      	ldr	r0, [r7, #12]
 800cb4e:	f000 fa30 	bl	800cfb2 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800cb52:	4604      	mov	r4, r0
 800cb54:	68b8      	ldr	r0, [r7, #8]
 800cb56:	f000 fa2c 	bl	800cfb2 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fd fb71 	bl	800a246 <_ZSt12__niter_baseIPcET_S1_>
 800cb64:	4603      	mov	r3, r0
 800cb66:	461a      	mov	r2, r3
 800cb68:	4629      	mov	r1, r5
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	f7fd fb76 	bl	800a25c <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 800cb70:	4602      	mov	r2, r0
 800cb72:	1d3b      	adds	r3, r7, #4
 800cb74:	4611      	mov	r1, r2
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7fd fb80 	bl	800a27c <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 800cb7c:	4603      	mov	r3, r0
    }
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bdb0      	pop	{r4, r5, r7, pc}

0800cb86 <_ZSt10destroy_atIcEvPT_>:
    destroy_at(_Tp* __location)
 800cb86:	b480      	push	{r7}
 800cb88:	b083      	sub	sp, #12
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
    }
 800cb8e:	bf00      	nop
 800cb90:	370c      	adds	r7, #12
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr
	...

0800cb9c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800cba4:	4b03      	ldr	r3, [pc, #12]	; (800cbb4 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_+0x18>)
      }
 800cba6:	4618      	mov	r0, r3
 800cba8:	370c      	adds	r7, #12
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop
 800cbb4:	0aaaaaaa 	.word	0x0aaaaaaa

0800cbb8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800cbc0:	4b0a      	ldr	r3, [pc, #40]	; (800cbec <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 800cbc2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f7ff ffe9 	bl	800cb9c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800cbce:	f107 0208 	add.w	r2, r7, #8
 800cbd2:	f107 030c 	add.w	r3, r7, #12
 800cbd6:	4611      	mov	r1, r2
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7ff f875 	bl	800bcc8 <_ZSt3minIjERKT_S2_S2_>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	681b      	ldr	r3, [r3, #0]
      }
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	05555555 	.word	0x05555555

0800cbf0 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800cbf0:	b5b0      	push	{r4, r5, r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
 800cbfc:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800cbfe:	68f8      	ldr	r0, [r7, #12]
 800cc00:	f000 fa24 	bl	800d04c <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 800cc04:	4604      	mov	r4, r0
 800cc06:	68b8      	ldr	r0, [r7, #8]
 800cc08:	f000 fa20 	bl	800d04c <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 800cc0c:	4605      	mov	r5, r0
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 fa1c 	bl	800d04c <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 800cc14:	4602      	mov	r2, r0
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	4629      	mov	r1, r5
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	f000 fa21 	bl	800d062 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800cc20:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bdb0      	pop	{r4, r5, r7, pc}

0800cc2a <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b082      	sub	sp, #8
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
 800cc32:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800cc34:	6839      	ldr	r1, [r7, #0]
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 fa39 	bl	800d0ae <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800cc4e:	6839      	ldr	r1, [r7, #0]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 fa2c 	bl	800d0ae <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7fc fd4d 	bl	80096f8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4618      	mov	r0, r3
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800cc72:	6839      	ldr	r1, [r7, #0]
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7fe fe37 	bl	800b8e8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6819      	ldr	r1, [r3, #0]
 800cc8c:	683a      	ldr	r2, [r7, #0]
 800cc8e:	4613      	mov	r3, r2
 800cc90:	005b      	lsls	r3, r3, #1
 800cc92:	4413      	add	r3, r2
 800cc94:	00db      	lsls	r3, r3, #3
 800cc96:	18ca      	adds	r2, r1, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	609a      	str	r2, [r3, #8]
      }
 800cc9c:	bf00      	nop
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	601a      	str	r2, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	4618      	mov	r0, r3
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	68b9      	ldr	r1, [r7, #8]
 800ccd8:	68f8      	ldr	r0, [r7, #12]
 800ccda:	f000 fa12 	bl	800d102 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 800ccde:	4603      	mov	r3, r0
    }
 800cce0:	4618      	mov	r0, r3
 800cce2:	3718      	adds	r7, #24
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800ccf0:	4b03      	ldr	r3, [pc, #12]	; (800cd00 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_+0x18>)
      }
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	370c      	adds	r7, #12
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	0aaaaaaa 	.word	0x0aaaaaaa

0800cd04 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800cd0c:	4b0a      	ldr	r3, [pc, #40]	; (800cd38 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 800cd0e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f7ff ffe9 	bl	800cce8 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>
 800cd16:	4603      	mov	r3, r0
 800cd18:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800cd1a:	f107 0208 	add.w	r2, r7, #8
 800cd1e:	f107 030c 	add.w	r3, r7, #12
 800cd22:	4611      	mov	r1, r2
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7fe ffcf 	bl	800bcc8 <_ZSt3minIjERKT_S2_S2_>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	681b      	ldr	r3, [r3, #0]
      }
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	05555555 	.word	0x05555555

0800cd3c <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	4618      	mov	r0, r3
 800cd48:	370c      	adds	r7, #12
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr

0800cd52 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800cd52:	b580      	push	{r7, lr}
 800cd54:	b086      	sub	sp, #24
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	60f8      	str	r0, [r7, #12]
 800cd5a:	60b9      	str	r1, [r7, #8]
 800cd5c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	68b9      	ldr	r1, [r7, #8]
 800cd66:	68f8      	ldr	r0, [r7, #12]
 800cd68:	f000 fa3c 	bl	800d1e4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>
 800cd6c:	4603      	mov	r3, r0
    }
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3718      	adds	r7, #24
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}

0800cd76 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800cd76:	b580      	push	{r7, lr}
 800cd78:	b084      	sub	sp, #16
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	60f8      	str	r0, [r7, #12]
 800cd7e:	60b9      	str	r1, [r7, #8]
 800cd80:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800cd82:	f7f5 f8d5 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d006      	beq.n	800cd9a <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_m(__first, __last, __result);
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	68b9      	ldr	r1, [r7, #8]
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	f000 fa47 	bl	800d224 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>
 800cd96:	4603      	mov	r3, r0
 800cd98:	e006      	b.n	800cda8 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	68b9      	ldr	r1, [r7, #8]
 800cd9e:	68f8      	ldr	r0, [r7, #12]
 800cda0:	f000 fa63 	bl	800d26a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>
 800cda4:	4603      	mov	r3, r0
 800cda6:	bf00      	nop
    }
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3710      	adds	r7, #16
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800cdbc:	f7f5 f8b8 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d006      	beq.n	800cdd4 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_move_b(__first, __last, __result);
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	68b9      	ldr	r1, [r7, #8]
 800cdca:	68f8      	ldr	r0, [r7, #12]
 800cdcc:	f000 fa6a 	bl	800d2a4 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	e006      	b.n	800cde2 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
				       _Category>::__copy_move_b(__first,
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	68b9      	ldr	r1, [r7, #8]
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f000 fa86 	bl	800d2ea <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>
 800cdde:	4603      	mov	r3, r0
								 __result);
 800cde0:	bf00      	nop
    }
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800cdea:	b590      	push	{r4, r7, lr}
 800cdec:	b08f      	sub	sp, #60	; 0x3c
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6178      	str	r0, [r7, #20]
 800cdf2:	6139      	str	r1, [r7, #16]
 800cdf4:	60fa      	str	r2, [r7, #12]
 800cdf6:	ed87 0a02 	vstr	s0, [r7, #8]
 800cdfa:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 800ce04:	e042      	b.n	800ce8c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 800ce06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce08:	3301      	adds	r3, #1
 800ce0a:	005b      	lsls	r3, r3, #1
 800ce0c:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 800ce0e:	f107 0314 	add.w	r3, r7, #20
 800ce12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7fe f8c5 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce1e:	1e5a      	subs	r2, r3, #1
 800ce20:	f107 0314 	add.w	r3, r7, #20
 800ce24:	4611      	mov	r1, r2
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fe f8bc 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	1d3b      	adds	r3, r7, #4
 800ce30:	4621      	mov	r1, r4
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fe f8ea 	bl	800b00c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d002      	beq.n	800ce44 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x5a>
	    __secondChild--;
 800ce3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce40:	3b01      	subs	r3, #1
 800ce42:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800ce44:	f107 0314 	add.w	r3, r7, #20
 800ce48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7fe f8aa 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800ce50:	4603      	mov	r3, r0
 800ce52:	623b      	str	r3, [r7, #32]
 800ce54:	f107 0320 	add.w	r3, r7, #32
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7fe f8cb 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7fb fc12 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ce66:	4603      	mov	r3, r0
 800ce68:	681c      	ldr	r4, [r3, #0]
 800ce6a:	f107 0314 	add.w	r3, r7, #20
 800ce6e:	6939      	ldr	r1, [r7, #16]
 800ce70:	4618      	mov	r0, r3
 800ce72:	f7fe f897 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800ce76:	4603      	mov	r3, r0
 800ce78:	627b      	str	r3, [r7, #36]	; 0x24
 800ce7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7fe f8b8 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800ce84:	4603      	mov	r3, r0
 800ce86:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild;
 800ce88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce8a:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	3b01      	subs	r3, #1
 800ce90:	0fda      	lsrs	r2, r3, #31
 800ce92:	4413      	add	r3, r2
 800ce94:	105b      	asrs	r3, r3, #1
 800ce96:	461a      	mov	r2, r3
 800ce98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	dbb3      	blt.n	800ce06 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f003 0301 	and.w	r3, r3, #1
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d133      	bne.n	800cf10 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	3b02      	subs	r3, #2
 800ceac:	0fda      	lsrs	r2, r3, #31
 800ceae:	4413      	add	r3, r2
 800ceb0:	105b      	asrs	r3, r3, #1
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d12a      	bne.n	800cf10 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 800ceba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cebc:	3301      	adds	r3, #1
 800cebe:	005b      	lsls	r3, r3, #1
 800cec0:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800cec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec4:	1e5a      	subs	r2, r3, #1
 800cec6:	f107 0314 	add.w	r3, r7, #20
 800ceca:	4611      	mov	r1, r2
 800cecc:	4618      	mov	r0, r3
 800cece:	f7fe f869 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800ced2:	4603      	mov	r3, r0
 800ced4:	62bb      	str	r3, [r7, #40]	; 0x28
 800ced6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7fe f88a 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800cee0:	4603      	mov	r3, r0
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fb fbd1 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800cee8:	4603      	mov	r3, r0
 800ceea:	681c      	ldr	r4, [r3, #0]
 800ceec:	f107 0314 	add.w	r3, r7, #20
 800cef0:	6939      	ldr	r1, [r7, #16]
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fe f856 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800cef8:	4603      	mov	r3, r0
 800cefa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cefc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7fe f877 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800cf06:	4603      	mov	r3, r0
 800cf08:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild - 1;
 800cf0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf0c:	3b01      	subs	r3, #1
 800cf0e:	613b      	str	r3, [r7, #16]
		       _GLIBCXX_MOVE(__value), __cmp);
 800cf10:	f107 0308 	add.w	r3, r7, #8
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7fb fbb8 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800cf1a:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 800cf1c:	edd3 7a00 	vldr	s15, [r3]
 800cf20:	f107 031c 	add.w	r3, r7, #28
 800cf24:	eeb0 0a67 	vmov.f32	s0, s15
 800cf28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf2a:	6939      	ldr	r1, [r7, #16]
 800cf2c:	6978      	ldr	r0, [r7, #20]
 800cf2e:	f000 fa1b 	bl	800d368 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 800cf32:	bf00      	nop
 800cf34:	373c      	adds	r7, #60	; 0x3c
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd90      	pop	{r4, r7, pc}

0800cf3a <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b084      	sub	sp, #16
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
 800cf42:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f7fb fba0 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800cf50:	6838      	ldr	r0, [r7, #0]
 800cf52:	f7fb fb9a 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800cf56:	4603      	mov	r3, r0
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800cf5e:	f107 030c 	add.w	r3, r7, #12
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fb fb91 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	601a      	str	r2, [r3, #0]
    }
 800cf70:	bf00      	nop
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800cf84:	f7f4 ffd4 	bl	8001f30 <_ZSt21is_constant_evaluatedv>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d006      	beq.n	800cf9c <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	68b9      	ldr	r1, [r7, #8]
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f000 fa55 	bl	800d442 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	e006      	b.n	800cfaa <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	68b9      	ldr	r1, [r7, #8]
 800cfa0:	68f8      	ldr	r0, [r7, #12]
 800cfa2:	f000 fa72 	bl	800d48a <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 800cfa6:	4603      	mov	r3, r0
								 __result);
 800cfa8:	bf00      	nop
    }
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b082      	sub	sp, #8
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800cfba:	1d3b      	adds	r3, r7, #4
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f000 fa86 	bl	800d4ce <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3708      	adds	r7, #8
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
	...

0800cfd0 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800cfd8:	4b03      	ldr	r3, [pc, #12]	; (800cfe8 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv+0x18>)
      }
 800cfda:	4618      	mov	r0, r3
 800cfdc:	370c      	adds	r7, #12
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	05555555 	.word	0x05555555

0800cfec <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f7ff ffe9 	bl	800cfd0 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>
 800cffe:	4602      	mov	r2, r0
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	4293      	cmp	r3, r2
 800d004:	bf8c      	ite	hi
 800d006:	2301      	movhi	r3, #1
 800d008:	2300      	movls	r3, #0
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	bf14      	ite	ne
 800d010:	2301      	movne	r3, #1
 800d012:	2300      	moveq	r3, #0
 800d014:	b2db      	uxtb	r3, r3
 800d016:	2b00      	cmp	r3, #0
 800d018:	d007      	beq.n	800d02a <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	4a0a      	ldr	r2, [pc, #40]	; (800d048 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x5c>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d901      	bls.n	800d026 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800d022:	f00d fb96 	bl	801a752 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800d026:	f00d fb91 	bl	801a74c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	4613      	mov	r3, r2
 800d02e:	005b      	lsls	r3, r3, #1
 800d030:	4413      	add	r3, r2
 800d032:	00db      	lsls	r3, r3, #3
 800d034:	4618      	mov	r0, r3
 800d036:	f00d fb75 	bl	801a724 <_Znwj>
 800d03a:	4603      	mov	r3, r0
 800d03c:	bf00      	nop
      }
 800d03e:	4618      	mov	r0, r3
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	0aaaaaaa 	.word	0x0aaaaaaa

0800d04c <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>:
    __niter_base(_Iterator __it)
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	4618      	mov	r0, r3
 800d058:	370c      	adds	r7, #12
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr

0800d062 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800d062:	b590      	push	{r4, r7, lr}
 800d064:	b087      	sub	sp, #28
 800d066:	af00      	add	r7, sp, #0
 800d068:	60f8      	str	r0, [r7, #12]
 800d06a:	60b9      	str	r1, [r7, #8]
 800d06c:	607a      	str	r2, [r7, #4]
 800d06e:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800d074:	e012      	b.n	800d09c <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800d076:	6978      	ldr	r0, [r7, #20]
 800d078:	f7ff f9b6 	bl	800c3e8 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800d07c:	4604      	mov	r4, r0
 800d07e:	68f8      	ldr	r0, [r7, #12]
 800d080:	f7ff f9b2 	bl	800c3e8 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800d084:	4603      	mov	r3, r0
 800d086:	683a      	ldr	r2, [r7, #0]
 800d088:	4619      	mov	r1, r3
 800d08a:	4620      	mov	r0, r4
 800d08c:	f000 fa2a 	bl	800d4e4 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	3318      	adds	r3, #24
 800d094:	60fb      	str	r3, [r7, #12]
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	3318      	adds	r3, #24
 800d09a:	617b      	str	r3, [r7, #20]
 800d09c:	68fa      	ldr	r2, [r7, #12]
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d1e8      	bne.n	800d076 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x14>
      return __cur;
 800d0a4:	697b      	ldr	r3, [r7, #20]
    }
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	371c      	adds	r7, #28
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd90      	pop	{r4, r7, pc}

0800d0ae <_ZNSaIN3jlb4EdgeEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800d0ae:	b580      	push	{r7, lr}
 800d0b0:	b082      	sub	sp, #8
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
 800d0b6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800d0b8:	6839      	ldr	r1, [r7, #0]
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 fa2d 	bl	800d51a <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800d0ca:	b480      	push	{r7}
 800d0cc:	b083      	sub	sp, #12
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	370c      	adds	r7, #12
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800d0e0:	b480      	push	{r7}
 800d0e2:	b083      	sub	sp, #12
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
	++_M_current;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f103 0218 	add.w	r2, r3, #24
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	601a      	str	r2, [r3, #0]
	return *this;
 800d0f4:	687b      	ldr	r3, [r7, #4]
      }
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	370c      	adds	r7, #12
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr

0800d102 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800d102:	b590      	push	{r4, r7, lr}
 800d104:	b087      	sub	sp, #28
 800d106:	af00      	add	r7, sp, #0
 800d108:	60f8      	str	r0, [r7, #12]
 800d10a:	60b9      	str	r1, [r7, #8]
 800d10c:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800d112:	e015      	b.n	800d140 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x3e>
		std::_Construct(std::__addressof(*__cur), *__first);
 800d114:	6978      	ldr	r0, [r7, #20]
 800d116:	f7ff f967 	bl	800c3e8 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800d11a:	4604      	mov	r4, r0
 800d11c:	f107 030c 	add.w	r3, r7, #12
 800d120:	4618      	mov	r0, r3
 800d122:	f000 fa1e 	bl	800d562 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 800d126:	4603      	mov	r3, r0
 800d128:	4619      	mov	r1, r3
 800d12a:	4620      	mov	r0, r4
 800d12c:	f000 fa44 	bl	800d5b8 <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800d130:	f107 030c 	add.w	r3, r7, #12
 800d134:	4618      	mov	r0, r3
 800d136:	f7ff ffd3 	bl	800d0e0 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	3318      	adds	r3, #24
 800d13e:	617b      	str	r3, [r7, #20]
 800d140:	f107 0208 	add.w	r2, r7, #8
 800d144:	f107 030c 	add.w	r3, r7, #12
 800d148:	4611      	mov	r1, r2
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 f9f1 	bl	800d532 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800d150:	4603      	mov	r3, r0
 800d152:	f083 0301 	eor.w	r3, r3, #1
 800d156:	b2db      	uxtb	r3, r3
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1db      	bne.n	800d114 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x12>
	      return __cur;
 800d15c:	697b      	ldr	r3, [r7, #20]
	}
 800d15e:	4618      	mov	r0, r3
 800d160:	371c      	adds	r7, #28
 800d162:	46bd      	mov	sp, r7
 800d164:	bd90      	pop	{r4, r7, pc}
	...

0800d168 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d170:	4b03      	ldr	r3, [pc, #12]	; (800d180 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv+0x18>)
      }
 800d172:	4618      	mov	r0, r3
 800d174:	370c      	adds	r7, #12
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop
 800d180:	05555555 	.word	0x05555555

0800d184 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	60f8      	str	r0, [r7, #12]
 800d18c:	60b9      	str	r1, [r7, #8]
 800d18e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f7ff ffe9 	bl	800d168 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>
 800d196:	4602      	mov	r2, r0
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	4293      	cmp	r3, r2
 800d19c:	bf8c      	ite	hi
 800d19e:	2301      	movhi	r3, #1
 800d1a0:	2300      	movls	r3, #0
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	bf14      	ite	ne
 800d1a8:	2301      	movne	r3, #1
 800d1aa:	2300      	moveq	r3, #0
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d007      	beq.n	800d1c2 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	4a0a      	ldr	r2, [pc, #40]	; (800d1e0 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x5c>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d901      	bls.n	800d1be <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800d1ba:	f00d faca 	bl	801a752 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800d1be:	f00d fac5 	bl	801a74c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d1c2:	68ba      	ldr	r2, [r7, #8]
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	4413      	add	r3, r2
 800d1ca:	00db      	lsls	r3, r3, #3
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f00d faa9 	bl	801a724 <_Znwj>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	bf00      	nop
      }
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3710      	adds	r7, #16
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	0aaaaaaa 	.word	0x0aaaaaaa

0800d1e4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b086      	sub	sp, #24
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800d1f4:	e00d      	b.n	800d212 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x2e>
		std::_Construct(std::__addressof(*__cur), *__first);
 800d1f6:	6978      	ldr	r0, [r7, #20]
 800d1f8:	f7ff f9c0 	bl	800c57c <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	68f9      	ldr	r1, [r7, #12]
 800d200:	4618      	mov	r0, r3
 800d202:	f000 f9ef 	bl	800d5e4 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	3318      	adds	r3, #24
 800d20a:	60fb      	str	r3, [r7, #12]
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	3318      	adds	r3, #24
 800d210:	617b      	str	r3, [r7, #20]
 800d212:	68fa      	ldr	r2, [r7, #12]
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	429a      	cmp	r2, r3
 800d218:	d1ed      	bne.n	800d1f6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x12>
	      return __cur;
 800d21a:	697b      	ldr	r3, [r7, #20]
	}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3718      	adds	r7, #24
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800d224:	b480      	push	{r7}
 800d226:	b087      	sub	sp, #28
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800d230:	68ba      	ldr	r2, [r7, #8]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	1ad3      	subs	r3, r2, r3
 800d236:	109b      	asrs	r3, r3, #2
 800d238:	617b      	str	r3, [r7, #20]
 800d23a:	e00c      	b.n	800d256 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x32>
	      *__result = *__first;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	601a      	str	r2, [r3, #0]
	      ++__first;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	3304      	adds	r3, #4
 800d248:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	3304      	adds	r3, #4
 800d24e:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	3b01      	subs	r3, #1
 800d254:	617b      	str	r3, [r7, #20]
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	dcef      	bgt.n	800d23c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x18>
	  return __result;
 800d25c:	687b      	ldr	r3, [r7, #4]
	}
 800d25e:	4618      	mov	r0, r3
 800d260:	371c      	adds	r7, #28
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr

0800d26a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b086      	sub	sp, #24
 800d26e:	af00      	add	r7, sp, #0
 800d270:	60f8      	str	r0, [r7, #12]
 800d272:	60b9      	str	r1, [r7, #8]
 800d274:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800d276:	68ba      	ldr	r2, [r7, #8]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	1ad3      	subs	r3, r2, r3
 800d27c:	109b      	asrs	r3, r3, #2
 800d27e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d006      	beq.n	800d294 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	461a      	mov	r2, r3
 800d28c:	68f9      	ldr	r1, [r7, #12]
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f00f fe67 	bl	801cf62 <memmove>
	  return __result + _Num;
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	687a      	ldr	r2, [r7, #4]
 800d29a:	4413      	add	r3, r2
	}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3718      	adds	r7, #24
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 800d2a4:	b480      	push	{r7}
 800d2a6:	b087      	sub	sp, #28
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 800d2b0:	68ba      	ldr	r2, [r7, #8]
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	1ad3      	subs	r3, r2, r3
 800d2b6:	109b      	asrs	r3, r3, #2
 800d2b8:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 800d2ba:	e00c      	b.n	800d2d6 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x32>
	    *--__result = *--__last;
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	3b04      	subs	r3, #4
 800d2c0:	60bb      	str	r3, [r7, #8]
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	3b04      	subs	r3, #4
 800d2ca:	607b      	str	r3, [r7, #4]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	617b      	str	r3, [r7, #20]
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	dcef      	bgt.n	800d2bc <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x18>
	  return __result;
 800d2dc:	687b      	ldr	r3, [r7, #4]
	}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	371c      	adds	r7, #28
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr

0800d2ea <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b086      	sub	sp, #24
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	60f8      	str	r0, [r7, #12]
 800d2f2:	60b9      	str	r1, [r7, #8]
 800d2f4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800d2f6:	68ba      	ldr	r2, [r7, #8]
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	1ad3      	subs	r3, r2, r3
 800d2fc:	109b      	asrs	r3, r3, #2
 800d2fe:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00a      	beq.n	800d31c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	425b      	negs	r3, r3
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	18d0      	adds	r0, r2, r3
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	461a      	mov	r2, r3
 800d316:	68f9      	ldr	r1, [r7, #12]
 800d318:	f00f fe23 	bl	801cf62 <memmove>
	  return __result - _Num;
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	425b      	negs	r3, r3
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	4413      	add	r3, r2
	}
 800d326:	4618      	mov	r0, r3
 800d328:	3718      	adds	r7, #24
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 800d32e:	b580      	push	{r7, lr}
 800d330:	b084      	sub	sp, #16
 800d332:	af00      	add	r7, sp, #0
 800d334:	60f8      	str	r0, [r7, #12]
 800d336:	60b9      	str	r1, [r7, #8]
 800d338:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 800d33a:	f107 0308 	add.w	r3, r7, #8
 800d33e:	4618      	mov	r0, r3
 800d340:	f7fd fe58 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d344:	4603      	mov	r3, r0
 800d346:	ed93 7a00 	vldr	s14, [r3]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	edd3 7a00 	vldr	s15, [r3]
 800d350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d358:	bf4c      	ite	mi
 800d35a:	2301      	movmi	r3, #1
 800d35c:	2300      	movpl	r3, #0
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	4618      	mov	r0, r3
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 800d368:	b590      	push	{r4, r7, lr}
 800d36a:	b08b      	sub	sp, #44	; 0x2c
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6178      	str	r0, [r7, #20]
 800d370:	6139      	str	r1, [r7, #16]
 800d372:	60fa      	str	r2, [r7, #12]
 800d374:	ed87 0a02 	vstr	s0, [r7, #8]
 800d378:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	3b01      	subs	r3, #1
 800d37e:	0fda      	lsrs	r2, r3, #31
 800d380:	4413      	add	r3, r2
 800d382:	105b      	asrs	r3, r3, #1
 800d384:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800d386:	e029      	b.n	800d3dc <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800d388:	f107 0314 	add.w	r3, r7, #20
 800d38c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d38e:	4618      	mov	r0, r3
 800d390:	f7fd fe08 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d394:	4603      	mov	r3, r0
 800d396:	61bb      	str	r3, [r7, #24]
 800d398:	f107 0318 	add.w	r3, r7, #24
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7fd fe29 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fb f970 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	681c      	ldr	r4, [r3, #0]
 800d3ae:	f107 0314 	add.w	r3, r7, #20
 800d3b2:	6939      	ldr	r1, [r7, #16]
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7fd fdf5 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	61fb      	str	r3, [r7, #28]
 800d3be:	f107 031c 	add.w	r3, r7, #28
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fd fe16 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	601c      	str	r4, [r3, #0]
	  __holeIndex = __parent;
 800d3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ce:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	3b01      	subs	r3, #1
 800d3d4:	0fda      	lsrs	r2, r3, #31
 800d3d6:	4413      	add	r3, r2
 800d3d8:	105b      	asrs	r3, r3, #1
 800d3da:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800d3dc:	693a      	ldr	r2, [r7, #16]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	dd11      	ble.n	800d408 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 800d3e4:	f107 0314 	add.w	r3, r7, #20
 800d3e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7fd fdda 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d3f0:	4601      	mov	r1, r0
 800d3f2:	f107 0308 	add.w	r3, r7, #8
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7ff ff98 	bl	800d32e <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d001      	beq.n	800d408 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 800d404:	2301      	movs	r3, #1
 800d406:	e000      	b.n	800d40a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa2>
 800d408:	2300      	movs	r3, #0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1bc      	bne.n	800d388 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800d40e:	f107 0308 	add.w	r3, r7, #8
 800d412:	4618      	mov	r0, r3
 800d414:	f7fb f939 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800d418:	4603      	mov	r3, r0
 800d41a:	681c      	ldr	r4, [r3, #0]
 800d41c:	f107 0314 	add.w	r3, r7, #20
 800d420:	6939      	ldr	r1, [r7, #16]
 800d422:	4618      	mov	r0, r3
 800d424:	f7fd fdbe 	bl	800afa4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d428:	4603      	mov	r3, r0
 800d42a:	623b      	str	r3, [r7, #32]
 800d42c:	f107 0320 	add.w	r3, r7, #32
 800d430:	4618      	mov	r0, r3
 800d432:	f7fd fddf 	bl	800aff4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d436:	4603      	mov	r3, r0
 800d438:	601c      	str	r4, [r3, #0]
    }
 800d43a:	bf00      	nop
 800d43c:	372c      	adds	r7, #44	; 0x2c
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd90      	pop	{r4, r7, pc}

0800d442 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 800d442:	b580      	push	{r7, lr}
 800d444:	b086      	sub	sp, #24
 800d446:	af00      	add	r7, sp, #0
 800d448:	60f8      	str	r0, [r7, #12]
 800d44a:	60b9      	str	r1, [r7, #8]
 800d44c:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 800d44e:	68ba      	ldr	r2, [r7, #8]
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	1ad3      	subs	r3, r2, r3
 800d454:	109b      	asrs	r3, r3, #2
 800d456:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 800d458:	e00f      	b.n	800d47a <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x38>
	    *--__result = std::move(*--__last);
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	3b04      	subs	r3, #4
 800d45e:	60bb      	str	r3, [r7, #8]
 800d460:	68b8      	ldr	r0, [r7, #8]
 800d462:	f7fb f912 	bl	800868a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800d466:	4603      	mov	r3, r0
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	3b04      	subs	r3, #4
 800d46e:	607b      	str	r3, [r7, #4]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	3b01      	subs	r3, #1
 800d478:	617b      	str	r3, [r7, #20]
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	dcec      	bgt.n	800d45a <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 800d480:	687b      	ldr	r3, [r7, #4]
	}
 800d482:	4618      	mov	r0, r3
 800d484:	3718      	adds	r7, #24
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}

0800d48a <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800d48a:	b580      	push	{r7, lr}
 800d48c:	b086      	sub	sp, #24
 800d48e:	af00      	add	r7, sp, #0
 800d490:	60f8      	str	r0, [r7, #12]
 800d492:	60b9      	str	r1, [r7, #8]
 800d494:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	1ad3      	subs	r3, r2, r3
 800d49c:	109b      	asrs	r3, r3, #2
 800d49e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00a      	beq.n	800d4bc <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	009b      	lsls	r3, r3, #2
 800d4aa:	425b      	negs	r3, r3
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	18d0      	adds	r0, r2, r3
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	009b      	lsls	r3, r3, #2
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	68f9      	ldr	r1, [r7, #12]
 800d4b8:	f00f fd53 	bl	801cf62 <memmove>
	  return __result - _Num;
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	425b      	negs	r3, r3
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	4413      	add	r3, r2
	}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3718      	adds	r7, #24
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800d4ce:	b480      	push	{r7}
 800d4d0:	b083      	sub	sp, #12
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	370c      	adds	r7, #12
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800d4f0:	68b8      	ldr	r0, [r7, #8]
 800d4f2:	f7fc f9ec 	bl	80098ce <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	68f9      	ldr	r1, [r7, #12]
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f7fc ffef 	bl	800a4e0 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800d502:	68b8      	ldr	r0, [r7, #8]
 800d504:	f7fe ff70 	bl	800c3e8 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800d508:	4603      	mov	r3, r0
 800d50a:	4619      	mov	r1, r3
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f7fe fa1e 	bl	800b94e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>
    }
 800d512:	bf00      	nop
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800d51a:	b480      	push	{r7}
 800d51c:	b083      	sub	sp, #12
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
 800d522:	6039      	str	r1, [r7, #0]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	4618      	mov	r0, r3
 800d528:	370c      	adds	r7, #12
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr

0800d532 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800d532:	b590      	push	{r4, r7, lr}
 800d534:	b083      	sub	sp, #12
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
 800d53a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7ff fdc4 	bl	800d0ca <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800d542:	4603      	mov	r3, r0
 800d544:	681c      	ldr	r4, [r3, #0]
 800d546:	6838      	ldr	r0, [r7, #0]
 800d548:	f7ff fdbf 	bl	800d0ca <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800d54c:	4603      	mov	r3, r0
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	429c      	cmp	r4, r3
 800d552:	bf0c      	ite	eq
 800d554:	2301      	moveq	r3, #1
 800d556:	2300      	movne	r3, #0
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	4618      	mov	r0, r3
 800d55c:	370c      	adds	r7, #12
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd90      	pop	{r4, r7, pc}

0800d562 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800d562:	b480      	push	{r7}
 800d564:	b083      	sub	sp, #12
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4618      	mov	r0, r3
 800d570:	370c      	adds	r7, #12
 800d572:	46bd      	mov	sp, r7
 800d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d578:	4770      	bx	lr

0800d57a <_ZN3jlb4EdgeC1ERKS0_>:
    struct Edge
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b082      	sub	sp, #8
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
 800d582:	6039      	str	r1, [r7, #0]
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	781a      	ldrb	r2, [r3, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	701a      	strb	r2, [r3, #0]
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	685a      	ldr	r2, [r3, #4]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	605a      	str	r2, [r3, #4]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f103 0208 	add.w	r2, r3, #8
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	3308      	adds	r3, #8
 800d59e:	4619      	mov	r1, r3
 800d5a0:	4610      	mov	r0, r2
 800d5a2:	f7fb fb68 	bl	8008c76 <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	695a      	ldr	r2, [r3, #20]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	615a      	str	r2, [r3, #20]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3708      	adds	r7, #8
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800d5b8:	b590      	push	{r4, r7, lr}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800d5c2:	6838      	ldr	r0, [r7, #0]
 800d5c4:	f000 f824 	bl	800d610 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>
 800d5c8:	4604      	mov	r4, r0
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	2018      	movs	r0, #24
 800d5d0:	f7f4 fcd2 	bl	8001f78 <_ZnwjPv>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	4621      	mov	r1, r4
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7ff ffce 	bl	800d57a <_ZN3jlb4EdgeC1ERKS0_>
    }
 800d5de:	370c      	adds	r7, #12
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd90      	pop	{r4, r7, pc}

0800d5e4 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800d5e4:	b590      	push	{r4, r7, lr}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800d5ee:	6838      	ldr	r0, [r7, #0]
 800d5f0:	f000 f819 	bl	800d626 <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>
 800d5f4:	4604      	mov	r4, r0
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	2018      	movs	r0, #24
 800d5fc:	f7f4 fcbc 	bl	8001f78 <_ZnwjPv>
 800d600:	4603      	mov	r3, r0
 800d602:	4621      	mov	r1, r4
 800d604:	4618      	mov	r0, r3
 800d606:	f7fd f87f 	bl	800a708 <_ZN3jlb4NodeC1ERKS0_>
    }
 800d60a:	370c      	adds	r7, #12
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd90      	pop	{r4, r7, pc}

0800d610 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	4618      	mov	r0, r3
 800d61c:	370c      	adds	r7, #12
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr

0800d626 <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d626:	b480      	push	{r7}
 800d628:	b083      	sub	sp, #12
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4618      	mov	r0, r3
 800d632:	370c      	adds	r7, #12
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr

0800d63c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b085      	sub	sp, #20
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800d644:	4b08      	ldr	r3, [pc, #32]	; (800d668 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800d646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d648:	4907      	ldr	r1, [pc, #28]	; (800d668 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4313      	orrs	r3, r2
 800d64e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800d650:	4b05      	ldr	r3, [pc, #20]	; (800d668 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800d652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	4013      	ands	r3, r2
 800d658:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d65a:	68fb      	ldr	r3, [r7, #12]
}
 800d65c:	bf00      	nop
 800d65e:	3714      	adds	r7, #20
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr
 800d668:	40021000 	.word	0x40021000

0800d66c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b085      	sub	sp, #20
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800d674:	4b08      	ldr	r3, [pc, #32]	; (800d698 <LL_APB1_GRP2_EnableClock+0x2c>)
 800d676:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d678:	4907      	ldr	r1, [pc, #28]	; (800d698 <LL_APB1_GRP2_EnableClock+0x2c>)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4313      	orrs	r3, r2
 800d67e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800d680:	4b05      	ldr	r3, [pc, #20]	; (800d698 <LL_APB1_GRP2_EnableClock+0x2c>)
 800d682:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	4013      	ands	r3, r2
 800d688:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d68a:	68fb      	ldr	r3, [r7, #12]
}
 800d68c:	bf00      	nop
 800d68e:	3714      	adds	r7, #20
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr
 800d698:	40021000 	.word	0x40021000

0800d69c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d6a0:	f001 fffd 	bl	800f69e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d6a4:	f000 f84c 	bl	800d740 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d6a8:	f000 ff66 	bl	800e578 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800d6ac:	f000 ff3a 	bl	800e524 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 800d6b0:	f000 fa4c 	bl	800db4c <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 800d6b4:	f000 fb6c 	bl	800dd90 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 800d6b8:	f000 fed0 	bl	800e45c <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 800d6bc:	f000 ff04 	bl	800e4c8 <_ZL15MX_USB_PCD_Initv>
  MX_UART4_Init();
 800d6c0:	f000 faa6 	bl	800dc10 <_ZL13MX_UART4_Initv>
  MX_SPI1_Init();
 800d6c4:	f000 fbb8 	bl	800de38 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 800d6c8:	f000 fbf8 	bl	800debc <_ZL12MX_SPI2_Initv>
  MX_SPI3_Init();
 800d6cc:	f000 fc38 	bl	800df40 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 800d6d0:	f000 fc78 	bl	800dfc4 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 800d6d4:	f000 fd82 	bl	800e1dc <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 800d6d8:	f000 fafa 	bl	800dcd0 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 800d6dc:	f000 f8a0 	bl	800d820 <_ZL12MX_ADC1_Initv>
  MX_TIM5_Init();
 800d6e0:	f000 fddc 	bl	800e29c <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 800d6e4:	f000 f9c6 	bl	800da74 <_ZL12MX_I2C1_Initv>
  MX_ICACHE_Init();
 800d6e8:	f000 fa12 	bl	800db10 <_ZL14MX_ICACHE_Initv>
  MX_TIM6_Init();
 800d6ec:	f000 fe76 	bl	800e3dc <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
	Radio_Init();
 800d6f0:	f7f4 fb42 	bl	8001d78 <_Z10Radio_Initv>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800d6f4:	2100      	movs	r1, #0
 800d6f6:	480d      	ldr	r0, [pc, #52]	; (800d72c <main+0x90>)
 800d6f8:	f006 fd84 	bl	8014204 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	480c      	ldr	r0, [pc, #48]	; (800d730 <main+0x94>)
 800d700:	f006 fd80 	bl	8014204 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800d704:	210c      	movs	r1, #12
 800d706:	480a      	ldr	r0, [pc, #40]	; (800d730 <main+0x94>)
 800d708:	f006 fd7c 	bl	8014204 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800d70c:	f00a fcb8 	bl	8018080 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800d710:	4a08      	ldr	r2, [pc, #32]	; (800d734 <main+0x98>)
 800d712:	2100      	movs	r1, #0
 800d714:	4808      	ldr	r0, [pc, #32]	; (800d738 <main+0x9c>)
 800d716:	f00a fcfd 	bl	8018114 <osThreadNew>
 800d71a:	4603      	mov	r3, r0
 800d71c:	4a07      	ldr	r2, [pc, #28]	; (800d73c <main+0xa0>)
 800d71e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  RegistrateUserTasks();
 800d720:	f7fa fe56 	bl	80083d0 <_Z19RegistrateUserTasksv>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800d724:	f00a fcd0 	bl	80180c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800d728:	e7fe      	b.n	800d728 <main+0x8c>
 800d72a:	bf00      	nop
 800d72c:	2000053c 	.word	0x2000053c
 800d730:	200005d4 	.word	0x200005d4
 800d734:	0801e6d4 	.word	0x0801e6d4
 800d738:	0800e7dd 	.word	0x0800e7dd
 800d73c:	20000960 	.word	0x20000960

0800d740 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b098      	sub	sp, #96	; 0x60
 800d744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d746:	f107 0318 	add.w	r3, r7, #24
 800d74a:	2248      	movs	r2, #72	; 0x48
 800d74c:	2100      	movs	r1, #0
 800d74e:	4618      	mov	r0, r3
 800d750:	f00f fc21 	bl	801cf96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d754:	1d3b      	adds	r3, r7, #4
 800d756:	2200      	movs	r2, #0
 800d758:	601a      	str	r2, [r3, #0]
 800d75a:	605a      	str	r2, [r3, #4]
 800d75c:	609a      	str	r2, [r3, #8]
 800d75e:	60da      	str	r2, [r3, #12]
 800d760:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800d762:	2000      	movs	r0, #0
 800d764:	f004 fcb6 	bl	80120d4 <HAL_PWREx_ControlVoltageScaling>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	bf14      	ite	ne
 800d76e:	2301      	movne	r3, #1
 800d770:	2300      	moveq	r3, #0
 800d772:	b2db      	uxtb	r3, r3
 800d774:	2b00      	cmp	r3, #0
 800d776:	d001      	beq.n	800d77c <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 800d778:	f001 f844 	bl	800e804 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800d77c:	f004 fc8c 	bl	8012098 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800d780:	4b26      	ldr	r3, [pc, #152]	; (800d81c <_Z18SystemClock_Configv+0xdc>)
 800d782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d786:	4a25      	ldr	r2, [pc, #148]	; (800d81c <_Z18SystemClock_Configv+0xdc>)
 800d788:	f023 0318 	bic.w	r3, r3, #24
 800d78c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 800d790:	2334      	movs	r3, #52	; 0x34
 800d792:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d794:	2381      	movs	r3, #129	; 0x81
 800d796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800d798:	2301      	movs	r3, #1
 800d79a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800d79c:	2301      	movs	r3, #1
 800d79e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800d7a4:	2360      	movs	r3, #96	; 0x60
 800d7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d7a8:	2302      	movs	r3, #2
 800d7aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800d7b4:	2337      	movs	r3, #55	; 0x37
 800d7b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800d7b8:	2307      	movs	r3, #7
 800d7ba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800d7bc:	2302      	movs	r3, #2
 800d7be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800d7c0:	2302      	movs	r3, #2
 800d7c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d7c4:	f107 0318 	add.w	r3, r7, #24
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f004 fd13 	bl	80121f4 <HAL_RCC_OscConfig>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	bf14      	ite	ne
 800d7d4:	2301      	movne	r3, #1
 800d7d6:	2300      	moveq	r3, #0
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d001      	beq.n	800d7e2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800d7de:	f001 f811 	bl	800e804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d7e2:	230f      	movs	r3, #15
 800d7e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d7f6:	1d3b      	adds	r3, r7, #4
 800d7f8:	2105      	movs	r1, #5
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f005 f9d0 	bl	8012ba0 <HAL_RCC_ClockConfig>
 800d800:	4603      	mov	r3, r0
 800d802:	2b00      	cmp	r3, #0
 800d804:	bf14      	ite	ne
 800d806:	2301      	movne	r3, #1
 800d808:	2300      	moveq	r3, #0
 800d80a:	b2db      	uxtb	r3, r3
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d001      	beq.n	800d814 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800d810:	f000 fff8 	bl	800e804 <Error_Handler>
  }
}
 800d814:	bf00      	nop
 800d816:	3760      	adds	r7, #96	; 0x60
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	40021000 	.word	0x40021000

0800d820 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b08a      	sub	sp, #40	; 0x28
 800d824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800d826:	f107 031c 	add.w	r3, r7, #28
 800d82a:	2200      	movs	r2, #0
 800d82c:	601a      	str	r2, [r3, #0]
 800d82e:	605a      	str	r2, [r3, #4]
 800d830:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800d832:	1d3b      	adds	r3, r7, #4
 800d834:	2200      	movs	r2, #0
 800d836:	601a      	str	r2, [r3, #0]
 800d838:	605a      	str	r2, [r3, #4]
 800d83a:	609a      	str	r2, [r3, #8]
 800d83c:	60da      	str	r2, [r3, #12]
 800d83e:	611a      	str	r2, [r3, #16]
 800d840:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800d842:	4b82      	ldr	r3, [pc, #520]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d844:	4a82      	ldr	r2, [pc, #520]	; (800da50 <_ZL12MX_ADC1_Initv+0x230>)
 800d846:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800d848:	4b80      	ldr	r3, [pc, #512]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d84a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800d84e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d850:	4b7e      	ldr	r3, [pc, #504]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d852:	2200      	movs	r2, #0
 800d854:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d856:	4b7d      	ldr	r3, [pc, #500]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d858:	2200      	movs	r2, #0
 800d85a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800d85c:	4b7b      	ldr	r3, [pc, #492]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d85e:	2201      	movs	r2, #1
 800d860:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800d862:	4b7a      	ldr	r3, [pc, #488]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d864:	2208      	movs	r2, #8
 800d866:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 800d868:	4b78      	ldr	r3, [pc, #480]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d86a:	2201      	movs	r2, #1
 800d86c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800d86e:	4b77      	ldr	r3, [pc, #476]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d870:	2200      	movs	r2, #0
 800d872:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 800d874:	4b75      	ldr	r3, [pc, #468]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d876:	2208      	movs	r2, #8
 800d878:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d87a:	4b74      	ldr	r3, [pc, #464]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d87c:	2200      	movs	r2, #0
 800d87e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d882:	4b72      	ldr	r3, [pc, #456]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d884:	2200      	movs	r2, #0
 800d886:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d888:	4b70      	ldr	r3, [pc, #448]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800d88e:	4b6f      	ldr	r3, [pc, #444]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d890:	2201      	movs	r2, #1
 800d892:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800d896:	4b6d      	ldr	r3, [pc, #436]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d89c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800d89e:	4b6b      	ldr	r3, [pc, #428]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 800d8a6:	4b69      	ldr	r3, [pc, #420]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d8a8:	2214      	movs	r2, #20
 800d8aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 800d8ac:	4b67      	ldr	r3, [pc, #412]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d8ae:	22c0      	movs	r2, #192	; 0xc0
 800d8b0:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800d8b2:	4b66      	ldr	r3, [pc, #408]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800d8b8:	4b64      	ldr	r3, [pc, #400]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d8be:	4863      	ldr	r0, [pc, #396]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d8c0:	f002 f932 	bl	800fb28 <HAL_ADC_Init>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	bf14      	ite	ne
 800d8ca:	2301      	movne	r3, #1
 800d8cc:	2300      	moveq	r3, #0
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d001      	beq.n	800d8d8 <_ZL12MX_ADC1_Initv+0xb8>
  {
    Error_Handler();
 800d8d4:	f000 ff96 	bl	800e804 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800d8dc:	f107 031c 	add.w	r3, r7, #28
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	485a      	ldr	r0, [pc, #360]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d8e4:	f003 fab4 	bl	8010e50 <HAL_ADCEx_MultiModeConfigChannel>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	bf14      	ite	ne
 800d8ee:	2301      	movne	r3, #1
 800d8f0:	2300      	moveq	r3, #0
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d001      	beq.n	800d8fc <_ZL12MX_ADC1_Initv+0xdc>
  {
    Error_Handler();
 800d8f8:	f000 ff84 	bl	800e804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800d8fc:	4b55      	ldr	r3, [pc, #340]	; (800da54 <_ZL12MX_ADC1_Initv+0x234>)
 800d8fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800d900:	2306      	movs	r3, #6
 800d902:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800d904:	2301      	movs	r3, #1
 800d906:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800d908:	237f      	movs	r3, #127	; 0x7f
 800d90a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800d90c:	2304      	movs	r3, #4
 800d90e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800d910:	2300      	movs	r3, #0
 800d912:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d914:	1d3b      	adds	r3, r7, #4
 800d916:	4619      	mov	r1, r3
 800d918:	484c      	ldr	r0, [pc, #304]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d91a:	f002 fd3d 	bl	8010398 <HAL_ADC_ConfigChannel>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	bf14      	ite	ne
 800d924:	2301      	movne	r3, #1
 800d926:	2300      	moveq	r3, #0
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d001      	beq.n	800d932 <_ZL12MX_ADC1_Initv+0x112>
  {
    Error_Handler();
 800d92e:	f000 ff69 	bl	800e804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800d932:	4b49      	ldr	r3, [pc, #292]	; (800da58 <_ZL12MX_ADC1_Initv+0x238>)
 800d934:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800d936:	230c      	movs	r3, #12
 800d938:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d93a:	1d3b      	adds	r3, r7, #4
 800d93c:	4619      	mov	r1, r3
 800d93e:	4843      	ldr	r0, [pc, #268]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d940:	f002 fd2a 	bl	8010398 <HAL_ADC_ConfigChannel>
 800d944:	4603      	mov	r3, r0
 800d946:	2b00      	cmp	r3, #0
 800d948:	bf14      	ite	ne
 800d94a:	2301      	movne	r3, #1
 800d94c:	2300      	moveq	r3, #0
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	2b00      	cmp	r3, #0
 800d952:	d001      	beq.n	800d958 <_ZL12MX_ADC1_Initv+0x138>
  {
    Error_Handler();
 800d954:	f000 ff56 	bl	800e804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800d958:	4b40      	ldr	r3, [pc, #256]	; (800da5c <_ZL12MX_ADC1_Initv+0x23c>)
 800d95a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800d95c:	2312      	movs	r3, #18
 800d95e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d960:	1d3b      	adds	r3, r7, #4
 800d962:	4619      	mov	r1, r3
 800d964:	4839      	ldr	r0, [pc, #228]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d966:	f002 fd17 	bl	8010398 <HAL_ADC_ConfigChannel>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	bf14      	ite	ne
 800d970:	2301      	movne	r3, #1
 800d972:	2300      	moveq	r3, #0
 800d974:	b2db      	uxtb	r3, r3
 800d976:	2b00      	cmp	r3, #0
 800d978:	d001      	beq.n	800d97e <_ZL12MX_ADC1_Initv+0x15e>
  {
    Error_Handler();
 800d97a:	f000 ff43 	bl	800e804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800d97e:	4b38      	ldr	r3, [pc, #224]	; (800da60 <_ZL12MX_ADC1_Initv+0x240>)
 800d980:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800d982:	2318      	movs	r3, #24
 800d984:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d986:	1d3b      	adds	r3, r7, #4
 800d988:	4619      	mov	r1, r3
 800d98a:	4830      	ldr	r0, [pc, #192]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d98c:	f002 fd04 	bl	8010398 <HAL_ADC_ConfigChannel>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	bf14      	ite	ne
 800d996:	2301      	movne	r3, #1
 800d998:	2300      	moveq	r3, #0
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d001      	beq.n	800d9a4 <_ZL12MX_ADC1_Initv+0x184>
  {
    Error_Handler();
 800d9a0:	f000 ff30 	bl	800e804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800d9a4:	4b2f      	ldr	r3, [pc, #188]	; (800da64 <_ZL12MX_ADC1_Initv+0x244>)
 800d9a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800d9a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d9ae:	1d3b      	adds	r3, r7, #4
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	4826      	ldr	r0, [pc, #152]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d9b4:	f002 fcf0 	bl	8010398 <HAL_ADC_ConfigChannel>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	bf14      	ite	ne
 800d9be:	2301      	movne	r3, #1
 800d9c0:	2300      	moveq	r3, #0
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d001      	beq.n	800d9cc <_ZL12MX_ADC1_Initv+0x1ac>
  {
    Error_Handler();
 800d9c8:	f000 ff1c 	bl	800e804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800d9cc:	4b26      	ldr	r3, [pc, #152]	; (800da68 <_ZL12MX_ADC1_Initv+0x248>)
 800d9ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800d9d0:	f44f 7383 	mov.w	r3, #262	; 0x106
 800d9d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d9d6:	1d3b      	adds	r3, r7, #4
 800d9d8:	4619      	mov	r1, r3
 800d9da:	481c      	ldr	r0, [pc, #112]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800d9dc:	f002 fcdc 	bl	8010398 <HAL_ADC_ConfigChannel>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	bf14      	ite	ne
 800d9e6:	2301      	movne	r3, #1
 800d9e8:	2300      	moveq	r3, #0
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d001      	beq.n	800d9f4 <_ZL12MX_ADC1_Initv+0x1d4>
  {
    Error_Handler();
 800d9f0:	f000 ff08 	bl	800e804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800d9f4:	4b1d      	ldr	r3, [pc, #116]	; (800da6c <_ZL12MX_ADC1_Initv+0x24c>)
 800d9f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800d9f8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800d9fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d9fe:	1d3b      	adds	r3, r7, #4
 800da00:	4619      	mov	r1, r3
 800da02:	4812      	ldr	r0, [pc, #72]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800da04:	f002 fcc8 	bl	8010398 <HAL_ADC_ConfigChannel>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	bf14      	ite	ne
 800da0e:	2301      	movne	r3, #1
 800da10:	2300      	moveq	r3, #0
 800da12:	b2db      	uxtb	r3, r3
 800da14:	2b00      	cmp	r3, #0
 800da16:	d001      	beq.n	800da1c <_ZL12MX_ADC1_Initv+0x1fc>
  {
    Error_Handler();
 800da18:	f000 fef4 	bl	800e804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800da1c:	4b14      	ldr	r3, [pc, #80]	; (800da70 <_ZL12MX_ADC1_Initv+0x250>)
 800da1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800da20:	f44f 7389 	mov.w	r3, #274	; 0x112
 800da24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800da26:	1d3b      	adds	r3, r7, #4
 800da28:	4619      	mov	r1, r3
 800da2a:	4808      	ldr	r0, [pc, #32]	; (800da4c <_ZL12MX_ADC1_Initv+0x22c>)
 800da2c:	f002 fcb4 	bl	8010398 <HAL_ADC_ConfigChannel>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	bf14      	ite	ne
 800da36:	2301      	movne	r3, #1
 800da38:	2300      	moveq	r3, #0
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d001      	beq.n	800da44 <_ZL12MX_ADC1_Initv+0x224>
  {
    Error_Handler();
 800da40:	f000 fee0 	bl	800e804 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800da44:	bf00      	nop
 800da46:	3728      	adds	r7, #40	; 0x28
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	20000108 	.word	0x20000108
 800da50:	42028000 	.word	0x42028000
 800da54:	04300002 	.word	0x04300002
 800da58:	08600004 	.word	0x08600004
 800da5c:	0c900008 	.word	0x0c900008
 800da60:	1d500080 	.word	0x1d500080
 800da64:	21800100 	.word	0x21800100
 800da68:	25b00200 	.word	0x25b00200
 800da6c:	32601000 	.word	0x32601000
 800da70:	43210000 	.word	0x43210000

0800da74 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800da78:	4b22      	ldr	r3, [pc, #136]	; (800db04 <_ZL12MX_I2C1_Initv+0x90>)
 800da7a:	4a23      	ldr	r2, [pc, #140]	; (800db08 <_ZL12MX_I2C1_Initv+0x94>)
 800da7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A21D58;
 800da7e:	4b21      	ldr	r3, [pc, #132]	; (800db04 <_ZL12MX_I2C1_Initv+0x90>)
 800da80:	4a22      	ldr	r2, [pc, #136]	; (800db0c <_ZL12MX_I2C1_Initv+0x98>)
 800da82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800da84:	4b1f      	ldr	r3, [pc, #124]	; (800db04 <_ZL12MX_I2C1_Initv+0x90>)
 800da86:	2200      	movs	r2, #0
 800da88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800da8a:	4b1e      	ldr	r3, [pc, #120]	; (800db04 <_ZL12MX_I2C1_Initv+0x90>)
 800da8c:	2201      	movs	r2, #1
 800da8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800da90:	4b1c      	ldr	r3, [pc, #112]	; (800db04 <_ZL12MX_I2C1_Initv+0x90>)
 800da92:	2200      	movs	r2, #0
 800da94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800da96:	4b1b      	ldr	r3, [pc, #108]	; (800db04 <_ZL12MX_I2C1_Initv+0x90>)
 800da98:	2200      	movs	r2, #0
 800da9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800da9c:	4b19      	ldr	r3, [pc, #100]	; (800db04 <_ZL12MX_I2C1_Initv+0x90>)
 800da9e:	2200      	movs	r2, #0
 800daa0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800daa2:	4b18      	ldr	r3, [pc, #96]	; (800db04 <_ZL12MX_I2C1_Initv+0x90>)
 800daa4:	2200      	movs	r2, #0
 800daa6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800daa8:	4b16      	ldr	r3, [pc, #88]	; (800db04 <_ZL12MX_I2C1_Initv+0x90>)
 800daaa:	2200      	movs	r2, #0
 800daac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800daae:	4815      	ldr	r0, [pc, #84]	; (800db04 <_ZL12MX_I2C1_Initv+0x90>)
 800dab0:	f004 f898 	bl	8011be4 <HAL_I2C_Init>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	bf14      	ite	ne
 800daba:	2301      	movne	r3, #1
 800dabc:	2300      	moveq	r3, #0
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d001      	beq.n	800dac8 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 800dac4:	f000 fe9e 	bl	800e804 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800dac8:	2100      	movs	r1, #0
 800daca:	480e      	ldr	r0, [pc, #56]	; (800db04 <_ZL12MX_I2C1_Initv+0x90>)
 800dacc:	f004 f919 	bl	8011d02 <HAL_I2CEx_ConfigAnalogFilter>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	bf14      	ite	ne
 800dad6:	2301      	movne	r3, #1
 800dad8:	2300      	moveq	r3, #0
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d001      	beq.n	800dae4 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 800dae0:	f000 fe90 	bl	800e804 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800dae4:	2100      	movs	r1, #0
 800dae6:	4807      	ldr	r0, [pc, #28]	; (800db04 <_ZL12MX_I2C1_Initv+0x90>)
 800dae8:	f004 f956 	bl	8011d98 <HAL_I2CEx_ConfigDigitalFilter>
 800daec:	4603      	mov	r3, r0
 800daee:	2b00      	cmp	r3, #0
 800daf0:	bf14      	ite	ne
 800daf2:	2301      	movne	r3, #1
 800daf4:	2300      	moveq	r3, #0
 800daf6:	b2db      	uxtb	r3, r3
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d001      	beq.n	800db00 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 800dafc:	f000 fe82 	bl	800e804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800db00:	bf00      	nop
 800db02:	bd80      	pop	{r7, pc}
 800db04:	200001d8 	.word	0x200001d8
 800db08:	40005400 	.word	0x40005400
 800db0c:	10a21d58 	.word	0x10a21d58

0800db10 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800db14:	2000      	movs	r0, #0
 800db16:	f004 f98b 	bl	8011e30 <HAL_ICACHE_ConfigAssociativityMode>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	bf14      	ite	ne
 800db20:	2301      	movne	r3, #1
 800db22:	2300      	moveq	r3, #0
 800db24:	b2db      	uxtb	r3, r3
 800db26:	2b00      	cmp	r3, #0
 800db28:	d001      	beq.n	800db2e <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 800db2a:	f000 fe6b 	bl	800e804 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800db2e:	f004 f99f 	bl	8011e70 <HAL_ICACHE_Enable>
 800db32:	4603      	mov	r3, r0
 800db34:	2b00      	cmp	r3, #0
 800db36:	bf14      	ite	ne
 800db38:	2301      	movne	r3, #1
 800db3a:	2300      	moveq	r3, #0
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d001      	beq.n	800db46 <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 800db42:	f000 fe5f 	bl	800e804 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800db46:	bf00      	nop
 800db48:	bd80      	pop	{r7, pc}
	...

0800db4c <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800db50:	4b2c      	ldr	r3, [pc, #176]	; (800dc04 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800db52:	4a2d      	ldr	r2, [pc, #180]	; (800dc08 <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 800db54:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800db56:	4b2b      	ldr	r3, [pc, #172]	; (800dc04 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800db58:	4a2c      	ldr	r2, [pc, #176]	; (800dc0c <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 800db5a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800db5c:	4b29      	ldr	r3, [pc, #164]	; (800dc04 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800db5e:	2200      	movs	r2, #0
 800db60:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800db62:	4b28      	ldr	r3, [pc, #160]	; (800dc04 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800db64:	2200      	movs	r2, #0
 800db66:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800db68:	4b26      	ldr	r3, [pc, #152]	; (800dc04 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800db6a:	2200      	movs	r2, #0
 800db6c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800db6e:	4b25      	ldr	r3, [pc, #148]	; (800dc04 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800db70:	220c      	movs	r2, #12
 800db72:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db74:	4b23      	ldr	r3, [pc, #140]	; (800dc04 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800db76:	2200      	movs	r2, #0
 800db78:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800db7a:	4b22      	ldr	r3, [pc, #136]	; (800dc04 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800db7c:	2200      	movs	r2, #0
 800db7e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800db80:	4b20      	ldr	r3, [pc, #128]	; (800dc04 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800db82:	2200      	movs	r2, #0
 800db84:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db86:	4b1f      	ldr	r3, [pc, #124]	; (800dc04 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800db88:	2200      	movs	r2, #0
 800db8a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800db8c:	4b1d      	ldr	r3, [pc, #116]	; (800dc04 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800db8e:	2200      	movs	r2, #0
 800db90:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800db92:	481c      	ldr	r0, [pc, #112]	; (800dc04 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800db94:	f007 ffa0 	bl	8015ad8 <HAL_UART_Init>
 800db98:	4603      	mov	r3, r0
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	bf14      	ite	ne
 800db9e:	2301      	movne	r3, #1
 800dba0:	2300      	moveq	r3, #0
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d001      	beq.n	800dbac <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 800dba8:	f000 fe2c 	bl	800e804 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800dbac:	2100      	movs	r1, #0
 800dbae:	4815      	ldr	r0, [pc, #84]	; (800dc04 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800dbb0:	f009 ff63 	bl	8017a7a <HAL_UARTEx_SetTxFifoThreshold>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	bf14      	ite	ne
 800dbba:	2301      	movne	r3, #1
 800dbbc:	2300      	moveq	r3, #0
 800dbbe:	b2db      	uxtb	r3, r3
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d001      	beq.n	800dbc8 <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 800dbc4:	f000 fe1e 	bl	800e804 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800dbc8:	2100      	movs	r1, #0
 800dbca:	480e      	ldr	r0, [pc, #56]	; (800dc04 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800dbcc:	f009 ff93 	bl	8017af6 <HAL_UARTEx_SetRxFifoThreshold>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	bf14      	ite	ne
 800dbd6:	2301      	movne	r3, #1
 800dbd8:	2300      	moveq	r3, #0
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d001      	beq.n	800dbe4 <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 800dbe0:	f000 fe10 	bl	800e804 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800dbe4:	4807      	ldr	r0, [pc, #28]	; (800dc04 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800dbe6:	f009 ff0f 	bl	8017a08 <HAL_UARTEx_DisableFifoMode>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	bf14      	ite	ne
 800dbf0:	2301      	movne	r3, #1
 800dbf2:	2300      	moveq	r3, #0
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d001      	beq.n	800dbfe <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 800dbfa:	f000 fe03 	bl	800e804 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800dbfe:	bf00      	nop
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	2000022c 	.word	0x2000022c
 800dc08:	40008000 	.word	0x40008000
 800dc0c:	00033324 	.word	0x00033324

0800dc10 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800dc14:	4b2c      	ldr	r3, [pc, #176]	; (800dcc8 <_ZL13MX_UART4_Initv+0xb8>)
 800dc16:	4a2d      	ldr	r2, [pc, #180]	; (800dccc <_ZL13MX_UART4_Initv+0xbc>)
 800dc18:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800dc1a:	4b2b      	ldr	r3, [pc, #172]	; (800dcc8 <_ZL13MX_UART4_Initv+0xb8>)
 800dc1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800dc20:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800dc22:	4b29      	ldr	r3, [pc, #164]	; (800dcc8 <_ZL13MX_UART4_Initv+0xb8>)
 800dc24:	2200      	movs	r2, #0
 800dc26:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800dc28:	4b27      	ldr	r3, [pc, #156]	; (800dcc8 <_ZL13MX_UART4_Initv+0xb8>)
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800dc2e:	4b26      	ldr	r3, [pc, #152]	; (800dcc8 <_ZL13MX_UART4_Initv+0xb8>)
 800dc30:	2200      	movs	r2, #0
 800dc32:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 800dc34:	4b24      	ldr	r3, [pc, #144]	; (800dcc8 <_ZL13MX_UART4_Initv+0xb8>)
 800dc36:	2204      	movs	r2, #4
 800dc38:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc3a:	4b23      	ldr	r3, [pc, #140]	; (800dcc8 <_ZL13MX_UART4_Initv+0xb8>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc40:	4b21      	ldr	r3, [pc, #132]	; (800dcc8 <_ZL13MX_UART4_Initv+0xb8>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800dc46:	4b20      	ldr	r3, [pc, #128]	; (800dcc8 <_ZL13MX_UART4_Initv+0xb8>)
 800dc48:	2200      	movs	r2, #0
 800dc4a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800dc4c:	4b1e      	ldr	r3, [pc, #120]	; (800dcc8 <_ZL13MX_UART4_Initv+0xb8>)
 800dc4e:	2200      	movs	r2, #0
 800dc50:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dc52:	4b1d      	ldr	r3, [pc, #116]	; (800dcc8 <_ZL13MX_UART4_Initv+0xb8>)
 800dc54:	2200      	movs	r2, #0
 800dc56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800dc58:	481b      	ldr	r0, [pc, #108]	; (800dcc8 <_ZL13MX_UART4_Initv+0xb8>)
 800dc5a:	f007 ff3d 	bl	8015ad8 <HAL_UART_Init>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	bf14      	ite	ne
 800dc64:	2301      	movne	r3, #1
 800dc66:	2300      	moveq	r3, #0
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d001      	beq.n	800dc72 <_ZL13MX_UART4_Initv+0x62>
  {
    Error_Handler();
 800dc6e:	f000 fdc9 	bl	800e804 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800dc72:	2100      	movs	r1, #0
 800dc74:	4814      	ldr	r0, [pc, #80]	; (800dcc8 <_ZL13MX_UART4_Initv+0xb8>)
 800dc76:	f009 ff00 	bl	8017a7a <HAL_UARTEx_SetTxFifoThreshold>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	bf14      	ite	ne
 800dc80:	2301      	movne	r3, #1
 800dc82:	2300      	moveq	r3, #0
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d001      	beq.n	800dc8e <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 800dc8a:	f000 fdbb 	bl	800e804 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800dc8e:	2100      	movs	r1, #0
 800dc90:	480d      	ldr	r0, [pc, #52]	; (800dcc8 <_ZL13MX_UART4_Initv+0xb8>)
 800dc92:	f009 ff30 	bl	8017af6 <HAL_UARTEx_SetRxFifoThreshold>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	bf14      	ite	ne
 800dc9c:	2301      	movne	r3, #1
 800dc9e:	2300      	moveq	r3, #0
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d001      	beq.n	800dcaa <_ZL13MX_UART4_Initv+0x9a>
  {
    Error_Handler();
 800dca6:	f000 fdad 	bl	800e804 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800dcaa:	4807      	ldr	r0, [pc, #28]	; (800dcc8 <_ZL13MX_UART4_Initv+0xb8>)
 800dcac:	f009 feac 	bl	8017a08 <HAL_UARTEx_DisableFifoMode>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	bf14      	ite	ne
 800dcb6:	2301      	movne	r3, #1
 800dcb8:	2300      	moveq	r3, #0
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d001      	beq.n	800dcc4 <_ZL13MX_UART4_Initv+0xb4>
  {
    Error_Handler();
 800dcc0:	f000 fda0 	bl	800e804 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800dcc4:	bf00      	nop
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	200002c0 	.word	0x200002c0
 800dccc:	40004c00 	.word	0x40004c00

0800dcd0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800dcd4:	4b2c      	ldr	r3, [pc, #176]	; (800dd88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800dcd6:	4a2d      	ldr	r2, [pc, #180]	; (800dd8c <_ZL19MX_USART2_UART_Initv+0xbc>)
 800dcd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800dcda:	4b2b      	ldr	r3, [pc, #172]	; (800dd88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800dcdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800dce0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800dce2:	4b29      	ldr	r3, [pc, #164]	; (800dd88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800dce4:	2200      	movs	r2, #0
 800dce6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800dce8:	4b27      	ldr	r3, [pc, #156]	; (800dd88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800dcea:	2200      	movs	r2, #0
 800dcec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800dcee:	4b26      	ldr	r3, [pc, #152]	; (800dd88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800dcf4:	4b24      	ldr	r3, [pc, #144]	; (800dd88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800dcf6:	220c      	movs	r2, #12
 800dcf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dcfa:	4b23      	ldr	r3, [pc, #140]	; (800dd88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800dd00:	4b21      	ldr	r3, [pc, #132]	; (800dd88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800dd02:	2200      	movs	r2, #0
 800dd04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800dd06:	4b20      	ldr	r3, [pc, #128]	; (800dd88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800dd08:	2200      	movs	r2, #0
 800dd0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800dd0c:	4b1e      	ldr	r3, [pc, #120]	; (800dd88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800dd0e:	2200      	movs	r2, #0
 800dd10:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dd12:	4b1d      	ldr	r3, [pc, #116]	; (800dd88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800dd14:	2200      	movs	r2, #0
 800dd16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800dd18:	481b      	ldr	r0, [pc, #108]	; (800dd88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800dd1a:	f007 fedd 	bl	8015ad8 <HAL_UART_Init>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	bf14      	ite	ne
 800dd24:	2301      	movne	r3, #1
 800dd26:	2300      	moveq	r3, #0
 800dd28:	b2db      	uxtb	r3, r3
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d001      	beq.n	800dd32 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 800dd2e:	f000 fd69 	bl	800e804 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800dd32:	2100      	movs	r1, #0
 800dd34:	4814      	ldr	r0, [pc, #80]	; (800dd88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800dd36:	f009 fea0 	bl	8017a7a <HAL_UARTEx_SetTxFifoThreshold>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	bf14      	ite	ne
 800dd40:	2301      	movne	r3, #1
 800dd42:	2300      	moveq	r3, #0
 800dd44:	b2db      	uxtb	r3, r3
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d001      	beq.n	800dd4e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800dd4a:	f000 fd5b 	bl	800e804 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800dd4e:	2100      	movs	r1, #0
 800dd50:	480d      	ldr	r0, [pc, #52]	; (800dd88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800dd52:	f009 fed0 	bl	8017af6 <HAL_UARTEx_SetRxFifoThreshold>
 800dd56:	4603      	mov	r3, r0
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	bf14      	ite	ne
 800dd5c:	2301      	movne	r3, #1
 800dd5e:	2300      	moveq	r3, #0
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d001      	beq.n	800dd6a <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 800dd66:	f000 fd4d 	bl	800e804 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800dd6a:	4807      	ldr	r0, [pc, #28]	; (800dd88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800dd6c:	f009 fe4c 	bl	8017a08 <HAL_UARTEx_DisableFifoMode>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	bf14      	ite	ne
 800dd76:	2301      	movne	r3, #1
 800dd78:	2300      	moveq	r3, #0
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d001      	beq.n	800dd84 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 800dd80:	f000 fd40 	bl	800e804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800dd84:	bf00      	nop
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	20000354 	.word	0x20000354
 800dd8c:	40004400 	.word	0x40004400

0800dd90 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b086      	sub	sp, #24
 800dd94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800dd96:	463b      	mov	r3, r7
 800dd98:	2200      	movs	r2, #0
 800dd9a:	601a      	str	r2, [r3, #0]
 800dd9c:	605a      	str	r2, [r3, #4]
 800dd9e:	609a      	str	r2, [r3, #8]
 800dda0:	60da      	str	r2, [r3, #12]
 800dda2:	611a      	str	r2, [r3, #16]
 800dda4:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800dda6:	4b22      	ldr	r3, [pc, #136]	; (800de30 <_ZL11MX_RTC_Initv+0xa0>)
 800dda8:	4a22      	ldr	r2, [pc, #136]	; (800de34 <_ZL11MX_RTC_Initv+0xa4>)
 800ddaa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800ddac:	4b20      	ldr	r3, [pc, #128]	; (800de30 <_ZL11MX_RTC_Initv+0xa0>)
 800ddae:	2200      	movs	r2, #0
 800ddb0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800ddb2:	4b1f      	ldr	r3, [pc, #124]	; (800de30 <_ZL11MX_RTC_Initv+0xa0>)
 800ddb4:	227f      	movs	r2, #127	; 0x7f
 800ddb6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800ddb8:	4b1d      	ldr	r3, [pc, #116]	; (800de30 <_ZL11MX_RTC_Initv+0xa0>)
 800ddba:	22ff      	movs	r2, #255	; 0xff
 800ddbc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800ddbe:	4b1c      	ldr	r3, [pc, #112]	; (800de30 <_ZL11MX_RTC_Initv+0xa0>)
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800ddc4:	4b1a      	ldr	r3, [pc, #104]	; (800de30 <_ZL11MX_RTC_Initv+0xa0>)
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800ddca:	4b19      	ldr	r3, [pc, #100]	; (800de30 <_ZL11MX_RTC_Initv+0xa0>)
 800ddcc:	2200      	movs	r2, #0
 800ddce:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ddd0:	4b17      	ldr	r3, [pc, #92]	; (800de30 <_ZL11MX_RTC_Initv+0xa0>)
 800ddd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ddd6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800ddd8:	4b15      	ldr	r3, [pc, #84]	; (800de30 <_ZL11MX_RTC_Initv+0xa0>)
 800ddda:	2200      	movs	r2, #0
 800dddc:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800ddde:	4814      	ldr	r0, [pc, #80]	; (800de30 <_ZL11MX_RTC_Initv+0xa0>)
 800dde0:	f005 ff0a 	bl	8013bf8 <HAL_RTC_Init>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	bf14      	ite	ne
 800ddea:	2301      	movne	r3, #1
 800ddec:	2300      	moveq	r3, #0
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d001      	beq.n	800ddf8 <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 800ddf4:	f000 fd06 	bl	800e804 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800de00:	2300      	movs	r3, #0
 800de02:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800de04:	2300      	movs	r3, #0
 800de06:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800de08:	463b      	mov	r3, r7
 800de0a:	4619      	mov	r1, r3
 800de0c:	4808      	ldr	r0, [pc, #32]	; (800de30 <_ZL11MX_RTC_Initv+0xa0>)
 800de0e:	f006 f801 	bl	8013e14 <HAL_RTCEx_PrivilegeModeSet>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	bf14      	ite	ne
 800de18:	2301      	movne	r3, #1
 800de1a:	2300      	moveq	r3, #0
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d001      	beq.n	800de26 <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 800de22:	f000 fcef 	bl	800e804 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800de26:	bf00      	nop
 800de28:	3718      	adds	r7, #24
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	200003e8 	.word	0x200003e8
 800de34:	40002800 	.word	0x40002800

0800de38 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800de3c:	4b1d      	ldr	r3, [pc, #116]	; (800deb4 <_ZL12MX_SPI1_Initv+0x7c>)
 800de3e:	4a1e      	ldr	r2, [pc, #120]	; (800deb8 <_ZL12MX_SPI1_Initv+0x80>)
 800de40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800de42:	4b1c      	ldr	r3, [pc, #112]	; (800deb4 <_ZL12MX_SPI1_Initv+0x7c>)
 800de44:	f44f 7282 	mov.w	r2, #260	; 0x104
 800de48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800de4a:	4b1a      	ldr	r3, [pc, #104]	; (800deb4 <_ZL12MX_SPI1_Initv+0x7c>)
 800de4c:	2200      	movs	r2, #0
 800de4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800de50:	4b18      	ldr	r3, [pc, #96]	; (800deb4 <_ZL12MX_SPI1_Initv+0x7c>)
 800de52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800de56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800de58:	4b16      	ldr	r3, [pc, #88]	; (800deb4 <_ZL12MX_SPI1_Initv+0x7c>)
 800de5a:	2200      	movs	r2, #0
 800de5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800de5e:	4b15      	ldr	r3, [pc, #84]	; (800deb4 <_ZL12MX_SPI1_Initv+0x7c>)
 800de60:	2200      	movs	r2, #0
 800de62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800de64:	4b13      	ldr	r3, [pc, #76]	; (800deb4 <_ZL12MX_SPI1_Initv+0x7c>)
 800de66:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800de6c:	4b11      	ldr	r3, [pc, #68]	; (800deb4 <_ZL12MX_SPI1_Initv+0x7c>)
 800de6e:	2210      	movs	r2, #16
 800de70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800de72:	4b10      	ldr	r3, [pc, #64]	; (800deb4 <_ZL12MX_SPI1_Initv+0x7c>)
 800de74:	2200      	movs	r2, #0
 800de76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800de78:	4b0e      	ldr	r3, [pc, #56]	; (800deb4 <_ZL12MX_SPI1_Initv+0x7c>)
 800de7a:	2200      	movs	r2, #0
 800de7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de7e:	4b0d      	ldr	r3, [pc, #52]	; (800deb4 <_ZL12MX_SPI1_Initv+0x7c>)
 800de80:	2200      	movs	r2, #0
 800de82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800de84:	4b0b      	ldr	r3, [pc, #44]	; (800deb4 <_ZL12MX_SPI1_Initv+0x7c>)
 800de86:	2207      	movs	r2, #7
 800de88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800de8a:	4b0a      	ldr	r3, [pc, #40]	; (800deb4 <_ZL12MX_SPI1_Initv+0x7c>)
 800de8c:	2200      	movs	r2, #0
 800de8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800de90:	4b08      	ldr	r3, [pc, #32]	; (800deb4 <_ZL12MX_SPI1_Initv+0x7c>)
 800de92:	2208      	movs	r2, #8
 800de94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800de96:	4807      	ldr	r0, [pc, #28]	; (800deb4 <_ZL12MX_SPI1_Initv+0x7c>)
 800de98:	f005 ffe8 	bl	8013e6c <HAL_SPI_Init>
 800de9c:	4603      	mov	r3, r0
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	bf14      	ite	ne
 800dea2:	2301      	movne	r3, #1
 800dea4:	2300      	moveq	r3, #0
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d001      	beq.n	800deb0 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 800deac:	f000 fcaa 	bl	800e804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800deb0:	bf00      	nop
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	20000410 	.word	0x20000410
 800deb8:	40013000 	.word	0x40013000

0800debc <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800dec0:	4b1d      	ldr	r3, [pc, #116]	; (800df38 <_ZL12MX_SPI2_Initv+0x7c>)
 800dec2:	4a1e      	ldr	r2, [pc, #120]	; (800df3c <_ZL12MX_SPI2_Initv+0x80>)
 800dec4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800dec6:	4b1c      	ldr	r3, [pc, #112]	; (800df38 <_ZL12MX_SPI2_Initv+0x7c>)
 800dec8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800decc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800dece:	4b1a      	ldr	r3, [pc, #104]	; (800df38 <_ZL12MX_SPI2_Initv+0x7c>)
 800ded0:	2200      	movs	r2, #0
 800ded2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800ded4:	4b18      	ldr	r3, [pc, #96]	; (800df38 <_ZL12MX_SPI2_Initv+0x7c>)
 800ded6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800deda:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800dedc:	4b16      	ldr	r3, [pc, #88]	; (800df38 <_ZL12MX_SPI2_Initv+0x7c>)
 800dede:	2200      	movs	r2, #0
 800dee0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800dee2:	4b15      	ldr	r3, [pc, #84]	; (800df38 <_ZL12MX_SPI2_Initv+0x7c>)
 800dee4:	2200      	movs	r2, #0
 800dee6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800dee8:	4b13      	ldr	r3, [pc, #76]	; (800df38 <_ZL12MX_SPI2_Initv+0x7c>)
 800deea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800deee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800def0:	4b11      	ldr	r3, [pc, #68]	; (800df38 <_ZL12MX_SPI2_Initv+0x7c>)
 800def2:	2218      	movs	r2, #24
 800def4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800def6:	4b10      	ldr	r3, [pc, #64]	; (800df38 <_ZL12MX_SPI2_Initv+0x7c>)
 800def8:	2200      	movs	r2, #0
 800defa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800defc:	4b0e      	ldr	r3, [pc, #56]	; (800df38 <_ZL12MX_SPI2_Initv+0x7c>)
 800defe:	2200      	movs	r2, #0
 800df00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df02:	4b0d      	ldr	r3, [pc, #52]	; (800df38 <_ZL12MX_SPI2_Initv+0x7c>)
 800df04:	2200      	movs	r2, #0
 800df06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800df08:	4b0b      	ldr	r3, [pc, #44]	; (800df38 <_ZL12MX_SPI2_Initv+0x7c>)
 800df0a:	2207      	movs	r2, #7
 800df0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800df0e:	4b0a      	ldr	r3, [pc, #40]	; (800df38 <_ZL12MX_SPI2_Initv+0x7c>)
 800df10:	2200      	movs	r2, #0
 800df12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800df14:	4b08      	ldr	r3, [pc, #32]	; (800df38 <_ZL12MX_SPI2_Initv+0x7c>)
 800df16:	2208      	movs	r2, #8
 800df18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800df1a:	4807      	ldr	r0, [pc, #28]	; (800df38 <_ZL12MX_SPI2_Initv+0x7c>)
 800df1c:	f005 ffa6 	bl	8013e6c <HAL_SPI_Init>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	bf14      	ite	ne
 800df26:	2301      	movne	r3, #1
 800df28:	2300      	moveq	r3, #0
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d001      	beq.n	800df34 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 800df30:	f000 fc68 	bl	800e804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800df34:	bf00      	nop
 800df36:	bd80      	pop	{r7, pc}
 800df38:	20000474 	.word	0x20000474
 800df3c:	40003800 	.word	0x40003800

0800df40 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800df44:	4b1d      	ldr	r3, [pc, #116]	; (800dfbc <_ZL12MX_SPI3_Initv+0x7c>)
 800df46:	4a1e      	ldr	r2, [pc, #120]	; (800dfc0 <_ZL12MX_SPI3_Initv+0x80>)
 800df48:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800df4a:	4b1c      	ldr	r3, [pc, #112]	; (800dfbc <_ZL12MX_SPI3_Initv+0x7c>)
 800df4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800df50:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800df52:	4b1a      	ldr	r3, [pc, #104]	; (800dfbc <_ZL12MX_SPI3_Initv+0x7c>)
 800df54:	2200      	movs	r2, #0
 800df56:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800df58:	4b18      	ldr	r3, [pc, #96]	; (800dfbc <_ZL12MX_SPI3_Initv+0x7c>)
 800df5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800df5e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800df60:	4b16      	ldr	r3, [pc, #88]	; (800dfbc <_ZL12MX_SPI3_Initv+0x7c>)
 800df62:	2200      	movs	r2, #0
 800df64:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800df66:	4b15      	ldr	r3, [pc, #84]	; (800dfbc <_ZL12MX_SPI3_Initv+0x7c>)
 800df68:	2200      	movs	r2, #0
 800df6a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800df6c:	4b13      	ldr	r3, [pc, #76]	; (800dfbc <_ZL12MX_SPI3_Initv+0x7c>)
 800df6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df72:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800df74:	4b11      	ldr	r3, [pc, #68]	; (800dfbc <_ZL12MX_SPI3_Initv+0x7c>)
 800df76:	2218      	movs	r2, #24
 800df78:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800df7a:	4b10      	ldr	r3, [pc, #64]	; (800dfbc <_ZL12MX_SPI3_Initv+0x7c>)
 800df7c:	2200      	movs	r2, #0
 800df7e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800df80:	4b0e      	ldr	r3, [pc, #56]	; (800dfbc <_ZL12MX_SPI3_Initv+0x7c>)
 800df82:	2200      	movs	r2, #0
 800df84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df86:	4b0d      	ldr	r3, [pc, #52]	; (800dfbc <_ZL12MX_SPI3_Initv+0x7c>)
 800df88:	2200      	movs	r2, #0
 800df8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800df8c:	4b0b      	ldr	r3, [pc, #44]	; (800dfbc <_ZL12MX_SPI3_Initv+0x7c>)
 800df8e:	2207      	movs	r2, #7
 800df90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800df92:	4b0a      	ldr	r3, [pc, #40]	; (800dfbc <_ZL12MX_SPI3_Initv+0x7c>)
 800df94:	2200      	movs	r2, #0
 800df96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800df98:	4b08      	ldr	r3, [pc, #32]	; (800dfbc <_ZL12MX_SPI3_Initv+0x7c>)
 800df9a:	2208      	movs	r2, #8
 800df9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800df9e:	4807      	ldr	r0, [pc, #28]	; (800dfbc <_ZL12MX_SPI3_Initv+0x7c>)
 800dfa0:	f005 ff64 	bl	8013e6c <HAL_SPI_Init>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	bf14      	ite	ne
 800dfaa:	2301      	movne	r3, #1
 800dfac:	2300      	moveq	r3, #0
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d001      	beq.n	800dfb8 <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 800dfb4:	f000 fc26 	bl	800e804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800dfb8:	bf00      	nop
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	200004d8 	.word	0x200004d8
 800dfc0:	40003c00 	.word	0x40003c00

0800dfc4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b0a0      	sub	sp, #128	; 0x80
 800dfc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dfca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800dfce:	2200      	movs	r2, #0
 800dfd0:	601a      	str	r2, [r3, #0]
 800dfd2:	605a      	str	r2, [r3, #4]
 800dfd4:	609a      	str	r2, [r3, #8]
 800dfd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dfd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800dfdc:	2200      	movs	r2, #0
 800dfde:	601a      	str	r2, [r3, #0]
 800dfe0:	605a      	str	r2, [r3, #4]
 800dfe2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dfe4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dfe8:	2200      	movs	r2, #0
 800dfea:	601a      	str	r2, [r3, #0]
 800dfec:	605a      	str	r2, [r3, #4]
 800dfee:	609a      	str	r2, [r3, #8]
 800dff0:	60da      	str	r2, [r3, #12]
 800dff2:	611a      	str	r2, [r3, #16]
 800dff4:	615a      	str	r2, [r3, #20]
 800dff6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800dff8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dffc:	2200      	movs	r2, #0
 800dffe:	601a      	str	r2, [r3, #0]
 800e000:	605a      	str	r2, [r3, #4]
 800e002:	609a      	str	r2, [r3, #8]
 800e004:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800e006:	1d3b      	adds	r3, r7, #4
 800e008:	2234      	movs	r2, #52	; 0x34
 800e00a:	2100      	movs	r1, #0
 800e00c:	4618      	mov	r0, r3
 800e00e:	f00e ffc2 	bl	801cf96 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800e012:	4b70      	ldr	r3, [pc, #448]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e014:	4a70      	ldr	r2, [pc, #448]	; (800e1d8 <_ZL12MX_TIM1_Initv+0x214>)
 800e016:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 110;
 800e018:	4b6e      	ldr	r3, [pc, #440]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e01a:	226e      	movs	r2, #110	; 0x6e
 800e01c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e01e:	4b6d      	ldr	r3, [pc, #436]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e020:	2200      	movs	r2, #0
 800e022:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 800e024:	4b6b      	ldr	r3, [pc, #428]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e026:	f241 3288 	movw	r2, #5000	; 0x1388
 800e02a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e02c:	4b69      	ldr	r3, [pc, #420]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e02e:	2200      	movs	r2, #0
 800e030:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800e032:	4b68      	ldr	r3, [pc, #416]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e034:	2200      	movs	r2, #0
 800e036:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800e038:	4b66      	ldr	r3, [pc, #408]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e03a:	2280      	movs	r2, #128	; 0x80
 800e03c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800e03e:	4865      	ldr	r0, [pc, #404]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e040:	f005 ffb7 	bl	8013fb2 <HAL_TIM_Base_Init>
 800e044:	4603      	mov	r3, r0
 800e046:	2b00      	cmp	r3, #0
 800e048:	bf14      	ite	ne
 800e04a:	2301      	movne	r3, #1
 800e04c:	2300      	moveq	r3, #0
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	2b00      	cmp	r3, #0
 800e052:	d001      	beq.n	800e058 <_ZL12MX_TIM1_Initv+0x94>
  {
    Error_Handler();
 800e054:	f000 fbd6 	bl	800e804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e05c:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800e05e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800e062:	4619      	mov	r1, r3
 800e064:	485b      	ldr	r0, [pc, #364]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e066:	f006 fda9 	bl	8014bbc <HAL_TIM_ConfigClockSource>
 800e06a:	4603      	mov	r3, r0
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	bf14      	ite	ne
 800e070:	2301      	movne	r3, #1
 800e072:	2300      	moveq	r3, #0
 800e074:	b2db      	uxtb	r3, r3
 800e076:	2b00      	cmp	r3, #0
 800e078:	d001      	beq.n	800e07e <_ZL12MX_TIM1_Initv+0xba>
  {
    Error_Handler();
 800e07a:	f000 fbc3 	bl	800e804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800e07e:	4855      	ldr	r0, [pc, #340]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e080:	f006 f85e 	bl	8014140 <HAL_TIM_PWM_Init>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	bf14      	ite	ne
 800e08a:	2301      	movne	r3, #1
 800e08c:	2300      	moveq	r3, #0
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	2b00      	cmp	r3, #0
 800e092:	d001      	beq.n	800e098 <_ZL12MX_TIM1_Initv+0xd4>
  {
    Error_Handler();
 800e094:	f000 fbb6 	bl	800e804 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800e098:	484e      	ldr	r0, [pc, #312]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e09a:	f006 f9b9 	bl	8014410 <HAL_TIM_IC_Init>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	bf14      	ite	ne
 800e0a4:	2301      	movne	r3, #1
 800e0a6:	2300      	moveq	r3, #0
 800e0a8:	b2db      	uxtb	r3, r3
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d001      	beq.n	800e0b2 <_ZL12MX_TIM1_Initv+0xee>
  {
    Error_Handler();
 800e0ae:	f000 fba9 	bl	800e804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	66bb      	str	r3, [r7, #104]	; 0x68
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800e0be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	4843      	ldr	r0, [pc, #268]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e0c6:	f007 fbc1 	bl	801584c <HAL_TIMEx_MasterConfigSynchronization>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	bf14      	ite	ne
 800e0d0:	2301      	movne	r3, #1
 800e0d2:	2300      	moveq	r3, #0
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d001      	beq.n	800e0de <_ZL12MX_TIM1_Initv+0x11a>
  {
    Error_Handler();
 800e0da:	f000 fb93 	bl	800e804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e0de:	2360      	movs	r3, #96	; 0x60
 800e0e0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.Pulse = 0;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e0fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e0fe:	2200      	movs	r2, #0
 800e100:	4619      	mov	r1, r3
 800e102:	4834      	ldr	r0, [pc, #208]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e104:	f006 fc46 	bl	8014994 <HAL_TIM_PWM_ConfigChannel>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	bf14      	ite	ne
 800e10e:	2301      	movne	r3, #1
 800e110:	2300      	moveq	r3, #0
 800e112:	b2db      	uxtb	r3, r3
 800e114:	2b00      	cmp	r3, #0
 800e116:	d001      	beq.n	800e11c <_ZL12MX_TIM1_Initv+0x158>
  {
    Error_Handler();
 800e118:	f000 fb74 	bl	800e804 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800e11c:	2300      	movs	r3, #0
 800e11e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800e120:	2301      	movs	r3, #1
 800e122:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800e124:	2300      	movs	r3, #0
 800e126:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICFilter = 0;
 800e128:	2300      	movs	r3, #0
 800e12a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800e12c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e130:	2208      	movs	r2, #8
 800e132:	4619      	mov	r1, r3
 800e134:	4827      	ldr	r0, [pc, #156]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e136:	f006 fb91 	bl	801485c <HAL_TIM_IC_ConfigChannel>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	bf14      	ite	ne
 800e140:	2301      	movne	r3, #1
 800e142:	2300      	moveq	r3, #0
 800e144:	b2db      	uxtb	r3, r3
 800e146:	2b00      	cmp	r3, #0
 800e148:	d001      	beq.n	800e14e <_ZL12MX_TIM1_Initv+0x18a>
  {
    Error_Handler();
 800e14a:	f000 fb5b 	bl	800e804 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800e14e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e152:	220c      	movs	r2, #12
 800e154:	4619      	mov	r1, r3
 800e156:	481f      	ldr	r0, [pc, #124]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e158:	f006 fb80 	bl	801485c <HAL_TIM_IC_ConfigChannel>
 800e15c:	4603      	mov	r3, r0
 800e15e:	2b00      	cmp	r3, #0
 800e160:	bf14      	ite	ne
 800e162:	2301      	movne	r3, #1
 800e164:	2300      	moveq	r3, #0
 800e166:	b2db      	uxtb	r3, r3
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d001      	beq.n	800e170 <_ZL12MX_TIM1_Initv+0x1ac>
  {
    Error_Handler();
 800e16c:	f000 fb4a 	bl	800e804 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800e170:	2300      	movs	r3, #0
 800e172:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800e174:	2300      	movs	r3, #0
 800e176:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800e178:	2300      	movs	r3, #0
 800e17a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800e17c:	2300      	movs	r3, #0
 800e17e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800e180:	2300      	movs	r3, #0
 800e182:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800e184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e188:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800e18a:	2300      	movs	r3, #0
 800e18c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800e18e:	2300      	movs	r3, #0
 800e190:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800e192:	2300      	movs	r3, #0
 800e194:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800e196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e19a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800e19c:	2300      	movs	r3, #0
 800e19e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800e1a8:	1d3b      	adds	r3, r7, #4
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	4809      	ldr	r0, [pc, #36]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e1ae:	f007 fbd5 	bl	801595c <HAL_TIMEx_ConfigBreakDeadTime>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	bf14      	ite	ne
 800e1b8:	2301      	movne	r3, #1
 800e1ba:	2300      	moveq	r3, #0
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <_ZL12MX_TIM1_Initv+0x202>
  {
    Error_Handler();
 800e1c2:	f000 fb1f 	bl	800e804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800e1c6:	4803      	ldr	r0, [pc, #12]	; (800e1d4 <_ZL12MX_TIM1_Initv+0x210>)
 800e1c8:	f000 ff52 	bl	800f070 <HAL_TIM_MspPostInit>

}
 800e1cc:	bf00      	nop
 800e1ce:	3780      	adds	r7, #128	; 0x80
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	2000053c 	.word	0x2000053c
 800e1d8:	40012c00 	.word	0x40012c00

0800e1dc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b08c      	sub	sp, #48	; 0x30
 800e1e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800e1e2:	f107 030c 	add.w	r3, r7, #12
 800e1e6:	2224      	movs	r2, #36	; 0x24
 800e1e8:	2100      	movs	r1, #0
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f00e fed3 	bl	801cf96 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e1f0:	463b      	mov	r3, r7
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	601a      	str	r2, [r3, #0]
 800e1f6:	605a      	str	r2, [r3, #4]
 800e1f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e1fa:	4b26      	ldr	r3, [pc, #152]	; (800e294 <_ZL12MX_TIM3_Initv+0xb8>)
 800e1fc:	4a26      	ldr	r2, [pc, #152]	; (800e298 <_ZL12MX_TIM3_Initv+0xbc>)
 800e1fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800e200:	4b24      	ldr	r3, [pc, #144]	; (800e294 <_ZL12MX_TIM3_Initv+0xb8>)
 800e202:	2200      	movs	r2, #0
 800e204:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e206:	4b23      	ldr	r3, [pc, #140]	; (800e294 <_ZL12MX_TIM3_Initv+0xb8>)
 800e208:	2200      	movs	r2, #0
 800e20a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800e20c:	4b21      	ldr	r3, [pc, #132]	; (800e294 <_ZL12MX_TIM3_Initv+0xb8>)
 800e20e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e212:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e214:	4b1f      	ldr	r3, [pc, #124]	; (800e294 <_ZL12MX_TIM3_Initv+0xb8>)
 800e216:	2200      	movs	r2, #0
 800e218:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e21a:	4b1e      	ldr	r3, [pc, #120]	; (800e294 <_ZL12MX_TIM3_Initv+0xb8>)
 800e21c:	2200      	movs	r2, #0
 800e21e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800e220:	2303      	movs	r3, #3
 800e222:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800e224:	2300      	movs	r3, #0
 800e226:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800e228:	2301      	movs	r3, #1
 800e22a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800e22c:	2300      	movs	r3, #0
 800e22e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800e230:	2300      	movs	r3, #0
 800e232:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800e234:	2300      	movs	r3, #0
 800e236:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800e238:	2301      	movs	r3, #1
 800e23a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800e23c:	2300      	movs	r3, #0
 800e23e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800e240:	2300      	movs	r3, #0
 800e242:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800e244:	f107 030c 	add.w	r3, r7, #12
 800e248:	4619      	mov	r1, r3
 800e24a:	4812      	ldr	r0, [pc, #72]	; (800e294 <_ZL12MX_TIM3_Initv+0xb8>)
 800e24c:	f006 f941 	bl	80144d2 <HAL_TIM_Encoder_Init>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	bf14      	ite	ne
 800e256:	2301      	movne	r3, #1
 800e258:	2300      	moveq	r3, #0
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d001      	beq.n	800e264 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 800e260:	f000 fad0 	bl	800e804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e264:	2300      	movs	r3, #0
 800e266:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e268:	2300      	movs	r3, #0
 800e26a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e26c:	463b      	mov	r3, r7
 800e26e:	4619      	mov	r1, r3
 800e270:	4808      	ldr	r0, [pc, #32]	; (800e294 <_ZL12MX_TIM3_Initv+0xb8>)
 800e272:	f007 faeb 	bl	801584c <HAL_TIMEx_MasterConfigSynchronization>
 800e276:	4603      	mov	r3, r0
 800e278:	2b00      	cmp	r3, #0
 800e27a:	bf14      	ite	ne
 800e27c:	2301      	movne	r3, #1
 800e27e:	2300      	moveq	r3, #0
 800e280:	b2db      	uxtb	r3, r3
 800e282:	2b00      	cmp	r3, #0
 800e284:	d001      	beq.n	800e28a <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 800e286:	f000 fabd 	bl	800e804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800e28a:	bf00      	nop
 800e28c:	3730      	adds	r7, #48	; 0x30
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop
 800e294:	20000588 	.word	0x20000588
 800e298:	40000400 	.word	0x40000400

0800e29c <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b08e      	sub	sp, #56	; 0x38
 800e2a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e2a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	601a      	str	r2, [r3, #0]
 800e2aa:	605a      	str	r2, [r3, #4]
 800e2ac:	609a      	str	r2, [r3, #8]
 800e2ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e2b0:	f107 031c 	add.w	r3, r7, #28
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	601a      	str	r2, [r3, #0]
 800e2b8:	605a      	str	r2, [r3, #4]
 800e2ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e2bc:	463b      	mov	r3, r7
 800e2be:	2200      	movs	r2, #0
 800e2c0:	601a      	str	r2, [r3, #0]
 800e2c2:	605a      	str	r2, [r3, #4]
 800e2c4:	609a      	str	r2, [r3, #8]
 800e2c6:	60da      	str	r2, [r3, #12]
 800e2c8:	611a      	str	r2, [r3, #16]
 800e2ca:	615a      	str	r2, [r3, #20]
 800e2cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800e2ce:	4b41      	ldr	r3, [pc, #260]	; (800e3d4 <_ZL12MX_TIM5_Initv+0x138>)
 800e2d0:	4a41      	ldr	r2, [pc, #260]	; (800e3d8 <_ZL12MX_TIM5_Initv+0x13c>)
 800e2d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800e2d4:	4b3f      	ldr	r3, [pc, #252]	; (800e3d4 <_ZL12MX_TIM5_Initv+0x138>)
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800e2da:	4b3e      	ldr	r3, [pc, #248]	; (800e3d4 <_ZL12MX_TIM5_Initv+0x138>)
 800e2dc:	2220      	movs	r2, #32
 800e2de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1834;
 800e2e0:	4b3c      	ldr	r3, [pc, #240]	; (800e3d4 <_ZL12MX_TIM5_Initv+0x138>)
 800e2e2:	f240 722a 	movw	r2, #1834	; 0x72a
 800e2e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e2e8:	4b3a      	ldr	r3, [pc, #232]	; (800e3d4 <_ZL12MX_TIM5_Initv+0x138>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800e2ee:	4b39      	ldr	r3, [pc, #228]	; (800e3d4 <_ZL12MX_TIM5_Initv+0x138>)
 800e2f0:	2280      	movs	r2, #128	; 0x80
 800e2f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800e2f4:	4837      	ldr	r0, [pc, #220]	; (800e3d4 <_ZL12MX_TIM5_Initv+0x138>)
 800e2f6:	f005 fe5c 	bl	8013fb2 <HAL_TIM_Base_Init>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	bf14      	ite	ne
 800e300:	2301      	movne	r3, #1
 800e302:	2300      	moveq	r3, #0
 800e304:	b2db      	uxtb	r3, r3
 800e306:	2b00      	cmp	r3, #0
 800e308:	d001      	beq.n	800e30e <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 800e30a:	f000 fa7b 	bl	800e804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e30e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e312:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800e314:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e318:	4619      	mov	r1, r3
 800e31a:	482e      	ldr	r0, [pc, #184]	; (800e3d4 <_ZL12MX_TIM5_Initv+0x138>)
 800e31c:	f006 fc4e 	bl	8014bbc <HAL_TIM_ConfigClockSource>
 800e320:	4603      	mov	r3, r0
 800e322:	2b00      	cmp	r3, #0
 800e324:	bf14      	ite	ne
 800e326:	2301      	movne	r3, #1
 800e328:	2300      	moveq	r3, #0
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d001      	beq.n	800e334 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 800e330:	f000 fa68 	bl	800e804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800e334:	4827      	ldr	r0, [pc, #156]	; (800e3d4 <_ZL12MX_TIM5_Initv+0x138>)
 800e336:	f005 ff03 	bl	8014140 <HAL_TIM_PWM_Init>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	bf14      	ite	ne
 800e340:	2301      	movne	r3, #1
 800e342:	2300      	moveq	r3, #0
 800e344:	b2db      	uxtb	r3, r3
 800e346:	2b00      	cmp	r3, #0
 800e348:	d001      	beq.n	800e34e <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 800e34a:	f000 fa5b 	bl	800e804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e34e:	2300      	movs	r3, #0
 800e350:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e352:	2300      	movs	r3, #0
 800e354:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800e356:	f107 031c 	add.w	r3, r7, #28
 800e35a:	4619      	mov	r1, r3
 800e35c:	481d      	ldr	r0, [pc, #116]	; (800e3d4 <_ZL12MX_TIM5_Initv+0x138>)
 800e35e:	f007 fa75 	bl	801584c <HAL_TIMEx_MasterConfigSynchronization>
 800e362:	4603      	mov	r3, r0
 800e364:	2b00      	cmp	r3, #0
 800e366:	bf14      	ite	ne
 800e368:	2301      	movne	r3, #1
 800e36a:	2300      	moveq	r3, #0
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d001      	beq.n	800e376 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 800e372:	f000 fa47 	bl	800e804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e376:	2360      	movs	r3, #96	; 0x60
 800e378:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800e37a:	2300      	movs	r3, #0
 800e37c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e37e:	2300      	movs	r3, #0
 800e380:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e382:	2300      	movs	r3, #0
 800e384:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e386:	463b      	mov	r3, r7
 800e388:	2200      	movs	r2, #0
 800e38a:	4619      	mov	r1, r3
 800e38c:	4811      	ldr	r0, [pc, #68]	; (800e3d4 <_ZL12MX_TIM5_Initv+0x138>)
 800e38e:	f006 fb01 	bl	8014994 <HAL_TIM_PWM_ConfigChannel>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	bf14      	ite	ne
 800e398:	2301      	movne	r3, #1
 800e39a:	2300      	moveq	r3, #0
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d001      	beq.n	800e3a6 <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 800e3a2:	f000 fa2f 	bl	800e804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e3a6:	463b      	mov	r3, r7
 800e3a8:	220c      	movs	r2, #12
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	4809      	ldr	r0, [pc, #36]	; (800e3d4 <_ZL12MX_TIM5_Initv+0x138>)
 800e3ae:	f006 faf1 	bl	8014994 <HAL_TIM_PWM_ConfigChannel>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	bf14      	ite	ne
 800e3b8:	2301      	movne	r3, #1
 800e3ba:	2300      	moveq	r3, #0
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d001      	beq.n	800e3c6 <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 800e3c2:	f000 fa1f 	bl	800e804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800e3c6:	4803      	ldr	r0, [pc, #12]	; (800e3d4 <_ZL12MX_TIM5_Initv+0x138>)
 800e3c8:	f000 fe52 	bl	800f070 <HAL_TIM_MspPostInit>

}
 800e3cc:	bf00      	nop
 800e3ce:	3738      	adds	r7, #56	; 0x38
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	200005d4 	.word	0x200005d4
 800e3d8:	40000c00 	.word	0x40000c00

0800e3dc <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b084      	sub	sp, #16
 800e3e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e3e2:	1d3b      	adds	r3, r7, #4
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	601a      	str	r2, [r3, #0]
 800e3e8:	605a      	str	r2, [r3, #4]
 800e3ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800e3ec:	4b19      	ldr	r3, [pc, #100]	; (800e454 <_ZL12MX_TIM6_Initv+0x78>)
 800e3ee:	4a1a      	ldr	r2, [pc, #104]	; (800e458 <_ZL12MX_TIM6_Initv+0x7c>)
 800e3f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 110;
 800e3f2:	4b18      	ldr	r3, [pc, #96]	; (800e454 <_ZL12MX_TIM6_Initv+0x78>)
 800e3f4:	226e      	movs	r2, #110	; 0x6e
 800e3f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e3f8:	4b16      	ldr	r3, [pc, #88]	; (800e454 <_ZL12MX_TIM6_Initv+0x78>)
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800e3fe:	4b15      	ldr	r3, [pc, #84]	; (800e454 <_ZL12MX_TIM6_Initv+0x78>)
 800e400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e404:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e406:	4b13      	ldr	r3, [pc, #76]	; (800e454 <_ZL12MX_TIM6_Initv+0x78>)
 800e408:	2200      	movs	r2, #0
 800e40a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e40c:	4811      	ldr	r0, [pc, #68]	; (800e454 <_ZL12MX_TIM6_Initv+0x78>)
 800e40e:	f005 fdd0 	bl	8013fb2 <HAL_TIM_Base_Init>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	bf14      	ite	ne
 800e418:	2301      	movne	r3, #1
 800e41a:	2300      	moveq	r3, #0
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800e422:	f000 f9ef 	bl	800e804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e426:	2300      	movs	r3, #0
 800e428:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e42a:	2300      	movs	r3, #0
 800e42c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e42e:	1d3b      	adds	r3, r7, #4
 800e430:	4619      	mov	r1, r3
 800e432:	4808      	ldr	r0, [pc, #32]	; (800e454 <_ZL12MX_TIM6_Initv+0x78>)
 800e434:	f007 fa0a 	bl	801584c <HAL_TIMEx_MasterConfigSynchronization>
 800e438:	4603      	mov	r3, r0
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	bf14      	ite	ne
 800e43e:	2301      	movne	r3, #1
 800e440:	2300      	moveq	r3, #0
 800e442:	b2db      	uxtb	r3, r3
 800e444:	2b00      	cmp	r3, #0
 800e446:	d001      	beq.n	800e44c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800e448:	f000 f9dc 	bl	800e804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800e44c:	bf00      	nop
 800e44e:	3710      	adds	r7, #16
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	20000620 	.word	0x20000620
 800e458:	40001000 	.word	0x40001000

0800e45c <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b086      	sub	sp, #24
 800e460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e462:	463b      	mov	r3, r7
 800e464:	2200      	movs	r2, #0
 800e466:	601a      	str	r2, [r3, #0]
 800e468:	605a      	str	r2, [r3, #4]
 800e46a:	609a      	str	r2, [r3, #8]
 800e46c:	60da      	str	r2, [r3, #12]
 800e46e:	611a      	str	r2, [r3, #16]
 800e470:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800e472:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800e476:	f7ff f8f9 	bl	800d66c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800e47a:	2002      	movs	r0, #2
 800e47c:	f7ff f8de 	bl	800d63c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800e480:	2001      	movs	r0, #1
 800e482:	f7ff f8db 	bl	800d63c <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800e486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e48a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800e48c:	2303      	movs	r3, #3
 800e48e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e490:	2300      	movs	r3, #0
 800e492:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e494:	463b      	mov	r3, r7
 800e496:	4619      	mov	r1, r3
 800e498:	4809      	ldr	r0, [pc, #36]	; (800e4c0 <_ZL13MX_UCPD1_Initv+0x64>)
 800e49a:	f009 fd04 	bl	8017ea6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800e49e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800e4a4:	2303      	movs	r3, #3
 800e4a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e4ac:	463b      	mov	r3, r7
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	4804      	ldr	r0, [pc, #16]	; (800e4c4 <_ZL13MX_UCPD1_Initv+0x68>)
 800e4b2:	f009 fcf8 	bl	8017ea6 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800e4b6:	bf00      	nop
 800e4b8:	3718      	adds	r7, #24
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	42020400 	.word	0x42020400
 800e4c4:	42020000 	.word	0x42020000

0800e4c8 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800e4cc:	4b13      	ldr	r3, [pc, #76]	; (800e51c <_ZL15MX_USB_PCD_Initv+0x54>)
 800e4ce:	4a14      	ldr	r2, [pc, #80]	; (800e520 <_ZL15MX_USB_PCD_Initv+0x58>)
 800e4d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e4d2:	4b12      	ldr	r3, [pc, #72]	; (800e51c <_ZL15MX_USB_PCD_Initv+0x54>)
 800e4d4:	2208      	movs	r2, #8
 800e4d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e4d8:	4b10      	ldr	r3, [pc, #64]	; (800e51c <_ZL15MX_USB_PCD_Initv+0x54>)
 800e4da:	2202      	movs	r2, #2
 800e4dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e4de:	4b0f      	ldr	r3, [pc, #60]	; (800e51c <_ZL15MX_USB_PCD_Initv+0x54>)
 800e4e0:	2202      	movs	r2, #2
 800e4e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e4e4:	4b0d      	ldr	r3, [pc, #52]	; (800e51c <_ZL15MX_USB_PCD_Initv+0x54>)
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e4ea:	4b0c      	ldr	r3, [pc, #48]	; (800e51c <_ZL15MX_USB_PCD_Initv+0x54>)
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e4f0:	4b0a      	ldr	r3, [pc, #40]	; (800e51c <_ZL15MX_USB_PCD_Initv+0x54>)
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e4f6:	4b09      	ldr	r3, [pc, #36]	; (800e51c <_ZL15MX_USB_PCD_Initv+0x54>)
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e4fc:	4807      	ldr	r0, [pc, #28]	; (800e51c <_ZL15MX_USB_PCD_Initv+0x54>)
 800e4fe:	f003 fcc7 	bl	8011e90 <HAL_PCD_Init>
 800e502:	4603      	mov	r3, r0
 800e504:	2b00      	cmp	r3, #0
 800e506:	bf14      	ite	ne
 800e508:	2301      	movne	r3, #1
 800e50a:	2300      	moveq	r3, #0
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d001      	beq.n	800e516 <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 800e512:	f000 f977 	bl	800e804 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800e516:	bf00      	nop
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	bf00      	nop
 800e51c:	2000066c 	.word	0x2000066c
 800e520:	4000d400 	.word	0x4000d400

0800e524 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800e52a:	4b12      	ldr	r3, [pc, #72]	; (800e574 <_ZL11MX_DMA_Initv+0x50>)
 800e52c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e52e:	4a11      	ldr	r2, [pc, #68]	; (800e574 <_ZL11MX_DMA_Initv+0x50>)
 800e530:	f043 0304 	orr.w	r3, r3, #4
 800e534:	6493      	str	r3, [r2, #72]	; 0x48
 800e536:	4b0f      	ldr	r3, [pc, #60]	; (800e574 <_ZL11MX_DMA_Initv+0x50>)
 800e538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e53a:	f003 0304 	and.w	r3, r3, #4
 800e53e:	607b      	str	r3, [r7, #4]
 800e540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800e542:	4b0c      	ldr	r3, [pc, #48]	; (800e574 <_ZL11MX_DMA_Initv+0x50>)
 800e544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e546:	4a0b      	ldr	r2, [pc, #44]	; (800e574 <_ZL11MX_DMA_Initv+0x50>)
 800e548:	f043 0301 	orr.w	r3, r3, #1
 800e54c:	6493      	str	r3, [r2, #72]	; 0x48
 800e54e:	4b09      	ldr	r3, [pc, #36]	; (800e574 <_ZL11MX_DMA_Initv+0x50>)
 800e550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e552:	f003 0301 	and.w	r3, r3, #1
 800e556:	603b      	str	r3, [r7, #0]
 800e558:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800e55a:	2200      	movs	r2, #0
 800e55c:	2105      	movs	r1, #5
 800e55e:	201d      	movs	r0, #29
 800e560:	f002 fdd2 	bl	8011108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800e564:	201d      	movs	r0, #29
 800e566:	f002 fde9 	bl	801113c <HAL_NVIC_EnableIRQ>

}
 800e56a:	bf00      	nop
 800e56c:	3708      	adds	r7, #8
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	40021000 	.word	0x40021000

0800e578 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b08c      	sub	sp, #48	; 0x30
 800e57c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e57e:	f107 031c 	add.w	r3, r7, #28
 800e582:	2200      	movs	r2, #0
 800e584:	601a      	str	r2, [r3, #0]
 800e586:	605a      	str	r2, [r3, #4]
 800e588:	609a      	str	r2, [r3, #8]
 800e58a:	60da      	str	r2, [r3, #12]
 800e58c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800e58e:	4b8b      	ldr	r3, [pc, #556]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e592:	4a8a      	ldr	r2, [pc, #552]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e594:	f043 0310 	orr.w	r3, r3, #16
 800e598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e59a:	4b88      	ldr	r3, [pc, #544]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e59c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e59e:	f003 0310 	and.w	r3, r3, #16
 800e5a2:	61bb      	str	r3, [r7, #24]
 800e5a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e5a6:	4b85      	ldr	r3, [pc, #532]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e5a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5aa:	4a84      	ldr	r2, [pc, #528]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e5ac:	f043 0304 	orr.w	r3, r3, #4
 800e5b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e5b2:	4b82      	ldr	r3, [pc, #520]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e5b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5b6:	f003 0304 	and.w	r3, r3, #4
 800e5ba:	617b      	str	r3, [r7, #20]
 800e5bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800e5be:	4b7f      	ldr	r3, [pc, #508]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e5c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5c2:	4a7e      	ldr	r2, [pc, #504]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e5c4:	f043 0320 	orr.w	r3, r3, #32
 800e5c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e5ca:	4b7c      	ldr	r3, [pc, #496]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e5cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5ce:	f003 0320 	and.w	r3, r3, #32
 800e5d2:	613b      	str	r3, [r7, #16]
 800e5d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5d6:	4b79      	ldr	r3, [pc, #484]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5da:	4a78      	ldr	r2, [pc, #480]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e5dc:	f043 0301 	orr.w	r3, r3, #1
 800e5e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e5e2:	4b76      	ldr	r3, [pc, #472]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e5e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5e6:	f003 0301 	and.w	r3, r3, #1
 800e5ea:	60fb      	str	r3, [r7, #12]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e5ee:	4b73      	ldr	r3, [pc, #460]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e5f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5f2:	4a72      	ldr	r2, [pc, #456]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e5f4:	f043 0302 	orr.w	r3, r3, #2
 800e5f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e5fa:	4b70      	ldr	r3, [pc, #448]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e5fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5fe:	f003 0302 	and.w	r3, r3, #2
 800e602:	60bb      	str	r3, [r7, #8]
 800e604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e606:	4b6d      	ldr	r3, [pc, #436]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e60a:	4a6c      	ldr	r2, [pc, #432]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e60c:	f043 0308 	orr.w	r3, r3, #8
 800e610:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e612:	4b6a      	ldr	r3, [pc, #424]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e616:	f003 0308 	and.w	r3, r3, #8
 800e61a:	607b      	str	r3, [r7, #4]
 800e61c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800e61e:	4b67      	ldr	r3, [pc, #412]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e622:	4a66      	ldr	r2, [pc, #408]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e62a:	4b64      	ldr	r3, [pc, #400]	; (800e7bc <_ZL12MX_GPIO_Initv+0x244>)
 800e62c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e632:	603b      	str	r3, [r7, #0]
 800e634:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800e636:	f003 fda9 	bl	801218c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DRIVE_ENABLE_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 800e63a:	2200      	movs	r2, #0
 800e63c:	f24e 0108 	movw	r1, #57352	; 0xe008
 800e640:	485f      	ldr	r0, [pc, #380]	; (800e7c0 <_ZL12MX_GPIO_Initv+0x248>)
 800e642:	f003 fab7 	bl	8011bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800e646:	2200      	movs	r2, #0
 800e648:	21a4      	movs	r1, #164	; 0xa4
 800e64a:	485e      	ldr	r0, [pc, #376]	; (800e7c4 <_ZL12MX_GPIO_Initv+0x24c>)
 800e64c:	f003 fab2 	bl	8011bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 800e650:	2200      	movs	r2, #0
 800e652:	f64f 7187 	movw	r1, #65415	; 0xff87
 800e656:	485c      	ldr	r0, [pc, #368]	; (800e7c8 <_ZL12MX_GPIO_Initv+0x250>)
 800e658:	f003 faac 	bl	8011bb4 <HAL_GPIO_WritePin>
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |LED_LE_F_Pin|INFRA_LE_F_Pin|LED_OE_F_Pin|INFRA_OE_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800e65c:	2200      	movs	r2, #0
 800e65e:	2180      	movs	r1, #128	; 0x80
 800e660:	485a      	ldr	r0, [pc, #360]	; (800e7cc <_ZL12MX_GPIO_Initv+0x254>)
 800e662:	f003 faa7 	bl	8011bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800e666:	2200      	movs	r2, #0
 800e668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e66c:	4858      	ldr	r0, [pc, #352]	; (800e7d0 <_ZL12MX_GPIO_Initv+0x258>)
 800e66e:	f003 faa1 	bl	8011bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_LE_R_Pin|INFRA_LE_R_Pin|LED_OE_R_Pin|INFRA_OE_R_Pin
 800e672:	2200      	movs	r2, #0
 800e674:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 800e678:	4856      	ldr	r0, [pc, #344]	; (800e7d4 <_ZL12MX_GPIO_Initv+0x25c>)
 800e67a:	f003 fa9b 	bl	8011bb4 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DRIVE_ENABLE_Pin */
  GPIO_InitStruct.Pin = DRIVE_ENABLE_Pin;
 800e67e:	2308      	movs	r3, #8
 800e680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e682:	2301      	movs	r3, #1
 800e684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e686:	2300      	movs	r3, #0
 800e688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e68a:	2303      	movs	r3, #3
 800e68c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800e68e:	f107 031c 	add.w	r3, r7, #28
 800e692:	4619      	mov	r1, r3
 800e694:	484a      	ldr	r0, [pc, #296]	; (800e7c0 <_ZL12MX_GPIO_Initv+0x248>)
 800e696:	f003 f90d 	bl	80118b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FB_Pin REMOTE_GAS_Pin REMOTE_STEER_Pin */
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 800e69a:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800e69e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800e6a8:	f107 031c 	add.w	r3, r7, #28
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	4844      	ldr	r0, [pc, #272]	; (800e7c0 <_ZL12MX_GPIO_Initv+0x248>)
 800e6b0:	f003 f900 	bl	80118b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_CS_Pin UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 800e6b4:	23a4      	movs	r3, #164	; 0xa4
 800e6b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e6c4:	f107 031c 	add.w	r3, r7, #28
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	483e      	ldr	r0, [pc, #248]	; (800e7c4 <_ZL12MX_GPIO_Initv+0x24c>)
 800e6cc:	f003 f8f2 	bl	80118b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin MOT_BATT_L_Pin LV_BATT_L_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 800e6d0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800e6d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800e6e2:	f107 031c 	add.w	r3, r7, #28
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	4835      	ldr	r0, [pc, #212]	; (800e7c0 <_ZL12MX_GPIO_Initv+0x248>)
 800e6ea:	f003 f8e3 	bl	80118b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin ROTARY1_Pin ROTARY2_Pin ROTARY3_Pin
                           ROTARY4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 800e6ee:	f643 6301 	movw	r3, #15873	; 0x3e01
 800e6f2:	61fb      	str	r3, [r7, #28]
                          |ROTARY4_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e6fc:	f107 031c 	add.w	r3, r7, #28
 800e700:	4619      	mov	r1, r3
 800e702:	4835      	ldr	r0, [pc, #212]	; (800e7d8 <_ZL12MX_GPIO_Initv+0x260>)
 800e704:	f003 f8d6 	bl	80118b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800e708:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e70c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e70e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800e712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e714:	2300      	movs	r3, #0
 800e716:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800e718:	f107 031c 	add.w	r3, r7, #28
 800e71c:	4619      	mov	r1, r3
 800e71e:	4829      	ldr	r0, [pc, #164]	; (800e7c4 <_ZL12MX_GPIO_Initv+0x24c>)
 800e720:	f003 f8c8 	bl	80118b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCF1_CS_Pin ADCF2_CS_Pin ADCF3_CS_Pin ADCF4_CS_Pin
                           ADCR1_CS_Pin ADCR2_CS_Pin ADCR3_CS_Pin ADCR4_CS_Pin
                           LED_LE_F_Pin INFRA_LE_F_Pin LED_OE_F_Pin INFRA_OE_F_Pin */
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 800e724:	f64f 7387 	movw	r3, #65415	; 0xff87
 800e728:	61fb      	str	r3, [r7, #28]
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |LED_LE_F_Pin|INFRA_LE_F_Pin|LED_OE_F_Pin|INFRA_OE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e72a:	2301      	movs	r3, #1
 800e72c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e72e:	2300      	movs	r3, #0
 800e730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e732:	2300      	movs	r3, #0
 800e734:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e736:	f107 031c 	add.w	r3, r7, #28
 800e73a:	4619      	mov	r1, r3
 800e73c:	4822      	ldr	r0, [pc, #136]	; (800e7c8 <_ZL12MX_GPIO_Initv+0x250>)
 800e73e:	f003 f8b9 	bl	80118b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin SET_BUTTON_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 800e742:	2370      	movs	r3, #112	; 0x70
 800e744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e746:	2300      	movs	r3, #0
 800e748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e74a:	2300      	movs	r3, #0
 800e74c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e74e:	f107 031c 	add.w	r3, r7, #28
 800e752:	4619      	mov	r1, r3
 800e754:	481f      	ldr	r0, [pc, #124]	; (800e7d4 <_ZL12MX_GPIO_Initv+0x25c>)
 800e756:	f003 f8ad 	bl	80118b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800e75a:	2380      	movs	r3, #128	; 0x80
 800e75c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e75e:	2301      	movs	r3, #1
 800e760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e762:	2300      	movs	r3, #0
 800e764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e766:	2300      	movs	r3, #0
 800e768:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800e76a:	f107 031c 	add.w	r3, r7, #28
 800e76e:	4619      	mov	r1, r3
 800e770:	4816      	ldr	r0, [pc, #88]	; (800e7cc <_ZL12MX_GPIO_Initv+0x254>)
 800e772:	f003 f89f 	bl	80118b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800e776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e77a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e77c:	2301      	movs	r3, #1
 800e77e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e780:	2300      	movs	r3, #0
 800e782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e784:	2300      	movs	r3, #0
 800e786:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800e788:	f107 031c 	add.w	r3, r7, #28
 800e78c:	4619      	mov	r1, r3
 800e78e:	4810      	ldr	r0, [pc, #64]	; (800e7d0 <_ZL12MX_GPIO_Initv+0x258>)
 800e790:	f003 f890 	bl	80118b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_LE_R_Pin INFRA_LE_R_Pin LED_OE_R_Pin INFRA_OE_R_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED_LE_R_Pin|INFRA_LE_R_Pin|LED_OE_R_Pin|INFRA_OE_R_Pin
 800e794:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 800e798:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e79a:	2301      	movs	r3, #1
 800e79c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e7a6:	f107 031c 	add.w	r3, r7, #28
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	4809      	ldr	r0, [pc, #36]	; (800e7d4 <_ZL12MX_GPIO_Initv+0x25c>)
 800e7ae:	f003 f881 	bl	80118b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800e7b2:	bf00      	nop
 800e7b4:	3730      	adds	r7, #48	; 0x30
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	bf00      	nop
 800e7bc:	40021000 	.word	0x40021000
 800e7c0:	42021400 	.word	0x42021400
 800e7c4:	42020400 	.word	0x42020400
 800e7c8:	42020c00 	.word	0x42020c00
 800e7cc:	42020800 	.word	0x42020800
 800e7d0:	42020000 	.word	0x42020000
 800e7d4:	42021800 	.word	0x42021800
 800e7d8:	42021000 	.word	0x42021000

0800e7dc <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 800e7e4:	e7fe      	b.n	800e7e4 <_Z16StartDefaultTaskPv+0x8>

0800e7e6 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e7e6:	b580      	push	{r7, lr}
 800e7e8:	b082      	sub	sp, #8
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7f6:	d101      	bne.n	800e7fc <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800e7f8:	f000 ff6c 	bl	800f6d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800e7fc:	bf00      	nop
 800e7fe:	3708      	adds	r7, #8
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e804:	b480      	push	{r7}
 800e806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800e808:	b672      	cpsid	i
}
 800e80a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800e80c:	e7fe      	b.n	800e80c <Error_Handler+0x8>
	...

0800e810 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e816:	4b11      	ldr	r3, [pc, #68]	; (800e85c <HAL_MspInit+0x4c>)
 800e818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e81a:	4a10      	ldr	r2, [pc, #64]	; (800e85c <HAL_MspInit+0x4c>)
 800e81c:	f043 0301 	orr.w	r3, r3, #1
 800e820:	6613      	str	r3, [r2, #96]	; 0x60
 800e822:	4b0e      	ldr	r3, [pc, #56]	; (800e85c <HAL_MspInit+0x4c>)
 800e824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e826:	f003 0301 	and.w	r3, r3, #1
 800e82a:	607b      	str	r3, [r7, #4]
 800e82c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e82e:	4b0b      	ldr	r3, [pc, #44]	; (800e85c <HAL_MspInit+0x4c>)
 800e830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e832:	4a0a      	ldr	r2, [pc, #40]	; (800e85c <HAL_MspInit+0x4c>)
 800e834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e838:	6593      	str	r3, [r2, #88]	; 0x58
 800e83a:	4b08      	ldr	r3, [pc, #32]	; (800e85c <HAL_MspInit+0x4c>)
 800e83c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e83e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e842:	603b      	str	r3, [r7, #0]
 800e844:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 800e846:	2200      	movs	r2, #0
 800e848:	2107      	movs	r1, #7
 800e84a:	f06f 0001 	mvn.w	r0, #1
 800e84e:	f002 fc5b 	bl	8011108 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e852:	bf00      	nop
 800e854:	3708      	adds	r7, #8
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	40021000 	.word	0x40021000

0800e860 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b08c      	sub	sp, #48	; 0x30
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e868:	f107 031c 	add.w	r3, r7, #28
 800e86c:	2200      	movs	r2, #0
 800e86e:	601a      	str	r2, [r3, #0]
 800e870:	605a      	str	r2, [r3, #4]
 800e872:	609a      	str	r2, [r3, #8]
 800e874:	60da      	str	r2, [r3, #12]
 800e876:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4a4b      	ldr	r2, [pc, #300]	; (800e9ac <HAL_ADC_MspInit+0x14c>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	f040 8090 	bne.w	800e9a4 <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800e884:	4b4a      	ldr	r3, [pc, #296]	; (800e9b0 <HAL_ADC_MspInit+0x150>)
 800e886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e888:	4a49      	ldr	r2, [pc, #292]	; (800e9b0 <HAL_ADC_MspInit+0x150>)
 800e88a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e88e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e890:	4b47      	ldr	r3, [pc, #284]	; (800e9b0 <HAL_ADC_MspInit+0x150>)
 800e892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e898:	61bb      	str	r3, [r7, #24]
 800e89a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e89c:	4b44      	ldr	r3, [pc, #272]	; (800e9b0 <HAL_ADC_MspInit+0x150>)
 800e89e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8a0:	4a43      	ldr	r2, [pc, #268]	; (800e9b0 <HAL_ADC_MspInit+0x150>)
 800e8a2:	f043 0304 	orr.w	r3, r3, #4
 800e8a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e8a8:	4b41      	ldr	r3, [pc, #260]	; (800e9b0 <HAL_ADC_MspInit+0x150>)
 800e8aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8ac:	f003 0304 	and.w	r3, r3, #4
 800e8b0:	617b      	str	r3, [r7, #20]
 800e8b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8b4:	4b3e      	ldr	r3, [pc, #248]	; (800e9b0 <HAL_ADC_MspInit+0x150>)
 800e8b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8b8:	4a3d      	ldr	r2, [pc, #244]	; (800e9b0 <HAL_ADC_MspInit+0x150>)
 800e8ba:	f043 0301 	orr.w	r3, r3, #1
 800e8be:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e8c0:	4b3b      	ldr	r3, [pc, #236]	; (800e9b0 <HAL_ADC_MspInit+0x150>)
 800e8c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8c4:	f003 0301 	and.w	r3, r3, #1
 800e8c8:	613b      	str	r3, [r7, #16]
 800e8ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e8cc:	4b38      	ldr	r3, [pc, #224]	; (800e9b0 <HAL_ADC_MspInit+0x150>)
 800e8ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8d0:	4a37      	ldr	r2, [pc, #220]	; (800e9b0 <HAL_ADC_MspInit+0x150>)
 800e8d2:	f043 0302 	orr.w	r3, r3, #2
 800e8d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e8d8:	4b35      	ldr	r3, [pc, #212]	; (800e9b0 <HAL_ADC_MspInit+0x150>)
 800e8da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8dc:	f003 0302 	and.w	r3, r3, #2
 800e8e0:	60fb      	str	r3, [r7, #12]
 800e8e2:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 800e8e4:	230f      	movs	r3, #15
 800e8e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e8e8:	2303      	movs	r3, #3
 800e8ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e8f0:	f107 031c 	add.w	r3, r7, #28
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	482f      	ldr	r0, [pc, #188]	; (800e9b4 <HAL_ADC_MspInit+0x154>)
 800e8f8:	f002 ffdc 	bl	80118b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 800e8fc:	239c      	movs	r3, #156	; 0x9c
 800e8fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e900:	2303      	movs	r3, #3
 800e902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e904:	2300      	movs	r3, #0
 800e906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e908:	f107 031c 	add.w	r3, r7, #28
 800e90c:	4619      	mov	r1, r3
 800e90e:	482a      	ldr	r0, [pc, #168]	; (800e9b8 <HAL_ADC_MspInit+0x158>)
 800e910:	f002 ffd0 	bl	80118b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHBB0_Pin|DISTANCE4_ADC_Pin;
 800e914:	2303      	movs	r3, #3
 800e916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e918:	2303      	movs	r3, #3
 800e91a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e91c:	2300      	movs	r3, #0
 800e91e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e920:	f107 031c 	add.w	r3, r7, #28
 800e924:	4619      	mov	r1, r3
 800e926:	4825      	ldr	r0, [pc, #148]	; (800e9bc <HAL_ADC_MspInit+0x15c>)
 800e928:	f002 ffc4 	bl	80118b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800e92c:	4b24      	ldr	r3, [pc, #144]	; (800e9c0 <HAL_ADC_MspInit+0x160>)
 800e92e:	4a25      	ldr	r2, [pc, #148]	; (800e9c4 <HAL_ADC_MspInit+0x164>)
 800e930:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800e932:	4b23      	ldr	r3, [pc, #140]	; (800e9c0 <HAL_ADC_MspInit+0x160>)
 800e934:	2205      	movs	r2, #5
 800e936:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e938:	4b21      	ldr	r3, [pc, #132]	; (800e9c0 <HAL_ADC_MspInit+0x160>)
 800e93a:	2200      	movs	r2, #0
 800e93c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e93e:	4b20      	ldr	r3, [pc, #128]	; (800e9c0 <HAL_ADC_MspInit+0x160>)
 800e940:	2200      	movs	r2, #0
 800e942:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800e944:	4b1e      	ldr	r3, [pc, #120]	; (800e9c0 <HAL_ADC_MspInit+0x160>)
 800e946:	2280      	movs	r2, #128	; 0x80
 800e948:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e94a:	4b1d      	ldr	r3, [pc, #116]	; (800e9c0 <HAL_ADC_MspInit+0x160>)
 800e94c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e950:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e952:	4b1b      	ldr	r3, [pc, #108]	; (800e9c0 <HAL_ADC_MspInit+0x160>)
 800e954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e958:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800e95a:	4b19      	ldr	r3, [pc, #100]	; (800e9c0 <HAL_ADC_MspInit+0x160>)
 800e95c:	2200      	movs	r2, #0
 800e95e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800e960:	4b17      	ldr	r3, [pc, #92]	; (800e9c0 <HAL_ADC_MspInit+0x160>)
 800e962:	2200      	movs	r2, #0
 800e964:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800e966:	4816      	ldr	r0, [pc, #88]	; (800e9c0 <HAL_ADC_MspInit+0x160>)
 800e968:	f002 fbf6 	bl	8011158 <HAL_DMA_Init>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d001      	beq.n	800e976 <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 800e972:	f7ff ff47 	bl	800e804 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800e976:	2110      	movs	r1, #16
 800e978:	4811      	ldr	r0, [pc, #68]	; (800e9c0 <HAL_ADC_MspInit+0x160>)
 800e97a:	f002 fecb 	bl	8011714 <HAL_DMA_ConfigChannelAttributes>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	d001      	beq.n	800e988 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 800e984:	f7ff ff3e 	bl	800e804 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	4a0d      	ldr	r2, [pc, #52]	; (800e9c0 <HAL_ADC_MspInit+0x160>)
 800e98c:	651a      	str	r2, [r3, #80]	; 0x50
 800e98e:	4a0c      	ldr	r2, [pc, #48]	; (800e9c0 <HAL_ADC_MspInit+0x160>)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800e994:	2200      	movs	r2, #0
 800e996:	2105      	movs	r1, #5
 800e998:	2025      	movs	r0, #37	; 0x25
 800e99a:	f002 fbb5 	bl	8011108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800e99e:	2025      	movs	r0, #37	; 0x25
 800e9a0:	f002 fbcc 	bl	801113c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e9a4:	bf00      	nop
 800e9a6:	3730      	adds	r7, #48	; 0x30
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	42028000 	.word	0x42028000
 800e9b0:	40021000 	.word	0x40021000
 800e9b4:	42020800 	.word	0x42020800
 800e9b8:	42020000 	.word	0x42020000
 800e9bc:	42020400 	.word	0x42020400
 800e9c0:	20000170 	.word	0x20000170
 800e9c4:	40020008 	.word	0x40020008

0800e9c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b0ae      	sub	sp, #184	; 0xb8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e9d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	601a      	str	r2, [r3, #0]
 800e9d8:	605a      	str	r2, [r3, #4]
 800e9da:	609a      	str	r2, [r3, #8]
 800e9dc:	60da      	str	r2, [r3, #12]
 800e9de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e9e0:	f107 0310 	add.w	r3, r7, #16
 800e9e4:	2294      	movs	r2, #148	; 0x94
 800e9e6:	2100      	movs	r1, #0
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f00e fad4 	bl	801cf96 <memset>
  if(hi2c->Instance==I2C1)
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	4a21      	ldr	r2, [pc, #132]	; (800ea78 <HAL_I2C_MspInit+0xb0>)
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d13b      	bne.n	800ea70 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800e9f8:	2340      	movs	r3, #64	; 0x40
 800e9fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ea00:	f107 0310 	add.w	r3, r7, #16
 800ea04:	4618      	mov	r0, r3
 800ea06:	f004 fbe1 	bl	80131cc <HAL_RCCEx_PeriphCLKConfig>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d001      	beq.n	800ea14 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800ea10:	f7ff fef8 	bl	800e804 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ea14:	4b19      	ldr	r3, [pc, #100]	; (800ea7c <HAL_I2C_MspInit+0xb4>)
 800ea16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea18:	4a18      	ldr	r2, [pc, #96]	; (800ea7c <HAL_I2C_MspInit+0xb4>)
 800ea1a:	f043 0302 	orr.w	r3, r3, #2
 800ea1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ea20:	4b16      	ldr	r3, [pc, #88]	; (800ea7c <HAL_I2C_MspInit+0xb4>)
 800ea22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea24:	f003 0302 	and.w	r3, r3, #2
 800ea28:	60fb      	str	r3, [r7, #12]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ea2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ea30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ea34:	2312      	movs	r3, #18
 800ea36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea40:	2300      	movs	r3, #0
 800ea42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ea46:	2304      	movs	r3, #4
 800ea48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ea4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ea50:	4619      	mov	r1, r3
 800ea52:	480b      	ldr	r0, [pc, #44]	; (800ea80 <HAL_I2C_MspInit+0xb8>)
 800ea54:	f002 ff2e 	bl	80118b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ea58:	4b08      	ldr	r3, [pc, #32]	; (800ea7c <HAL_I2C_MspInit+0xb4>)
 800ea5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea5c:	4a07      	ldr	r2, [pc, #28]	; (800ea7c <HAL_I2C_MspInit+0xb4>)
 800ea5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ea62:	6593      	str	r3, [r2, #88]	; 0x58
 800ea64:	4b05      	ldr	r3, [pc, #20]	; (800ea7c <HAL_I2C_MspInit+0xb4>)
 800ea66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ea6c:	60bb      	str	r3, [r7, #8]
 800ea6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800ea70:	bf00      	nop
 800ea72:	37b8      	adds	r7, #184	; 0xb8
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	40005400 	.word	0x40005400
 800ea7c:	40021000 	.word	0x40021000
 800ea80:	42020400 	.word	0x42020400

0800ea84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b0b2      	sub	sp, #200	; 0xc8
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea8c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800ea90:	2200      	movs	r2, #0
 800ea92:	601a      	str	r2, [r3, #0]
 800ea94:	605a      	str	r2, [r3, #4]
 800ea96:	609a      	str	r2, [r3, #8]
 800ea98:	60da      	str	r2, [r3, #12]
 800ea9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ea9c:	f107 0320 	add.w	r3, r7, #32
 800eaa0:	2294      	movs	r2, #148	; 0x94
 800eaa2:	2100      	movs	r1, #0
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f00e fa76 	bl	801cf96 <memset>
  if(huart->Instance==LPUART1)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a67      	ldr	r2, [pc, #412]	; (800ec4c <HAL_UART_MspInit+0x1c8>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d13e      	bne.n	800eb32 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800eab4:	2320      	movs	r3, #32
 800eab6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800eab8:	2300      	movs	r3, #0
 800eaba:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800eabc:	f107 0320 	add.w	r3, r7, #32
 800eac0:	4618      	mov	r0, r3
 800eac2:	f004 fb83 	bl	80131cc <HAL_RCCEx_PeriphCLKConfig>
 800eac6:	4603      	mov	r3, r0
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d001      	beq.n	800ead0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800eacc:	f7ff fe9a 	bl	800e804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800ead0:	4b5f      	ldr	r3, [pc, #380]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800ead2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ead4:	4a5e      	ldr	r2, [pc, #376]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800ead6:	f043 0301 	orr.w	r3, r3, #1
 800eada:	65d3      	str	r3, [r2, #92]	; 0x5c
 800eadc:	4b5c      	ldr	r3, [pc, #368]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800eade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eae0:	f003 0301 	and.w	r3, r3, #1
 800eae4:	61fb      	str	r3, [r7, #28]
 800eae6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800eae8:	4b59      	ldr	r3, [pc, #356]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800eaea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eaec:	4a58      	ldr	r2, [pc, #352]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800eaee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800eaf4:	4b56      	ldr	r3, [pc, #344]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800eaf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eaf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eafc:	61bb      	str	r3, [r7, #24]
 800eafe:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 800eb00:	f003 fb44 	bl	801218c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 800eb04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800eb08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb0c:	2302      	movs	r3, #2
 800eb0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb12:	2300      	movs	r3, #0
 800eb14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800eb1e:	2308      	movs	r3, #8
 800eb20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800eb24:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800eb28:	4619      	mov	r1, r3
 800eb2a:	484a      	ldr	r0, [pc, #296]	; (800ec54 <HAL_UART_MspInit+0x1d0>)
 800eb2c:	f002 fec2 	bl	80118b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800eb30:	e088      	b.n	800ec44 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	4a48      	ldr	r2, [pc, #288]	; (800ec58 <HAL_UART_MspInit+0x1d4>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d143      	bne.n	800ebc4 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800eb3c:	2308      	movs	r3, #8
 800eb3e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800eb40:	2300      	movs	r3, #0
 800eb42:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800eb44:	f107 0320 	add.w	r3, r7, #32
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f004 fb3f 	bl	80131cc <HAL_RCCEx_PeriphCLKConfig>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d001      	beq.n	800eb58 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800eb54:	f7ff fe56 	bl	800e804 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 800eb58:	4b3d      	ldr	r3, [pc, #244]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800eb5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb5c:	4a3c      	ldr	r2, [pc, #240]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800eb5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb62:	6593      	str	r3, [r2, #88]	; 0x58
 800eb64:	4b3a      	ldr	r3, [pc, #232]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800eb66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800eb6c:	617b      	str	r3, [r7, #20]
 800eb6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb70:	4b37      	ldr	r3, [pc, #220]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800eb72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb74:	4a36      	ldr	r2, [pc, #216]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800eb76:	f043 0301 	orr.w	r3, r3, #1
 800eb7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800eb7c:	4b34      	ldr	r3, [pc, #208]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800eb7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb80:	f003 0301 	and.w	r3, r3, #1
 800eb84:	613b      	str	r3, [r7, #16]
 800eb86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800eb88:	2303      	movs	r3, #3
 800eb8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb8e:	2302      	movs	r3, #2
 800eb90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb94:	2300      	movs	r3, #0
 800eb96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800eba0:	2308      	movs	r3, #8
 800eba2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eba6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800ebaa:	4619      	mov	r1, r3
 800ebac:	482b      	ldr	r0, [pc, #172]	; (800ec5c <HAL_UART_MspInit+0x1d8>)
 800ebae:	f002 fe81 	bl	80118b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	2105      	movs	r1, #5
 800ebb6:	2040      	movs	r0, #64	; 0x40
 800ebb8:	f002 faa6 	bl	8011108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800ebbc:	2040      	movs	r0, #64	; 0x40
 800ebbe:	f002 fabd 	bl	801113c <HAL_NVIC_EnableIRQ>
}
 800ebc2:	e03f      	b.n	800ec44 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4a25      	ldr	r2, [pc, #148]	; (800ec60 <HAL_UART_MspInit+0x1dc>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d13a      	bne.n	800ec44 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800ebce:	2302      	movs	r3, #2
 800ebd0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ebd6:	f107 0320 	add.w	r3, r7, #32
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f004 faf6 	bl	80131cc <HAL_RCCEx_PeriphCLKConfig>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d001      	beq.n	800ebea <HAL_UART_MspInit+0x166>
      Error_Handler();
 800ebe6:	f7ff fe0d 	bl	800e804 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800ebea:	4b19      	ldr	r3, [pc, #100]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800ebec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebee:	4a18      	ldr	r2, [pc, #96]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800ebf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ebf4:	6593      	str	r3, [r2, #88]	; 0x58
 800ebf6:	4b16      	ldr	r3, [pc, #88]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800ebf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ebfe:	60fb      	str	r3, [r7, #12]
 800ec00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ec02:	4b13      	ldr	r3, [pc, #76]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800ec04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec06:	4a12      	ldr	r2, [pc, #72]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800ec08:	f043 0308 	orr.w	r3, r3, #8
 800ec0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ec0e:	4b10      	ldr	r3, [pc, #64]	; (800ec50 <HAL_UART_MspInit+0x1cc>)
 800ec10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec12:	f003 0308 	and.w	r3, r3, #8
 800ec16:	60bb      	str	r3, [r7, #8]
 800ec18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 800ec1a:	2360      	movs	r3, #96	; 0x60
 800ec1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec20:	2302      	movs	r3, #2
 800ec22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec26:	2300      	movs	r3, #0
 800ec28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ec32:	2307      	movs	r3, #7
 800ec34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ec38:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	4809      	ldr	r0, [pc, #36]	; (800ec64 <HAL_UART_MspInit+0x1e0>)
 800ec40:	f002 fe38 	bl	80118b4 <HAL_GPIO_Init>
}
 800ec44:	bf00      	nop
 800ec46:	37c8      	adds	r7, #200	; 0xc8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	40008000 	.word	0x40008000
 800ec50:	40021000 	.word	0x40021000
 800ec54:	42021800 	.word	0x42021800
 800ec58:	40004c00 	.word	0x40004c00
 800ec5c:	42020000 	.word	0x42020000
 800ec60:	40004400 	.word	0x40004400
 800ec64:	42020c00 	.word	0x42020c00

0800ec68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b0a8      	sub	sp, #160	; 0xa0
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ec70:	f107 030c 	add.w	r3, r7, #12
 800ec74:	2294      	movs	r2, #148	; 0x94
 800ec76:	2100      	movs	r1, #0
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f00e f98c 	bl	801cf96 <memset>
  if(hrtc->Instance==RTC)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	4a16      	ldr	r2, [pc, #88]	; (800ecdc <HAL_RTC_MspInit+0x74>)
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d124      	bne.n	800ecd2 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800ec88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ec8c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800ec8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ec96:	f107 030c 	add.w	r3, r7, #12
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f004 fa96 	bl	80131cc <HAL_RCCEx_PeriphCLKConfig>
 800eca0:	4603      	mov	r3, r0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d001      	beq.n	800ecaa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800eca6:	f7ff fdad 	bl	800e804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ecaa:	4b0d      	ldr	r3, [pc, #52]	; (800ece0 <HAL_RTC_MspInit+0x78>)
 800ecac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecb0:	4a0b      	ldr	r2, [pc, #44]	; (800ece0 <HAL_RTC_MspInit+0x78>)
 800ecb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ecb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800ecba:	4b09      	ldr	r3, [pc, #36]	; (800ece0 <HAL_RTC_MspInit+0x78>)
 800ecbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecbe:	4a08      	ldr	r2, [pc, #32]	; (800ece0 <HAL_RTC_MspInit+0x78>)
 800ecc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ecc4:	6593      	str	r3, [r2, #88]	; 0x58
 800ecc6:	4b06      	ldr	r3, [pc, #24]	; (800ece0 <HAL_RTC_MspInit+0x78>)
 800ecc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ecce:	60bb      	str	r3, [r7, #8]
 800ecd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800ecd2:	bf00      	nop
 800ecd4:	37a0      	adds	r7, #160	; 0xa0
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	40002800 	.word	0x40002800
 800ece0:	40021000 	.word	0x40021000

0800ece4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b090      	sub	sp, #64	; 0x40
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ecec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	601a      	str	r2, [r3, #0]
 800ecf4:	605a      	str	r2, [r3, #4]
 800ecf6:	609a      	str	r2, [r3, #8]
 800ecf8:	60da      	str	r2, [r3, #12]
 800ecfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4a62      	ldr	r2, [pc, #392]	; (800ee8c <HAL_SPI_MspInit+0x1a8>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d145      	bne.n	800ed92 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ed06:	4b62      	ldr	r3, [pc, #392]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800ed08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed0a:	4a61      	ldr	r2, [pc, #388]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800ed0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ed10:	6613      	str	r3, [r2, #96]	; 0x60
 800ed12:	4b5f      	ldr	r3, [pc, #380]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800ed14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ed1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed1c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed1e:	4b5c      	ldr	r3, [pc, #368]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800ed20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed22:	4a5b      	ldr	r2, [pc, #364]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800ed24:	f043 0301 	orr.w	r3, r3, #1
 800ed28:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ed2a:	4b59      	ldr	r3, [pc, #356]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800ed2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed2e:	f003 0301 	and.w	r3, r3, #1
 800ed32:	627b      	str	r3, [r7, #36]	; 0x24
 800ed34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800ed36:	4b56      	ldr	r3, [pc, #344]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800ed38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed3a:	4a55      	ldr	r2, [pc, #340]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800ed3c:	f043 0310 	orr.w	r3, r3, #16
 800ed40:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ed42:	4b53      	ldr	r3, [pc, #332]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800ed44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed46:	f003 0310 	and.w	r3, r3, #16
 800ed4a:	623b      	str	r3, [r7, #32]
 800ed4c:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 800ed4e:	2360      	movs	r3, #96	; 0x60
 800ed50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed52:	2302      	movs	r3, #2
 800ed54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed56:	2300      	movs	r3, #0
 800ed58:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ed5e:	2305      	movs	r3, #5
 800ed60:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ed66:	4619      	mov	r1, r3
 800ed68:	484a      	ldr	r0, [pc, #296]	; (800ee94 <HAL_SPI_MspInit+0x1b0>)
 800ed6a:	f002 fda3 	bl	80118b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 800ed6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed74:	2302      	movs	r3, #2
 800ed76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ed80:	2305      	movs	r3, #5
 800ed82:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 800ed84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ed88:	4619      	mov	r1, r3
 800ed8a:	4843      	ldr	r0, [pc, #268]	; (800ee98 <HAL_SPI_MspInit+0x1b4>)
 800ed8c:	f002 fd92 	bl	80118b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800ed90:	e078      	b.n	800ee84 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	4a41      	ldr	r2, [pc, #260]	; (800ee9c <HAL_SPI_MspInit+0x1b8>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d145      	bne.n	800ee28 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ed9c:	4b3c      	ldr	r3, [pc, #240]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800ed9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eda0:	4a3b      	ldr	r2, [pc, #236]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800eda2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eda6:	6593      	str	r3, [r2, #88]	; 0x58
 800eda8:	4b39      	ldr	r3, [pc, #228]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800edaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800edb0:	61fb      	str	r3, [r7, #28]
 800edb2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800edb4:	4b36      	ldr	r3, [pc, #216]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800edb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edb8:	4a35      	ldr	r2, [pc, #212]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800edba:	f043 0302 	orr.w	r3, r3, #2
 800edbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800edc0:	4b33      	ldr	r3, [pc, #204]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800edc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edc4:	f003 0302 	and.w	r3, r3, #2
 800edc8:	61bb      	str	r3, [r7, #24]
 800edca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800edcc:	4b30      	ldr	r3, [pc, #192]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800edce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edd0:	4a2f      	ldr	r2, [pc, #188]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800edd2:	f043 0308 	orr.w	r3, r3, #8
 800edd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800edd8:	4b2d      	ldr	r3, [pc, #180]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800edda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eddc:	f003 0308 	and.w	r3, r3, #8
 800ede0:	617b      	str	r3, [r7, #20]
 800ede2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800ede4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ede8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edea:	2302      	movs	r3, #2
 800edec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edee:	2300      	movs	r3, #0
 800edf0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800edf2:	2300      	movs	r3, #0
 800edf4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800edf6:	2305      	movs	r3, #5
 800edf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800edfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800edfe:	4619      	mov	r1, r3
 800ee00:	4827      	ldr	r0, [pc, #156]	; (800eea0 <HAL_SPI_MspInit+0x1bc>)
 800ee02:	f002 fd57 	bl	80118b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800ee06:	2318      	movs	r3, #24
 800ee08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee0a:	2302      	movs	r3, #2
 800ee0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee12:	2300      	movs	r3, #0
 800ee14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ee16:	2305      	movs	r3, #5
 800ee18:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ee1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ee1e:	4619      	mov	r1, r3
 800ee20:	4820      	ldr	r0, [pc, #128]	; (800eea4 <HAL_SPI_MspInit+0x1c0>)
 800ee22:	f002 fd47 	bl	80118b4 <HAL_GPIO_Init>
}
 800ee26:	e02d      	b.n	800ee84 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a1e      	ldr	r2, [pc, #120]	; (800eea8 <HAL_SPI_MspInit+0x1c4>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d128      	bne.n	800ee84 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800ee32:	4b17      	ldr	r3, [pc, #92]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800ee34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee36:	4a16      	ldr	r2, [pc, #88]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800ee38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee3c:	6593      	str	r3, [r2, #88]	; 0x58
 800ee3e:	4b14      	ldr	r3, [pc, #80]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800ee40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ee46:	613b      	str	r3, [r7, #16]
 800ee48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ee4a:	4b11      	ldr	r3, [pc, #68]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800ee4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee4e:	4a10      	ldr	r2, [pc, #64]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800ee50:	f043 0304 	orr.w	r3, r3, #4
 800ee54:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ee56:	4b0e      	ldr	r3, [pc, #56]	; (800ee90 <HAL_SPI_MspInit+0x1ac>)
 800ee58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee5a:	f003 0304 	and.w	r3, r3, #4
 800ee5e:	60fb      	str	r3, [r7, #12]
 800ee60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800ee62:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ee66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee68:	2302      	movs	r3, #2
 800ee6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee70:	2300      	movs	r3, #0
 800ee72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800ee74:	2306      	movs	r3, #6
 800ee76:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ee78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	480b      	ldr	r0, [pc, #44]	; (800eeac <HAL_SPI_MspInit+0x1c8>)
 800ee80:	f002 fd18 	bl	80118b4 <HAL_GPIO_Init>
}
 800ee84:	bf00      	nop
 800ee86:	3740      	adds	r7, #64	; 0x40
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}
 800ee8c:	40013000 	.word	0x40013000
 800ee90:	40021000 	.word	0x40021000
 800ee94:	42020000 	.word	0x42020000
 800ee98:	42021000 	.word	0x42021000
 800ee9c:	40003800 	.word	0x40003800
 800eea0:	42020400 	.word	0x42020400
 800eea4:	42020c00 	.word	0x42020c00
 800eea8:	40003c00 	.word	0x40003c00
 800eeac:	42020800 	.word	0x42020800

0800eeb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b08c      	sub	sp, #48	; 0x30
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eeb8:	f107 031c 	add.w	r3, r7, #28
 800eebc:	2200      	movs	r2, #0
 800eebe:	601a      	str	r2, [r3, #0]
 800eec0:	605a      	str	r2, [r3, #4]
 800eec2:	609a      	str	r2, [r3, #8]
 800eec4:	60da      	str	r2, [r3, #12]
 800eec6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	4a3c      	ldr	r2, [pc, #240]	; (800efc0 <HAL_TIM_Base_MspInit+0x110>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	d146      	bne.n	800ef60 <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800eed2:	4b3c      	ldr	r3, [pc, #240]	; (800efc4 <HAL_TIM_Base_MspInit+0x114>)
 800eed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eed6:	4a3b      	ldr	r2, [pc, #236]	; (800efc4 <HAL_TIM_Base_MspInit+0x114>)
 800eed8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800eedc:	6613      	str	r3, [r2, #96]	; 0x60
 800eede:	4b39      	ldr	r3, [pc, #228]	; (800efc4 <HAL_TIM_Base_MspInit+0x114>)
 800eee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eee6:	61bb      	str	r3, [r7, #24]
 800eee8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800eeea:	4b36      	ldr	r3, [pc, #216]	; (800efc4 <HAL_TIM_Base_MspInit+0x114>)
 800eeec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eeee:	4a35      	ldr	r2, [pc, #212]	; (800efc4 <HAL_TIM_Base_MspInit+0x114>)
 800eef0:	f043 0310 	orr.w	r3, r3, #16
 800eef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800eef6:	4b33      	ldr	r3, [pc, #204]	; (800efc4 <HAL_TIM_Base_MspInit+0x114>)
 800eef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eefa:	f003 0310 	and.w	r3, r3, #16
 800eefe:	617b      	str	r3, [r7, #20]
 800ef00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef02:	4b30      	ldr	r3, [pc, #192]	; (800efc4 <HAL_TIM_Base_MspInit+0x114>)
 800ef04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef06:	4a2f      	ldr	r2, [pc, #188]	; (800efc4 <HAL_TIM_Base_MspInit+0x114>)
 800ef08:	f043 0301 	orr.w	r3, r3, #1
 800ef0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ef0e:	4b2d      	ldr	r3, [pc, #180]	; (800efc4 <HAL_TIM_Base_MspInit+0x114>)
 800ef10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef12:	f003 0301 	and.w	r3, r3, #1
 800ef16:	613b      	str	r3, [r7, #16]
 800ef18:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_IN_Pin;
 800ef1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ef1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef20:	2302      	movs	r3, #2
 800ef22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef24:	2300      	movs	r3, #0
 800ef26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_STEERING_IN_GPIO_Port, &GPIO_InitStruct);
 800ef30:	f107 031c 	add.w	r3, r7, #28
 800ef34:	4619      	mov	r1, r3
 800ef36:	4824      	ldr	r0, [pc, #144]	; (800efc8 <HAL_TIM_Base_MspInit+0x118>)
 800ef38:	f002 fcbc 	bl	80118b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_PWM_THROTTLE_IN_Pin;
 800ef3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef42:	2302      	movs	r3, #2
 800ef44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef46:	2300      	movs	r3, #0
 800ef48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800ef4e:	2301      	movs	r3, #1
 800ef50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_THROTTLE_IN_GPIO_Port, &GPIO_InitStruct);
 800ef52:	f107 031c 	add.w	r3, r7, #28
 800ef56:	4619      	mov	r1, r3
 800ef58:	481c      	ldr	r0, [pc, #112]	; (800efcc <HAL_TIM_Base_MspInit+0x11c>)
 800ef5a:	f002 fcab 	bl	80118b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800ef5e:	e02a      	b.n	800efb6 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a1a      	ldr	r2, [pc, #104]	; (800efd0 <HAL_TIM_Base_MspInit+0x120>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d10c      	bne.n	800ef84 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800ef6a:	4b16      	ldr	r3, [pc, #88]	; (800efc4 <HAL_TIM_Base_MspInit+0x114>)
 800ef6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef6e:	4a15      	ldr	r2, [pc, #84]	; (800efc4 <HAL_TIM_Base_MspInit+0x114>)
 800ef70:	f043 0308 	orr.w	r3, r3, #8
 800ef74:	6593      	str	r3, [r2, #88]	; 0x58
 800ef76:	4b13      	ldr	r3, [pc, #76]	; (800efc4 <HAL_TIM_Base_MspInit+0x114>)
 800ef78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef7a:	f003 0308 	and.w	r3, r3, #8
 800ef7e:	60fb      	str	r3, [r7, #12]
 800ef80:	68fb      	ldr	r3, [r7, #12]
}
 800ef82:	e018      	b.n	800efb6 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM6)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a12      	ldr	r2, [pc, #72]	; (800efd4 <HAL_TIM_Base_MspInit+0x124>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d113      	bne.n	800efb6 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800ef8e:	4b0d      	ldr	r3, [pc, #52]	; (800efc4 <HAL_TIM_Base_MspInit+0x114>)
 800ef90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef92:	4a0c      	ldr	r2, [pc, #48]	; (800efc4 <HAL_TIM_Base_MspInit+0x114>)
 800ef94:	f043 0310 	orr.w	r3, r3, #16
 800ef98:	6593      	str	r3, [r2, #88]	; 0x58
 800ef9a:	4b0a      	ldr	r3, [pc, #40]	; (800efc4 <HAL_TIM_Base_MspInit+0x114>)
 800ef9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef9e:	f003 0310 	and.w	r3, r3, #16
 800efa2:	60bb      	str	r3, [r7, #8]
 800efa4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 800efa6:	2200      	movs	r2, #0
 800efa8:	2105      	movs	r1, #5
 800efaa:	2031      	movs	r0, #49	; 0x31
 800efac:	f002 f8ac 	bl	8011108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800efb0:	2031      	movs	r0, #49	; 0x31
 800efb2:	f002 f8c3 	bl	801113c <HAL_NVIC_EnableIRQ>
}
 800efb6:	bf00      	nop
 800efb8:	3730      	adds	r7, #48	; 0x30
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	40012c00 	.word	0x40012c00
 800efc4:	40021000 	.word	0x40021000
 800efc8:	42021000 	.word	0x42021000
 800efcc:	42020000 	.word	0x42020000
 800efd0:	40000c00 	.word	0x40000c00
 800efd4:	40001000 	.word	0x40001000

0800efd8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b08a      	sub	sp, #40	; 0x28
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800efe0:	f107 0314 	add.w	r3, r7, #20
 800efe4:	2200      	movs	r2, #0
 800efe6:	601a      	str	r2, [r3, #0]
 800efe8:	605a      	str	r2, [r3, #4]
 800efea:	609a      	str	r2, [r3, #8]
 800efec:	60da      	str	r2, [r3, #12]
 800efee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4a1b      	ldr	r2, [pc, #108]	; (800f064 <HAL_TIM_Encoder_MspInit+0x8c>)
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d12f      	bne.n	800f05a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800effa:	4b1b      	ldr	r3, [pc, #108]	; (800f068 <HAL_TIM_Encoder_MspInit+0x90>)
 800effc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800effe:	4a1a      	ldr	r2, [pc, #104]	; (800f068 <HAL_TIM_Encoder_MspInit+0x90>)
 800f000:	f043 0302 	orr.w	r3, r3, #2
 800f004:	6593      	str	r3, [r2, #88]	; 0x58
 800f006:	4b18      	ldr	r3, [pc, #96]	; (800f068 <HAL_TIM_Encoder_MspInit+0x90>)
 800f008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f00a:	f003 0302 	and.w	r3, r3, #2
 800f00e:	613b      	str	r3, [r7, #16]
 800f010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800f012:	4b15      	ldr	r3, [pc, #84]	; (800f068 <HAL_TIM_Encoder_MspInit+0x90>)
 800f014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f016:	4a14      	ldr	r2, [pc, #80]	; (800f068 <HAL_TIM_Encoder_MspInit+0x90>)
 800f018:	f043 0310 	orr.w	r3, r3, #16
 800f01c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f01e:	4b12      	ldr	r3, [pc, #72]	; (800f068 <HAL_TIM_Encoder_MspInit+0x90>)
 800f020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f022:	f003 0310 	and.w	r3, r3, #16
 800f026:	60fb      	str	r3, [r7, #12]
 800f028:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CHB_Pin;
 800f02a:	2318      	movs	r3, #24
 800f02c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f02e:	2302      	movs	r3, #2
 800f030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f032:	2300      	movs	r3, #0
 800f034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f036:	2300      	movs	r3, #0
 800f038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800f03a:	2302      	movs	r3, #2
 800f03c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f03e:	f107 0314 	add.w	r3, r7, #20
 800f042:	4619      	mov	r1, r3
 800f044:	4809      	ldr	r0, [pc, #36]	; (800f06c <HAL_TIM_Encoder_MspInit+0x94>)
 800f046:	f002 fc35 	bl	80118b4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800f04a:	2200      	movs	r2, #0
 800f04c:	2105      	movs	r1, #5
 800f04e:	202e      	movs	r0, #46	; 0x2e
 800f050:	f002 f85a 	bl	8011108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800f054:	202e      	movs	r0, #46	; 0x2e
 800f056:	f002 f871 	bl	801113c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800f05a:	bf00      	nop
 800f05c:	3728      	adds	r7, #40	; 0x28
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	40000400 	.word	0x40000400
 800f068:	40021000 	.word	0x40021000
 800f06c:	42021000 	.word	0x42021000

0800f070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b08a      	sub	sp, #40	; 0x28
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f078:	f107 0314 	add.w	r3, r7, #20
 800f07c:	2200      	movs	r2, #0
 800f07e:	601a      	str	r2, [r3, #0]
 800f080:	605a      	str	r2, [r3, #4]
 800f082:	609a      	str	r2, [r3, #8]
 800f084:	60da      	str	r2, [r3, #12]
 800f086:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	4a23      	ldr	r2, [pc, #140]	; (800f11c <HAL_TIM_MspPostInit+0xac>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d11d      	bne.n	800f0ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f092:	4b23      	ldr	r3, [pc, #140]	; (800f120 <HAL_TIM_MspPostInit+0xb0>)
 800f094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f096:	4a22      	ldr	r2, [pc, #136]	; (800f120 <HAL_TIM_MspPostInit+0xb0>)
 800f098:	f043 0301 	orr.w	r3, r3, #1
 800f09c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f09e:	4b20      	ldr	r3, [pc, #128]	; (800f120 <HAL_TIM_MspPostInit+0xb0>)
 800f0a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0a2:	f003 0301 	and.w	r3, r3, #1
 800f0a6:	613b      	str	r3, [r7, #16]
 800f0a8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_Pin;
 800f0aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f0ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0b0:	2302      	movs	r3, #2
 800f0b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800f0bc:	2301      	movs	r3, #1
 800f0be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RC_PWM_STEERING_GPIO_Port, &GPIO_InitStruct);
 800f0c0:	f107 0314 	add.w	r3, r7, #20
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	4817      	ldr	r0, [pc, #92]	; (800f124 <HAL_TIM_MspPostInit+0xb4>)
 800f0c8:	f002 fbf4 	bl	80118b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800f0cc:	e021      	b.n	800f112 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM5)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	4a15      	ldr	r2, [pc, #84]	; (800f128 <HAL_TIM_MspPostInit+0xb8>)
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d11c      	bne.n	800f112 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800f0d8:	4b11      	ldr	r3, [pc, #68]	; (800f120 <HAL_TIM_MspPostInit+0xb0>)
 800f0da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0dc:	4a10      	ldr	r2, [pc, #64]	; (800f120 <HAL_TIM_MspPostInit+0xb0>)
 800f0de:	f043 0320 	orr.w	r3, r3, #32
 800f0e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f0e4:	4b0e      	ldr	r3, [pc, #56]	; (800f120 <HAL_TIM_MspPostInit+0xb0>)
 800f0e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0e8:	f003 0320 	and.w	r3, r3, #32
 800f0ec:	60fb      	str	r3, [r7, #12]
 800f0ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_PWM1_Pin|MOTOR_PWM2_Pin;
 800f0f0:	f44f 7310 	mov.w	r3, #576	; 0x240
 800f0f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0f6:	2302      	movs	r3, #2
 800f0f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f0fe:	2300      	movs	r3, #0
 800f100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800f102:	2302      	movs	r3, #2
 800f104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f106:	f107 0314 	add.w	r3, r7, #20
 800f10a:	4619      	mov	r1, r3
 800f10c:	4807      	ldr	r0, [pc, #28]	; (800f12c <HAL_TIM_MspPostInit+0xbc>)
 800f10e:	f002 fbd1 	bl	80118b4 <HAL_GPIO_Init>
}
 800f112:	bf00      	nop
 800f114:	3728      	adds	r7, #40	; 0x28
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
 800f11a:	bf00      	nop
 800f11c:	40012c00 	.word	0x40012c00
 800f120:	40021000 	.word	0x40021000
 800f124:	42020000 	.word	0x42020000
 800f128:	40000c00 	.word	0x40000c00
 800f12c:	42021400 	.word	0x42021400

0800f130 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b0ae      	sub	sp, #184	; 0xb8
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f138:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f13c:	2200      	movs	r2, #0
 800f13e:	601a      	str	r2, [r3, #0]
 800f140:	605a      	str	r2, [r3, #4]
 800f142:	609a      	str	r2, [r3, #8]
 800f144:	60da      	str	r2, [r3, #12]
 800f146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f148:	f107 0310 	add.w	r3, r7, #16
 800f14c:	2294      	movs	r2, #148	; 0x94
 800f14e:	2100      	movs	r1, #0
 800f150:	4618      	mov	r0, r3
 800f152:	f00d ff20 	bl	801cf96 <memset>
  if(hpcd->Instance==USB)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	4a22      	ldr	r2, [pc, #136]	; (800f1e4 <HAL_PCD_MspInit+0xb4>)
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d13d      	bne.n	800f1dc <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f164:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f166:	2300      	movs	r3, #0
 800f168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f16c:	f107 0310 	add.w	r3, r7, #16
 800f170:	4618      	mov	r0, r3
 800f172:	f004 f82b 	bl	80131cc <HAL_RCCEx_PeriphCLKConfig>
 800f176:	4603      	mov	r3, r0
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d001      	beq.n	800f180 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f17c:	f7ff fb42 	bl	800e804 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f180:	4b19      	ldr	r3, [pc, #100]	; (800f1e8 <HAL_PCD_MspInit+0xb8>)
 800f182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f184:	4a18      	ldr	r2, [pc, #96]	; (800f1e8 <HAL_PCD_MspInit+0xb8>)
 800f186:	f043 0301 	orr.w	r3, r3, #1
 800f18a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f18c:	4b16      	ldr	r3, [pc, #88]	; (800f1e8 <HAL_PCD_MspInit+0xb8>)
 800f18e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f190:	f003 0301 	and.w	r3, r3, #1
 800f194:	60fb      	str	r3, [r7, #12]
 800f196:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f198:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f19c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1a0:	2302      	movs	r3, #2
 800f1a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800f1b2:	230a      	movs	r3, #10
 800f1b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f1b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f1bc:	4619      	mov	r1, r3
 800f1be:	480b      	ldr	r0, [pc, #44]	; (800f1ec <HAL_PCD_MspInit+0xbc>)
 800f1c0:	f002 fb78 	bl	80118b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f1c4:	4b08      	ldr	r3, [pc, #32]	; (800f1e8 <HAL_PCD_MspInit+0xb8>)
 800f1c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1c8:	4a07      	ldr	r2, [pc, #28]	; (800f1e8 <HAL_PCD_MspInit+0xb8>)
 800f1ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f1ce:	65d3      	str	r3, [r2, #92]	; 0x5c
 800f1d0:	4b05      	ldr	r3, [pc, #20]	; (800f1e8 <HAL_PCD_MspInit+0xb8>)
 800f1d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f1d8:	60bb      	str	r3, [r7, #8]
 800f1da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800f1dc:	bf00      	nop
 800f1de:	37b8      	adds	r7, #184	; 0xb8
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}
 800f1e4:	4000d400 	.word	0x4000d400
 800f1e8:	40021000 	.word	0x40021000
 800f1ec:	42020000 	.word	0x42020000

0800f1f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b08c      	sub	sp, #48	; 0x30
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800f200:	2200      	movs	r2, #0
 800f202:	6879      	ldr	r1, [r7, #4]
 800f204:	202d      	movs	r0, #45	; 0x2d
 800f206:	f001 ff7f 	bl	8011108 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800f20a:	202d      	movs	r0, #45	; 0x2d
 800f20c:	f001 ff96 	bl	801113c <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800f210:	4b1f      	ldr	r3, [pc, #124]	; (800f290 <HAL_InitTick+0xa0>)
 800f212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f214:	4a1e      	ldr	r2, [pc, #120]	; (800f290 <HAL_InitTick+0xa0>)
 800f216:	f043 0301 	orr.w	r3, r3, #1
 800f21a:	6593      	str	r3, [r2, #88]	; 0x58
 800f21c:	4b1c      	ldr	r3, [pc, #112]	; (800f290 <HAL_InitTick+0xa0>)
 800f21e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f220:	f003 0301 	and.w	r3, r3, #1
 800f224:	60fb      	str	r3, [r7, #12]
 800f226:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800f228:	f107 0210 	add.w	r2, r7, #16
 800f22c:	f107 0314 	add.w	r3, r7, #20
 800f230:	4611      	mov	r1, r2
 800f232:	4618      	mov	r0, r3
 800f234:	f003 fec6 	bl	8012fc4 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800f238:	f003 fe9c 	bl	8012f74 <HAL_RCC_GetPCLK1Freq>
 800f23c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800f23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f240:	4a14      	ldr	r2, [pc, #80]	; (800f294 <HAL_InitTick+0xa4>)
 800f242:	fba2 2303 	umull	r2, r3, r2, r3
 800f246:	0c9b      	lsrs	r3, r3, #18
 800f248:	3b01      	subs	r3, #1
 800f24a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800f24c:	4b12      	ldr	r3, [pc, #72]	; (800f298 <HAL_InitTick+0xa8>)
 800f24e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f252:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800f254:	4b10      	ldr	r3, [pc, #64]	; (800f298 <HAL_InitTick+0xa8>)
 800f256:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f25a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800f25c:	4a0e      	ldr	r2, [pc, #56]	; (800f298 <HAL_InitTick+0xa8>)
 800f25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f260:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800f262:	4b0d      	ldr	r3, [pc, #52]	; (800f298 <HAL_InitTick+0xa8>)
 800f264:	2200      	movs	r2, #0
 800f266:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f268:	4b0b      	ldr	r3, [pc, #44]	; (800f298 <HAL_InitTick+0xa8>)
 800f26a:	2200      	movs	r2, #0
 800f26c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800f26e:	480a      	ldr	r0, [pc, #40]	; (800f298 <HAL_InitTick+0xa8>)
 800f270:	f004 fe9f 	bl	8013fb2 <HAL_TIM_Base_Init>
 800f274:	4603      	mov	r3, r0
 800f276:	2b00      	cmp	r3, #0
 800f278:	d104      	bne.n	800f284 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800f27a:	4807      	ldr	r0, [pc, #28]	; (800f298 <HAL_InitTick+0xa8>)
 800f27c:	f004 fef0 	bl	8014060 <HAL_TIM_Base_Start_IT>
 800f280:	4603      	mov	r3, r0
 800f282:	e000      	b.n	800f286 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 800f284:	2301      	movs	r3, #1
}
 800f286:	4618      	mov	r0, r3
 800f288:	3730      	adds	r7, #48	; 0x30
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	40021000 	.word	0x40021000
 800f294:	431bde83 	.word	0x431bde83
 800f298:	20000964 	.word	0x20000964

0800f29c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f29c:	b480      	push	{r7}
 800f29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800f2a0:	e7fe      	b.n	800f2a0 <NMI_Handler+0x4>

0800f2a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f2a2:	b480      	push	{r7}
 800f2a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f2a6:	e7fe      	b.n	800f2a6 <HardFault_Handler+0x4>

0800f2a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f2ac:	e7fe      	b.n	800f2ac <MemManage_Handler+0x4>

0800f2ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f2ae:	b480      	push	{r7}
 800f2b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f2b2:	e7fe      	b.n	800f2b2 <BusFault_Handler+0x4>

0800f2b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f2b8:	e7fe      	b.n	800f2b8 <UsageFault_Handler+0x4>

0800f2ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f2ba:	b480      	push	{r7}
 800f2bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f2be:	bf00      	nop
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800f2cc:	4802      	ldr	r0, [pc, #8]	; (800f2d8 <DMA1_Channel1_IRQHandler+0x10>)
 800f2ce:	f002 f921 	bl	8011514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800f2d2:	bf00      	nop
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	20000170 	.word	0x20000170

0800f2dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800f2e0:	4802      	ldr	r0, [pc, #8]	; (800f2ec <ADC1_2_IRQHandler+0x10>)
 800f2e2:	f000 fe21 	bl	800ff28 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800f2e6:	bf00      	nop
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	20000108 	.word	0x20000108

0800f2f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800f2f4:	4802      	ldr	r0, [pc, #8]	; (800f300 <TIM2_IRQHandler+0x10>)
 800f2f6:	f005 f992 	bl	801461e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800f2fa:	bf00      	nop
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	20000964 	.word	0x20000964

0800f304 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800f308:	4802      	ldr	r0, [pc, #8]	; (800f314 <TIM3_IRQHandler+0x10>)
 800f30a:	f005 f988 	bl	801461e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800f30e:	bf00      	nop
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	20000588 	.word	0x20000588

0800f318 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800f31c:	4802      	ldr	r0, [pc, #8]	; (800f328 <TIM6_IRQHandler+0x10>)
 800f31e:	f005 f97e 	bl	801461e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800f322:	bf00      	nop
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	20000620 	.word	0x20000620

0800f32c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800f330:	4802      	ldr	r0, [pc, #8]	; (800f33c <UART4_IRQHandler+0x10>)
 800f332:	f006 fc6d 	bl	8015c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800f336:	bf00      	nop
 800f338:	bd80      	pop	{r7, pc}
 800f33a:	bf00      	nop
 800f33c:	200002c0 	.word	0x200002c0

0800f340 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800f340:	b480      	push	{r7}
 800f342:	af00      	add	r7, sp, #0
  return 1;
 800f344:	2301      	movs	r3, #1
}
 800f346:	4618      	mov	r0, r3
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr

0800f350 <_kill>:

int _kill(int pid, int sig)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800f35a:	f00d febf 	bl	801d0dc <__errno>
 800f35e:	4603      	mov	r3, r0
 800f360:	2216      	movs	r2, #22
 800f362:	601a      	str	r2, [r3, #0]
  return -1;
 800f364:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3708      	adds	r7, #8
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}

0800f370 <_exit>:

void _exit (int status)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b082      	sub	sp, #8
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800f378:	f04f 31ff 	mov.w	r1, #4294967295
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f7ff ffe7 	bl	800f350 <_kill>
  while (1) {}    /* Make sure we hang here */
 800f382:	e7fe      	b.n	800f382 <_exit+0x12>

0800f384 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b086      	sub	sp, #24
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f390:	2300      	movs	r3, #0
 800f392:	617b      	str	r3, [r7, #20]
 800f394:	e00a      	b.n	800f3ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800f396:	f3af 8000 	nop.w
 800f39a:	4601      	mov	r1, r0
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	1c5a      	adds	r2, r3, #1
 800f3a0:	60ba      	str	r2, [r7, #8]
 800f3a2:	b2ca      	uxtb	r2, r1
 800f3a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	617b      	str	r3, [r7, #20]
 800f3ac:	697a      	ldr	r2, [r7, #20]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	dbf0      	blt.n	800f396 <_read+0x12>
  }

  return len;
 800f3b4:	687b      	ldr	r3, [r7, #4]
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3718      	adds	r7, #24
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}

0800f3be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800f3be:	b580      	push	{r7, lr}
 800f3c0:	b086      	sub	sp, #24
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	60f8      	str	r0, [r7, #12]
 800f3c6:	60b9      	str	r1, [r7, #8]
 800f3c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	617b      	str	r3, [r7, #20]
 800f3ce:	e009      	b.n	800f3e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	1c5a      	adds	r2, r3, #1
 800f3d4:	60ba      	str	r2, [r7, #8]
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	617b      	str	r3, [r7, #20]
 800f3e4:	697a      	ldr	r2, [r7, #20]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	dbf1      	blt.n	800f3d0 <_write+0x12>
  }
  return len;
 800f3ec:	687b      	ldr	r3, [r7, #4]
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3718      	adds	r7, #24
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}

0800f3f6 <_close>:

int _close(int file)
{
 800f3f6:	b480      	push	{r7}
 800f3f8:	b083      	sub	sp, #12
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800f3fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f402:	4618      	mov	r0, r3
 800f404:	370c      	adds	r7, #12
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr

0800f40e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f40e:	b480      	push	{r7}
 800f410:	b083      	sub	sp, #12
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
 800f416:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f41e:	605a      	str	r2, [r3, #4]
  return 0;
 800f420:	2300      	movs	r3, #0
}
 800f422:	4618      	mov	r0, r3
 800f424:	370c      	adds	r7, #12
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr

0800f42e <_isatty>:

int _isatty(int file)
{
 800f42e:	b480      	push	{r7}
 800f430:	b083      	sub	sp, #12
 800f432:	af00      	add	r7, sp, #0
 800f434:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800f436:	2301      	movs	r3, #1
}
 800f438:	4618      	mov	r0, r3
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr

0800f444 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f444:	b480      	push	{r7}
 800f446:	b085      	sub	sp, #20
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800f450:	2300      	movs	r3, #0
}
 800f452:	4618      	mov	r0, r3
 800f454:	3714      	adds	r7, #20
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr
	...

0800f460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b086      	sub	sp, #24
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f468:	4a14      	ldr	r2, [pc, #80]	; (800f4bc <_sbrk+0x5c>)
 800f46a:	4b15      	ldr	r3, [pc, #84]	; (800f4c0 <_sbrk+0x60>)
 800f46c:	1ad3      	subs	r3, r2, r3
 800f46e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f474:	4b13      	ldr	r3, [pc, #76]	; (800f4c4 <_sbrk+0x64>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d102      	bne.n	800f482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f47c:	4b11      	ldr	r3, [pc, #68]	; (800f4c4 <_sbrk+0x64>)
 800f47e:	4a12      	ldr	r2, [pc, #72]	; (800f4c8 <_sbrk+0x68>)
 800f480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f482:	4b10      	ldr	r3, [pc, #64]	; (800f4c4 <_sbrk+0x64>)
 800f484:	681a      	ldr	r2, [r3, #0]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4413      	add	r3, r2
 800f48a:	693a      	ldr	r2, [r7, #16]
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d207      	bcs.n	800f4a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f490:	f00d fe24 	bl	801d0dc <__errno>
 800f494:	4603      	mov	r3, r0
 800f496:	220c      	movs	r2, #12
 800f498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800f49a:	f04f 33ff 	mov.w	r3, #4294967295
 800f49e:	e009      	b.n	800f4b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f4a0:	4b08      	ldr	r3, [pc, #32]	; (800f4c4 <_sbrk+0x64>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f4a6:	4b07      	ldr	r3, [pc, #28]	; (800f4c4 <_sbrk+0x64>)
 800f4a8:	681a      	ldr	r2, [r3, #0]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	4a05      	ldr	r2, [pc, #20]	; (800f4c4 <_sbrk+0x64>)
 800f4b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3718      	adds	r7, #24
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	20030000 	.word	0x20030000
 800f4c0:	00000400 	.word	0x00000400
 800f4c4:	200009b0 	.word	0x200009b0
 800f4c8:	20003850 	.word	0x20003850

0800f4cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800f4d0:	4b06      	ldr	r3, [pc, #24]	; (800f4ec <SystemInit+0x20>)
 800f4d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4d6:	4a05      	ldr	r2, [pc, #20]	; (800f4ec <SystemInit+0x20>)
 800f4d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f4dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800f4e0:	bf00      	nop
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e8:	4770      	bx	lr
 800f4ea:	bf00      	nop
 800f4ec:	e000ed00 	.word	0xe000ed00

0800f4f0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b087      	sub	sp, #28
 800f4f4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800f4f6:	4b4f      	ldr	r3, [pc, #316]	; (800f634 <SystemCoreClockUpdate+0x144>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	f003 0308 	and.w	r3, r3, #8
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d107      	bne.n	800f512 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800f502:	4b4c      	ldr	r3, [pc, #304]	; (800f634 <SystemCoreClockUpdate+0x144>)
 800f504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f508:	0a1b      	lsrs	r3, r3, #8
 800f50a:	f003 030f 	and.w	r3, r3, #15
 800f50e:	617b      	str	r3, [r7, #20]
 800f510:	e005      	b.n	800f51e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800f512:	4b48      	ldr	r3, [pc, #288]	; (800f634 <SystemCoreClockUpdate+0x144>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	091b      	lsrs	r3, r3, #4
 800f518:	f003 030f 	and.w	r3, r3, #15
 800f51c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800f51e:	4a46      	ldr	r2, [pc, #280]	; (800f638 <SystemCoreClockUpdate+0x148>)
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f526:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f528:	4b42      	ldr	r3, [pc, #264]	; (800f634 <SystemCoreClockUpdate+0x144>)
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	f003 030c 	and.w	r3, r3, #12
 800f530:	2b0c      	cmp	r3, #12
 800f532:	d866      	bhi.n	800f602 <SystemCoreClockUpdate+0x112>
 800f534:	a201      	add	r2, pc, #4	; (adr r2, 800f53c <SystemCoreClockUpdate+0x4c>)
 800f536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f53a:	bf00      	nop
 800f53c:	0800f571 	.word	0x0800f571
 800f540:	0800f603 	.word	0x0800f603
 800f544:	0800f603 	.word	0x0800f603
 800f548:	0800f603 	.word	0x0800f603
 800f54c:	0800f579 	.word	0x0800f579
 800f550:	0800f603 	.word	0x0800f603
 800f554:	0800f603 	.word	0x0800f603
 800f558:	0800f603 	.word	0x0800f603
 800f55c:	0800f581 	.word	0x0800f581
 800f560:	0800f603 	.word	0x0800f603
 800f564:	0800f603 	.word	0x0800f603
 800f568:	0800f603 	.word	0x0800f603
 800f56c:	0800f589 	.word	0x0800f589
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800f570:	4a32      	ldr	r2, [pc, #200]	; (800f63c <SystemCoreClockUpdate+0x14c>)
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	6013      	str	r3, [r2, #0]
      break;
 800f576:	e048      	b.n	800f60a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800f578:	4b30      	ldr	r3, [pc, #192]	; (800f63c <SystemCoreClockUpdate+0x14c>)
 800f57a:	4a31      	ldr	r2, [pc, #196]	; (800f640 <SystemCoreClockUpdate+0x150>)
 800f57c:	601a      	str	r2, [r3, #0]
      break;
 800f57e:	e044      	b.n	800f60a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800f580:	4b2e      	ldr	r3, [pc, #184]	; (800f63c <SystemCoreClockUpdate+0x14c>)
 800f582:	4a30      	ldr	r2, [pc, #192]	; (800f644 <SystemCoreClockUpdate+0x154>)
 800f584:	601a      	str	r2, [r3, #0]
      break;
 800f586:	e040      	b.n	800f60a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800f588:	4b2a      	ldr	r3, [pc, #168]	; (800f634 <SystemCoreClockUpdate+0x144>)
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	f003 0303 	and.w	r3, r3, #3
 800f590:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800f592:	4b28      	ldr	r3, [pc, #160]	; (800f634 <SystemCoreClockUpdate+0x144>)
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	091b      	lsrs	r3, r3, #4
 800f598:	f003 030f 	and.w	r3, r3, #15
 800f59c:	3301      	adds	r3, #1
 800f59e:	60bb      	str	r3, [r7, #8]
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2b02      	cmp	r3, #2
 800f5a4:	d003      	beq.n	800f5ae <SystemCoreClockUpdate+0xbe>
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2b03      	cmp	r3, #3
 800f5aa:	d006      	beq.n	800f5ba <SystemCoreClockUpdate+0xca>
 800f5ac:	e00b      	b.n	800f5c6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800f5ae:	4a24      	ldr	r2, [pc, #144]	; (800f640 <SystemCoreClockUpdate+0x150>)
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5b6:	613b      	str	r3, [r7, #16]
          break;
 800f5b8:	e00b      	b.n	800f5d2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800f5ba:	4a22      	ldr	r2, [pc, #136]	; (800f644 <SystemCoreClockUpdate+0x154>)
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5c2:	613b      	str	r3, [r7, #16]
          break;
 800f5c4:	e005      	b.n	800f5d2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800f5c6:	697a      	ldr	r2, [r7, #20]
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5ce:	613b      	str	r3, [r7, #16]
          break;
 800f5d0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800f5d2:	4b18      	ldr	r3, [pc, #96]	; (800f634 <SystemCoreClockUpdate+0x144>)
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	0a1b      	lsrs	r3, r3, #8
 800f5d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	fb02 f303 	mul.w	r3, r2, r3
 800f5e2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800f5e4:	4b13      	ldr	r3, [pc, #76]	; (800f634 <SystemCoreClockUpdate+0x144>)
 800f5e6:	68db      	ldr	r3, [r3, #12]
 800f5e8:	0e5b      	lsrs	r3, r3, #25
 800f5ea:	f003 0303 	and.w	r3, r3, #3
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	005b      	lsls	r3, r3, #1
 800f5f2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800f5f4:	693a      	ldr	r2, [r7, #16]
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5fc:	4a0f      	ldr	r2, [pc, #60]	; (800f63c <SystemCoreClockUpdate+0x14c>)
 800f5fe:	6013      	str	r3, [r2, #0]
      break;
 800f600:	e003      	b.n	800f60a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800f602:	4a0e      	ldr	r2, [pc, #56]	; (800f63c <SystemCoreClockUpdate+0x14c>)
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	6013      	str	r3, [r2, #0]
      break;
 800f608:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800f60a:	4b0a      	ldr	r3, [pc, #40]	; (800f634 <SystemCoreClockUpdate+0x144>)
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	091b      	lsrs	r3, r3, #4
 800f610:	f003 030f 	and.w	r3, r3, #15
 800f614:	4a0c      	ldr	r2, [pc, #48]	; (800f648 <SystemCoreClockUpdate+0x158>)
 800f616:	5cd3      	ldrb	r3, [r2, r3]
 800f618:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800f61a:	4b08      	ldr	r3, [pc, #32]	; (800f63c <SystemCoreClockUpdate+0x14c>)
 800f61c:	681a      	ldr	r2, [r3, #0]
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	fa22 f303 	lsr.w	r3, r2, r3
 800f624:	4a05      	ldr	r2, [pc, #20]	; (800f63c <SystemCoreClockUpdate+0x14c>)
 800f626:	6013      	str	r3, [r2, #0]
}
 800f628:	bf00      	nop
 800f62a:	371c      	adds	r7, #28
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr
 800f634:	40021000 	.word	0x40021000
 800f638:	0801e710 	.word	0x0801e710
 800f63c:	20000004 	.word	0x20000004
 800f640:	00f42400 	.word	0x00f42400
 800f644:	007a1200 	.word	0x007a1200
 800f648:	0801e6f8 	.word	0x0801e6f8

0800f64c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800f64c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f684 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800f650:	f7ff ff3c 	bl	800f4cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800f654:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800f656:	e003      	b.n	800f660 <LoopCopyDataInit>

0800f658 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800f658:	4b0b      	ldr	r3, [pc, #44]	; (800f688 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800f65a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800f65c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800f65e:	3104      	adds	r1, #4

0800f660 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800f660:	480a      	ldr	r0, [pc, #40]	; (800f68c <LoopForever+0xa>)
	ldr	r3, =_edata
 800f662:	4b0b      	ldr	r3, [pc, #44]	; (800f690 <LoopForever+0xe>)
	adds	r2, r0, r1
 800f664:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800f666:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800f668:	d3f6      	bcc.n	800f658 <CopyDataInit>
	ldr	r2, =_sbss
 800f66a:	4a0a      	ldr	r2, [pc, #40]	; (800f694 <LoopForever+0x12>)
	b	LoopFillZerobss
 800f66c:	e002      	b.n	800f674 <LoopFillZerobss>

0800f66e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800f66e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800f670:	f842 3b04 	str.w	r3, [r2], #4

0800f674 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800f674:	4b08      	ldr	r3, [pc, #32]	; (800f698 <LoopForever+0x16>)
	cmp	r2, r3
 800f676:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800f678:	d3f9      	bcc.n	800f66e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800f67a:	f00d fd35 	bl	801d0e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800f67e:	f7fe f80d 	bl	800d69c <main>

0800f682 <LoopForever>:

LoopForever:
    b LoopForever
 800f682:	e7fe      	b.n	800f682 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800f684:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800f688:	0801ee3c 	.word	0x0801ee3c
	ldr	r0, =_sdata
 800f68c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800f690:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 800f694:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 800f698:	20003850 	.word	0x20003850

0800f69c <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800f69c:	e7fe      	b.n	800f69c <COMP_IRQHandler>

0800f69e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f69e:	b580      	push	{r7, lr}
 800f6a0:	b082      	sub	sp, #8
 800f6a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800f6a8:	2004      	movs	r0, #4
 800f6aa:	f001 fd22 	bl	80110f2 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800f6ae:	f7ff ff1f 	bl	800f4f0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800f6b2:	2007      	movs	r0, #7
 800f6b4:	f7ff fd9c 	bl	800f1f0 <HAL_InitTick>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d002      	beq.n	800f6c4 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800f6be:	2301      	movs	r3, #1
 800f6c0:	71fb      	strb	r3, [r7, #7]
 800f6c2:	e001      	b.n	800f6c8 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800f6c4:	f7ff f8a4 	bl	800e810 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800f6c8:	79fb      	ldrb	r3, [r7, #7]
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3708      	adds	r7, #8
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
	...

0800f6d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800f6d8:	4b06      	ldr	r3, [pc, #24]	; (800f6f4 <HAL_IncTick+0x20>)
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	461a      	mov	r2, r3
 800f6de:	4b06      	ldr	r3, [pc, #24]	; (800f6f8 <HAL_IncTick+0x24>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	4413      	add	r3, r2
 800f6e4:	4a04      	ldr	r2, [pc, #16]	; (800f6f8 <HAL_IncTick+0x24>)
 800f6e6:	6013      	str	r3, [r2, #0]
}
 800f6e8:	bf00      	nop
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f0:	4770      	bx	lr
 800f6f2:	bf00      	nop
 800f6f4:	2000000c 	.word	0x2000000c
 800f6f8:	200009b4 	.word	0x200009b4

0800f6fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	af00      	add	r7, sp, #0
  return uwTick;
 800f700:	4b03      	ldr	r3, [pc, #12]	; (800f710 <HAL_GetTick+0x14>)
 800f702:	681b      	ldr	r3, [r3, #0]
}
 800f704:	4618      	mov	r0, r3
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr
 800f70e:	bf00      	nop
 800f710:	200009b4 	.word	0x200009b4

0800f714 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800f714:	b480      	push	{r7}
 800f716:	b083      	sub	sp, #12
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	431a      	orrs	r2, r3
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	609a      	str	r2, [r3, #8]
}
 800f72e:	bf00      	nop
 800f730:	370c      	adds	r7, #12
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr

0800f73a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800f73a:	b480      	push	{r7}
 800f73c:	b083      	sub	sp, #12
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
 800f742:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	689b      	ldr	r3, [r3, #8]
 800f748:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	431a      	orrs	r2, r3
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	609a      	str	r2, [r3, #8]
}
 800f754:	bf00      	nop
 800f756:	370c      	adds	r7, #12
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr

0800f760 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800f760:	b480      	push	{r7}
 800f762:	b083      	sub	sp, #12
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	689b      	ldr	r3, [r3, #8]
 800f76c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800f770:	4618      	mov	r0, r3
 800f772:	370c      	adds	r7, #12
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr

0800f77c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b087      	sub	sp, #28
 800f780:	af00      	add	r7, sp, #0
 800f782:	60f8      	str	r0, [r7, #12]
 800f784:	60b9      	str	r1, [r7, #8]
 800f786:	607a      	str	r2, [r7, #4]
 800f788:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	3360      	adds	r3, #96	; 0x60
 800f78e:	461a      	mov	r2, r3
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4413      	add	r3, r2
 800f796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	681a      	ldr	r2, [r3, #0]
 800f79c:	4b08      	ldr	r3, [pc, #32]	; (800f7c0 <LL_ADC_SetOffset+0x44>)
 800f79e:	4013      	ands	r3, r2
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800f7a6:	683a      	ldr	r2, [r7, #0]
 800f7a8:	430a      	orrs	r2, r1
 800f7aa:	4313      	orrs	r3, r2
 800f7ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800f7b4:	bf00      	nop
 800f7b6:	371c      	adds	r7, #28
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr
 800f7c0:	03fff000 	.word	0x03fff000

0800f7c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800f7c4:	b480      	push	{r7}
 800f7c6:	b085      	sub	sp, #20
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	3360      	adds	r3, #96	; 0x60
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	009b      	lsls	r3, r3, #2
 800f7d8:	4413      	add	r3, r2
 800f7da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3714      	adds	r7, #20
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr

0800f7f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b087      	sub	sp, #28
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	60f8      	str	r0, [r7, #12]
 800f7f8:	60b9      	str	r1, [r7, #8]
 800f7fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	3360      	adds	r3, #96	; 0x60
 800f800:	461a      	mov	r2, r3
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	009b      	lsls	r3, r3, #2
 800f806:	4413      	add	r3, r2
 800f808:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	431a      	orrs	r2, r3
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800f81a:	bf00      	nop
 800f81c:	371c      	adds	r7, #28
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr

0800f826 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800f826:	b480      	push	{r7}
 800f828:	b083      	sub	sp, #12
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
 800f82e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	695b      	ldr	r3, [r3, #20]
 800f834:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	431a      	orrs	r2, r3
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	615a      	str	r2, [r3, #20]
}
 800f840:	bf00      	nop
 800f842:	370c      	adds	r7, #12
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr

0800f84c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	68db      	ldr	r3, [r3, #12]
 800f858:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d101      	bne.n	800f864 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800f860:	2301      	movs	r3, #1
 800f862:	e000      	b.n	800f866 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800f864:	2300      	movs	r3, #0
}
 800f866:	4618      	mov	r0, r3
 800f868:	370c      	adds	r7, #12
 800f86a:	46bd      	mov	sp, r7
 800f86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f870:	4770      	bx	lr

0800f872 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800f872:	b480      	push	{r7}
 800f874:	b087      	sub	sp, #28
 800f876:	af00      	add	r7, sp, #0
 800f878:	60f8      	str	r0, [r7, #12]
 800f87a:	60b9      	str	r1, [r7, #8]
 800f87c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	3330      	adds	r3, #48	; 0x30
 800f882:	461a      	mov	r2, r3
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	0a1b      	lsrs	r3, r3, #8
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	f003 030c 	and.w	r3, r3, #12
 800f88e:	4413      	add	r3, r2
 800f890:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	681a      	ldr	r2, [r3, #0]
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	f003 031f 	and.w	r3, r3, #31
 800f89c:	211f      	movs	r1, #31
 800f89e:	fa01 f303 	lsl.w	r3, r1, r3
 800f8a2:	43db      	mvns	r3, r3
 800f8a4:	401a      	ands	r2, r3
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	0e9b      	lsrs	r3, r3, #26
 800f8aa:	f003 011f 	and.w	r1, r3, #31
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	f003 031f 	and.w	r3, r3, #31
 800f8b4:	fa01 f303 	lsl.w	r3, r1, r3
 800f8b8:	431a      	orrs	r2, r3
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800f8be:	bf00      	nop
 800f8c0:	371c      	adds	r7, #28
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr

0800f8ca <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800f8ca:	b480      	push	{r7}
 800f8cc:	b083      	sub	sp, #12
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d101      	bne.n	800f8e2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800f8de:	2301      	movs	r3, #1
 800f8e0:	e000      	b.n	800f8e4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800f8e2:	2300      	movs	r3, #0
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	370c      	adds	r7, #12
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ee:	4770      	bx	lr

0800f8f0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	b087      	sub	sp, #28
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	60f8      	str	r0, [r7, #12]
 800f8f8:	60b9      	str	r1, [r7, #8]
 800f8fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	3314      	adds	r3, #20
 800f900:	461a      	mov	r2, r3
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	0e5b      	lsrs	r3, r3, #25
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	f003 0304 	and.w	r3, r3, #4
 800f90c:	4413      	add	r3, r2
 800f90e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	681a      	ldr	r2, [r3, #0]
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	0d1b      	lsrs	r3, r3, #20
 800f918:	f003 031f 	and.w	r3, r3, #31
 800f91c:	2107      	movs	r1, #7
 800f91e:	fa01 f303 	lsl.w	r3, r1, r3
 800f922:	43db      	mvns	r3, r3
 800f924:	401a      	ands	r2, r3
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	0d1b      	lsrs	r3, r3, #20
 800f92a:	f003 031f 	and.w	r3, r3, #31
 800f92e:	6879      	ldr	r1, [r7, #4]
 800f930:	fa01 f303 	lsl.w	r3, r1, r3
 800f934:	431a      	orrs	r2, r3
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800f93a:	bf00      	nop
 800f93c:	371c      	adds	r7, #28
 800f93e:	46bd      	mov	sp, r7
 800f940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f944:	4770      	bx	lr
	...

0800f948 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800f948:	b480      	push	{r7}
 800f94a:	b085      	sub	sp, #20
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	60f8      	str	r0, [r7, #12]
 800f950:	60b9      	str	r1, [r7, #8]
 800f952:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f960:	43db      	mvns	r3, r3
 800f962:	401a      	ands	r2, r3
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f003 0318 	and.w	r3, r3, #24
 800f96a:	4908      	ldr	r1, [pc, #32]	; (800f98c <LL_ADC_SetChannelSingleDiff+0x44>)
 800f96c:	40d9      	lsrs	r1, r3
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	400b      	ands	r3, r1
 800f972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f976:	431a      	orrs	r2, r3
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800f97e:	bf00      	nop
 800f980:	3714      	adds	r7, #20
 800f982:	46bd      	mov	sp, r7
 800f984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f988:	4770      	bx	lr
 800f98a:	bf00      	nop
 800f98c:	0007ffff 	.word	0x0007ffff

0800f990 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	689b      	ldr	r3, [r3, #8]
 800f99c:	f003 031f 	and.w	r3, r3, #31
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	370c      	adds	r7, #12
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9aa:	4770      	bx	lr

0800f9ac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	689b      	ldr	r3, [r3, #8]
 800f9b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	370c      	adds	r7, #12
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr

0800f9c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	689b      	ldr	r3, [r3, #8]
 800f9d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800f9d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f9dc:	687a      	ldr	r2, [r7, #4]
 800f9de:	6093      	str	r3, [r2, #8]
}
 800f9e0:	bf00      	nop
 800f9e2:	370c      	adds	r7, #12
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr

0800f9ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b083      	sub	sp, #12
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	689b      	ldr	r3, [r3, #8]
 800f9f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f9fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa00:	d101      	bne.n	800fa06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800fa02:	2301      	movs	r3, #1
 800fa04:	e000      	b.n	800fa08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800fa06:	2300      	movs	r3, #0
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	370c      	adds	r7, #12
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr

0800fa14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800fa14:	b480      	push	{r7}
 800fa16:	b083      	sub	sp, #12
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	689b      	ldr	r3, [r3, #8]
 800fa20:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800fa24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800fa28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800fa30:	bf00      	nop
 800fa32:	370c      	adds	r7, #12
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr

0800fa3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b083      	sub	sp, #12
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	689b      	ldr	r3, [r3, #8]
 800fa48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fa4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa50:	d101      	bne.n	800fa56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800fa52:	2301      	movs	r3, #1
 800fa54:	e000      	b.n	800fa58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800fa56:	2300      	movs	r3, #0
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	370c      	adds	r7, #12
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr

0800fa64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b083      	sub	sp, #12
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	689b      	ldr	r3, [r3, #8]
 800fa70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800fa78:	f043 0201 	orr.w	r2, r3, #1
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800fa80:	bf00      	nop
 800fa82:	370c      	adds	r7, #12
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr

0800fa8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	689b      	ldr	r3, [r3, #8]
 800fa98:	f003 0301 	and.w	r3, r3, #1
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	d101      	bne.n	800faa4 <LL_ADC_IsEnabled+0x18>
 800faa0:	2301      	movs	r3, #1
 800faa2:	e000      	b.n	800faa6 <LL_ADC_IsEnabled+0x1a>
 800faa4:	2300      	movs	r3, #0
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	370c      	adds	r7, #12
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr

0800fab2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800fab2:	b480      	push	{r7}
 800fab4:	b083      	sub	sp, #12
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	689b      	ldr	r3, [r3, #8]
 800fabe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fac2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800fac6:	f043 0204 	orr.w	r2, r3, #4
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800face:	bf00      	nop
 800fad0:	370c      	adds	r7, #12
 800fad2:	46bd      	mov	sp, r7
 800fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad8:	4770      	bx	lr

0800fada <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800fada:	b480      	push	{r7}
 800fadc:	b083      	sub	sp, #12
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	689b      	ldr	r3, [r3, #8]
 800fae6:	f003 0304 	and.w	r3, r3, #4
 800faea:	2b04      	cmp	r3, #4
 800faec:	d101      	bne.n	800faf2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800faee:	2301      	movs	r3, #1
 800faf0:	e000      	b.n	800faf4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800faf2:	2300      	movs	r3, #0
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	370c      	adds	r7, #12
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr

0800fb00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	689b      	ldr	r3, [r3, #8]
 800fb0c:	f003 0308 	and.w	r3, r3, #8
 800fb10:	2b08      	cmp	r3, #8
 800fb12:	d101      	bne.n	800fb18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800fb14:	2301      	movs	r3, #1
 800fb16:	e000      	b.n	800fb1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800fb18:	2300      	movs	r3, #0
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	370c      	adds	r7, #12
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr
	...

0800fb28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800fb28:	b590      	push	{r4, r7, lr}
 800fb2a:	b089      	sub	sp, #36	; 0x24
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fb30:	2300      	movs	r3, #0
 800fb32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800fb34:	2300      	movs	r3, #0
 800fb36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d101      	bne.n	800fb42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800fb3e:	2301      	movs	r3, #1
 800fb40:	e12e      	b.n	800fda0 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	691b      	ldr	r3, [r3, #16]
 800fb46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d109      	bne.n	800fb64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f7fe fe85 	bl	800e860 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7ff ff3f 	bl	800f9ec <LL_ADC_IsDeepPowerDownEnabled>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d004      	beq.n	800fb7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7ff ff25 	bl	800f9c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7ff ff5a 	bl	800fa3c <LL_ADC_IsInternalRegulatorEnabled>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d115      	bne.n	800fbba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7ff ff3e 	bl	800fa14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800fb98:	4b83      	ldr	r3, [pc, #524]	; (800fda8 <HAL_ADC_Init+0x280>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	099b      	lsrs	r3, r3, #6
 800fb9e:	4a83      	ldr	r2, [pc, #524]	; (800fdac <HAL_ADC_Init+0x284>)
 800fba0:	fba2 2303 	umull	r2, r3, r2, r3
 800fba4:	099b      	lsrs	r3, r3, #6
 800fba6:	3301      	adds	r3, #1
 800fba8:	005b      	lsls	r3, r3, #1
 800fbaa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800fbac:	e002      	b.n	800fbb4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	3b01      	subs	r3, #1
 800fbb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d1f9      	bne.n	800fbae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7ff ff3c 	bl	800fa3c <LL_ADC_IsInternalRegulatorEnabled>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d10d      	bne.n	800fbe6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbce:	f043 0210 	orr.w	r2, r3, #16
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbda:	f043 0201 	orr.w	r2, r3, #1
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7ff ff75 	bl	800fada <LL_ADC_REG_IsConversionOngoing>
 800fbf0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbf6:	f003 0310 	and.w	r3, r3, #16
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	f040 80c7 	bne.w	800fd8e <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	f040 80c3 	bne.w	800fd8e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800fc10:	f043 0202 	orr.w	r2, r3, #2
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7ff ff35 	bl	800fa8c <LL_ADC_IsEnabled>
 800fc22:	4603      	mov	r3, r0
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d110      	bne.n	800fc4a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800fc28:	4861      	ldr	r0, [pc, #388]	; (800fdb0 <HAL_ADC_Init+0x288>)
 800fc2a:	f7ff ff2f 	bl	800fa8c <LL_ADC_IsEnabled>
 800fc2e:	4604      	mov	r4, r0
 800fc30:	4860      	ldr	r0, [pc, #384]	; (800fdb4 <HAL_ADC_Init+0x28c>)
 800fc32:	f7ff ff2b 	bl	800fa8c <LL_ADC_IsEnabled>
 800fc36:	4603      	mov	r3, r0
 800fc38:	4323      	orrs	r3, r4
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d105      	bne.n	800fc4a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	4619      	mov	r1, r3
 800fc44:	485c      	ldr	r0, [pc, #368]	; (800fdb8 <HAL_ADC_Init+0x290>)
 800fc46:	f7ff fd65 	bl	800f714 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	7e5b      	ldrb	r3, [r3, #25]
 800fc4e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800fc54:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800fc5a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800fc60:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fc68:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800fc6a:	4313      	orrs	r3, r2
 800fc6c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	d106      	bne.n	800fc86 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc7c:	3b01      	subs	r3, #1
 800fc7e:	045b      	lsls	r3, r3, #17
 800fc80:	69ba      	ldr	r2, [r7, #24]
 800fc82:	4313      	orrs	r3, r2
 800fc84:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d009      	beq.n	800fca2 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc92:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc9a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800fc9c:	69ba      	ldr	r2, [r7, #24]
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	68da      	ldr	r2, [r3, #12]
 800fca8:	4b44      	ldr	r3, [pc, #272]	; (800fdbc <HAL_ADC_Init+0x294>)
 800fcaa:	4013      	ands	r3, r2
 800fcac:	687a      	ldr	r2, [r7, #4]
 800fcae:	6812      	ldr	r2, [r2, #0]
 800fcb0:	69b9      	ldr	r1, [r7, #24]
 800fcb2:	430b      	orrs	r3, r1
 800fcb4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7ff ff20 	bl	800fb00 <LL_ADC_INJ_IsConversionOngoing>
 800fcc0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d140      	bne.n	800fd4a <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800fcc8:	693b      	ldr	r3, [r7, #16]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d13d      	bne.n	800fd4a <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	7e1b      	ldrb	r3, [r3, #24]
 800fcd6:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800fcd8:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fce0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800fce2:	4313      	orrs	r3, r2
 800fce4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fcf0:	f023 0306 	bic.w	r3, r3, #6
 800fcf4:	687a      	ldr	r2, [r7, #4]
 800fcf6:	6812      	ldr	r2, [r2, #0]
 800fcf8:	69b9      	ldr	r1, [r7, #24]
 800fcfa:	430b      	orrs	r3, r1
 800fcfc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	d118      	bne.n	800fd3a <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	691b      	ldr	r3, [r3, #16]
 800fd0e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800fd12:	f023 0304 	bic.w	r3, r3, #4
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800fd1a:	687a      	ldr	r2, [r7, #4]
 800fd1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800fd1e:	4311      	orrs	r1, r2
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800fd24:	4311      	orrs	r1, r2
 800fd26:	687a      	ldr	r2, [r7, #4]
 800fd28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800fd2a:	430a      	orrs	r2, r1
 800fd2c:	431a      	orrs	r2, r3
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f042 0201 	orr.w	r2, r2, #1
 800fd36:	611a      	str	r2, [r3, #16]
 800fd38:	e007      	b.n	800fd4a <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	691a      	ldr	r2, [r3, #16]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f022 0201 	bic.w	r2, r2, #1
 800fd48:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	691b      	ldr	r3, [r3, #16]
 800fd4e:	2b01      	cmp	r3, #1
 800fd50:	d10c      	bne.n	800fd6c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd58:	f023 010f 	bic.w	r1, r3, #15
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	69db      	ldr	r3, [r3, #28]
 800fd60:	1e5a      	subs	r2, r3, #1
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	430a      	orrs	r2, r1
 800fd68:	631a      	str	r2, [r3, #48]	; 0x30
 800fd6a:	e007      	b.n	800fd7c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	f022 020f 	bic.w	r2, r2, #15
 800fd7a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd80:	f023 0303 	bic.w	r3, r3, #3
 800fd84:	f043 0201 	orr.w	r2, r3, #1
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	659a      	str	r2, [r3, #88]	; 0x58
 800fd8c:	e007      	b.n	800fd9e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd92:	f043 0210 	orr.w	r2, r3, #16
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800fd9e:	7ffb      	ldrb	r3, [r7, #31]
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3724      	adds	r7, #36	; 0x24
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd90      	pop	{r4, r7, pc}
 800fda8:	20000004 	.word	0x20000004
 800fdac:	053e2d63 	.word	0x053e2d63
 800fdb0:	42028000 	.word	0x42028000
 800fdb4:	42028100 	.word	0x42028100
 800fdb8:	42028300 	.word	0x42028300
 800fdbc:	fff0c007 	.word	0xfff0c007

0800fdc0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b086      	sub	sp, #24
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800fdcc:	4850      	ldr	r0, [pc, #320]	; (800ff10 <HAL_ADC_Start_DMA+0x150>)
 800fdce:	f7ff fddf 	bl	800f990 <LL_ADC_GetMultimode>
 800fdd2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f7ff fe7e 	bl	800fada <LL_ADC_REG_IsConversionOngoing>
 800fdde:	4603      	mov	r3, r0
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	f040 808e 	bne.w	800ff02 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	d101      	bne.n	800fdf4 <HAL_ADC_Start_DMA+0x34>
 800fdf0:	2302      	movs	r3, #2
 800fdf2:	e089      	b.n	800ff08 <HAL_ADC_Start_DMA+0x148>
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d005      	beq.n	800fe0e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	2b05      	cmp	r3, #5
 800fe06:	d002      	beq.n	800fe0e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	2b09      	cmp	r3, #9
 800fe0c:	d172      	bne.n	800fef4 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800fe0e:	68f8      	ldr	r0, [r7, #12]
 800fe10:	f000 feac 	bl	8010b6c <ADC_Enable>
 800fe14:	4603      	mov	r3, r0
 800fe16:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800fe18:	7dfb      	ldrb	r3, [r7, #23]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d165      	bne.n	800feea <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800fe26:	f023 0301 	bic.w	r3, r3, #1
 800fe2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	4a37      	ldr	r2, [pc, #220]	; (800ff14 <HAL_ADC_Start_DMA+0x154>)
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	d002      	beq.n	800fe42 <HAL_ADC_Start_DMA+0x82>
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	e000      	b.n	800fe44 <HAL_ADC_Start_DMA+0x84>
 800fe42:	4b35      	ldr	r3, [pc, #212]	; (800ff18 <HAL_ADC_Start_DMA+0x158>)
 800fe44:	68fa      	ldr	r2, [r7, #12]
 800fe46:	6812      	ldr	r2, [r2, #0]
 800fe48:	4293      	cmp	r3, r2
 800fe4a:	d002      	beq.n	800fe52 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d105      	bne.n	800fe5e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d006      	beq.n	800fe78 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe6e:	f023 0206 	bic.w	r2, r3, #6
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	65da      	str	r2, [r3, #92]	; 0x5c
 800fe76:	e002      	b.n	800fe7e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe82:	4a26      	ldr	r2, [pc, #152]	; (800ff1c <HAL_ADC_Start_DMA+0x15c>)
 800fe84:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe8a:	4a25      	ldr	r2, [pc, #148]	; (800ff20 <HAL_ADC_Start_DMA+0x160>)
 800fe8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe92:	4a24      	ldr	r2, [pc, #144]	; (800ff24 <HAL_ADC_Start_DMA+0x164>)
 800fe94:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	221c      	movs	r2, #28
 800fe9c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	2200      	movs	r2, #0
 800fea2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	685a      	ldr	r2, [r3, #4]
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	f042 0210 	orr.w	r2, r2, #16
 800feb4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	68da      	ldr	r2, [r3, #12]
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	f042 0201 	orr.w	r2, r2, #1
 800fec4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	3340      	adds	r3, #64	; 0x40
 800fed0:	4619      	mov	r1, r3
 800fed2:	68ba      	ldr	r2, [r7, #8]
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f001 f9e7 	bl	80112a8 <HAL_DMA_Start_IT>
 800feda:	4603      	mov	r3, r0
 800fedc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7ff fde5 	bl	800fab2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800fee8:	e00d      	b.n	800ff06 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	2200      	movs	r2, #0
 800feee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 800fef2:	e008      	b.n	800ff06 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800fef4:	2301      	movs	r3, #1
 800fef6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2200      	movs	r2, #0
 800fefc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800ff00:	e001      	b.n	800ff06 <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800ff02:	2302      	movs	r3, #2
 800ff04:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800ff06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3718      	adds	r7, #24
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}
 800ff10:	42028300 	.word	0x42028300
 800ff14:	42028100 	.word	0x42028100
 800ff18:	42028000 	.word	0x42028000
 800ff1c:	08010c79 	.word	0x08010c79
 800ff20:	08010d51 	.word	0x08010d51
 800ff24:	08010d6d 	.word	0x08010d6d

0800ff28 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b08a      	sub	sp, #40	; 0x28
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800ff30:	2300      	movs	r3, #0
 800ff32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	685b      	ldr	r3, [r3, #4]
 800ff42:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ff44:	4882      	ldr	r0, [pc, #520]	; (8010150 <HAL_ADC_IRQHandler+0x228>)
 800ff46:	f7ff fd23 	bl	800f990 <LL_ADC_GetMultimode>
 800ff4a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800ff4c:	69fb      	ldr	r3, [r7, #28]
 800ff4e:	f003 0302 	and.w	r3, r3, #2
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d017      	beq.n	800ff86 <HAL_ADC_IRQHandler+0x5e>
 800ff56:	69bb      	ldr	r3, [r7, #24]
 800ff58:	f003 0302 	and.w	r3, r3, #2
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d012      	beq.n	800ff86 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff64:	f003 0310 	and.w	r3, r3, #16
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d105      	bne.n	800ff78 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff70:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 ff5f 	bl	8010e3c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2202      	movs	r2, #2
 800ff84:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800ff86:	69fb      	ldr	r3, [r7, #28]
 800ff88:	f003 0304 	and.w	r3, r3, #4
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d004      	beq.n	800ff9a <HAL_ADC_IRQHandler+0x72>
 800ff90:	69bb      	ldr	r3, [r7, #24]
 800ff92:	f003 0304 	and.w	r3, r3, #4
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d10a      	bne.n	800ffb0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800ff9a:	69fb      	ldr	r3, [r7, #28]
 800ff9c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	f000 8083 	beq.w	80100ac <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800ffa6:	69bb      	ldr	r3, [r7, #24]
 800ffa8:	f003 0308 	and.w	r3, r3, #8
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d07d      	beq.n	80100ac <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffb4:	f003 0310 	and.w	r3, r3, #16
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d105      	bne.n	800ffc8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7ff fc3d 	bl	800f84c <LL_ADC_REG_IsTriggerSourceSWStart>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d062      	beq.n	801009e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4a5d      	ldr	r2, [pc, #372]	; (8010154 <HAL_ADC_IRQHandler+0x22c>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d002      	beq.n	800ffe8 <HAL_ADC_IRQHandler+0xc0>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	e000      	b.n	800ffea <HAL_ADC_IRQHandler+0xc2>
 800ffe8:	4b5b      	ldr	r3, [pc, #364]	; (8010158 <HAL_ADC_IRQHandler+0x230>)
 800ffea:	687a      	ldr	r2, [r7, #4]
 800ffec:	6812      	ldr	r2, [r2, #0]
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d008      	beq.n	8010004 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d005      	beq.n	8010004 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	2b05      	cmp	r3, #5
 800fffc:	d002      	beq.n	8010004 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	2b09      	cmp	r3, #9
 8010002:	d104      	bne.n	801000e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	68db      	ldr	r3, [r3, #12]
 801000a:	623b      	str	r3, [r7, #32]
 801000c:	e00c      	b.n	8010028 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	4a50      	ldr	r2, [pc, #320]	; (8010154 <HAL_ADC_IRQHandler+0x22c>)
 8010014:	4293      	cmp	r3, r2
 8010016:	d002      	beq.n	801001e <HAL_ADC_IRQHandler+0xf6>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	e000      	b.n	8010020 <HAL_ADC_IRQHandler+0xf8>
 801001e:	4b4e      	ldr	r3, [pc, #312]	; (8010158 <HAL_ADC_IRQHandler+0x230>)
 8010020:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	68db      	ldr	r3, [r3, #12]
 8010026:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8010028:	6a3b      	ldr	r3, [r7, #32]
 801002a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801002e:	2b00      	cmp	r3, #0
 8010030:	d135      	bne.n	801009e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f003 0308 	and.w	r3, r3, #8
 801003c:	2b08      	cmp	r3, #8
 801003e:	d12e      	bne.n	801009e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	4618      	mov	r0, r3
 8010046:	f7ff fd48 	bl	800fada <LL_ADC_REG_IsConversionOngoing>
 801004a:	4603      	mov	r3, r0
 801004c:	2b00      	cmp	r3, #0
 801004e:	d11a      	bne.n	8010086 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	685a      	ldr	r2, [r3, #4]
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f022 020c 	bic.w	r2, r2, #12
 801005e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010064:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010074:	2b00      	cmp	r3, #0
 8010076:	d112      	bne.n	801009e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801007c:	f043 0201 	orr.w	r2, r3, #1
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	659a      	str	r2, [r3, #88]	; 0x58
 8010084:	e00b      	b.n	801009e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801008a:	f043 0210 	orr.w	r2, r3, #16
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010096:	f043 0201 	orr.w	r2, r3, #1
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f7f1 fdaa 	bl	8001bf8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	220c      	movs	r2, #12
 80100aa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80100ac:	69fb      	ldr	r3, [r7, #28]
 80100ae:	f003 0320 	and.w	r3, r3, #32
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d004      	beq.n	80100c0 <HAL_ADC_IRQHandler+0x198>
 80100b6:	69bb      	ldr	r3, [r7, #24]
 80100b8:	f003 0320 	and.w	r3, r3, #32
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d10b      	bne.n	80100d8 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80100c0:	69fb      	ldr	r3, [r7, #28]
 80100c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	f000 809f 	beq.w	801020a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80100cc:	69bb      	ldr	r3, [r7, #24]
 80100ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f000 8099 	beq.w	801020a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100dc:	f003 0310 	and.w	r3, r3, #16
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d105      	bne.n	80100f0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100e8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7ff fbe8 	bl	800f8ca <LL_ADC_INJ_IsTriggerSourceSWStart>
 80100fa:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4618      	mov	r0, r3
 8010102:	f7ff fba3 	bl	800f84c <LL_ADC_REG_IsTriggerSourceSWStart>
 8010106:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	4a11      	ldr	r2, [pc, #68]	; (8010154 <HAL_ADC_IRQHandler+0x22c>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d002      	beq.n	8010118 <HAL_ADC_IRQHandler+0x1f0>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	e000      	b.n	801011a <HAL_ADC_IRQHandler+0x1f2>
 8010118:	4b0f      	ldr	r3, [pc, #60]	; (8010158 <HAL_ADC_IRQHandler+0x230>)
 801011a:	687a      	ldr	r2, [r7, #4]
 801011c:	6812      	ldr	r2, [r2, #0]
 801011e:	4293      	cmp	r3, r2
 8010120:	d008      	beq.n	8010134 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d005      	beq.n	8010134 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	2b06      	cmp	r3, #6
 801012c:	d002      	beq.n	8010134 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	2b07      	cmp	r3, #7
 8010132:	d104      	bne.n	801013e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	68db      	ldr	r3, [r3, #12]
 801013a:	623b      	str	r3, [r7, #32]
 801013c:	e013      	b.n	8010166 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	4a04      	ldr	r2, [pc, #16]	; (8010154 <HAL_ADC_IRQHandler+0x22c>)
 8010144:	4293      	cmp	r3, r2
 8010146:	d009      	beq.n	801015c <HAL_ADC_IRQHandler+0x234>
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	e007      	b.n	801015e <HAL_ADC_IRQHandler+0x236>
 801014e:	bf00      	nop
 8010150:	42028300 	.word	0x42028300
 8010154:	42028100 	.word	0x42028100
 8010158:	42028000 	.word	0x42028000
 801015c:	4b7d      	ldr	r3, [pc, #500]	; (8010354 <HAL_ADC_IRQHandler+0x42c>)
 801015e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	68db      	ldr	r3, [r3, #12]
 8010164:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d047      	beq.n	80101fc <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 801016c:	6a3b      	ldr	r3, [r7, #32]
 801016e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010172:	2b00      	cmp	r3, #0
 8010174:	d007      	beq.n	8010186 <HAL_ADC_IRQHandler+0x25e>
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d03f      	beq.n	80101fc <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 801017c:	6a3b      	ldr	r3, [r7, #32]
 801017e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8010182:	2b00      	cmp	r3, #0
 8010184:	d13a      	bne.n	80101fc <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010190:	2b40      	cmp	r3, #64	; 0x40
 8010192:	d133      	bne.n	80101fc <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8010194:	6a3b      	ldr	r3, [r7, #32]
 8010196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801019a:	2b00      	cmp	r3, #0
 801019c:	d12e      	bne.n	80101fc <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7ff fcac 	bl	800fb00 <LL_ADC_INJ_IsConversionOngoing>
 80101a8:	4603      	mov	r3, r0
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d11a      	bne.n	80101e4 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	685a      	ldr	r2, [r3, #4]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80101bc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d112      	bne.n	80101fc <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101da:	f043 0201 	orr.w	r2, r3, #1
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	659a      	str	r2, [r3, #88]	; 0x58
 80101e2:	e00b      	b.n	80101fc <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101e8:	f043 0210 	orr.w	r2, r3, #16
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80101f4:	f043 0201 	orr.w	r2, r3, #1
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	f000 fdf5 	bl	8010dec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	2260      	movs	r2, #96	; 0x60
 8010208:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010210:	2b00      	cmp	r3, #0
 8010212:	d011      	beq.n	8010238 <HAL_ADC_IRQHandler+0x310>
 8010214:	69bb      	ldr	r3, [r7, #24]
 8010216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801021a:	2b00      	cmp	r3, #0
 801021c:	d00c      	beq.n	8010238 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010222:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f000 f8a0 	bl	8010370 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	2280      	movs	r2, #128	; 0x80
 8010236:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8010238:	69fb      	ldr	r3, [r7, #28]
 801023a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801023e:	2b00      	cmp	r3, #0
 8010240:	d012      	beq.n	8010268 <HAL_ADC_IRQHandler+0x340>
 8010242:	69bb      	ldr	r3, [r7, #24]
 8010244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010248:	2b00      	cmp	r3, #0
 801024a:	d00d      	beq.n	8010268 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010250:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f000 fddb 	bl	8010e14 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010266:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8010268:	69fb      	ldr	r3, [r7, #28]
 801026a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801026e:	2b00      	cmp	r3, #0
 8010270:	d012      	beq.n	8010298 <HAL_ADC_IRQHandler+0x370>
 8010272:	69bb      	ldr	r3, [r7, #24]
 8010274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010278:	2b00      	cmp	r3, #0
 801027a:	d00d      	beq.n	8010298 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010280:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f000 fdcd 	bl	8010e28 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010296:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	f003 0310 	and.w	r3, r3, #16
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d036      	beq.n	8010310 <HAL_ADC_IRQHandler+0x3e8>
 80102a2:	69bb      	ldr	r3, [r7, #24]
 80102a4:	f003 0310 	and.w	r3, r3, #16
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d031      	beq.n	8010310 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d102      	bne.n	80102ba <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80102b4:	2301      	movs	r3, #1
 80102b6:	627b      	str	r3, [r7, #36]	; 0x24
 80102b8:	e014      	b.n	80102e4 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d008      	beq.n	80102d2 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80102c0:	4825      	ldr	r0, [pc, #148]	; (8010358 <HAL_ADC_IRQHandler+0x430>)
 80102c2:	f7ff fb73 	bl	800f9ac <LL_ADC_GetMultiDMATransfer>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d00b      	beq.n	80102e4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80102cc:	2301      	movs	r3, #1
 80102ce:	627b      	str	r3, [r7, #36]	; 0x24
 80102d0:	e008      	b.n	80102e4 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	68db      	ldr	r3, [r3, #12]
 80102d8:	f003 0301 	and.w	r3, r3, #1
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d001      	beq.n	80102e4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80102e0:	2301      	movs	r3, #1
 80102e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80102e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e6:	2b01      	cmp	r3, #1
 80102e8:	d10e      	bne.n	8010308 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102ee:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80102fa:	f043 0202 	orr.w	r2, r3, #2
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 f83e 	bl	8010384 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	2210      	movs	r2, #16
 801030e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8010310:	69fb      	ldr	r3, [r7, #28]
 8010312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010316:	2b00      	cmp	r3, #0
 8010318:	d018      	beq.n	801034c <HAL_ADC_IRQHandler+0x424>
 801031a:	69bb      	ldr	r3, [r7, #24]
 801031c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010320:	2b00      	cmp	r3, #0
 8010322:	d013      	beq.n	801034c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010328:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010334:	f043 0208 	orr.w	r2, r3, #8
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010344:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f000 fd5a 	bl	8010e00 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 801034c:	bf00      	nop
 801034e:	3728      	adds	r7, #40	; 0x28
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}
 8010354:	42028000 	.word	0x42028000
 8010358:	42028300 	.word	0x42028300

0801035c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 801035c:	b480      	push	{r7}
 801035e:	b083      	sub	sp, #12
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8010364:	bf00      	nop
 8010366:	370c      	adds	r7, #12
 8010368:	46bd      	mov	sp, r7
 801036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036e:	4770      	bx	lr

08010370 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8010370:	b480      	push	{r7}
 8010372:	b083      	sub	sp, #12
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8010378:	bf00      	nop
 801037a:	370c      	adds	r7, #12
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr

08010384 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 801038c:	bf00      	nop
 801038e:	370c      	adds	r7, #12
 8010390:	46bd      	mov	sp, r7
 8010392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010396:	4770      	bx	lr

08010398 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8010398:	b590      	push	{r4, r7, lr}
 801039a:	b0b7      	sub	sp, #220	; 0xdc
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80103a2:	2300      	movs	r3, #0
 80103a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80103a8:	2300      	movs	r3, #0
 80103aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80103b2:	2b01      	cmp	r3, #1
 80103b4:	d101      	bne.n	80103ba <HAL_ADC_ConfigChannel+0x22>
 80103b6:	2302      	movs	r3, #2
 80103b8:	e3c1      	b.n	8010b3e <HAL_ADC_ConfigChannel+0x7a6>
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2201      	movs	r2, #1
 80103be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7ff fb87 	bl	800fada <LL_ADC_REG_IsConversionOngoing>
 80103cc:	4603      	mov	r3, r0
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	f040 83a6 	bne.w	8010b20 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6818      	ldr	r0, [r3, #0]
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	6859      	ldr	r1, [r3, #4]
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	461a      	mov	r2, r3
 80103e2:	f7ff fa46 	bl	800f872 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7ff fb75 	bl	800fada <LL_ADC_REG_IsConversionOngoing>
 80103f0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7ff fb81 	bl	800fb00 <LL_ADC_INJ_IsConversionOngoing>
 80103fe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8010402:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010406:	2b00      	cmp	r3, #0
 8010408:	f040 81c1 	bne.w	801078e <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801040c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010410:	2b00      	cmp	r3, #0
 8010412:	f040 81bc 	bne.w	801078e <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	689b      	ldr	r3, [r3, #8]
 801041a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801041e:	d10f      	bne.n	8010440 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6818      	ldr	r0, [r3, #0]
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	2200      	movs	r2, #0
 801042a:	4619      	mov	r1, r3
 801042c:	f7ff fa60 	bl	800f8f0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010438:	4618      	mov	r0, r3
 801043a:	f7ff f9f4 	bl	800f826 <LL_ADC_SetSamplingTimeCommonConfig>
 801043e:	e00e      	b.n	801045e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6818      	ldr	r0, [r3, #0]
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	6819      	ldr	r1, [r3, #0]
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	689b      	ldr	r3, [r3, #8]
 801044c:	461a      	mov	r2, r3
 801044e:	f7ff fa4f 	bl	800f8f0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	2100      	movs	r1, #0
 8010458:	4618      	mov	r0, r3
 801045a:	f7ff f9e4 	bl	800f826 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	695a      	ldr	r2, [r3, #20]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	68db      	ldr	r3, [r3, #12]
 8010468:	08db      	lsrs	r3, r3, #3
 801046a:	f003 0303 	and.w	r3, r3, #3
 801046e:	005b      	lsls	r3, r3, #1
 8010470:	fa02 f303 	lsl.w	r3, r2, r3
 8010474:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	691b      	ldr	r3, [r3, #16]
 801047c:	2b04      	cmp	r3, #4
 801047e:	d00a      	beq.n	8010496 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6818      	ldr	r0, [r3, #0]
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	6919      	ldr	r1, [r3, #16]
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	681a      	ldr	r2, [r3, #0]
 801048c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010490:	f7ff f974 	bl	800f77c <LL_ADC_SetOffset>
 8010494:	e17b      	b.n	801078e <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	2100      	movs	r1, #0
 801049c:	4618      	mov	r0, r3
 801049e:	f7ff f991 	bl	800f7c4 <LL_ADC_GetOffsetChannel>
 80104a2:	4603      	mov	r3, r0
 80104a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d10a      	bne.n	80104c2 <HAL_ADC_ConfigChannel+0x12a>
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	2100      	movs	r1, #0
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7ff f986 	bl	800f7c4 <LL_ADC_GetOffsetChannel>
 80104b8:	4603      	mov	r3, r0
 80104ba:	0e9b      	lsrs	r3, r3, #26
 80104bc:	f003 021f 	and.w	r2, r3, #31
 80104c0:	e01e      	b.n	8010500 <HAL_ADC_ConfigChannel+0x168>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	2100      	movs	r1, #0
 80104c8:	4618      	mov	r0, r3
 80104ca:	f7ff f97b 	bl	800f7c4 <LL_ADC_GetOffsetChannel>
 80104ce:	4603      	mov	r3, r0
 80104d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80104d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80104d8:	fa93 f3a3 	rbit	r3, r3
 80104dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80104e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80104e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80104e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d101      	bne.n	80104f4 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80104f0:	2320      	movs	r3, #32
 80104f2:	e004      	b.n	80104fe <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80104f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80104f8:	fab3 f383 	clz	r3, r3
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010508:	2b00      	cmp	r3, #0
 801050a:	d105      	bne.n	8010518 <HAL_ADC_ConfigChannel+0x180>
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	0e9b      	lsrs	r3, r3, #26
 8010512:	f003 031f 	and.w	r3, r3, #31
 8010516:	e018      	b.n	801054a <HAL_ADC_ConfigChannel+0x1b2>
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010520:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010524:	fa93 f3a3 	rbit	r3, r3
 8010528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 801052c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8010534:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010538:	2b00      	cmp	r3, #0
 801053a:	d101      	bne.n	8010540 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 801053c:	2320      	movs	r3, #32
 801053e:	e004      	b.n	801054a <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8010540:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010544:	fab3 f383 	clz	r3, r3
 8010548:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801054a:	429a      	cmp	r2, r3
 801054c:	d106      	bne.n	801055c <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	2200      	movs	r2, #0
 8010554:	2100      	movs	r1, #0
 8010556:	4618      	mov	r0, r3
 8010558:	f7ff f94a 	bl	800f7f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	2101      	movs	r1, #1
 8010562:	4618      	mov	r0, r3
 8010564:	f7ff f92e 	bl	800f7c4 <LL_ADC_GetOffsetChannel>
 8010568:	4603      	mov	r3, r0
 801056a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801056e:	2b00      	cmp	r3, #0
 8010570:	d10a      	bne.n	8010588 <HAL_ADC_ConfigChannel+0x1f0>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	2101      	movs	r1, #1
 8010578:	4618      	mov	r0, r3
 801057a:	f7ff f923 	bl	800f7c4 <LL_ADC_GetOffsetChannel>
 801057e:	4603      	mov	r3, r0
 8010580:	0e9b      	lsrs	r3, r3, #26
 8010582:	f003 021f 	and.w	r2, r3, #31
 8010586:	e01e      	b.n	80105c6 <HAL_ADC_ConfigChannel+0x22e>
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2101      	movs	r1, #1
 801058e:	4618      	mov	r0, r3
 8010590:	f7ff f918 	bl	800f7c4 <LL_ADC_GetOffsetChannel>
 8010594:	4603      	mov	r3, r0
 8010596:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801059a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801059e:	fa93 f3a3 	rbit	r3, r3
 80105a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80105a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80105aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80105ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d101      	bne.n	80105ba <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80105b6:	2320      	movs	r3, #32
 80105b8:	e004      	b.n	80105c4 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80105ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80105be:	fab3 f383 	clz	r3, r3
 80105c2:	b2db      	uxtb	r3, r3
 80105c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d105      	bne.n	80105de <HAL_ADC_ConfigChannel+0x246>
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	0e9b      	lsrs	r3, r3, #26
 80105d8:	f003 031f 	and.w	r3, r3, #31
 80105dc:	e018      	b.n	8010610 <HAL_ADC_ConfigChannel+0x278>
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80105e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80105ea:	fa93 f3a3 	rbit	r3, r3
 80105ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80105f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80105fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d101      	bne.n	8010606 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8010602:	2320      	movs	r3, #32
 8010604:	e004      	b.n	8010610 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8010606:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801060a:	fab3 f383 	clz	r3, r3
 801060e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8010610:	429a      	cmp	r2, r3
 8010612:	d106      	bne.n	8010622 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	2200      	movs	r2, #0
 801061a:	2101      	movs	r1, #1
 801061c:	4618      	mov	r0, r3
 801061e:	f7ff f8e7 	bl	800f7f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	2102      	movs	r1, #2
 8010628:	4618      	mov	r0, r3
 801062a:	f7ff f8cb 	bl	800f7c4 <LL_ADC_GetOffsetChannel>
 801062e:	4603      	mov	r3, r0
 8010630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010634:	2b00      	cmp	r3, #0
 8010636:	d10a      	bne.n	801064e <HAL_ADC_ConfigChannel+0x2b6>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	2102      	movs	r1, #2
 801063e:	4618      	mov	r0, r3
 8010640:	f7ff f8c0 	bl	800f7c4 <LL_ADC_GetOffsetChannel>
 8010644:	4603      	mov	r3, r0
 8010646:	0e9b      	lsrs	r3, r3, #26
 8010648:	f003 021f 	and.w	r2, r3, #31
 801064c:	e01e      	b.n	801068c <HAL_ADC_ConfigChannel+0x2f4>
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	2102      	movs	r1, #2
 8010654:	4618      	mov	r0, r3
 8010656:	f7ff f8b5 	bl	800f7c4 <LL_ADC_GetOffsetChannel>
 801065a:	4603      	mov	r3, r0
 801065c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010664:	fa93 f3a3 	rbit	r3, r3
 8010668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 801066c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010670:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8010674:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010678:	2b00      	cmp	r3, #0
 801067a:	d101      	bne.n	8010680 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 801067c:	2320      	movs	r3, #32
 801067e:	e004      	b.n	801068a <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8010680:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010684:	fab3 f383 	clz	r3, r3
 8010688:	b2db      	uxtb	r3, r3
 801068a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010694:	2b00      	cmp	r3, #0
 8010696:	d105      	bne.n	80106a4 <HAL_ADC_ConfigChannel+0x30c>
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	0e9b      	lsrs	r3, r3, #26
 801069e:	f003 031f 	and.w	r3, r3, #31
 80106a2:	e016      	b.n	80106d2 <HAL_ADC_ConfigChannel+0x33a>
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80106ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80106b0:	fa93 f3a3 	rbit	r3, r3
 80106b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80106b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80106b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80106bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d101      	bne.n	80106c8 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80106c4:	2320      	movs	r3, #32
 80106c6:	e004      	b.n	80106d2 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80106c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80106cc:	fab3 f383 	clz	r3, r3
 80106d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d106      	bne.n	80106e4 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	2200      	movs	r2, #0
 80106dc:	2102      	movs	r1, #2
 80106de:	4618      	mov	r0, r3
 80106e0:	f7ff f886 	bl	800f7f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2103      	movs	r1, #3
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7ff f86a 	bl	800f7c4 <LL_ADC_GetOffsetChannel>
 80106f0:	4603      	mov	r3, r0
 80106f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d10a      	bne.n	8010710 <HAL_ADC_ConfigChannel+0x378>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	2103      	movs	r1, #3
 8010700:	4618      	mov	r0, r3
 8010702:	f7ff f85f 	bl	800f7c4 <LL_ADC_GetOffsetChannel>
 8010706:	4603      	mov	r3, r0
 8010708:	0e9b      	lsrs	r3, r3, #26
 801070a:	f003 021f 	and.w	r2, r3, #31
 801070e:	e017      	b.n	8010740 <HAL_ADC_ConfigChannel+0x3a8>
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	2103      	movs	r1, #3
 8010716:	4618      	mov	r0, r3
 8010718:	f7ff f854 	bl	800f7c4 <LL_ADC_GetOffsetChannel>
 801071c:	4603      	mov	r3, r0
 801071e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010722:	fa93 f3a3 	rbit	r3, r3
 8010726:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8010728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801072a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 801072c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801072e:	2b00      	cmp	r3, #0
 8010730:	d101      	bne.n	8010736 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8010732:	2320      	movs	r3, #32
 8010734:	e003      	b.n	801073e <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8010736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010738:	fab3 f383 	clz	r3, r3
 801073c:	b2db      	uxtb	r3, r3
 801073e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010748:	2b00      	cmp	r3, #0
 801074a:	d105      	bne.n	8010758 <HAL_ADC_ConfigChannel+0x3c0>
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	0e9b      	lsrs	r3, r3, #26
 8010752:	f003 031f 	and.w	r3, r3, #31
 8010756:	e011      	b.n	801077c <HAL_ADC_ConfigChannel+0x3e4>
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801075e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010760:	fa93 f3a3 	rbit	r3, r3
 8010764:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8010766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010768:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 801076a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801076c:	2b00      	cmp	r3, #0
 801076e:	d101      	bne.n	8010774 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8010770:	2320      	movs	r3, #32
 8010772:	e003      	b.n	801077c <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8010774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010776:	fab3 f383 	clz	r3, r3
 801077a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801077c:	429a      	cmp	r2, r3
 801077e:	d106      	bne.n	801078e <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	2200      	movs	r2, #0
 8010786:	2103      	movs	r1, #3
 8010788:	4618      	mov	r0, r3
 801078a:	f7ff f831 	bl	800f7f0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	4618      	mov	r0, r3
 8010794:	f7ff f97a 	bl	800fa8c <LL_ADC_IsEnabled>
 8010798:	4603      	mov	r3, r0
 801079a:	2b00      	cmp	r3, #0
 801079c:	f040 81c9 	bne.w	8010b32 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6818      	ldr	r0, [r3, #0]
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	6819      	ldr	r1, [r3, #0]
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	68db      	ldr	r3, [r3, #12]
 80107ac:	461a      	mov	r2, r3
 80107ae:	f7ff f8cb 	bl	800f948 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	68db      	ldr	r3, [r3, #12]
 80107b6:	4a8f      	ldr	r2, [pc, #572]	; (80109f4 <HAL_ADC_ConfigChannel+0x65c>)
 80107b8:	4293      	cmp	r3, r2
 80107ba:	f040 8131 	bne.w	8010a20 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d10b      	bne.n	80107e6 <HAL_ADC_ConfigChannel+0x44e>
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	0e9b      	lsrs	r3, r3, #26
 80107d4:	3301      	adds	r3, #1
 80107d6:	f003 031f 	and.w	r3, r3, #31
 80107da:	2b09      	cmp	r3, #9
 80107dc:	bf94      	ite	ls
 80107de:	2301      	movls	r3, #1
 80107e0:	2300      	movhi	r3, #0
 80107e2:	b2db      	uxtb	r3, r3
 80107e4:	e019      	b.n	801081a <HAL_ADC_ConfigChannel+0x482>
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80107ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107ee:	fa93 f3a3 	rbit	r3, r3
 80107f2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80107f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107f6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80107f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d101      	bne.n	8010802 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 80107fe:	2320      	movs	r3, #32
 8010800:	e003      	b.n	801080a <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8010802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010804:	fab3 f383 	clz	r3, r3
 8010808:	b2db      	uxtb	r3, r3
 801080a:	3301      	adds	r3, #1
 801080c:	f003 031f 	and.w	r3, r3, #31
 8010810:	2b09      	cmp	r3, #9
 8010812:	bf94      	ite	ls
 8010814:	2301      	movls	r3, #1
 8010816:	2300      	movhi	r3, #0
 8010818:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801081a:	2b00      	cmp	r3, #0
 801081c:	d079      	beq.n	8010912 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010826:	2b00      	cmp	r3, #0
 8010828:	d107      	bne.n	801083a <HAL_ADC_ConfigChannel+0x4a2>
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	0e9b      	lsrs	r3, r3, #26
 8010830:	3301      	adds	r3, #1
 8010832:	069b      	lsls	r3, r3, #26
 8010834:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8010838:	e015      	b.n	8010866 <HAL_ADC_ConfigChannel+0x4ce>
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010842:	fa93 f3a3 	rbit	r3, r3
 8010846:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8010848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801084a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 801084c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801084e:	2b00      	cmp	r3, #0
 8010850:	d101      	bne.n	8010856 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8010852:	2320      	movs	r3, #32
 8010854:	e003      	b.n	801085e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8010856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010858:	fab3 f383 	clz	r3, r3
 801085c:	b2db      	uxtb	r3, r3
 801085e:	3301      	adds	r3, #1
 8010860:	069b      	lsls	r3, r3, #26
 8010862:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801086e:	2b00      	cmp	r3, #0
 8010870:	d109      	bne.n	8010886 <HAL_ADC_ConfigChannel+0x4ee>
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	0e9b      	lsrs	r3, r3, #26
 8010878:	3301      	adds	r3, #1
 801087a:	f003 031f 	and.w	r3, r3, #31
 801087e:	2101      	movs	r1, #1
 8010880:	fa01 f303 	lsl.w	r3, r1, r3
 8010884:	e017      	b.n	80108b6 <HAL_ADC_ConfigChannel+0x51e>
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801088c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801088e:	fa93 f3a3 	rbit	r3, r3
 8010892:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8010894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010896:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8010898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801089a:	2b00      	cmp	r3, #0
 801089c:	d101      	bne.n	80108a2 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 801089e:	2320      	movs	r3, #32
 80108a0:	e003      	b.n	80108aa <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80108a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108a4:	fab3 f383 	clz	r3, r3
 80108a8:	b2db      	uxtb	r3, r3
 80108aa:	3301      	adds	r3, #1
 80108ac:	f003 031f 	and.w	r3, r3, #31
 80108b0:	2101      	movs	r1, #1
 80108b2:	fa01 f303 	lsl.w	r3, r1, r3
 80108b6:	ea42 0103 	orr.w	r1, r2, r3
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d10a      	bne.n	80108dc <HAL_ADC_ConfigChannel+0x544>
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	0e9b      	lsrs	r3, r3, #26
 80108cc:	3301      	adds	r3, #1
 80108ce:	f003 021f 	and.w	r2, r3, #31
 80108d2:	4613      	mov	r3, r2
 80108d4:	005b      	lsls	r3, r3, #1
 80108d6:	4413      	add	r3, r2
 80108d8:	051b      	lsls	r3, r3, #20
 80108da:	e018      	b.n	801090e <HAL_ADC_ConfigChannel+0x576>
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80108e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e4:	fa93 f3a3 	rbit	r3, r3
 80108e8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80108ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80108ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d101      	bne.n	80108f8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80108f4:	2320      	movs	r3, #32
 80108f6:	e003      	b.n	8010900 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80108f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108fa:	fab3 f383 	clz	r3, r3
 80108fe:	b2db      	uxtb	r3, r3
 8010900:	3301      	adds	r3, #1
 8010902:	f003 021f 	and.w	r2, r3, #31
 8010906:	4613      	mov	r3, r2
 8010908:	005b      	lsls	r3, r3, #1
 801090a:	4413      	add	r3, r2
 801090c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801090e:	430b      	orrs	r3, r1
 8010910:	e081      	b.n	8010a16 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801091a:	2b00      	cmp	r3, #0
 801091c:	d107      	bne.n	801092e <HAL_ADC_ConfigChannel+0x596>
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	0e9b      	lsrs	r3, r3, #26
 8010924:	3301      	adds	r3, #1
 8010926:	069b      	lsls	r3, r3, #26
 8010928:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801092c:	e015      	b.n	801095a <HAL_ADC_ConfigChannel+0x5c2>
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010936:	fa93 f3a3 	rbit	r3, r3
 801093a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801093c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801093e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8010940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010942:	2b00      	cmp	r3, #0
 8010944:	d101      	bne.n	801094a <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8010946:	2320      	movs	r3, #32
 8010948:	e003      	b.n	8010952 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 801094a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094c:	fab3 f383 	clz	r3, r3
 8010950:	b2db      	uxtb	r3, r3
 8010952:	3301      	adds	r3, #1
 8010954:	069b      	lsls	r3, r3, #26
 8010956:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010962:	2b00      	cmp	r3, #0
 8010964:	d109      	bne.n	801097a <HAL_ADC_ConfigChannel+0x5e2>
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	0e9b      	lsrs	r3, r3, #26
 801096c:	3301      	adds	r3, #1
 801096e:	f003 031f 	and.w	r3, r3, #31
 8010972:	2101      	movs	r1, #1
 8010974:	fa01 f303 	lsl.w	r3, r1, r3
 8010978:	e017      	b.n	80109aa <HAL_ADC_ConfigChannel+0x612>
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010980:	6a3b      	ldr	r3, [r7, #32]
 8010982:	fa93 f3a3 	rbit	r3, r3
 8010986:	61fb      	str	r3, [r7, #28]
  return result;
 8010988:	69fb      	ldr	r3, [r7, #28]
 801098a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098e:	2b00      	cmp	r3, #0
 8010990:	d101      	bne.n	8010996 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8010992:	2320      	movs	r3, #32
 8010994:	e003      	b.n	801099e <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8010996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010998:	fab3 f383 	clz	r3, r3
 801099c:	b2db      	uxtb	r3, r3
 801099e:	3301      	adds	r3, #1
 80109a0:	f003 031f 	and.w	r3, r3, #31
 80109a4:	2101      	movs	r1, #1
 80109a6:	fa01 f303 	lsl.w	r3, r1, r3
 80109aa:	ea42 0103 	orr.w	r1, r2, r3
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d10d      	bne.n	80109d6 <HAL_ADC_ConfigChannel+0x63e>
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	0e9b      	lsrs	r3, r3, #26
 80109c0:	3301      	adds	r3, #1
 80109c2:	f003 021f 	and.w	r2, r3, #31
 80109c6:	4613      	mov	r3, r2
 80109c8:	005b      	lsls	r3, r3, #1
 80109ca:	4413      	add	r3, r2
 80109cc:	3b1e      	subs	r3, #30
 80109ce:	051b      	lsls	r3, r3, #20
 80109d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80109d4:	e01e      	b.n	8010a14 <HAL_ADC_ConfigChannel+0x67c>
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	fa93 f3a3 	rbit	r3, r3
 80109e2:	613b      	str	r3, [r7, #16]
  return result;
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80109e8:	69bb      	ldr	r3, [r7, #24]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d104      	bne.n	80109f8 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80109ee:	2320      	movs	r3, #32
 80109f0:	e006      	b.n	8010a00 <HAL_ADC_ConfigChannel+0x668>
 80109f2:	bf00      	nop
 80109f4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80109f8:	69bb      	ldr	r3, [r7, #24]
 80109fa:	fab3 f383 	clz	r3, r3
 80109fe:	b2db      	uxtb	r3, r3
 8010a00:	3301      	adds	r3, #1
 8010a02:	f003 021f 	and.w	r2, r3, #31
 8010a06:	4613      	mov	r3, r2
 8010a08:	005b      	lsls	r3, r3, #1
 8010a0a:	4413      	add	r3, r2
 8010a0c:	3b1e      	subs	r3, #30
 8010a0e:	051b      	lsls	r3, r3, #20
 8010a10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8010a14:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8010a16:	683a      	ldr	r2, [r7, #0]
 8010a18:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	f7fe ff68 	bl	800f8f0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	681a      	ldr	r2, [r3, #0]
 8010a24:	4b48      	ldr	r3, [pc, #288]	; (8010b48 <HAL_ADC_ConfigChannel+0x7b0>)
 8010a26:	4013      	ands	r3, r2
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	f000 8082 	beq.w	8010b32 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8010a2e:	4847      	ldr	r0, [pc, #284]	; (8010b4c <HAL_ADC_ConfigChannel+0x7b4>)
 8010a30:	f7fe fe96 	bl	800f760 <LL_ADC_GetCommonPathInternalCh>
 8010a34:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8010a38:	4845      	ldr	r0, [pc, #276]	; (8010b50 <HAL_ADC_ConfigChannel+0x7b8>)
 8010a3a:	f7ff f827 	bl	800fa8c <LL_ADC_IsEnabled>
 8010a3e:	4604      	mov	r4, r0
 8010a40:	4844      	ldr	r0, [pc, #272]	; (8010b54 <HAL_ADC_ConfigChannel+0x7bc>)
 8010a42:	f7ff f823 	bl	800fa8c <LL_ADC_IsEnabled>
 8010a46:	4603      	mov	r3, r0
 8010a48:	4323      	orrs	r3, r4
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d15e      	bne.n	8010b0c <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	4a41      	ldr	r2, [pc, #260]	; (8010b58 <HAL_ADC_ConfigChannel+0x7c0>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d127      	bne.n	8010aa8 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8010a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d121      	bne.n	8010aa8 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4a39      	ldr	r2, [pc, #228]	; (8010b50 <HAL_ADC_ConfigChannel+0x7b8>)
 8010a6a:	4293      	cmp	r3, r2
 8010a6c:	d161      	bne.n	8010b32 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8010a6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010a72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010a76:	4619      	mov	r1, r3
 8010a78:	4834      	ldr	r0, [pc, #208]	; (8010b4c <HAL_ADC_ConfigChannel+0x7b4>)
 8010a7a:	f7fe fe5e 	bl	800f73a <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8010a7e:	4b37      	ldr	r3, [pc, #220]	; (8010b5c <HAL_ADC_ConfigChannel+0x7c4>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	099b      	lsrs	r3, r3, #6
 8010a84:	4a36      	ldr	r2, [pc, #216]	; (8010b60 <HAL_ADC_ConfigChannel+0x7c8>)
 8010a86:	fba2 2303 	umull	r2, r3, r2, r3
 8010a8a:	099b      	lsrs	r3, r3, #6
 8010a8c:	1c5a      	adds	r2, r3, #1
 8010a8e:	4613      	mov	r3, r2
 8010a90:	005b      	lsls	r3, r3, #1
 8010a92:	4413      	add	r3, r2
 8010a94:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8010a96:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8010a98:	e002      	b.n	8010aa0 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	3b01      	subs	r3, #1
 8010a9e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d1f9      	bne.n	8010a9a <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8010aa6:	e044      	b.n	8010b32 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	4a2d      	ldr	r2, [pc, #180]	; (8010b64 <HAL_ADC_ConfigChannel+0x7cc>)
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	d113      	bne.n	8010ada <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8010ab2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d10d      	bne.n	8010ada <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	4a23      	ldr	r2, [pc, #140]	; (8010b50 <HAL_ADC_ConfigChannel+0x7b8>)
 8010ac4:	4293      	cmp	r3, r2
 8010ac6:	d134      	bne.n	8010b32 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8010ac8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	481e      	ldr	r0, [pc, #120]	; (8010b4c <HAL_ADC_ConfigChannel+0x7b4>)
 8010ad4:	f7fe fe31 	bl	800f73a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8010ad8:	e02b      	b.n	8010b32 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	4a22      	ldr	r2, [pc, #136]	; (8010b68 <HAL_ADC_ConfigChannel+0x7d0>)
 8010ae0:	4293      	cmp	r3, r2
 8010ae2:	d126      	bne.n	8010b32 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8010ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d120      	bne.n	8010b32 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	4a16      	ldr	r2, [pc, #88]	; (8010b50 <HAL_ADC_ConfigChannel+0x7b8>)
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d11b      	bne.n	8010b32 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8010afa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010afe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010b02:	4619      	mov	r1, r3
 8010b04:	4811      	ldr	r0, [pc, #68]	; (8010b4c <HAL_ADC_ConfigChannel+0x7b4>)
 8010b06:	f7fe fe18 	bl	800f73a <LL_ADC_SetCommonPathInternalCh>
 8010b0a:	e012      	b.n	8010b32 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b10:	f043 0220 	orr.w	r2, r3, #32
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8010b18:	2301      	movs	r3, #1
 8010b1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8010b1e:	e008      	b.n	8010b32 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b24:	f043 0220 	orr.w	r2, r3, #32
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2200      	movs	r2, #0
 8010b36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8010b3a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	37dc      	adds	r7, #220	; 0xdc
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd90      	pop	{r4, r7, pc}
 8010b46:	bf00      	nop
 8010b48:	80080000 	.word	0x80080000
 8010b4c:	42028300 	.word	0x42028300
 8010b50:	42028000 	.word	0x42028000
 8010b54:	42028100 	.word	0x42028100
 8010b58:	c7520000 	.word	0xc7520000
 8010b5c:	20000004 	.word	0x20000004
 8010b60:	053e2d63 	.word	0x053e2d63
 8010b64:	cb840000 	.word	0xcb840000
 8010b68:	80000001 	.word	0x80000001

08010b6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b084      	sub	sp, #16
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8010b74:	2300      	movs	r3, #0
 8010b76:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f7fe ff85 	bl	800fa8c <LL_ADC_IsEnabled>
 8010b82:	4603      	mov	r3, r0
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d169      	bne.n	8010c5c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	689a      	ldr	r2, [r3, #8]
 8010b8e:	4b36      	ldr	r3, [pc, #216]	; (8010c68 <ADC_Enable+0xfc>)
 8010b90:	4013      	ands	r3, r2
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d00d      	beq.n	8010bb2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b9a:	f043 0210 	orr.w	r2, r3, #16
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ba6:	f043 0201 	orr.w	r2, r3, #1
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	e055      	b.n	8010c5e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7fe ff54 	bl	800fa64 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8010bbc:	482b      	ldr	r0, [pc, #172]	; (8010c6c <ADC_Enable+0x100>)
 8010bbe:	f7fe fdcf 	bl	800f760 <LL_ADC_GetCommonPathInternalCh>
 8010bc2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8010bc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d013      	beq.n	8010bf4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8010bcc:	4b28      	ldr	r3, [pc, #160]	; (8010c70 <ADC_Enable+0x104>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	099b      	lsrs	r3, r3, #6
 8010bd2:	4a28      	ldr	r2, [pc, #160]	; (8010c74 <ADC_Enable+0x108>)
 8010bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8010bd8:	099b      	lsrs	r3, r3, #6
 8010bda:	1c5a      	adds	r2, r3, #1
 8010bdc:	4613      	mov	r3, r2
 8010bde:	005b      	lsls	r3, r3, #1
 8010be0:	4413      	add	r3, r2
 8010be2:	009b      	lsls	r3, r3, #2
 8010be4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8010be6:	e002      	b.n	8010bee <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	3b01      	subs	r3, #1
 8010bec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d1f9      	bne.n	8010be8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8010bf4:	f7fe fd82 	bl	800f6fc <HAL_GetTick>
 8010bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8010bfa:	e028      	b.n	8010c4e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7fe ff43 	bl	800fa8c <LL_ADC_IsEnabled>
 8010c06:	4603      	mov	r3, r0
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d104      	bne.n	8010c16 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7fe ff27 	bl	800fa64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8010c16:	f7fe fd71 	bl	800f6fc <HAL_GetTick>
 8010c1a:	4602      	mov	r2, r0
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	1ad3      	subs	r3, r2, r3
 8010c20:	2b02      	cmp	r3, #2
 8010c22:	d914      	bls.n	8010c4e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	f003 0301 	and.w	r3, r3, #1
 8010c2e:	2b01      	cmp	r3, #1
 8010c30:	d00d      	beq.n	8010c4e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c36:	f043 0210 	orr.w	r2, r3, #16
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c42:	f043 0201 	orr.w	r2, r3, #1
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	e007      	b.n	8010c5e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	f003 0301 	and.w	r3, r3, #1
 8010c58:	2b01      	cmp	r3, #1
 8010c5a:	d1cf      	bne.n	8010bfc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8010c5c:	2300      	movs	r3, #0
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3710      	adds	r7, #16
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}
 8010c66:	bf00      	nop
 8010c68:	8000003f 	.word	0x8000003f
 8010c6c:	42028300 	.word	0x42028300
 8010c70:	20000004 	.word	0x20000004
 8010c74:	053e2d63 	.word	0x053e2d63

08010c78 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b084      	sub	sp, #16
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c84:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c8a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d14b      	bne.n	8010d2a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	f003 0308 	and.w	r3, r3, #8
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d021      	beq.n	8010cf0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f7fe fdcb 	bl	800f84c <LL_ADC_REG_IsTriggerSourceSWStart>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d032      	beq.n	8010d22 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	68db      	ldr	r3, [r3, #12]
 8010cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d12b      	bne.n	8010d22 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d11f      	bne.n	8010d22 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ce6:	f043 0201 	orr.w	r2, r3, #1
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	659a      	str	r2, [r3, #88]	; 0x58
 8010cee:	e018      	b.n	8010d22 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	68db      	ldr	r3, [r3, #12]
 8010cf6:	f003 0302 	and.w	r3, r3, #2
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d111      	bne.n	8010d22 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d105      	bne.n	8010d22 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d1a:	f043 0201 	orr.w	r2, r3, #1
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8010d22:	68f8      	ldr	r0, [r7, #12]
 8010d24:	f7f0 ff68 	bl	8001bf8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8010d28:	e00e      	b.n	8010d48 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d2e:	f003 0310 	and.w	r3, r3, #16
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d003      	beq.n	8010d3e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8010d36:	68f8      	ldr	r0, [r7, #12]
 8010d38:	f7ff fb24 	bl	8010384 <HAL_ADC_ErrorCallback>
}
 8010d3c:	e004      	b.n	8010d48 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	4798      	blx	r3
}
 8010d48:	bf00      	nop
 8010d4a:	3710      	adds	r7, #16
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}

08010d50 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d5c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	f7ff fafc 	bl	801035c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010d64:	bf00      	nop
 8010d66:	3710      	adds	r7, #16
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b084      	sub	sp, #16
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d78:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d8a:	f043 0204 	orr.w	r2, r3, #4
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8010d92:	68f8      	ldr	r0, [r7, #12]
 8010d94:	f7ff faf6 	bl	8010384 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010d98:	bf00      	nop
 8010d9a:	3710      	adds	r7, #16
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <LL_ADC_IsEnabled>:
{
 8010da0:	b480      	push	{r7}
 8010da2:	b083      	sub	sp, #12
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	689b      	ldr	r3, [r3, #8]
 8010dac:	f003 0301 	and.w	r3, r3, #1
 8010db0:	2b01      	cmp	r3, #1
 8010db2:	d101      	bne.n	8010db8 <LL_ADC_IsEnabled+0x18>
 8010db4:	2301      	movs	r3, #1
 8010db6:	e000      	b.n	8010dba <LL_ADC_IsEnabled+0x1a>
 8010db8:	2300      	movs	r3, #0
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	370c      	adds	r7, #12
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc4:	4770      	bx	lr

08010dc6 <LL_ADC_REG_IsConversionOngoing>:
{
 8010dc6:	b480      	push	{r7}
 8010dc8:	b083      	sub	sp, #12
 8010dca:	af00      	add	r7, sp, #0
 8010dcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	689b      	ldr	r3, [r3, #8]
 8010dd2:	f003 0304 	and.w	r3, r3, #4
 8010dd6:	2b04      	cmp	r3, #4
 8010dd8:	d101      	bne.n	8010dde <LL_ADC_REG_IsConversionOngoing+0x18>
 8010dda:	2301      	movs	r3, #1
 8010ddc:	e000      	b.n	8010de0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8010dde:	2300      	movs	r3, #0
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	370c      	adds	r7, #12
 8010de4:	46bd      	mov	sp, r7
 8010de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dea:	4770      	bx	lr

08010dec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8010df4:	bf00      	nop
 8010df6:	370c      	adds	r7, #12
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfe:	4770      	bx	lr

08010e00 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b083      	sub	sp, #12
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8010e08:	bf00      	nop
 8010e0a:	370c      	adds	r7, #12
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr

08010e14 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8010e1c:	bf00      	nop
 8010e1e:	370c      	adds	r7, #12
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr

08010e28 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b083      	sub	sp, #12
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8010e30:	bf00      	nop
 8010e32:	370c      	adds	r7, #12
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr

08010e3c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	b083      	sub	sp, #12
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8010e44:	bf00      	nop
 8010e46:	370c      	adds	r7, #12
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4e:	4770      	bx	lr

08010e50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8010e50:	b590      	push	{r4, r7, lr}
 8010e52:	b0a1      	sub	sp, #132	; 0x84
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8010e66:	2b01      	cmp	r3, #1
 8010e68:	d101      	bne.n	8010e6e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8010e6a:	2302      	movs	r3, #2
 8010e6c:	e089      	b.n	8010f82 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2201      	movs	r2, #1
 8010e72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8010e76:	2300      	movs	r3, #0
 8010e78:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	4a42      	ldr	r2, [pc, #264]	; (8010f8c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d102      	bne.n	8010e8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8010e88:	4b41      	ldr	r3, [pc, #260]	; (8010f90 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8010e8a:	60fb      	str	r3, [r7, #12]
 8010e8c:	e001      	b.n	8010e92 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8010e8e:	2300      	movs	r3, #0
 8010e90:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d10b      	bne.n	8010eb0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e9c:	f043 0220 	orr.w	r2, r3, #32
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8010eac:	2301      	movs	r3, #1
 8010eae:	e068      	b.n	8010f82 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7ff ff87 	bl	8010dc6 <LL_ADC_REG_IsConversionOngoing>
 8010eb8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7ff ff81 	bl	8010dc6 <LL_ADC_REG_IsConversionOngoing>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d14a      	bne.n	8010f60 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8010eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d147      	bne.n	8010f60 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8010ed0:	4b30      	ldr	r3, [pc, #192]	; (8010f94 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8010ed2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d027      	beq.n	8010f2c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8010edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ede:	689b      	ldr	r3, [r3, #8]
 8010ee0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	6859      	ldr	r1, [r3, #4]
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010eee:	035b      	lsls	r3, r3, #13
 8010ef0:	430b      	orrs	r3, r1
 8010ef2:	431a      	orrs	r2, r3
 8010ef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ef6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8010ef8:	4824      	ldr	r0, [pc, #144]	; (8010f8c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8010efa:	f7ff ff51 	bl	8010da0 <LL_ADC_IsEnabled>
 8010efe:	4604      	mov	r4, r0
 8010f00:	4823      	ldr	r0, [pc, #140]	; (8010f90 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8010f02:	f7ff ff4d 	bl	8010da0 <LL_ADC_IsEnabled>
 8010f06:	4603      	mov	r3, r0
 8010f08:	4323      	orrs	r3, r4
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d132      	bne.n	8010f74 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8010f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f10:	689b      	ldr	r3, [r3, #8]
 8010f12:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8010f16:	f023 030f 	bic.w	r3, r3, #15
 8010f1a:	683a      	ldr	r2, [r7, #0]
 8010f1c:	6811      	ldr	r1, [r2, #0]
 8010f1e:	683a      	ldr	r2, [r7, #0]
 8010f20:	6892      	ldr	r2, [r2, #8]
 8010f22:	430a      	orrs	r2, r1
 8010f24:	431a      	orrs	r2, r3
 8010f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f28:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8010f2a:	e023      	b.n	8010f74 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8010f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f2e:	689b      	ldr	r3, [r3, #8]
 8010f30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f36:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8010f38:	4814      	ldr	r0, [pc, #80]	; (8010f8c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8010f3a:	f7ff ff31 	bl	8010da0 <LL_ADC_IsEnabled>
 8010f3e:	4604      	mov	r4, r0
 8010f40:	4813      	ldr	r0, [pc, #76]	; (8010f90 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8010f42:	f7ff ff2d 	bl	8010da0 <LL_ADC_IsEnabled>
 8010f46:	4603      	mov	r3, r0
 8010f48:	4323      	orrs	r3, r4
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d112      	bne.n	8010f74 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8010f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010f50:	689b      	ldr	r3, [r3, #8]
 8010f52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8010f56:	f023 030f 	bic.w	r3, r3, #15
 8010f5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010f5c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8010f5e:	e009      	b.n	8010f74 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f64:	f043 0220 	orr.w	r2, r3, #32
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010f72:	e000      	b.n	8010f76 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8010f74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2200      	movs	r2, #0
 8010f7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8010f7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3784      	adds	r7, #132	; 0x84
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd90      	pop	{r4, r7, pc}
 8010f8a:	bf00      	nop
 8010f8c:	42028000 	.word	0x42028000
 8010f90:	42028100 	.word	0x42028100
 8010f94:	42028300 	.word	0x42028300

08010f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010f98:	b480      	push	{r7}
 8010f9a:	b085      	sub	sp, #20
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f003 0307 	and.w	r3, r3, #7
 8010fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010fa8:	4b0c      	ldr	r3, [pc, #48]	; (8010fdc <__NVIC_SetPriorityGrouping+0x44>)
 8010faa:	68db      	ldr	r3, [r3, #12]
 8010fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010fae:	68ba      	ldr	r2, [r7, #8]
 8010fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010fb4:	4013      	ands	r3, r2
 8010fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010fca:	4a04      	ldr	r2, [pc, #16]	; (8010fdc <__NVIC_SetPriorityGrouping+0x44>)
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	60d3      	str	r3, [r2, #12]
}
 8010fd0:	bf00      	nop
 8010fd2:	3714      	adds	r7, #20
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fda:	4770      	bx	lr
 8010fdc:	e000ed00 	.word	0xe000ed00

08010fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010fe4:	4b04      	ldr	r3, [pc, #16]	; (8010ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8010fe6:	68db      	ldr	r3, [r3, #12]
 8010fe8:	0a1b      	lsrs	r3, r3, #8
 8010fea:	f003 0307 	and.w	r3, r3, #7
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr
 8010ff8:	e000ed00 	.word	0xe000ed00

08010ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b083      	sub	sp, #12
 8011000:	af00      	add	r7, sp, #0
 8011002:	4603      	mov	r3, r0
 8011004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801100a:	2b00      	cmp	r3, #0
 801100c:	db0b      	blt.n	8011026 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801100e:	79fb      	ldrb	r3, [r7, #7]
 8011010:	f003 021f 	and.w	r2, r3, #31
 8011014:	4907      	ldr	r1, [pc, #28]	; (8011034 <__NVIC_EnableIRQ+0x38>)
 8011016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801101a:	095b      	lsrs	r3, r3, #5
 801101c:	2001      	movs	r0, #1
 801101e:	fa00 f202 	lsl.w	r2, r0, r2
 8011022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8011026:	bf00      	nop
 8011028:	370c      	adds	r7, #12
 801102a:	46bd      	mov	sp, r7
 801102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011030:	4770      	bx	lr
 8011032:	bf00      	nop
 8011034:	e000e100 	.word	0xe000e100

08011038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011038:	b480      	push	{r7}
 801103a:	b083      	sub	sp, #12
 801103c:	af00      	add	r7, sp, #0
 801103e:	4603      	mov	r3, r0
 8011040:	6039      	str	r1, [r7, #0]
 8011042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011048:	2b00      	cmp	r3, #0
 801104a:	db0a      	blt.n	8011062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	b2da      	uxtb	r2, r3
 8011050:	490c      	ldr	r1, [pc, #48]	; (8011084 <__NVIC_SetPriority+0x4c>)
 8011052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011056:	0152      	lsls	r2, r2, #5
 8011058:	b2d2      	uxtb	r2, r2
 801105a:	440b      	add	r3, r1
 801105c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011060:	e00a      	b.n	8011078 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	b2da      	uxtb	r2, r3
 8011066:	4908      	ldr	r1, [pc, #32]	; (8011088 <__NVIC_SetPriority+0x50>)
 8011068:	79fb      	ldrb	r3, [r7, #7]
 801106a:	f003 030f 	and.w	r3, r3, #15
 801106e:	3b04      	subs	r3, #4
 8011070:	0152      	lsls	r2, r2, #5
 8011072:	b2d2      	uxtb	r2, r2
 8011074:	440b      	add	r3, r1
 8011076:	761a      	strb	r2, [r3, #24]
}
 8011078:	bf00      	nop
 801107a:	370c      	adds	r7, #12
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr
 8011084:	e000e100 	.word	0xe000e100
 8011088:	e000ed00 	.word	0xe000ed00

0801108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801108c:	b480      	push	{r7}
 801108e:	b089      	sub	sp, #36	; 0x24
 8011090:	af00      	add	r7, sp, #0
 8011092:	60f8      	str	r0, [r7, #12]
 8011094:	60b9      	str	r1, [r7, #8]
 8011096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f003 0307 	and.w	r3, r3, #7
 801109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80110a0:	69fb      	ldr	r3, [r7, #28]
 80110a2:	f1c3 0307 	rsb	r3, r3, #7
 80110a6:	2b03      	cmp	r3, #3
 80110a8:	bf28      	it	cs
 80110aa:	2303      	movcs	r3, #3
 80110ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80110ae:	69fb      	ldr	r3, [r7, #28]
 80110b0:	3303      	adds	r3, #3
 80110b2:	2b06      	cmp	r3, #6
 80110b4:	d902      	bls.n	80110bc <NVIC_EncodePriority+0x30>
 80110b6:	69fb      	ldr	r3, [r7, #28]
 80110b8:	3b04      	subs	r3, #4
 80110ba:	e000      	b.n	80110be <NVIC_EncodePriority+0x32>
 80110bc:	2300      	movs	r3, #0
 80110be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80110c0:	f04f 32ff 	mov.w	r2, #4294967295
 80110c4:	69bb      	ldr	r3, [r7, #24]
 80110c6:	fa02 f303 	lsl.w	r3, r2, r3
 80110ca:	43da      	mvns	r2, r3
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	401a      	ands	r2, r3
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80110d4:	f04f 31ff 	mov.w	r1, #4294967295
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	fa01 f303 	lsl.w	r3, r1, r3
 80110de:	43d9      	mvns	r1, r3
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80110e4:	4313      	orrs	r3, r2
         );
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	3724      	adds	r7, #36	; 0x24
 80110ea:	46bd      	mov	sp, r7
 80110ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f0:	4770      	bx	lr

080110f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80110f2:	b580      	push	{r7, lr}
 80110f4:	b082      	sub	sp, #8
 80110f6:	af00      	add	r7, sp, #0
 80110f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f7ff ff4c 	bl	8010f98 <__NVIC_SetPriorityGrouping>
}
 8011100:	bf00      	nop
 8011102:	3708      	adds	r7, #8
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b086      	sub	sp, #24
 801110c:	af00      	add	r7, sp, #0
 801110e:	4603      	mov	r3, r0
 8011110:	60b9      	str	r1, [r7, #8]
 8011112:	607a      	str	r2, [r7, #4]
 8011114:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8011116:	f7ff ff63 	bl	8010fe0 <__NVIC_GetPriorityGrouping>
 801111a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801111c:	687a      	ldr	r2, [r7, #4]
 801111e:	68b9      	ldr	r1, [r7, #8]
 8011120:	6978      	ldr	r0, [r7, #20]
 8011122:	f7ff ffb3 	bl	801108c <NVIC_EncodePriority>
 8011126:	4602      	mov	r2, r0
 8011128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801112c:	4611      	mov	r1, r2
 801112e:	4618      	mov	r0, r3
 8011130:	f7ff ff82 	bl	8011038 <__NVIC_SetPriority>
}
 8011134:	bf00      	nop
 8011136:	3718      	adds	r7, #24
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	4603      	mov	r3, r0
 8011144:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801114a:	4618      	mov	r0, r3
 801114c:	f7ff ff56 	bl	8010ffc <__NVIC_EnableIRQ>
}
 8011150:	bf00      	nop
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}

08011158 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b084      	sub	sp, #16
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d101      	bne.n	801116a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8011166:	2301      	movs	r3, #1
 8011168:	e08d      	b.n	8011286 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	461a      	mov	r2, r3
 8011170:	4b47      	ldr	r3, [pc, #284]	; (8011290 <HAL_DMA_Init+0x138>)
 8011172:	429a      	cmp	r2, r3
 8011174:	d80f      	bhi.n	8011196 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	461a      	mov	r2, r3
 801117c:	4b45      	ldr	r3, [pc, #276]	; (8011294 <HAL_DMA_Init+0x13c>)
 801117e:	4413      	add	r3, r2
 8011180:	4a45      	ldr	r2, [pc, #276]	; (8011298 <HAL_DMA_Init+0x140>)
 8011182:	fba2 2303 	umull	r2, r3, r2, r3
 8011186:	091b      	lsrs	r3, r3, #4
 8011188:	009a      	lsls	r2, r3, #2
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	4a42      	ldr	r2, [pc, #264]	; (801129c <HAL_DMA_Init+0x144>)
 8011192:	649a      	str	r2, [r3, #72]	; 0x48
 8011194:	e00e      	b.n	80111b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	461a      	mov	r2, r3
 801119c:	4b40      	ldr	r3, [pc, #256]	; (80112a0 <HAL_DMA_Init+0x148>)
 801119e:	4413      	add	r3, r2
 80111a0:	4a3d      	ldr	r2, [pc, #244]	; (8011298 <HAL_DMA_Init+0x140>)
 80111a2:	fba2 2303 	umull	r2, r3, r2, r3
 80111a6:	091b      	lsrs	r3, r3, #4
 80111a8:	009a      	lsls	r2, r3, #2
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	4a3c      	ldr	r2, [pc, #240]	; (80112a4 <HAL_DMA_Init+0x14c>)
 80111b2:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2202      	movs	r2, #2
 80111b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 80111ca:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80111ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80111d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	691b      	ldr	r3, [r3, #16]
 80111de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80111e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	699b      	ldr	r3, [r3, #24]
 80111ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80111f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6a1b      	ldr	r3, [r3, #32]
 80111f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80111f8:	68fa      	ldr	r2, [r7, #12]
 80111fa:	4313      	orrs	r3, r2
 80111fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	68fa      	ldr	r2, [r7, #12]
 8011204:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f000 faf2 	bl	80117f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	689b      	ldr	r3, [r3, #8]
 8011210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011214:	d102      	bne.n	801121c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2200      	movs	r2, #0
 801121a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	685a      	ldr	r2, [r3, #4]
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011224:	b2d2      	uxtb	r2, r2
 8011226:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801122c:	687a      	ldr	r2, [r7, #4]
 801122e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8011230:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d010      	beq.n	801125c <HAL_DMA_Init+0x104>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	2b04      	cmp	r3, #4
 8011240:	d80c      	bhi.n	801125c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f000 fb12 	bl	801186c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801124c:	2200      	movs	r2, #0
 801124e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011254:	687a      	ldr	r2, [r7, #4]
 8011256:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011258:	605a      	str	r2, [r3, #4]
 801125a:	e008      	b.n	801126e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2200      	movs	r2, #0
 8011260:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	2200      	movs	r2, #0
 8011266:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2200      	movs	r2, #0
 801126c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2200      	movs	r2, #0
 8011272:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2201      	movs	r2, #1
 8011278:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2200      	movs	r2, #0
 8011280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8011284:	2300      	movs	r3, #0
}
 8011286:	4618      	mov	r0, r3
 8011288:	3710      	adds	r7, #16
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}
 801128e:	bf00      	nop
 8011290:	40020407 	.word	0x40020407
 8011294:	bffdfff8 	.word	0xbffdfff8
 8011298:	cccccccd 	.word	0xcccccccd
 801129c:	40020000 	.word	0x40020000
 80112a0:	bffdfbf8 	.word	0xbffdfbf8
 80112a4:	40020400 	.word	0x40020400

080112a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b086      	sub	sp, #24
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	60f8      	str	r0, [r7, #12]
 80112b0:	60b9      	str	r1, [r7, #8]
 80112b2:	607a      	str	r2, [r7, #4]
 80112b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80112b6:	2300      	movs	r3, #0
 80112b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80112c0:	2b01      	cmp	r3, #1
 80112c2:	d101      	bne.n	80112c8 <HAL_DMA_Start_IT+0x20>
 80112c4:	2302      	movs	r3, #2
 80112c6:	e066      	b.n	8011396 <HAL_DMA_Start_IT+0xee>
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2201      	movs	r2, #1
 80112cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80112d6:	b2db      	uxtb	r3, r3
 80112d8:	2b01      	cmp	r3, #1
 80112da:	d155      	bne.n	8011388 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	2202      	movs	r2, #2
 80112e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2200      	movs	r2, #0
 80112e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	681a      	ldr	r2, [r3, #0]
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	f022 0201 	bic.w	r2, r2, #1
 80112f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	687a      	ldr	r2, [r7, #4]
 80112fe:	68b9      	ldr	r1, [r7, #8]
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f000 fa37 	bl	8011774 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801130a:	2b00      	cmp	r3, #0
 801130c:	d008      	beq.n	8011320 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	681a      	ldr	r2, [r3, #0]
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	f042 020e 	orr.w	r2, r2, #14
 801131c:	601a      	str	r2, [r3, #0]
 801131e:	e00f      	b.n	8011340 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	681a      	ldr	r2, [r3, #0]
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	f022 0204 	bic.w	r2, r2, #4
 801132e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	681a      	ldr	r2, [r3, #0]
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	f042 020a 	orr.w	r2, r2, #10
 801133e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801134a:	2b00      	cmp	r3, #0
 801134c:	d007      	beq.n	801135e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011352:	681a      	ldr	r2, [r3, #0]
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801135c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011362:	2b00      	cmp	r3, #0
 8011364:	d007      	beq.n	8011376 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801136a:	681a      	ldr	r2, [r3, #0]
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011374:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	681a      	ldr	r2, [r3, #0]
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	f042 0201 	orr.w	r2, r2, #1
 8011384:	601a      	str	r2, [r3, #0]
 8011386:	e005      	b.n	8011394 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	2200      	movs	r2, #0
 801138c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8011390:	2302      	movs	r3, #2
 8011392:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8011394:	7dfb      	ldrb	r3, [r7, #23]
}
 8011396:	4618      	mov	r0, r3
 8011398:	3718      	adds	r7, #24
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}

0801139e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801139e:	b480      	push	{r7}
 80113a0:	b085      	sub	sp, #20
 80113a2:	af00      	add	r7, sp, #0
 80113a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80113a6:	2300      	movs	r3, #0
 80113a8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80113b0:	b2db      	uxtb	r3, r3
 80113b2:	2b02      	cmp	r3, #2
 80113b4:	d008      	beq.n	80113c8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2204      	movs	r2, #4
 80113ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2200      	movs	r2, #0
 80113c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80113c4:	2301      	movs	r3, #1
 80113c6:	e040      	b.n	801144a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	681a      	ldr	r2, [r3, #0]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	f022 020e 	bic.w	r2, r2, #14
 80113d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113dc:	681a      	ldr	r2, [r3, #0]
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80113e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	681a      	ldr	r2, [r3, #0]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	f022 0201 	bic.w	r2, r2, #1
 80113f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80113fc:	f003 021c 	and.w	r2, r3, #28
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011404:	2101      	movs	r1, #1
 8011406:	fa01 f202 	lsl.w	r2, r1, r2
 801140a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011410:	687a      	ldr	r2, [r7, #4]
 8011412:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8011414:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801141a:	2b00      	cmp	r3, #0
 801141c:	d00c      	beq.n	8011438 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011422:	681a      	ldr	r2, [r3, #0]
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801142c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011432:	687a      	ldr	r2, [r7, #4]
 8011434:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011436:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2201      	movs	r2, #1
 801143c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2200      	movs	r2, #0
 8011444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8011448:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 801144a:	4618      	mov	r0, r3
 801144c:	3714      	adds	r7, #20
 801144e:	46bd      	mov	sp, r7
 8011450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011454:	4770      	bx	lr

08011456 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8011456:	b580      	push	{r7, lr}
 8011458:	b084      	sub	sp, #16
 801145a:	af00      	add	r7, sp, #0
 801145c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801145e:	2300      	movs	r3, #0
 8011460:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8011468:	b2db      	uxtb	r3, r3
 801146a:	2b02      	cmp	r3, #2
 801146c:	d005      	beq.n	801147a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	2204      	movs	r2, #4
 8011472:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8011474:	2301      	movs	r3, #1
 8011476:	73fb      	strb	r3, [r7, #15]
 8011478:	e047      	b.n	801150a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	681a      	ldr	r2, [r3, #0]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f022 020e 	bic.w	r2, r2, #14
 8011488:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	681a      	ldr	r2, [r3, #0]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	f022 0201 	bic.w	r2, r2, #1
 8011498:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80114a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80114a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114ae:	f003 021c 	and.w	r2, r3, #28
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114b6:	2101      	movs	r1, #1
 80114b8:	fa01 f202 	lsl.w	r2, r1, r2
 80114bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114c2:	687a      	ldr	r2, [r7, #4]
 80114c4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80114c6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d00c      	beq.n	80114ea <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80114d4:	681a      	ldr	r2, [r3, #0]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80114da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80114de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114e4:	687a      	ldr	r2, [r7, #4]
 80114e6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80114e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	2201      	movs	r2, #1
 80114ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2200      	movs	r2, #0
 80114f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d003      	beq.n	801150a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	4798      	blx	r3
    }
  }
  return status;
 801150a:	7bfb      	ldrb	r3, [r7, #15]
}
 801150c:	4618      	mov	r0, r3
 801150e:	3710      	adds	r7, #16
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b084      	sub	sp, #16
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011530:	f003 031c 	and.w	r3, r3, #28
 8011534:	2204      	movs	r2, #4
 8011536:	409a      	lsls	r2, r3
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	4013      	ands	r3, r2
 801153c:	2b00      	cmp	r3, #0
 801153e:	d053      	beq.n	80115e8 <HAL_DMA_IRQHandler+0xd4>
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	f003 0304 	and.w	r3, r3, #4
 8011546:	2b00      	cmp	r3, #0
 8011548:	d04e      	beq.n	80115e8 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011554:	2b00      	cmp	r3, #0
 8011556:	d024      	beq.n	80115a2 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801155c:	f003 021c 	and.w	r2, r3, #28
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011564:	2104      	movs	r1, #4
 8011566:	fa01 f202 	lsl.w	r2, r1, r2
 801156a:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011576:	2b00      	cmp	r3, #0
 8011578:	d109      	bne.n	801158e <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801157e:	2b00      	cmp	r3, #0
 8011580:	f000 80c0 	beq.w	8011704 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801158c:	e0ba      	b.n	8011704 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011592:	2b00      	cmp	r3, #0
 8011594:	f000 80b6 	beq.w	8011704 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80115a0:	e0b0      	b.n	8011704 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	f003 0320 	and.w	r3, r3, #32
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d107      	bne.n	80115c0 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	681a      	ldr	r2, [r3, #0]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f022 0204 	bic.w	r2, r2, #4
 80115be:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115c4:	f003 021c 	and.w	r2, r3, #28
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115cc:	2104      	movs	r1, #4
 80115ce:	fa01 f202 	lsl.w	r2, r1, r2
 80115d2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115d8:	2b00      	cmp	r3, #0
 80115da:	f000 8093 	beq.w	8011704 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80115e6:	e08d      	b.n	8011704 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115ec:	f003 031c 	and.w	r3, r3, #28
 80115f0:	2202      	movs	r2, #2
 80115f2:	409a      	lsls	r2, r3
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	4013      	ands	r3, r2
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d04e      	beq.n	801169a <HAL_DMA_IRQHandler+0x186>
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	f003 0302 	and.w	r3, r3, #2
 8011602:	2b00      	cmp	r3, #0
 8011604:	d049      	beq.n	801169a <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011610:	2b00      	cmp	r3, #0
 8011612:	d018      	beq.n	8011646 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801161e:	2b00      	cmp	r3, #0
 8011620:	d108      	bne.n	8011634 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011626:	2b00      	cmp	r3, #0
 8011628:	d06e      	beq.n	8011708 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8011632:	e069      	b.n	8011708 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011638:	2b00      	cmp	r3, #0
 801163a:	d065      	beq.n	8011708 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8011644:	e060      	b.n	8011708 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	f003 0320 	and.w	r3, r3, #32
 8011650:	2b00      	cmp	r3, #0
 8011652:	d10b      	bne.n	801166c <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	681a      	ldr	r2, [r3, #0]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f022 020a 	bic.w	r2, r2, #10
 8011662:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2201      	movs	r2, #1
 8011668:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011670:	f003 021c 	and.w	r2, r3, #28
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011678:	2102      	movs	r1, #2
 801167a:	fa01 f202 	lsl.w	r2, r1, r2
 801167e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2200      	movs	r2, #0
 8011684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801168c:	2b00      	cmp	r3, #0
 801168e:	d03b      	beq.n	8011708 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8011698:	e036      	b.n	8011708 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801169e:	f003 031c 	and.w	r3, r3, #28
 80116a2:	2208      	movs	r2, #8
 80116a4:	409a      	lsls	r2, r3
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	4013      	ands	r3, r2
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d02e      	beq.n	801170c <HAL_DMA_IRQHandler+0x1f8>
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	f003 0308 	and.w	r3, r3, #8
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d029      	beq.n	801170c <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	681a      	ldr	r2, [r3, #0]
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	f022 020e 	bic.w	r2, r2, #14
 80116c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80116cc:	f003 021c 	and.w	r2, r3, #28
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80116d4:	2101      	movs	r1, #1
 80116d6:	fa01 f202 	lsl.w	r2, r1, r2
 80116da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2201      	movs	r2, #1
 80116e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2201      	movs	r2, #1
 80116e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	2200      	movs	r2, #0
 80116ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d008      	beq.n	801170c <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8011702:	e002      	b.n	801170a <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8011704:	bf00      	nop
 8011706:	e000      	b.n	801170a <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8011708:	bf00      	nop
  return;
 801170a:	bf00      	nop
 801170c:	bf00      	nop
}
 801170e:	3710      	adds	r7, #16
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}

08011714 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8011714:	b480      	push	{r7}
 8011716:	b085      	sub	sp, #20
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801171e:	2300      	movs	r3, #0
 8011720:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d103      	bne.n	8011730 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8011728:	2301      	movs	r3, #1
 801172a:	72fb      	strb	r3, [r7, #11]
    return status;
 801172c:	7afb      	ldrb	r3, [r7, #11]
 801172e:	e01b      	b.n	8011768 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	f003 0310 	and.w	r3, r3, #16
 801173e:	2b00      	cmp	r3, #0
 8011740:	d00d      	beq.n	801175e <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011748:	2b00      	cmp	r3, #0
 801174a:	d004      	beq.n	8011756 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011752:	60fb      	str	r3, [r7, #12]
 8011754:	e003      	b.n	801175e <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801175c:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	68fa      	ldr	r2, [r7, #12]
 8011764:	601a      	str	r2, [r3, #0]

  return status;
 8011766:	7afb      	ldrb	r3, [r7, #11]
}
 8011768:	4618      	mov	r0, r3
 801176a:	3714      	adds	r7, #20
 801176c:	46bd      	mov	sp, r7
 801176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011772:	4770      	bx	lr

08011774 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011774:	b480      	push	{r7}
 8011776:	b085      	sub	sp, #20
 8011778:	af00      	add	r7, sp, #0
 801177a:	60f8      	str	r0, [r7, #12]
 801177c:	60b9      	str	r1, [r7, #8]
 801177e:	607a      	str	r2, [r7, #4]
 8011780:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011786:	68fa      	ldr	r2, [r7, #12]
 8011788:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801178a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011790:	2b00      	cmp	r3, #0
 8011792:	d004      	beq.n	801179e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011798:	68fa      	ldr	r2, [r7, #12]
 801179a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801179c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80117a2:	f003 021c 	and.w	r2, r3, #28
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80117aa:	2101      	movs	r1, #1
 80117ac:	fa01 f202 	lsl.w	r2, r1, r2
 80117b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	683a      	ldr	r2, [r7, #0]
 80117b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	689b      	ldr	r3, [r3, #8]
 80117be:	2b10      	cmp	r3, #16
 80117c0:	d108      	bne.n	80117d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	687a      	ldr	r2, [r7, #4]
 80117c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	68ba      	ldr	r2, [r7, #8]
 80117d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 80117d2:	e007      	b.n	80117e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	68ba      	ldr	r2, [r7, #8]
 80117da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	60da      	str	r2, [r3, #12]
}
 80117e4:	bf00      	nop
 80117e6:	3714      	adds	r7, #20
 80117e8:	46bd      	mov	sp, r7
 80117ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ee:	4770      	bx	lr

080117f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b085      	sub	sp, #20
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	461a      	mov	r2, r3
 80117fe:	4b17      	ldr	r3, [pc, #92]	; (801185c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8011800:	429a      	cmp	r2, r3
 8011802:	d80a      	bhi.n	801181a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011808:	089b      	lsrs	r3, r3, #2
 801180a:	009b      	lsls	r3, r3, #2
 801180c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011810:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8011814:	687a      	ldr	r2, [r7, #4]
 8011816:	6513      	str	r3, [r2, #80]	; 0x50
 8011818:	e007      	b.n	801182a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801181e:	089b      	lsrs	r3, r3, #2
 8011820:	009a      	lsls	r2, r3, #2
 8011822:	4b0f      	ldr	r3, [pc, #60]	; (8011860 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8011824:	4413      	add	r3, r2
 8011826:	687a      	ldr	r2, [r7, #4]
 8011828:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	b2db      	uxtb	r3, r3
 8011830:	3b08      	subs	r3, #8
 8011832:	4a0c      	ldr	r2, [pc, #48]	; (8011864 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8011834:	fba2 2303 	umull	r2, r3, r2, r3
 8011838:	091b      	lsrs	r3, r3, #4
 801183a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	4a0a      	ldr	r2, [pc, #40]	; (8011868 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8011840:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	f003 031f 	and.w	r3, r3, #31
 8011848:	2201      	movs	r2, #1
 801184a:	409a      	lsls	r2, r3
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8011850:	bf00      	nop
 8011852:	3714      	adds	r7, #20
 8011854:	46bd      	mov	sp, r7
 8011856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185a:	4770      	bx	lr
 801185c:	40020407 	.word	0x40020407
 8011860:	40020820 	.word	0x40020820
 8011864:	cccccccd 	.word	0xcccccccd
 8011868:	40020880 	.word	0x40020880

0801186c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801186c:	b480      	push	{r7}
 801186e:	b085      	sub	sp, #20
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	b2db      	uxtb	r3, r3
 801187a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801187c:	68fa      	ldr	r2, [r7, #12]
 801187e:	4b0b      	ldr	r3, [pc, #44]	; (80118ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8011880:	4413      	add	r3, r2
 8011882:	009b      	lsls	r3, r3, #2
 8011884:	461a      	mov	r2, r3
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	4a08      	ldr	r2, [pc, #32]	; (80118b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801188e:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	3b01      	subs	r3, #1
 8011894:	f003 0303 	and.w	r3, r3, #3
 8011898:	2201      	movs	r2, #1
 801189a:	409a      	lsls	r2, r3
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	665a      	str	r2, [r3, #100]	; 0x64
}
 80118a0:	bf00      	nop
 80118a2:	3714      	adds	r7, #20
 80118a4:	46bd      	mov	sp, r7
 80118a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118aa:	4770      	bx	lr
 80118ac:	1000823f 	.word	0x1000823f
 80118b0:	40020940 	.word	0x40020940

080118b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80118b4:	b480      	push	{r7}
 80118b6:	b087      	sub	sp, #28
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80118be:	2300      	movs	r3, #0
 80118c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80118c2:	e158      	b.n	8011b76 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	681a      	ldr	r2, [r3, #0]
 80118c8:	2101      	movs	r1, #1
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	fa01 f303 	lsl.w	r3, r1, r3
 80118d0:	4013      	ands	r3, r2
 80118d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	f000 814a 	beq.w	8011b70 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	f003 0303 	and.w	r3, r3, #3
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d005      	beq.n	80118f4 <HAL_GPIO_Init+0x40>
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	685b      	ldr	r3, [r3, #4]
 80118ec:	f003 0303 	and.w	r3, r3, #3
 80118f0:	2b02      	cmp	r3, #2
 80118f2:	d130      	bne.n	8011956 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	689b      	ldr	r3, [r3, #8]
 80118f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80118fa:	697b      	ldr	r3, [r7, #20]
 80118fc:	005b      	lsls	r3, r3, #1
 80118fe:	2203      	movs	r2, #3
 8011900:	fa02 f303 	lsl.w	r3, r2, r3
 8011904:	43db      	mvns	r3, r3
 8011906:	693a      	ldr	r2, [r7, #16]
 8011908:	4013      	ands	r3, r2
 801190a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	68da      	ldr	r2, [r3, #12]
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	005b      	lsls	r3, r3, #1
 8011914:	fa02 f303 	lsl.w	r3, r2, r3
 8011918:	693a      	ldr	r2, [r7, #16]
 801191a:	4313      	orrs	r3, r2
 801191c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	693a      	ldr	r2, [r7, #16]
 8011922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801192a:	2201      	movs	r2, #1
 801192c:	697b      	ldr	r3, [r7, #20]
 801192e:	fa02 f303 	lsl.w	r3, r2, r3
 8011932:	43db      	mvns	r3, r3
 8011934:	693a      	ldr	r2, [r7, #16]
 8011936:	4013      	ands	r3, r2
 8011938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	091b      	lsrs	r3, r3, #4
 8011940:	f003 0201 	and.w	r2, r3, #1
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	fa02 f303 	lsl.w	r3, r2, r3
 801194a:	693a      	ldr	r2, [r7, #16]
 801194c:	4313      	orrs	r3, r2
 801194e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	693a      	ldr	r2, [r7, #16]
 8011954:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	685b      	ldr	r3, [r3, #4]
 801195a:	f003 0303 	and.w	r3, r3, #3
 801195e:	2b03      	cmp	r3, #3
 8011960:	d017      	beq.n	8011992 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	68db      	ldr	r3, [r3, #12]
 8011966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011968:	697b      	ldr	r3, [r7, #20]
 801196a:	005b      	lsls	r3, r3, #1
 801196c:	2203      	movs	r2, #3
 801196e:	fa02 f303 	lsl.w	r3, r2, r3
 8011972:	43db      	mvns	r3, r3
 8011974:	693a      	ldr	r2, [r7, #16]
 8011976:	4013      	ands	r3, r2
 8011978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	689a      	ldr	r2, [r3, #8]
 801197e:	697b      	ldr	r3, [r7, #20]
 8011980:	005b      	lsls	r3, r3, #1
 8011982:	fa02 f303 	lsl.w	r3, r2, r3
 8011986:	693a      	ldr	r2, [r7, #16]
 8011988:	4313      	orrs	r3, r2
 801198a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	693a      	ldr	r2, [r7, #16]
 8011990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	f003 0303 	and.w	r3, r3, #3
 801199a:	2b02      	cmp	r3, #2
 801199c:	d123      	bne.n	80119e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	08da      	lsrs	r2, r3, #3
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	3208      	adds	r2, #8
 80119a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	f003 0307 	and.w	r3, r3, #7
 80119b2:	009b      	lsls	r3, r3, #2
 80119b4:	220f      	movs	r2, #15
 80119b6:	fa02 f303 	lsl.w	r3, r2, r3
 80119ba:	43db      	mvns	r3, r3
 80119bc:	693a      	ldr	r2, [r7, #16]
 80119be:	4013      	ands	r3, r2
 80119c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	691a      	ldr	r2, [r3, #16]
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	f003 0307 	and.w	r3, r3, #7
 80119cc:	009b      	lsls	r3, r3, #2
 80119ce:	fa02 f303 	lsl.w	r3, r2, r3
 80119d2:	693a      	ldr	r2, [r7, #16]
 80119d4:	4313      	orrs	r3, r2
 80119d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	08da      	lsrs	r2, r3, #3
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	3208      	adds	r2, #8
 80119e0:	6939      	ldr	r1, [r7, #16]
 80119e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	005b      	lsls	r3, r3, #1
 80119f0:	2203      	movs	r2, #3
 80119f2:	fa02 f303 	lsl.w	r3, r2, r3
 80119f6:	43db      	mvns	r3, r3
 80119f8:	693a      	ldr	r2, [r7, #16]
 80119fa:	4013      	ands	r3, r2
 80119fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	685b      	ldr	r3, [r3, #4]
 8011a02:	f003 0203 	and.w	r2, r3, #3
 8011a06:	697b      	ldr	r3, [r7, #20]
 8011a08:	005b      	lsls	r3, r3, #1
 8011a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8011a0e:	693a      	ldr	r2, [r7, #16]
 8011a10:	4313      	orrs	r3, r2
 8011a12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	693a      	ldr	r2, [r7, #16]
 8011a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	685b      	ldr	r3, [r3, #4]
 8011a1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	f000 80a4 	beq.w	8011b70 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8011a28:	4a5a      	ldr	r2, [pc, #360]	; (8011b94 <HAL_GPIO_Init+0x2e0>)
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	089b      	lsrs	r3, r3, #2
 8011a2e:	3318      	adds	r3, #24
 8011a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a34:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8011a36:	697b      	ldr	r3, [r7, #20]
 8011a38:	f003 0303 	and.w	r3, r3, #3
 8011a3c:	00db      	lsls	r3, r3, #3
 8011a3e:	220f      	movs	r2, #15
 8011a40:	fa02 f303 	lsl.w	r3, r2, r3
 8011a44:	43db      	mvns	r3, r3
 8011a46:	693a      	ldr	r2, [r7, #16]
 8011a48:	4013      	ands	r3, r2
 8011a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	4a52      	ldr	r2, [pc, #328]	; (8011b98 <HAL_GPIO_Init+0x2e4>)
 8011a50:	4293      	cmp	r3, r2
 8011a52:	d025      	beq.n	8011aa0 <HAL_GPIO_Init+0x1ec>
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	4a51      	ldr	r2, [pc, #324]	; (8011b9c <HAL_GPIO_Init+0x2e8>)
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d01f      	beq.n	8011a9c <HAL_GPIO_Init+0x1e8>
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	4a50      	ldr	r2, [pc, #320]	; (8011ba0 <HAL_GPIO_Init+0x2ec>)
 8011a60:	4293      	cmp	r3, r2
 8011a62:	d019      	beq.n	8011a98 <HAL_GPIO_Init+0x1e4>
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	4a4f      	ldr	r2, [pc, #316]	; (8011ba4 <HAL_GPIO_Init+0x2f0>)
 8011a68:	4293      	cmp	r3, r2
 8011a6a:	d013      	beq.n	8011a94 <HAL_GPIO_Init+0x1e0>
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	4a4e      	ldr	r2, [pc, #312]	; (8011ba8 <HAL_GPIO_Init+0x2f4>)
 8011a70:	4293      	cmp	r3, r2
 8011a72:	d00d      	beq.n	8011a90 <HAL_GPIO_Init+0x1dc>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	4a4d      	ldr	r2, [pc, #308]	; (8011bac <HAL_GPIO_Init+0x2f8>)
 8011a78:	4293      	cmp	r3, r2
 8011a7a:	d007      	beq.n	8011a8c <HAL_GPIO_Init+0x1d8>
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	4a4c      	ldr	r2, [pc, #304]	; (8011bb0 <HAL_GPIO_Init+0x2fc>)
 8011a80:	4293      	cmp	r3, r2
 8011a82:	d101      	bne.n	8011a88 <HAL_GPIO_Init+0x1d4>
 8011a84:	2306      	movs	r3, #6
 8011a86:	e00c      	b.n	8011aa2 <HAL_GPIO_Init+0x1ee>
 8011a88:	2307      	movs	r3, #7
 8011a8a:	e00a      	b.n	8011aa2 <HAL_GPIO_Init+0x1ee>
 8011a8c:	2305      	movs	r3, #5
 8011a8e:	e008      	b.n	8011aa2 <HAL_GPIO_Init+0x1ee>
 8011a90:	2304      	movs	r3, #4
 8011a92:	e006      	b.n	8011aa2 <HAL_GPIO_Init+0x1ee>
 8011a94:	2303      	movs	r3, #3
 8011a96:	e004      	b.n	8011aa2 <HAL_GPIO_Init+0x1ee>
 8011a98:	2302      	movs	r3, #2
 8011a9a:	e002      	b.n	8011aa2 <HAL_GPIO_Init+0x1ee>
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	e000      	b.n	8011aa2 <HAL_GPIO_Init+0x1ee>
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	697a      	ldr	r2, [r7, #20]
 8011aa4:	f002 0203 	and.w	r2, r2, #3
 8011aa8:	00d2      	lsls	r2, r2, #3
 8011aaa:	4093      	lsls	r3, r2
 8011aac:	693a      	ldr	r2, [r7, #16]
 8011aae:	4313      	orrs	r3, r2
 8011ab0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8011ab2:	4938      	ldr	r1, [pc, #224]	; (8011b94 <HAL_GPIO_Init+0x2e0>)
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	089b      	lsrs	r3, r3, #2
 8011ab8:	3318      	adds	r3, #24
 8011aba:	693a      	ldr	r2, [r7, #16]
 8011abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8011ac0:	4b34      	ldr	r3, [pc, #208]	; (8011b94 <HAL_GPIO_Init+0x2e0>)
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	43db      	mvns	r3, r3
 8011aca:	693a      	ldr	r2, [r7, #16]
 8011acc:	4013      	ands	r3, r2
 8011ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	685b      	ldr	r3, [r3, #4]
 8011ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d003      	beq.n	8011ae4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8011adc:	693a      	ldr	r2, [r7, #16]
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	4313      	orrs	r3, r2
 8011ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8011ae4:	4a2b      	ldr	r2, [pc, #172]	; (8011b94 <HAL_GPIO_Init+0x2e0>)
 8011ae6:	693b      	ldr	r3, [r7, #16]
 8011ae8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8011aea:	4b2a      	ldr	r3, [pc, #168]	; (8011b94 <HAL_GPIO_Init+0x2e0>)
 8011aec:	685b      	ldr	r3, [r3, #4]
 8011aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	43db      	mvns	r3, r3
 8011af4:	693a      	ldr	r2, [r7, #16]
 8011af6:	4013      	ands	r3, r2
 8011af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d003      	beq.n	8011b0e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8011b06:	693a      	ldr	r2, [r7, #16]
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	4313      	orrs	r3, r2
 8011b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8011b0e:	4a21      	ldr	r2, [pc, #132]	; (8011b94 <HAL_GPIO_Init+0x2e0>)
 8011b10:	693b      	ldr	r3, [r7, #16]
 8011b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8011b14:	4b1f      	ldr	r3, [pc, #124]	; (8011b94 <HAL_GPIO_Init+0x2e0>)
 8011b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	43db      	mvns	r3, r3
 8011b20:	693a      	ldr	r2, [r7, #16]
 8011b22:	4013      	ands	r3, r2
 8011b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d003      	beq.n	8011b3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8011b32:	693a      	ldr	r2, [r7, #16]
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	4313      	orrs	r3, r2
 8011b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8011b3a:	4a16      	ldr	r2, [pc, #88]	; (8011b94 <HAL_GPIO_Init+0x2e0>)
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8011b42:	4b14      	ldr	r3, [pc, #80]	; (8011b94 <HAL_GPIO_Init+0x2e0>)
 8011b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	43db      	mvns	r3, r3
 8011b4e:	693a      	ldr	r2, [r7, #16]
 8011b50:	4013      	ands	r3, r2
 8011b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	685b      	ldr	r3, [r3, #4]
 8011b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d003      	beq.n	8011b68 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8011b60:	693a      	ldr	r2, [r7, #16]
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	4313      	orrs	r3, r2
 8011b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8011b68:	4a0a      	ldr	r2, [pc, #40]	; (8011b94 <HAL_GPIO_Init+0x2e0>)
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	3301      	adds	r3, #1
 8011b74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	681a      	ldr	r2, [r3, #0]
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	f47f ae9f 	bne.w	80118c4 <HAL_GPIO_Init+0x10>
  }
}
 8011b86:	bf00      	nop
 8011b88:	bf00      	nop
 8011b8a:	371c      	adds	r7, #28
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b92:	4770      	bx	lr
 8011b94:	4002f400 	.word	0x4002f400
 8011b98:	42020000 	.word	0x42020000
 8011b9c:	42020400 	.word	0x42020400
 8011ba0:	42020800 	.word	0x42020800
 8011ba4:	42020c00 	.word	0x42020c00
 8011ba8:	42021000 	.word	0x42021000
 8011bac:	42021400 	.word	0x42021400
 8011bb0:	42021800 	.word	0x42021800

08011bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011bb4:	b480      	push	{r7}
 8011bb6:	b083      	sub	sp, #12
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	460b      	mov	r3, r1
 8011bbe:	807b      	strh	r3, [r7, #2]
 8011bc0:	4613      	mov	r3, r2
 8011bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011bc4:	787b      	ldrb	r3, [r7, #1]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d003      	beq.n	8011bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011bca:	887a      	ldrh	r2, [r7, #2]
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8011bd0:	e002      	b.n	8011bd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011bd2:	887a      	ldrh	r2, [r7, #2]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8011bd8:	bf00      	nop
 8011bda:	370c      	adds	r7, #12
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be2:	4770      	bx	lr

08011be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d101      	bne.n	8011bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	e081      	b.n	8011cfa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011bfc:	b2db      	uxtb	r3, r3
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d106      	bne.n	8011c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2200      	movs	r2, #0
 8011c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f7fc fedc 	bl	800e9c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	2224      	movs	r2, #36	; 0x24
 8011c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	681a      	ldr	r2, [r3, #0]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	f022 0201 	bic.w	r2, r2, #1
 8011c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	685a      	ldr	r2, [r3, #4]
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011c34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	689a      	ldr	r2, [r3, #8]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011c44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	68db      	ldr	r3, [r3, #12]
 8011c4a:	2b01      	cmp	r3, #1
 8011c4c:	d107      	bne.n	8011c5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	689a      	ldr	r2, [r3, #8]
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011c5a:	609a      	str	r2, [r3, #8]
 8011c5c:	e006      	b.n	8011c6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	689a      	ldr	r2, [r3, #8]
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8011c6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	68db      	ldr	r3, [r3, #12]
 8011c70:	2b02      	cmp	r3, #2
 8011c72:	d104      	bne.n	8011c7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011c7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	687a      	ldr	r2, [r7, #4]
 8011c86:	6812      	ldr	r2, [r2, #0]
 8011c88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	68da      	ldr	r2, [r3, #12]
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011ca0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	691a      	ldr	r2, [r3, #16]
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	695b      	ldr	r3, [r3, #20]
 8011caa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	699b      	ldr	r3, [r3, #24]
 8011cb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	430a      	orrs	r2, r1
 8011cba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	69d9      	ldr	r1, [r3, #28]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	6a1a      	ldr	r2, [r3, #32]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	430a      	orrs	r2, r1
 8011cca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	681a      	ldr	r2, [r3, #0]
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	f042 0201 	orr.w	r2, r2, #1
 8011cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2200      	movs	r2, #0
 8011ce0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	2220      	movs	r2, #32
 8011ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	2200      	movs	r2, #0
 8011cee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8011cf8:	2300      	movs	r3, #0
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3708      	adds	r7, #8
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8011d02:	b480      	push	{r7}
 8011d04:	b083      	sub	sp, #12
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	6078      	str	r0, [r7, #4]
 8011d0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011d12:	b2db      	uxtb	r3, r3
 8011d14:	2b20      	cmp	r3, #32
 8011d16:	d138      	bne.n	8011d8a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d1e:	2b01      	cmp	r3, #1
 8011d20:	d101      	bne.n	8011d26 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011d22:	2302      	movs	r3, #2
 8011d24:	e032      	b.n	8011d8c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2201      	movs	r2, #1
 8011d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2224      	movs	r2, #36	; 0x24
 8011d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	681a      	ldr	r2, [r3, #0]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	f022 0201 	bic.w	r2, r2, #1
 8011d44:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	681a      	ldr	r2, [r3, #0]
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011d54:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	6819      	ldr	r1, [r3, #0]
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	683a      	ldr	r2, [r7, #0]
 8011d62:	430a      	orrs	r2, r1
 8011d64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	681a      	ldr	r2, [r3, #0]
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	f042 0201 	orr.w	r2, r2, #1
 8011d74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2220      	movs	r2, #32
 8011d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2200      	movs	r2, #0
 8011d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011d86:	2300      	movs	r3, #0
 8011d88:	e000      	b.n	8011d8c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011d8a:	2302      	movs	r3, #2
  }
}
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	370c      	adds	r7, #12
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr

08011d98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b085      	sub	sp, #20
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011da8:	b2db      	uxtb	r3, r3
 8011daa:	2b20      	cmp	r3, #32
 8011dac:	d139      	bne.n	8011e22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011db4:	2b01      	cmp	r3, #1
 8011db6:	d101      	bne.n	8011dbc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8011db8:	2302      	movs	r3, #2
 8011dba:	e033      	b.n	8011e24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2224      	movs	r2, #36	; 0x24
 8011dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	681a      	ldr	r2, [r3, #0]
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	f022 0201 	bic.w	r2, r2, #1
 8011dda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8011dea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	021b      	lsls	r3, r3, #8
 8011df0:	68fa      	ldr	r2, [r7, #12]
 8011df2:	4313      	orrs	r3, r2
 8011df4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	68fa      	ldr	r2, [r7, #12]
 8011dfc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	681a      	ldr	r2, [r3, #0]
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f042 0201 	orr.w	r2, r2, #1
 8011e0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2220      	movs	r2, #32
 8011e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2200      	movs	r2, #0
 8011e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	e000      	b.n	8011e24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011e22:	2302      	movs	r3, #2
  }
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3714      	adds	r7, #20
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr

08011e30 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8011e30:	b480      	push	{r7}
 8011e32:	b085      	sub	sp, #20
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011e38:	2300      	movs	r3, #0
 8011e3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8011e3c:	4b0b      	ldr	r3, [pc, #44]	; (8011e6c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	f003 0301 	and.w	r3, r3, #1
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d002      	beq.n	8011e4e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8011e48:	2301      	movs	r3, #1
 8011e4a:	73fb      	strb	r3, [r7, #15]
 8011e4c:	e007      	b.n	8011e5e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8011e4e:	4b07      	ldr	r3, [pc, #28]	; (8011e6c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	f023 0204 	bic.w	r2, r3, #4
 8011e56:	4905      	ldr	r1, [pc, #20]	; (8011e6c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	4313      	orrs	r3, r2
 8011e5c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8011e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e60:	4618      	mov	r0, r3
 8011e62:	3714      	adds	r7, #20
 8011e64:	46bd      	mov	sp, r7
 8011e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6a:	4770      	bx	lr
 8011e6c:	40030400 	.word	0x40030400

08011e70 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8011e70:	b480      	push	{r7}
 8011e72:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8011e74:	4b05      	ldr	r3, [pc, #20]	; (8011e8c <HAL_ICACHE_Enable+0x1c>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	4a04      	ldr	r2, [pc, #16]	; (8011e8c <HAL_ICACHE_Enable+0x1c>)
 8011e7a:	f043 0301 	orr.w	r3, r3, #1
 8011e7e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8011e80:	2300      	movs	r3, #0
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr
 8011e8c:	40030400 	.word	0x40030400

08011e90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8011e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e92:	b08b      	sub	sp, #44	; 0x2c
 8011e94:	af06      	add	r7, sp, #24
 8011e96:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d101      	bne.n	8011ea2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	e0cb      	b.n	801203a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8011ea8:	b2db      	uxtb	r3, r3
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d106      	bne.n	8011ebc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8011eb6:	6878      	ldr	r0, [r7, #4]
 8011eb8:	f7fd f93a 	bl	800f130 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2203      	movs	r2, #3
 8011ec0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f006 f859 	bl	8017f80 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011ece:	2300      	movs	r3, #0
 8011ed0:	73fb      	strb	r3, [r7, #15]
 8011ed2:	e040      	b.n	8011f56 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8011ed4:	7bfb      	ldrb	r3, [r7, #15]
 8011ed6:	6879      	ldr	r1, [r7, #4]
 8011ed8:	1c5a      	adds	r2, r3, #1
 8011eda:	4613      	mov	r3, r2
 8011edc:	009b      	lsls	r3, r3, #2
 8011ede:	4413      	add	r3, r2
 8011ee0:	00db      	lsls	r3, r3, #3
 8011ee2:	440b      	add	r3, r1
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	2201      	movs	r2, #1
 8011ee8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8011eea:	7bfb      	ldrb	r3, [r7, #15]
 8011eec:	6879      	ldr	r1, [r7, #4]
 8011eee:	1c5a      	adds	r2, r3, #1
 8011ef0:	4613      	mov	r3, r2
 8011ef2:	009b      	lsls	r3, r3, #2
 8011ef4:	4413      	add	r3, r2
 8011ef6:	00db      	lsls	r3, r3, #3
 8011ef8:	440b      	add	r3, r1
 8011efa:	7bfa      	ldrb	r2, [r7, #15]
 8011efc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8011efe:	7bfb      	ldrb	r3, [r7, #15]
 8011f00:	6879      	ldr	r1, [r7, #4]
 8011f02:	1c5a      	adds	r2, r3, #1
 8011f04:	4613      	mov	r3, r2
 8011f06:	009b      	lsls	r3, r3, #2
 8011f08:	4413      	add	r3, r2
 8011f0a:	00db      	lsls	r3, r3, #3
 8011f0c:	440b      	add	r3, r1
 8011f0e:	3303      	adds	r3, #3
 8011f10:	2200      	movs	r2, #0
 8011f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8011f14:	7bfa      	ldrb	r2, [r7, #15]
 8011f16:	6879      	ldr	r1, [r7, #4]
 8011f18:	4613      	mov	r3, r2
 8011f1a:	009b      	lsls	r3, r3, #2
 8011f1c:	4413      	add	r3, r2
 8011f1e:	00db      	lsls	r3, r3, #3
 8011f20:	440b      	add	r3, r1
 8011f22:	3338      	adds	r3, #56	; 0x38
 8011f24:	2200      	movs	r2, #0
 8011f26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8011f28:	7bfa      	ldrb	r2, [r7, #15]
 8011f2a:	6879      	ldr	r1, [r7, #4]
 8011f2c:	4613      	mov	r3, r2
 8011f2e:	009b      	lsls	r3, r3, #2
 8011f30:	4413      	add	r3, r2
 8011f32:	00db      	lsls	r3, r3, #3
 8011f34:	440b      	add	r3, r1
 8011f36:	333c      	adds	r3, #60	; 0x3c
 8011f38:	2200      	movs	r2, #0
 8011f3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8011f3c:	7bfa      	ldrb	r2, [r7, #15]
 8011f3e:	6879      	ldr	r1, [r7, #4]
 8011f40:	4613      	mov	r3, r2
 8011f42:	009b      	lsls	r3, r3, #2
 8011f44:	4413      	add	r3, r2
 8011f46:	00db      	lsls	r3, r3, #3
 8011f48:	440b      	add	r3, r1
 8011f4a:	3340      	adds	r3, #64	; 0x40
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011f50:	7bfb      	ldrb	r3, [r7, #15]
 8011f52:	3301      	adds	r3, #1
 8011f54:	73fb      	strb	r3, [r7, #15]
 8011f56:	7bfa      	ldrb	r2, [r7, #15]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	685b      	ldr	r3, [r3, #4]
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d3b9      	bcc.n	8011ed4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011f60:	2300      	movs	r3, #0
 8011f62:	73fb      	strb	r3, [r7, #15]
 8011f64:	e044      	b.n	8011ff0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8011f66:	7bfa      	ldrb	r2, [r7, #15]
 8011f68:	6879      	ldr	r1, [r7, #4]
 8011f6a:	4613      	mov	r3, r2
 8011f6c:	009b      	lsls	r3, r3, #2
 8011f6e:	4413      	add	r3, r2
 8011f70:	00db      	lsls	r3, r3, #3
 8011f72:	440b      	add	r3, r1
 8011f74:	f203 1369 	addw	r3, r3, #361	; 0x169
 8011f78:	2200      	movs	r2, #0
 8011f7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8011f7c:	7bfa      	ldrb	r2, [r7, #15]
 8011f7e:	6879      	ldr	r1, [r7, #4]
 8011f80:	4613      	mov	r3, r2
 8011f82:	009b      	lsls	r3, r3, #2
 8011f84:	4413      	add	r3, r2
 8011f86:	00db      	lsls	r3, r3, #3
 8011f88:	440b      	add	r3, r1
 8011f8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8011f8e:	7bfa      	ldrb	r2, [r7, #15]
 8011f90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8011f92:	7bfa      	ldrb	r2, [r7, #15]
 8011f94:	6879      	ldr	r1, [r7, #4]
 8011f96:	4613      	mov	r3, r2
 8011f98:	009b      	lsls	r3, r3, #2
 8011f9a:	4413      	add	r3, r2
 8011f9c:	00db      	lsls	r3, r3, #3
 8011f9e:	440b      	add	r3, r1
 8011fa0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8011fa8:	7bfa      	ldrb	r2, [r7, #15]
 8011faa:	6879      	ldr	r1, [r7, #4]
 8011fac:	4613      	mov	r3, r2
 8011fae:	009b      	lsls	r3, r3, #2
 8011fb0:	4413      	add	r3, r2
 8011fb2:	00db      	lsls	r3, r3, #3
 8011fb4:	440b      	add	r3, r1
 8011fb6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011fba:	2200      	movs	r2, #0
 8011fbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8011fbe:	7bfa      	ldrb	r2, [r7, #15]
 8011fc0:	6879      	ldr	r1, [r7, #4]
 8011fc2:	4613      	mov	r3, r2
 8011fc4:	009b      	lsls	r3, r3, #2
 8011fc6:	4413      	add	r3, r2
 8011fc8:	00db      	lsls	r3, r3, #3
 8011fca:	440b      	add	r3, r1
 8011fcc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8011fd4:	7bfa      	ldrb	r2, [r7, #15]
 8011fd6:	6879      	ldr	r1, [r7, #4]
 8011fd8:	4613      	mov	r3, r2
 8011fda:	009b      	lsls	r3, r3, #2
 8011fdc:	4413      	add	r3, r2
 8011fde:	00db      	lsls	r3, r3, #3
 8011fe0:	440b      	add	r3, r1
 8011fe2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011fea:	7bfb      	ldrb	r3, [r7, #15]
 8011fec:	3301      	adds	r3, #1
 8011fee:	73fb      	strb	r3, [r7, #15]
 8011ff0:	7bfa      	ldrb	r2, [r7, #15]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	685b      	ldr	r3, [r3, #4]
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	d3b5      	bcc.n	8011f66 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	603b      	str	r3, [r7, #0]
 8012000:	687e      	ldr	r6, [r7, #4]
 8012002:	466d      	mov	r5, sp
 8012004:	f106 0410 	add.w	r4, r6, #16
 8012008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801200a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801200c:	6823      	ldr	r3, [r4, #0]
 801200e:	602b      	str	r3, [r5, #0]
 8012010:	1d33      	adds	r3, r6, #4
 8012012:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012014:	6838      	ldr	r0, [r7, #0]
 8012016:	f005 ffce 	bl	8017fb6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2200      	movs	r2, #0
 801201e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2201      	movs	r2, #1
 8012026:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	69db      	ldr	r3, [r3, #28]
 801202e:	2b01      	cmp	r3, #1
 8012030:	d102      	bne.n	8012038 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f000 f805 	bl	8012042 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8012038:	2300      	movs	r3, #0
}
 801203a:	4618      	mov	r0, r3
 801203c:	3714      	adds	r7, #20
 801203e:	46bd      	mov	sp, r7
 8012040:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012042 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8012042:	b480      	push	{r7}
 8012044:	b085      	sub	sp, #20
 8012046:	af00      	add	r7, sp, #0
 8012048:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2201      	movs	r2, #1
 8012054:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2200      	movs	r2, #0
 801205c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8012066:	b29b      	uxth	r3, r3
 8012068:	f043 0301 	orr.w	r3, r3, #1
 801206c:	b29a      	uxth	r2, r3
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801207a:	b29b      	uxth	r3, r3
 801207c:	f043 0302 	orr.w	r3, r3, #2
 8012080:	b29a      	uxth	r2, r3
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8012088:	2300      	movs	r3, #0
}
 801208a:	4618      	mov	r0, r3
 801208c:	3714      	adds	r7, #20
 801208e:	46bd      	mov	sp, r7
 8012090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012094:	4770      	bx	lr
	...

08012098 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8012098:	b480      	push	{r7}
 801209a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801209c:	4b05      	ldr	r3, [pc, #20]	; (80120b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	4a04      	ldr	r2, [pc, #16]	; (80120b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80120a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80120a6:	6013      	str	r3, [r2, #0]
}
 80120a8:	bf00      	nop
 80120aa:	46bd      	mov	sp, r7
 80120ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop
 80120b4:	40007000 	.word	0x40007000

080120b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80120b8:	b480      	push	{r7}
 80120ba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80120bc:	4b04      	ldr	r3, [pc, #16]	; (80120d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr
 80120ce:	bf00      	nop
 80120d0:	40007000 	.word	0x40007000

080120d4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b084      	sub	sp, #16
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80120dc:	4b27      	ldr	r3, [pc, #156]	; (801217c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80120e4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80120e6:	f000 f861 	bl	80121ac <HAL_PWREx_SMPS_GetEffectiveMode>
 80120ea:	4603      	mov	r3, r0
 80120ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80120f0:	d101      	bne.n	80120f6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80120f2:	2301      	movs	r3, #1
 80120f4:	e03e      	b.n	8012174 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80120f6:	4b21      	ldr	r3, [pc, #132]	; (801217c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80120f8:	68db      	ldr	r3, [r3, #12]
 80120fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80120fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012102:	d101      	bne.n	8012108 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8012104:	2301      	movs	r3, #1
 8012106:	e035      	b.n	8012174 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8012108:	68ba      	ldr	r2, [r7, #8]
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	429a      	cmp	r2, r3
 801210e:	d101      	bne.n	8012114 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8012110:	2300      	movs	r3, #0
 8012112:	e02f      	b.n	8012174 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8012114:	4b19      	ldr	r3, [pc, #100]	; (801217c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 801211c:	4917      	ldr	r1, [pc, #92]	; (801217c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	4313      	orrs	r3, r2
 8012122:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8012124:	4b16      	ldr	r3, [pc, #88]	; (8012180 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	095b      	lsrs	r3, r3, #5
 801212a:	4a16      	ldr	r2, [pc, #88]	; (8012184 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 801212c:	fba2 2303 	umull	r2, r3, r2, r3
 8012130:	09db      	lsrs	r3, r3, #7
 8012132:	2232      	movs	r2, #50	; 0x32
 8012134:	fb02 f303 	mul.w	r3, r2, r3
 8012138:	4a13      	ldr	r2, [pc, #76]	; (8012188 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 801213a:	fba2 2303 	umull	r2, r3, r2, r3
 801213e:	08db      	lsrs	r3, r3, #3
 8012140:	3301      	adds	r3, #1
 8012142:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8012144:	e002      	b.n	801214c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	3b01      	subs	r3, #1
 801214a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801214c:	4b0b      	ldr	r3, [pc, #44]	; (801217c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801214e:	695b      	ldr	r3, [r3, #20]
 8012150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012158:	d102      	bne.n	8012160 <HAL_PWREx_ControlVoltageScaling+0x8c>
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d1f2      	bne.n	8012146 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8012160:	4b06      	ldr	r3, [pc, #24]	; (801217c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8012162:	695b      	ldr	r3, [r3, #20]
 8012164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801216c:	d101      	bne.n	8012172 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 801216e:	2303      	movs	r3, #3
 8012170:	e000      	b.n	8012174 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8012172:	2300      	movs	r3, #0
}
 8012174:	4618      	mov	r0, r3
 8012176:	3710      	adds	r7, #16
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}
 801217c:	40007000 	.word	0x40007000
 8012180:	20000004 	.word	0x20000004
 8012184:	0a7c5ac5 	.word	0x0a7c5ac5
 8012188:	cccccccd 	.word	0xcccccccd

0801218c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 801218c:	b480      	push	{r7}
 801218e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8012190:	4b05      	ldr	r3, [pc, #20]	; (80121a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	4a04      	ldr	r2, [pc, #16]	; (80121a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8012196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801219a:	6053      	str	r3, [r2, #4]
}
 801219c:	bf00      	nop
 801219e:	46bd      	mov	sp, r7
 80121a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a4:	4770      	bx	lr
 80121a6:	bf00      	nop
 80121a8:	40007000 	.word	0x40007000

080121ac <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80121ac:	b480      	push	{r7}
 80121ae:	b083      	sub	sp, #12
 80121b0:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80121b2:	4b0f      	ldr	r3, [pc, #60]	; (80121f0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80121b4:	691b      	ldr	r3, [r3, #16]
 80121b6:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d003      	beq.n	80121ca <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80121c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121c6:	607b      	str	r3, [r7, #4]
 80121c8:	e00a      	b.n	80121e0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d103      	bne.n	80121dc <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80121d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80121d8:	607b      	str	r3, [r7, #4]
 80121da:	e001      	b.n	80121e0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80121dc:	2300      	movs	r3, #0
 80121de:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80121e0:	687b      	ldr	r3, [r7, #4]
}
 80121e2:	4618      	mov	r0, r3
 80121e4:	370c      	adds	r7, #12
 80121e6:	46bd      	mov	sp, r7
 80121e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ec:	4770      	bx	lr
 80121ee:	bf00      	nop
 80121f0:	40007000 	.word	0x40007000

080121f4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b088      	sub	sp, #32
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d102      	bne.n	8012208 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8012202:	2301      	movs	r3, #1
 8012204:	f000 bcc2 	b.w	8012b8c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012208:	4b99      	ldr	r3, [pc, #612]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 801220a:	689b      	ldr	r3, [r3, #8]
 801220c:	f003 030c 	and.w	r3, r3, #12
 8012210:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012212:	4b97      	ldr	r3, [pc, #604]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 8012214:	68db      	ldr	r3, [r3, #12]
 8012216:	f003 0303 	and.w	r3, r3, #3
 801221a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	f003 0310 	and.w	r3, r3, #16
 8012224:	2b00      	cmp	r3, #0
 8012226:	f000 80e9 	beq.w	80123fc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 801222a:	69bb      	ldr	r3, [r7, #24]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d006      	beq.n	801223e <HAL_RCC_OscConfig+0x4a>
 8012230:	69bb      	ldr	r3, [r7, #24]
 8012232:	2b0c      	cmp	r3, #12
 8012234:	f040 8083 	bne.w	801233e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	2b01      	cmp	r3, #1
 801223c:	d17f      	bne.n	801233e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801223e:	4b8c      	ldr	r3, [pc, #560]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	f003 0302 	and.w	r3, r3, #2
 8012246:	2b00      	cmp	r3, #0
 8012248:	d006      	beq.n	8012258 <HAL_RCC_OscConfig+0x64>
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	69db      	ldr	r3, [r3, #28]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d102      	bne.n	8012258 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8012252:	2301      	movs	r3, #1
 8012254:	f000 bc9a 	b.w	8012b8c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801225c:	4b84      	ldr	r3, [pc, #528]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	f003 0308 	and.w	r3, r3, #8
 8012264:	2b00      	cmp	r3, #0
 8012266:	d004      	beq.n	8012272 <HAL_RCC_OscConfig+0x7e>
 8012268:	4b81      	ldr	r3, [pc, #516]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012270:	e005      	b.n	801227e <HAL_RCC_OscConfig+0x8a>
 8012272:	4b7f      	ldr	r3, [pc, #508]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 8012274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012278:	091b      	lsrs	r3, r3, #4
 801227a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801227e:	4293      	cmp	r3, r2
 8012280:	d224      	bcs.n	80122cc <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012286:	4618      	mov	r0, r3
 8012288:	f000 fece 	bl	8013028 <RCC_SetFlashLatencyFromMSIRange>
 801228c:	4603      	mov	r3, r0
 801228e:	2b00      	cmp	r3, #0
 8012290:	d002      	beq.n	8012298 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8012292:	2301      	movs	r3, #1
 8012294:	f000 bc7a 	b.w	8012b8c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8012298:	4b75      	ldr	r3, [pc, #468]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	4a74      	ldr	r2, [pc, #464]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 801229e:	f043 0308 	orr.w	r3, r3, #8
 80122a2:	6013      	str	r3, [r2, #0]
 80122a4:	4b72      	ldr	r3, [pc, #456]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122b0:	496f      	ldr	r1, [pc, #444]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80122b2:	4313      	orrs	r3, r2
 80122b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80122b6:	4b6e      	ldr	r3, [pc, #440]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80122b8:	685b      	ldr	r3, [r3, #4]
 80122ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	6a1b      	ldr	r3, [r3, #32]
 80122c2:	021b      	lsls	r3, r3, #8
 80122c4:	496a      	ldr	r1, [pc, #424]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80122c6:	4313      	orrs	r3, r2
 80122c8:	604b      	str	r3, [r1, #4]
 80122ca:	e026      	b.n	801231a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80122cc:	4b68      	ldr	r3, [pc, #416]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	4a67      	ldr	r2, [pc, #412]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80122d2:	f043 0308 	orr.w	r3, r3, #8
 80122d6:	6013      	str	r3, [r2, #0]
 80122d8:	4b65      	ldr	r3, [pc, #404]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122e4:	4962      	ldr	r1, [pc, #392]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80122e6:	4313      	orrs	r3, r2
 80122e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80122ea:	4b61      	ldr	r3, [pc, #388]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80122ec:	685b      	ldr	r3, [r3, #4]
 80122ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	6a1b      	ldr	r3, [r3, #32]
 80122f6:	021b      	lsls	r3, r3, #8
 80122f8:	495d      	ldr	r1, [pc, #372]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80122fa:	4313      	orrs	r3, r2
 80122fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80122fe:	69bb      	ldr	r3, [r7, #24]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d10a      	bne.n	801231a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012308:	4618      	mov	r0, r3
 801230a:	f000 fe8d 	bl	8013028 <RCC_SetFlashLatencyFromMSIRange>
 801230e:	4603      	mov	r3, r0
 8012310:	2b00      	cmp	r3, #0
 8012312:	d002      	beq.n	801231a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8012314:	2301      	movs	r3, #1
 8012316:	f000 bc39 	b.w	8012b8c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801231a:	f000 fe17 	bl	8012f4c <HAL_RCC_GetHCLKFreq>
 801231e:	4603      	mov	r3, r0
 8012320:	4a54      	ldr	r2, [pc, #336]	; (8012474 <HAL_RCC_OscConfig+0x280>)
 8012322:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8012324:	4b54      	ldr	r3, [pc, #336]	; (8012478 <HAL_RCC_OscConfig+0x284>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	4618      	mov	r0, r3
 801232a:	f7fc ff61 	bl	800f1f0 <HAL_InitTick>
 801232e:	4603      	mov	r3, r0
 8012330:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8012332:	7bfb      	ldrb	r3, [r7, #15]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d060      	beq.n	80123fa <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8012338:	7bfb      	ldrb	r3, [r7, #15]
 801233a:	f000 bc27 	b.w	8012b8c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	69db      	ldr	r3, [r3, #28]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d039      	beq.n	80123ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8012346:	4b4a      	ldr	r3, [pc, #296]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	4a49      	ldr	r2, [pc, #292]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 801234c:	f043 0301 	orr.w	r3, r3, #1
 8012350:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8012352:	f7fd f9d3 	bl	800f6fc <HAL_GetTick>
 8012356:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8012358:	e00f      	b.n	801237a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801235a:	f7fd f9cf 	bl	800f6fc <HAL_GetTick>
 801235e:	4602      	mov	r2, r0
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	1ad3      	subs	r3, r2, r3
 8012364:	2b02      	cmp	r3, #2
 8012366:	d908      	bls.n	801237a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8012368:	4b41      	ldr	r3, [pc, #260]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	f003 0302 	and.w	r3, r3, #2
 8012370:	2b00      	cmp	r3, #0
 8012372:	d102      	bne.n	801237a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8012374:	2303      	movs	r3, #3
 8012376:	f000 bc09 	b.w	8012b8c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801237a:	4b3d      	ldr	r3, [pc, #244]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	f003 0302 	and.w	r3, r3, #2
 8012382:	2b00      	cmp	r3, #0
 8012384:	d0e9      	beq.n	801235a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8012386:	4b3a      	ldr	r3, [pc, #232]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	4a39      	ldr	r2, [pc, #228]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 801238c:	f043 0308 	orr.w	r3, r3, #8
 8012390:	6013      	str	r3, [r2, #0]
 8012392:	4b37      	ldr	r3, [pc, #220]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801239e:	4934      	ldr	r1, [pc, #208]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80123a0:	4313      	orrs	r3, r2
 80123a2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80123a4:	4b32      	ldr	r3, [pc, #200]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80123a6:	685b      	ldr	r3, [r3, #4]
 80123a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	6a1b      	ldr	r3, [r3, #32]
 80123b0:	021b      	lsls	r3, r3, #8
 80123b2:	492f      	ldr	r1, [pc, #188]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80123b4:	4313      	orrs	r3, r2
 80123b6:	604b      	str	r3, [r1, #4]
 80123b8:	e020      	b.n	80123fc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80123ba:	4b2d      	ldr	r3, [pc, #180]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	4a2c      	ldr	r2, [pc, #176]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80123c0:	f023 0301 	bic.w	r3, r3, #1
 80123c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80123c6:	f7fd f999 	bl	800f6fc <HAL_GetTick>
 80123ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80123cc:	e00e      	b.n	80123ec <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80123ce:	f7fd f995 	bl	800f6fc <HAL_GetTick>
 80123d2:	4602      	mov	r2, r0
 80123d4:	693b      	ldr	r3, [r7, #16]
 80123d6:	1ad3      	subs	r3, r2, r3
 80123d8:	2b02      	cmp	r3, #2
 80123da:	d907      	bls.n	80123ec <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80123dc:	4b24      	ldr	r3, [pc, #144]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	f003 0302 	and.w	r3, r3, #2
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d001      	beq.n	80123ec <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80123e8:	2303      	movs	r3, #3
 80123ea:	e3cf      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80123ec:	4b20      	ldr	r3, [pc, #128]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	f003 0302 	and.w	r3, r3, #2
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d1ea      	bne.n	80123ce <HAL_RCC_OscConfig+0x1da>
 80123f8:	e000      	b.n	80123fc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80123fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	f003 0301 	and.w	r3, r3, #1
 8012404:	2b00      	cmp	r3, #0
 8012406:	d07e      	beq.n	8012506 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8012408:	69bb      	ldr	r3, [r7, #24]
 801240a:	2b08      	cmp	r3, #8
 801240c:	d005      	beq.n	801241a <HAL_RCC_OscConfig+0x226>
 801240e:	69bb      	ldr	r3, [r7, #24]
 8012410:	2b0c      	cmp	r3, #12
 8012412:	d10e      	bne.n	8012432 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8012414:	697b      	ldr	r3, [r7, #20]
 8012416:	2b03      	cmp	r3, #3
 8012418:	d10b      	bne.n	8012432 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801241a:	4b15      	ldr	r3, [pc, #84]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012422:	2b00      	cmp	r3, #0
 8012424:	d06e      	beq.n	8012504 <HAL_RCC_OscConfig+0x310>
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d16a      	bne.n	8012504 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 801242e:	2301      	movs	r3, #1
 8012430:	e3ac      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801243a:	d106      	bne.n	801244a <HAL_RCC_OscConfig+0x256>
 801243c:	4b0c      	ldr	r3, [pc, #48]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	4a0b      	ldr	r2, [pc, #44]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 8012442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012446:	6013      	str	r3, [r2, #0]
 8012448:	e024      	b.n	8012494 <HAL_RCC_OscConfig+0x2a0>
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012452:	d113      	bne.n	801247c <HAL_RCC_OscConfig+0x288>
 8012454:	4b06      	ldr	r3, [pc, #24]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	4a05      	ldr	r2, [pc, #20]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 801245a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801245e:	6013      	str	r3, [r2, #0]
 8012460:	4b03      	ldr	r3, [pc, #12]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	4a02      	ldr	r2, [pc, #8]	; (8012470 <HAL_RCC_OscConfig+0x27c>)
 8012466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801246a:	6013      	str	r3, [r2, #0]
 801246c:	e012      	b.n	8012494 <HAL_RCC_OscConfig+0x2a0>
 801246e:	bf00      	nop
 8012470:	40021000 	.word	0x40021000
 8012474:	20000004 	.word	0x20000004
 8012478:	20000008 	.word	0x20000008
 801247c:	4b8b      	ldr	r3, [pc, #556]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	4a8a      	ldr	r2, [pc, #552]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 8012482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012486:	6013      	str	r3, [r2, #0]
 8012488:	4b88      	ldr	r3, [pc, #544]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	4a87      	ldr	r2, [pc, #540]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 801248e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	685b      	ldr	r3, [r3, #4]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d019      	beq.n	80124d0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801249c:	f7fd f92e 	bl	800f6fc <HAL_GetTick>
 80124a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80124a2:	e00e      	b.n	80124c2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80124a4:	f7fd f92a 	bl	800f6fc <HAL_GetTick>
 80124a8:	4602      	mov	r2, r0
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	1ad3      	subs	r3, r2, r3
 80124ae:	2b64      	cmp	r3, #100	; 0x64
 80124b0:	d907      	bls.n	80124c2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80124b2:	4b7e      	ldr	r3, [pc, #504]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d101      	bne.n	80124c2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80124be:	2303      	movs	r3, #3
 80124c0:	e364      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80124c2:	4b7a      	ldr	r3, [pc, #488]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d0ea      	beq.n	80124a4 <HAL_RCC_OscConfig+0x2b0>
 80124ce:	e01a      	b.n	8012506 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80124d0:	f7fd f914 	bl	800f6fc <HAL_GetTick>
 80124d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80124d6:	e00e      	b.n	80124f6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80124d8:	f7fd f910 	bl	800f6fc <HAL_GetTick>
 80124dc:	4602      	mov	r2, r0
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	1ad3      	subs	r3, r2, r3
 80124e2:	2b64      	cmp	r3, #100	; 0x64
 80124e4:	d907      	bls.n	80124f6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80124e6:	4b71      	ldr	r3, [pc, #452]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d001      	beq.n	80124f6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80124f2:	2303      	movs	r3, #3
 80124f4:	e34a      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80124f6:	4b6d      	ldr	r3, [pc, #436]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d1ea      	bne.n	80124d8 <HAL_RCC_OscConfig+0x2e4>
 8012502:	e000      	b.n	8012506 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	f003 0302 	and.w	r3, r3, #2
 801250e:	2b00      	cmp	r3, #0
 8012510:	d06c      	beq.n	80125ec <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8012512:	69bb      	ldr	r3, [r7, #24]
 8012514:	2b04      	cmp	r3, #4
 8012516:	d005      	beq.n	8012524 <HAL_RCC_OscConfig+0x330>
 8012518:	69bb      	ldr	r3, [r7, #24]
 801251a:	2b0c      	cmp	r3, #12
 801251c:	d119      	bne.n	8012552 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	2b02      	cmp	r3, #2
 8012522:	d116      	bne.n	8012552 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012524:	4b61      	ldr	r3, [pc, #388]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801252c:	2b00      	cmp	r3, #0
 801252e:	d005      	beq.n	801253c <HAL_RCC_OscConfig+0x348>
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	68db      	ldr	r3, [r3, #12]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d101      	bne.n	801253c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8012538:	2301      	movs	r3, #1
 801253a:	e327      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801253c:	4b5b      	ldr	r3, [pc, #364]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 801253e:	685b      	ldr	r3, [r3, #4]
 8012540:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	691b      	ldr	r3, [r3, #16]
 8012548:	061b      	lsls	r3, r3, #24
 801254a:	4958      	ldr	r1, [pc, #352]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 801254c:	4313      	orrs	r3, r2
 801254e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012550:	e04c      	b.n	80125ec <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	68db      	ldr	r3, [r3, #12]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d029      	beq.n	80125ae <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801255a:	4b54      	ldr	r3, [pc, #336]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	4a53      	ldr	r2, [pc, #332]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 8012560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012566:	f7fd f8c9 	bl	800f6fc <HAL_GetTick>
 801256a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801256c:	e00e      	b.n	801258c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801256e:	f7fd f8c5 	bl	800f6fc <HAL_GetTick>
 8012572:	4602      	mov	r2, r0
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	1ad3      	subs	r3, r2, r3
 8012578:	2b02      	cmp	r3, #2
 801257a:	d907      	bls.n	801258c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801257c:	4b4b      	ldr	r3, [pc, #300]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012584:	2b00      	cmp	r3, #0
 8012586:	d101      	bne.n	801258c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8012588:	2303      	movs	r3, #3
 801258a:	e2ff      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801258c:	4b47      	ldr	r3, [pc, #284]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012594:	2b00      	cmp	r3, #0
 8012596:	d0ea      	beq.n	801256e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012598:	4b44      	ldr	r3, [pc, #272]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 801259a:	685b      	ldr	r3, [r3, #4]
 801259c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	691b      	ldr	r3, [r3, #16]
 80125a4:	061b      	lsls	r3, r3, #24
 80125a6:	4941      	ldr	r1, [pc, #260]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 80125a8:	4313      	orrs	r3, r2
 80125aa:	604b      	str	r3, [r1, #4]
 80125ac:	e01e      	b.n	80125ec <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80125ae:	4b3f      	ldr	r3, [pc, #252]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	4a3e      	ldr	r2, [pc, #248]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 80125b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80125b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80125ba:	f7fd f89f 	bl	800f6fc <HAL_GetTick>
 80125be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80125c0:	e00e      	b.n	80125e0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80125c2:	f7fd f89b 	bl	800f6fc <HAL_GetTick>
 80125c6:	4602      	mov	r2, r0
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	1ad3      	subs	r3, r2, r3
 80125cc:	2b02      	cmp	r3, #2
 80125ce:	d907      	bls.n	80125e0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80125d0:	4b36      	ldr	r3, [pc, #216]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d001      	beq.n	80125e0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80125dc:	2303      	movs	r3, #3
 80125de:	e2d5      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80125e0:	4b32      	ldr	r3, [pc, #200]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d1ea      	bne.n	80125c2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	f003 0308 	and.w	r3, r3, #8
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d062      	beq.n	80126be <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	695b      	ldr	r3, [r3, #20]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d038      	beq.n	8012672 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	699b      	ldr	r3, [r3, #24]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d108      	bne.n	801261a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8012608:	4b28      	ldr	r3, [pc, #160]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 801260a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801260e:	4a27      	ldr	r2, [pc, #156]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 8012610:	f023 0310 	bic.w	r3, r3, #16
 8012614:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8012618:	e007      	b.n	801262a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 801261a:	4b24      	ldr	r3, [pc, #144]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 801261c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012620:	4a22      	ldr	r2, [pc, #136]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 8012622:	f043 0310 	orr.w	r3, r3, #16
 8012626:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801262a:	4b20      	ldr	r3, [pc, #128]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 801262c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012630:	4a1e      	ldr	r2, [pc, #120]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 8012632:	f043 0301 	orr.w	r3, r3, #1
 8012636:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801263a:	f7fd f85f 	bl	800f6fc <HAL_GetTick>
 801263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8012640:	e00f      	b.n	8012662 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012642:	f7fd f85b 	bl	800f6fc <HAL_GetTick>
 8012646:	4602      	mov	r2, r0
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	1ad3      	subs	r3, r2, r3
 801264c:	2b07      	cmp	r3, #7
 801264e:	d908      	bls.n	8012662 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8012650:	4b16      	ldr	r3, [pc, #88]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 8012652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012656:	f003 0302 	and.w	r3, r3, #2
 801265a:	2b00      	cmp	r3, #0
 801265c:	d101      	bne.n	8012662 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 801265e:	2303      	movs	r3, #3
 8012660:	e294      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8012662:	4b12      	ldr	r3, [pc, #72]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 8012664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012668:	f003 0302 	and.w	r3, r3, #2
 801266c:	2b00      	cmp	r3, #0
 801266e:	d0e8      	beq.n	8012642 <HAL_RCC_OscConfig+0x44e>
 8012670:	e025      	b.n	80126be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012672:	4b0e      	ldr	r3, [pc, #56]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 8012674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012678:	4a0c      	ldr	r2, [pc, #48]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 801267a:	f023 0301 	bic.w	r3, r3, #1
 801267e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012682:	f7fd f83b 	bl	800f6fc <HAL_GetTick>
 8012686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8012688:	e012      	b.n	80126b0 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801268a:	f7fd f837 	bl	800f6fc <HAL_GetTick>
 801268e:	4602      	mov	r2, r0
 8012690:	693b      	ldr	r3, [r7, #16]
 8012692:	1ad3      	subs	r3, r2, r3
 8012694:	2b07      	cmp	r3, #7
 8012696:	d90b      	bls.n	80126b0 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8012698:	4b04      	ldr	r3, [pc, #16]	; (80126ac <HAL_RCC_OscConfig+0x4b8>)
 801269a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801269e:	f003 0302 	and.w	r3, r3, #2
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d004      	beq.n	80126b0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80126a6:	2303      	movs	r3, #3
 80126a8:	e270      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
 80126aa:	bf00      	nop
 80126ac:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80126b0:	4ba8      	ldr	r3, [pc, #672]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 80126b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80126b6:	f003 0302 	and.w	r3, r3, #2
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d1e5      	bne.n	801268a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	f003 0304 	and.w	r3, r3, #4
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	f000 812d 	beq.w	8012926 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80126cc:	2300      	movs	r3, #0
 80126ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80126d0:	4ba0      	ldr	r3, [pc, #640]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 80126d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d10d      	bne.n	80126f8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80126dc:	4b9d      	ldr	r3, [pc, #628]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 80126de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126e0:	4a9c      	ldr	r2, [pc, #624]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 80126e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80126e6:	6593      	str	r3, [r2, #88]	; 0x58
 80126e8:	4b9a      	ldr	r3, [pc, #616]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 80126ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126f0:	60bb      	str	r3, [r7, #8]
 80126f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80126f4:	2301      	movs	r3, #1
 80126f6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80126f8:	4b97      	ldr	r3, [pc, #604]	; (8012958 <HAL_RCC_OscConfig+0x764>)
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012700:	2b00      	cmp	r3, #0
 8012702:	d11e      	bne.n	8012742 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012704:	4b94      	ldr	r3, [pc, #592]	; (8012958 <HAL_RCC_OscConfig+0x764>)
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	4a93      	ldr	r2, [pc, #588]	; (8012958 <HAL_RCC_OscConfig+0x764>)
 801270a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801270e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012710:	f7fc fff4 	bl	800f6fc <HAL_GetTick>
 8012714:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012716:	e00e      	b.n	8012736 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012718:	f7fc fff0 	bl	800f6fc <HAL_GetTick>
 801271c:	4602      	mov	r2, r0
 801271e:	693b      	ldr	r3, [r7, #16]
 8012720:	1ad3      	subs	r3, r2, r3
 8012722:	2b02      	cmp	r3, #2
 8012724:	d907      	bls.n	8012736 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012726:	4b8c      	ldr	r3, [pc, #560]	; (8012958 <HAL_RCC_OscConfig+0x764>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801272e:	2b00      	cmp	r3, #0
 8012730:	d101      	bne.n	8012736 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8012732:	2303      	movs	r3, #3
 8012734:	e22a      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012736:	4b88      	ldr	r3, [pc, #544]	; (8012958 <HAL_RCC_OscConfig+0x764>)
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801273e:	2b00      	cmp	r3, #0
 8012740:	d0ea      	beq.n	8012718 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	689b      	ldr	r3, [r3, #8]
 8012746:	f003 0301 	and.w	r3, r3, #1
 801274a:	2b00      	cmp	r3, #0
 801274c:	d01f      	beq.n	801278e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	689b      	ldr	r3, [r3, #8]
 8012752:	f003 0304 	and.w	r3, r3, #4
 8012756:	2b00      	cmp	r3, #0
 8012758:	d010      	beq.n	801277c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801275a:	4b7e      	ldr	r3, [pc, #504]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 801275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012760:	4a7c      	ldr	r2, [pc, #496]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 8012762:	f043 0304 	orr.w	r3, r3, #4
 8012766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801276a:	4b7a      	ldr	r3, [pc, #488]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 801276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012770:	4a78      	ldr	r2, [pc, #480]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 8012772:	f043 0301 	orr.w	r3, r3, #1
 8012776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801277a:	e018      	b.n	80127ae <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801277c:	4b75      	ldr	r3, [pc, #468]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 801277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012782:	4a74      	ldr	r2, [pc, #464]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 8012784:	f043 0301 	orr.w	r3, r3, #1
 8012788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801278c:	e00f      	b.n	80127ae <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801278e:	4b71      	ldr	r3, [pc, #452]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 8012790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012794:	4a6f      	ldr	r2, [pc, #444]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 8012796:	f023 0301 	bic.w	r3, r3, #1
 801279a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801279e:	4b6d      	ldr	r3, [pc, #436]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 80127a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127a4:	4a6b      	ldr	r2, [pc, #428]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 80127a6:	f023 0304 	bic.w	r3, r3, #4
 80127aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	689b      	ldr	r3, [r3, #8]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d068      	beq.n	8012888 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80127b6:	f7fc ffa1 	bl	800f6fc <HAL_GetTick>
 80127ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80127bc:	e011      	b.n	80127e2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80127be:	f7fc ff9d 	bl	800f6fc <HAL_GetTick>
 80127c2:	4602      	mov	r2, r0
 80127c4:	693b      	ldr	r3, [r7, #16]
 80127c6:	1ad3      	subs	r3, r2, r3
 80127c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80127cc:	4293      	cmp	r3, r2
 80127ce:	d908      	bls.n	80127e2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80127d0:	4b60      	ldr	r3, [pc, #384]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 80127d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127d6:	f003 0302 	and.w	r3, r3, #2
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d101      	bne.n	80127e2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80127de:	2303      	movs	r3, #3
 80127e0:	e1d4      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80127e2:	4b5c      	ldr	r3, [pc, #368]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 80127e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127e8:	f003 0302 	and.w	r3, r3, #2
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d0e6      	beq.n	80127be <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	689b      	ldr	r3, [r3, #8]
 80127f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d022      	beq.n	8012842 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80127fc:	4b55      	ldr	r3, [pc, #340]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 80127fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012802:	4a54      	ldr	r2, [pc, #336]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 8012804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 801280c:	e011      	b.n	8012832 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801280e:	f7fc ff75 	bl	800f6fc <HAL_GetTick>
 8012812:	4602      	mov	r2, r0
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	1ad3      	subs	r3, r2, r3
 8012818:	f241 3288 	movw	r2, #5000	; 0x1388
 801281c:	4293      	cmp	r3, r2
 801281e:	d908      	bls.n	8012832 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8012820:	4b4c      	ldr	r3, [pc, #304]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 8012822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801282a:	2b00      	cmp	r3, #0
 801282c:	d101      	bne.n	8012832 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 801282e:	2303      	movs	r3, #3
 8012830:	e1ac      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8012832:	4b48      	ldr	r3, [pc, #288]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 8012834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801283c:	2b00      	cmp	r3, #0
 801283e:	d0e6      	beq.n	801280e <HAL_RCC_OscConfig+0x61a>
 8012840:	e068      	b.n	8012914 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8012842:	4b44      	ldr	r3, [pc, #272]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 8012844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012848:	4a42      	ldr	r2, [pc, #264]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 801284a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801284e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8012852:	e011      	b.n	8012878 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012854:	f7fc ff52 	bl	800f6fc <HAL_GetTick>
 8012858:	4602      	mov	r2, r0
 801285a:	693b      	ldr	r3, [r7, #16]
 801285c:	1ad3      	subs	r3, r2, r3
 801285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012862:	4293      	cmp	r3, r2
 8012864:	d908      	bls.n	8012878 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8012866:	4b3b      	ldr	r3, [pc, #236]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 8012868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801286c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012870:	2b00      	cmp	r3, #0
 8012872:	d001      	beq.n	8012878 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8012874:	2303      	movs	r3, #3
 8012876:	e189      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8012878:	4b36      	ldr	r3, [pc, #216]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 801287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801287e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012882:	2b00      	cmp	r3, #0
 8012884:	d1e6      	bne.n	8012854 <HAL_RCC_OscConfig+0x660>
 8012886:	e045      	b.n	8012914 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012888:	f7fc ff38 	bl	800f6fc <HAL_GetTick>
 801288c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801288e:	e011      	b.n	80128b4 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012890:	f7fc ff34 	bl	800f6fc <HAL_GetTick>
 8012894:	4602      	mov	r2, r0
 8012896:	693b      	ldr	r3, [r7, #16]
 8012898:	1ad3      	subs	r3, r2, r3
 801289a:	f241 3288 	movw	r2, #5000	; 0x1388
 801289e:	4293      	cmp	r3, r2
 80128a0:	d908      	bls.n	80128b4 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80128a2:	4b2c      	ldr	r3, [pc, #176]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 80128a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128a8:	f003 0302 	and.w	r3, r3, #2
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d001      	beq.n	80128b4 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80128b0:	2303      	movs	r3, #3
 80128b2:	e16b      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80128b4:	4b27      	ldr	r3, [pc, #156]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 80128b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128ba:	f003 0302 	and.w	r3, r3, #2
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d1e6      	bne.n	8012890 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80128c2:	4b24      	ldr	r3, [pc, #144]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 80128c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d021      	beq.n	8012914 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80128d0:	4b20      	ldr	r3, [pc, #128]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 80128d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128d6:	4a1f      	ldr	r2, [pc, #124]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 80128d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80128dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80128e0:	e011      	b.n	8012906 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80128e2:	f7fc ff0b 	bl	800f6fc <HAL_GetTick>
 80128e6:	4602      	mov	r2, r0
 80128e8:	693b      	ldr	r3, [r7, #16]
 80128ea:	1ad3      	subs	r3, r2, r3
 80128ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80128f0:	4293      	cmp	r3, r2
 80128f2:	d908      	bls.n	8012906 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80128f4:	4b17      	ldr	r3, [pc, #92]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 80128f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d001      	beq.n	8012906 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8012902:	2303      	movs	r3, #3
 8012904:	e142      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8012906:	4b13      	ldr	r3, [pc, #76]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 8012908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801290c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012910:	2b00      	cmp	r3, #0
 8012912:	d1e6      	bne.n	80128e2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8012914:	7ffb      	ldrb	r3, [r7, #31]
 8012916:	2b01      	cmp	r3, #1
 8012918:	d105      	bne.n	8012926 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801291a:	4b0e      	ldr	r3, [pc, #56]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 801291c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801291e:	4a0d      	ldr	r2, [pc, #52]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 8012920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012924:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	f003 0320 	and.w	r3, r3, #32
 801292e:	2b00      	cmp	r3, #0
 8012930:	d04f      	beq.n	80129d2 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012936:	2b00      	cmp	r3, #0
 8012938:	d028      	beq.n	801298c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801293a:	4b06      	ldr	r3, [pc, #24]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 801293c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012940:	4a04      	ldr	r2, [pc, #16]	; (8012954 <HAL_RCC_OscConfig+0x760>)
 8012942:	f043 0301 	orr.w	r3, r3, #1
 8012946:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801294a:	f7fc fed7 	bl	800f6fc <HAL_GetTick>
 801294e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8012950:	e014      	b.n	801297c <HAL_RCC_OscConfig+0x788>
 8012952:	bf00      	nop
 8012954:	40021000 	.word	0x40021000
 8012958:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801295c:	f7fc fece 	bl	800f6fc <HAL_GetTick>
 8012960:	4602      	mov	r2, r0
 8012962:	693b      	ldr	r3, [r7, #16]
 8012964:	1ad3      	subs	r3, r2, r3
 8012966:	2b02      	cmp	r3, #2
 8012968:	d908      	bls.n	801297c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801296a:	4b8a      	ldr	r3, [pc, #552]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 801296c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012970:	f003 0302 	and.w	r3, r3, #2
 8012974:	2b00      	cmp	r3, #0
 8012976:	d101      	bne.n	801297c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8012978:	2303      	movs	r3, #3
 801297a:	e107      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801297c:	4b85      	ldr	r3, [pc, #532]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 801297e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012982:	f003 0302 	and.w	r3, r3, #2
 8012986:	2b00      	cmp	r3, #0
 8012988:	d0e8      	beq.n	801295c <HAL_RCC_OscConfig+0x768>
 801298a:	e022      	b.n	80129d2 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801298c:	4b81      	ldr	r3, [pc, #516]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 801298e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012992:	4a80      	ldr	r2, [pc, #512]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012994:	f023 0301 	bic.w	r3, r3, #1
 8012998:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801299c:	f7fc feae 	bl	800f6fc <HAL_GetTick>
 80129a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80129a2:	e00f      	b.n	80129c4 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80129a4:	f7fc feaa 	bl	800f6fc <HAL_GetTick>
 80129a8:	4602      	mov	r2, r0
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	1ad3      	subs	r3, r2, r3
 80129ae:	2b02      	cmp	r3, #2
 80129b0:	d908      	bls.n	80129c4 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80129b2:	4b78      	ldr	r3, [pc, #480]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 80129b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80129b8:	f003 0302 	and.w	r3, r3, #2
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d001      	beq.n	80129c4 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80129c0:	2303      	movs	r3, #3
 80129c2:	e0e3      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80129c4:	4b73      	ldr	r3, [pc, #460]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 80129c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80129ca:	f003 0302 	and.w	r3, r3, #2
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d1e8      	bne.n	80129a4 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	f000 80d7 	beq.w	8012b8a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80129dc:	4b6d      	ldr	r3, [pc, #436]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 80129de:	689b      	ldr	r3, [r3, #8]
 80129e0:	f003 030c 	and.w	r3, r3, #12
 80129e4:	2b0c      	cmp	r3, #12
 80129e6:	f000 8091 	beq.w	8012b0c <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129ee:	2b02      	cmp	r3, #2
 80129f0:	d166      	bne.n	8012ac0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80129f2:	4b68      	ldr	r3, [pc, #416]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	4a67      	ldr	r2, [pc, #412]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 80129f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80129fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80129fe:	f7fc fe7d 	bl	800f6fc <HAL_GetTick>
 8012a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012a04:	e00e      	b.n	8012a24 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012a06:	f7fc fe79 	bl	800f6fc <HAL_GetTick>
 8012a0a:	4602      	mov	r2, r0
 8012a0c:	693b      	ldr	r3, [r7, #16]
 8012a0e:	1ad3      	subs	r3, r2, r3
 8012a10:	2b02      	cmp	r3, #2
 8012a12:	d907      	bls.n	8012a24 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012a14:	4b5f      	ldr	r3, [pc, #380]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d001      	beq.n	8012a24 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8012a20:	2303      	movs	r3, #3
 8012a22:	e0b3      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012a24:	4b5b      	ldr	r3, [pc, #364]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d1ea      	bne.n	8012a06 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012a30:	4b58      	ldr	r3, [pc, #352]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012a32:	68da      	ldr	r2, [r3, #12]
 8012a34:	4b58      	ldr	r3, [pc, #352]	; (8012b98 <HAL_RCC_OscConfig+0x9a4>)
 8012a36:	4013      	ands	r3, r2
 8012a38:	687a      	ldr	r2, [r7, #4]
 8012a3a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8012a3c:	687a      	ldr	r2, [r7, #4]
 8012a3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012a40:	3a01      	subs	r2, #1
 8012a42:	0112      	lsls	r2, r2, #4
 8012a44:	4311      	orrs	r1, r2
 8012a46:	687a      	ldr	r2, [r7, #4]
 8012a48:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012a4a:	0212      	lsls	r2, r2, #8
 8012a4c:	4311      	orrs	r1, r2
 8012a4e:	687a      	ldr	r2, [r7, #4]
 8012a50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012a52:	0852      	lsrs	r2, r2, #1
 8012a54:	3a01      	subs	r2, #1
 8012a56:	0552      	lsls	r2, r2, #21
 8012a58:	4311      	orrs	r1, r2
 8012a5a:	687a      	ldr	r2, [r7, #4]
 8012a5c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8012a5e:	0852      	lsrs	r2, r2, #1
 8012a60:	3a01      	subs	r2, #1
 8012a62:	0652      	lsls	r2, r2, #25
 8012a64:	4311      	orrs	r1, r2
 8012a66:	687a      	ldr	r2, [r7, #4]
 8012a68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8012a6a:	06d2      	lsls	r2, r2, #27
 8012a6c:	430a      	orrs	r2, r1
 8012a6e:	4949      	ldr	r1, [pc, #292]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012a70:	4313      	orrs	r3, r2
 8012a72:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012a74:	4b47      	ldr	r3, [pc, #284]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	4a46      	ldr	r2, [pc, #280]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012a7e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8012a80:	4b44      	ldr	r3, [pc, #272]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012a82:	68db      	ldr	r3, [r3, #12]
 8012a84:	4a43      	ldr	r2, [pc, #268]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012a8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012a8c:	f7fc fe36 	bl	800f6fc <HAL_GetTick>
 8012a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8012a92:	e00e      	b.n	8012ab2 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012a94:	f7fc fe32 	bl	800f6fc <HAL_GetTick>
 8012a98:	4602      	mov	r2, r0
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	1ad3      	subs	r3, r2, r3
 8012a9e:	2b02      	cmp	r3, #2
 8012aa0:	d907      	bls.n	8012ab2 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8012aa2:	4b3c      	ldr	r3, [pc, #240]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d101      	bne.n	8012ab2 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8012aae:	2303      	movs	r3, #3
 8012ab0:	e06c      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8012ab2:	4b38      	ldr	r3, [pc, #224]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d0ea      	beq.n	8012a94 <HAL_RCC_OscConfig+0x8a0>
 8012abe:	e064      	b.n	8012b8a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012ac0:	4b34      	ldr	r3, [pc, #208]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	4a33      	ldr	r2, [pc, #204]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012acc:	f7fc fe16 	bl	800f6fc <HAL_GetTick>
 8012ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012ad2:	e00e      	b.n	8012af2 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012ad4:	f7fc fe12 	bl	800f6fc <HAL_GetTick>
 8012ad8:	4602      	mov	r2, r0
 8012ada:	693b      	ldr	r3, [r7, #16]
 8012adc:	1ad3      	subs	r3, r2, r3
 8012ade:	2b02      	cmp	r3, #2
 8012ae0:	d907      	bls.n	8012af2 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012ae2:	4b2c      	ldr	r3, [pc, #176]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d001      	beq.n	8012af2 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8012aee:	2303      	movs	r3, #3
 8012af0:	e04c      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012af2:	4b28      	ldr	r3, [pc, #160]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d1ea      	bne.n	8012ad4 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8012afe:	4b25      	ldr	r3, [pc, #148]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012b00:	68da      	ldr	r2, [r3, #12]
 8012b02:	4924      	ldr	r1, [pc, #144]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012b04:	4b25      	ldr	r3, [pc, #148]	; (8012b9c <HAL_RCC_OscConfig+0x9a8>)
 8012b06:	4013      	ands	r3, r2
 8012b08:	60cb      	str	r3, [r1, #12]
 8012b0a:	e03e      	b.n	8012b8a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b10:	2b01      	cmp	r3, #1
 8012b12:	d101      	bne.n	8012b18 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8012b14:	2301      	movs	r3, #1
 8012b16:	e039      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8012b18:	4b1e      	ldr	r3, [pc, #120]	; (8012b94 <HAL_RCC_OscConfig+0x9a0>)
 8012b1a:	68db      	ldr	r3, [r3, #12]
 8012b1c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	f003 0203 	and.w	r2, r3, #3
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b28:	429a      	cmp	r2, r3
 8012b2a:	d12c      	bne.n	8012b86 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b36:	3b01      	subs	r3, #1
 8012b38:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d123      	bne.n	8012b86 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b48:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	d11b      	bne.n	8012b86 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8012b4e:	697b      	ldr	r3, [r7, #20]
 8012b50:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b58:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	d113      	bne.n	8012b86 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b68:	085b      	lsrs	r3, r3, #1
 8012b6a:	3b01      	subs	r3, #1
 8012b6c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d109      	bne.n	8012b86 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b7c:	085b      	lsrs	r3, r3, #1
 8012b7e:	3b01      	subs	r3, #1
 8012b80:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d001      	beq.n	8012b8a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8012b86:	2301      	movs	r3, #1
 8012b88:	e000      	b.n	8012b8c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8012b8a:	2300      	movs	r3, #0
}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	3720      	adds	r7, #32
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd80      	pop	{r7, pc}
 8012b94:	40021000 	.word	0x40021000
 8012b98:	019f800c 	.word	0x019f800c
 8012b9c:	feeefffc 	.word	0xfeeefffc

08012ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b086      	sub	sp, #24
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
 8012ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8012baa:	2300      	movs	r3, #0
 8012bac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d101      	bne.n	8012bb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	e11c      	b.n	8012df2 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8012bb8:	4b90      	ldr	r3, [pc, #576]	; (8012dfc <HAL_RCC_ClockConfig+0x25c>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	f003 030f 	and.w	r3, r3, #15
 8012bc0:	683a      	ldr	r2, [r7, #0]
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	d910      	bls.n	8012be8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012bc6:	4b8d      	ldr	r3, [pc, #564]	; (8012dfc <HAL_RCC_ClockConfig+0x25c>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	f023 020f 	bic.w	r2, r3, #15
 8012bce:	498b      	ldr	r1, [pc, #556]	; (8012dfc <HAL_RCC_ClockConfig+0x25c>)
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	4313      	orrs	r3, r2
 8012bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8012bd6:	4b89      	ldr	r3, [pc, #548]	; (8012dfc <HAL_RCC_ClockConfig+0x25c>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	f003 030f 	and.w	r3, r3, #15
 8012bde:	683a      	ldr	r2, [r7, #0]
 8012be0:	429a      	cmp	r2, r3
 8012be2:	d001      	beq.n	8012be8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8012be4:	2301      	movs	r3, #1
 8012be6:	e104      	b.n	8012df2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	f003 0302 	and.w	r3, r3, #2
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d010      	beq.n	8012c16 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	689a      	ldr	r2, [r3, #8]
 8012bf8:	4b81      	ldr	r3, [pc, #516]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012bfa:	689b      	ldr	r3, [r3, #8]
 8012bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d908      	bls.n	8012c16 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012c04:	4b7e      	ldr	r3, [pc, #504]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012c06:	689b      	ldr	r3, [r3, #8]
 8012c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	689b      	ldr	r3, [r3, #8]
 8012c10:	497b      	ldr	r1, [pc, #492]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012c12:	4313      	orrs	r3, r2
 8012c14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	f003 0301 	and.w	r3, r3, #1
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	f000 8085 	beq.w	8012d2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	685b      	ldr	r3, [r3, #4]
 8012c28:	2b03      	cmp	r3, #3
 8012c2a:	d11f      	bne.n	8012c6c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8012c2c:	4b74      	ldr	r3, [pc, #464]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d101      	bne.n	8012c3c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8012c38:	2301      	movs	r3, #1
 8012c3a:	e0da      	b.n	8012df2 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8012c3c:	f000 fa58 	bl	80130f0 <RCC_GetSysClockFreqFromPLLSource>
 8012c40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8012c42:	693b      	ldr	r3, [r7, #16]
 8012c44:	4a6f      	ldr	r2, [pc, #444]	; (8012e04 <HAL_RCC_ClockConfig+0x264>)
 8012c46:	4293      	cmp	r3, r2
 8012c48:	d947      	bls.n	8012cda <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8012c4a:	4b6d      	ldr	r3, [pc, #436]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012c4c:	689b      	ldr	r3, [r3, #8]
 8012c4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d141      	bne.n	8012cda <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8012c56:	4b6a      	ldr	r3, [pc, #424]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012c58:	689b      	ldr	r3, [r3, #8]
 8012c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012c5e:	4a68      	ldr	r2, [pc, #416]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8012c66:	2380      	movs	r3, #128	; 0x80
 8012c68:	617b      	str	r3, [r7, #20]
 8012c6a:	e036      	b.n	8012cda <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	685b      	ldr	r3, [r3, #4]
 8012c70:	2b02      	cmp	r3, #2
 8012c72:	d107      	bne.n	8012c84 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8012c74:	4b62      	ldr	r3, [pc, #392]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d115      	bne.n	8012cac <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8012c80:	2301      	movs	r3, #1
 8012c82:	e0b6      	b.n	8012df2 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	685b      	ldr	r3, [r3, #4]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d107      	bne.n	8012c9c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8012c8c:	4b5c      	ldr	r3, [pc, #368]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	f003 0302 	and.w	r3, r3, #2
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d109      	bne.n	8012cac <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8012c98:	2301      	movs	r3, #1
 8012c9a:	e0aa      	b.n	8012df2 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012c9c:	4b58      	ldr	r3, [pc, #352]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d101      	bne.n	8012cac <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8012ca8:	2301      	movs	r3, #1
 8012caa:	e0a2      	b.n	8012df2 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8012cac:	f000 f8b0 	bl	8012e10 <HAL_RCC_GetSysClockFreq>
 8012cb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8012cb2:	693b      	ldr	r3, [r7, #16]
 8012cb4:	4a53      	ldr	r2, [pc, #332]	; (8012e04 <HAL_RCC_ClockConfig+0x264>)
 8012cb6:	4293      	cmp	r3, r2
 8012cb8:	d90f      	bls.n	8012cda <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8012cba:	4b51      	ldr	r3, [pc, #324]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012cbc:	689b      	ldr	r3, [r3, #8]
 8012cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d109      	bne.n	8012cda <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8012cc6:	4b4e      	ldr	r3, [pc, #312]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012cc8:	689b      	ldr	r3, [r3, #8]
 8012cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012cce:	4a4c      	ldr	r2, [pc, #304]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8012cd6:	2380      	movs	r3, #128	; 0x80
 8012cd8:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012cda:	4b49      	ldr	r3, [pc, #292]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012cdc:	689b      	ldr	r3, [r3, #8]
 8012cde:	f023 0203 	bic.w	r2, r3, #3
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	685b      	ldr	r3, [r3, #4]
 8012ce6:	4946      	ldr	r1, [pc, #280]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012ce8:	4313      	orrs	r3, r2
 8012cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012cec:	f7fc fd06 	bl	800f6fc <HAL_GetTick>
 8012cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012cf2:	e013      	b.n	8012d1c <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012cf4:	f7fc fd02 	bl	800f6fc <HAL_GetTick>
 8012cf8:	4602      	mov	r2, r0
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	1ad3      	subs	r3, r2, r3
 8012cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d02:	4293      	cmp	r3, r2
 8012d04:	d90a      	bls.n	8012d1c <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012d06:	4b3e      	ldr	r3, [pc, #248]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012d08:	689b      	ldr	r3, [r3, #8]
 8012d0a:	f003 020c 	and.w	r2, r3, #12
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	009b      	lsls	r3, r3, #2
 8012d14:	429a      	cmp	r2, r3
 8012d16:	d001      	beq.n	8012d1c <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8012d18:	2303      	movs	r3, #3
 8012d1a:	e06a      	b.n	8012df2 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012d1c:	4b38      	ldr	r3, [pc, #224]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012d1e:	689b      	ldr	r3, [r3, #8]
 8012d20:	f003 020c 	and.w	r2, r3, #12
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	685b      	ldr	r3, [r3, #4]
 8012d28:	009b      	lsls	r3, r3, #2
 8012d2a:	429a      	cmp	r2, r3
 8012d2c:	d1e2      	bne.n	8012cf4 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8012d2e:	697b      	ldr	r3, [r7, #20]
 8012d30:	2b80      	cmp	r3, #128	; 0x80
 8012d32:	d105      	bne.n	8012d40 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8012d34:	4b32      	ldr	r3, [pc, #200]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012d36:	689b      	ldr	r3, [r3, #8]
 8012d38:	4a31      	ldr	r2, [pc, #196]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012d3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012d3e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	f003 0302 	and.w	r3, r3, #2
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d010      	beq.n	8012d6e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	689a      	ldr	r2, [r3, #8]
 8012d50:	4b2b      	ldr	r3, [pc, #172]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012d52:	689b      	ldr	r3, [r3, #8]
 8012d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012d58:	429a      	cmp	r2, r3
 8012d5a:	d208      	bcs.n	8012d6e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012d5c:	4b28      	ldr	r3, [pc, #160]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012d5e:	689b      	ldr	r3, [r3, #8]
 8012d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	689b      	ldr	r3, [r3, #8]
 8012d68:	4925      	ldr	r1, [pc, #148]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012d6a:	4313      	orrs	r3, r2
 8012d6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8012d6e:	4b23      	ldr	r3, [pc, #140]	; (8012dfc <HAL_RCC_ClockConfig+0x25c>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	f003 030f 	and.w	r3, r3, #15
 8012d76:	683a      	ldr	r2, [r7, #0]
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	d210      	bcs.n	8012d9e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012d7c:	4b1f      	ldr	r3, [pc, #124]	; (8012dfc <HAL_RCC_ClockConfig+0x25c>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	f023 020f 	bic.w	r2, r3, #15
 8012d84:	491d      	ldr	r1, [pc, #116]	; (8012dfc <HAL_RCC_ClockConfig+0x25c>)
 8012d86:	683b      	ldr	r3, [r7, #0]
 8012d88:	4313      	orrs	r3, r2
 8012d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8012d8c:	4b1b      	ldr	r3, [pc, #108]	; (8012dfc <HAL_RCC_ClockConfig+0x25c>)
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	f003 030f 	and.w	r3, r3, #15
 8012d94:	683a      	ldr	r2, [r7, #0]
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d001      	beq.n	8012d9e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	e029      	b.n	8012df2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	f003 0304 	and.w	r3, r3, #4
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d008      	beq.n	8012dbc <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012daa:	4b15      	ldr	r3, [pc, #84]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012dac:	689b      	ldr	r3, [r3, #8]
 8012dae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	68db      	ldr	r3, [r3, #12]
 8012db6:	4912      	ldr	r1, [pc, #72]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012db8:	4313      	orrs	r3, r2
 8012dba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	f003 0308 	and.w	r3, r3, #8
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d009      	beq.n	8012ddc <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012dc8:	4b0d      	ldr	r3, [pc, #52]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012dca:	689b      	ldr	r3, [r3, #8]
 8012dcc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	691b      	ldr	r3, [r3, #16]
 8012dd4:	00db      	lsls	r3, r3, #3
 8012dd6:	490a      	ldr	r1, [pc, #40]	; (8012e00 <HAL_RCC_ClockConfig+0x260>)
 8012dd8:	4313      	orrs	r3, r2
 8012dda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8012ddc:	f000 f8b6 	bl	8012f4c <HAL_RCC_GetHCLKFreq>
 8012de0:	4603      	mov	r3, r0
 8012de2:	4a09      	ldr	r2, [pc, #36]	; (8012e08 <HAL_RCC_ClockConfig+0x268>)
 8012de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8012de6:	4b09      	ldr	r3, [pc, #36]	; (8012e0c <HAL_RCC_ClockConfig+0x26c>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7fc fa00 	bl	800f1f0 <HAL_InitTick>
 8012df0:	4603      	mov	r3, r0
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	3718      	adds	r7, #24
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}
 8012dfa:	bf00      	nop
 8012dfc:	40022000 	.word	0x40022000
 8012e00:	40021000 	.word	0x40021000
 8012e04:	04c4b400 	.word	0x04c4b400
 8012e08:	20000004 	.word	0x20000004
 8012e0c:	20000008 	.word	0x20000008

08012e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012e10:	b480      	push	{r7}
 8012e12:	b089      	sub	sp, #36	; 0x24
 8012e14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8012e16:	2300      	movs	r3, #0
 8012e18:	61fb      	str	r3, [r7, #28]
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012e1e:	4b47      	ldr	r3, [pc, #284]	; (8012f3c <HAL_RCC_GetSysClockFreq+0x12c>)
 8012e20:	689b      	ldr	r3, [r3, #8]
 8012e22:	f003 030c 	and.w	r3, r3, #12
 8012e26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012e28:	4b44      	ldr	r3, [pc, #272]	; (8012f3c <HAL_RCC_GetSysClockFreq+0x12c>)
 8012e2a:	68db      	ldr	r3, [r3, #12]
 8012e2c:	f003 0303 	and.w	r3, r3, #3
 8012e30:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8012e32:	693b      	ldr	r3, [r7, #16]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d005      	beq.n	8012e44 <HAL_RCC_GetSysClockFreq+0x34>
 8012e38:	693b      	ldr	r3, [r7, #16]
 8012e3a:	2b0c      	cmp	r3, #12
 8012e3c:	d121      	bne.n	8012e82 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	2b01      	cmp	r3, #1
 8012e42:	d11e      	bne.n	8012e82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8012e44:	4b3d      	ldr	r3, [pc, #244]	; (8012f3c <HAL_RCC_GetSysClockFreq+0x12c>)
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	f003 0308 	and.w	r3, r3, #8
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d107      	bne.n	8012e60 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8012e50:	4b3a      	ldr	r3, [pc, #232]	; (8012f3c <HAL_RCC_GetSysClockFreq+0x12c>)
 8012e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012e56:	0a1b      	lsrs	r3, r3, #8
 8012e58:	f003 030f 	and.w	r3, r3, #15
 8012e5c:	61fb      	str	r3, [r7, #28]
 8012e5e:	e005      	b.n	8012e6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8012e60:	4b36      	ldr	r3, [pc, #216]	; (8012f3c <HAL_RCC_GetSysClockFreq+0x12c>)
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	091b      	lsrs	r3, r3, #4
 8012e66:	f003 030f 	and.w	r3, r3, #15
 8012e6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8012e6c:	4a34      	ldr	r2, [pc, #208]	; (8012f40 <HAL_RCC_GetSysClockFreq+0x130>)
 8012e6e:	69fb      	ldr	r3, [r7, #28]
 8012e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e74:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d10d      	bne.n	8012e98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8012e7c:	69fb      	ldr	r3, [r7, #28]
 8012e7e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8012e80:	e00a      	b.n	8012e98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	2b04      	cmp	r3, #4
 8012e86:	d102      	bne.n	8012e8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8012e88:	4b2e      	ldr	r3, [pc, #184]	; (8012f44 <HAL_RCC_GetSysClockFreq+0x134>)
 8012e8a:	61bb      	str	r3, [r7, #24]
 8012e8c:	e004      	b.n	8012e98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8012e8e:	693b      	ldr	r3, [r7, #16]
 8012e90:	2b08      	cmp	r3, #8
 8012e92:	d101      	bne.n	8012e98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8012e94:	4b2c      	ldr	r3, [pc, #176]	; (8012f48 <HAL_RCC_GetSysClockFreq+0x138>)
 8012e96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	2b0c      	cmp	r3, #12
 8012e9c:	d146      	bne.n	8012f2c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8012e9e:	4b27      	ldr	r3, [pc, #156]	; (8012f3c <HAL_RCC_GetSysClockFreq+0x12c>)
 8012ea0:	68db      	ldr	r3, [r3, #12]
 8012ea2:	f003 0303 	and.w	r3, r3, #3
 8012ea6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8012ea8:	4b24      	ldr	r3, [pc, #144]	; (8012f3c <HAL_RCC_GetSysClockFreq+0x12c>)
 8012eaa:	68db      	ldr	r3, [r3, #12]
 8012eac:	091b      	lsrs	r3, r3, #4
 8012eae:	f003 030f 	and.w	r3, r3, #15
 8012eb2:	3301      	adds	r3, #1
 8012eb4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8012eb6:	68bb      	ldr	r3, [r7, #8]
 8012eb8:	2b02      	cmp	r3, #2
 8012eba:	d003      	beq.n	8012ec4 <HAL_RCC_GetSysClockFreq+0xb4>
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	2b03      	cmp	r3, #3
 8012ec0:	d00d      	beq.n	8012ede <HAL_RCC_GetSysClockFreq+0xce>
 8012ec2:	e019      	b.n	8012ef8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8012ec4:	4a1f      	ldr	r2, [pc, #124]	; (8012f44 <HAL_RCC_GetSysClockFreq+0x134>)
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ecc:	4a1b      	ldr	r2, [pc, #108]	; (8012f3c <HAL_RCC_GetSysClockFreq+0x12c>)
 8012ece:	68d2      	ldr	r2, [r2, #12]
 8012ed0:	0a12      	lsrs	r2, r2, #8
 8012ed2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012ed6:	fb02 f303 	mul.w	r3, r2, r3
 8012eda:	617b      	str	r3, [r7, #20]
        break;
 8012edc:	e019      	b.n	8012f12 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8012ede:	4a1a      	ldr	r2, [pc, #104]	; (8012f48 <HAL_RCC_GetSysClockFreq+0x138>)
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ee6:	4a15      	ldr	r2, [pc, #84]	; (8012f3c <HAL_RCC_GetSysClockFreq+0x12c>)
 8012ee8:	68d2      	ldr	r2, [r2, #12]
 8012eea:	0a12      	lsrs	r2, r2, #8
 8012eec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012ef0:	fb02 f303 	mul.w	r3, r2, r3
 8012ef4:	617b      	str	r3, [r7, #20]
        break;
 8012ef6:	e00c      	b.n	8012f12 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8012ef8:	69fa      	ldr	r2, [r7, #28]
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f00:	4a0e      	ldr	r2, [pc, #56]	; (8012f3c <HAL_RCC_GetSysClockFreq+0x12c>)
 8012f02:	68d2      	ldr	r2, [r2, #12]
 8012f04:	0a12      	lsrs	r2, r2, #8
 8012f06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012f0a:	fb02 f303 	mul.w	r3, r2, r3
 8012f0e:	617b      	str	r3, [r7, #20]
        break;
 8012f10:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8012f12:	4b0a      	ldr	r3, [pc, #40]	; (8012f3c <HAL_RCC_GetSysClockFreq+0x12c>)
 8012f14:	68db      	ldr	r3, [r3, #12]
 8012f16:	0e5b      	lsrs	r3, r3, #25
 8012f18:	f003 0303 	and.w	r3, r3, #3
 8012f1c:	3301      	adds	r3, #1
 8012f1e:	005b      	lsls	r3, r3, #1
 8012f20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8012f22:	697a      	ldr	r2, [r7, #20]
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8012f2c:	69bb      	ldr	r3, [r7, #24]
}
 8012f2e:	4618      	mov	r0, r3
 8012f30:	3724      	adds	r7, #36	; 0x24
 8012f32:	46bd      	mov	sp, r7
 8012f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f38:	4770      	bx	lr
 8012f3a:	bf00      	nop
 8012f3c:	40021000 	.word	0x40021000
 8012f40:	0801e710 	.word	0x0801e710
 8012f44:	00f42400 	.word	0x00f42400
 8012f48:	007a1200 	.word	0x007a1200

08012f4c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8012f50:	f7ff ff5e 	bl	8012e10 <HAL_RCC_GetSysClockFreq>
 8012f54:	4602      	mov	r2, r0
 8012f56:	4b05      	ldr	r3, [pc, #20]	; (8012f6c <HAL_RCC_GetHCLKFreq+0x20>)
 8012f58:	689b      	ldr	r3, [r3, #8]
 8012f5a:	091b      	lsrs	r3, r3, #4
 8012f5c:	f003 030f 	and.w	r3, r3, #15
 8012f60:	4903      	ldr	r1, [pc, #12]	; (8012f70 <HAL_RCC_GetHCLKFreq+0x24>)
 8012f62:	5ccb      	ldrb	r3, [r1, r3]
 8012f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	bd80      	pop	{r7, pc}
 8012f6c:	40021000 	.word	0x40021000
 8012f70:	0801e6f8 	.word	0x0801e6f8

08012f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8012f78:	f7ff ffe8 	bl	8012f4c <HAL_RCC_GetHCLKFreq>
 8012f7c:	4602      	mov	r2, r0
 8012f7e:	4b05      	ldr	r3, [pc, #20]	; (8012f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8012f80:	689b      	ldr	r3, [r3, #8]
 8012f82:	0a1b      	lsrs	r3, r3, #8
 8012f84:	f003 0307 	and.w	r3, r3, #7
 8012f88:	4903      	ldr	r1, [pc, #12]	; (8012f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012f8a:	5ccb      	ldrb	r3, [r1, r3]
 8012f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	bd80      	pop	{r7, pc}
 8012f94:	40021000 	.word	0x40021000
 8012f98:	0801e708 	.word	0x0801e708

08012f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8012fa0:	f7ff ffd4 	bl	8012f4c <HAL_RCC_GetHCLKFreq>
 8012fa4:	4602      	mov	r2, r0
 8012fa6:	4b05      	ldr	r3, [pc, #20]	; (8012fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8012fa8:	689b      	ldr	r3, [r3, #8]
 8012faa:	0adb      	lsrs	r3, r3, #11
 8012fac:	f003 0307 	and.w	r3, r3, #7
 8012fb0:	4903      	ldr	r1, [pc, #12]	; (8012fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012fb2:	5ccb      	ldrb	r3, [r1, r3]
 8012fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012fb8:	4618      	mov	r0, r3
 8012fba:	bd80      	pop	{r7, pc}
 8012fbc:	40021000 	.word	0x40021000
 8012fc0:	0801e708 	.word	0x0801e708

08012fc4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b083      	sub	sp, #12
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	220f      	movs	r2, #15
 8012fd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012fd4:	4b12      	ldr	r3, [pc, #72]	; (8013020 <HAL_RCC_GetClockConfig+0x5c>)
 8012fd6:	689b      	ldr	r3, [r3, #8]
 8012fd8:	f003 0203 	and.w	r2, r3, #3
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8012fe0:	4b0f      	ldr	r3, [pc, #60]	; (8013020 <HAL_RCC_GetClockConfig+0x5c>)
 8012fe2:	689b      	ldr	r3, [r3, #8]
 8012fe4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8012fec:	4b0c      	ldr	r3, [pc, #48]	; (8013020 <HAL_RCC_GetClockConfig+0x5c>)
 8012fee:	689b      	ldr	r3, [r3, #8]
 8012ff0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8012ff8:	4b09      	ldr	r3, [pc, #36]	; (8013020 <HAL_RCC_GetClockConfig+0x5c>)
 8012ffa:	689b      	ldr	r3, [r3, #8]
 8012ffc:	08db      	lsrs	r3, r3, #3
 8012ffe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8013006:	4b07      	ldr	r3, [pc, #28]	; (8013024 <HAL_RCC_GetClockConfig+0x60>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	f003 020f 	and.w	r2, r3, #15
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	601a      	str	r2, [r3, #0]
}
 8013012:	bf00      	nop
 8013014:	370c      	adds	r7, #12
 8013016:	46bd      	mov	sp, r7
 8013018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301c:	4770      	bx	lr
 801301e:	bf00      	nop
 8013020:	40021000 	.word	0x40021000
 8013024:	40022000 	.word	0x40022000

08013028 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b086      	sub	sp, #24
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8013030:	2300      	movs	r3, #0
 8013032:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8013034:	4b2c      	ldr	r3, [pc, #176]	; (80130e8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8013036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801303c:	2b00      	cmp	r3, #0
 801303e:	d003      	beq.n	8013048 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8013040:	f7ff f83a 	bl	80120b8 <HAL_PWREx_GetVoltageRange>
 8013044:	6138      	str	r0, [r7, #16]
 8013046:	e014      	b.n	8013072 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8013048:	4b27      	ldr	r3, [pc, #156]	; (80130e8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 801304a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801304c:	4a26      	ldr	r2, [pc, #152]	; (80130e8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 801304e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013052:	6593      	str	r3, [r2, #88]	; 0x58
 8013054:	4b24      	ldr	r3, [pc, #144]	; (80130e8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8013056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801305c:	60fb      	str	r3, [r7, #12]
 801305e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8013060:	f7ff f82a 	bl	80120b8 <HAL_PWREx_GetVoltageRange>
 8013064:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8013066:	4b20      	ldr	r3, [pc, #128]	; (80130e8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8013068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801306a:	4a1f      	ldr	r2, [pc, #124]	; (80130e8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 801306c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013070:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d003      	beq.n	8013080 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8013078:	693b      	ldr	r3, [r7, #16]
 801307a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801307e:	d10b      	bne.n	8013098 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2b80      	cmp	r3, #128	; 0x80
 8013084:	d919      	bls.n	80130ba <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	2ba0      	cmp	r3, #160	; 0xa0
 801308a:	d902      	bls.n	8013092 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801308c:	2302      	movs	r3, #2
 801308e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8013090:	e013      	b.n	80130ba <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8013092:	2301      	movs	r3, #1
 8013094:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8013096:	e010      	b.n	80130ba <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2b80      	cmp	r3, #128	; 0x80
 801309c:	d902      	bls.n	80130a4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 801309e:	2303      	movs	r3, #3
 80130a0:	617b      	str	r3, [r7, #20]
 80130a2:	e00a      	b.n	80130ba <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2b80      	cmp	r3, #128	; 0x80
 80130a8:	d102      	bne.n	80130b0 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80130aa:	2302      	movs	r3, #2
 80130ac:	617b      	str	r3, [r7, #20]
 80130ae:	e004      	b.n	80130ba <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2b70      	cmp	r3, #112	; 0x70
 80130b4:	d101      	bne.n	80130ba <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80130b6:	2301      	movs	r3, #1
 80130b8:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80130ba:	4b0c      	ldr	r3, [pc, #48]	; (80130ec <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	f023 020f 	bic.w	r2, r3, #15
 80130c2:	490a      	ldr	r1, [pc, #40]	; (80130ec <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	4313      	orrs	r3, r2
 80130c8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80130ca:	4b08      	ldr	r3, [pc, #32]	; (80130ec <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	f003 030f 	and.w	r3, r3, #15
 80130d2:	697a      	ldr	r2, [r7, #20]
 80130d4:	429a      	cmp	r2, r3
 80130d6:	d001      	beq.n	80130dc <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80130d8:	2301      	movs	r3, #1
 80130da:	e000      	b.n	80130de <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80130dc:	2300      	movs	r3, #0
}
 80130de:	4618      	mov	r0, r3
 80130e0:	3718      	adds	r7, #24
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}
 80130e6:	bf00      	nop
 80130e8:	40021000 	.word	0x40021000
 80130ec:	40022000 	.word	0x40022000

080130f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80130f0:	b480      	push	{r7}
 80130f2:	b087      	sub	sp, #28
 80130f4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80130f6:	4b31      	ldr	r3, [pc, #196]	; (80131bc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80130f8:	68db      	ldr	r3, [r3, #12]
 80130fa:	f003 0303 	and.w	r3, r3, #3
 80130fe:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8013100:	4b2e      	ldr	r3, [pc, #184]	; (80131bc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8013102:	68db      	ldr	r3, [r3, #12]
 8013104:	091b      	lsrs	r3, r3, #4
 8013106:	f003 030f 	and.w	r3, r3, #15
 801310a:	3301      	adds	r3, #1
 801310c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	2b03      	cmp	r3, #3
 8013112:	d015      	beq.n	8013140 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	2b03      	cmp	r3, #3
 8013118:	d839      	bhi.n	801318e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2b01      	cmp	r3, #1
 801311e:	d01c      	beq.n	801315a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	2b02      	cmp	r3, #2
 8013124:	d133      	bne.n	801318e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8013126:	4a26      	ldr	r2, [pc, #152]	; (80131c0 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	fbb2 f3f3 	udiv	r3, r2, r3
 801312e:	4a23      	ldr	r2, [pc, #140]	; (80131bc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8013130:	68d2      	ldr	r2, [r2, #12]
 8013132:	0a12      	lsrs	r2, r2, #8
 8013134:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013138:	fb02 f303 	mul.w	r3, r2, r3
 801313c:	613b      	str	r3, [r7, #16]
      break;
 801313e:	e029      	b.n	8013194 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8013140:	4a20      	ldr	r2, [pc, #128]	; (80131c4 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	fbb2 f3f3 	udiv	r3, r2, r3
 8013148:	4a1c      	ldr	r2, [pc, #112]	; (80131bc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801314a:	68d2      	ldr	r2, [r2, #12]
 801314c:	0a12      	lsrs	r2, r2, #8
 801314e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013152:	fb02 f303 	mul.w	r3, r2, r3
 8013156:	613b      	str	r3, [r7, #16]
      break;
 8013158:	e01c      	b.n	8013194 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801315a:	4b18      	ldr	r3, [pc, #96]	; (80131bc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	f003 0308 	and.w	r3, r3, #8
 8013162:	2b00      	cmp	r3, #0
 8013164:	d107      	bne.n	8013176 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8013166:	4b15      	ldr	r3, [pc, #84]	; (80131bc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8013168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801316c:	0a1b      	lsrs	r3, r3, #8
 801316e:	f003 030f 	and.w	r3, r3, #15
 8013172:	617b      	str	r3, [r7, #20]
 8013174:	e005      	b.n	8013182 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8013176:	4b11      	ldr	r3, [pc, #68]	; (80131bc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	091b      	lsrs	r3, r3, #4
 801317c:	f003 030f 	and.w	r3, r3, #15
 8013180:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8013182:	4a11      	ldr	r2, [pc, #68]	; (80131c8 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801318a:	613b      	str	r3, [r7, #16]
        break;
 801318c:	e002      	b.n	8013194 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 801318e:	2300      	movs	r3, #0
 8013190:	613b      	str	r3, [r7, #16]
      break;
 8013192:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8013194:	4b09      	ldr	r3, [pc, #36]	; (80131bc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8013196:	68db      	ldr	r3, [r3, #12]
 8013198:	0e5b      	lsrs	r3, r3, #25
 801319a:	f003 0303 	and.w	r3, r3, #3
 801319e:	3301      	adds	r3, #1
 80131a0:	005b      	lsls	r3, r3, #1
 80131a2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80131a4:	693a      	ldr	r2, [r7, #16]
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80131ac:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80131ae:	683b      	ldr	r3, [r7, #0]
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	371c      	adds	r7, #28
 80131b4:	46bd      	mov	sp, r7
 80131b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ba:	4770      	bx	lr
 80131bc:	40021000 	.word	0x40021000
 80131c0:	00f42400 	.word	0x00f42400
 80131c4:	007a1200 	.word	0x007a1200
 80131c8:	0801e710 	.word	0x0801e710

080131cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b088      	sub	sp, #32
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80131d4:	2300      	movs	r3, #0
 80131d6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80131d8:	2300      	movs	r3, #0
 80131da:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d040      	beq.n	801326a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131ec:	2b80      	cmp	r3, #128	; 0x80
 80131ee:	d02a      	beq.n	8013246 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80131f0:	2b80      	cmp	r3, #128	; 0x80
 80131f2:	d825      	bhi.n	8013240 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80131f4:	2b60      	cmp	r3, #96	; 0x60
 80131f6:	d026      	beq.n	8013246 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80131f8:	2b60      	cmp	r3, #96	; 0x60
 80131fa:	d821      	bhi.n	8013240 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80131fc:	2b40      	cmp	r3, #64	; 0x40
 80131fe:	d006      	beq.n	801320e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8013200:	2b40      	cmp	r3, #64	; 0x40
 8013202:	d81d      	bhi.n	8013240 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8013204:	2b00      	cmp	r3, #0
 8013206:	d009      	beq.n	801321c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8013208:	2b20      	cmp	r3, #32
 801320a:	d010      	beq.n	801322e <HAL_RCCEx_PeriphCLKConfig+0x62>
 801320c:	e018      	b.n	8013240 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801320e:	4b8f      	ldr	r3, [pc, #572]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8013210:	68db      	ldr	r3, [r3, #12]
 8013212:	4a8e      	ldr	r2, [pc, #568]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8013214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013218:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801321a:	e015      	b.n	8013248 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	3304      	adds	r3, #4
 8013220:	2100      	movs	r1, #0
 8013222:	4618      	mov	r0, r3
 8013224:	f000 fb56 	bl	80138d4 <RCCEx_PLLSAI1_Config>
 8013228:	4603      	mov	r3, r0
 801322a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801322c:	e00c      	b.n	8013248 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	3320      	adds	r3, #32
 8013232:	2100      	movs	r1, #0
 8013234:	4618      	mov	r0, r3
 8013236:	f000 fc33 	bl	8013aa0 <RCCEx_PLLSAI2_Config>
 801323a:	4603      	mov	r3, r0
 801323c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801323e:	e003      	b.n	8013248 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013240:	2301      	movs	r3, #1
 8013242:	77fb      	strb	r3, [r7, #31]
        break;
 8013244:	e000      	b.n	8013248 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8013246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013248:	7ffb      	ldrb	r3, [r7, #31]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d10b      	bne.n	8013266 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801324e:	4b7f      	ldr	r3, [pc, #508]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8013250:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013254:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801325c:	497b      	ldr	r1, [pc, #492]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801325e:	4313      	orrs	r3, r2
 8013260:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8013264:	e001      	b.n	801326a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013266:	7ffb      	ldrb	r3, [r7, #31]
 8013268:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013272:	2b00      	cmp	r3, #0
 8013274:	d047      	beq.n	8013306 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801327a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801327e:	d030      	beq.n	80132e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8013280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013284:	d82a      	bhi.n	80132dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8013286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801328a:	d02a      	beq.n	80132e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 801328c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013290:	d824      	bhi.n	80132dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8013292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013296:	d008      	beq.n	80132aa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8013298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801329c:	d81e      	bhi.n	80132dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d00a      	beq.n	80132b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80132a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80132a6:	d010      	beq.n	80132ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80132a8:	e018      	b.n	80132dc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80132aa:	4b68      	ldr	r3, [pc, #416]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80132ac:	68db      	ldr	r3, [r3, #12]
 80132ae:	4a67      	ldr	r2, [pc, #412]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80132b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80132b4:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80132b6:	e015      	b.n	80132e4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	3304      	adds	r3, #4
 80132bc:	2100      	movs	r1, #0
 80132be:	4618      	mov	r0, r3
 80132c0:	f000 fb08 	bl	80138d4 <RCCEx_PLLSAI1_Config>
 80132c4:	4603      	mov	r3, r0
 80132c6:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80132c8:	e00c      	b.n	80132e4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	3320      	adds	r3, #32
 80132ce:	2100      	movs	r1, #0
 80132d0:	4618      	mov	r0, r3
 80132d2:	f000 fbe5 	bl	8013aa0 <RCCEx_PLLSAI2_Config>
 80132d6:	4603      	mov	r3, r0
 80132d8:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80132da:	e003      	b.n	80132e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80132dc:	2301      	movs	r3, #1
 80132de:	77fb      	strb	r3, [r7, #31]
        break;
 80132e0:	e000      	b.n	80132e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80132e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80132e4:	7ffb      	ldrb	r3, [r7, #31]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d10b      	bne.n	8013302 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80132ea:	4b58      	ldr	r3, [pc, #352]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80132ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80132f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132f8:	4954      	ldr	r1, [pc, #336]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80132fa:	4313      	orrs	r3, r2
 80132fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8013300:	e001      	b.n	8013306 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013302:	7ffb      	ldrb	r3, [r7, #31]
 8013304:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801330e:	2b00      	cmp	r3, #0
 8013310:	f000 80ab 	beq.w	801346a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013314:	2300      	movs	r3, #0
 8013316:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013318:	4b4c      	ldr	r3, [pc, #304]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801331c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013320:	2b00      	cmp	r3, #0
 8013322:	d10d      	bne.n	8013340 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013324:	4b49      	ldr	r3, [pc, #292]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8013326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013328:	4a48      	ldr	r2, [pc, #288]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801332a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801332e:	6593      	str	r3, [r2, #88]	; 0x58
 8013330:	4b46      	ldr	r3, [pc, #280]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8013332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013338:	60fb      	str	r3, [r7, #12]
 801333a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801333c:	2301      	movs	r3, #1
 801333e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013340:	4b43      	ldr	r3, [pc, #268]	; (8013450 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	4a42      	ldr	r2, [pc, #264]	; (8013450 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8013346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801334a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801334c:	f7fc f9d6 	bl	800f6fc <HAL_GetTick>
 8013350:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013352:	e00f      	b.n	8013374 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013354:	f7fc f9d2 	bl	800f6fc <HAL_GetTick>
 8013358:	4602      	mov	r2, r0
 801335a:	693b      	ldr	r3, [r7, #16]
 801335c:	1ad3      	subs	r3, r2, r3
 801335e:	2b02      	cmp	r3, #2
 8013360:	d908      	bls.n	8013374 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013362:	4b3b      	ldr	r3, [pc, #236]	; (8013450 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801336a:	2b00      	cmp	r3, #0
 801336c:	d109      	bne.n	8013382 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 801336e:	2303      	movs	r3, #3
 8013370:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8013372:	e006      	b.n	8013382 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013374:	4b36      	ldr	r3, [pc, #216]	; (8013450 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801337c:	2b00      	cmp	r3, #0
 801337e:	d0e9      	beq.n	8013354 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8013380:	e000      	b.n	8013384 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8013382:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8013384:	7ffb      	ldrb	r3, [r7, #31]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d164      	bne.n	8013454 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801338a:	4b30      	ldr	r3, [pc, #192]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013390:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013394:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8013396:	69bb      	ldr	r3, [r7, #24]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d01f      	beq.n	80133dc <HAL_RCCEx_PeriphCLKConfig+0x210>
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80133a2:	69ba      	ldr	r2, [r7, #24]
 80133a4:	429a      	cmp	r2, r3
 80133a6:	d019      	beq.n	80133dc <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80133a8:	4b28      	ldr	r3, [pc, #160]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80133aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80133ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80133b2:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80133b4:	4b25      	ldr	r3, [pc, #148]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80133b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80133ba:	4a24      	ldr	r2, [pc, #144]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80133bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80133c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80133c4:	4b21      	ldr	r3, [pc, #132]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80133c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80133ca:	4a20      	ldr	r2, [pc, #128]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80133cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80133d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80133d4:	4a1d      	ldr	r2, [pc, #116]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80133d6:	69bb      	ldr	r3, [r7, #24]
 80133d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80133dc:	69bb      	ldr	r3, [r7, #24]
 80133de:	f003 0301 	and.w	r3, r3, #1
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d01f      	beq.n	8013426 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80133e6:	f7fc f989 	bl	800f6fc <HAL_GetTick>
 80133ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80133ec:	e012      	b.n	8013414 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80133ee:	f7fc f985 	bl	800f6fc <HAL_GetTick>
 80133f2:	4602      	mov	r2, r0
 80133f4:	693b      	ldr	r3, [r7, #16]
 80133f6:	1ad3      	subs	r3, r2, r3
 80133f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80133fc:	4293      	cmp	r3, r2
 80133fe:	d909      	bls.n	8013414 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013400:	4b12      	ldr	r3, [pc, #72]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8013402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013406:	f003 0302 	and.w	r3, r3, #2
 801340a:	2b00      	cmp	r3, #0
 801340c:	d10a      	bne.n	8013424 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 801340e:	2303      	movs	r3, #3
 8013410:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8013412:	e007      	b.n	8013424 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013414:	4b0d      	ldr	r3, [pc, #52]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8013416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801341a:	f003 0302 	and.w	r3, r3, #2
 801341e:	2b00      	cmp	r3, #0
 8013420:	d0e5      	beq.n	80133ee <HAL_RCCEx_PeriphCLKConfig+0x222>
 8013422:	e000      	b.n	8013426 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8013424:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8013426:	7ffb      	ldrb	r3, [r7, #31]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d10c      	bne.n	8013446 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801342c:	4b07      	ldr	r3, [pc, #28]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013432:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801343c:	4903      	ldr	r1, [pc, #12]	; (801344c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801343e:	4313      	orrs	r3, r2
 8013440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8013444:	e008      	b.n	8013458 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8013446:	7ffb      	ldrb	r3, [r7, #31]
 8013448:	77bb      	strb	r3, [r7, #30]
 801344a:	e005      	b.n	8013458 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 801344c:	40021000 	.word	0x40021000
 8013450:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013454:	7ffb      	ldrb	r3, [r7, #31]
 8013456:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8013458:	7dfb      	ldrb	r3, [r7, #23]
 801345a:	2b01      	cmp	r3, #1
 801345c:	d105      	bne.n	801346a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801345e:	4b9c      	ldr	r3, [pc, #624]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013462:	4a9b      	ldr	r2, [pc, #620]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013468:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	f003 0301 	and.w	r3, r3, #1
 8013472:	2b00      	cmp	r3, #0
 8013474:	d00a      	beq.n	801348c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8013476:	4b96      	ldr	r3, [pc, #600]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801347c:	f023 0203 	bic.w	r2, r3, #3
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013484:	4992      	ldr	r1, [pc, #584]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013486:	4313      	orrs	r3, r2
 8013488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	f003 0302 	and.w	r3, r3, #2
 8013494:	2b00      	cmp	r3, #0
 8013496:	d00a      	beq.n	80134ae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8013498:	4b8d      	ldr	r3, [pc, #564]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801349e:	f023 020c 	bic.w	r2, r3, #12
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134a6:	498a      	ldr	r1, [pc, #552]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80134a8:	4313      	orrs	r3, r2
 80134aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	f003 0304 	and.w	r3, r3, #4
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d00a      	beq.n	80134d0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80134ba:	4b85      	ldr	r3, [pc, #532]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80134bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80134c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134c8:	4981      	ldr	r1, [pc, #516]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80134ca:	4313      	orrs	r3, r2
 80134cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	f003 0308 	and.w	r3, r3, #8
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d00a      	beq.n	80134f2 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80134dc:	4b7c      	ldr	r3, [pc, #496]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80134de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80134e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134ea:	4979      	ldr	r1, [pc, #484]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80134ec:	4313      	orrs	r3, r2
 80134ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	f003 0310 	and.w	r3, r3, #16
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d00a      	beq.n	8013514 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80134fe:	4b74      	ldr	r3, [pc, #464]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801350c:	4970      	ldr	r1, [pc, #448]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801350e:	4313      	orrs	r3, r2
 8013510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	f003 0320 	and.w	r3, r3, #32
 801351c:	2b00      	cmp	r3, #0
 801351e:	d00a      	beq.n	8013536 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8013520:	4b6b      	ldr	r3, [pc, #428]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013526:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801352e:	4968      	ldr	r1, [pc, #416]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013530:	4313      	orrs	r3, r2
 8013532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801353e:	2b00      	cmp	r3, #0
 8013540:	d00a      	beq.n	8013558 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8013542:	4b63      	ldr	r3, [pc, #396]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013548:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013550:	495f      	ldr	r1, [pc, #380]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013552:	4313      	orrs	r3, r2
 8013554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013560:	2b00      	cmp	r3, #0
 8013562:	d00a      	beq.n	801357a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8013564:	4b5a      	ldr	r3, [pc, #360]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801356a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013572:	4957      	ldr	r1, [pc, #348]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013574:	4313      	orrs	r3, r2
 8013576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013582:	2b00      	cmp	r3, #0
 8013584:	d00a      	beq.n	801359c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8013586:	4b52      	ldr	r3, [pc, #328]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801358c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013594:	494e      	ldr	r1, [pc, #312]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013596:	4313      	orrs	r3, r2
 8013598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d031      	beq.n	801360c <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80135ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80135b0:	d00e      	beq.n	80135d0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80135b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80135b6:	d814      	bhi.n	80135e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d015      	beq.n	80135e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80135bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80135c0:	d10f      	bne.n	80135e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80135c2:	4b43      	ldr	r3, [pc, #268]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80135c4:	68db      	ldr	r3, [r3, #12]
 80135c6:	4a42      	ldr	r2, [pc, #264]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80135c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80135cc:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80135ce:	e00c      	b.n	80135ea <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	3304      	adds	r3, #4
 80135d4:	2100      	movs	r1, #0
 80135d6:	4618      	mov	r0, r3
 80135d8:	f000 f97c 	bl	80138d4 <RCCEx_PLLSAI1_Config>
 80135dc:	4603      	mov	r3, r0
 80135de:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80135e0:	e003      	b.n	80135ea <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80135e2:	2301      	movs	r3, #1
 80135e4:	77fb      	strb	r3, [r7, #31]
        break;
 80135e6:	e000      	b.n	80135ea <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80135e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80135ea:	7ffb      	ldrb	r3, [r7, #31]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d10b      	bne.n	8013608 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80135f0:	4b37      	ldr	r3, [pc, #220]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80135f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80135f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80135fe:	4934      	ldr	r1, [pc, #208]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013600:	4313      	orrs	r3, r2
 8013602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8013606:	e001      	b.n	801360c <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013608:	7ffb      	ldrb	r3, [r7, #31]
 801360a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013614:	2b00      	cmp	r3, #0
 8013616:	d00a      	beq.n	801362e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8013618:	4b2d      	ldr	r3, [pc, #180]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801361e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013626:	492a      	ldr	r1, [pc, #168]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013628:	4313      	orrs	r3, r2
 801362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013636:	2b00      	cmp	r3, #0
 8013638:	d00a      	beq.n	8013650 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801363a:	4b25      	ldr	r3, [pc, #148]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013640:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013648:	4921      	ldr	r1, [pc, #132]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801364a:	4313      	orrs	r3, r2
 801364c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013658:	2b00      	cmp	r3, #0
 801365a:	d00a      	beq.n	8013672 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801365c:	4b1c      	ldr	r3, [pc, #112]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013662:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801366a:	4919      	ldr	r1, [pc, #100]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801366c:	4313      	orrs	r3, r2
 801366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801367a:	2b00      	cmp	r3, #0
 801367c:	d00a      	beq.n	8013694 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801367e:	4b14      	ldr	r3, [pc, #80]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013680:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013684:	f023 0203 	bic.w	r2, r3, #3
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801368c:	4910      	ldr	r1, [pc, #64]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801368e:	4313      	orrs	r3, r2
 8013690:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801369c:	2b00      	cmp	r3, #0
 801369e:	d02b      	beq.n	80136f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80136a0:	4b0b      	ldr	r3, [pc, #44]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80136a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80136a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136ae:	4908      	ldr	r1, [pc, #32]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80136b0:	4313      	orrs	r3, r2
 80136b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80136be:	d109      	bne.n	80136d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80136c0:	4b03      	ldr	r3, [pc, #12]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80136c2:	68db      	ldr	r3, [r3, #12]
 80136c4:	4a02      	ldr	r2, [pc, #8]	; (80136d0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80136c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80136ca:	60d3      	str	r3, [r2, #12]
 80136cc:	e014      	b.n	80136f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80136ce:	bf00      	nop
 80136d0:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80136dc:	d10c      	bne.n	80136f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	3304      	adds	r3, #4
 80136e2:	2101      	movs	r1, #1
 80136e4:	4618      	mov	r0, r3
 80136e6:	f000 f8f5 	bl	80138d4 <RCCEx_PLLSAI1_Config>
 80136ea:	4603      	mov	r3, r0
 80136ec:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80136ee:	7ffb      	ldrb	r3, [r7, #31]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d001      	beq.n	80136f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80136f4:	7ffb      	ldrb	r3, [r7, #31]
 80136f6:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013700:	2b00      	cmp	r3, #0
 8013702:	d04a      	beq.n	801379a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801370c:	d108      	bne.n	8013720 <HAL_RCCEx_PeriphCLKConfig+0x554>
 801370e:	4b70      	ldr	r3, [pc, #448]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013710:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013714:	4a6e      	ldr	r2, [pc, #440]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801371a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 801371e:	e012      	b.n	8013746 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8013720:	4b6b      	ldr	r3, [pc, #428]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013726:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801372e:	4968      	ldr	r1, [pc, #416]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013730:	4313      	orrs	r3, r2
 8013732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8013736:	4b66      	ldr	r3, [pc, #408]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013738:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801373c:	4a64      	ldr	r2, [pc, #400]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801373e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013742:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801374a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801374e:	d10d      	bne.n	801376c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	3304      	adds	r3, #4
 8013754:	2101      	movs	r1, #1
 8013756:	4618      	mov	r0, r3
 8013758:	f000 f8bc 	bl	80138d4 <RCCEx_PLLSAI1_Config>
 801375c:	4603      	mov	r3, r0
 801375e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8013760:	7ffb      	ldrb	r3, [r7, #31]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d019      	beq.n	801379a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8013766:	7ffb      	ldrb	r3, [r7, #31]
 8013768:	77bb      	strb	r3, [r7, #30]
 801376a:	e016      	b.n	801379a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8013774:	d106      	bne.n	8013784 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8013776:	4b56      	ldr	r3, [pc, #344]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013778:	68db      	ldr	r3, [r3, #12]
 801377a:	4a55      	ldr	r2, [pc, #340]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801377c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013780:	60d3      	str	r3, [r2, #12]
 8013782:	e00a      	b.n	801379a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801378c:	d105      	bne.n	801379a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801378e:	4b50      	ldr	r3, [pc, #320]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013790:	68db      	ldr	r3, [r3, #12]
 8013792:	4a4f      	ldr	r2, [pc, #316]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013798:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d028      	beq.n	80137f8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80137a6:	4b4a      	ldr	r3, [pc, #296]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80137a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80137ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137b4:	4946      	ldr	r1, [pc, #280]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80137b6:	4313      	orrs	r3, r2
 80137b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80137c4:	d106      	bne.n	80137d4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80137c6:	4b42      	ldr	r3, [pc, #264]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80137c8:	68db      	ldr	r3, [r3, #12]
 80137ca:	4a41      	ldr	r2, [pc, #260]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80137cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80137d0:	60d3      	str	r3, [r2, #12]
 80137d2:	e011      	b.n	80137f8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80137dc:	d10c      	bne.n	80137f8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	3304      	adds	r3, #4
 80137e2:	2101      	movs	r1, #1
 80137e4:	4618      	mov	r0, r3
 80137e6:	f000 f875 	bl	80138d4 <RCCEx_PLLSAI1_Config>
 80137ea:	4603      	mov	r3, r0
 80137ec:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80137ee:	7ffb      	ldrb	r3, [r7, #31]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d001      	beq.n	80137f8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80137f4:	7ffb      	ldrb	r3, [r7, #31]
 80137f6:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013800:	2b00      	cmp	r3, #0
 8013802:	d01e      	beq.n	8013842 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8013804:	4b32      	ldr	r3, [pc, #200]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801380a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013814:	492e      	ldr	r1, [pc, #184]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013816:	4313      	orrs	r3, r2
 8013818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013826:	d10c      	bne.n	8013842 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	3304      	adds	r3, #4
 801382c:	2102      	movs	r1, #2
 801382e:	4618      	mov	r0, r3
 8013830:	f000 f850 	bl	80138d4 <RCCEx_PLLSAI1_Config>
 8013834:	4603      	mov	r3, r0
 8013836:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8013838:	7ffb      	ldrb	r3, [r7, #31]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d001      	beq.n	8013842 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 801383e:	7ffb      	ldrb	r3, [r7, #31]
 8013840:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801384a:	2b00      	cmp	r3, #0
 801384c:	d00b      	beq.n	8013866 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801384e:	4b20      	ldr	r3, [pc, #128]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013850:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013854:	f023 0204 	bic.w	r2, r3, #4
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801385e:	491c      	ldr	r1, [pc, #112]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013860:	4313      	orrs	r3, r2
 8013862:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801386e:	2b00      	cmp	r3, #0
 8013870:	d00b      	beq.n	801388a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8013872:	4b17      	ldr	r3, [pc, #92]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013874:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013878:	f023 0218 	bic.w	r2, r3, #24
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013882:	4913      	ldr	r1, [pc, #76]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013884:	4313      	orrs	r3, r2
 8013886:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013892:	2b00      	cmp	r3, #0
 8013894:	d017      	beq.n	80138c6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8013896:	4b0e      	ldr	r3, [pc, #56]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013898:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801389c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80138a6:	490a      	ldr	r1, [pc, #40]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80138a8:	4313      	orrs	r3, r2
 80138aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80138b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80138b8:	d105      	bne.n	80138c6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80138ba:	4b05      	ldr	r3, [pc, #20]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80138bc:	68db      	ldr	r3, [r3, #12]
 80138be:	4a04      	ldr	r2, [pc, #16]	; (80138d0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80138c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80138c4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80138c6:	7fbb      	ldrb	r3, [r7, #30]
}
 80138c8:	4618      	mov	r0, r3
 80138ca:	3720      	adds	r7, #32
 80138cc:	46bd      	mov	sp, r7
 80138ce:	bd80      	pop	{r7, pc}
 80138d0:	40021000 	.word	0x40021000

080138d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b084      	sub	sp, #16
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
 80138dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80138de:	2300      	movs	r3, #0
 80138e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	2b03      	cmp	r3, #3
 80138e8:	d018      	beq.n	801391c <RCCEx_PLLSAI1_Config+0x48>
 80138ea:	2b03      	cmp	r3, #3
 80138ec:	d81f      	bhi.n	801392e <RCCEx_PLLSAI1_Config+0x5a>
 80138ee:	2b01      	cmp	r3, #1
 80138f0:	d002      	beq.n	80138f8 <RCCEx_PLLSAI1_Config+0x24>
 80138f2:	2b02      	cmp	r3, #2
 80138f4:	d009      	beq.n	801390a <RCCEx_PLLSAI1_Config+0x36>
 80138f6:	e01a      	b.n	801392e <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80138f8:	4b65      	ldr	r3, [pc, #404]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	f003 0302 	and.w	r3, r3, #2
 8013900:	2b00      	cmp	r3, #0
 8013902:	d117      	bne.n	8013934 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8013904:	2301      	movs	r3, #1
 8013906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013908:	e014      	b.n	8013934 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801390a:	4b61      	ldr	r3, [pc, #388]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013912:	2b00      	cmp	r3, #0
 8013914:	d110      	bne.n	8013938 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8013916:	2301      	movs	r3, #1
 8013918:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801391a:	e00d      	b.n	8013938 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 801391c:	4b5c      	ldr	r3, [pc, #368]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8013924:	2b00      	cmp	r3, #0
 8013926:	d109      	bne.n	801393c <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8013928:	2301      	movs	r3, #1
 801392a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801392c:	e006      	b.n	801393c <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 801392e:	2301      	movs	r3, #1
 8013930:	73fb      	strb	r3, [r7, #15]
      break;
 8013932:	e004      	b.n	801393e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8013934:	bf00      	nop
 8013936:	e002      	b.n	801393e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8013938:	bf00      	nop
 801393a:	e000      	b.n	801393e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 801393c:	bf00      	nop
  }

  if (status == HAL_OK)
 801393e:	7bfb      	ldrb	r3, [r7, #15]
 8013940:	2b00      	cmp	r3, #0
 8013942:	f040 809f 	bne.w	8013a84 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8013946:	4b52      	ldr	r3, [pc, #328]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	4a51      	ldr	r2, [pc, #324]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 801394c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013950:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013952:	f7fb fed3 	bl	800f6fc <HAL_GetTick>
 8013956:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8013958:	e00f      	b.n	801397a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801395a:	f7fb fecf 	bl	800f6fc <HAL_GetTick>
 801395e:	4602      	mov	r2, r0
 8013960:	68bb      	ldr	r3, [r7, #8]
 8013962:	1ad3      	subs	r3, r2, r3
 8013964:	2b02      	cmp	r3, #2
 8013966:	d908      	bls.n	801397a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8013968:	4b49      	ldr	r3, [pc, #292]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013970:	2b00      	cmp	r3, #0
 8013972:	d009      	beq.n	8013988 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8013974:	2303      	movs	r3, #3
 8013976:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8013978:	e006      	b.n	8013988 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801397a:	4b45      	ldr	r3, [pc, #276]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013982:	2b00      	cmp	r3, #0
 8013984:	d1e9      	bne.n	801395a <RCCEx_PLLSAI1_Config+0x86>
 8013986:	e000      	b.n	801398a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8013988:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 801398a:	7bfb      	ldrb	r3, [r7, #15]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d179      	bne.n	8013a84 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8013990:	683b      	ldr	r3, [r7, #0]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d116      	bne.n	80139c4 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8013996:	4b3e      	ldr	r3, [pc, #248]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 8013998:	691a      	ldr	r2, [r3, #16]
 801399a:	4b3e      	ldr	r3, [pc, #248]	; (8013a94 <RCCEx_PLLSAI1_Config+0x1c0>)
 801399c:	4013      	ands	r3, r2
 801399e:	687a      	ldr	r2, [r7, #4]
 80139a0:	6892      	ldr	r2, [r2, #8]
 80139a2:	0211      	lsls	r1, r2, #8
 80139a4:	687a      	ldr	r2, [r7, #4]
 80139a6:	68d2      	ldr	r2, [r2, #12]
 80139a8:	06d2      	lsls	r2, r2, #27
 80139aa:	4311      	orrs	r1, r2
 80139ac:	687a      	ldr	r2, [r7, #4]
 80139ae:	6852      	ldr	r2, [r2, #4]
 80139b0:	3a01      	subs	r2, #1
 80139b2:	0112      	lsls	r2, r2, #4
 80139b4:	4311      	orrs	r1, r2
 80139b6:	687a      	ldr	r2, [r7, #4]
 80139b8:	6812      	ldr	r2, [r2, #0]
 80139ba:	430a      	orrs	r2, r1
 80139bc:	4934      	ldr	r1, [pc, #208]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 80139be:	4313      	orrs	r3, r2
 80139c0:	610b      	str	r3, [r1, #16]
 80139c2:	e033      	b.n	8013a2c <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	2b01      	cmp	r3, #1
 80139c8:	d118      	bne.n	80139fc <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80139ca:	4b31      	ldr	r3, [pc, #196]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 80139cc:	691a      	ldr	r2, [r3, #16]
 80139ce:	4b32      	ldr	r3, [pc, #200]	; (8013a98 <RCCEx_PLLSAI1_Config+0x1c4>)
 80139d0:	4013      	ands	r3, r2
 80139d2:	687a      	ldr	r2, [r7, #4]
 80139d4:	6892      	ldr	r2, [r2, #8]
 80139d6:	0211      	lsls	r1, r2, #8
 80139d8:	687a      	ldr	r2, [r7, #4]
 80139da:	6912      	ldr	r2, [r2, #16]
 80139dc:	0852      	lsrs	r2, r2, #1
 80139de:	3a01      	subs	r2, #1
 80139e0:	0552      	lsls	r2, r2, #21
 80139e2:	4311      	orrs	r1, r2
 80139e4:	687a      	ldr	r2, [r7, #4]
 80139e6:	6852      	ldr	r2, [r2, #4]
 80139e8:	3a01      	subs	r2, #1
 80139ea:	0112      	lsls	r2, r2, #4
 80139ec:	4311      	orrs	r1, r2
 80139ee:	687a      	ldr	r2, [r7, #4]
 80139f0:	6812      	ldr	r2, [r2, #0]
 80139f2:	430a      	orrs	r2, r1
 80139f4:	4926      	ldr	r1, [pc, #152]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 80139f6:	4313      	orrs	r3, r2
 80139f8:	610b      	str	r3, [r1, #16]
 80139fa:	e017      	b.n	8013a2c <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80139fc:	4b24      	ldr	r3, [pc, #144]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 80139fe:	691a      	ldr	r2, [r3, #16]
 8013a00:	4b26      	ldr	r3, [pc, #152]	; (8013a9c <RCCEx_PLLSAI1_Config+0x1c8>)
 8013a02:	4013      	ands	r3, r2
 8013a04:	687a      	ldr	r2, [r7, #4]
 8013a06:	6892      	ldr	r2, [r2, #8]
 8013a08:	0211      	lsls	r1, r2, #8
 8013a0a:	687a      	ldr	r2, [r7, #4]
 8013a0c:	6952      	ldr	r2, [r2, #20]
 8013a0e:	0852      	lsrs	r2, r2, #1
 8013a10:	3a01      	subs	r2, #1
 8013a12:	0652      	lsls	r2, r2, #25
 8013a14:	4311      	orrs	r1, r2
 8013a16:	687a      	ldr	r2, [r7, #4]
 8013a18:	6852      	ldr	r2, [r2, #4]
 8013a1a:	3a01      	subs	r2, #1
 8013a1c:	0112      	lsls	r2, r2, #4
 8013a1e:	4311      	orrs	r1, r2
 8013a20:	687a      	ldr	r2, [r7, #4]
 8013a22:	6812      	ldr	r2, [r2, #0]
 8013a24:	430a      	orrs	r2, r1
 8013a26:	491a      	ldr	r1, [pc, #104]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 8013a28:	4313      	orrs	r3, r2
 8013a2a:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8013a2c:	4b18      	ldr	r3, [pc, #96]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	4a17      	ldr	r2, [pc, #92]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 8013a32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013a36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013a38:	f7fb fe60 	bl	800f6fc <HAL_GetTick>
 8013a3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8013a3e:	e00f      	b.n	8013a60 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8013a40:	f7fb fe5c 	bl	800f6fc <HAL_GetTick>
 8013a44:	4602      	mov	r2, r0
 8013a46:	68bb      	ldr	r3, [r7, #8]
 8013a48:	1ad3      	subs	r3, r2, r3
 8013a4a:	2b02      	cmp	r3, #2
 8013a4c:	d908      	bls.n	8013a60 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8013a4e:	4b10      	ldr	r3, [pc, #64]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d109      	bne.n	8013a6e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8013a5a:	2303      	movs	r3, #3
 8013a5c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8013a5e:	e006      	b.n	8013a6e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8013a60:	4b0b      	ldr	r3, [pc, #44]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d0e9      	beq.n	8013a40 <RCCEx_PLLSAI1_Config+0x16c>
 8013a6c:	e000      	b.n	8013a70 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8013a6e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8013a70:	7bfb      	ldrb	r3, [r7, #15]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d106      	bne.n	8013a84 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8013a76:	4b06      	ldr	r3, [pc, #24]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 8013a78:	691a      	ldr	r2, [r3, #16]
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	699b      	ldr	r3, [r3, #24]
 8013a7e:	4904      	ldr	r1, [pc, #16]	; (8013a90 <RCCEx_PLLSAI1_Config+0x1bc>)
 8013a80:	4313      	orrs	r3, r2
 8013a82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8013a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a86:	4618      	mov	r0, r3
 8013a88:	3710      	adds	r7, #16
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}
 8013a8e:	bf00      	nop
 8013a90:	40021000 	.word	0x40021000
 8013a94:	07ff800c 	.word	0x07ff800c
 8013a98:	ff9f800c 	.word	0xff9f800c
 8013a9c:	f9ff800c 	.word	0xf9ff800c

08013aa0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b084      	sub	sp, #16
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
 8013aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013aaa:	2300      	movs	r3, #0
 8013aac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	2b03      	cmp	r3, #3
 8013ab4:	d018      	beq.n	8013ae8 <RCCEx_PLLSAI2_Config+0x48>
 8013ab6:	2b03      	cmp	r3, #3
 8013ab8:	d81f      	bhi.n	8013afa <RCCEx_PLLSAI2_Config+0x5a>
 8013aba:	2b01      	cmp	r3, #1
 8013abc:	d002      	beq.n	8013ac4 <RCCEx_PLLSAI2_Config+0x24>
 8013abe:	2b02      	cmp	r3, #2
 8013ac0:	d009      	beq.n	8013ad6 <RCCEx_PLLSAI2_Config+0x36>
 8013ac2:	e01a      	b.n	8013afa <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8013ac4:	4b4a      	ldr	r3, [pc, #296]	; (8013bf0 <RCCEx_PLLSAI2_Config+0x150>)
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	f003 0302 	and.w	r3, r3, #2
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d117      	bne.n	8013b00 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8013ad0:	2301      	movs	r3, #1
 8013ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013ad4:	e014      	b.n	8013b00 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8013ad6:	4b46      	ldr	r3, [pc, #280]	; (8013bf0 <RCCEx_PLLSAI2_Config+0x150>)
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d110      	bne.n	8013b04 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8013ae2:	2301      	movs	r3, #1
 8013ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013ae6:	e00d      	b.n	8013b04 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8013ae8:	4b41      	ldr	r3, [pc, #260]	; (8013bf0 <RCCEx_PLLSAI2_Config+0x150>)
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d109      	bne.n	8013b08 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8013af4:	2301      	movs	r3, #1
 8013af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013af8:	e006      	b.n	8013b08 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8013afa:	2301      	movs	r3, #1
 8013afc:	73fb      	strb	r3, [r7, #15]
      break;
 8013afe:	e004      	b.n	8013b0a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8013b00:	bf00      	nop
 8013b02:	e002      	b.n	8013b0a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8013b04:	bf00      	nop
 8013b06:	e000      	b.n	8013b0a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8013b08:	bf00      	nop
  }

  if (status == HAL_OK)
 8013b0a:	7bfb      	ldrb	r3, [r7, #15]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d169      	bne.n	8013be4 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8013b10:	4b37      	ldr	r3, [pc, #220]	; (8013bf0 <RCCEx_PLLSAI2_Config+0x150>)
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	4a36      	ldr	r2, [pc, #216]	; (8013bf0 <RCCEx_PLLSAI2_Config+0x150>)
 8013b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013b1c:	f7fb fdee 	bl	800f6fc <HAL_GetTick>
 8013b20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8013b22:	e00f      	b.n	8013b44 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8013b24:	f7fb fdea 	bl	800f6fc <HAL_GetTick>
 8013b28:	4602      	mov	r2, r0
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	1ad3      	subs	r3, r2, r3
 8013b2e:	2b02      	cmp	r3, #2
 8013b30:	d908      	bls.n	8013b44 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8013b32:	4b2f      	ldr	r3, [pc, #188]	; (8013bf0 <RCCEx_PLLSAI2_Config+0x150>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d009      	beq.n	8013b52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8013b3e:	2303      	movs	r3, #3
 8013b40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8013b42:	e006      	b.n	8013b52 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8013b44:	4b2a      	ldr	r3, [pc, #168]	; (8013bf0 <RCCEx_PLLSAI2_Config+0x150>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d1e9      	bne.n	8013b24 <RCCEx_PLLSAI2_Config+0x84>
 8013b50:	e000      	b.n	8013b54 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8013b52:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8013b54:	7bfb      	ldrb	r3, [r7, #15]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d144      	bne.n	8013be4 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d115      	bne.n	8013b8c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8013b60:	4b23      	ldr	r3, [pc, #140]	; (8013bf0 <RCCEx_PLLSAI2_Config+0x150>)
 8013b62:	695a      	ldr	r2, [r3, #20]
 8013b64:	4b23      	ldr	r3, [pc, #140]	; (8013bf4 <RCCEx_PLLSAI2_Config+0x154>)
 8013b66:	4013      	ands	r3, r2
 8013b68:	687a      	ldr	r2, [r7, #4]
 8013b6a:	6892      	ldr	r2, [r2, #8]
 8013b6c:	0211      	lsls	r1, r2, #8
 8013b6e:	687a      	ldr	r2, [r7, #4]
 8013b70:	68d2      	ldr	r2, [r2, #12]
 8013b72:	06d2      	lsls	r2, r2, #27
 8013b74:	4311      	orrs	r1, r2
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	6852      	ldr	r2, [r2, #4]
 8013b7a:	3a01      	subs	r2, #1
 8013b7c:	0112      	lsls	r2, r2, #4
 8013b7e:	4311      	orrs	r1, r2
 8013b80:	687a      	ldr	r2, [r7, #4]
 8013b82:	6812      	ldr	r2, [r2, #0]
 8013b84:	430a      	orrs	r2, r1
 8013b86:	491a      	ldr	r1, [pc, #104]	; (8013bf0 <RCCEx_PLLSAI2_Config+0x150>)
 8013b88:	4313      	orrs	r3, r2
 8013b8a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8013b8c:	4b18      	ldr	r3, [pc, #96]	; (8013bf0 <RCCEx_PLLSAI2_Config+0x150>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	4a17      	ldr	r2, [pc, #92]	; (8013bf0 <RCCEx_PLLSAI2_Config+0x150>)
 8013b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013b96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013b98:	f7fb fdb0 	bl	800f6fc <HAL_GetTick>
 8013b9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8013b9e:	e00f      	b.n	8013bc0 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8013ba0:	f7fb fdac 	bl	800f6fc <HAL_GetTick>
 8013ba4:	4602      	mov	r2, r0
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	1ad3      	subs	r3, r2, r3
 8013baa:	2b02      	cmp	r3, #2
 8013bac:	d908      	bls.n	8013bc0 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8013bae:	4b10      	ldr	r3, [pc, #64]	; (8013bf0 <RCCEx_PLLSAI2_Config+0x150>)
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d109      	bne.n	8013bce <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8013bba:	2303      	movs	r3, #3
 8013bbc:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8013bbe:	e006      	b.n	8013bce <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8013bc0:	4b0b      	ldr	r3, [pc, #44]	; (8013bf0 <RCCEx_PLLSAI2_Config+0x150>)
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d0e9      	beq.n	8013ba0 <RCCEx_PLLSAI2_Config+0x100>
 8013bcc:	e000      	b.n	8013bd0 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8013bce:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8013bd0:	7bfb      	ldrb	r3, [r7, #15]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d106      	bne.n	8013be4 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8013bd6:	4b06      	ldr	r3, [pc, #24]	; (8013bf0 <RCCEx_PLLSAI2_Config+0x150>)
 8013bd8:	695a      	ldr	r2, [r3, #20]
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	691b      	ldr	r3, [r3, #16]
 8013bde:	4904      	ldr	r1, [pc, #16]	; (8013bf0 <RCCEx_PLLSAI2_Config+0x150>)
 8013be0:	4313      	orrs	r3, r2
 8013be2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8013be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013be6:	4618      	mov	r0, r3
 8013be8:	3710      	adds	r7, #16
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bd80      	pop	{r7, pc}
 8013bee:	bf00      	nop
 8013bf0:	40021000 	.word	0x40021000
 8013bf4:	07ff800c 	.word	0x07ff800c

08013bf8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b084      	sub	sp, #16
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013c00:	2301      	movs	r3, #1
 8013c02:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d066      	beq.n	8013cd8 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8013c10:	b2db      	uxtb	r3, r3
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d106      	bne.n	8013c24 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	2200      	movs	r2, #0
 8013c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	f7fb f822 	bl	800ec68 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2202      	movs	r2, #2
 8013c28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	68db      	ldr	r3, [r3, #12]
 8013c32:	f003 0310 	and.w	r3, r3, #16
 8013c36:	2b10      	cmp	r3, #16
 8013c38:	d045      	beq.n	8013cc6 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013c3a:	4b2a      	ldr	r3, [pc, #168]	; (8013ce4 <HAL_RTC_Init+0xec>)
 8013c3c:	22ca      	movs	r2, #202	; 0xca
 8013c3e:	625a      	str	r2, [r3, #36]	; 0x24
 8013c40:	4b28      	ldr	r3, [pc, #160]	; (8013ce4 <HAL_RTC_Init+0xec>)
 8013c42:	2253      	movs	r2, #83	; 0x53
 8013c44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8013c46:	6878      	ldr	r0, [r7, #4]
 8013c48:	f000 f872 	bl	8013d30 <RTC_EnterInitMode>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8013c50:	7bfb      	ldrb	r3, [r7, #15]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d121      	bne.n	8013c9a <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8013c56:	4b23      	ldr	r3, [pc, #140]	; (8013ce4 <HAL_RTC_Init+0xec>)
 8013c58:	699b      	ldr	r3, [r3, #24]
 8013c5a:	4a22      	ldr	r2, [pc, #136]	; (8013ce4 <HAL_RTC_Init+0xec>)
 8013c5c:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8013c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013c64:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8013c66:	4b1f      	ldr	r3, [pc, #124]	; (8013ce4 <HAL_RTC_Init+0xec>)
 8013c68:	699a      	ldr	r2, [r3, #24]
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	6859      	ldr	r1, [r3, #4]
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	691b      	ldr	r3, [r3, #16]
 8013c72:	4319      	orrs	r1, r3
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	699b      	ldr	r3, [r3, #24]
 8013c78:	430b      	orrs	r3, r1
 8013c7a:	491a      	ldr	r1, [pc, #104]	; (8013ce4 <HAL_RTC_Init+0xec>)
 8013c7c:	4313      	orrs	r3, r2
 8013c7e:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	68da      	ldr	r2, [r3, #12]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	689b      	ldr	r3, [r3, #8]
 8013c88:	041b      	lsls	r3, r3, #16
 8013c8a:	4916      	ldr	r1, [pc, #88]	; (8013ce4 <HAL_RTC_Init+0xec>)
 8013c8c:	4313      	orrs	r3, r2
 8013c8e:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	f000 f881 	bl	8013d98 <RTC_ExitInitMode>
 8013c96:	4603      	mov	r3, r0
 8013c98:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8013c9a:	7bfb      	ldrb	r3, [r7, #15]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d10e      	bne.n	8013cbe <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8013ca0:	4b10      	ldr	r3, [pc, #64]	; (8013ce4 <HAL_RTC_Init+0xec>)
 8013ca2:	699b      	ldr	r3, [r3, #24]
 8013ca4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	6a19      	ldr	r1, [r3, #32]
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	69db      	ldr	r3, [r3, #28]
 8013cb0:	4319      	orrs	r1, r3
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	695b      	ldr	r3, [r3, #20]
 8013cb6:	430b      	orrs	r3, r1
 8013cb8:	490a      	ldr	r1, [pc, #40]	; (8013ce4 <HAL_RTC_Init+0xec>)
 8013cba:	4313      	orrs	r3, r2
 8013cbc:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013cbe:	4b09      	ldr	r3, [pc, #36]	; (8013ce4 <HAL_RTC_Init+0xec>)
 8013cc0:	22ff      	movs	r2, #255	; 0xff
 8013cc2:	625a      	str	r2, [r3, #36]	; 0x24
 8013cc4:	e001      	b.n	8013cca <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8013cca:	7bfb      	ldrb	r3, [r7, #15]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d103      	bne.n	8013cd8 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8013cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	3710      	adds	r7, #16
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}
 8013ce2:	bf00      	nop
 8013ce4:	40002800 	.word	0x40002800

08013ce8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b084      	sub	sp, #16
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8013cf0:	4b0d      	ldr	r3, [pc, #52]	; (8013d28 <HAL_RTC_WaitForSynchro+0x40>)
 8013cf2:	4a0e      	ldr	r2, [pc, #56]	; (8013d2c <HAL_RTC_WaitForSynchro+0x44>)
 8013cf4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8013cf6:	f7fb fd01 	bl	800f6fc <HAL_GetTick>
 8013cfa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8013cfc:	e009      	b.n	8013d12 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8013cfe:	f7fb fcfd 	bl	800f6fc <HAL_GetTick>
 8013d02:	4602      	mov	r2, r0
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	1ad3      	subs	r3, r2, r3
 8013d08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013d0c:	d901      	bls.n	8013d12 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8013d0e:	2303      	movs	r3, #3
 8013d10:	e006      	b.n	8013d20 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8013d12:	4b05      	ldr	r3, [pc, #20]	; (8013d28 <HAL_RTC_WaitForSynchro+0x40>)
 8013d14:	68db      	ldr	r3, [r3, #12]
 8013d16:	f003 0320 	and.w	r3, r3, #32
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d0ef      	beq.n	8013cfe <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8013d1e:	2300      	movs	r3, #0
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	3710      	adds	r7, #16
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}
 8013d28:	40002800 	.word	0x40002800
 8013d2c:	0001005c 	.word	0x0001005c

08013d30 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b084      	sub	sp, #16
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013d38:	2300      	movs	r3, #0
 8013d3a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8013d3c:	4b15      	ldr	r3, [pc, #84]	; (8013d94 <RTC_EnterInitMode+0x64>)
 8013d3e:	68db      	ldr	r3, [r3, #12]
 8013d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d120      	bne.n	8013d8a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8013d48:	4b12      	ldr	r3, [pc, #72]	; (8013d94 <RTC_EnterInitMode+0x64>)
 8013d4a:	68db      	ldr	r3, [r3, #12]
 8013d4c:	4a11      	ldr	r2, [pc, #68]	; (8013d94 <RTC_EnterInitMode+0x64>)
 8013d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d52:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8013d54:	f7fb fcd2 	bl	800f6fc <HAL_GetTick>
 8013d58:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8013d5a:	e00d      	b.n	8013d78 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8013d5c:	f7fb fcce 	bl	800f6fc <HAL_GetTick>
 8013d60:	4602      	mov	r2, r0
 8013d62:	68bb      	ldr	r3, [r7, #8]
 8013d64:	1ad3      	subs	r3, r2, r3
 8013d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013d6a:	d905      	bls.n	8013d78 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8013d6c:	2303      	movs	r3, #3
 8013d6e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	2203      	movs	r2, #3
 8013d74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8013d78:	4b06      	ldr	r3, [pc, #24]	; (8013d94 <RTC_EnterInitMode+0x64>)
 8013d7a:	68db      	ldr	r3, [r3, #12]
 8013d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d102      	bne.n	8013d8a <RTC_EnterInitMode+0x5a>
 8013d84:	7bfb      	ldrb	r3, [r7, #15]
 8013d86:	2b03      	cmp	r3, #3
 8013d88:	d1e8      	bne.n	8013d5c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8013d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	3710      	adds	r7, #16
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}
 8013d94:	40002800 	.word	0x40002800

08013d98 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b084      	sub	sp, #16
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013da0:	2300      	movs	r3, #0
 8013da2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8013da4:	4b1a      	ldr	r3, [pc, #104]	; (8013e10 <RTC_ExitInitMode+0x78>)
 8013da6:	68db      	ldr	r3, [r3, #12]
 8013da8:	4a19      	ldr	r2, [pc, #100]	; (8013e10 <RTC_ExitInitMode+0x78>)
 8013daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013dae:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8013db0:	4b17      	ldr	r3, [pc, #92]	; (8013e10 <RTC_ExitInitMode+0x78>)
 8013db2:	699b      	ldr	r3, [r3, #24]
 8013db4:	f003 0320 	and.w	r3, r3, #32
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d10c      	bne.n	8013dd6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f7ff ff93 	bl	8013ce8 <HAL_RTC_WaitForSynchro>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d01e      	beq.n	8013e06 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2203      	movs	r2, #3
 8013dcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8013dd0:	2303      	movs	r3, #3
 8013dd2:	73fb      	strb	r3, [r7, #15]
 8013dd4:	e017      	b.n	8013e06 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8013dd6:	4b0e      	ldr	r3, [pc, #56]	; (8013e10 <RTC_ExitInitMode+0x78>)
 8013dd8:	699b      	ldr	r3, [r3, #24]
 8013dda:	4a0d      	ldr	r2, [pc, #52]	; (8013e10 <RTC_ExitInitMode+0x78>)
 8013ddc:	f023 0320 	bic.w	r3, r3, #32
 8013de0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013de2:	6878      	ldr	r0, [r7, #4]
 8013de4:	f7ff ff80 	bl	8013ce8 <HAL_RTC_WaitForSynchro>
 8013de8:	4603      	mov	r3, r0
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d005      	beq.n	8013dfa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	2203      	movs	r2, #3
 8013df2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8013df6:	2303      	movs	r3, #3
 8013df8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8013dfa:	4b05      	ldr	r3, [pc, #20]	; (8013e10 <RTC_ExitInitMode+0x78>)
 8013dfc:	699b      	ldr	r3, [r3, #24]
 8013dfe:	4a04      	ldr	r2, [pc, #16]	; (8013e10 <RTC_ExitInitMode+0x78>)
 8013e00:	f043 0320 	orr.w	r3, r3, #32
 8013e04:	6193      	str	r3, [r2, #24]
  }

  return status;
 8013e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3710      	adds	r7, #16
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}
 8013e10:	40002800 	.word	0x40002800

08013e14 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8013e14:	b480      	push	{r7}
 8013e16:	b083      	sub	sp, #12
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
 8013e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8013e1e:	683b      	ldr	r3, [r7, #0]
 8013e20:	681a      	ldr	r2, [r3, #0]
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	685b      	ldr	r3, [r3, #4]
 8013e26:	490f      	ldr	r1, [pc, #60]	; (8013e64 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8013e28:	4313      	orrs	r3, r2
 8013e2a:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	689a      	ldr	r2, [r3, #8]
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	68db      	ldr	r3, [r3, #12]
 8013e34:	490c      	ldr	r1, [pc, #48]	; (8013e68 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8013e36:	4313      	orrs	r3, r2
 8013e38:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8013e3a:	4b0b      	ldr	r3, [pc, #44]	; (8013e68 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8013e3c:	6a1b      	ldr	r3, [r3, #32]
 8013e3e:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	6919      	ldr	r1, [r3, #16]
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	695b      	ldr	r3, [r3, #20]
 8013e4a:	041b      	lsls	r3, r3, #16
 8013e4c:	430b      	orrs	r3, r1
 8013e4e:	4906      	ldr	r1, [pc, #24]	; (8013e68 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8013e50:	4313      	orrs	r3, r2
 8013e52:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8013e54:	2300      	movs	r3, #0
}
 8013e56:	4618      	mov	r0, r3
 8013e58:	370c      	adds	r7, #12
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e60:	4770      	bx	lr
 8013e62:	bf00      	nop
 8013e64:	40002800 	.word	0x40002800
 8013e68:	40003400 	.word	0x40003400

08013e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b084      	sub	sp, #16
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d101      	bne.n	8013e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	e095      	b.n	8013faa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d108      	bne.n	8013e98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	685b      	ldr	r3, [r3, #4]
 8013e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013e8e:	d009      	beq.n	8013ea4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2200      	movs	r2, #0
 8013e94:	61da      	str	r2, [r3, #28]
 8013e96:	e005      	b.n	8013ea4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013eb0:	b2db      	uxtb	r3, r3
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d106      	bne.n	8013ec4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	2200      	movs	r2, #0
 8013eba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f7fa ff10 	bl	800ece4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2202      	movs	r2, #2
 8013ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	681a      	ldr	r2, [r3, #0]
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013eda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	68db      	ldr	r3, [r3, #12]
 8013ee0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013ee4:	d902      	bls.n	8013eec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	60fb      	str	r3, [r7, #12]
 8013eea:	e002      	b.n	8013ef2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8013eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013ef0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	68db      	ldr	r3, [r3, #12]
 8013ef6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8013efa:	d007      	beq.n	8013f0c <HAL_SPI_Init+0xa0>
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	68db      	ldr	r3, [r3, #12]
 8013f00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013f04:	d002      	beq.n	8013f0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2200      	movs	r2, #0
 8013f0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	685b      	ldr	r3, [r3, #4]
 8013f10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	689b      	ldr	r3, [r3, #8]
 8013f18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8013f1c:	431a      	orrs	r2, r3
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	691b      	ldr	r3, [r3, #16]
 8013f22:	f003 0302 	and.w	r3, r3, #2
 8013f26:	431a      	orrs	r2, r3
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	695b      	ldr	r3, [r3, #20]
 8013f2c:	f003 0301 	and.w	r3, r3, #1
 8013f30:	431a      	orrs	r2, r3
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	699b      	ldr	r3, [r3, #24]
 8013f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013f3a:	431a      	orrs	r2, r3
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	69db      	ldr	r3, [r3, #28]
 8013f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013f44:	431a      	orrs	r2, r3
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	6a1b      	ldr	r3, [r3, #32]
 8013f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f4e:	ea42 0103 	orr.w	r1, r2, r3
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	430a      	orrs	r2, r1
 8013f60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	699b      	ldr	r3, [r3, #24]
 8013f66:	0c1b      	lsrs	r3, r3, #16
 8013f68:	f003 0204 	and.w	r2, r3, #4
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f70:	f003 0310 	and.w	r3, r3, #16
 8013f74:	431a      	orrs	r2, r3
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f7a:	f003 0308 	and.w	r3, r3, #8
 8013f7e:	431a      	orrs	r2, r3
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	68db      	ldr	r3, [r3, #12]
 8013f84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8013f88:	ea42 0103 	orr.w	r1, r2, r3
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	430a      	orrs	r2, r1
 8013f98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	2201      	movs	r2, #1
 8013fa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8013fa8:	2300      	movs	r3, #0
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	3710      	adds	r7, #16
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}

08013fb2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013fb2:	b580      	push	{r7, lr}
 8013fb4:	b082      	sub	sp, #8
 8013fb6:	af00      	add	r7, sp, #0
 8013fb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d101      	bne.n	8013fc4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	e049      	b.n	8014058 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013fca:	b2db      	uxtb	r3, r3
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d106      	bne.n	8013fde <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	f7fa ff69 	bl	800eeb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	2202      	movs	r2, #2
 8013fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	681a      	ldr	r2, [r3, #0]
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	3304      	adds	r3, #4
 8013fee:	4619      	mov	r1, r3
 8013ff0:	4610      	mov	r0, r2
 8013ff2:	f000 fed5 	bl	8014da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	2201      	movs	r2, #1
 8013ffa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	2201      	movs	r2, #1
 8014002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	2201      	movs	r2, #1
 801400a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2201      	movs	r2, #1
 8014012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	2201      	movs	r2, #1
 801401a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	2201      	movs	r2, #1
 8014022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	2201      	movs	r2, #1
 801402a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2201      	movs	r2, #1
 8014032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	2201      	movs	r2, #1
 801403a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	2201      	movs	r2, #1
 8014042:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	2201      	movs	r2, #1
 801404a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2201      	movs	r2, #1
 8014052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014056:	2300      	movs	r3, #0
}
 8014058:	4618      	mov	r0, r3
 801405a:	3708      	adds	r7, #8
 801405c:	46bd      	mov	sp, r7
 801405e:	bd80      	pop	{r7, pc}

08014060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014060:	b480      	push	{r7}
 8014062:	b085      	sub	sp, #20
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801406e:	b2db      	uxtb	r3, r3
 8014070:	2b01      	cmp	r3, #1
 8014072:	d001      	beq.n	8014078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8014074:	2301      	movs	r3, #1
 8014076:	e04f      	b.n	8014118 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	2202      	movs	r2, #2
 801407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	68da      	ldr	r2, [r3, #12]
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	f042 0201 	orr.w	r2, r2, #1
 801408e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	4a23      	ldr	r2, [pc, #140]	; (8014124 <HAL_TIM_Base_Start_IT+0xc4>)
 8014096:	4293      	cmp	r3, r2
 8014098:	d01d      	beq.n	80140d6 <HAL_TIM_Base_Start_IT+0x76>
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80140a2:	d018      	beq.n	80140d6 <HAL_TIM_Base_Start_IT+0x76>
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	4a1f      	ldr	r2, [pc, #124]	; (8014128 <HAL_TIM_Base_Start_IT+0xc8>)
 80140aa:	4293      	cmp	r3, r2
 80140ac:	d013      	beq.n	80140d6 <HAL_TIM_Base_Start_IT+0x76>
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	4a1e      	ldr	r2, [pc, #120]	; (801412c <HAL_TIM_Base_Start_IT+0xcc>)
 80140b4:	4293      	cmp	r3, r2
 80140b6:	d00e      	beq.n	80140d6 <HAL_TIM_Base_Start_IT+0x76>
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	4a1c      	ldr	r2, [pc, #112]	; (8014130 <HAL_TIM_Base_Start_IT+0xd0>)
 80140be:	4293      	cmp	r3, r2
 80140c0:	d009      	beq.n	80140d6 <HAL_TIM_Base_Start_IT+0x76>
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	4a1b      	ldr	r2, [pc, #108]	; (8014134 <HAL_TIM_Base_Start_IT+0xd4>)
 80140c8:	4293      	cmp	r3, r2
 80140ca:	d004      	beq.n	80140d6 <HAL_TIM_Base_Start_IT+0x76>
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	4a19      	ldr	r2, [pc, #100]	; (8014138 <HAL_TIM_Base_Start_IT+0xd8>)
 80140d2:	4293      	cmp	r3, r2
 80140d4:	d115      	bne.n	8014102 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	689a      	ldr	r2, [r3, #8]
 80140dc:	4b17      	ldr	r3, [pc, #92]	; (801413c <HAL_TIM_Base_Start_IT+0xdc>)
 80140de:	4013      	ands	r3, r2
 80140e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	2b06      	cmp	r3, #6
 80140e6:	d015      	beq.n	8014114 <HAL_TIM_Base_Start_IT+0xb4>
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80140ee:	d011      	beq.n	8014114 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	681a      	ldr	r2, [r3, #0]
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	f042 0201 	orr.w	r2, r2, #1
 80140fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014100:	e008      	b.n	8014114 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	681a      	ldr	r2, [r3, #0]
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	f042 0201 	orr.w	r2, r2, #1
 8014110:	601a      	str	r2, [r3, #0]
 8014112:	e000      	b.n	8014116 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014114:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8014116:	2300      	movs	r3, #0
}
 8014118:	4618      	mov	r0, r3
 801411a:	3714      	adds	r7, #20
 801411c:	46bd      	mov	sp, r7
 801411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014122:	4770      	bx	lr
 8014124:	40012c00 	.word	0x40012c00
 8014128:	40000400 	.word	0x40000400
 801412c:	40000800 	.word	0x40000800
 8014130:	40000c00 	.word	0x40000c00
 8014134:	40013400 	.word	0x40013400
 8014138:	40014000 	.word	0x40014000
 801413c:	00010007 	.word	0x00010007

08014140 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b082      	sub	sp, #8
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d101      	bne.n	8014152 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801414e:	2301      	movs	r3, #1
 8014150:	e049      	b.n	80141e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014158:	b2db      	uxtb	r3, r3
 801415a:	2b00      	cmp	r3, #0
 801415c:	d106      	bne.n	801416c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	2200      	movs	r2, #0
 8014162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8014166:	6878      	ldr	r0, [r7, #4]
 8014168:	f000 f841 	bl	80141ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2202      	movs	r2, #2
 8014170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	681a      	ldr	r2, [r3, #0]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	3304      	adds	r3, #4
 801417c:	4619      	mov	r1, r3
 801417e:	4610      	mov	r0, r2
 8014180:	f000 fe0e 	bl	8014da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	2201      	movs	r2, #1
 8014188:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	2201      	movs	r2, #1
 8014190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	2201      	movs	r2, #1
 8014198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	2201      	movs	r2, #1
 80141a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2201      	movs	r2, #1
 80141a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	2201      	movs	r2, #1
 80141b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	2201      	movs	r2, #1
 80141b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	2201      	movs	r2, #1
 80141c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2201      	movs	r2, #1
 80141c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2201      	movs	r2, #1
 80141d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2201      	movs	r2, #1
 80141d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	2201      	movs	r2, #1
 80141e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80141e4:	2300      	movs	r3, #0
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	3708      	adds	r7, #8
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}

080141ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80141ee:	b480      	push	{r7}
 80141f0:	b083      	sub	sp, #12
 80141f2:	af00      	add	r7, sp, #0
 80141f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80141f6:	bf00      	nop
 80141f8:	370c      	adds	r7, #12
 80141fa:	46bd      	mov	sp, r7
 80141fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014200:	4770      	bx	lr
	...

08014204 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b084      	sub	sp, #16
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
 801420c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801420e:	683b      	ldr	r3, [r7, #0]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d109      	bne.n	8014228 <HAL_TIM_PWM_Start+0x24>
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801421a:	b2db      	uxtb	r3, r3
 801421c:	2b01      	cmp	r3, #1
 801421e:	bf14      	ite	ne
 8014220:	2301      	movne	r3, #1
 8014222:	2300      	moveq	r3, #0
 8014224:	b2db      	uxtb	r3, r3
 8014226:	e03c      	b.n	80142a2 <HAL_TIM_PWM_Start+0x9e>
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	2b04      	cmp	r3, #4
 801422c:	d109      	bne.n	8014242 <HAL_TIM_PWM_Start+0x3e>
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014234:	b2db      	uxtb	r3, r3
 8014236:	2b01      	cmp	r3, #1
 8014238:	bf14      	ite	ne
 801423a:	2301      	movne	r3, #1
 801423c:	2300      	moveq	r3, #0
 801423e:	b2db      	uxtb	r3, r3
 8014240:	e02f      	b.n	80142a2 <HAL_TIM_PWM_Start+0x9e>
 8014242:	683b      	ldr	r3, [r7, #0]
 8014244:	2b08      	cmp	r3, #8
 8014246:	d109      	bne.n	801425c <HAL_TIM_PWM_Start+0x58>
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801424e:	b2db      	uxtb	r3, r3
 8014250:	2b01      	cmp	r3, #1
 8014252:	bf14      	ite	ne
 8014254:	2301      	movne	r3, #1
 8014256:	2300      	moveq	r3, #0
 8014258:	b2db      	uxtb	r3, r3
 801425a:	e022      	b.n	80142a2 <HAL_TIM_PWM_Start+0x9e>
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	2b0c      	cmp	r3, #12
 8014260:	d109      	bne.n	8014276 <HAL_TIM_PWM_Start+0x72>
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014268:	b2db      	uxtb	r3, r3
 801426a:	2b01      	cmp	r3, #1
 801426c:	bf14      	ite	ne
 801426e:	2301      	movne	r3, #1
 8014270:	2300      	moveq	r3, #0
 8014272:	b2db      	uxtb	r3, r3
 8014274:	e015      	b.n	80142a2 <HAL_TIM_PWM_Start+0x9e>
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	2b10      	cmp	r3, #16
 801427a:	d109      	bne.n	8014290 <HAL_TIM_PWM_Start+0x8c>
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014282:	b2db      	uxtb	r3, r3
 8014284:	2b01      	cmp	r3, #1
 8014286:	bf14      	ite	ne
 8014288:	2301      	movne	r3, #1
 801428a:	2300      	moveq	r3, #0
 801428c:	b2db      	uxtb	r3, r3
 801428e:	e008      	b.n	80142a2 <HAL_TIM_PWM_Start+0x9e>
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014296:	b2db      	uxtb	r3, r3
 8014298:	2b01      	cmp	r3, #1
 801429a:	bf14      	ite	ne
 801429c:	2301      	movne	r3, #1
 801429e:	2300      	moveq	r3, #0
 80142a0:	b2db      	uxtb	r3, r3
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d001      	beq.n	80142aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80142a6:	2301      	movs	r3, #1
 80142a8:	e09c      	b.n	80143e4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80142aa:	683b      	ldr	r3, [r7, #0]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d104      	bne.n	80142ba <HAL_TIM_PWM_Start+0xb6>
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2202      	movs	r2, #2
 80142b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80142b8:	e023      	b.n	8014302 <HAL_TIM_PWM_Start+0xfe>
 80142ba:	683b      	ldr	r3, [r7, #0]
 80142bc:	2b04      	cmp	r3, #4
 80142be:	d104      	bne.n	80142ca <HAL_TIM_PWM_Start+0xc6>
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	2202      	movs	r2, #2
 80142c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80142c8:	e01b      	b.n	8014302 <HAL_TIM_PWM_Start+0xfe>
 80142ca:	683b      	ldr	r3, [r7, #0]
 80142cc:	2b08      	cmp	r3, #8
 80142ce:	d104      	bne.n	80142da <HAL_TIM_PWM_Start+0xd6>
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2202      	movs	r2, #2
 80142d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80142d8:	e013      	b.n	8014302 <HAL_TIM_PWM_Start+0xfe>
 80142da:	683b      	ldr	r3, [r7, #0]
 80142dc:	2b0c      	cmp	r3, #12
 80142de:	d104      	bne.n	80142ea <HAL_TIM_PWM_Start+0xe6>
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2202      	movs	r2, #2
 80142e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80142e8:	e00b      	b.n	8014302 <HAL_TIM_PWM_Start+0xfe>
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	2b10      	cmp	r3, #16
 80142ee:	d104      	bne.n	80142fa <HAL_TIM_PWM_Start+0xf6>
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2202      	movs	r2, #2
 80142f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80142f8:	e003      	b.n	8014302 <HAL_TIM_PWM_Start+0xfe>
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	2202      	movs	r2, #2
 80142fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	2201      	movs	r2, #1
 8014308:	6839      	ldr	r1, [r7, #0]
 801430a:	4618      	mov	r0, r3
 801430c:	f001 fa78 	bl	8015800 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	4a35      	ldr	r2, [pc, #212]	; (80143ec <HAL_TIM_PWM_Start+0x1e8>)
 8014316:	4293      	cmp	r3, r2
 8014318:	d013      	beq.n	8014342 <HAL_TIM_PWM_Start+0x13e>
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	4a34      	ldr	r2, [pc, #208]	; (80143f0 <HAL_TIM_PWM_Start+0x1ec>)
 8014320:	4293      	cmp	r3, r2
 8014322:	d00e      	beq.n	8014342 <HAL_TIM_PWM_Start+0x13e>
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	4a32      	ldr	r2, [pc, #200]	; (80143f4 <HAL_TIM_PWM_Start+0x1f0>)
 801432a:	4293      	cmp	r3, r2
 801432c:	d009      	beq.n	8014342 <HAL_TIM_PWM_Start+0x13e>
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	4a31      	ldr	r2, [pc, #196]	; (80143f8 <HAL_TIM_PWM_Start+0x1f4>)
 8014334:	4293      	cmp	r3, r2
 8014336:	d004      	beq.n	8014342 <HAL_TIM_PWM_Start+0x13e>
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	4a2f      	ldr	r2, [pc, #188]	; (80143fc <HAL_TIM_PWM_Start+0x1f8>)
 801433e:	4293      	cmp	r3, r2
 8014340:	d101      	bne.n	8014346 <HAL_TIM_PWM_Start+0x142>
 8014342:	2301      	movs	r3, #1
 8014344:	e000      	b.n	8014348 <HAL_TIM_PWM_Start+0x144>
 8014346:	2300      	movs	r3, #0
 8014348:	2b00      	cmp	r3, #0
 801434a:	d007      	beq.n	801435c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801435a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	4a22      	ldr	r2, [pc, #136]	; (80143ec <HAL_TIM_PWM_Start+0x1e8>)
 8014362:	4293      	cmp	r3, r2
 8014364:	d01d      	beq.n	80143a2 <HAL_TIM_PWM_Start+0x19e>
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801436e:	d018      	beq.n	80143a2 <HAL_TIM_PWM_Start+0x19e>
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	4a22      	ldr	r2, [pc, #136]	; (8014400 <HAL_TIM_PWM_Start+0x1fc>)
 8014376:	4293      	cmp	r3, r2
 8014378:	d013      	beq.n	80143a2 <HAL_TIM_PWM_Start+0x19e>
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	4a21      	ldr	r2, [pc, #132]	; (8014404 <HAL_TIM_PWM_Start+0x200>)
 8014380:	4293      	cmp	r3, r2
 8014382:	d00e      	beq.n	80143a2 <HAL_TIM_PWM_Start+0x19e>
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	4a1f      	ldr	r2, [pc, #124]	; (8014408 <HAL_TIM_PWM_Start+0x204>)
 801438a:	4293      	cmp	r3, r2
 801438c:	d009      	beq.n	80143a2 <HAL_TIM_PWM_Start+0x19e>
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	4a17      	ldr	r2, [pc, #92]	; (80143f0 <HAL_TIM_PWM_Start+0x1ec>)
 8014394:	4293      	cmp	r3, r2
 8014396:	d004      	beq.n	80143a2 <HAL_TIM_PWM_Start+0x19e>
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	4a15      	ldr	r2, [pc, #84]	; (80143f4 <HAL_TIM_PWM_Start+0x1f0>)
 801439e:	4293      	cmp	r3, r2
 80143a0:	d115      	bne.n	80143ce <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	689a      	ldr	r2, [r3, #8]
 80143a8:	4b18      	ldr	r3, [pc, #96]	; (801440c <HAL_TIM_PWM_Start+0x208>)
 80143aa:	4013      	ands	r3, r2
 80143ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	2b06      	cmp	r3, #6
 80143b2:	d015      	beq.n	80143e0 <HAL_TIM_PWM_Start+0x1dc>
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80143ba:	d011      	beq.n	80143e0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	681a      	ldr	r2, [r3, #0]
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	f042 0201 	orr.w	r2, r2, #1
 80143ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80143cc:	e008      	b.n	80143e0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	681a      	ldr	r2, [r3, #0]
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	f042 0201 	orr.w	r2, r2, #1
 80143dc:	601a      	str	r2, [r3, #0]
 80143de:	e000      	b.n	80143e2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80143e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80143e2:	2300      	movs	r3, #0
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3710      	adds	r7, #16
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}
 80143ec:	40012c00 	.word	0x40012c00
 80143f0:	40013400 	.word	0x40013400
 80143f4:	40014000 	.word	0x40014000
 80143f8:	40014400 	.word	0x40014400
 80143fc:	40014800 	.word	0x40014800
 8014400:	40000400 	.word	0x40000400
 8014404:	40000800 	.word	0x40000800
 8014408:	40000c00 	.word	0x40000c00
 801440c:	00010007 	.word	0x00010007

08014410 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b082      	sub	sp, #8
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d101      	bne.n	8014422 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801441e:	2301      	movs	r3, #1
 8014420:	e049      	b.n	80144b6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014428:	b2db      	uxtb	r3, r3
 801442a:	2b00      	cmp	r3, #0
 801442c:	d106      	bne.n	801443c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	2200      	movs	r2, #0
 8014432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8014436:	6878      	ldr	r0, [r7, #4]
 8014438:	f000 f841 	bl	80144be <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	2202      	movs	r2, #2
 8014440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	681a      	ldr	r2, [r3, #0]
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	3304      	adds	r3, #4
 801444c:	4619      	mov	r1, r3
 801444e:	4610      	mov	r0, r2
 8014450:	f000 fca6 	bl	8014da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2201      	movs	r2, #1
 8014458:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2201      	movs	r2, #1
 8014460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	2201      	movs	r2, #1
 8014468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2201      	movs	r2, #1
 8014470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2201      	movs	r2, #1
 8014478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	2201      	movs	r2, #1
 8014480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	2201      	movs	r2, #1
 8014488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2201      	movs	r2, #1
 8014490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2201      	movs	r2, #1
 8014498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	2201      	movs	r2, #1
 80144a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	2201      	movs	r2, #1
 80144a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	2201      	movs	r2, #1
 80144b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80144b4:	2300      	movs	r3, #0
}
 80144b6:	4618      	mov	r0, r3
 80144b8:	3708      	adds	r7, #8
 80144ba:	46bd      	mov	sp, r7
 80144bc:	bd80      	pop	{r7, pc}

080144be <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80144be:	b480      	push	{r7}
 80144c0:	b083      	sub	sp, #12
 80144c2:	af00      	add	r7, sp, #0
 80144c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80144c6:	bf00      	nop
 80144c8:	370c      	adds	r7, #12
 80144ca:	46bd      	mov	sp, r7
 80144cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d0:	4770      	bx	lr

080144d2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80144d2:	b580      	push	{r7, lr}
 80144d4:	b086      	sub	sp, #24
 80144d6:	af00      	add	r7, sp, #0
 80144d8:	6078      	str	r0, [r7, #4]
 80144da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d101      	bne.n	80144e6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80144e2:	2301      	movs	r3, #1
 80144e4:	e097      	b.n	8014616 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80144ec:	b2db      	uxtb	r3, r3
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d106      	bne.n	8014500 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	2200      	movs	r2, #0
 80144f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f7fa fd6c 	bl	800efd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2202      	movs	r2, #2
 8014504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	689b      	ldr	r3, [r3, #8]
 801450e:	687a      	ldr	r2, [r7, #4]
 8014510:	6812      	ldr	r2, [r2, #0]
 8014512:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8014516:	f023 0307 	bic.w	r3, r3, #7
 801451a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	681a      	ldr	r2, [r3, #0]
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	3304      	adds	r3, #4
 8014524:	4619      	mov	r1, r3
 8014526:	4610      	mov	r0, r2
 8014528:	f000 fc3a 	bl	8014da0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	689b      	ldr	r3, [r3, #8]
 8014532:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	699b      	ldr	r3, [r3, #24]
 801453a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	6a1b      	ldr	r3, [r3, #32]
 8014542:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	697a      	ldr	r2, [r7, #20]
 801454a:	4313      	orrs	r3, r2
 801454c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801454e:	693b      	ldr	r3, [r7, #16]
 8014550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014554:	f023 0303 	bic.w	r3, r3, #3
 8014558:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801455a:	683b      	ldr	r3, [r7, #0]
 801455c:	689a      	ldr	r2, [r3, #8]
 801455e:	683b      	ldr	r3, [r7, #0]
 8014560:	699b      	ldr	r3, [r3, #24]
 8014562:	021b      	lsls	r3, r3, #8
 8014564:	4313      	orrs	r3, r2
 8014566:	693a      	ldr	r2, [r7, #16]
 8014568:	4313      	orrs	r3, r2
 801456a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801456c:	693b      	ldr	r3, [r7, #16]
 801456e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8014572:	f023 030c 	bic.w	r3, r3, #12
 8014576:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8014578:	693b      	ldr	r3, [r7, #16]
 801457a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801457e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	68da      	ldr	r2, [r3, #12]
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	69db      	ldr	r3, [r3, #28]
 801458c:	021b      	lsls	r3, r3, #8
 801458e:	4313      	orrs	r3, r2
 8014590:	693a      	ldr	r2, [r7, #16]
 8014592:	4313      	orrs	r3, r2
 8014594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8014596:	683b      	ldr	r3, [r7, #0]
 8014598:	691b      	ldr	r3, [r3, #16]
 801459a:	011a      	lsls	r2, r3, #4
 801459c:	683b      	ldr	r3, [r7, #0]
 801459e:	6a1b      	ldr	r3, [r3, #32]
 80145a0:	031b      	lsls	r3, r3, #12
 80145a2:	4313      	orrs	r3, r2
 80145a4:	693a      	ldr	r2, [r7, #16]
 80145a6:	4313      	orrs	r3, r2
 80145a8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80145b0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80145b8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80145ba:	683b      	ldr	r3, [r7, #0]
 80145bc:	685a      	ldr	r2, [r3, #4]
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	695b      	ldr	r3, [r3, #20]
 80145c2:	011b      	lsls	r3, r3, #4
 80145c4:	4313      	orrs	r3, r2
 80145c6:	68fa      	ldr	r2, [r7, #12]
 80145c8:	4313      	orrs	r3, r2
 80145ca:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	697a      	ldr	r2, [r7, #20]
 80145d2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	693a      	ldr	r2, [r7, #16]
 80145da:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	68fa      	ldr	r2, [r7, #12]
 80145e2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2201      	movs	r2, #1
 80145e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	2201      	movs	r2, #1
 80145f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	2201      	movs	r2, #1
 80145f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	2201      	movs	r2, #1
 8014600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	2201      	movs	r2, #1
 8014608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2201      	movs	r2, #1
 8014610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014614:	2300      	movs	r3, #0
}
 8014616:	4618      	mov	r0, r3
 8014618:	3718      	adds	r7, #24
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}

0801461e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801461e:	b580      	push	{r7, lr}
 8014620:	b082      	sub	sp, #8
 8014622:	af00      	add	r7, sp, #0
 8014624:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	691b      	ldr	r3, [r3, #16]
 801462c:	f003 0302 	and.w	r3, r3, #2
 8014630:	2b02      	cmp	r3, #2
 8014632:	d122      	bne.n	801467a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	68db      	ldr	r3, [r3, #12]
 801463a:	f003 0302 	and.w	r3, r3, #2
 801463e:	2b02      	cmp	r3, #2
 8014640:	d11b      	bne.n	801467a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	f06f 0202 	mvn.w	r2, #2
 801464a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	2201      	movs	r2, #1
 8014650:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	699b      	ldr	r3, [r3, #24]
 8014658:	f003 0303 	and.w	r3, r3, #3
 801465c:	2b00      	cmp	r3, #0
 801465e:	d003      	beq.n	8014668 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014660:	6878      	ldr	r0, [r7, #4]
 8014662:	f000 fb7e 	bl	8014d62 <HAL_TIM_IC_CaptureCallback>
 8014666:	e005      	b.n	8014674 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014668:	6878      	ldr	r0, [r7, #4]
 801466a:	f000 fb70 	bl	8014d4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801466e:	6878      	ldr	r0, [r7, #4]
 8014670:	f000 fb81 	bl	8014d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	2200      	movs	r2, #0
 8014678:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	691b      	ldr	r3, [r3, #16]
 8014680:	f003 0304 	and.w	r3, r3, #4
 8014684:	2b04      	cmp	r3, #4
 8014686:	d122      	bne.n	80146ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	68db      	ldr	r3, [r3, #12]
 801468e:	f003 0304 	and.w	r3, r3, #4
 8014692:	2b04      	cmp	r3, #4
 8014694:	d11b      	bne.n	80146ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	f06f 0204 	mvn.w	r2, #4
 801469e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2202      	movs	r2, #2
 80146a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	699b      	ldr	r3, [r3, #24]
 80146ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d003      	beq.n	80146bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80146b4:	6878      	ldr	r0, [r7, #4]
 80146b6:	f000 fb54 	bl	8014d62 <HAL_TIM_IC_CaptureCallback>
 80146ba:	e005      	b.n	80146c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	f000 fb46 	bl	8014d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f000 fb57 	bl	8014d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2200      	movs	r2, #0
 80146cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	691b      	ldr	r3, [r3, #16]
 80146d4:	f003 0308 	and.w	r3, r3, #8
 80146d8:	2b08      	cmp	r3, #8
 80146da:	d122      	bne.n	8014722 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	68db      	ldr	r3, [r3, #12]
 80146e2:	f003 0308 	and.w	r3, r3, #8
 80146e6:	2b08      	cmp	r3, #8
 80146e8:	d11b      	bne.n	8014722 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	f06f 0208 	mvn.w	r2, #8
 80146f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	2204      	movs	r2, #4
 80146f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	69db      	ldr	r3, [r3, #28]
 8014700:	f003 0303 	and.w	r3, r3, #3
 8014704:	2b00      	cmp	r3, #0
 8014706:	d003      	beq.n	8014710 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f000 fb2a 	bl	8014d62 <HAL_TIM_IC_CaptureCallback>
 801470e:	e005      	b.n	801471c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f000 fb1c 	bl	8014d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014716:	6878      	ldr	r0, [r7, #4]
 8014718:	f000 fb2d 	bl	8014d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2200      	movs	r2, #0
 8014720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	691b      	ldr	r3, [r3, #16]
 8014728:	f003 0310 	and.w	r3, r3, #16
 801472c:	2b10      	cmp	r3, #16
 801472e:	d122      	bne.n	8014776 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	68db      	ldr	r3, [r3, #12]
 8014736:	f003 0310 	and.w	r3, r3, #16
 801473a:	2b10      	cmp	r3, #16
 801473c:	d11b      	bne.n	8014776 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	f06f 0210 	mvn.w	r2, #16
 8014746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2208      	movs	r2, #8
 801474c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	69db      	ldr	r3, [r3, #28]
 8014754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014758:	2b00      	cmp	r3, #0
 801475a:	d003      	beq.n	8014764 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f000 fb00 	bl	8014d62 <HAL_TIM_IC_CaptureCallback>
 8014762:	e005      	b.n	8014770 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014764:	6878      	ldr	r0, [r7, #4]
 8014766:	f000 faf2 	bl	8014d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801476a:	6878      	ldr	r0, [r7, #4]
 801476c:	f000 fb03 	bl	8014d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	2200      	movs	r2, #0
 8014774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	691b      	ldr	r3, [r3, #16]
 801477c:	f003 0301 	and.w	r3, r3, #1
 8014780:	2b01      	cmp	r3, #1
 8014782:	d10e      	bne.n	80147a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	68db      	ldr	r3, [r3, #12]
 801478a:	f003 0301 	and.w	r3, r3, #1
 801478e:	2b01      	cmp	r3, #1
 8014790:	d107      	bne.n	80147a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	f06f 0201 	mvn.w	r2, #1
 801479a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801479c:	6878      	ldr	r0, [r7, #4]
 801479e:	f7fa f822 	bl	800e7e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	691b      	ldr	r3, [r3, #16]
 80147a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80147ac:	2b80      	cmp	r3, #128	; 0x80
 80147ae:	d10e      	bne.n	80147ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	68db      	ldr	r3, [r3, #12]
 80147b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80147ba:	2b80      	cmp	r3, #128	; 0x80
 80147bc:	d107      	bne.n	80147ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80147c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f001 f971 	bl	8015ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	691b      	ldr	r3, [r3, #16]
 80147d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80147d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80147dc:	d10e      	bne.n	80147fc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	68db      	ldr	r3, [r3, #12]
 80147e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80147e8:	2b80      	cmp	r3, #128	; 0x80
 80147ea:	d107      	bne.n	80147fc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80147f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80147f6:	6878      	ldr	r0, [r7, #4]
 80147f8:	f001 f964 	bl	8015ac4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	691b      	ldr	r3, [r3, #16]
 8014802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014806:	2b40      	cmp	r3, #64	; 0x40
 8014808:	d10e      	bne.n	8014828 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	68db      	ldr	r3, [r3, #12]
 8014810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014814:	2b40      	cmp	r3, #64	; 0x40
 8014816:	d107      	bne.n	8014828 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014822:	6878      	ldr	r0, [r7, #4]
 8014824:	f000 fab1 	bl	8014d8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	691b      	ldr	r3, [r3, #16]
 801482e:	f003 0320 	and.w	r3, r3, #32
 8014832:	2b20      	cmp	r3, #32
 8014834:	d10e      	bne.n	8014854 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	68db      	ldr	r3, [r3, #12]
 801483c:	f003 0320 	and.w	r3, r3, #32
 8014840:	2b20      	cmp	r3, #32
 8014842:	d107      	bne.n	8014854 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	f06f 0220 	mvn.w	r2, #32
 801484c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801484e:	6878      	ldr	r0, [r7, #4]
 8014850:	f001 f924 	bl	8015a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014854:	bf00      	nop
 8014856:	3708      	adds	r7, #8
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}

0801485c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b086      	sub	sp, #24
 8014860:	af00      	add	r7, sp, #0
 8014862:	60f8      	str	r0, [r7, #12]
 8014864:	60b9      	str	r1, [r7, #8]
 8014866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014868:	2300      	movs	r3, #0
 801486a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014872:	2b01      	cmp	r3, #1
 8014874:	d101      	bne.n	801487a <HAL_TIM_IC_ConfigChannel+0x1e>
 8014876:	2302      	movs	r3, #2
 8014878:	e088      	b.n	801498c <HAL_TIM_IC_ConfigChannel+0x130>
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	2201      	movs	r2, #1
 801487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d11b      	bne.n	80148c0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801488c:	68bb      	ldr	r3, [r7, #8]
 801488e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8014890:	68bb      	ldr	r3, [r7, #8]
 8014892:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8014894:	68bb      	ldr	r3, [r7, #8]
 8014896:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8014898:	f000 fdf2 	bl	8015480 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	699a      	ldr	r2, [r3, #24]
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	f022 020c 	bic.w	r2, r2, #12
 80148aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	6999      	ldr	r1, [r3, #24]
 80148b2:	68bb      	ldr	r3, [r7, #8]
 80148b4:	689a      	ldr	r2, [r3, #8]
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	430a      	orrs	r2, r1
 80148bc:	619a      	str	r2, [r3, #24]
 80148be:	e060      	b.n	8014982 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	2b04      	cmp	r3, #4
 80148c4:	d11c      	bne.n	8014900 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80148ce:	68bb      	ldr	r3, [r7, #8]
 80148d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80148d6:	f000 fe70 	bl	80155ba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	699a      	ldr	r2, [r3, #24]
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80148e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	6999      	ldr	r1, [r3, #24]
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	689b      	ldr	r3, [r3, #8]
 80148f4:	021a      	lsls	r2, r3, #8
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	430a      	orrs	r2, r1
 80148fc:	619a      	str	r2, [r3, #24]
 80148fe:	e040      	b.n	8014982 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2b08      	cmp	r3, #8
 8014904:	d11b      	bne.n	801493e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8014916:	f000 febd 	bl	8015694 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	69da      	ldr	r2, [r3, #28]
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	f022 020c 	bic.w	r2, r2, #12
 8014928:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	69d9      	ldr	r1, [r3, #28]
 8014930:	68bb      	ldr	r3, [r7, #8]
 8014932:	689a      	ldr	r2, [r3, #8]
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	430a      	orrs	r2, r1
 801493a:	61da      	str	r2, [r3, #28]
 801493c:	e021      	b.n	8014982 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	2b0c      	cmp	r3, #12
 8014942:	d11c      	bne.n	801497e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8014948:	68bb      	ldr	r3, [r7, #8]
 801494a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8014954:	f000 feda 	bl	801570c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	69da      	ldr	r2, [r3, #28]
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8014966:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	69d9      	ldr	r1, [r3, #28]
 801496e:	68bb      	ldr	r3, [r7, #8]
 8014970:	689b      	ldr	r3, [r3, #8]
 8014972:	021a      	lsls	r2, r3, #8
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	430a      	orrs	r2, r1
 801497a:	61da      	str	r2, [r3, #28]
 801497c:	e001      	b.n	8014982 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801497e:	2301      	movs	r3, #1
 8014980:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	2200      	movs	r2, #0
 8014986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801498a:	7dfb      	ldrb	r3, [r7, #23]
}
 801498c:	4618      	mov	r0, r3
 801498e:	3718      	adds	r7, #24
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}

08014994 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b086      	sub	sp, #24
 8014998:	af00      	add	r7, sp, #0
 801499a:	60f8      	str	r0, [r7, #12]
 801499c:	60b9      	str	r1, [r7, #8]
 801499e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80149a0:	2300      	movs	r3, #0
 80149a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80149aa:	2b01      	cmp	r3, #1
 80149ac:	d101      	bne.n	80149b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80149ae:	2302      	movs	r3, #2
 80149b0:	e0ff      	b.n	8014bb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	2201      	movs	r2, #1
 80149b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	2b14      	cmp	r3, #20
 80149be:	f200 80f0 	bhi.w	8014ba2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80149c2:	a201      	add	r2, pc, #4	; (adr r2, 80149c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80149c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149c8:	08014a1d 	.word	0x08014a1d
 80149cc:	08014ba3 	.word	0x08014ba3
 80149d0:	08014ba3 	.word	0x08014ba3
 80149d4:	08014ba3 	.word	0x08014ba3
 80149d8:	08014a5d 	.word	0x08014a5d
 80149dc:	08014ba3 	.word	0x08014ba3
 80149e0:	08014ba3 	.word	0x08014ba3
 80149e4:	08014ba3 	.word	0x08014ba3
 80149e8:	08014a9f 	.word	0x08014a9f
 80149ec:	08014ba3 	.word	0x08014ba3
 80149f0:	08014ba3 	.word	0x08014ba3
 80149f4:	08014ba3 	.word	0x08014ba3
 80149f8:	08014adf 	.word	0x08014adf
 80149fc:	08014ba3 	.word	0x08014ba3
 8014a00:	08014ba3 	.word	0x08014ba3
 8014a04:	08014ba3 	.word	0x08014ba3
 8014a08:	08014b21 	.word	0x08014b21
 8014a0c:	08014ba3 	.word	0x08014ba3
 8014a10:	08014ba3 	.word	0x08014ba3
 8014a14:	08014ba3 	.word	0x08014ba3
 8014a18:	08014b61 	.word	0x08014b61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	68b9      	ldr	r1, [r7, #8]
 8014a22:	4618      	mov	r0, r3
 8014a24:	f000 fa56 	bl	8014ed4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	699a      	ldr	r2, [r3, #24]
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	f042 0208 	orr.w	r2, r2, #8
 8014a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	699a      	ldr	r2, [r3, #24]
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	f022 0204 	bic.w	r2, r2, #4
 8014a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	6999      	ldr	r1, [r3, #24]
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	691a      	ldr	r2, [r3, #16]
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	430a      	orrs	r2, r1
 8014a58:	619a      	str	r2, [r3, #24]
      break;
 8014a5a:	e0a5      	b.n	8014ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	68b9      	ldr	r1, [r7, #8]
 8014a62:	4618      	mov	r0, r3
 8014a64:	f000 fac6 	bl	8014ff4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	699a      	ldr	r2, [r3, #24]
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	699a      	ldr	r2, [r3, #24]
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	6999      	ldr	r1, [r3, #24]
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	691b      	ldr	r3, [r3, #16]
 8014a92:	021a      	lsls	r2, r3, #8
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	430a      	orrs	r2, r1
 8014a9a:	619a      	str	r2, [r3, #24]
      break;
 8014a9c:	e084      	b.n	8014ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	68b9      	ldr	r1, [r7, #8]
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	f000 fb2f 	bl	8015108 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	69da      	ldr	r2, [r3, #28]
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	f042 0208 	orr.w	r2, r2, #8
 8014ab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	69da      	ldr	r2, [r3, #28]
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	f022 0204 	bic.w	r2, r2, #4
 8014ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	69d9      	ldr	r1, [r3, #28]
 8014ad0:	68bb      	ldr	r3, [r7, #8]
 8014ad2:	691a      	ldr	r2, [r3, #16]
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	430a      	orrs	r2, r1
 8014ada:	61da      	str	r2, [r3, #28]
      break;
 8014adc:	e064      	b.n	8014ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	68b9      	ldr	r1, [r7, #8]
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f000 fb97 	bl	8015218 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	69da      	ldr	r2, [r3, #28]
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	69da      	ldr	r2, [r3, #28]
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	69d9      	ldr	r1, [r3, #28]
 8014b10:	68bb      	ldr	r3, [r7, #8]
 8014b12:	691b      	ldr	r3, [r3, #16]
 8014b14:	021a      	lsls	r2, r3, #8
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	430a      	orrs	r2, r1
 8014b1c:	61da      	str	r2, [r3, #28]
      break;
 8014b1e:	e043      	b.n	8014ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	68b9      	ldr	r1, [r7, #8]
 8014b26:	4618      	mov	r0, r3
 8014b28:	f000 fbe0 	bl	80152ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	f042 0208 	orr.w	r2, r2, #8
 8014b3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	f022 0204 	bic.w	r2, r2, #4
 8014b4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8014b52:	68bb      	ldr	r3, [r7, #8]
 8014b54:	691a      	ldr	r2, [r3, #16]
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	430a      	orrs	r2, r1
 8014b5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014b5e:	e023      	b.n	8014ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	68b9      	ldr	r1, [r7, #8]
 8014b66:	4618      	mov	r0, r3
 8014b68:	f000 fc24 	bl	80153b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014b7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014b8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	691b      	ldr	r3, [r3, #16]
 8014b96:	021a      	lsls	r2, r3, #8
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	430a      	orrs	r2, r1
 8014b9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014ba0:	e002      	b.n	8014ba8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8014ba2:	2301      	movs	r3, #1
 8014ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8014ba6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	2200      	movs	r2, #0
 8014bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	3718      	adds	r7, #24
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	bd80      	pop	{r7, pc}
 8014bba:	bf00      	nop

08014bbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b084      	sub	sp, #16
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014bd0:	2b01      	cmp	r3, #1
 8014bd2:	d101      	bne.n	8014bd8 <HAL_TIM_ConfigClockSource+0x1c>
 8014bd4:	2302      	movs	r3, #2
 8014bd6:	e0b6      	b.n	8014d46 <HAL_TIM_ConfigClockSource+0x18a>
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	2201      	movs	r2, #1
 8014bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	2202      	movs	r2, #2
 8014be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	689b      	ldr	r3, [r3, #8]
 8014bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014bf0:	68bb      	ldr	r3, [r7, #8]
 8014bf2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8014bf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8014bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014bfc:	68bb      	ldr	r3, [r7, #8]
 8014bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014c02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	68ba      	ldr	r2, [r7, #8]
 8014c0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014c0c:	683b      	ldr	r3, [r7, #0]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014c14:	d03e      	beq.n	8014c94 <HAL_TIM_ConfigClockSource+0xd8>
 8014c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014c1a:	f200 8087 	bhi.w	8014d2c <HAL_TIM_ConfigClockSource+0x170>
 8014c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014c22:	f000 8086 	beq.w	8014d32 <HAL_TIM_ConfigClockSource+0x176>
 8014c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014c2a:	d87f      	bhi.n	8014d2c <HAL_TIM_ConfigClockSource+0x170>
 8014c2c:	2b70      	cmp	r3, #112	; 0x70
 8014c2e:	d01a      	beq.n	8014c66 <HAL_TIM_ConfigClockSource+0xaa>
 8014c30:	2b70      	cmp	r3, #112	; 0x70
 8014c32:	d87b      	bhi.n	8014d2c <HAL_TIM_ConfigClockSource+0x170>
 8014c34:	2b60      	cmp	r3, #96	; 0x60
 8014c36:	d050      	beq.n	8014cda <HAL_TIM_ConfigClockSource+0x11e>
 8014c38:	2b60      	cmp	r3, #96	; 0x60
 8014c3a:	d877      	bhi.n	8014d2c <HAL_TIM_ConfigClockSource+0x170>
 8014c3c:	2b50      	cmp	r3, #80	; 0x50
 8014c3e:	d03c      	beq.n	8014cba <HAL_TIM_ConfigClockSource+0xfe>
 8014c40:	2b50      	cmp	r3, #80	; 0x50
 8014c42:	d873      	bhi.n	8014d2c <HAL_TIM_ConfigClockSource+0x170>
 8014c44:	2b40      	cmp	r3, #64	; 0x40
 8014c46:	d058      	beq.n	8014cfa <HAL_TIM_ConfigClockSource+0x13e>
 8014c48:	2b40      	cmp	r3, #64	; 0x40
 8014c4a:	d86f      	bhi.n	8014d2c <HAL_TIM_ConfigClockSource+0x170>
 8014c4c:	2b30      	cmp	r3, #48	; 0x30
 8014c4e:	d064      	beq.n	8014d1a <HAL_TIM_ConfigClockSource+0x15e>
 8014c50:	2b30      	cmp	r3, #48	; 0x30
 8014c52:	d86b      	bhi.n	8014d2c <HAL_TIM_ConfigClockSource+0x170>
 8014c54:	2b20      	cmp	r3, #32
 8014c56:	d060      	beq.n	8014d1a <HAL_TIM_ConfigClockSource+0x15e>
 8014c58:	2b20      	cmp	r3, #32
 8014c5a:	d867      	bhi.n	8014d2c <HAL_TIM_ConfigClockSource+0x170>
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d05c      	beq.n	8014d1a <HAL_TIM_ConfigClockSource+0x15e>
 8014c60:	2b10      	cmp	r3, #16
 8014c62:	d05a      	beq.n	8014d1a <HAL_TIM_ConfigClockSource+0x15e>
 8014c64:	e062      	b.n	8014d2c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8014c6a:	683b      	ldr	r3, [r7, #0]
 8014c6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8014c6e:	683b      	ldr	r3, [r7, #0]
 8014c70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8014c76:	f000 fda3 	bl	80157c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	689b      	ldr	r3, [r3, #8]
 8014c80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014c82:	68bb      	ldr	r3, [r7, #8]
 8014c84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8014c88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	68ba      	ldr	r2, [r7, #8]
 8014c90:	609a      	str	r2, [r3, #8]
      break;
 8014c92:	e04f      	b.n	8014d34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8014c98:	683b      	ldr	r3, [r7, #0]
 8014c9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8014c9c:	683b      	ldr	r3, [r7, #0]
 8014c9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8014ca0:	683b      	ldr	r3, [r7, #0]
 8014ca2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8014ca4:	f000 fd8c 	bl	80157c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	689a      	ldr	r2, [r3, #8]
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014cb6:	609a      	str	r2, [r3, #8]
      break;
 8014cb8:	e03c      	b.n	8014d34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8014cc2:	683b      	ldr	r3, [r7, #0]
 8014cc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014cc6:	461a      	mov	r2, r3
 8014cc8:	f000 fc48 	bl	801555c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	2150      	movs	r1, #80	; 0x50
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f000 fd57 	bl	8015786 <TIM_ITRx_SetConfig>
      break;
 8014cd8:	e02c      	b.n	8014d34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8014ce2:	683b      	ldr	r3, [r7, #0]
 8014ce4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8014ce6:	461a      	mov	r2, r3
 8014ce8:	f000 fca4 	bl	8015634 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	2160      	movs	r1, #96	; 0x60
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f000 fd47 	bl	8015786 <TIM_ITRx_SetConfig>
      break;
 8014cf8:	e01c      	b.n	8014d34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8014cfe:	683b      	ldr	r3, [r7, #0]
 8014d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8014d02:	683b      	ldr	r3, [r7, #0]
 8014d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8014d06:	461a      	mov	r2, r3
 8014d08:	f000 fc28 	bl	801555c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	2140      	movs	r1, #64	; 0x40
 8014d12:	4618      	mov	r0, r3
 8014d14:	f000 fd37 	bl	8015786 <TIM_ITRx_SetConfig>
      break;
 8014d18:	e00c      	b.n	8014d34 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	681a      	ldr	r2, [r3, #0]
 8014d1e:	683b      	ldr	r3, [r7, #0]
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	4619      	mov	r1, r3
 8014d24:	4610      	mov	r0, r2
 8014d26:	f000 fd2e 	bl	8015786 <TIM_ITRx_SetConfig>
      break;
 8014d2a:	e003      	b.n	8014d34 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8014d2c:	2301      	movs	r3, #1
 8014d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8014d30:	e000      	b.n	8014d34 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8014d32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	2201      	movs	r2, #1
 8014d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2200      	movs	r2, #0
 8014d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d46:	4618      	mov	r0, r3
 8014d48:	3710      	adds	r7, #16
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	bd80      	pop	{r7, pc}

08014d4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014d4e:	b480      	push	{r7}
 8014d50:	b083      	sub	sp, #12
 8014d52:	af00      	add	r7, sp, #0
 8014d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014d56:	bf00      	nop
 8014d58:	370c      	adds	r7, #12
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d60:	4770      	bx	lr

08014d62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014d62:	b480      	push	{r7}
 8014d64:	b083      	sub	sp, #12
 8014d66:	af00      	add	r7, sp, #0
 8014d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014d6a:	bf00      	nop
 8014d6c:	370c      	adds	r7, #12
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d74:	4770      	bx	lr

08014d76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014d76:	b480      	push	{r7}
 8014d78:	b083      	sub	sp, #12
 8014d7a:	af00      	add	r7, sp, #0
 8014d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014d7e:	bf00      	nop
 8014d80:	370c      	adds	r7, #12
 8014d82:	46bd      	mov	sp, r7
 8014d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d88:	4770      	bx	lr

08014d8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014d8a:	b480      	push	{r7}
 8014d8c:	b083      	sub	sp, #12
 8014d8e:	af00      	add	r7, sp, #0
 8014d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014d92:	bf00      	nop
 8014d94:	370c      	adds	r7, #12
 8014d96:	46bd      	mov	sp, r7
 8014d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9c:	4770      	bx	lr
	...

08014da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014da0:	b480      	push	{r7}
 8014da2:	b085      	sub	sp, #20
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
 8014da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	4a40      	ldr	r2, [pc, #256]	; (8014eb4 <TIM_Base_SetConfig+0x114>)
 8014db4:	4293      	cmp	r3, r2
 8014db6:	d013      	beq.n	8014de0 <TIM_Base_SetConfig+0x40>
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014dbe:	d00f      	beq.n	8014de0 <TIM_Base_SetConfig+0x40>
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	4a3d      	ldr	r2, [pc, #244]	; (8014eb8 <TIM_Base_SetConfig+0x118>)
 8014dc4:	4293      	cmp	r3, r2
 8014dc6:	d00b      	beq.n	8014de0 <TIM_Base_SetConfig+0x40>
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	4a3c      	ldr	r2, [pc, #240]	; (8014ebc <TIM_Base_SetConfig+0x11c>)
 8014dcc:	4293      	cmp	r3, r2
 8014dce:	d007      	beq.n	8014de0 <TIM_Base_SetConfig+0x40>
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	4a3b      	ldr	r2, [pc, #236]	; (8014ec0 <TIM_Base_SetConfig+0x120>)
 8014dd4:	4293      	cmp	r3, r2
 8014dd6:	d003      	beq.n	8014de0 <TIM_Base_SetConfig+0x40>
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	4a3a      	ldr	r2, [pc, #232]	; (8014ec4 <TIM_Base_SetConfig+0x124>)
 8014ddc:	4293      	cmp	r3, r2
 8014dde:	d108      	bne.n	8014df2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014de8:	683b      	ldr	r3, [r7, #0]
 8014dea:	685b      	ldr	r3, [r3, #4]
 8014dec:	68fa      	ldr	r2, [r7, #12]
 8014dee:	4313      	orrs	r3, r2
 8014df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	4a2f      	ldr	r2, [pc, #188]	; (8014eb4 <TIM_Base_SetConfig+0x114>)
 8014df6:	4293      	cmp	r3, r2
 8014df8:	d01f      	beq.n	8014e3a <TIM_Base_SetConfig+0x9a>
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014e00:	d01b      	beq.n	8014e3a <TIM_Base_SetConfig+0x9a>
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	4a2c      	ldr	r2, [pc, #176]	; (8014eb8 <TIM_Base_SetConfig+0x118>)
 8014e06:	4293      	cmp	r3, r2
 8014e08:	d017      	beq.n	8014e3a <TIM_Base_SetConfig+0x9a>
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	4a2b      	ldr	r2, [pc, #172]	; (8014ebc <TIM_Base_SetConfig+0x11c>)
 8014e0e:	4293      	cmp	r3, r2
 8014e10:	d013      	beq.n	8014e3a <TIM_Base_SetConfig+0x9a>
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	4a2a      	ldr	r2, [pc, #168]	; (8014ec0 <TIM_Base_SetConfig+0x120>)
 8014e16:	4293      	cmp	r3, r2
 8014e18:	d00f      	beq.n	8014e3a <TIM_Base_SetConfig+0x9a>
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	4a29      	ldr	r2, [pc, #164]	; (8014ec4 <TIM_Base_SetConfig+0x124>)
 8014e1e:	4293      	cmp	r3, r2
 8014e20:	d00b      	beq.n	8014e3a <TIM_Base_SetConfig+0x9a>
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	4a28      	ldr	r2, [pc, #160]	; (8014ec8 <TIM_Base_SetConfig+0x128>)
 8014e26:	4293      	cmp	r3, r2
 8014e28:	d007      	beq.n	8014e3a <TIM_Base_SetConfig+0x9a>
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	4a27      	ldr	r2, [pc, #156]	; (8014ecc <TIM_Base_SetConfig+0x12c>)
 8014e2e:	4293      	cmp	r3, r2
 8014e30:	d003      	beq.n	8014e3a <TIM_Base_SetConfig+0x9a>
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	4a26      	ldr	r2, [pc, #152]	; (8014ed0 <TIM_Base_SetConfig+0x130>)
 8014e36:	4293      	cmp	r3, r2
 8014e38:	d108      	bne.n	8014e4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014e42:	683b      	ldr	r3, [r7, #0]
 8014e44:	68db      	ldr	r3, [r3, #12]
 8014e46:	68fa      	ldr	r2, [r7, #12]
 8014e48:	4313      	orrs	r3, r2
 8014e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	695b      	ldr	r3, [r3, #20]
 8014e56:	4313      	orrs	r3, r2
 8014e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	68fa      	ldr	r2, [r7, #12]
 8014e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014e60:	683b      	ldr	r3, [r7, #0]
 8014e62:	689a      	ldr	r2, [r3, #8]
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	681a      	ldr	r2, [r3, #0]
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	4a10      	ldr	r2, [pc, #64]	; (8014eb4 <TIM_Base_SetConfig+0x114>)
 8014e74:	4293      	cmp	r3, r2
 8014e76:	d00f      	beq.n	8014e98 <TIM_Base_SetConfig+0xf8>
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	4a12      	ldr	r2, [pc, #72]	; (8014ec4 <TIM_Base_SetConfig+0x124>)
 8014e7c:	4293      	cmp	r3, r2
 8014e7e:	d00b      	beq.n	8014e98 <TIM_Base_SetConfig+0xf8>
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	4a11      	ldr	r2, [pc, #68]	; (8014ec8 <TIM_Base_SetConfig+0x128>)
 8014e84:	4293      	cmp	r3, r2
 8014e86:	d007      	beq.n	8014e98 <TIM_Base_SetConfig+0xf8>
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	4a10      	ldr	r2, [pc, #64]	; (8014ecc <TIM_Base_SetConfig+0x12c>)
 8014e8c:	4293      	cmp	r3, r2
 8014e8e:	d003      	beq.n	8014e98 <TIM_Base_SetConfig+0xf8>
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	4a0f      	ldr	r2, [pc, #60]	; (8014ed0 <TIM_Base_SetConfig+0x130>)
 8014e94:	4293      	cmp	r3, r2
 8014e96:	d103      	bne.n	8014ea0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	691a      	ldr	r2, [r3, #16]
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	2201      	movs	r2, #1
 8014ea4:	615a      	str	r2, [r3, #20]
}
 8014ea6:	bf00      	nop
 8014ea8:	3714      	adds	r7, #20
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb0:	4770      	bx	lr
 8014eb2:	bf00      	nop
 8014eb4:	40012c00 	.word	0x40012c00
 8014eb8:	40000400 	.word	0x40000400
 8014ebc:	40000800 	.word	0x40000800
 8014ec0:	40000c00 	.word	0x40000c00
 8014ec4:	40013400 	.word	0x40013400
 8014ec8:	40014000 	.word	0x40014000
 8014ecc:	40014400 	.word	0x40014400
 8014ed0:	40014800 	.word	0x40014800

08014ed4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014ed4:	b480      	push	{r7}
 8014ed6:	b087      	sub	sp, #28
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6a1b      	ldr	r3, [r3, #32]
 8014ee2:	f023 0201 	bic.w	r2, r3, #1
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	6a1b      	ldr	r3, [r3, #32]
 8014eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	685b      	ldr	r3, [r3, #4]
 8014ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	699b      	ldr	r3, [r3, #24]
 8014efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	f023 0303 	bic.w	r3, r3, #3
 8014f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	68fa      	ldr	r2, [r7, #12]
 8014f16:	4313      	orrs	r3, r2
 8014f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014f1a:	697b      	ldr	r3, [r7, #20]
 8014f1c:	f023 0302 	bic.w	r3, r3, #2
 8014f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	689b      	ldr	r3, [r3, #8]
 8014f26:	697a      	ldr	r2, [r7, #20]
 8014f28:	4313      	orrs	r3, r2
 8014f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	4a2c      	ldr	r2, [pc, #176]	; (8014fe0 <TIM_OC1_SetConfig+0x10c>)
 8014f30:	4293      	cmp	r3, r2
 8014f32:	d00f      	beq.n	8014f54 <TIM_OC1_SetConfig+0x80>
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	4a2b      	ldr	r2, [pc, #172]	; (8014fe4 <TIM_OC1_SetConfig+0x110>)
 8014f38:	4293      	cmp	r3, r2
 8014f3a:	d00b      	beq.n	8014f54 <TIM_OC1_SetConfig+0x80>
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	4a2a      	ldr	r2, [pc, #168]	; (8014fe8 <TIM_OC1_SetConfig+0x114>)
 8014f40:	4293      	cmp	r3, r2
 8014f42:	d007      	beq.n	8014f54 <TIM_OC1_SetConfig+0x80>
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	4a29      	ldr	r2, [pc, #164]	; (8014fec <TIM_OC1_SetConfig+0x118>)
 8014f48:	4293      	cmp	r3, r2
 8014f4a:	d003      	beq.n	8014f54 <TIM_OC1_SetConfig+0x80>
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	4a28      	ldr	r2, [pc, #160]	; (8014ff0 <TIM_OC1_SetConfig+0x11c>)
 8014f50:	4293      	cmp	r3, r2
 8014f52:	d10c      	bne.n	8014f6e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	f023 0308 	bic.w	r3, r3, #8
 8014f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	68db      	ldr	r3, [r3, #12]
 8014f60:	697a      	ldr	r2, [r7, #20]
 8014f62:	4313      	orrs	r3, r2
 8014f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014f66:	697b      	ldr	r3, [r7, #20]
 8014f68:	f023 0304 	bic.w	r3, r3, #4
 8014f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	4a1b      	ldr	r2, [pc, #108]	; (8014fe0 <TIM_OC1_SetConfig+0x10c>)
 8014f72:	4293      	cmp	r3, r2
 8014f74:	d00f      	beq.n	8014f96 <TIM_OC1_SetConfig+0xc2>
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	4a1a      	ldr	r2, [pc, #104]	; (8014fe4 <TIM_OC1_SetConfig+0x110>)
 8014f7a:	4293      	cmp	r3, r2
 8014f7c:	d00b      	beq.n	8014f96 <TIM_OC1_SetConfig+0xc2>
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	4a19      	ldr	r2, [pc, #100]	; (8014fe8 <TIM_OC1_SetConfig+0x114>)
 8014f82:	4293      	cmp	r3, r2
 8014f84:	d007      	beq.n	8014f96 <TIM_OC1_SetConfig+0xc2>
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	4a18      	ldr	r2, [pc, #96]	; (8014fec <TIM_OC1_SetConfig+0x118>)
 8014f8a:	4293      	cmp	r3, r2
 8014f8c:	d003      	beq.n	8014f96 <TIM_OC1_SetConfig+0xc2>
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	4a17      	ldr	r2, [pc, #92]	; (8014ff0 <TIM_OC1_SetConfig+0x11c>)
 8014f92:	4293      	cmp	r3, r2
 8014f94:	d111      	bne.n	8014fba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014f96:	693b      	ldr	r3, [r7, #16]
 8014f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014f9e:	693b      	ldr	r3, [r7, #16]
 8014fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	695b      	ldr	r3, [r3, #20]
 8014faa:	693a      	ldr	r2, [r7, #16]
 8014fac:	4313      	orrs	r3, r2
 8014fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014fb0:	683b      	ldr	r3, [r7, #0]
 8014fb2:	699b      	ldr	r3, [r3, #24]
 8014fb4:	693a      	ldr	r2, [r7, #16]
 8014fb6:	4313      	orrs	r3, r2
 8014fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	693a      	ldr	r2, [r7, #16]
 8014fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	68fa      	ldr	r2, [r7, #12]
 8014fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014fc6:	683b      	ldr	r3, [r7, #0]
 8014fc8:	685a      	ldr	r2, [r3, #4]
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	697a      	ldr	r2, [r7, #20]
 8014fd2:	621a      	str	r2, [r3, #32]
}
 8014fd4:	bf00      	nop
 8014fd6:	371c      	adds	r7, #28
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fde:	4770      	bx	lr
 8014fe0:	40012c00 	.word	0x40012c00
 8014fe4:	40013400 	.word	0x40013400
 8014fe8:	40014000 	.word	0x40014000
 8014fec:	40014400 	.word	0x40014400
 8014ff0:	40014800 	.word	0x40014800

08014ff4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014ff4:	b480      	push	{r7}
 8014ff6:	b087      	sub	sp, #28
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
 8014ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6a1b      	ldr	r3, [r3, #32]
 8015002:	f023 0210 	bic.w	r2, r3, #16
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	6a1b      	ldr	r3, [r3, #32]
 801500e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	685b      	ldr	r3, [r3, #4]
 8015014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	699b      	ldr	r3, [r3, #24]
 801501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8015022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801502e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015030:	683b      	ldr	r3, [r7, #0]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	021b      	lsls	r3, r3, #8
 8015036:	68fa      	ldr	r2, [r7, #12]
 8015038:	4313      	orrs	r3, r2
 801503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801503c:	697b      	ldr	r3, [r7, #20]
 801503e:	f023 0320 	bic.w	r3, r3, #32
 8015042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015044:	683b      	ldr	r3, [r7, #0]
 8015046:	689b      	ldr	r3, [r3, #8]
 8015048:	011b      	lsls	r3, r3, #4
 801504a:	697a      	ldr	r2, [r7, #20]
 801504c:	4313      	orrs	r3, r2
 801504e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	4a28      	ldr	r2, [pc, #160]	; (80150f4 <TIM_OC2_SetConfig+0x100>)
 8015054:	4293      	cmp	r3, r2
 8015056:	d003      	beq.n	8015060 <TIM_OC2_SetConfig+0x6c>
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	4a27      	ldr	r2, [pc, #156]	; (80150f8 <TIM_OC2_SetConfig+0x104>)
 801505c:	4293      	cmp	r3, r2
 801505e:	d10d      	bne.n	801507c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8015060:	697b      	ldr	r3, [r7, #20]
 8015062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8015068:	683b      	ldr	r3, [r7, #0]
 801506a:	68db      	ldr	r3, [r3, #12]
 801506c:	011b      	lsls	r3, r3, #4
 801506e:	697a      	ldr	r2, [r7, #20]
 8015070:	4313      	orrs	r3, r2
 8015072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8015074:	697b      	ldr	r3, [r7, #20]
 8015076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801507a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	4a1d      	ldr	r2, [pc, #116]	; (80150f4 <TIM_OC2_SetConfig+0x100>)
 8015080:	4293      	cmp	r3, r2
 8015082:	d00f      	beq.n	80150a4 <TIM_OC2_SetConfig+0xb0>
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	4a1c      	ldr	r2, [pc, #112]	; (80150f8 <TIM_OC2_SetConfig+0x104>)
 8015088:	4293      	cmp	r3, r2
 801508a:	d00b      	beq.n	80150a4 <TIM_OC2_SetConfig+0xb0>
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	4a1b      	ldr	r2, [pc, #108]	; (80150fc <TIM_OC2_SetConfig+0x108>)
 8015090:	4293      	cmp	r3, r2
 8015092:	d007      	beq.n	80150a4 <TIM_OC2_SetConfig+0xb0>
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	4a1a      	ldr	r2, [pc, #104]	; (8015100 <TIM_OC2_SetConfig+0x10c>)
 8015098:	4293      	cmp	r3, r2
 801509a:	d003      	beq.n	80150a4 <TIM_OC2_SetConfig+0xb0>
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	4a19      	ldr	r2, [pc, #100]	; (8015104 <TIM_OC2_SetConfig+0x110>)
 80150a0:	4293      	cmp	r3, r2
 80150a2:	d113      	bne.n	80150cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80150a4:	693b      	ldr	r3, [r7, #16]
 80150a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80150aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80150ac:	693b      	ldr	r3, [r7, #16]
 80150ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80150b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80150b4:	683b      	ldr	r3, [r7, #0]
 80150b6:	695b      	ldr	r3, [r3, #20]
 80150b8:	009b      	lsls	r3, r3, #2
 80150ba:	693a      	ldr	r2, [r7, #16]
 80150bc:	4313      	orrs	r3, r2
 80150be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80150c0:	683b      	ldr	r3, [r7, #0]
 80150c2:	699b      	ldr	r3, [r3, #24]
 80150c4:	009b      	lsls	r3, r3, #2
 80150c6:	693a      	ldr	r2, [r7, #16]
 80150c8:	4313      	orrs	r3, r2
 80150ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	693a      	ldr	r2, [r7, #16]
 80150d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	68fa      	ldr	r2, [r7, #12]
 80150d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80150d8:	683b      	ldr	r3, [r7, #0]
 80150da:	685a      	ldr	r2, [r3, #4]
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	697a      	ldr	r2, [r7, #20]
 80150e4:	621a      	str	r2, [r3, #32]
}
 80150e6:	bf00      	nop
 80150e8:	371c      	adds	r7, #28
 80150ea:	46bd      	mov	sp, r7
 80150ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f0:	4770      	bx	lr
 80150f2:	bf00      	nop
 80150f4:	40012c00 	.word	0x40012c00
 80150f8:	40013400 	.word	0x40013400
 80150fc:	40014000 	.word	0x40014000
 8015100:	40014400 	.word	0x40014400
 8015104:	40014800 	.word	0x40014800

08015108 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015108:	b480      	push	{r7}
 801510a:	b087      	sub	sp, #28
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	6a1b      	ldr	r3, [r3, #32]
 8015116:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	6a1b      	ldr	r3, [r3, #32]
 8015122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	685b      	ldr	r3, [r3, #4]
 8015128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	69db      	ldr	r3, [r3, #28]
 801512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801513a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	f023 0303 	bic.w	r3, r3, #3
 8015142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015144:	683b      	ldr	r3, [r7, #0]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	68fa      	ldr	r2, [r7, #12]
 801514a:	4313      	orrs	r3, r2
 801514c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8015156:	683b      	ldr	r3, [r7, #0]
 8015158:	689b      	ldr	r3, [r3, #8]
 801515a:	021b      	lsls	r3, r3, #8
 801515c:	697a      	ldr	r2, [r7, #20]
 801515e:	4313      	orrs	r3, r2
 8015160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	4a27      	ldr	r2, [pc, #156]	; (8015204 <TIM_OC3_SetConfig+0xfc>)
 8015166:	4293      	cmp	r3, r2
 8015168:	d003      	beq.n	8015172 <TIM_OC3_SetConfig+0x6a>
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	4a26      	ldr	r2, [pc, #152]	; (8015208 <TIM_OC3_SetConfig+0x100>)
 801516e:	4293      	cmp	r3, r2
 8015170:	d10d      	bne.n	801518e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8015172:	697b      	ldr	r3, [r7, #20]
 8015174:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801517a:	683b      	ldr	r3, [r7, #0]
 801517c:	68db      	ldr	r3, [r3, #12]
 801517e:	021b      	lsls	r3, r3, #8
 8015180:	697a      	ldr	r2, [r7, #20]
 8015182:	4313      	orrs	r3, r2
 8015184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8015186:	697b      	ldr	r3, [r7, #20]
 8015188:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801518c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	4a1c      	ldr	r2, [pc, #112]	; (8015204 <TIM_OC3_SetConfig+0xfc>)
 8015192:	4293      	cmp	r3, r2
 8015194:	d00f      	beq.n	80151b6 <TIM_OC3_SetConfig+0xae>
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	4a1b      	ldr	r2, [pc, #108]	; (8015208 <TIM_OC3_SetConfig+0x100>)
 801519a:	4293      	cmp	r3, r2
 801519c:	d00b      	beq.n	80151b6 <TIM_OC3_SetConfig+0xae>
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	4a1a      	ldr	r2, [pc, #104]	; (801520c <TIM_OC3_SetConfig+0x104>)
 80151a2:	4293      	cmp	r3, r2
 80151a4:	d007      	beq.n	80151b6 <TIM_OC3_SetConfig+0xae>
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	4a19      	ldr	r2, [pc, #100]	; (8015210 <TIM_OC3_SetConfig+0x108>)
 80151aa:	4293      	cmp	r3, r2
 80151ac:	d003      	beq.n	80151b6 <TIM_OC3_SetConfig+0xae>
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	4a18      	ldr	r2, [pc, #96]	; (8015214 <TIM_OC3_SetConfig+0x10c>)
 80151b2:	4293      	cmp	r3, r2
 80151b4:	d113      	bne.n	80151de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80151b6:	693b      	ldr	r3, [r7, #16]
 80151b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80151bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80151be:	693b      	ldr	r3, [r7, #16]
 80151c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80151c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80151c6:	683b      	ldr	r3, [r7, #0]
 80151c8:	695b      	ldr	r3, [r3, #20]
 80151ca:	011b      	lsls	r3, r3, #4
 80151cc:	693a      	ldr	r2, [r7, #16]
 80151ce:	4313      	orrs	r3, r2
 80151d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	699b      	ldr	r3, [r3, #24]
 80151d6:	011b      	lsls	r3, r3, #4
 80151d8:	693a      	ldr	r2, [r7, #16]
 80151da:	4313      	orrs	r3, r2
 80151dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	693a      	ldr	r2, [r7, #16]
 80151e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	68fa      	ldr	r2, [r7, #12]
 80151e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80151ea:	683b      	ldr	r3, [r7, #0]
 80151ec:	685a      	ldr	r2, [r3, #4]
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	697a      	ldr	r2, [r7, #20]
 80151f6:	621a      	str	r2, [r3, #32]
}
 80151f8:	bf00      	nop
 80151fa:	371c      	adds	r7, #28
 80151fc:	46bd      	mov	sp, r7
 80151fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015202:	4770      	bx	lr
 8015204:	40012c00 	.word	0x40012c00
 8015208:	40013400 	.word	0x40013400
 801520c:	40014000 	.word	0x40014000
 8015210:	40014400 	.word	0x40014400
 8015214:	40014800 	.word	0x40014800

08015218 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015218:	b480      	push	{r7}
 801521a:	b087      	sub	sp, #28
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
 8015220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	6a1b      	ldr	r3, [r3, #32]
 8015226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	6a1b      	ldr	r3, [r3, #32]
 8015232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	685b      	ldr	r3, [r3, #4]
 8015238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	69db      	ldr	r3, [r3, #28]
 801523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8015246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801524a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	021b      	lsls	r3, r3, #8
 801525a:	68fa      	ldr	r2, [r7, #12]
 801525c:	4313      	orrs	r3, r2
 801525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015260:	693b      	ldr	r3, [r7, #16]
 8015262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	689b      	ldr	r3, [r3, #8]
 801526c:	031b      	lsls	r3, r3, #12
 801526e:	693a      	ldr	r2, [r7, #16]
 8015270:	4313      	orrs	r3, r2
 8015272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	4a18      	ldr	r2, [pc, #96]	; (80152d8 <TIM_OC4_SetConfig+0xc0>)
 8015278:	4293      	cmp	r3, r2
 801527a:	d00f      	beq.n	801529c <TIM_OC4_SetConfig+0x84>
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	4a17      	ldr	r2, [pc, #92]	; (80152dc <TIM_OC4_SetConfig+0xc4>)
 8015280:	4293      	cmp	r3, r2
 8015282:	d00b      	beq.n	801529c <TIM_OC4_SetConfig+0x84>
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	4a16      	ldr	r2, [pc, #88]	; (80152e0 <TIM_OC4_SetConfig+0xc8>)
 8015288:	4293      	cmp	r3, r2
 801528a:	d007      	beq.n	801529c <TIM_OC4_SetConfig+0x84>
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	4a15      	ldr	r2, [pc, #84]	; (80152e4 <TIM_OC4_SetConfig+0xcc>)
 8015290:	4293      	cmp	r3, r2
 8015292:	d003      	beq.n	801529c <TIM_OC4_SetConfig+0x84>
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	4a14      	ldr	r2, [pc, #80]	; (80152e8 <TIM_OC4_SetConfig+0xd0>)
 8015298:	4293      	cmp	r3, r2
 801529a:	d109      	bne.n	80152b0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801529c:	697b      	ldr	r3, [r7, #20]
 801529e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80152a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	695b      	ldr	r3, [r3, #20]
 80152a8:	019b      	lsls	r3, r3, #6
 80152aa:	697a      	ldr	r2, [r7, #20]
 80152ac:	4313      	orrs	r3, r2
 80152ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	697a      	ldr	r2, [r7, #20]
 80152b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	68fa      	ldr	r2, [r7, #12]
 80152ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	685a      	ldr	r2, [r3, #4]
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	693a      	ldr	r2, [r7, #16]
 80152c8:	621a      	str	r2, [r3, #32]
}
 80152ca:	bf00      	nop
 80152cc:	371c      	adds	r7, #28
 80152ce:	46bd      	mov	sp, r7
 80152d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d4:	4770      	bx	lr
 80152d6:	bf00      	nop
 80152d8:	40012c00 	.word	0x40012c00
 80152dc:	40013400 	.word	0x40013400
 80152e0:	40014000 	.word	0x40014000
 80152e4:	40014400 	.word	0x40014400
 80152e8:	40014800 	.word	0x40014800

080152ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80152ec:	b480      	push	{r7}
 80152ee:	b087      	sub	sp, #28
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
 80152f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	6a1b      	ldr	r3, [r3, #32]
 80152fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	6a1b      	ldr	r3, [r3, #32]
 8015306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	685b      	ldr	r3, [r3, #4]
 801530c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801531a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801531e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	68fa      	ldr	r2, [r7, #12]
 8015326:	4313      	orrs	r3, r2
 8015328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801532a:	693b      	ldr	r3, [r7, #16]
 801532c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8015330:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8015332:	683b      	ldr	r3, [r7, #0]
 8015334:	689b      	ldr	r3, [r3, #8]
 8015336:	041b      	lsls	r3, r3, #16
 8015338:	693a      	ldr	r2, [r7, #16]
 801533a:	4313      	orrs	r3, r2
 801533c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	4a17      	ldr	r2, [pc, #92]	; (80153a0 <TIM_OC5_SetConfig+0xb4>)
 8015342:	4293      	cmp	r3, r2
 8015344:	d00f      	beq.n	8015366 <TIM_OC5_SetConfig+0x7a>
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	4a16      	ldr	r2, [pc, #88]	; (80153a4 <TIM_OC5_SetConfig+0xb8>)
 801534a:	4293      	cmp	r3, r2
 801534c:	d00b      	beq.n	8015366 <TIM_OC5_SetConfig+0x7a>
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	4a15      	ldr	r2, [pc, #84]	; (80153a8 <TIM_OC5_SetConfig+0xbc>)
 8015352:	4293      	cmp	r3, r2
 8015354:	d007      	beq.n	8015366 <TIM_OC5_SetConfig+0x7a>
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	4a14      	ldr	r2, [pc, #80]	; (80153ac <TIM_OC5_SetConfig+0xc0>)
 801535a:	4293      	cmp	r3, r2
 801535c:	d003      	beq.n	8015366 <TIM_OC5_SetConfig+0x7a>
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	4a13      	ldr	r2, [pc, #76]	; (80153b0 <TIM_OC5_SetConfig+0xc4>)
 8015362:	4293      	cmp	r3, r2
 8015364:	d109      	bne.n	801537a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8015366:	697b      	ldr	r3, [r7, #20]
 8015368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801536c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801536e:	683b      	ldr	r3, [r7, #0]
 8015370:	695b      	ldr	r3, [r3, #20]
 8015372:	021b      	lsls	r3, r3, #8
 8015374:	697a      	ldr	r2, [r7, #20]
 8015376:	4313      	orrs	r3, r2
 8015378:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	697a      	ldr	r2, [r7, #20]
 801537e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	68fa      	ldr	r2, [r7, #12]
 8015384:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8015386:	683b      	ldr	r3, [r7, #0]
 8015388:	685a      	ldr	r2, [r3, #4]
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	693a      	ldr	r2, [r7, #16]
 8015392:	621a      	str	r2, [r3, #32]
}
 8015394:	bf00      	nop
 8015396:	371c      	adds	r7, #28
 8015398:	46bd      	mov	sp, r7
 801539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539e:	4770      	bx	lr
 80153a0:	40012c00 	.word	0x40012c00
 80153a4:	40013400 	.word	0x40013400
 80153a8:	40014000 	.word	0x40014000
 80153ac:	40014400 	.word	0x40014400
 80153b0:	40014800 	.word	0x40014800

080153b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80153b4:	b480      	push	{r7}
 80153b6:	b087      	sub	sp, #28
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
 80153bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	6a1b      	ldr	r3, [r3, #32]
 80153c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	6a1b      	ldr	r3, [r3, #32]
 80153ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	685b      	ldr	r3, [r3, #4]
 80153d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80153da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80153e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80153e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80153e8:	683b      	ldr	r3, [r7, #0]
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	021b      	lsls	r3, r3, #8
 80153ee:	68fa      	ldr	r2, [r7, #12]
 80153f0:	4313      	orrs	r3, r2
 80153f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80153f4:	693b      	ldr	r3, [r7, #16]
 80153f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80153fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80153fc:	683b      	ldr	r3, [r7, #0]
 80153fe:	689b      	ldr	r3, [r3, #8]
 8015400:	051b      	lsls	r3, r3, #20
 8015402:	693a      	ldr	r2, [r7, #16]
 8015404:	4313      	orrs	r3, r2
 8015406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	4a18      	ldr	r2, [pc, #96]	; (801546c <TIM_OC6_SetConfig+0xb8>)
 801540c:	4293      	cmp	r3, r2
 801540e:	d00f      	beq.n	8015430 <TIM_OC6_SetConfig+0x7c>
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	4a17      	ldr	r2, [pc, #92]	; (8015470 <TIM_OC6_SetConfig+0xbc>)
 8015414:	4293      	cmp	r3, r2
 8015416:	d00b      	beq.n	8015430 <TIM_OC6_SetConfig+0x7c>
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	4a16      	ldr	r2, [pc, #88]	; (8015474 <TIM_OC6_SetConfig+0xc0>)
 801541c:	4293      	cmp	r3, r2
 801541e:	d007      	beq.n	8015430 <TIM_OC6_SetConfig+0x7c>
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	4a15      	ldr	r2, [pc, #84]	; (8015478 <TIM_OC6_SetConfig+0xc4>)
 8015424:	4293      	cmp	r3, r2
 8015426:	d003      	beq.n	8015430 <TIM_OC6_SetConfig+0x7c>
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	4a14      	ldr	r2, [pc, #80]	; (801547c <TIM_OC6_SetConfig+0xc8>)
 801542c:	4293      	cmp	r3, r2
 801542e:	d109      	bne.n	8015444 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8015430:	697b      	ldr	r3, [r7, #20]
 8015432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015436:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8015438:	683b      	ldr	r3, [r7, #0]
 801543a:	695b      	ldr	r3, [r3, #20]
 801543c:	029b      	lsls	r3, r3, #10
 801543e:	697a      	ldr	r2, [r7, #20]
 8015440:	4313      	orrs	r3, r2
 8015442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	697a      	ldr	r2, [r7, #20]
 8015448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	68fa      	ldr	r2, [r7, #12]
 801544e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8015450:	683b      	ldr	r3, [r7, #0]
 8015452:	685a      	ldr	r2, [r3, #4]
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	693a      	ldr	r2, [r7, #16]
 801545c:	621a      	str	r2, [r3, #32]
}
 801545e:	bf00      	nop
 8015460:	371c      	adds	r7, #28
 8015462:	46bd      	mov	sp, r7
 8015464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015468:	4770      	bx	lr
 801546a:	bf00      	nop
 801546c:	40012c00 	.word	0x40012c00
 8015470:	40013400 	.word	0x40013400
 8015474:	40014000 	.word	0x40014000
 8015478:	40014400 	.word	0x40014400
 801547c:	40014800 	.word	0x40014800

08015480 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8015480:	b480      	push	{r7}
 8015482:	b087      	sub	sp, #28
 8015484:	af00      	add	r7, sp, #0
 8015486:	60f8      	str	r0, [r7, #12]
 8015488:	60b9      	str	r1, [r7, #8]
 801548a:	607a      	str	r2, [r7, #4]
 801548c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	6a1b      	ldr	r3, [r3, #32]
 8015492:	f023 0201 	bic.w	r2, r3, #1
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	699b      	ldr	r3, [r3, #24]
 801549e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	6a1b      	ldr	r3, [r3, #32]
 80154a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	4a26      	ldr	r2, [pc, #152]	; (8015544 <TIM_TI1_SetConfig+0xc4>)
 80154aa:	4293      	cmp	r3, r2
 80154ac:	d017      	beq.n	80154de <TIM_TI1_SetConfig+0x5e>
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80154b4:	d013      	beq.n	80154de <TIM_TI1_SetConfig+0x5e>
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	4a23      	ldr	r2, [pc, #140]	; (8015548 <TIM_TI1_SetConfig+0xc8>)
 80154ba:	4293      	cmp	r3, r2
 80154bc:	d00f      	beq.n	80154de <TIM_TI1_SetConfig+0x5e>
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	4a22      	ldr	r2, [pc, #136]	; (801554c <TIM_TI1_SetConfig+0xcc>)
 80154c2:	4293      	cmp	r3, r2
 80154c4:	d00b      	beq.n	80154de <TIM_TI1_SetConfig+0x5e>
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	4a21      	ldr	r2, [pc, #132]	; (8015550 <TIM_TI1_SetConfig+0xd0>)
 80154ca:	4293      	cmp	r3, r2
 80154cc:	d007      	beq.n	80154de <TIM_TI1_SetConfig+0x5e>
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	4a20      	ldr	r2, [pc, #128]	; (8015554 <TIM_TI1_SetConfig+0xd4>)
 80154d2:	4293      	cmp	r3, r2
 80154d4:	d003      	beq.n	80154de <TIM_TI1_SetConfig+0x5e>
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	4a1f      	ldr	r2, [pc, #124]	; (8015558 <TIM_TI1_SetConfig+0xd8>)
 80154da:	4293      	cmp	r3, r2
 80154dc:	d101      	bne.n	80154e2 <TIM_TI1_SetConfig+0x62>
 80154de:	2301      	movs	r3, #1
 80154e0:	e000      	b.n	80154e4 <TIM_TI1_SetConfig+0x64>
 80154e2:	2300      	movs	r3, #0
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d008      	beq.n	80154fa <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80154e8:	697b      	ldr	r3, [r7, #20]
 80154ea:	f023 0303 	bic.w	r3, r3, #3
 80154ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80154f0:	697a      	ldr	r2, [r7, #20]
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	4313      	orrs	r3, r2
 80154f6:	617b      	str	r3, [r7, #20]
 80154f8:	e003      	b.n	8015502 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80154fa:	697b      	ldr	r3, [r7, #20]
 80154fc:	f043 0301 	orr.w	r3, r3, #1
 8015500:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015502:	697b      	ldr	r3, [r7, #20]
 8015504:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015508:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801550a:	683b      	ldr	r3, [r7, #0]
 801550c:	011b      	lsls	r3, r3, #4
 801550e:	b2db      	uxtb	r3, r3
 8015510:	697a      	ldr	r2, [r7, #20]
 8015512:	4313      	orrs	r3, r2
 8015514:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	f023 030a 	bic.w	r3, r3, #10
 801551c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801551e:	68bb      	ldr	r3, [r7, #8]
 8015520:	f003 030a 	and.w	r3, r3, #10
 8015524:	693a      	ldr	r2, [r7, #16]
 8015526:	4313      	orrs	r3, r2
 8015528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	697a      	ldr	r2, [r7, #20]
 801552e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	693a      	ldr	r2, [r7, #16]
 8015534:	621a      	str	r2, [r3, #32]
}
 8015536:	bf00      	nop
 8015538:	371c      	adds	r7, #28
 801553a:	46bd      	mov	sp, r7
 801553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015540:	4770      	bx	lr
 8015542:	bf00      	nop
 8015544:	40012c00 	.word	0x40012c00
 8015548:	40000400 	.word	0x40000400
 801554c:	40000800 	.word	0x40000800
 8015550:	40000c00 	.word	0x40000c00
 8015554:	40013400 	.word	0x40013400
 8015558:	40014000 	.word	0x40014000

0801555c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801555c:	b480      	push	{r7}
 801555e:	b087      	sub	sp, #28
 8015560:	af00      	add	r7, sp, #0
 8015562:	60f8      	str	r0, [r7, #12]
 8015564:	60b9      	str	r1, [r7, #8]
 8015566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	6a1b      	ldr	r3, [r3, #32]
 801556c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	6a1b      	ldr	r3, [r3, #32]
 8015572:	f023 0201 	bic.w	r2, r3, #1
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	699b      	ldr	r3, [r3, #24]
 801557e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015580:	693b      	ldr	r3, [r7, #16]
 8015582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	011b      	lsls	r3, r3, #4
 801558c:	693a      	ldr	r2, [r7, #16]
 801558e:	4313      	orrs	r3, r2
 8015590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015592:	697b      	ldr	r3, [r7, #20]
 8015594:	f023 030a 	bic.w	r3, r3, #10
 8015598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801559a:	697a      	ldr	r2, [r7, #20]
 801559c:	68bb      	ldr	r3, [r7, #8]
 801559e:	4313      	orrs	r3, r2
 80155a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	693a      	ldr	r2, [r7, #16]
 80155a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	697a      	ldr	r2, [r7, #20]
 80155ac:	621a      	str	r2, [r3, #32]
}
 80155ae:	bf00      	nop
 80155b0:	371c      	adds	r7, #28
 80155b2:	46bd      	mov	sp, r7
 80155b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b8:	4770      	bx	lr

080155ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80155ba:	b480      	push	{r7}
 80155bc:	b087      	sub	sp, #28
 80155be:	af00      	add	r7, sp, #0
 80155c0:	60f8      	str	r0, [r7, #12]
 80155c2:	60b9      	str	r1, [r7, #8]
 80155c4:	607a      	str	r2, [r7, #4]
 80155c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	6a1b      	ldr	r3, [r3, #32]
 80155cc:	f023 0210 	bic.w	r2, r3, #16
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	699b      	ldr	r3, [r3, #24]
 80155d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	6a1b      	ldr	r3, [r3, #32]
 80155de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80155e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	021b      	lsls	r3, r3, #8
 80155ec:	697a      	ldr	r2, [r7, #20]
 80155ee:	4313      	orrs	r3, r2
 80155f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80155f2:	697b      	ldr	r3, [r7, #20]
 80155f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80155f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80155fa:	683b      	ldr	r3, [r7, #0]
 80155fc:	031b      	lsls	r3, r3, #12
 80155fe:	b29b      	uxth	r3, r3
 8015600:	697a      	ldr	r2, [r7, #20]
 8015602:	4313      	orrs	r3, r2
 8015604:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015606:	693b      	ldr	r3, [r7, #16]
 8015608:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801560c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801560e:	68bb      	ldr	r3, [r7, #8]
 8015610:	011b      	lsls	r3, r3, #4
 8015612:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8015616:	693a      	ldr	r2, [r7, #16]
 8015618:	4313      	orrs	r3, r2
 801561a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	697a      	ldr	r2, [r7, #20]
 8015620:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	693a      	ldr	r2, [r7, #16]
 8015626:	621a      	str	r2, [r3, #32]
}
 8015628:	bf00      	nop
 801562a:	371c      	adds	r7, #28
 801562c:	46bd      	mov	sp, r7
 801562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015632:	4770      	bx	lr

08015634 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015634:	b480      	push	{r7}
 8015636:	b087      	sub	sp, #28
 8015638:	af00      	add	r7, sp, #0
 801563a:	60f8      	str	r0, [r7, #12]
 801563c:	60b9      	str	r1, [r7, #8]
 801563e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	6a1b      	ldr	r3, [r3, #32]
 8015644:	f023 0210 	bic.w	r2, r3, #16
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	699b      	ldr	r3, [r3, #24]
 8015650:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	6a1b      	ldr	r3, [r3, #32]
 8015656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015658:	697b      	ldr	r3, [r7, #20]
 801565a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801565e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	031b      	lsls	r3, r3, #12
 8015664:	697a      	ldr	r2, [r7, #20]
 8015666:	4313      	orrs	r3, r2
 8015668:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801566a:	693b      	ldr	r3, [r7, #16]
 801566c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8015670:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015672:	68bb      	ldr	r3, [r7, #8]
 8015674:	011b      	lsls	r3, r3, #4
 8015676:	693a      	ldr	r2, [r7, #16]
 8015678:	4313      	orrs	r3, r2
 801567a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	697a      	ldr	r2, [r7, #20]
 8015680:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	693a      	ldr	r2, [r7, #16]
 8015686:	621a      	str	r2, [r3, #32]
}
 8015688:	bf00      	nop
 801568a:	371c      	adds	r7, #28
 801568c:	46bd      	mov	sp, r7
 801568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015692:	4770      	bx	lr

08015694 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8015694:	b480      	push	{r7}
 8015696:	b087      	sub	sp, #28
 8015698:	af00      	add	r7, sp, #0
 801569a:	60f8      	str	r0, [r7, #12]
 801569c:	60b9      	str	r1, [r7, #8]
 801569e:	607a      	str	r2, [r7, #4]
 80156a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	6a1b      	ldr	r3, [r3, #32]
 80156a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	69db      	ldr	r3, [r3, #28]
 80156b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	6a1b      	ldr	r3, [r3, #32]
 80156b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80156ba:	697b      	ldr	r3, [r7, #20]
 80156bc:	f023 0303 	bic.w	r3, r3, #3
 80156c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80156c2:	697a      	ldr	r2, [r7, #20]
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	4313      	orrs	r3, r2
 80156c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80156ca:	697b      	ldr	r3, [r7, #20]
 80156cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80156d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80156d2:	683b      	ldr	r3, [r7, #0]
 80156d4:	011b      	lsls	r3, r3, #4
 80156d6:	b2db      	uxtb	r3, r3
 80156d8:	697a      	ldr	r2, [r7, #20]
 80156da:	4313      	orrs	r3, r2
 80156dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80156de:	693b      	ldr	r3, [r7, #16]
 80156e0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80156e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80156e6:	68bb      	ldr	r3, [r7, #8]
 80156e8:	021b      	lsls	r3, r3, #8
 80156ea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80156ee:	693a      	ldr	r2, [r7, #16]
 80156f0:	4313      	orrs	r3, r2
 80156f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	697a      	ldr	r2, [r7, #20]
 80156f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	693a      	ldr	r2, [r7, #16]
 80156fe:	621a      	str	r2, [r3, #32]
}
 8015700:	bf00      	nop
 8015702:	371c      	adds	r7, #28
 8015704:	46bd      	mov	sp, r7
 8015706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570a:	4770      	bx	lr

0801570c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801570c:	b480      	push	{r7}
 801570e:	b087      	sub	sp, #28
 8015710:	af00      	add	r7, sp, #0
 8015712:	60f8      	str	r0, [r7, #12]
 8015714:	60b9      	str	r1, [r7, #8]
 8015716:	607a      	str	r2, [r7, #4]
 8015718:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	6a1b      	ldr	r3, [r3, #32]
 801571e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	69db      	ldr	r3, [r3, #28]
 801572a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	6a1b      	ldr	r3, [r3, #32]
 8015730:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8015732:	697b      	ldr	r3, [r7, #20]
 8015734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015738:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	021b      	lsls	r3, r3, #8
 801573e:	697a      	ldr	r2, [r7, #20]
 8015740:	4313      	orrs	r3, r2
 8015742:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801574a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801574c:	683b      	ldr	r3, [r7, #0]
 801574e:	031b      	lsls	r3, r3, #12
 8015750:	b29b      	uxth	r3, r3
 8015752:	697a      	ldr	r2, [r7, #20]
 8015754:	4313      	orrs	r3, r2
 8015756:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8015758:	693b      	ldr	r3, [r7, #16]
 801575a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801575e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8015760:	68bb      	ldr	r3, [r7, #8]
 8015762:	031b      	lsls	r3, r3, #12
 8015764:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8015768:	693a      	ldr	r2, [r7, #16]
 801576a:	4313      	orrs	r3, r2
 801576c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	697a      	ldr	r2, [r7, #20]
 8015772:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	693a      	ldr	r2, [r7, #16]
 8015778:	621a      	str	r2, [r3, #32]
}
 801577a:	bf00      	nop
 801577c:	371c      	adds	r7, #28
 801577e:	46bd      	mov	sp, r7
 8015780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015784:	4770      	bx	lr

08015786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015786:	b480      	push	{r7}
 8015788:	b085      	sub	sp, #20
 801578a:	af00      	add	r7, sp, #0
 801578c:	6078      	str	r0, [r7, #4]
 801578e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	689b      	ldr	r3, [r3, #8]
 8015794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801579c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80157a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80157a2:	683a      	ldr	r2, [r7, #0]
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	4313      	orrs	r3, r2
 80157a8:	f043 0307 	orr.w	r3, r3, #7
 80157ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	68fa      	ldr	r2, [r7, #12]
 80157b2:	609a      	str	r2, [r3, #8]
}
 80157b4:	bf00      	nop
 80157b6:	3714      	adds	r7, #20
 80157b8:	46bd      	mov	sp, r7
 80157ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157be:	4770      	bx	lr

080157c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80157c0:	b480      	push	{r7}
 80157c2:	b087      	sub	sp, #28
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	60f8      	str	r0, [r7, #12]
 80157c8:	60b9      	str	r1, [r7, #8]
 80157ca:	607a      	str	r2, [r7, #4]
 80157cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	689b      	ldr	r3, [r3, #8]
 80157d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80157d4:	697b      	ldr	r3, [r7, #20]
 80157d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80157da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80157dc:	683b      	ldr	r3, [r7, #0]
 80157de:	021a      	lsls	r2, r3, #8
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	431a      	orrs	r2, r3
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	4313      	orrs	r3, r2
 80157e8:	697a      	ldr	r2, [r7, #20]
 80157ea:	4313      	orrs	r3, r2
 80157ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	697a      	ldr	r2, [r7, #20]
 80157f2:	609a      	str	r2, [r3, #8]
}
 80157f4:	bf00      	nop
 80157f6:	371c      	adds	r7, #28
 80157f8:	46bd      	mov	sp, r7
 80157fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fe:	4770      	bx	lr

08015800 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015800:	b480      	push	{r7}
 8015802:	b087      	sub	sp, #28
 8015804:	af00      	add	r7, sp, #0
 8015806:	60f8      	str	r0, [r7, #12]
 8015808:	60b9      	str	r1, [r7, #8]
 801580a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801580c:	68bb      	ldr	r3, [r7, #8]
 801580e:	f003 031f 	and.w	r3, r3, #31
 8015812:	2201      	movs	r2, #1
 8015814:	fa02 f303 	lsl.w	r3, r2, r3
 8015818:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	6a1a      	ldr	r2, [r3, #32]
 801581e:	697b      	ldr	r3, [r7, #20]
 8015820:	43db      	mvns	r3, r3
 8015822:	401a      	ands	r2, r3
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	6a1a      	ldr	r2, [r3, #32]
 801582c:	68bb      	ldr	r3, [r7, #8]
 801582e:	f003 031f 	and.w	r3, r3, #31
 8015832:	6879      	ldr	r1, [r7, #4]
 8015834:	fa01 f303 	lsl.w	r3, r1, r3
 8015838:	431a      	orrs	r2, r3
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	621a      	str	r2, [r3, #32]
}
 801583e:	bf00      	nop
 8015840:	371c      	adds	r7, #28
 8015842:	46bd      	mov	sp, r7
 8015844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015848:	4770      	bx	lr
	...

0801584c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801584c:	b480      	push	{r7}
 801584e:	b085      	sub	sp, #20
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
 8015854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801585c:	2b01      	cmp	r3, #1
 801585e:	d101      	bne.n	8015864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015860:	2302      	movs	r3, #2
 8015862:	e068      	b.n	8015936 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	2201      	movs	r2, #1
 8015868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	2202      	movs	r2, #2
 8015870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	685b      	ldr	r3, [r3, #4]
 801587a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	689b      	ldr	r3, [r3, #8]
 8015882:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	4a2e      	ldr	r2, [pc, #184]	; (8015944 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801588a:	4293      	cmp	r3, r2
 801588c:	d004      	beq.n	8015898 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	4a2d      	ldr	r2, [pc, #180]	; (8015948 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8015894:	4293      	cmp	r3, r2
 8015896:	d108      	bne.n	80158aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801589e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	685b      	ldr	r3, [r3, #4]
 80158a4:	68fa      	ldr	r2, [r7, #12]
 80158a6:	4313      	orrs	r3, r2
 80158a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80158b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80158b2:	683b      	ldr	r3, [r7, #0]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	68fa      	ldr	r2, [r7, #12]
 80158b8:	4313      	orrs	r3, r2
 80158ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	68fa      	ldr	r2, [r7, #12]
 80158c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	4a1e      	ldr	r2, [pc, #120]	; (8015944 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80158ca:	4293      	cmp	r3, r2
 80158cc:	d01d      	beq.n	801590a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80158d6:	d018      	beq.n	801590a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	4a1b      	ldr	r2, [pc, #108]	; (801594c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80158de:	4293      	cmp	r3, r2
 80158e0:	d013      	beq.n	801590a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	4a1a      	ldr	r2, [pc, #104]	; (8015950 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80158e8:	4293      	cmp	r3, r2
 80158ea:	d00e      	beq.n	801590a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	4a18      	ldr	r2, [pc, #96]	; (8015954 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80158f2:	4293      	cmp	r3, r2
 80158f4:	d009      	beq.n	801590a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	4a13      	ldr	r2, [pc, #76]	; (8015948 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80158fc:	4293      	cmp	r3, r2
 80158fe:	d004      	beq.n	801590a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	4a14      	ldr	r2, [pc, #80]	; (8015958 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8015906:	4293      	cmp	r3, r2
 8015908:	d10c      	bne.n	8015924 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801590a:	68bb      	ldr	r3, [r7, #8]
 801590c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015912:	683b      	ldr	r3, [r7, #0]
 8015914:	689b      	ldr	r3, [r3, #8]
 8015916:	68ba      	ldr	r2, [r7, #8]
 8015918:	4313      	orrs	r3, r2
 801591a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	68ba      	ldr	r2, [r7, #8]
 8015922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	2201      	movs	r2, #1
 8015928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	2200      	movs	r2, #0
 8015930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015934:	2300      	movs	r3, #0
}
 8015936:	4618      	mov	r0, r3
 8015938:	3714      	adds	r7, #20
 801593a:	46bd      	mov	sp, r7
 801593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015940:	4770      	bx	lr
 8015942:	bf00      	nop
 8015944:	40012c00 	.word	0x40012c00
 8015948:	40013400 	.word	0x40013400
 801594c:	40000400 	.word	0x40000400
 8015950:	40000800 	.word	0x40000800
 8015954:	40000c00 	.word	0x40000c00
 8015958:	40014000 	.word	0x40014000

0801595c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801595c:	b480      	push	{r7}
 801595e:	b085      	sub	sp, #20
 8015960:	af00      	add	r7, sp, #0
 8015962:	6078      	str	r0, [r7, #4]
 8015964:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8015966:	2300      	movs	r3, #0
 8015968:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015970:	2b01      	cmp	r3, #1
 8015972:	d101      	bne.n	8015978 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8015974:	2302      	movs	r3, #2
 8015976:	e087      	b.n	8015a88 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	2201      	movs	r2, #1
 801597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	68db      	ldr	r3, [r3, #12]
 801598a:	4313      	orrs	r3, r2
 801598c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015994:	683b      	ldr	r3, [r7, #0]
 8015996:	689b      	ldr	r3, [r3, #8]
 8015998:	4313      	orrs	r3, r2
 801599a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80159a2:	683b      	ldr	r3, [r7, #0]
 80159a4:	685b      	ldr	r3, [r3, #4]
 80159a6:	4313      	orrs	r3, r2
 80159a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80159b0:	683b      	ldr	r3, [r7, #0]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	4313      	orrs	r3, r2
 80159b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80159be:	683b      	ldr	r3, [r7, #0]
 80159c0:	691b      	ldr	r3, [r3, #16]
 80159c2:	4313      	orrs	r3, r2
 80159c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80159cc:	683b      	ldr	r3, [r7, #0]
 80159ce:	695b      	ldr	r3, [r3, #20]
 80159d0:	4313      	orrs	r3, r2
 80159d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80159da:	683b      	ldr	r3, [r7, #0]
 80159dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159de:	4313      	orrs	r3, r2
 80159e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80159e8:	683b      	ldr	r3, [r7, #0]
 80159ea:	699b      	ldr	r3, [r3, #24]
 80159ec:	041b      	lsls	r3, r3, #16
 80159ee:	4313      	orrs	r3, r2
 80159f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	4a27      	ldr	r2, [pc, #156]	; (8015a94 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80159f8:	4293      	cmp	r3, r2
 80159fa:	d004      	beq.n	8015a06 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	4a25      	ldr	r2, [pc, #148]	; (8015a98 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8015a02:	4293      	cmp	r3, r2
 8015a04:	d106      	bne.n	8015a14 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8015a0c:	683b      	ldr	r3, [r7, #0]
 8015a0e:	69db      	ldr	r3, [r3, #28]
 8015a10:	4313      	orrs	r3, r2
 8015a12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	4a1e      	ldr	r2, [pc, #120]	; (8015a94 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8015a1a:	4293      	cmp	r3, r2
 8015a1c:	d004      	beq.n	8015a28 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	4a1d      	ldr	r2, [pc, #116]	; (8015a98 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8015a24:	4293      	cmp	r3, r2
 8015a26:	d126      	bne.n	8015a76 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8015a2e:	683b      	ldr	r3, [r7, #0]
 8015a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a32:	051b      	lsls	r3, r3, #20
 8015a34:	4313      	orrs	r3, r2
 8015a36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8015a3e:	683b      	ldr	r3, [r7, #0]
 8015a40:	6a1b      	ldr	r3, [r3, #32]
 8015a42:	4313      	orrs	r3, r2
 8015a44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8015a4c:	683b      	ldr	r3, [r7, #0]
 8015a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a50:	4313      	orrs	r3, r2
 8015a52:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	4a0e      	ldr	r2, [pc, #56]	; (8015a94 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8015a5a:	4293      	cmp	r3, r2
 8015a5c:	d004      	beq.n	8015a68 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	4a0d      	ldr	r2, [pc, #52]	; (8015a98 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8015a64:	4293      	cmp	r3, r2
 8015a66:	d106      	bne.n	8015a76 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a72:	4313      	orrs	r3, r2
 8015a74:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	68fa      	ldr	r2, [r7, #12]
 8015a7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	2200      	movs	r2, #0
 8015a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015a86:	2300      	movs	r3, #0
}
 8015a88:	4618      	mov	r0, r3
 8015a8a:	3714      	adds	r7, #20
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a92:	4770      	bx	lr
 8015a94:	40012c00 	.word	0x40012c00
 8015a98:	40013400 	.word	0x40013400

08015a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015a9c:	b480      	push	{r7}
 8015a9e:	b083      	sub	sp, #12
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015aa4:	bf00      	nop
 8015aa6:	370c      	adds	r7, #12
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aae:	4770      	bx	lr

08015ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015ab0:	b480      	push	{r7}
 8015ab2:	b083      	sub	sp, #12
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015ab8:	bf00      	nop
 8015aba:	370c      	adds	r7, #12
 8015abc:	46bd      	mov	sp, r7
 8015abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac2:	4770      	bx	lr

08015ac4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8015ac4:	b480      	push	{r7}
 8015ac6:	b083      	sub	sp, #12
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8015acc:	bf00      	nop
 8015ace:	370c      	adds	r7, #12
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad6:	4770      	bx	lr

08015ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b082      	sub	sp, #8
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d101      	bne.n	8015aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015ae6:	2301      	movs	r3, #1
 8015ae8:	e042      	b.n	8015b70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d106      	bne.n	8015b02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	2200      	movs	r2, #0
 8015af8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015afc:	6878      	ldr	r0, [r7, #4]
 8015afe:	f7f8 ffc1 	bl	800ea84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	2224      	movs	r2, #36	; 0x24
 8015b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	681a      	ldr	r2, [r3, #0]
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	f022 0201 	bic.w	r2, r2, #1
 8015b18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	f000 fbbc 	bl	8016298 <UART_SetConfig>
 8015b20:	4603      	mov	r3, r0
 8015b22:	2b01      	cmp	r3, #1
 8015b24:	d101      	bne.n	8015b2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8015b26:	2301      	movs	r3, #1
 8015b28:	e022      	b.n	8015b70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d002      	beq.n	8015b38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8015b32:	6878      	ldr	r0, [r7, #4]
 8015b34:	f000 feb0 	bl	8016898 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	685a      	ldr	r2, [r3, #4]
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015b46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	689a      	ldr	r2, [r3, #8]
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015b56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	681a      	ldr	r2, [r3, #0]
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	f042 0201 	orr.w	r2, r2, #1
 8015b66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015b68:	6878      	ldr	r0, [r7, #4]
 8015b6a:	f000 ff37 	bl	80169dc <UART_CheckIdleState>
 8015b6e:	4603      	mov	r3, r0
}
 8015b70:	4618      	mov	r0, r3
 8015b72:	3708      	adds	r7, #8
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bd80      	pop	{r7, pc}

08015b78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b08a      	sub	sp, #40	; 0x28
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	60f8      	str	r0, [r7, #12]
 8015b80:	60b9      	str	r1, [r7, #8]
 8015b82:	4613      	mov	r3, r2
 8015b84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b8c:	2b20      	cmp	r3, #32
 8015b8e:	d137      	bne.n	8015c00 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8015b90:	68bb      	ldr	r3, [r7, #8]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d002      	beq.n	8015b9c <HAL_UART_Receive_IT+0x24>
 8015b96:	88fb      	ldrh	r3, [r7, #6]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d101      	bne.n	8015ba0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8015b9c:	2301      	movs	r3, #1
 8015b9e:	e030      	b.n	8015c02 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	4a18      	ldr	r2, [pc, #96]	; (8015c0c <HAL_UART_Receive_IT+0x94>)
 8015bac:	4293      	cmp	r3, r2
 8015bae:	d01f      	beq.n	8015bf0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	685b      	ldr	r3, [r3, #4]
 8015bb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d018      	beq.n	8015bf0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bc4:	697b      	ldr	r3, [r7, #20]
 8015bc6:	e853 3f00 	ldrex	r3, [r3]
 8015bca:	613b      	str	r3, [r7, #16]
   return(result);
 8015bcc:	693b      	ldr	r3, [r7, #16]
 8015bce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	461a      	mov	r2, r3
 8015bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bdc:	623b      	str	r3, [r7, #32]
 8015bde:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015be0:	69f9      	ldr	r1, [r7, #28]
 8015be2:	6a3a      	ldr	r2, [r7, #32]
 8015be4:	e841 2300 	strex	r3, r2, [r1]
 8015be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8015bea:	69bb      	ldr	r3, [r7, #24]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d1e6      	bne.n	8015bbe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8015bf0:	88fb      	ldrh	r3, [r7, #6]
 8015bf2:	461a      	mov	r2, r3
 8015bf4:	68b9      	ldr	r1, [r7, #8]
 8015bf6:	68f8      	ldr	r0, [r7, #12]
 8015bf8:	f001 f802 	bl	8016c00 <UART_Start_Receive_IT>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	e000      	b.n	8015c02 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8015c00:	2302      	movs	r3, #2
  }
}
 8015c02:	4618      	mov	r0, r3
 8015c04:	3728      	adds	r7, #40	; 0x28
 8015c06:	46bd      	mov	sp, r7
 8015c08:	bd80      	pop	{r7, pc}
 8015c0a:	bf00      	nop
 8015c0c:	40008000 	.word	0x40008000

08015c10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b0ba      	sub	sp, #232	; 0xe8
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	69db      	ldr	r3, [r3, #28]
 8015c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	689b      	ldr	r3, [r3, #8]
 8015c32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8015c36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8015c3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8015c3e:	4013      	ands	r3, r2
 8015c40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8015c44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d11b      	bne.n	8015c84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c50:	f003 0320 	and.w	r3, r3, #32
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d015      	beq.n	8015c84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015c5c:	f003 0320 	and.w	r3, r3, #32
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d105      	bne.n	8015c70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d009      	beq.n	8015c84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	f000 82e3 	beq.w	8016240 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015c7e:	6878      	ldr	r0, [r7, #4]
 8015c80:	4798      	blx	r3
      }
      return;
 8015c82:	e2dd      	b.n	8016240 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8015c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	f000 8123 	beq.w	8015ed4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8015c8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8015c92:	4b8d      	ldr	r3, [pc, #564]	; (8015ec8 <HAL_UART_IRQHandler+0x2b8>)
 8015c94:	4013      	ands	r3, r2
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d106      	bne.n	8015ca8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8015c9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8015c9e:	4b8b      	ldr	r3, [pc, #556]	; (8015ecc <HAL_UART_IRQHandler+0x2bc>)
 8015ca0:	4013      	ands	r3, r2
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	f000 8116 	beq.w	8015ed4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015cac:	f003 0301 	and.w	r3, r3, #1
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d011      	beq.n	8015cd8 <HAL_UART_IRQHandler+0xc8>
 8015cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d00b      	beq.n	8015cd8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	2201      	movs	r2, #1
 8015cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015cce:	f043 0201 	orr.w	r2, r3, #1
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015cdc:	f003 0302 	and.w	r3, r3, #2
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d011      	beq.n	8015d08 <HAL_UART_IRQHandler+0xf8>
 8015ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015ce8:	f003 0301 	and.w	r3, r3, #1
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d00b      	beq.n	8015d08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	2202      	movs	r2, #2
 8015cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015cfe:	f043 0204 	orr.w	r2, r3, #4
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015d0c:	f003 0304 	and.w	r3, r3, #4
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d011      	beq.n	8015d38 <HAL_UART_IRQHandler+0x128>
 8015d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015d18:	f003 0301 	and.w	r3, r3, #1
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d00b      	beq.n	8015d38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	2204      	movs	r2, #4
 8015d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015d2e:	f043 0202 	orr.w	r2, r3, #2
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8015d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015d3c:	f003 0308 	and.w	r3, r3, #8
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d017      	beq.n	8015d74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8015d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015d48:	f003 0320 	and.w	r3, r3, #32
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d105      	bne.n	8015d5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8015d50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8015d54:	4b5c      	ldr	r3, [pc, #368]	; (8015ec8 <HAL_UART_IRQHandler+0x2b8>)
 8015d56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d00b      	beq.n	8015d74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	2208      	movs	r2, #8
 8015d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015d6a:	f043 0208 	orr.w	r2, r3, #8
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8015d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d012      	beq.n	8015da6 <HAL_UART_IRQHandler+0x196>
 8015d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d00c      	beq.n	8015da6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015d94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015d9c:	f043 0220 	orr.w	r2, r3, #32
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	f000 8249 	beq.w	8016244 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015db6:	f003 0320 	and.w	r3, r3, #32
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d013      	beq.n	8015de6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015dc2:	f003 0320 	and.w	r3, r3, #32
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d105      	bne.n	8015dd6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d007      	beq.n	8015de6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d003      	beq.n	8015de6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015de2:	6878      	ldr	r0, [r7, #4]
 8015de4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015dec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	689b      	ldr	r3, [r3, #8]
 8015df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015dfa:	2b40      	cmp	r3, #64	; 0x40
 8015dfc:	d005      	beq.n	8015e0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8015dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015e02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d054      	beq.n	8015eb4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8015e0a:	6878      	ldr	r0, [r7, #4]
 8015e0c:	f001 f81a 	bl	8016e44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	689b      	ldr	r3, [r3, #8]
 8015e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e1a:	2b40      	cmp	r3, #64	; 0x40
 8015e1c:	d146      	bne.n	8015eac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	3308      	adds	r3, #8
 8015e24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015e2c:	e853 3f00 	ldrex	r3, [r3]
 8015e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8015e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	3308      	adds	r3, #8
 8015e46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015e4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8015e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8015e56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8015e5a:	e841 2300 	strex	r3, r2, [r1]
 8015e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8015e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d1d9      	bne.n	8015e1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d017      	beq.n	8015ea4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e7a:	4a15      	ldr	r2, [pc, #84]	; (8015ed0 <HAL_UART_IRQHandler+0x2c0>)
 8015e7c:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e84:	4618      	mov	r0, r3
 8015e86:	f7fb fae6 	bl	8011456 <HAL_DMA_Abort_IT>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d019      	beq.n	8015ec4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e98:	687a      	ldr	r2, [r7, #4]
 8015e9a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8015e9e:	4610      	mov	r0, r2
 8015ea0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015ea2:	e00f      	b.n	8015ec4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8015ea4:	6878      	ldr	r0, [r7, #4]
 8015ea6:	f000 f9e1 	bl	801626c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015eaa:	e00b      	b.n	8015ec4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015eac:	6878      	ldr	r0, [r7, #4]
 8015eae:	f000 f9dd 	bl	801626c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015eb2:	e007      	b.n	8015ec4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	f000 f9d9 	bl	801626c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8015ec2:	e1bf      	b.n	8016244 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015ec4:	bf00      	nop
    return;
 8015ec6:	e1bd      	b.n	8016244 <HAL_UART_IRQHandler+0x634>
 8015ec8:	10000001 	.word	0x10000001
 8015ecc:	04000120 	.word	0x04000120
 8015ed0:	08016f11 	.word	0x08016f11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ed8:	2b01      	cmp	r3, #1
 8015eda:	f040 8153 	bne.w	8016184 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8015ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015ee2:	f003 0310 	and.w	r3, r3, #16
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	f000 814c 	beq.w	8016184 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8015eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015ef0:	f003 0310 	and.w	r3, r3, #16
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	f000 8145 	beq.w	8016184 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	2210      	movs	r2, #16
 8015f00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	689b      	ldr	r3, [r3, #8]
 8015f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015f0c:	2b40      	cmp	r3, #64	; 0x40
 8015f0e:	f040 80bb 	bne.w	8016088 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	685b      	ldr	r3, [r3, #4]
 8015f1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8015f20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	f000 818f 	beq.w	8016248 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015f30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8015f34:	429a      	cmp	r2, r3
 8015f36:	f080 8187 	bcs.w	8016248 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8015f40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	f003 0320 	and.w	r3, r3, #32
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	f040 8087 	bne.w	8016066 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015f64:	e853 3f00 	ldrex	r3, [r3]
 8015f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8015f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015f74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	461a      	mov	r2, r3
 8015f7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015f82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015f86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8015f8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015f92:	e841 2300 	strex	r3, r2, [r1]
 8015f96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8015f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d1da      	bne.n	8015f58 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	3308      	adds	r3, #8
 8015fa8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015fac:	e853 3f00 	ldrex	r3, [r3]
 8015fb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8015fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015fb4:	f023 0301 	bic.w	r3, r3, #1
 8015fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	3308      	adds	r3, #8
 8015fc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8015fc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015fca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fcc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8015fce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015fd2:	e841 2300 	strex	r3, r2, [r1]
 8015fd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8015fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d1e1      	bne.n	8015fa2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	3308      	adds	r3, #8
 8015fe4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015fe8:	e853 3f00 	ldrex	r3, [r3]
 8015fec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8015fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	3308      	adds	r3, #8
 8015ffe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016002:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016004:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016006:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016008:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801600a:	e841 2300 	strex	r3, r2, [r1]
 801600e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016012:	2b00      	cmp	r3, #0
 8016014:	d1e3      	bne.n	8015fde <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	2220      	movs	r2, #32
 801601a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	2200      	movs	r2, #0
 8016022:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801602a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801602c:	e853 3f00 	ldrex	r3, [r3]
 8016030:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016034:	f023 0310 	bic.w	r3, r3, #16
 8016038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	461a      	mov	r2, r3
 8016042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016046:	65bb      	str	r3, [r7, #88]	; 0x58
 8016048:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801604a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801604c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801604e:	e841 2300 	strex	r3, r2, [r1]
 8016052:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016056:	2b00      	cmp	r3, #0
 8016058:	d1e4      	bne.n	8016024 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016060:	4618      	mov	r0, r3
 8016062:	f7fb f99c 	bl	801139e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	2202      	movs	r2, #2
 801606a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016078:	b29b      	uxth	r3, r3
 801607a:	1ad3      	subs	r3, r2, r3
 801607c:	b29b      	uxth	r3, r3
 801607e:	4619      	mov	r1, r3
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f000 f8fd 	bl	8016280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016086:	e0df      	b.n	8016248 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016094:	b29b      	uxth	r3, r3
 8016096:	1ad3      	subs	r3, r2, r3
 8016098:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80160a2:	b29b      	uxth	r3, r3
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	f000 80d1 	beq.w	801624c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80160aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	f000 80cc 	beq.w	801624c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160bc:	e853 3f00 	ldrex	r3, [r3]
 80160c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80160c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80160c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	461a      	mov	r2, r3
 80160d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80160d6:	647b      	str	r3, [r7, #68]	; 0x44
 80160d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80160dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80160de:	e841 2300 	strex	r3, r2, [r1]
 80160e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80160e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d1e4      	bne.n	80160b4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	3308      	adds	r3, #8
 80160f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160f4:	e853 3f00 	ldrex	r3, [r3]
 80160f8:	623b      	str	r3, [r7, #32]
   return(result);
 80160fa:	6a3b      	ldr	r3, [r7, #32]
 80160fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016100:	f023 0301 	bic.w	r3, r3, #1
 8016104:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	3308      	adds	r3, #8
 801610e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016112:	633a      	str	r2, [r7, #48]	; 0x30
 8016114:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801611a:	e841 2300 	strex	r3, r2, [r1]
 801611e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016122:	2b00      	cmp	r3, #0
 8016124:	d1e1      	bne.n	80160ea <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	2220      	movs	r2, #32
 801612a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	2200      	movs	r2, #0
 8016132:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	2200      	movs	r2, #0
 8016138:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016140:	693b      	ldr	r3, [r7, #16]
 8016142:	e853 3f00 	ldrex	r3, [r3]
 8016146:	60fb      	str	r3, [r7, #12]
   return(result);
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	f023 0310 	bic.w	r3, r3, #16
 801614e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	461a      	mov	r2, r3
 8016158:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801615c:	61fb      	str	r3, [r7, #28]
 801615e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016160:	69b9      	ldr	r1, [r7, #24]
 8016162:	69fa      	ldr	r2, [r7, #28]
 8016164:	e841 2300 	strex	r3, r2, [r1]
 8016168:	617b      	str	r3, [r7, #20]
   return(result);
 801616a:	697b      	ldr	r3, [r7, #20]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d1e4      	bne.n	801613a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	2202      	movs	r2, #2
 8016174:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8016176:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801617a:	4619      	mov	r1, r3
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f000 f87f 	bl	8016280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016182:	e063      	b.n	801624c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8016184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801618c:	2b00      	cmp	r3, #0
 801618e:	d00e      	beq.n	80161ae <HAL_UART_IRQHandler+0x59e>
 8016190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016198:	2b00      	cmp	r3, #0
 801619a:	d008      	beq.n	80161ae <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80161a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f001 fc10 	bl	80179cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80161ac:	e051      	b.n	8016252 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80161ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80161b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d014      	beq.n	80161e4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80161ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80161be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d105      	bne.n	80161d2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80161c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80161ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d008      	beq.n	80161e4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d03a      	beq.n	8016250 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80161de:	6878      	ldr	r0, [r7, #4]
 80161e0:	4798      	blx	r3
    }
    return;
 80161e2:	e035      	b.n	8016250 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80161e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80161e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d009      	beq.n	8016204 <HAL_UART_IRQHandler+0x5f4>
 80161f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80161f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d003      	beq.n	8016204 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80161fc:	6878      	ldr	r0, [r7, #4]
 80161fe:	f000 fe9d 	bl	8016f3c <UART_EndTransmit_IT>
    return;
 8016202:	e026      	b.n	8016252 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8016204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016208:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801620c:	2b00      	cmp	r3, #0
 801620e:	d009      	beq.n	8016224 <HAL_UART_IRQHandler+0x614>
 8016210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016214:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016218:	2b00      	cmp	r3, #0
 801621a:	d003      	beq.n	8016224 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801621c:	6878      	ldr	r0, [r7, #4]
 801621e:	f001 fbe9 	bl	80179f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016222:	e016      	b.n	8016252 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8016224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801622c:	2b00      	cmp	r3, #0
 801622e:	d010      	beq.n	8016252 <HAL_UART_IRQHandler+0x642>
 8016230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016234:	2b00      	cmp	r3, #0
 8016236:	da0c      	bge.n	8016252 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f001 fbd1 	bl	80179e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801623e:	e008      	b.n	8016252 <HAL_UART_IRQHandler+0x642>
      return;
 8016240:	bf00      	nop
 8016242:	e006      	b.n	8016252 <HAL_UART_IRQHandler+0x642>
    return;
 8016244:	bf00      	nop
 8016246:	e004      	b.n	8016252 <HAL_UART_IRQHandler+0x642>
      return;
 8016248:	bf00      	nop
 801624a:	e002      	b.n	8016252 <HAL_UART_IRQHandler+0x642>
      return;
 801624c:	bf00      	nop
 801624e:	e000      	b.n	8016252 <HAL_UART_IRQHandler+0x642>
    return;
 8016250:	bf00      	nop
  }
}
 8016252:	37e8      	adds	r7, #232	; 0xe8
 8016254:	46bd      	mov	sp, r7
 8016256:	bd80      	pop	{r7, pc}

08016258 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016258:	b480      	push	{r7}
 801625a:	b083      	sub	sp, #12
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8016260:	bf00      	nop
 8016262:	370c      	adds	r7, #12
 8016264:	46bd      	mov	sp, r7
 8016266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626a:	4770      	bx	lr

0801626c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801626c:	b480      	push	{r7}
 801626e:	b083      	sub	sp, #12
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8016274:	bf00      	nop
 8016276:	370c      	adds	r7, #12
 8016278:	46bd      	mov	sp, r7
 801627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627e:	4770      	bx	lr

08016280 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016280:	b480      	push	{r7}
 8016282:	b083      	sub	sp, #12
 8016284:	af00      	add	r7, sp, #0
 8016286:	6078      	str	r0, [r7, #4]
 8016288:	460b      	mov	r3, r1
 801628a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801628c:	bf00      	nop
 801628e:	370c      	adds	r7, #12
 8016290:	46bd      	mov	sp, r7
 8016292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016296:	4770      	bx	lr

08016298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801629c:	b08c      	sub	sp, #48	; 0x30
 801629e:	af00      	add	r7, sp, #0
 80162a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80162a2:	2300      	movs	r3, #0
 80162a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80162a8:	697b      	ldr	r3, [r7, #20]
 80162aa:	689a      	ldr	r2, [r3, #8]
 80162ac:	697b      	ldr	r3, [r7, #20]
 80162ae:	691b      	ldr	r3, [r3, #16]
 80162b0:	431a      	orrs	r2, r3
 80162b2:	697b      	ldr	r3, [r7, #20]
 80162b4:	695b      	ldr	r3, [r3, #20]
 80162b6:	431a      	orrs	r2, r3
 80162b8:	697b      	ldr	r3, [r7, #20]
 80162ba:	69db      	ldr	r3, [r3, #28]
 80162bc:	4313      	orrs	r3, r2
 80162be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80162c0:	697b      	ldr	r3, [r7, #20]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	681a      	ldr	r2, [r3, #0]
 80162c6:	4baa      	ldr	r3, [pc, #680]	; (8016570 <UART_SetConfig+0x2d8>)
 80162c8:	4013      	ands	r3, r2
 80162ca:	697a      	ldr	r2, [r7, #20]
 80162cc:	6812      	ldr	r2, [r2, #0]
 80162ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80162d0:	430b      	orrs	r3, r1
 80162d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80162d4:	697b      	ldr	r3, [r7, #20]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	685b      	ldr	r3, [r3, #4]
 80162da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80162de:	697b      	ldr	r3, [r7, #20]
 80162e0:	68da      	ldr	r2, [r3, #12]
 80162e2:	697b      	ldr	r3, [r7, #20]
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	430a      	orrs	r2, r1
 80162e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80162ea:	697b      	ldr	r3, [r7, #20]
 80162ec:	699b      	ldr	r3, [r3, #24]
 80162ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80162f0:	697b      	ldr	r3, [r7, #20]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	4a9f      	ldr	r2, [pc, #636]	; (8016574 <UART_SetConfig+0x2dc>)
 80162f6:	4293      	cmp	r3, r2
 80162f8:	d004      	beq.n	8016304 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80162fa:	697b      	ldr	r3, [r7, #20]
 80162fc:	6a1b      	ldr	r3, [r3, #32]
 80162fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016300:	4313      	orrs	r3, r2
 8016302:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016304:	697b      	ldr	r3, [r7, #20]
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	689b      	ldr	r3, [r3, #8]
 801630a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801630e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8016312:	697a      	ldr	r2, [r7, #20]
 8016314:	6812      	ldr	r2, [r2, #0]
 8016316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016318:	430b      	orrs	r3, r1
 801631a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801631c:	697b      	ldr	r3, [r7, #20]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016322:	f023 010f 	bic.w	r1, r3, #15
 8016326:	697b      	ldr	r3, [r7, #20]
 8016328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801632a:	697b      	ldr	r3, [r7, #20]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	430a      	orrs	r2, r1
 8016330:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016332:	697b      	ldr	r3, [r7, #20]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	4a90      	ldr	r2, [pc, #576]	; (8016578 <UART_SetConfig+0x2e0>)
 8016338:	4293      	cmp	r3, r2
 801633a:	d125      	bne.n	8016388 <UART_SetConfig+0xf0>
 801633c:	4b8f      	ldr	r3, [pc, #572]	; (801657c <UART_SetConfig+0x2e4>)
 801633e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016342:	f003 0303 	and.w	r3, r3, #3
 8016346:	2b03      	cmp	r3, #3
 8016348:	d81a      	bhi.n	8016380 <UART_SetConfig+0xe8>
 801634a:	a201      	add	r2, pc, #4	; (adr r2, 8016350 <UART_SetConfig+0xb8>)
 801634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016350:	08016361 	.word	0x08016361
 8016354:	08016371 	.word	0x08016371
 8016358:	08016369 	.word	0x08016369
 801635c:	08016379 	.word	0x08016379
 8016360:	2301      	movs	r3, #1
 8016362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016366:	e116      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016368:	2302      	movs	r3, #2
 801636a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801636e:	e112      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016370:	2304      	movs	r3, #4
 8016372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016376:	e10e      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016378:	2308      	movs	r3, #8
 801637a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801637e:	e10a      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016380:	2310      	movs	r3, #16
 8016382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016386:	e106      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016388:	697b      	ldr	r3, [r7, #20]
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	4a7c      	ldr	r2, [pc, #496]	; (8016580 <UART_SetConfig+0x2e8>)
 801638e:	4293      	cmp	r3, r2
 8016390:	d138      	bne.n	8016404 <UART_SetConfig+0x16c>
 8016392:	4b7a      	ldr	r3, [pc, #488]	; (801657c <UART_SetConfig+0x2e4>)
 8016394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016398:	f003 030c 	and.w	r3, r3, #12
 801639c:	2b0c      	cmp	r3, #12
 801639e:	d82d      	bhi.n	80163fc <UART_SetConfig+0x164>
 80163a0:	a201      	add	r2, pc, #4	; (adr r2, 80163a8 <UART_SetConfig+0x110>)
 80163a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163a6:	bf00      	nop
 80163a8:	080163dd 	.word	0x080163dd
 80163ac:	080163fd 	.word	0x080163fd
 80163b0:	080163fd 	.word	0x080163fd
 80163b4:	080163fd 	.word	0x080163fd
 80163b8:	080163ed 	.word	0x080163ed
 80163bc:	080163fd 	.word	0x080163fd
 80163c0:	080163fd 	.word	0x080163fd
 80163c4:	080163fd 	.word	0x080163fd
 80163c8:	080163e5 	.word	0x080163e5
 80163cc:	080163fd 	.word	0x080163fd
 80163d0:	080163fd 	.word	0x080163fd
 80163d4:	080163fd 	.word	0x080163fd
 80163d8:	080163f5 	.word	0x080163f5
 80163dc:	2300      	movs	r3, #0
 80163de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80163e2:	e0d8      	b.n	8016596 <UART_SetConfig+0x2fe>
 80163e4:	2302      	movs	r3, #2
 80163e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80163ea:	e0d4      	b.n	8016596 <UART_SetConfig+0x2fe>
 80163ec:	2304      	movs	r3, #4
 80163ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80163f2:	e0d0      	b.n	8016596 <UART_SetConfig+0x2fe>
 80163f4:	2308      	movs	r3, #8
 80163f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80163fa:	e0cc      	b.n	8016596 <UART_SetConfig+0x2fe>
 80163fc:	2310      	movs	r3, #16
 80163fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016402:	e0c8      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016404:	697b      	ldr	r3, [r7, #20]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	4a5e      	ldr	r2, [pc, #376]	; (8016584 <UART_SetConfig+0x2ec>)
 801640a:	4293      	cmp	r3, r2
 801640c:	d125      	bne.n	801645a <UART_SetConfig+0x1c2>
 801640e:	4b5b      	ldr	r3, [pc, #364]	; (801657c <UART_SetConfig+0x2e4>)
 8016410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016414:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8016418:	2b30      	cmp	r3, #48	; 0x30
 801641a:	d016      	beq.n	801644a <UART_SetConfig+0x1b2>
 801641c:	2b30      	cmp	r3, #48	; 0x30
 801641e:	d818      	bhi.n	8016452 <UART_SetConfig+0x1ba>
 8016420:	2b20      	cmp	r3, #32
 8016422:	d00a      	beq.n	801643a <UART_SetConfig+0x1a2>
 8016424:	2b20      	cmp	r3, #32
 8016426:	d814      	bhi.n	8016452 <UART_SetConfig+0x1ba>
 8016428:	2b00      	cmp	r3, #0
 801642a:	d002      	beq.n	8016432 <UART_SetConfig+0x19a>
 801642c:	2b10      	cmp	r3, #16
 801642e:	d008      	beq.n	8016442 <UART_SetConfig+0x1aa>
 8016430:	e00f      	b.n	8016452 <UART_SetConfig+0x1ba>
 8016432:	2300      	movs	r3, #0
 8016434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016438:	e0ad      	b.n	8016596 <UART_SetConfig+0x2fe>
 801643a:	2302      	movs	r3, #2
 801643c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016440:	e0a9      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016442:	2304      	movs	r3, #4
 8016444:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016448:	e0a5      	b.n	8016596 <UART_SetConfig+0x2fe>
 801644a:	2308      	movs	r3, #8
 801644c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016450:	e0a1      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016452:	2310      	movs	r3, #16
 8016454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016458:	e09d      	b.n	8016596 <UART_SetConfig+0x2fe>
 801645a:	697b      	ldr	r3, [r7, #20]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	4a4a      	ldr	r2, [pc, #296]	; (8016588 <UART_SetConfig+0x2f0>)
 8016460:	4293      	cmp	r3, r2
 8016462:	d125      	bne.n	80164b0 <UART_SetConfig+0x218>
 8016464:	4b45      	ldr	r3, [pc, #276]	; (801657c <UART_SetConfig+0x2e4>)
 8016466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801646a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801646e:	2bc0      	cmp	r3, #192	; 0xc0
 8016470:	d016      	beq.n	80164a0 <UART_SetConfig+0x208>
 8016472:	2bc0      	cmp	r3, #192	; 0xc0
 8016474:	d818      	bhi.n	80164a8 <UART_SetConfig+0x210>
 8016476:	2b80      	cmp	r3, #128	; 0x80
 8016478:	d00a      	beq.n	8016490 <UART_SetConfig+0x1f8>
 801647a:	2b80      	cmp	r3, #128	; 0x80
 801647c:	d814      	bhi.n	80164a8 <UART_SetConfig+0x210>
 801647e:	2b00      	cmp	r3, #0
 8016480:	d002      	beq.n	8016488 <UART_SetConfig+0x1f0>
 8016482:	2b40      	cmp	r3, #64	; 0x40
 8016484:	d008      	beq.n	8016498 <UART_SetConfig+0x200>
 8016486:	e00f      	b.n	80164a8 <UART_SetConfig+0x210>
 8016488:	2300      	movs	r3, #0
 801648a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801648e:	e082      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016490:	2302      	movs	r3, #2
 8016492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016496:	e07e      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016498:	2304      	movs	r3, #4
 801649a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801649e:	e07a      	b.n	8016596 <UART_SetConfig+0x2fe>
 80164a0:	2308      	movs	r3, #8
 80164a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80164a6:	e076      	b.n	8016596 <UART_SetConfig+0x2fe>
 80164a8:	2310      	movs	r3, #16
 80164aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80164ae:	e072      	b.n	8016596 <UART_SetConfig+0x2fe>
 80164b0:	697b      	ldr	r3, [r7, #20]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	4a35      	ldr	r2, [pc, #212]	; (801658c <UART_SetConfig+0x2f4>)
 80164b6:	4293      	cmp	r3, r2
 80164b8:	d12a      	bne.n	8016510 <UART_SetConfig+0x278>
 80164ba:	4b30      	ldr	r3, [pc, #192]	; (801657c <UART_SetConfig+0x2e4>)
 80164bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80164c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80164c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80164c8:	d01a      	beq.n	8016500 <UART_SetConfig+0x268>
 80164ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80164ce:	d81b      	bhi.n	8016508 <UART_SetConfig+0x270>
 80164d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80164d4:	d00c      	beq.n	80164f0 <UART_SetConfig+0x258>
 80164d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80164da:	d815      	bhi.n	8016508 <UART_SetConfig+0x270>
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d003      	beq.n	80164e8 <UART_SetConfig+0x250>
 80164e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80164e4:	d008      	beq.n	80164f8 <UART_SetConfig+0x260>
 80164e6:	e00f      	b.n	8016508 <UART_SetConfig+0x270>
 80164e8:	2300      	movs	r3, #0
 80164ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80164ee:	e052      	b.n	8016596 <UART_SetConfig+0x2fe>
 80164f0:	2302      	movs	r3, #2
 80164f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80164f6:	e04e      	b.n	8016596 <UART_SetConfig+0x2fe>
 80164f8:	2304      	movs	r3, #4
 80164fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80164fe:	e04a      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016500:	2308      	movs	r3, #8
 8016502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016506:	e046      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016508:	2310      	movs	r3, #16
 801650a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801650e:	e042      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016510:	697b      	ldr	r3, [r7, #20]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	4a17      	ldr	r2, [pc, #92]	; (8016574 <UART_SetConfig+0x2dc>)
 8016516:	4293      	cmp	r3, r2
 8016518:	d13a      	bne.n	8016590 <UART_SetConfig+0x2f8>
 801651a:	4b18      	ldr	r3, [pc, #96]	; (801657c <UART_SetConfig+0x2e4>)
 801651c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016520:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8016524:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8016528:	d01a      	beq.n	8016560 <UART_SetConfig+0x2c8>
 801652a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801652e:	d81b      	bhi.n	8016568 <UART_SetConfig+0x2d0>
 8016530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016534:	d00c      	beq.n	8016550 <UART_SetConfig+0x2b8>
 8016536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801653a:	d815      	bhi.n	8016568 <UART_SetConfig+0x2d0>
 801653c:	2b00      	cmp	r3, #0
 801653e:	d003      	beq.n	8016548 <UART_SetConfig+0x2b0>
 8016540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016544:	d008      	beq.n	8016558 <UART_SetConfig+0x2c0>
 8016546:	e00f      	b.n	8016568 <UART_SetConfig+0x2d0>
 8016548:	2300      	movs	r3, #0
 801654a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801654e:	e022      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016550:	2302      	movs	r3, #2
 8016552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016556:	e01e      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016558:	2304      	movs	r3, #4
 801655a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801655e:	e01a      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016560:	2308      	movs	r3, #8
 8016562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016566:	e016      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016568:	2310      	movs	r3, #16
 801656a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801656e:	e012      	b.n	8016596 <UART_SetConfig+0x2fe>
 8016570:	cfff69f3 	.word	0xcfff69f3
 8016574:	40008000 	.word	0x40008000
 8016578:	40013800 	.word	0x40013800
 801657c:	40021000 	.word	0x40021000
 8016580:	40004400 	.word	0x40004400
 8016584:	40004800 	.word	0x40004800
 8016588:	40004c00 	.word	0x40004c00
 801658c:	40005000 	.word	0x40005000
 8016590:	2310      	movs	r3, #16
 8016592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016596:	697b      	ldr	r3, [r7, #20]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	4ab0      	ldr	r2, [pc, #704]	; (801685c <UART_SetConfig+0x5c4>)
 801659c:	4293      	cmp	r3, r2
 801659e:	f040 809b 	bne.w	80166d8 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80165a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80165a6:	2b08      	cmp	r3, #8
 80165a8:	d827      	bhi.n	80165fa <UART_SetConfig+0x362>
 80165aa:	a201      	add	r2, pc, #4	; (adr r2, 80165b0 <UART_SetConfig+0x318>)
 80165ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165b0:	080165d5 	.word	0x080165d5
 80165b4:	080165dd 	.word	0x080165dd
 80165b8:	080165e5 	.word	0x080165e5
 80165bc:	080165fb 	.word	0x080165fb
 80165c0:	080165eb 	.word	0x080165eb
 80165c4:	080165fb 	.word	0x080165fb
 80165c8:	080165fb 	.word	0x080165fb
 80165cc:	080165fb 	.word	0x080165fb
 80165d0:	080165f3 	.word	0x080165f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80165d4:	f7fc fcce 	bl	8012f74 <HAL_RCC_GetPCLK1Freq>
 80165d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80165da:	e014      	b.n	8016606 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80165dc:	f7fc fcde 	bl	8012f9c <HAL_RCC_GetPCLK2Freq>
 80165e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80165e2:	e010      	b.n	8016606 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80165e4:	4b9e      	ldr	r3, [pc, #632]	; (8016860 <UART_SetConfig+0x5c8>)
 80165e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80165e8:	e00d      	b.n	8016606 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80165ea:	f7fc fc11 	bl	8012e10 <HAL_RCC_GetSysClockFreq>
 80165ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80165f0:	e009      	b.n	8016606 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80165f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80165f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80165f8:	e005      	b.n	8016606 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80165fa:	2300      	movs	r3, #0
 80165fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80165fe:	2301      	movs	r3, #1
 8016600:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8016604:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8016606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016608:	2b00      	cmp	r3, #0
 801660a:	f000 8130 	beq.w	801686e <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801660e:	697b      	ldr	r3, [r7, #20]
 8016610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016612:	4a94      	ldr	r2, [pc, #592]	; (8016864 <UART_SetConfig+0x5cc>)
 8016614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016618:	461a      	mov	r2, r3
 801661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801661c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016620:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016622:	697b      	ldr	r3, [r7, #20]
 8016624:	685a      	ldr	r2, [r3, #4]
 8016626:	4613      	mov	r3, r2
 8016628:	005b      	lsls	r3, r3, #1
 801662a:	4413      	add	r3, r2
 801662c:	69ba      	ldr	r2, [r7, #24]
 801662e:	429a      	cmp	r2, r3
 8016630:	d305      	bcc.n	801663e <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8016632:	697b      	ldr	r3, [r7, #20]
 8016634:	685b      	ldr	r3, [r3, #4]
 8016636:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016638:	69ba      	ldr	r2, [r7, #24]
 801663a:	429a      	cmp	r2, r3
 801663c:	d903      	bls.n	8016646 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 801663e:	2301      	movs	r3, #1
 8016640:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8016644:	e113      	b.n	801686e <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016648:	2200      	movs	r2, #0
 801664a:	60bb      	str	r3, [r7, #8]
 801664c:	60fa      	str	r2, [r7, #12]
 801664e:	697b      	ldr	r3, [r7, #20]
 8016650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016652:	4a84      	ldr	r2, [pc, #528]	; (8016864 <UART_SetConfig+0x5cc>)
 8016654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016658:	b29b      	uxth	r3, r3
 801665a:	2200      	movs	r2, #0
 801665c:	603b      	str	r3, [r7, #0]
 801665e:	607a      	str	r2, [r7, #4]
 8016660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016664:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016668:	f7ea fad8 	bl	8000c1c <__aeabi_uldivmod>
 801666c:	4602      	mov	r2, r0
 801666e:	460b      	mov	r3, r1
 8016670:	4610      	mov	r0, r2
 8016672:	4619      	mov	r1, r3
 8016674:	f04f 0200 	mov.w	r2, #0
 8016678:	f04f 0300 	mov.w	r3, #0
 801667c:	020b      	lsls	r3, r1, #8
 801667e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8016682:	0202      	lsls	r2, r0, #8
 8016684:	6979      	ldr	r1, [r7, #20]
 8016686:	6849      	ldr	r1, [r1, #4]
 8016688:	0849      	lsrs	r1, r1, #1
 801668a:	2000      	movs	r0, #0
 801668c:	460c      	mov	r4, r1
 801668e:	4605      	mov	r5, r0
 8016690:	eb12 0804 	adds.w	r8, r2, r4
 8016694:	eb43 0905 	adc.w	r9, r3, r5
 8016698:	697b      	ldr	r3, [r7, #20]
 801669a:	685b      	ldr	r3, [r3, #4]
 801669c:	2200      	movs	r2, #0
 801669e:	469a      	mov	sl, r3
 80166a0:	4693      	mov	fp, r2
 80166a2:	4652      	mov	r2, sl
 80166a4:	465b      	mov	r3, fp
 80166a6:	4640      	mov	r0, r8
 80166a8:	4649      	mov	r1, r9
 80166aa:	f7ea fab7 	bl	8000c1c <__aeabi_uldivmod>
 80166ae:	4602      	mov	r2, r0
 80166b0:	460b      	mov	r3, r1
 80166b2:	4613      	mov	r3, r2
 80166b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80166b6:	6a3b      	ldr	r3, [r7, #32]
 80166b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80166bc:	d308      	bcc.n	80166d0 <UART_SetConfig+0x438>
 80166be:	6a3b      	ldr	r3, [r7, #32]
 80166c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80166c4:	d204      	bcs.n	80166d0 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80166c6:	697b      	ldr	r3, [r7, #20]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	6a3a      	ldr	r2, [r7, #32]
 80166cc:	60da      	str	r2, [r3, #12]
 80166ce:	e0ce      	b.n	801686e <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80166d0:	2301      	movs	r3, #1
 80166d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80166d6:	e0ca      	b.n	801686e <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80166d8:	697b      	ldr	r3, [r7, #20]
 80166da:	69db      	ldr	r3, [r3, #28]
 80166dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80166e0:	d166      	bne.n	80167b0 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80166e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80166e6:	2b08      	cmp	r3, #8
 80166e8:	d827      	bhi.n	801673a <UART_SetConfig+0x4a2>
 80166ea:	a201      	add	r2, pc, #4	; (adr r2, 80166f0 <UART_SetConfig+0x458>)
 80166ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166f0:	08016715 	.word	0x08016715
 80166f4:	0801671d 	.word	0x0801671d
 80166f8:	08016725 	.word	0x08016725
 80166fc:	0801673b 	.word	0x0801673b
 8016700:	0801672b 	.word	0x0801672b
 8016704:	0801673b 	.word	0x0801673b
 8016708:	0801673b 	.word	0x0801673b
 801670c:	0801673b 	.word	0x0801673b
 8016710:	08016733 	.word	0x08016733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016714:	f7fc fc2e 	bl	8012f74 <HAL_RCC_GetPCLK1Freq>
 8016718:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801671a:	e014      	b.n	8016746 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801671c:	f7fc fc3e 	bl	8012f9c <HAL_RCC_GetPCLK2Freq>
 8016720:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016722:	e010      	b.n	8016746 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016724:	4b4e      	ldr	r3, [pc, #312]	; (8016860 <UART_SetConfig+0x5c8>)
 8016726:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016728:	e00d      	b.n	8016746 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801672a:	f7fc fb71 	bl	8012e10 <HAL_RCC_GetSysClockFreq>
 801672e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016730:	e009      	b.n	8016746 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016736:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016738:	e005      	b.n	8016746 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 801673a:	2300      	movs	r3, #0
 801673c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801673e:	2301      	movs	r3, #1
 8016740:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8016744:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016748:	2b00      	cmp	r3, #0
 801674a:	f000 8090 	beq.w	801686e <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801674e:	697b      	ldr	r3, [r7, #20]
 8016750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016752:	4a44      	ldr	r2, [pc, #272]	; (8016864 <UART_SetConfig+0x5cc>)
 8016754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016758:	461a      	mov	r2, r3
 801675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801675c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016760:	005a      	lsls	r2, r3, #1
 8016762:	697b      	ldr	r3, [r7, #20]
 8016764:	685b      	ldr	r3, [r3, #4]
 8016766:	085b      	lsrs	r3, r3, #1
 8016768:	441a      	add	r2, r3
 801676a:	697b      	ldr	r3, [r7, #20]
 801676c:	685b      	ldr	r3, [r3, #4]
 801676e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016772:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016774:	6a3b      	ldr	r3, [r7, #32]
 8016776:	2b0f      	cmp	r3, #15
 8016778:	d916      	bls.n	80167a8 <UART_SetConfig+0x510>
 801677a:	6a3b      	ldr	r3, [r7, #32]
 801677c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016780:	d212      	bcs.n	80167a8 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016782:	6a3b      	ldr	r3, [r7, #32]
 8016784:	b29b      	uxth	r3, r3
 8016786:	f023 030f 	bic.w	r3, r3, #15
 801678a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801678c:	6a3b      	ldr	r3, [r7, #32]
 801678e:	085b      	lsrs	r3, r3, #1
 8016790:	b29b      	uxth	r3, r3
 8016792:	f003 0307 	and.w	r3, r3, #7
 8016796:	b29a      	uxth	r2, r3
 8016798:	8bfb      	ldrh	r3, [r7, #30]
 801679a:	4313      	orrs	r3, r2
 801679c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801679e:	697b      	ldr	r3, [r7, #20]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	8bfa      	ldrh	r2, [r7, #30]
 80167a4:	60da      	str	r2, [r3, #12]
 80167a6:	e062      	b.n	801686e <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80167a8:	2301      	movs	r3, #1
 80167aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80167ae:	e05e      	b.n	801686e <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80167b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80167b4:	2b08      	cmp	r3, #8
 80167b6:	d828      	bhi.n	801680a <UART_SetConfig+0x572>
 80167b8:	a201      	add	r2, pc, #4	; (adr r2, 80167c0 <UART_SetConfig+0x528>)
 80167ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167be:	bf00      	nop
 80167c0:	080167e5 	.word	0x080167e5
 80167c4:	080167ed 	.word	0x080167ed
 80167c8:	080167f5 	.word	0x080167f5
 80167cc:	0801680b 	.word	0x0801680b
 80167d0:	080167fb 	.word	0x080167fb
 80167d4:	0801680b 	.word	0x0801680b
 80167d8:	0801680b 	.word	0x0801680b
 80167dc:	0801680b 	.word	0x0801680b
 80167e0:	08016803 	.word	0x08016803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80167e4:	f7fc fbc6 	bl	8012f74 <HAL_RCC_GetPCLK1Freq>
 80167e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80167ea:	e014      	b.n	8016816 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80167ec:	f7fc fbd6 	bl	8012f9c <HAL_RCC_GetPCLK2Freq>
 80167f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80167f2:	e010      	b.n	8016816 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80167f4:	4b1a      	ldr	r3, [pc, #104]	; (8016860 <UART_SetConfig+0x5c8>)
 80167f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80167f8:	e00d      	b.n	8016816 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80167fa:	f7fc fb09 	bl	8012e10 <HAL_RCC_GetSysClockFreq>
 80167fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8016800:	e009      	b.n	8016816 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016806:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016808:	e005      	b.n	8016816 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 801680a:	2300      	movs	r3, #0
 801680c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801680e:	2301      	movs	r3, #1
 8016810:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8016814:	bf00      	nop
    }

    if (pclk != 0U)
 8016816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016818:	2b00      	cmp	r3, #0
 801681a:	d028      	beq.n	801686e <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801681c:	697b      	ldr	r3, [r7, #20]
 801681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016820:	4a10      	ldr	r2, [pc, #64]	; (8016864 <UART_SetConfig+0x5cc>)
 8016822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016826:	461a      	mov	r2, r3
 8016828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801682a:	fbb3 f2f2 	udiv	r2, r3, r2
 801682e:	697b      	ldr	r3, [r7, #20]
 8016830:	685b      	ldr	r3, [r3, #4]
 8016832:	085b      	lsrs	r3, r3, #1
 8016834:	441a      	add	r2, r3
 8016836:	697b      	ldr	r3, [r7, #20]
 8016838:	685b      	ldr	r3, [r3, #4]
 801683a:	fbb2 f3f3 	udiv	r3, r2, r3
 801683e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016840:	6a3b      	ldr	r3, [r7, #32]
 8016842:	2b0f      	cmp	r3, #15
 8016844:	d910      	bls.n	8016868 <UART_SetConfig+0x5d0>
 8016846:	6a3b      	ldr	r3, [r7, #32]
 8016848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801684c:	d20c      	bcs.n	8016868 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801684e:	6a3b      	ldr	r3, [r7, #32]
 8016850:	b29a      	uxth	r2, r3
 8016852:	697b      	ldr	r3, [r7, #20]
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	60da      	str	r2, [r3, #12]
 8016858:	e009      	b.n	801686e <UART_SetConfig+0x5d6>
 801685a:	bf00      	nop
 801685c:	40008000 	.word	0x40008000
 8016860:	00f42400 	.word	0x00f42400
 8016864:	0801e750 	.word	0x0801e750
      }
      else
      {
        ret = HAL_ERROR;
 8016868:	2301      	movs	r3, #1
 801686a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801686e:	697b      	ldr	r3, [r7, #20]
 8016870:	2201      	movs	r2, #1
 8016872:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8016876:	697b      	ldr	r3, [r7, #20]
 8016878:	2201      	movs	r2, #1
 801687a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801687e:	697b      	ldr	r3, [r7, #20]
 8016880:	2200      	movs	r2, #0
 8016882:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8016884:	697b      	ldr	r3, [r7, #20]
 8016886:	2200      	movs	r2, #0
 8016888:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801688a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801688e:	4618      	mov	r0, r3
 8016890:	3730      	adds	r7, #48	; 0x30
 8016892:	46bd      	mov	sp, r7
 8016894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08016898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016898:	b480      	push	{r7}
 801689a:	b083      	sub	sp, #12
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168a4:	f003 0301 	and.w	r3, r3, #1
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d00a      	beq.n	80168c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	685b      	ldr	r3, [r3, #4]
 80168b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	430a      	orrs	r2, r1
 80168c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168c6:	f003 0302 	and.w	r3, r3, #2
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d00a      	beq.n	80168e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	685b      	ldr	r3, [r3, #4]
 80168d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	430a      	orrs	r2, r1
 80168e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168e8:	f003 0304 	and.w	r3, r3, #4
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d00a      	beq.n	8016906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	685b      	ldr	r3, [r3, #4]
 80168f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	430a      	orrs	r2, r1
 8016904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801690a:	f003 0308 	and.w	r3, r3, #8
 801690e:	2b00      	cmp	r3, #0
 8016910:	d00a      	beq.n	8016928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	685b      	ldr	r3, [r3, #4]
 8016918:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	430a      	orrs	r2, r1
 8016926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801692c:	f003 0310 	and.w	r3, r3, #16
 8016930:	2b00      	cmp	r3, #0
 8016932:	d00a      	beq.n	801694a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	689b      	ldr	r3, [r3, #8]
 801693a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	430a      	orrs	r2, r1
 8016948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801694e:	f003 0320 	and.w	r3, r3, #32
 8016952:	2b00      	cmp	r3, #0
 8016954:	d00a      	beq.n	801696c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	689b      	ldr	r3, [r3, #8]
 801695c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	430a      	orrs	r2, r1
 801696a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016974:	2b00      	cmp	r3, #0
 8016976:	d01a      	beq.n	80169ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	685b      	ldr	r3, [r3, #4]
 801697e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	430a      	orrs	r2, r1
 801698c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016996:	d10a      	bne.n	80169ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	685b      	ldr	r3, [r3, #4]
 801699e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	430a      	orrs	r2, r1
 80169ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d00a      	beq.n	80169d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	685b      	ldr	r3, [r3, #4]
 80169c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	430a      	orrs	r2, r1
 80169ce:	605a      	str	r2, [r3, #4]
  }
}
 80169d0:	bf00      	nop
 80169d2:	370c      	adds	r7, #12
 80169d4:	46bd      	mov	sp, r7
 80169d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169da:	4770      	bx	lr

080169dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b098      	sub	sp, #96	; 0x60
 80169e0:	af02      	add	r7, sp, #8
 80169e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	2200      	movs	r2, #0
 80169e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80169ec:	f7f8 fe86 	bl	800f6fc <HAL_GetTick>
 80169f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	f003 0308 	and.w	r3, r3, #8
 80169fc:	2b08      	cmp	r3, #8
 80169fe:	d12f      	bne.n	8016a60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016a04:	9300      	str	r3, [sp, #0]
 8016a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016a08:	2200      	movs	r2, #0
 8016a0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016a0e:	6878      	ldr	r0, [r7, #4]
 8016a10:	f000 f88e 	bl	8016b30 <UART_WaitOnFlagUntilTimeout>
 8016a14:	4603      	mov	r3, r0
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d022      	beq.n	8016a60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a22:	e853 3f00 	ldrex	r3, [r3]
 8016a26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016a2e:	653b      	str	r3, [r7, #80]	; 0x50
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	461a      	mov	r2, r3
 8016a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a38:	647b      	str	r3, [r7, #68]	; 0x44
 8016a3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016a40:	e841 2300 	strex	r3, r2, [r1]
 8016a44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d1e6      	bne.n	8016a1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	2220      	movs	r2, #32
 8016a50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	2200      	movs	r2, #0
 8016a58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016a5c:	2303      	movs	r3, #3
 8016a5e:	e063      	b.n	8016b28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	f003 0304 	and.w	r3, r3, #4
 8016a6a:	2b04      	cmp	r3, #4
 8016a6c:	d149      	bne.n	8016b02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016a6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016a72:	9300      	str	r3, [sp, #0]
 8016a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016a76:	2200      	movs	r2, #0
 8016a78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8016a7c:	6878      	ldr	r0, [r7, #4]
 8016a7e:	f000 f857 	bl	8016b30 <UART_WaitOnFlagUntilTimeout>
 8016a82:	4603      	mov	r3, r0
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d03c      	beq.n	8016b02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a90:	e853 3f00 	ldrex	r3, [r3]
 8016a94:	623b      	str	r3, [r7, #32]
   return(result);
 8016a96:	6a3b      	ldr	r3, [r7, #32]
 8016a98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	461a      	mov	r2, r3
 8016aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016aa6:	633b      	str	r3, [r7, #48]	; 0x30
 8016aa8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016aae:	e841 2300 	strex	r3, r2, [r1]
 8016ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d1e6      	bne.n	8016a88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	3308      	adds	r3, #8
 8016ac0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ac2:	693b      	ldr	r3, [r7, #16]
 8016ac4:	e853 3f00 	ldrex	r3, [r3]
 8016ac8:	60fb      	str	r3, [r7, #12]
   return(result);
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	f023 0301 	bic.w	r3, r3, #1
 8016ad0:	64bb      	str	r3, [r7, #72]	; 0x48
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	3308      	adds	r3, #8
 8016ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016ada:	61fa      	str	r2, [r7, #28]
 8016adc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ade:	69b9      	ldr	r1, [r7, #24]
 8016ae0:	69fa      	ldr	r2, [r7, #28]
 8016ae2:	e841 2300 	strex	r3, r2, [r1]
 8016ae6:	617b      	str	r3, [r7, #20]
   return(result);
 8016ae8:	697b      	ldr	r3, [r7, #20]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d1e5      	bne.n	8016aba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	2220      	movs	r2, #32
 8016af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	2200      	movs	r2, #0
 8016afa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016afe:	2303      	movs	r3, #3
 8016b00:	e012      	b.n	8016b28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	2220      	movs	r2, #32
 8016b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	2220      	movs	r2, #32
 8016b0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	2200      	movs	r2, #0
 8016b16:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	2200      	movs	r2, #0
 8016b22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016b26:	2300      	movs	r3, #0
}
 8016b28:	4618      	mov	r0, r3
 8016b2a:	3758      	adds	r7, #88	; 0x58
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	bd80      	pop	{r7, pc}

08016b30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b084      	sub	sp, #16
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	60f8      	str	r0, [r7, #12]
 8016b38:	60b9      	str	r1, [r7, #8]
 8016b3a:	603b      	str	r3, [r7, #0]
 8016b3c:	4613      	mov	r3, r2
 8016b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016b40:	e049      	b.n	8016bd6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016b42:	69bb      	ldr	r3, [r7, #24]
 8016b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b48:	d045      	beq.n	8016bd6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016b4a:	f7f8 fdd7 	bl	800f6fc <HAL_GetTick>
 8016b4e:	4602      	mov	r2, r0
 8016b50:	683b      	ldr	r3, [r7, #0]
 8016b52:	1ad3      	subs	r3, r2, r3
 8016b54:	69ba      	ldr	r2, [r7, #24]
 8016b56:	429a      	cmp	r2, r3
 8016b58:	d302      	bcc.n	8016b60 <UART_WaitOnFlagUntilTimeout+0x30>
 8016b5a:	69bb      	ldr	r3, [r7, #24]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d101      	bne.n	8016b64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8016b60:	2303      	movs	r3, #3
 8016b62:	e048      	b.n	8016bf6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	f003 0304 	and.w	r3, r3, #4
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d031      	beq.n	8016bd6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	69db      	ldr	r3, [r3, #28]
 8016b78:	f003 0308 	and.w	r3, r3, #8
 8016b7c:	2b08      	cmp	r3, #8
 8016b7e:	d110      	bne.n	8016ba2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	2208      	movs	r2, #8
 8016b86:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8016b88:	68f8      	ldr	r0, [r7, #12]
 8016b8a:	f000 f95b 	bl	8016e44 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	2208      	movs	r2, #8
 8016b92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	2200      	movs	r2, #0
 8016b9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8016b9e:	2301      	movs	r3, #1
 8016ba0:	e029      	b.n	8016bf6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	69db      	ldr	r3, [r3, #28]
 8016ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016bb0:	d111      	bne.n	8016bd6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016bba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016bbc:	68f8      	ldr	r0, [r7, #12]
 8016bbe:	f000 f941 	bl	8016e44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	2220      	movs	r2, #32
 8016bc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	2200      	movs	r2, #0
 8016bce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8016bd2:	2303      	movs	r3, #3
 8016bd4:	e00f      	b.n	8016bf6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	69da      	ldr	r2, [r3, #28]
 8016bdc:	68bb      	ldr	r3, [r7, #8]
 8016bde:	4013      	ands	r3, r2
 8016be0:	68ba      	ldr	r2, [r7, #8]
 8016be2:	429a      	cmp	r2, r3
 8016be4:	bf0c      	ite	eq
 8016be6:	2301      	moveq	r3, #1
 8016be8:	2300      	movne	r3, #0
 8016bea:	b2db      	uxtb	r3, r3
 8016bec:	461a      	mov	r2, r3
 8016bee:	79fb      	ldrb	r3, [r7, #7]
 8016bf0:	429a      	cmp	r2, r3
 8016bf2:	d0a6      	beq.n	8016b42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016bf4:	2300      	movs	r3, #0
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	3710      	adds	r7, #16
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}
	...

08016c00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016c00:	b480      	push	{r7}
 8016c02:	b0a3      	sub	sp, #140	; 0x8c
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	60f8      	str	r0, [r7, #12]
 8016c08:	60b9      	str	r1, [r7, #8]
 8016c0a:	4613      	mov	r3, r2
 8016c0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	68ba      	ldr	r2, [r7, #8]
 8016c12:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	88fa      	ldrh	r2, [r7, #6]
 8016c18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	88fa      	ldrh	r2, [r7, #6]
 8016c20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	2200      	movs	r2, #0
 8016c28:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	689b      	ldr	r3, [r3, #8]
 8016c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016c32:	d10e      	bne.n	8016c52 <UART_Start_Receive_IT+0x52>
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	691b      	ldr	r3, [r3, #16]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d105      	bne.n	8016c48 <UART_Start_Receive_IT+0x48>
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8016c42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016c46:	e02d      	b.n	8016ca4 <UART_Start_Receive_IT+0xa4>
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	22ff      	movs	r2, #255	; 0xff
 8016c4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016c50:	e028      	b.n	8016ca4 <UART_Start_Receive_IT+0xa4>
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	689b      	ldr	r3, [r3, #8]
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d10d      	bne.n	8016c76 <UART_Start_Receive_IT+0x76>
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	691b      	ldr	r3, [r3, #16]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d104      	bne.n	8016c6c <UART_Start_Receive_IT+0x6c>
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	22ff      	movs	r2, #255	; 0xff
 8016c66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016c6a:	e01b      	b.n	8016ca4 <UART_Start_Receive_IT+0xa4>
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	227f      	movs	r2, #127	; 0x7f
 8016c70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016c74:	e016      	b.n	8016ca4 <UART_Start_Receive_IT+0xa4>
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	689b      	ldr	r3, [r3, #8]
 8016c7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016c7e:	d10d      	bne.n	8016c9c <UART_Start_Receive_IT+0x9c>
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	691b      	ldr	r3, [r3, #16]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d104      	bne.n	8016c92 <UART_Start_Receive_IT+0x92>
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	227f      	movs	r2, #127	; 0x7f
 8016c8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016c90:	e008      	b.n	8016ca4 <UART_Start_Receive_IT+0xa4>
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	223f      	movs	r2, #63	; 0x3f
 8016c96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016c9a:	e003      	b.n	8016ca4 <UART_Start_Receive_IT+0xa4>
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	2200      	movs	r2, #0
 8016ca0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	2222      	movs	r2, #34	; 0x22
 8016cb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	3308      	adds	r3, #8
 8016cba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016cbe:	e853 3f00 	ldrex	r3, [r3]
 8016cc2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016cc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016cc6:	f043 0301 	orr.w	r3, r3, #1
 8016cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	3308      	adds	r3, #8
 8016cd4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016cd8:	673a      	str	r2, [r7, #112]	; 0x70
 8016cda:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016cdc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8016cde:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016ce0:	e841 2300 	strex	r3, r2, [r1]
 8016ce4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8016ce6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d1e3      	bne.n	8016cb4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016cf4:	d14f      	bne.n	8016d96 <UART_Start_Receive_IT+0x196>
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016cfc:	88fa      	ldrh	r2, [r7, #6]
 8016cfe:	429a      	cmp	r2, r3
 8016d00:	d349      	bcc.n	8016d96 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	689b      	ldr	r3, [r3, #8]
 8016d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016d0a:	d107      	bne.n	8016d1c <UART_Start_Receive_IT+0x11c>
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	691b      	ldr	r3, [r3, #16]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d103      	bne.n	8016d1c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	4a47      	ldr	r2, [pc, #284]	; (8016e34 <UART_Start_Receive_IT+0x234>)
 8016d18:	675a      	str	r2, [r3, #116]	; 0x74
 8016d1a:	e002      	b.n	8016d22 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	4a46      	ldr	r2, [pc, #280]	; (8016e38 <UART_Start_Receive_IT+0x238>)
 8016d20:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	691b      	ldr	r3, [r3, #16]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d01a      	beq.n	8016d60 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016d32:	e853 3f00 	ldrex	r3, [r3]
 8016d36:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016d3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	461a      	mov	r2, r3
 8016d48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016d4e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016d52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016d54:	e841 2300 	strex	r3, r2, [r1]
 8016d58:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8016d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d1e4      	bne.n	8016d2a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	3308      	adds	r3, #8
 8016d66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d6a:	e853 3f00 	ldrex	r3, [r3]
 8016d6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016d76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	3308      	adds	r3, #8
 8016d7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016d80:	64ba      	str	r2, [r7, #72]	; 0x48
 8016d82:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016d88:	e841 2300 	strex	r3, r2, [r1]
 8016d8c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8016d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d1e5      	bne.n	8016d60 <UART_Start_Receive_IT+0x160>
 8016d94:	e046      	b.n	8016e24 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	689b      	ldr	r3, [r3, #8]
 8016d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016d9e:	d107      	bne.n	8016db0 <UART_Start_Receive_IT+0x1b0>
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	691b      	ldr	r3, [r3, #16]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d103      	bne.n	8016db0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	4a24      	ldr	r2, [pc, #144]	; (8016e3c <UART_Start_Receive_IT+0x23c>)
 8016dac:	675a      	str	r2, [r3, #116]	; 0x74
 8016dae:	e002      	b.n	8016db6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	4a23      	ldr	r2, [pc, #140]	; (8016e40 <UART_Start_Receive_IT+0x240>)
 8016db4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	691b      	ldr	r3, [r3, #16]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d019      	beq.n	8016df2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dc6:	e853 3f00 	ldrex	r3, [r3]
 8016dca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dce:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8016dd2:	677b      	str	r3, [r7, #116]	; 0x74
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	461a      	mov	r2, r3
 8016dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8016dde:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016de0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016de4:	e841 2300 	strex	r3, r2, [r1]
 8016de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8016dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d1e6      	bne.n	8016dbe <UART_Start_Receive_IT+0x1be>
 8016df0:	e018      	b.n	8016e24 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016df8:	697b      	ldr	r3, [r7, #20]
 8016dfa:	e853 3f00 	ldrex	r3, [r3]
 8016dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8016e00:	693b      	ldr	r3, [r7, #16]
 8016e02:	f043 0320 	orr.w	r3, r3, #32
 8016e06:	67bb      	str	r3, [r7, #120]	; 0x78
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	461a      	mov	r2, r3
 8016e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016e10:	623b      	str	r3, [r7, #32]
 8016e12:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e14:	69f9      	ldr	r1, [r7, #28]
 8016e16:	6a3a      	ldr	r2, [r7, #32]
 8016e18:	e841 2300 	strex	r3, r2, [r1]
 8016e1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8016e1e:	69bb      	ldr	r3, [r7, #24]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d1e6      	bne.n	8016df2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8016e24:	2300      	movs	r3, #0
}
 8016e26:	4618      	mov	r0, r3
 8016e28:	378c      	adds	r7, #140	; 0x8c
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e30:	4770      	bx	lr
 8016e32:	bf00      	nop
 8016e34:	08017665 	.word	0x08017665
 8016e38:	08017305 	.word	0x08017305
 8016e3c:	0801714d 	.word	0x0801714d
 8016e40:	08016f95 	.word	0x08016f95

08016e44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016e44:	b480      	push	{r7}
 8016e46:	b095      	sub	sp, #84	; 0x54
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e54:	e853 3f00 	ldrex	r3, [r3]
 8016e58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016e60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	461a      	mov	r2, r3
 8016e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e6a:	643b      	str	r3, [r7, #64]	; 0x40
 8016e6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016e72:	e841 2300 	strex	r3, r2, [r1]
 8016e76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d1e6      	bne.n	8016e4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	3308      	adds	r3, #8
 8016e84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e86:	6a3b      	ldr	r3, [r7, #32]
 8016e88:	e853 3f00 	ldrex	r3, [r3]
 8016e8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8016e8e:	69fb      	ldr	r3, [r7, #28]
 8016e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016e94:	f023 0301 	bic.w	r3, r3, #1
 8016e98:	64bb      	str	r3, [r7, #72]	; 0x48
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	3308      	adds	r3, #8
 8016ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016ea2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016ea4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016eaa:	e841 2300 	strex	r3, r2, [r1]
 8016eae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d1e3      	bne.n	8016e7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016eba:	2b01      	cmp	r3, #1
 8016ebc:	d118      	bne.n	8016ef0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	e853 3f00 	ldrex	r3, [r3]
 8016eca:	60bb      	str	r3, [r7, #8]
   return(result);
 8016ecc:	68bb      	ldr	r3, [r7, #8]
 8016ece:	f023 0310 	bic.w	r3, r3, #16
 8016ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	461a      	mov	r2, r3
 8016eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016edc:	61bb      	str	r3, [r7, #24]
 8016ede:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ee0:	6979      	ldr	r1, [r7, #20]
 8016ee2:	69ba      	ldr	r2, [r7, #24]
 8016ee4:	e841 2300 	strex	r3, r2, [r1]
 8016ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8016eea:	693b      	ldr	r3, [r7, #16]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d1e6      	bne.n	8016ebe <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	2220      	movs	r2, #32
 8016ef4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	2200      	movs	r2, #0
 8016efc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	2200      	movs	r2, #0
 8016f02:	675a      	str	r2, [r3, #116]	; 0x74
}
 8016f04:	bf00      	nop
 8016f06:	3754      	adds	r7, #84	; 0x54
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f0e:	4770      	bx	lr

08016f10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b084      	sub	sp, #16
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	2200      	movs	r2, #0
 8016f22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	2200      	movs	r2, #0
 8016f2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016f2e:	68f8      	ldr	r0, [r7, #12]
 8016f30:	f7ff f99c 	bl	801626c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016f34:	bf00      	nop
 8016f36:	3710      	adds	r7, #16
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	bd80      	pop	{r7, pc}

08016f3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b088      	sub	sp, #32
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	e853 3f00 	ldrex	r3, [r3]
 8016f50:	60bb      	str	r3, [r7, #8]
   return(result);
 8016f52:	68bb      	ldr	r3, [r7, #8]
 8016f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016f58:	61fb      	str	r3, [r7, #28]
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	461a      	mov	r2, r3
 8016f60:	69fb      	ldr	r3, [r7, #28]
 8016f62:	61bb      	str	r3, [r7, #24]
 8016f64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f66:	6979      	ldr	r1, [r7, #20]
 8016f68:	69ba      	ldr	r2, [r7, #24]
 8016f6a:	e841 2300 	strex	r3, r2, [r1]
 8016f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8016f70:	693b      	ldr	r3, [r7, #16]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d1e6      	bne.n	8016f44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	2220      	movs	r2, #32
 8016f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	2200      	movs	r2, #0
 8016f82:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8016f84:	6878      	ldr	r0, [r7, #4]
 8016f86:	f7ff f967 	bl	8016258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016f8a:	bf00      	nop
 8016f8c:	3720      	adds	r7, #32
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}
	...

08016f94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b09c      	sub	sp, #112	; 0x70
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016fa2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016fac:	2b22      	cmp	r3, #34	; 0x22
 8016fae:	f040 80be 	bne.w	801712e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8016fbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8016fc0:	b2d9      	uxtb	r1, r3
 8016fc2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8016fc6:	b2da      	uxtb	r2, r3
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016fcc:	400a      	ands	r2, r1
 8016fce:	b2d2      	uxtb	r2, r2
 8016fd0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016fd6:	1c5a      	adds	r2, r3, #1
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016fe2:	b29b      	uxth	r3, r3
 8016fe4:	3b01      	subs	r3, #1
 8016fe6:	b29a      	uxth	r2, r3
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016ff4:	b29b      	uxth	r3, r3
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	f040 80a1 	bne.w	801713e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017004:	e853 3f00 	ldrex	r3, [r3]
 8017008:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801700a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801700c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017010:	66bb      	str	r3, [r7, #104]	; 0x68
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	461a      	mov	r2, r3
 8017018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801701a:	65bb      	str	r3, [r7, #88]	; 0x58
 801701c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801701e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017020:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017022:	e841 2300 	strex	r3, r2, [r1]
 8017026:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801702a:	2b00      	cmp	r3, #0
 801702c:	d1e6      	bne.n	8016ffc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	3308      	adds	r3, #8
 8017034:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017038:	e853 3f00 	ldrex	r3, [r3]
 801703c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801703e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017040:	f023 0301 	bic.w	r3, r3, #1
 8017044:	667b      	str	r3, [r7, #100]	; 0x64
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	3308      	adds	r3, #8
 801704c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801704e:	647a      	str	r2, [r7, #68]	; 0x44
 8017050:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017052:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017054:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017056:	e841 2300 	strex	r3, r2, [r1]
 801705a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801705c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801705e:	2b00      	cmp	r3, #0
 8017060:	d1e5      	bne.n	801702e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	2220      	movs	r2, #32
 8017066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	2200      	movs	r2, #0
 801706e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	2200      	movs	r2, #0
 8017074:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	4a33      	ldr	r2, [pc, #204]	; (8017148 <UART_RxISR_8BIT+0x1b4>)
 801707c:	4293      	cmp	r3, r2
 801707e:	d01f      	beq.n	80170c0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	685b      	ldr	r3, [r3, #4]
 8017086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801708a:	2b00      	cmp	r3, #0
 801708c:	d018      	beq.n	80170c0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017096:	e853 3f00 	ldrex	r3, [r3]
 801709a:	623b      	str	r3, [r7, #32]
   return(result);
 801709c:	6a3b      	ldr	r3, [r7, #32]
 801709e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80170a2:	663b      	str	r3, [r7, #96]	; 0x60
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	461a      	mov	r2, r3
 80170aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80170ac:	633b      	str	r3, [r7, #48]	; 0x30
 80170ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80170b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80170b4:	e841 2300 	strex	r3, r2, [r1]
 80170b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80170ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d1e6      	bne.n	801708e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170c4:	2b01      	cmp	r3, #1
 80170c6:	d12e      	bne.n	8017126 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	2200      	movs	r2, #0
 80170cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80170d4:	693b      	ldr	r3, [r7, #16]
 80170d6:	e853 3f00 	ldrex	r3, [r3]
 80170da:	60fb      	str	r3, [r7, #12]
   return(result);
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	f023 0310 	bic.w	r3, r3, #16
 80170e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	461a      	mov	r2, r3
 80170ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80170ec:	61fb      	str	r3, [r7, #28]
 80170ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170f0:	69b9      	ldr	r1, [r7, #24]
 80170f2:	69fa      	ldr	r2, [r7, #28]
 80170f4:	e841 2300 	strex	r3, r2, [r1]
 80170f8:	617b      	str	r3, [r7, #20]
   return(result);
 80170fa:	697b      	ldr	r3, [r7, #20]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d1e6      	bne.n	80170ce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	69db      	ldr	r3, [r3, #28]
 8017106:	f003 0310 	and.w	r3, r3, #16
 801710a:	2b10      	cmp	r3, #16
 801710c:	d103      	bne.n	8017116 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	2210      	movs	r2, #16
 8017114:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801711c:	4619      	mov	r1, r3
 801711e:	6878      	ldr	r0, [r7, #4]
 8017120:	f7ff f8ae 	bl	8016280 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017124:	e00b      	b.n	801713e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8017126:	6878      	ldr	r0, [r7, #4]
 8017128:	f7ea fe34 	bl	8001d94 <HAL_UART_RxCpltCallback>
}
 801712c:	e007      	b.n	801713e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	699a      	ldr	r2, [r3, #24]
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	f042 0208 	orr.w	r2, r2, #8
 801713c:	619a      	str	r2, [r3, #24]
}
 801713e:	bf00      	nop
 8017140:	3770      	adds	r7, #112	; 0x70
 8017142:	46bd      	mov	sp, r7
 8017144:	bd80      	pop	{r7, pc}
 8017146:	bf00      	nop
 8017148:	40008000 	.word	0x40008000

0801714c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801714c:	b580      	push	{r7, lr}
 801714e:	b09c      	sub	sp, #112	; 0x70
 8017150:	af00      	add	r7, sp, #0
 8017152:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801715a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017164:	2b22      	cmp	r3, #34	; 0x22
 8017166:	f040 80be 	bne.w	80172e6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017170:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017178:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801717a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801717e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8017182:	4013      	ands	r3, r2
 8017184:	b29a      	uxth	r2, r3
 8017186:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017188:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801718e:	1c9a      	adds	r2, r3, #2
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801719a:	b29b      	uxth	r3, r3
 801719c:	3b01      	subs	r3, #1
 801719e:	b29a      	uxth	r2, r3
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80171ac:	b29b      	uxth	r3, r3
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	f040 80a1 	bne.w	80172f6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171bc:	e853 3f00 	ldrex	r3, [r3]
 80171c0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80171c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80171c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80171c8:	667b      	str	r3, [r7, #100]	; 0x64
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	461a      	mov	r2, r3
 80171d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80171d2:	657b      	str	r3, [r7, #84]	; 0x54
 80171d4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80171d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80171da:	e841 2300 	strex	r3, r2, [r1]
 80171de:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80171e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d1e6      	bne.n	80171b4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	3308      	adds	r3, #8
 80171ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171f0:	e853 3f00 	ldrex	r3, [r3]
 80171f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80171f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171f8:	f023 0301 	bic.w	r3, r3, #1
 80171fc:	663b      	str	r3, [r7, #96]	; 0x60
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	3308      	adds	r3, #8
 8017204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017206:	643a      	str	r2, [r7, #64]	; 0x40
 8017208:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801720a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801720c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801720e:	e841 2300 	strex	r3, r2, [r1]
 8017212:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017216:	2b00      	cmp	r3, #0
 8017218:	d1e5      	bne.n	80171e6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	2220      	movs	r2, #32
 801721e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	2200      	movs	r2, #0
 8017226:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	2200      	movs	r2, #0
 801722c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	4a33      	ldr	r2, [pc, #204]	; (8017300 <UART_RxISR_16BIT+0x1b4>)
 8017234:	4293      	cmp	r3, r2
 8017236:	d01f      	beq.n	8017278 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	685b      	ldr	r3, [r3, #4]
 801723e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017242:	2b00      	cmp	r3, #0
 8017244:	d018      	beq.n	8017278 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801724c:	6a3b      	ldr	r3, [r7, #32]
 801724e:	e853 3f00 	ldrex	r3, [r3]
 8017252:	61fb      	str	r3, [r7, #28]
   return(result);
 8017254:	69fb      	ldr	r3, [r7, #28]
 8017256:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801725a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	461a      	mov	r2, r3
 8017262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017266:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801726a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801726c:	e841 2300 	strex	r3, r2, [r1]
 8017270:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017274:	2b00      	cmp	r3, #0
 8017276:	d1e6      	bne.n	8017246 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801727c:	2b01      	cmp	r3, #1
 801727e:	d12e      	bne.n	80172de <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	2200      	movs	r2, #0
 8017284:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	e853 3f00 	ldrex	r3, [r3]
 8017292:	60bb      	str	r3, [r7, #8]
   return(result);
 8017294:	68bb      	ldr	r3, [r7, #8]
 8017296:	f023 0310 	bic.w	r3, r3, #16
 801729a:	65bb      	str	r3, [r7, #88]	; 0x58
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	461a      	mov	r2, r3
 80172a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80172a4:	61bb      	str	r3, [r7, #24]
 80172a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172a8:	6979      	ldr	r1, [r7, #20]
 80172aa:	69ba      	ldr	r2, [r7, #24]
 80172ac:	e841 2300 	strex	r3, r2, [r1]
 80172b0:	613b      	str	r3, [r7, #16]
   return(result);
 80172b2:	693b      	ldr	r3, [r7, #16]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d1e6      	bne.n	8017286 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	69db      	ldr	r3, [r3, #28]
 80172be:	f003 0310 	and.w	r3, r3, #16
 80172c2:	2b10      	cmp	r3, #16
 80172c4:	d103      	bne.n	80172ce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	2210      	movs	r2, #16
 80172cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80172d4:	4619      	mov	r1, r3
 80172d6:	6878      	ldr	r0, [r7, #4]
 80172d8:	f7fe ffd2 	bl	8016280 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80172dc:	e00b      	b.n	80172f6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80172de:	6878      	ldr	r0, [r7, #4]
 80172e0:	f7ea fd58 	bl	8001d94 <HAL_UART_RxCpltCallback>
}
 80172e4:	e007      	b.n	80172f6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	699a      	ldr	r2, [r3, #24]
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	f042 0208 	orr.w	r2, r2, #8
 80172f4:	619a      	str	r2, [r3, #24]
}
 80172f6:	bf00      	nop
 80172f8:	3770      	adds	r7, #112	; 0x70
 80172fa:	46bd      	mov	sp, r7
 80172fc:	bd80      	pop	{r7, pc}
 80172fe:	bf00      	nop
 8017300:	40008000 	.word	0x40008000

08017304 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b0ac      	sub	sp, #176	; 0xb0
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017312:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	69db      	ldr	r3, [r3, #28]
 801731c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	689b      	ldr	r3, [r3, #8]
 8017330:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801733a:	2b22      	cmp	r3, #34	; 0x22
 801733c:	f040 8182 	bne.w	8017644 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017346:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801734a:	e125      	b.n	8017598 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017352:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017356:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801735a:	b2d9      	uxtb	r1, r3
 801735c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8017360:	b2da      	uxtb	r2, r3
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017366:	400a      	ands	r2, r1
 8017368:	b2d2      	uxtb	r2, r2
 801736a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017370:	1c5a      	adds	r2, r3, #1
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801737c:	b29b      	uxth	r3, r3
 801737e:	3b01      	subs	r3, #1
 8017380:	b29a      	uxth	r2, r3
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	69db      	ldr	r3, [r3, #28]
 801738e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8017392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017396:	f003 0307 	and.w	r3, r3, #7
 801739a:	2b00      	cmp	r3, #0
 801739c:	d053      	beq.n	8017446 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801739e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80173a2:	f003 0301 	and.w	r3, r3, #1
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d011      	beq.n	80173ce <UART_RxISR_8BIT_FIFOEN+0xca>
 80173aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80173ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d00b      	beq.n	80173ce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	2201      	movs	r2, #1
 80173bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80173c4:	f043 0201 	orr.w	r2, r3, #1
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80173ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80173d2:	f003 0302 	and.w	r3, r3, #2
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d011      	beq.n	80173fe <UART_RxISR_8BIT_FIFOEN+0xfa>
 80173da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80173de:	f003 0301 	and.w	r3, r3, #1
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d00b      	beq.n	80173fe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	2202      	movs	r2, #2
 80173ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80173f4:	f043 0204 	orr.w	r2, r3, #4
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80173fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017402:	f003 0304 	and.w	r3, r3, #4
 8017406:	2b00      	cmp	r3, #0
 8017408:	d011      	beq.n	801742e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801740a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801740e:	f003 0301 	and.w	r3, r3, #1
 8017412:	2b00      	cmp	r3, #0
 8017414:	d00b      	beq.n	801742e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	2204      	movs	r2, #4
 801741c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017424:	f043 0202 	orr.w	r2, r3, #2
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017434:	2b00      	cmp	r3, #0
 8017436:	d006      	beq.n	8017446 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017438:	6878      	ldr	r0, [r7, #4]
 801743a:	f7fe ff17 	bl	801626c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	2200      	movs	r2, #0
 8017442:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801744c:	b29b      	uxth	r3, r3
 801744e:	2b00      	cmp	r3, #0
 8017450:	f040 80a2 	bne.w	8017598 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801745a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801745c:	e853 3f00 	ldrex	r3, [r3]
 8017460:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8017462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	461a      	mov	r2, r3
 8017472:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017476:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017478:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801747a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801747c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801747e:	e841 2300 	strex	r3, r2, [r1]
 8017482:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8017484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017486:	2b00      	cmp	r3, #0
 8017488:	d1e4      	bne.n	8017454 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	3308      	adds	r3, #8
 8017490:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017494:	e853 3f00 	ldrex	r3, [r3]
 8017498:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801749a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801749c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80174a0:	f023 0301 	bic.w	r3, r3, #1
 80174a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	3308      	adds	r3, #8
 80174ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80174b2:	66ba      	str	r2, [r7, #104]	; 0x68
 80174b4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80174b6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80174b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80174ba:	e841 2300 	strex	r3, r2, [r1]
 80174be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80174c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d1e1      	bne.n	801748a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	2220      	movs	r2, #32
 80174ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	2200      	movs	r2, #0
 80174d2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	2200      	movs	r2, #0
 80174d8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	4a5f      	ldr	r2, [pc, #380]	; (801765c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80174e0:	4293      	cmp	r3, r2
 80174e2:	d021      	beq.n	8017528 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	685b      	ldr	r3, [r3, #4]
 80174ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d01a      	beq.n	8017528 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80174fa:	e853 3f00 	ldrex	r3, [r3]
 80174fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8017500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017502:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	461a      	mov	r2, r3
 8017510:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017514:	657b      	str	r3, [r7, #84]	; 0x54
 8017516:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017518:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801751a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801751c:	e841 2300 	strex	r3, r2, [r1]
 8017520:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017524:	2b00      	cmp	r3, #0
 8017526:	d1e4      	bne.n	80174f2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801752c:	2b01      	cmp	r3, #1
 801752e:	d130      	bne.n	8017592 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	2200      	movs	r2, #0
 8017534:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801753c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801753e:	e853 3f00 	ldrex	r3, [r3]
 8017542:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017546:	f023 0310 	bic.w	r3, r3, #16
 801754a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	461a      	mov	r2, r3
 8017554:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017558:	643b      	str	r3, [r7, #64]	; 0x40
 801755a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801755c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801755e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017560:	e841 2300 	strex	r3, r2, [r1]
 8017564:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017568:	2b00      	cmp	r3, #0
 801756a:	d1e4      	bne.n	8017536 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	69db      	ldr	r3, [r3, #28]
 8017572:	f003 0310 	and.w	r3, r3, #16
 8017576:	2b10      	cmp	r3, #16
 8017578:	d103      	bne.n	8017582 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	2210      	movs	r2, #16
 8017580:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017588:	4619      	mov	r1, r3
 801758a:	6878      	ldr	r0, [r7, #4]
 801758c:	f7fe fe78 	bl	8016280 <HAL_UARTEx_RxEventCallback>
 8017590:	e002      	b.n	8017598 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8017592:	6878      	ldr	r0, [r7, #4]
 8017594:	f7ea fbfe 	bl	8001d94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017598:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801759c:	2b00      	cmp	r3, #0
 801759e:	d006      	beq.n	80175ae <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80175a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80175a4:	f003 0320 	and.w	r3, r3, #32
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	f47f aecf 	bne.w	801734c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80175b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80175b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d049      	beq.n	8017654 <UART_RxISR_8BIT_FIFOEN+0x350>
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80175c6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80175ca:	429a      	cmp	r2, r3
 80175cc:	d242      	bcs.n	8017654 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	3308      	adds	r3, #8
 80175d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80175d6:	6a3b      	ldr	r3, [r7, #32]
 80175d8:	e853 3f00 	ldrex	r3, [r3]
 80175dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80175de:	69fb      	ldr	r3, [r7, #28]
 80175e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80175e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	3308      	adds	r3, #8
 80175ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80175f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80175f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80175f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175fa:	e841 2300 	strex	r3, r2, [r1]
 80175fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017602:	2b00      	cmp	r3, #0
 8017604:	d1e3      	bne.n	80175ce <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	4a15      	ldr	r2, [pc, #84]	; (8017660 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801760a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	e853 3f00 	ldrex	r3, [r3]
 8017618:	60bb      	str	r3, [r7, #8]
   return(result);
 801761a:	68bb      	ldr	r3, [r7, #8]
 801761c:	f043 0320 	orr.w	r3, r3, #32
 8017620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	461a      	mov	r2, r3
 801762a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801762e:	61bb      	str	r3, [r7, #24]
 8017630:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017632:	6979      	ldr	r1, [r7, #20]
 8017634:	69ba      	ldr	r2, [r7, #24]
 8017636:	e841 2300 	strex	r3, r2, [r1]
 801763a:	613b      	str	r3, [r7, #16]
   return(result);
 801763c:	693b      	ldr	r3, [r7, #16]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d1e4      	bne.n	801760c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017642:	e007      	b.n	8017654 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	699a      	ldr	r2, [r3, #24]
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	f042 0208 	orr.w	r2, r2, #8
 8017652:	619a      	str	r2, [r3, #24]
}
 8017654:	bf00      	nop
 8017656:	37b0      	adds	r7, #176	; 0xb0
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}
 801765c:	40008000 	.word	0x40008000
 8017660:	08016f95 	.word	0x08016f95

08017664 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b0ae      	sub	sp, #184	; 0xb8
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017672:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	69db      	ldr	r3, [r3, #28]
 801767c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	689b      	ldr	r3, [r3, #8]
 8017690:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801769a:	2b22      	cmp	r3, #34	; 0x22
 801769c:	f040 8186 	bne.w	80179ac <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80176a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80176aa:	e129      	b.n	8017900 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80176ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80176be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80176c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80176c6:	4013      	ands	r3, r2
 80176c8:	b29a      	uxth	r2, r3
 80176ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80176ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80176d4:	1c9a      	adds	r2, r3, #2
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80176e0:	b29b      	uxth	r3, r3
 80176e2:	3b01      	subs	r3, #1
 80176e4:	b29a      	uxth	r2, r3
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	69db      	ldr	r3, [r3, #28]
 80176f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80176f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80176fa:	f003 0307 	and.w	r3, r3, #7
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d053      	beq.n	80177aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017702:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017706:	f003 0301 	and.w	r3, r3, #1
 801770a:	2b00      	cmp	r3, #0
 801770c:	d011      	beq.n	8017732 <UART_RxISR_16BIT_FIFOEN+0xce>
 801770e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017716:	2b00      	cmp	r3, #0
 8017718:	d00b      	beq.n	8017732 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	2201      	movs	r2, #1
 8017720:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017728:	f043 0201 	orr.w	r2, r3, #1
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017732:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017736:	f003 0302 	and.w	r3, r3, #2
 801773a:	2b00      	cmp	r3, #0
 801773c:	d011      	beq.n	8017762 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801773e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017742:	f003 0301 	and.w	r3, r3, #1
 8017746:	2b00      	cmp	r3, #0
 8017748:	d00b      	beq.n	8017762 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	2202      	movs	r2, #2
 8017750:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017758:	f043 0204 	orr.w	r2, r3, #4
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017762:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017766:	f003 0304 	and.w	r3, r3, #4
 801776a:	2b00      	cmp	r3, #0
 801776c:	d011      	beq.n	8017792 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801776e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017772:	f003 0301 	and.w	r3, r3, #1
 8017776:	2b00      	cmp	r3, #0
 8017778:	d00b      	beq.n	8017792 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	2204      	movs	r2, #4
 8017780:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017788:	f043 0202 	orr.w	r2, r3, #2
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017798:	2b00      	cmp	r3, #0
 801779a:	d006      	beq.n	80177aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801779c:	6878      	ldr	r0, [r7, #4]
 801779e:	f7fe fd65 	bl	801626c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	2200      	movs	r2, #0
 80177a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80177b0:	b29b      	uxth	r3, r3
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	f040 80a4 	bne.w	8017900 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80177c0:	e853 3f00 	ldrex	r3, [r3]
 80177c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80177c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80177c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80177cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	461a      	mov	r2, r3
 80177d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80177da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80177de:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80177e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80177e6:	e841 2300 	strex	r3, r2, [r1]
 80177ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80177ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d1e2      	bne.n	80177b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	3308      	adds	r3, #8
 80177f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80177fc:	e853 3f00 	ldrex	r3, [r3]
 8017800:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8017802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017808:	f023 0301 	bic.w	r3, r3, #1
 801780c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	3308      	adds	r3, #8
 8017816:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801781a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801781c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801781e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017820:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017822:	e841 2300 	strex	r3, r2, [r1]
 8017826:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8017828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801782a:	2b00      	cmp	r3, #0
 801782c:	d1e1      	bne.n	80177f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	2220      	movs	r2, #32
 8017832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	2200      	movs	r2, #0
 801783a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	2200      	movs	r2, #0
 8017840:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	4a5f      	ldr	r2, [pc, #380]	; (80179c4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8017848:	4293      	cmp	r3, r2
 801784a:	d021      	beq.n	8017890 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	685b      	ldr	r3, [r3, #4]
 8017852:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017856:	2b00      	cmp	r3, #0
 8017858:	d01a      	beq.n	8017890 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017862:	e853 3f00 	ldrex	r3, [r3]
 8017866:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801786a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801786e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	461a      	mov	r2, r3
 8017878:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801787c:	65bb      	str	r3, [r7, #88]	; 0x58
 801787e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017880:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017882:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017884:	e841 2300 	strex	r3, r2, [r1]
 8017888:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801788a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801788c:	2b00      	cmp	r3, #0
 801788e:	d1e4      	bne.n	801785a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017894:	2b01      	cmp	r3, #1
 8017896:	d130      	bne.n	80178fa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	2200      	movs	r2, #0
 801789c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178a6:	e853 3f00 	ldrex	r3, [r3]
 80178aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80178ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80178ae:	f023 0310 	bic.w	r3, r3, #16
 80178b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	461a      	mov	r2, r3
 80178bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80178c0:	647b      	str	r3, [r7, #68]	; 0x44
 80178c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80178c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80178c8:	e841 2300 	strex	r3, r2, [r1]
 80178cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80178ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d1e4      	bne.n	801789e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	69db      	ldr	r3, [r3, #28]
 80178da:	f003 0310 	and.w	r3, r3, #16
 80178de:	2b10      	cmp	r3, #16
 80178e0:	d103      	bne.n	80178ea <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	2210      	movs	r2, #16
 80178e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80178f0:	4619      	mov	r1, r3
 80178f2:	6878      	ldr	r0, [r7, #4]
 80178f4:	f7fe fcc4 	bl	8016280 <HAL_UARTEx_RxEventCallback>
 80178f8:	e002      	b.n	8017900 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80178fa:	6878      	ldr	r0, [r7, #4]
 80178fc:	f7ea fa4a 	bl	8001d94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017900:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8017904:	2b00      	cmp	r3, #0
 8017906:	d006      	beq.n	8017916 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8017908:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801790c:	f003 0320 	and.w	r3, r3, #32
 8017910:	2b00      	cmp	r3, #0
 8017912:	f47f aecb 	bne.w	80176ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801791c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8017920:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8017924:	2b00      	cmp	r3, #0
 8017926:	d049      	beq.n	80179bc <UART_RxISR_16BIT_FIFOEN+0x358>
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801792e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8017932:	429a      	cmp	r2, r3
 8017934:	d242      	bcs.n	80179bc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	3308      	adds	r3, #8
 801793c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017940:	e853 3f00 	ldrex	r3, [r3]
 8017944:	623b      	str	r3, [r7, #32]
   return(result);
 8017946:	6a3b      	ldr	r3, [r7, #32]
 8017948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801794c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	3308      	adds	r3, #8
 8017956:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801795a:	633a      	str	r2, [r7, #48]	; 0x30
 801795c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801795e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017962:	e841 2300 	strex	r3, r2, [r1]
 8017966:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801796a:	2b00      	cmp	r3, #0
 801796c:	d1e3      	bne.n	8017936 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	4a15      	ldr	r2, [pc, #84]	; (80179c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8017972:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801797a:	693b      	ldr	r3, [r7, #16]
 801797c:	e853 3f00 	ldrex	r3, [r3]
 8017980:	60fb      	str	r3, [r7, #12]
   return(result);
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	f043 0320 	orr.w	r3, r3, #32
 8017988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	461a      	mov	r2, r3
 8017992:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017996:	61fb      	str	r3, [r7, #28]
 8017998:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801799a:	69b9      	ldr	r1, [r7, #24]
 801799c:	69fa      	ldr	r2, [r7, #28]
 801799e:	e841 2300 	strex	r3, r2, [r1]
 80179a2:	617b      	str	r3, [r7, #20]
   return(result);
 80179a4:	697b      	ldr	r3, [r7, #20]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d1e4      	bne.n	8017974 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80179aa:	e007      	b.n	80179bc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	699a      	ldr	r2, [r3, #24]
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	f042 0208 	orr.w	r2, r2, #8
 80179ba:	619a      	str	r2, [r3, #24]
}
 80179bc:	bf00      	nop
 80179be:	37b8      	adds	r7, #184	; 0xb8
 80179c0:	46bd      	mov	sp, r7
 80179c2:	bd80      	pop	{r7, pc}
 80179c4:	40008000 	.word	0x40008000
 80179c8:	0801714d 	.word	0x0801714d

080179cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80179cc:	b480      	push	{r7}
 80179ce:	b083      	sub	sp, #12
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80179d4:	bf00      	nop
 80179d6:	370c      	adds	r7, #12
 80179d8:	46bd      	mov	sp, r7
 80179da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179de:	4770      	bx	lr

080179e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80179e0:	b480      	push	{r7}
 80179e2:	b083      	sub	sp, #12
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80179e8:	bf00      	nop
 80179ea:	370c      	adds	r7, #12
 80179ec:	46bd      	mov	sp, r7
 80179ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f2:	4770      	bx	lr

080179f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80179f4:	b480      	push	{r7}
 80179f6:	b083      	sub	sp, #12
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80179fc:	bf00      	nop
 80179fe:	370c      	adds	r7, #12
 8017a00:	46bd      	mov	sp, r7
 8017a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a06:	4770      	bx	lr

08017a08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8017a08:	b480      	push	{r7}
 8017a0a:	b085      	sub	sp, #20
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017a16:	2b01      	cmp	r3, #1
 8017a18:	d101      	bne.n	8017a1e <HAL_UARTEx_DisableFifoMode+0x16>
 8017a1a:	2302      	movs	r3, #2
 8017a1c:	e027      	b.n	8017a6e <HAL_UARTEx_DisableFifoMode+0x66>
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	2201      	movs	r2, #1
 8017a22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	2224      	movs	r2, #36	; 0x24
 8017a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	681a      	ldr	r2, [r3, #0]
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	f022 0201 	bic.w	r2, r2, #1
 8017a44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8017a4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	2200      	movs	r2, #0
 8017a52:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	68fa      	ldr	r2, [r7, #12]
 8017a5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	2220      	movs	r2, #32
 8017a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	2200      	movs	r2, #0
 8017a68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017a6c:	2300      	movs	r3, #0
}
 8017a6e:	4618      	mov	r0, r3
 8017a70:	3714      	adds	r7, #20
 8017a72:	46bd      	mov	sp, r7
 8017a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a78:	4770      	bx	lr

08017a7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8017a7a:	b580      	push	{r7, lr}
 8017a7c:	b084      	sub	sp, #16
 8017a7e:	af00      	add	r7, sp, #0
 8017a80:	6078      	str	r0, [r7, #4]
 8017a82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017a8a:	2b01      	cmp	r3, #1
 8017a8c:	d101      	bne.n	8017a92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8017a8e:	2302      	movs	r3, #2
 8017a90:	e02d      	b.n	8017aee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	2201      	movs	r2, #1
 8017a96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	2224      	movs	r2, #36	; 0x24
 8017a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	681a      	ldr	r2, [r3, #0]
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	f022 0201 	bic.w	r2, r2, #1
 8017ab8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	689b      	ldr	r3, [r3, #8]
 8017ac0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	683a      	ldr	r2, [r7, #0]
 8017aca:	430a      	orrs	r2, r1
 8017acc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017ace:	6878      	ldr	r0, [r7, #4]
 8017ad0:	f000 f850 	bl	8017b74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	68fa      	ldr	r2, [r7, #12]
 8017ada:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	2220      	movs	r2, #32
 8017ae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	2200      	movs	r2, #0
 8017ae8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017aec:	2300      	movs	r3, #0
}
 8017aee:	4618      	mov	r0, r3
 8017af0:	3710      	adds	r7, #16
 8017af2:	46bd      	mov	sp, r7
 8017af4:	bd80      	pop	{r7, pc}

08017af6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8017af6:	b580      	push	{r7, lr}
 8017af8:	b084      	sub	sp, #16
 8017afa:	af00      	add	r7, sp, #0
 8017afc:	6078      	str	r0, [r7, #4]
 8017afe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017b06:	2b01      	cmp	r3, #1
 8017b08:	d101      	bne.n	8017b0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8017b0a:	2302      	movs	r3, #2
 8017b0c:	e02d      	b.n	8017b6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	2201      	movs	r2, #1
 8017b12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	2224      	movs	r2, #36	; 0x24
 8017b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	681a      	ldr	r2, [r3, #0]
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	f022 0201 	bic.w	r2, r2, #1
 8017b34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	689b      	ldr	r3, [r3, #8]
 8017b3c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	683a      	ldr	r2, [r7, #0]
 8017b46:	430a      	orrs	r2, r1
 8017b48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017b4a:	6878      	ldr	r0, [r7, #4]
 8017b4c:	f000 f812 	bl	8017b74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	68fa      	ldr	r2, [r7, #12]
 8017b56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	2220      	movs	r2, #32
 8017b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	2200      	movs	r2, #0
 8017b64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017b68:	2300      	movs	r3, #0
}
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	3710      	adds	r7, #16
 8017b6e:	46bd      	mov	sp, r7
 8017b70:	bd80      	pop	{r7, pc}
	...

08017b74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8017b74:	b480      	push	{r7}
 8017b76:	b085      	sub	sp, #20
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d108      	bne.n	8017b96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	2201      	movs	r2, #1
 8017b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	2201      	movs	r2, #1
 8017b90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8017b94:	e031      	b.n	8017bfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8017b96:	2308      	movs	r3, #8
 8017b98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8017b9a:	2308      	movs	r3, #8
 8017b9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	689b      	ldr	r3, [r3, #8]
 8017ba4:	0e5b      	lsrs	r3, r3, #25
 8017ba6:	b2db      	uxtb	r3, r3
 8017ba8:	f003 0307 	and.w	r3, r3, #7
 8017bac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	689b      	ldr	r3, [r3, #8]
 8017bb4:	0f5b      	lsrs	r3, r3, #29
 8017bb6:	b2db      	uxtb	r3, r3
 8017bb8:	f003 0307 	and.w	r3, r3, #7
 8017bbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017bbe:	7bbb      	ldrb	r3, [r7, #14]
 8017bc0:	7b3a      	ldrb	r2, [r7, #12]
 8017bc2:	4911      	ldr	r1, [pc, #68]	; (8017c08 <UARTEx_SetNbDataToProcess+0x94>)
 8017bc4:	5c8a      	ldrb	r2, [r1, r2]
 8017bc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8017bca:	7b3a      	ldrb	r2, [r7, #12]
 8017bcc:	490f      	ldr	r1, [pc, #60]	; (8017c0c <UARTEx_SetNbDataToProcess+0x98>)
 8017bce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017bd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8017bd4:	b29a      	uxth	r2, r3
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017bdc:	7bfb      	ldrb	r3, [r7, #15]
 8017bde:	7b7a      	ldrb	r2, [r7, #13]
 8017be0:	4909      	ldr	r1, [pc, #36]	; (8017c08 <UARTEx_SetNbDataToProcess+0x94>)
 8017be2:	5c8a      	ldrb	r2, [r1, r2]
 8017be4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8017be8:	7b7a      	ldrb	r2, [r7, #13]
 8017bea:	4908      	ldr	r1, [pc, #32]	; (8017c0c <UARTEx_SetNbDataToProcess+0x98>)
 8017bec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017bee:	fb93 f3f2 	sdiv	r3, r3, r2
 8017bf2:	b29a      	uxth	r2, r3
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8017bfa:	bf00      	nop
 8017bfc:	3714      	adds	r7, #20
 8017bfe:	46bd      	mov	sp, r7
 8017c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c04:	4770      	bx	lr
 8017c06:	bf00      	nop
 8017c08:	0801e768 	.word	0x0801e768
 8017c0c:	0801e770 	.word	0x0801e770

08017c10 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8017c10:	b480      	push	{r7}
 8017c12:	b08b      	sub	sp, #44	; 0x2c
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	60f8      	str	r0, [r7, #12]
 8017c18:	60b9      	str	r1, [r7, #8]
 8017c1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	681a      	ldr	r2, [r3, #0]
 8017c20:	68bb      	ldr	r3, [r7, #8]
 8017c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017c24:	697b      	ldr	r3, [r7, #20]
 8017c26:	fa93 f3a3 	rbit	r3, r3
 8017c2a:	613b      	str	r3, [r7, #16]
  return result;
 8017c2c:	693b      	ldr	r3, [r7, #16]
 8017c2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8017c30:	69bb      	ldr	r3, [r7, #24]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d101      	bne.n	8017c3a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8017c36:	2320      	movs	r3, #32
 8017c38:	e003      	b.n	8017c42 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8017c3a:	69bb      	ldr	r3, [r7, #24]
 8017c3c:	fab3 f383 	clz	r3, r3
 8017c40:	b2db      	uxtb	r3, r3
 8017c42:	005b      	lsls	r3, r3, #1
 8017c44:	2103      	movs	r1, #3
 8017c46:	fa01 f303 	lsl.w	r3, r1, r3
 8017c4a:	43db      	mvns	r3, r3
 8017c4c:	401a      	ands	r2, r3
 8017c4e:	68bb      	ldr	r3, [r7, #8]
 8017c50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017c52:	6a3b      	ldr	r3, [r7, #32]
 8017c54:	fa93 f3a3 	rbit	r3, r3
 8017c58:	61fb      	str	r3, [r7, #28]
  return result;
 8017c5a:	69fb      	ldr	r3, [r7, #28]
 8017c5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8017c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d101      	bne.n	8017c68 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8017c64:	2320      	movs	r3, #32
 8017c66:	e003      	b.n	8017c70 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8017c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c6a:	fab3 f383 	clz	r3, r3
 8017c6e:	b2db      	uxtb	r3, r3
 8017c70:	005b      	lsls	r3, r3, #1
 8017c72:	6879      	ldr	r1, [r7, #4]
 8017c74:	fa01 f303 	lsl.w	r3, r1, r3
 8017c78:	431a      	orrs	r2, r3
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	601a      	str	r2, [r3, #0]
}
 8017c7e:	bf00      	nop
 8017c80:	372c      	adds	r7, #44	; 0x2c
 8017c82:	46bd      	mov	sp, r7
 8017c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c88:	4770      	bx	lr

08017c8a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8017c8a:	b480      	push	{r7}
 8017c8c:	b085      	sub	sp, #20
 8017c8e:	af00      	add	r7, sp, #0
 8017c90:	60f8      	str	r0, [r7, #12]
 8017c92:	60b9      	str	r1, [r7, #8]
 8017c94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	685a      	ldr	r2, [r3, #4]
 8017c9a:	68bb      	ldr	r3, [r7, #8]
 8017c9c:	43db      	mvns	r3, r3
 8017c9e:	401a      	ands	r2, r3
 8017ca0:	68bb      	ldr	r3, [r7, #8]
 8017ca2:	6879      	ldr	r1, [r7, #4]
 8017ca4:	fb01 f303 	mul.w	r3, r1, r3
 8017ca8:	431a      	orrs	r2, r3
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	605a      	str	r2, [r3, #4]
}
 8017cae:	bf00      	nop
 8017cb0:	3714      	adds	r7, #20
 8017cb2:	46bd      	mov	sp, r7
 8017cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb8:	4770      	bx	lr

08017cba <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8017cba:	b480      	push	{r7}
 8017cbc:	b08b      	sub	sp, #44	; 0x2c
 8017cbe:	af00      	add	r7, sp, #0
 8017cc0:	60f8      	str	r0, [r7, #12]
 8017cc2:	60b9      	str	r1, [r7, #8]
 8017cc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	689a      	ldr	r2, [r3, #8]
 8017cca:	68bb      	ldr	r3, [r7, #8]
 8017ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017cce:	697b      	ldr	r3, [r7, #20]
 8017cd0:	fa93 f3a3 	rbit	r3, r3
 8017cd4:	613b      	str	r3, [r7, #16]
  return result;
 8017cd6:	693b      	ldr	r3, [r7, #16]
 8017cd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8017cda:	69bb      	ldr	r3, [r7, #24]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d101      	bne.n	8017ce4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8017ce0:	2320      	movs	r3, #32
 8017ce2:	e003      	b.n	8017cec <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8017ce4:	69bb      	ldr	r3, [r7, #24]
 8017ce6:	fab3 f383 	clz	r3, r3
 8017cea:	b2db      	uxtb	r3, r3
 8017cec:	005b      	lsls	r3, r3, #1
 8017cee:	2103      	movs	r1, #3
 8017cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8017cf4:	43db      	mvns	r3, r3
 8017cf6:	401a      	ands	r2, r3
 8017cf8:	68bb      	ldr	r3, [r7, #8]
 8017cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017cfc:	6a3b      	ldr	r3, [r7, #32]
 8017cfe:	fa93 f3a3 	rbit	r3, r3
 8017d02:	61fb      	str	r3, [r7, #28]
  return result;
 8017d04:	69fb      	ldr	r3, [r7, #28]
 8017d06:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8017d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d101      	bne.n	8017d12 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8017d0e:	2320      	movs	r3, #32
 8017d10:	e003      	b.n	8017d1a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8017d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d14:	fab3 f383 	clz	r3, r3
 8017d18:	b2db      	uxtb	r3, r3
 8017d1a:	005b      	lsls	r3, r3, #1
 8017d1c:	6879      	ldr	r1, [r7, #4]
 8017d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8017d22:	431a      	orrs	r2, r3
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8017d28:	bf00      	nop
 8017d2a:	372c      	adds	r7, #44	; 0x2c
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d32:	4770      	bx	lr

08017d34 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8017d34:	b480      	push	{r7}
 8017d36:	b08b      	sub	sp, #44	; 0x2c
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	60f8      	str	r0, [r7, #12]
 8017d3c:	60b9      	str	r1, [r7, #8]
 8017d3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	68da      	ldr	r2, [r3, #12]
 8017d44:	68bb      	ldr	r3, [r7, #8]
 8017d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017d48:	697b      	ldr	r3, [r7, #20]
 8017d4a:	fa93 f3a3 	rbit	r3, r3
 8017d4e:	613b      	str	r3, [r7, #16]
  return result;
 8017d50:	693b      	ldr	r3, [r7, #16]
 8017d52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8017d54:	69bb      	ldr	r3, [r7, #24]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d101      	bne.n	8017d5e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8017d5a:	2320      	movs	r3, #32
 8017d5c:	e003      	b.n	8017d66 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8017d5e:	69bb      	ldr	r3, [r7, #24]
 8017d60:	fab3 f383 	clz	r3, r3
 8017d64:	b2db      	uxtb	r3, r3
 8017d66:	005b      	lsls	r3, r3, #1
 8017d68:	2103      	movs	r1, #3
 8017d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8017d6e:	43db      	mvns	r3, r3
 8017d70:	401a      	ands	r2, r3
 8017d72:	68bb      	ldr	r3, [r7, #8]
 8017d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017d76:	6a3b      	ldr	r3, [r7, #32]
 8017d78:	fa93 f3a3 	rbit	r3, r3
 8017d7c:	61fb      	str	r3, [r7, #28]
  return result;
 8017d7e:	69fb      	ldr	r3, [r7, #28]
 8017d80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8017d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d101      	bne.n	8017d8c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8017d88:	2320      	movs	r3, #32
 8017d8a:	e003      	b.n	8017d94 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8017d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d8e:	fab3 f383 	clz	r3, r3
 8017d92:	b2db      	uxtb	r3, r3
 8017d94:	005b      	lsls	r3, r3, #1
 8017d96:	6879      	ldr	r1, [r7, #4]
 8017d98:	fa01 f303 	lsl.w	r3, r1, r3
 8017d9c:	431a      	orrs	r2, r3
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	60da      	str	r2, [r3, #12]
}
 8017da2:	bf00      	nop
 8017da4:	372c      	adds	r7, #44	; 0x2c
 8017da6:	46bd      	mov	sp, r7
 8017da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dac:	4770      	bx	lr

08017dae <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8017dae:	b480      	push	{r7}
 8017db0:	b08b      	sub	sp, #44	; 0x2c
 8017db2:	af00      	add	r7, sp, #0
 8017db4:	60f8      	str	r0, [r7, #12]
 8017db6:	60b9      	str	r1, [r7, #8]
 8017db8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	6a1a      	ldr	r2, [r3, #32]
 8017dbe:	68bb      	ldr	r3, [r7, #8]
 8017dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017dc2:	697b      	ldr	r3, [r7, #20]
 8017dc4:	fa93 f3a3 	rbit	r3, r3
 8017dc8:	613b      	str	r3, [r7, #16]
  return result;
 8017dca:	693b      	ldr	r3, [r7, #16]
 8017dcc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8017dce:	69bb      	ldr	r3, [r7, #24]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d101      	bne.n	8017dd8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8017dd4:	2320      	movs	r3, #32
 8017dd6:	e003      	b.n	8017de0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8017dd8:	69bb      	ldr	r3, [r7, #24]
 8017dda:	fab3 f383 	clz	r3, r3
 8017dde:	b2db      	uxtb	r3, r3
 8017de0:	009b      	lsls	r3, r3, #2
 8017de2:	210f      	movs	r1, #15
 8017de4:	fa01 f303 	lsl.w	r3, r1, r3
 8017de8:	43db      	mvns	r3, r3
 8017dea:	401a      	ands	r2, r3
 8017dec:	68bb      	ldr	r3, [r7, #8]
 8017dee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017df0:	6a3b      	ldr	r3, [r7, #32]
 8017df2:	fa93 f3a3 	rbit	r3, r3
 8017df6:	61fb      	str	r3, [r7, #28]
  return result;
 8017df8:	69fb      	ldr	r3, [r7, #28]
 8017dfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8017dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d101      	bne.n	8017e06 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8017e02:	2320      	movs	r3, #32
 8017e04:	e003      	b.n	8017e0e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8017e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e08:	fab3 f383 	clz	r3, r3
 8017e0c:	b2db      	uxtb	r3, r3
 8017e0e:	009b      	lsls	r3, r3, #2
 8017e10:	6879      	ldr	r1, [r7, #4]
 8017e12:	fa01 f303 	lsl.w	r3, r1, r3
 8017e16:	431a      	orrs	r2, r3
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8017e1c:	bf00      	nop
 8017e1e:	372c      	adds	r7, #44	; 0x2c
 8017e20:	46bd      	mov	sp, r7
 8017e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e26:	4770      	bx	lr

08017e28 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8017e28:	b480      	push	{r7}
 8017e2a:	b08b      	sub	sp, #44	; 0x2c
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	60f8      	str	r0, [r7, #12]
 8017e30:	60b9      	str	r1, [r7, #8]
 8017e32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017e38:	68bb      	ldr	r3, [r7, #8]
 8017e3a:	0a1b      	lsrs	r3, r3, #8
 8017e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017e3e:	697b      	ldr	r3, [r7, #20]
 8017e40:	fa93 f3a3 	rbit	r3, r3
 8017e44:	613b      	str	r3, [r7, #16]
  return result;
 8017e46:	693b      	ldr	r3, [r7, #16]
 8017e48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8017e4a:	69bb      	ldr	r3, [r7, #24]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d101      	bne.n	8017e54 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8017e50:	2320      	movs	r3, #32
 8017e52:	e003      	b.n	8017e5c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8017e54:	69bb      	ldr	r3, [r7, #24]
 8017e56:	fab3 f383 	clz	r3, r3
 8017e5a:	b2db      	uxtb	r3, r3
 8017e5c:	009b      	lsls	r3, r3, #2
 8017e5e:	210f      	movs	r1, #15
 8017e60:	fa01 f303 	lsl.w	r3, r1, r3
 8017e64:	43db      	mvns	r3, r3
 8017e66:	401a      	ands	r2, r3
 8017e68:	68bb      	ldr	r3, [r7, #8]
 8017e6a:	0a1b      	lsrs	r3, r3, #8
 8017e6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017e6e:	6a3b      	ldr	r3, [r7, #32]
 8017e70:	fa93 f3a3 	rbit	r3, r3
 8017e74:	61fb      	str	r3, [r7, #28]
  return result;
 8017e76:	69fb      	ldr	r3, [r7, #28]
 8017e78:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8017e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d101      	bne.n	8017e84 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8017e80:	2320      	movs	r3, #32
 8017e82:	e003      	b.n	8017e8c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8017e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e86:	fab3 f383 	clz	r3, r3
 8017e8a:	b2db      	uxtb	r3, r3
 8017e8c:	009b      	lsls	r3, r3, #2
 8017e8e:	6879      	ldr	r1, [r7, #4]
 8017e90:	fa01 f303 	lsl.w	r3, r1, r3
 8017e94:	431a      	orrs	r2, r3
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8017e9a:	bf00      	nop
 8017e9c:	372c      	adds	r7, #44	; 0x2c
 8017e9e:	46bd      	mov	sp, r7
 8017ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea4:	4770      	bx	lr

08017ea6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8017ea6:	b580      	push	{r7, lr}
 8017ea8:	b088      	sub	sp, #32
 8017eaa:	af00      	add	r7, sp, #0
 8017eac:	6078      	str	r0, [r7, #4]
 8017eae:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8017eb0:	683b      	ldr	r3, [r7, #0]
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017eb6:	693b      	ldr	r3, [r7, #16]
 8017eb8:	fa93 f3a3 	rbit	r3, r3
 8017ebc:	60fb      	str	r3, [r7, #12]
  return result;
 8017ebe:	68fb      	ldr	r3, [r7, #12]
 8017ec0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8017ec2:	697b      	ldr	r3, [r7, #20]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d101      	bne.n	8017ecc <LL_GPIO_Init+0x26>
    return 32U;
 8017ec8:	2320      	movs	r3, #32
 8017eca:	e003      	b.n	8017ed4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8017ecc:	697b      	ldr	r3, [r7, #20]
 8017ece:	fab3 f383 	clz	r3, r3
 8017ed2:	b2db      	uxtb	r3, r3
 8017ed4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8017ed6:	e047      	b.n	8017f68 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8017ed8:	683b      	ldr	r3, [r7, #0]
 8017eda:	681a      	ldr	r2, [r3, #0]
 8017edc:	2101      	movs	r1, #1
 8017ede:	69fb      	ldr	r3, [r7, #28]
 8017ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8017ee4:	4013      	ands	r3, r2
 8017ee6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8017ee8:	69bb      	ldr	r3, [r7, #24]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d039      	beq.n	8017f62 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8017eee:	683b      	ldr	r3, [r7, #0]
 8017ef0:	685b      	ldr	r3, [r3, #4]
 8017ef2:	2b01      	cmp	r3, #1
 8017ef4:	d003      	beq.n	8017efe <LL_GPIO_Init+0x58>
 8017ef6:	683b      	ldr	r3, [r7, #0]
 8017ef8:	685b      	ldr	r3, [r3, #4]
 8017efa:	2b02      	cmp	r3, #2
 8017efc:	d10d      	bne.n	8017f1a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8017efe:	683b      	ldr	r3, [r7, #0]
 8017f00:	689b      	ldr	r3, [r3, #8]
 8017f02:	461a      	mov	r2, r3
 8017f04:	69b9      	ldr	r1, [r7, #24]
 8017f06:	6878      	ldr	r0, [r7, #4]
 8017f08:	f7ff fed7 	bl	8017cba <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8017f0c:	683b      	ldr	r3, [r7, #0]
 8017f0e:	68db      	ldr	r3, [r3, #12]
 8017f10:	461a      	mov	r2, r3
 8017f12:	69b9      	ldr	r1, [r7, #24]
 8017f14:	6878      	ldr	r0, [r7, #4]
 8017f16:	f7ff feb8 	bl	8017c8a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8017f1a:	683b      	ldr	r3, [r7, #0]
 8017f1c:	691b      	ldr	r3, [r3, #16]
 8017f1e:	461a      	mov	r2, r3
 8017f20:	69b9      	ldr	r1, [r7, #24]
 8017f22:	6878      	ldr	r0, [r7, #4]
 8017f24:	f7ff ff06 	bl	8017d34 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8017f28:	683b      	ldr	r3, [r7, #0]
 8017f2a:	685b      	ldr	r3, [r3, #4]
 8017f2c:	2b02      	cmp	r3, #2
 8017f2e:	d111      	bne.n	8017f54 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8017f30:	69bb      	ldr	r3, [r7, #24]
 8017f32:	2bff      	cmp	r3, #255	; 0xff
 8017f34:	d807      	bhi.n	8017f46 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8017f36:	683b      	ldr	r3, [r7, #0]
 8017f38:	695b      	ldr	r3, [r3, #20]
 8017f3a:	461a      	mov	r2, r3
 8017f3c:	69b9      	ldr	r1, [r7, #24]
 8017f3e:	6878      	ldr	r0, [r7, #4]
 8017f40:	f7ff ff35 	bl	8017dae <LL_GPIO_SetAFPin_0_7>
 8017f44:	e006      	b.n	8017f54 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8017f46:	683b      	ldr	r3, [r7, #0]
 8017f48:	695b      	ldr	r3, [r3, #20]
 8017f4a:	461a      	mov	r2, r3
 8017f4c:	69b9      	ldr	r1, [r7, #24]
 8017f4e:	6878      	ldr	r0, [r7, #4]
 8017f50:	f7ff ff6a 	bl	8017e28 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8017f54:	683b      	ldr	r3, [r7, #0]
 8017f56:	685b      	ldr	r3, [r3, #4]
 8017f58:	461a      	mov	r2, r3
 8017f5a:	69b9      	ldr	r1, [r7, #24]
 8017f5c:	6878      	ldr	r0, [r7, #4]
 8017f5e:	f7ff fe57 	bl	8017c10 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8017f62:	69fb      	ldr	r3, [r7, #28]
 8017f64:	3301      	adds	r3, #1
 8017f66:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8017f68:	683b      	ldr	r3, [r7, #0]
 8017f6a:	681a      	ldr	r2, [r3, #0]
 8017f6c:	69fb      	ldr	r3, [r7, #28]
 8017f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d1b0      	bne.n	8017ed8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8017f76:	2300      	movs	r3, #0
}
 8017f78:	4618      	mov	r0, r3
 8017f7a:	3720      	adds	r7, #32
 8017f7c:	46bd      	mov	sp, r7
 8017f7e:	bd80      	pop	{r7, pc}

08017f80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8017f80:	b480      	push	{r7}
 8017f82:	b085      	sub	sp, #20
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8017f88:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8017f8c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8017f94:	b29a      	uxth	r2, r3
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	b29b      	uxth	r3, r3
 8017f9a:	43db      	mvns	r3, r3
 8017f9c:	b29b      	uxth	r3, r3
 8017f9e:	4013      	ands	r3, r2
 8017fa0:	b29a      	uxth	r2, r3
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8017fa8:	2300      	movs	r3, #0
}
 8017faa:	4618      	mov	r0, r3
 8017fac:	3714      	adds	r7, #20
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb4:	4770      	bx	lr

08017fb6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8017fb6:	b084      	sub	sp, #16
 8017fb8:	b480      	push	{r7}
 8017fba:	b083      	sub	sp, #12
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	6078      	str	r0, [r7, #4]
 8017fc0:	f107 0014 	add.w	r0, r7, #20
 8017fc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	2201      	movs	r2, #1
 8017fcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	2200      	movs	r2, #0
 8017fd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	2200      	movs	r2, #0
 8017fdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8017fe8:	2300      	movs	r3, #0
}
 8017fea:	4618      	mov	r0, r3
 8017fec:	370c      	adds	r7, #12
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff4:	b004      	add	sp, #16
 8017ff6:	4770      	bx	lr

08017ff8 <__NVIC_SetPriority>:
{
 8017ff8:	b480      	push	{r7}
 8017ffa:	b083      	sub	sp, #12
 8017ffc:	af00      	add	r7, sp, #0
 8017ffe:	4603      	mov	r3, r0
 8018000:	6039      	str	r1, [r7, #0]
 8018002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018008:	2b00      	cmp	r3, #0
 801800a:	db0a      	blt.n	8018022 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801800c:	683b      	ldr	r3, [r7, #0]
 801800e:	b2da      	uxtb	r2, r3
 8018010:	490c      	ldr	r1, [pc, #48]	; (8018044 <__NVIC_SetPriority+0x4c>)
 8018012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018016:	0152      	lsls	r2, r2, #5
 8018018:	b2d2      	uxtb	r2, r2
 801801a:	440b      	add	r3, r1
 801801c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8018020:	e00a      	b.n	8018038 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018022:	683b      	ldr	r3, [r7, #0]
 8018024:	b2da      	uxtb	r2, r3
 8018026:	4908      	ldr	r1, [pc, #32]	; (8018048 <__NVIC_SetPriority+0x50>)
 8018028:	79fb      	ldrb	r3, [r7, #7]
 801802a:	f003 030f 	and.w	r3, r3, #15
 801802e:	3b04      	subs	r3, #4
 8018030:	0152      	lsls	r2, r2, #5
 8018032:	b2d2      	uxtb	r2, r2
 8018034:	440b      	add	r3, r1
 8018036:	761a      	strb	r2, [r3, #24]
}
 8018038:	bf00      	nop
 801803a:	370c      	adds	r7, #12
 801803c:	46bd      	mov	sp, r7
 801803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018042:	4770      	bx	lr
 8018044:	e000e100 	.word	0xe000e100
 8018048:	e000ed00 	.word	0xe000ed00

0801804c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801804c:	b580      	push	{r7, lr}
 801804e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8018050:	4b05      	ldr	r3, [pc, #20]	; (8018068 <SysTick_Handler+0x1c>)
 8018052:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8018054:	f001 fbe0 	bl	8019818 <xTaskGetSchedulerState>
 8018058:	4603      	mov	r3, r0
 801805a:	2b01      	cmp	r3, #1
 801805c:	d001      	beq.n	8018062 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801805e:	f002 f835 	bl	801a0cc <xPortSysTickHandler>
  }
}
 8018062:	bf00      	nop
 8018064:	bd80      	pop	{r7, pc}
 8018066:	bf00      	nop
 8018068:	e000e010 	.word	0xe000e010

0801806c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801806c:	b580      	push	{r7, lr}
 801806e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8018070:	2100      	movs	r1, #0
 8018072:	f06f 0004 	mvn.w	r0, #4
 8018076:	f7ff ffbf 	bl	8017ff8 <__NVIC_SetPriority>
#endif
}
 801807a:	bf00      	nop
 801807c:	bd80      	pop	{r7, pc}
	...

08018080 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8018080:	b480      	push	{r7}
 8018082:	b083      	sub	sp, #12
 8018084:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018086:	f3ef 8305 	mrs	r3, IPSR
 801808a:	603b      	str	r3, [r7, #0]
  return(result);
 801808c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801808e:	2b00      	cmp	r3, #0
 8018090:	d003      	beq.n	801809a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8018092:	f06f 0305 	mvn.w	r3, #5
 8018096:	607b      	str	r3, [r7, #4]
 8018098:	e00c      	b.n	80180b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801809a:	4b0a      	ldr	r3, [pc, #40]	; (80180c4 <osKernelInitialize+0x44>)
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d105      	bne.n	80180ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80180a2:	4b08      	ldr	r3, [pc, #32]	; (80180c4 <osKernelInitialize+0x44>)
 80180a4:	2201      	movs	r2, #1
 80180a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80180a8:	2300      	movs	r3, #0
 80180aa:	607b      	str	r3, [r7, #4]
 80180ac:	e002      	b.n	80180b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80180ae:	f04f 33ff 	mov.w	r3, #4294967295
 80180b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80180b4:	687b      	ldr	r3, [r7, #4]
}
 80180b6:	4618      	mov	r0, r3
 80180b8:	370c      	adds	r7, #12
 80180ba:	46bd      	mov	sp, r7
 80180bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c0:	4770      	bx	lr
 80180c2:	bf00      	nop
 80180c4:	200009b8 	.word	0x200009b8

080180c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b082      	sub	sp, #8
 80180cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80180ce:	f3ef 8305 	mrs	r3, IPSR
 80180d2:	603b      	str	r3, [r7, #0]
  return(result);
 80180d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d003      	beq.n	80180e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80180da:	f06f 0305 	mvn.w	r3, #5
 80180de:	607b      	str	r3, [r7, #4]
 80180e0:	e010      	b.n	8018104 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80180e2:	4b0b      	ldr	r3, [pc, #44]	; (8018110 <osKernelStart+0x48>)
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	2b01      	cmp	r3, #1
 80180e8:	d109      	bne.n	80180fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80180ea:	f7ff ffbf 	bl	801806c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80180ee:	4b08      	ldr	r3, [pc, #32]	; (8018110 <osKernelStart+0x48>)
 80180f0:	2202      	movs	r2, #2
 80180f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80180f4:	f000 ffb2 	bl	801905c <vTaskStartScheduler>
      stat = osOK;
 80180f8:	2300      	movs	r3, #0
 80180fa:	607b      	str	r3, [r7, #4]
 80180fc:	e002      	b.n	8018104 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80180fe:	f04f 33ff 	mov.w	r3, #4294967295
 8018102:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8018104:	687b      	ldr	r3, [r7, #4]
}
 8018106:	4618      	mov	r0, r3
 8018108:	3708      	adds	r7, #8
 801810a:	46bd      	mov	sp, r7
 801810c:	bd80      	pop	{r7, pc}
 801810e:	bf00      	nop
 8018110:	200009b8 	.word	0x200009b8

08018114 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8018114:	b580      	push	{r7, lr}
 8018116:	b08e      	sub	sp, #56	; 0x38
 8018118:	af04      	add	r7, sp, #16
 801811a:	60f8      	str	r0, [r7, #12]
 801811c:	60b9      	str	r1, [r7, #8]
 801811e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8018120:	2300      	movs	r3, #0
 8018122:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018124:	f3ef 8305 	mrs	r3, IPSR
 8018128:	617b      	str	r3, [r7, #20]
  return(result);
 801812a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801812c:	2b00      	cmp	r3, #0
 801812e:	d17e      	bne.n	801822e <osThreadNew+0x11a>
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d07b      	beq.n	801822e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8018136:	2380      	movs	r3, #128	; 0x80
 8018138:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801813a:	2318      	movs	r3, #24
 801813c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801813e:	2300      	movs	r3, #0
 8018140:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8018142:	f04f 33ff 	mov.w	r3, #4294967295
 8018146:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d045      	beq.n	80181da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d002      	beq.n	801815c <osThreadNew+0x48>
        name = attr->name;
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	699b      	ldr	r3, [r3, #24]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d002      	beq.n	801816a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	699b      	ldr	r3, [r3, #24]
 8018168:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801816a:	69fb      	ldr	r3, [r7, #28]
 801816c:	2b00      	cmp	r3, #0
 801816e:	d008      	beq.n	8018182 <osThreadNew+0x6e>
 8018170:	69fb      	ldr	r3, [r7, #28]
 8018172:	2b38      	cmp	r3, #56	; 0x38
 8018174:	d805      	bhi.n	8018182 <osThreadNew+0x6e>
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	685b      	ldr	r3, [r3, #4]
 801817a:	f003 0301 	and.w	r3, r3, #1
 801817e:	2b00      	cmp	r3, #0
 8018180:	d001      	beq.n	8018186 <osThreadNew+0x72>
        return (NULL);
 8018182:	2300      	movs	r3, #0
 8018184:	e054      	b.n	8018230 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	695b      	ldr	r3, [r3, #20]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d003      	beq.n	8018196 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	695b      	ldr	r3, [r3, #20]
 8018192:	089b      	lsrs	r3, r3, #2
 8018194:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	689b      	ldr	r3, [r3, #8]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d00e      	beq.n	80181bc <osThreadNew+0xa8>
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	68db      	ldr	r3, [r3, #12]
 80181a2:	2b5b      	cmp	r3, #91	; 0x5b
 80181a4:	d90a      	bls.n	80181bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d006      	beq.n	80181bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	695b      	ldr	r3, [r3, #20]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d002      	beq.n	80181bc <osThreadNew+0xa8>
        mem = 1;
 80181b6:	2301      	movs	r3, #1
 80181b8:	61bb      	str	r3, [r7, #24]
 80181ba:	e010      	b.n	80181de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	689b      	ldr	r3, [r3, #8]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d10c      	bne.n	80181de <osThreadNew+0xca>
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	68db      	ldr	r3, [r3, #12]
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d108      	bne.n	80181de <osThreadNew+0xca>
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	691b      	ldr	r3, [r3, #16]
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d104      	bne.n	80181de <osThreadNew+0xca>
          mem = 0;
 80181d4:	2300      	movs	r3, #0
 80181d6:	61bb      	str	r3, [r7, #24]
 80181d8:	e001      	b.n	80181de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80181da:	2300      	movs	r3, #0
 80181dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80181de:	69bb      	ldr	r3, [r7, #24]
 80181e0:	2b01      	cmp	r3, #1
 80181e2:	d110      	bne.n	8018206 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80181e8:	687a      	ldr	r2, [r7, #4]
 80181ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80181ec:	9202      	str	r2, [sp, #8]
 80181ee:	9301      	str	r3, [sp, #4]
 80181f0:	69fb      	ldr	r3, [r7, #28]
 80181f2:	9300      	str	r3, [sp, #0]
 80181f4:	68bb      	ldr	r3, [r7, #8]
 80181f6:	6a3a      	ldr	r2, [r7, #32]
 80181f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80181fa:	68f8      	ldr	r0, [r7, #12]
 80181fc:	f000 fd30 	bl	8018c60 <xTaskCreateStatic>
 8018200:	4603      	mov	r3, r0
 8018202:	613b      	str	r3, [r7, #16]
 8018204:	e013      	b.n	801822e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8018206:	69bb      	ldr	r3, [r7, #24]
 8018208:	2b00      	cmp	r3, #0
 801820a:	d110      	bne.n	801822e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801820c:	6a3b      	ldr	r3, [r7, #32]
 801820e:	b29a      	uxth	r2, r3
 8018210:	f107 0310 	add.w	r3, r7, #16
 8018214:	9301      	str	r3, [sp, #4]
 8018216:	69fb      	ldr	r3, [r7, #28]
 8018218:	9300      	str	r3, [sp, #0]
 801821a:	68bb      	ldr	r3, [r7, #8]
 801821c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801821e:	68f8      	ldr	r0, [r7, #12]
 8018220:	f000 fd63 	bl	8018cea <xTaskCreate>
 8018224:	4603      	mov	r3, r0
 8018226:	2b01      	cmp	r3, #1
 8018228:	d001      	beq.n	801822e <osThreadNew+0x11a>
            hTask = NULL;
 801822a:	2300      	movs	r3, #0
 801822c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801822e:	693b      	ldr	r3, [r7, #16]
}
 8018230:	4618      	mov	r0, r3
 8018232:	3728      	adds	r7, #40	; 0x28
 8018234:	46bd      	mov	sp, r7
 8018236:	bd80      	pop	{r7, pc}

08018238 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8018238:	b480      	push	{r7}
 801823a:	b085      	sub	sp, #20
 801823c:	af00      	add	r7, sp, #0
 801823e:	60f8      	str	r0, [r7, #12]
 8018240:	60b9      	str	r1, [r7, #8]
 8018242:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	4a07      	ldr	r2, [pc, #28]	; (8018264 <vApplicationGetIdleTaskMemory+0x2c>)
 8018248:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801824a:	68bb      	ldr	r3, [r7, #8]
 801824c:	4a06      	ldr	r2, [pc, #24]	; (8018268 <vApplicationGetIdleTaskMemory+0x30>)
 801824e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	2280      	movs	r2, #128	; 0x80
 8018254:	601a      	str	r2, [r3, #0]
}
 8018256:	bf00      	nop
 8018258:	3714      	adds	r7, #20
 801825a:	46bd      	mov	sp, r7
 801825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018260:	4770      	bx	lr
 8018262:	bf00      	nop
 8018264:	200009bc 	.word	0x200009bc
 8018268:	20000a18 	.word	0x20000a18

0801826c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801826c:	b480      	push	{r7}
 801826e:	b085      	sub	sp, #20
 8018270:	af00      	add	r7, sp, #0
 8018272:	60f8      	str	r0, [r7, #12]
 8018274:	60b9      	str	r1, [r7, #8]
 8018276:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	4a07      	ldr	r2, [pc, #28]	; (8018298 <vApplicationGetTimerTaskMemory+0x2c>)
 801827c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801827e:	68bb      	ldr	r3, [r7, #8]
 8018280:	4a06      	ldr	r2, [pc, #24]	; (801829c <vApplicationGetTimerTaskMemory+0x30>)
 8018282:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	f44f 7280 	mov.w	r2, #256	; 0x100
 801828a:	601a      	str	r2, [r3, #0]
}
 801828c:	bf00      	nop
 801828e:	3714      	adds	r7, #20
 8018290:	46bd      	mov	sp, r7
 8018292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018296:	4770      	bx	lr
 8018298:	20000c18 	.word	0x20000c18
 801829c:	20000c74 	.word	0x20000c74

080182a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80182a0:	b480      	push	{r7}
 80182a2:	b083      	sub	sp, #12
 80182a4:	af00      	add	r7, sp, #0
 80182a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	f103 0208 	add.w	r2, r3, #8
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	f04f 32ff 	mov.w	r2, #4294967295
 80182b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	f103 0208 	add.w	r2, r3, #8
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	f103 0208 	add.w	r2, r3, #8
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	2200      	movs	r2, #0
 80182d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80182d4:	bf00      	nop
 80182d6:	370c      	adds	r7, #12
 80182d8:	46bd      	mov	sp, r7
 80182da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182de:	4770      	bx	lr

080182e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80182e0:	b480      	push	{r7}
 80182e2:	b083      	sub	sp, #12
 80182e4:	af00      	add	r7, sp, #0
 80182e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	2200      	movs	r2, #0
 80182ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80182ee:	bf00      	nop
 80182f0:	370c      	adds	r7, #12
 80182f2:	46bd      	mov	sp, r7
 80182f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f8:	4770      	bx	lr

080182fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80182fa:	b480      	push	{r7}
 80182fc:	b085      	sub	sp, #20
 80182fe:	af00      	add	r7, sp, #0
 8018300:	6078      	str	r0, [r7, #4]
 8018302:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	685b      	ldr	r3, [r3, #4]
 8018308:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801830a:	683b      	ldr	r3, [r7, #0]
 801830c:	68fa      	ldr	r2, [r7, #12]
 801830e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	689a      	ldr	r2, [r3, #8]
 8018314:	683b      	ldr	r3, [r7, #0]
 8018316:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	689b      	ldr	r3, [r3, #8]
 801831c:	683a      	ldr	r2, [r7, #0]
 801831e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	683a      	ldr	r2, [r7, #0]
 8018324:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018326:	683b      	ldr	r3, [r7, #0]
 8018328:	687a      	ldr	r2, [r7, #4]
 801832a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	1c5a      	adds	r2, r3, #1
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	601a      	str	r2, [r3, #0]
}
 8018336:	bf00      	nop
 8018338:	3714      	adds	r7, #20
 801833a:	46bd      	mov	sp, r7
 801833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018340:	4770      	bx	lr

08018342 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018342:	b480      	push	{r7}
 8018344:	b085      	sub	sp, #20
 8018346:	af00      	add	r7, sp, #0
 8018348:	6078      	str	r0, [r7, #4]
 801834a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801834c:	683b      	ldr	r3, [r7, #0]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018352:	68bb      	ldr	r3, [r7, #8]
 8018354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018358:	d103      	bne.n	8018362 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	691b      	ldr	r3, [r3, #16]
 801835e:	60fb      	str	r3, [r7, #12]
 8018360:	e00c      	b.n	801837c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	3308      	adds	r3, #8
 8018366:	60fb      	str	r3, [r7, #12]
 8018368:	e002      	b.n	8018370 <vListInsert+0x2e>
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	685b      	ldr	r3, [r3, #4]
 801836e:	60fb      	str	r3, [r7, #12]
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	685b      	ldr	r3, [r3, #4]
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	68ba      	ldr	r2, [r7, #8]
 8018378:	429a      	cmp	r2, r3
 801837a:	d2f6      	bcs.n	801836a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	685a      	ldr	r2, [r3, #4]
 8018380:	683b      	ldr	r3, [r7, #0]
 8018382:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018384:	683b      	ldr	r3, [r7, #0]
 8018386:	685b      	ldr	r3, [r3, #4]
 8018388:	683a      	ldr	r2, [r7, #0]
 801838a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801838c:	683b      	ldr	r3, [r7, #0]
 801838e:	68fa      	ldr	r2, [r7, #12]
 8018390:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	683a      	ldr	r2, [r7, #0]
 8018396:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018398:	683b      	ldr	r3, [r7, #0]
 801839a:	687a      	ldr	r2, [r7, #4]
 801839c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	1c5a      	adds	r2, r3, #1
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	601a      	str	r2, [r3, #0]
}
 80183a8:	bf00      	nop
 80183aa:	3714      	adds	r7, #20
 80183ac:	46bd      	mov	sp, r7
 80183ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183b2:	4770      	bx	lr

080183b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80183b4:	b480      	push	{r7}
 80183b6:	b085      	sub	sp, #20
 80183b8:	af00      	add	r7, sp, #0
 80183ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	691b      	ldr	r3, [r3, #16]
 80183c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	685b      	ldr	r3, [r3, #4]
 80183c6:	687a      	ldr	r2, [r7, #4]
 80183c8:	6892      	ldr	r2, [r2, #8]
 80183ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	689b      	ldr	r3, [r3, #8]
 80183d0:	687a      	ldr	r2, [r7, #4]
 80183d2:	6852      	ldr	r2, [r2, #4]
 80183d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	685b      	ldr	r3, [r3, #4]
 80183da:	687a      	ldr	r2, [r7, #4]
 80183dc:	429a      	cmp	r2, r3
 80183de:	d103      	bne.n	80183e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	689a      	ldr	r2, [r3, #8]
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	2200      	movs	r2, #0
 80183ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	1e5a      	subs	r2, r3, #1
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	681b      	ldr	r3, [r3, #0]
}
 80183fc:	4618      	mov	r0, r3
 80183fe:	3714      	adds	r7, #20
 8018400:	46bd      	mov	sp, r7
 8018402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018406:	4770      	bx	lr

08018408 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018408:	b580      	push	{r7, lr}
 801840a:	b084      	sub	sp, #16
 801840c:	af00      	add	r7, sp, #0
 801840e:	6078      	str	r0, [r7, #4]
 8018410:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d102      	bne.n	8018422 <xQueueGenericReset+0x1a>
 801841c:	f001 ff5c 	bl	801a2d8 <ulSetInterruptMask>
 8018420:	e7fe      	b.n	8018420 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8018422:	f001 fe27 	bl	801a074 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	681a      	ldr	r2, [r3, #0]
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801842e:	68f9      	ldr	r1, [r7, #12]
 8018430:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018432:	fb01 f303 	mul.w	r3, r1, r3
 8018436:	441a      	add	r2, r3
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801843c:	68fb      	ldr	r3, [r7, #12]
 801843e:	2200      	movs	r2, #0
 8018440:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	681a      	ldr	r2, [r3, #0]
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	681a      	ldr	r2, [r3, #0]
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018452:	3b01      	subs	r3, #1
 8018454:	68f9      	ldr	r1, [r7, #12]
 8018456:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018458:	fb01 f303 	mul.w	r3, r1, r3
 801845c:	441a      	add	r2, r3
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	22ff      	movs	r2, #255	; 0xff
 8018466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	22ff      	movs	r2, #255	; 0xff
 801846e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8018472:	683b      	ldr	r3, [r7, #0]
 8018474:	2b00      	cmp	r3, #0
 8018476:	d10e      	bne.n	8018496 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	691b      	ldr	r3, [r3, #16]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d014      	beq.n	80184aa <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	3310      	adds	r3, #16
 8018484:	4618      	mov	r0, r3
 8018486:	f001 f831 	bl	80194ec <xTaskRemoveFromEventList>
 801848a:	4603      	mov	r3, r0
 801848c:	2b00      	cmp	r3, #0
 801848e:	d00c      	beq.n	80184aa <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8018490:	f001 fdde 	bl	801a050 <vPortYield>
 8018494:	e009      	b.n	80184aa <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	3310      	adds	r3, #16
 801849a:	4618      	mov	r0, r3
 801849c:	f7ff ff00 	bl	80182a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80184a0:	68fb      	ldr	r3, [r7, #12]
 80184a2:	3324      	adds	r3, #36	; 0x24
 80184a4:	4618      	mov	r0, r3
 80184a6:	f7ff fefb 	bl	80182a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80184aa:	f001 fdf5 	bl	801a098 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80184ae:	2301      	movs	r3, #1
}
 80184b0:	4618      	mov	r0, r3
 80184b2:	3710      	adds	r7, #16
 80184b4:	46bd      	mov	sp, r7
 80184b6:	bd80      	pop	{r7, pc}

080184b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80184b8:	b580      	push	{r7, lr}
 80184ba:	b088      	sub	sp, #32
 80184bc:	af02      	add	r7, sp, #8
 80184be:	60f8      	str	r0, [r7, #12]
 80184c0:	60b9      	str	r1, [r7, #8]
 80184c2:	607a      	str	r2, [r7, #4]
 80184c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d102      	bne.n	80184d2 <xQueueGenericCreateStatic+0x1a>
 80184cc:	f001 ff04 	bl	801a2d8 <ulSetInterruptMask>
 80184d0:	e7fe      	b.n	80184d0 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80184d2:	683b      	ldr	r3, [r7, #0]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d102      	bne.n	80184de <xQueueGenericCreateStatic+0x26>
 80184d8:	f001 fefe 	bl	801a2d8 <ulSetInterruptMask>
 80184dc:	e7fe      	b.n	80184dc <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d002      	beq.n	80184ea <xQueueGenericCreateStatic+0x32>
 80184e4:	68bb      	ldr	r3, [r7, #8]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d001      	beq.n	80184ee <xQueueGenericCreateStatic+0x36>
 80184ea:	2301      	movs	r3, #1
 80184ec:	e000      	b.n	80184f0 <xQueueGenericCreateStatic+0x38>
 80184ee:	2300      	movs	r3, #0
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d102      	bne.n	80184fa <xQueueGenericCreateStatic+0x42>
 80184f4:	f001 fef0 	bl	801a2d8 <ulSetInterruptMask>
 80184f8:	e7fe      	b.n	80184f8 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d102      	bne.n	8018506 <xQueueGenericCreateStatic+0x4e>
 8018500:	68bb      	ldr	r3, [r7, #8]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d101      	bne.n	801850a <xQueueGenericCreateStatic+0x52>
 8018506:	2301      	movs	r3, #1
 8018508:	e000      	b.n	801850c <xQueueGenericCreateStatic+0x54>
 801850a:	2300      	movs	r3, #0
 801850c:	2b00      	cmp	r3, #0
 801850e:	d102      	bne.n	8018516 <xQueueGenericCreateStatic+0x5e>
 8018510:	f001 fee2 	bl	801a2d8 <ulSetInterruptMask>
 8018514:	e7fe      	b.n	8018514 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018516:	2350      	movs	r3, #80	; 0x50
 8018518:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 801851a:	693b      	ldr	r3, [r7, #16]
 801851c:	2b50      	cmp	r3, #80	; 0x50
 801851e:	d002      	beq.n	8018526 <xQueueGenericCreateStatic+0x6e>
 8018520:	f001 feda 	bl	801a2d8 <ulSetInterruptMask>
 8018524:	e7fe      	b.n	8018524 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018526:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018528:	683b      	ldr	r3, [r7, #0]
 801852a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 801852c:	697b      	ldr	r3, [r7, #20]
 801852e:	2b00      	cmp	r3, #0
 8018530:	d00d      	beq.n	801854e <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018532:	697b      	ldr	r3, [r7, #20]
 8018534:	2201      	movs	r2, #1
 8018536:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801853a:	f897 2020 	ldrb.w	r2, [r7, #32]
 801853e:	697b      	ldr	r3, [r7, #20]
 8018540:	9300      	str	r3, [sp, #0]
 8018542:	4613      	mov	r3, r2
 8018544:	687a      	ldr	r2, [r7, #4]
 8018546:	68b9      	ldr	r1, [r7, #8]
 8018548:	68f8      	ldr	r0, [r7, #12]
 801854a:	f000 f805 	bl	8018558 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801854e:	697b      	ldr	r3, [r7, #20]
	}
 8018550:	4618      	mov	r0, r3
 8018552:	3718      	adds	r7, #24
 8018554:	46bd      	mov	sp, r7
 8018556:	bd80      	pop	{r7, pc}

08018558 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018558:	b580      	push	{r7, lr}
 801855a:	b084      	sub	sp, #16
 801855c:	af00      	add	r7, sp, #0
 801855e:	60f8      	str	r0, [r7, #12]
 8018560:	60b9      	str	r1, [r7, #8]
 8018562:	607a      	str	r2, [r7, #4]
 8018564:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8018566:	68bb      	ldr	r3, [r7, #8]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d103      	bne.n	8018574 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801856c:	69bb      	ldr	r3, [r7, #24]
 801856e:	69ba      	ldr	r2, [r7, #24]
 8018570:	601a      	str	r2, [r3, #0]
 8018572:	e002      	b.n	801857a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018574:	69bb      	ldr	r3, [r7, #24]
 8018576:	687a      	ldr	r2, [r7, #4]
 8018578:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801857a:	69bb      	ldr	r3, [r7, #24]
 801857c:	68fa      	ldr	r2, [r7, #12]
 801857e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018580:	69bb      	ldr	r3, [r7, #24]
 8018582:	68ba      	ldr	r2, [r7, #8]
 8018584:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018586:	2101      	movs	r1, #1
 8018588:	69b8      	ldr	r0, [r7, #24]
 801858a:	f7ff ff3d 	bl	8018408 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801858e:	69bb      	ldr	r3, [r7, #24]
 8018590:	78fa      	ldrb	r2, [r7, #3]
 8018592:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018596:	bf00      	nop
 8018598:	3710      	adds	r7, #16
 801859a:	46bd      	mov	sp, r7
 801859c:	bd80      	pop	{r7, pc}

0801859e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801859e:	b580      	push	{r7, lr}
 80185a0:	b08a      	sub	sp, #40	; 0x28
 80185a2:	af00      	add	r7, sp, #0
 80185a4:	60f8      	str	r0, [r7, #12]
 80185a6:	60b9      	str	r1, [r7, #8]
 80185a8:	607a      	str	r2, [r7, #4]
 80185aa:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80185ac:	2300      	movs	r3, #0
 80185ae:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80185b4:	6a3b      	ldr	r3, [r7, #32]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d102      	bne.n	80185c0 <xQueueGenericSend+0x22>
 80185ba:	f001 fe8d 	bl	801a2d8 <ulSetInterruptMask>
 80185be:	e7fe      	b.n	80185be <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80185c0:	68bb      	ldr	r3, [r7, #8]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d103      	bne.n	80185ce <xQueueGenericSend+0x30>
 80185c6:	6a3b      	ldr	r3, [r7, #32]
 80185c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d101      	bne.n	80185d2 <xQueueGenericSend+0x34>
 80185ce:	2301      	movs	r3, #1
 80185d0:	e000      	b.n	80185d4 <xQueueGenericSend+0x36>
 80185d2:	2300      	movs	r3, #0
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d102      	bne.n	80185de <xQueueGenericSend+0x40>
 80185d8:	f001 fe7e 	bl	801a2d8 <ulSetInterruptMask>
 80185dc:	e7fe      	b.n	80185dc <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80185de:	683b      	ldr	r3, [r7, #0]
 80185e0:	2b02      	cmp	r3, #2
 80185e2:	d103      	bne.n	80185ec <xQueueGenericSend+0x4e>
 80185e4:	6a3b      	ldr	r3, [r7, #32]
 80185e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80185e8:	2b01      	cmp	r3, #1
 80185ea:	d101      	bne.n	80185f0 <xQueueGenericSend+0x52>
 80185ec:	2301      	movs	r3, #1
 80185ee:	e000      	b.n	80185f2 <xQueueGenericSend+0x54>
 80185f0:	2300      	movs	r3, #0
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d102      	bne.n	80185fc <xQueueGenericSend+0x5e>
 80185f6:	f001 fe6f 	bl	801a2d8 <ulSetInterruptMask>
 80185fa:	e7fe      	b.n	80185fa <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80185fc:	f001 f90c 	bl	8019818 <xTaskGetSchedulerState>
 8018600:	4603      	mov	r3, r0
 8018602:	2b00      	cmp	r3, #0
 8018604:	d102      	bne.n	801860c <xQueueGenericSend+0x6e>
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d101      	bne.n	8018610 <xQueueGenericSend+0x72>
 801860c:	2301      	movs	r3, #1
 801860e:	e000      	b.n	8018612 <xQueueGenericSend+0x74>
 8018610:	2300      	movs	r3, #0
 8018612:	2b00      	cmp	r3, #0
 8018614:	d102      	bne.n	801861c <xQueueGenericSend+0x7e>
 8018616:	f001 fe5f 	bl	801a2d8 <ulSetInterruptMask>
 801861a:	e7fe      	b.n	801861a <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801861c:	f001 fd2a 	bl	801a074 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018620:	6a3b      	ldr	r3, [r7, #32]
 8018622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018624:	6a3b      	ldr	r3, [r7, #32]
 8018626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018628:	429a      	cmp	r2, r3
 801862a:	d302      	bcc.n	8018632 <xQueueGenericSend+0x94>
 801862c:	683b      	ldr	r3, [r7, #0]
 801862e:	2b02      	cmp	r3, #2
 8018630:	d11d      	bne.n	801866e <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018632:	683a      	ldr	r2, [r7, #0]
 8018634:	68b9      	ldr	r1, [r7, #8]
 8018636:	6a38      	ldr	r0, [r7, #32]
 8018638:	f000 f9a4 	bl	8018984 <prvCopyDataToQueue>
 801863c:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801863e:	6a3b      	ldr	r3, [r7, #32]
 8018640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018642:	2b00      	cmp	r3, #0
 8018644:	d00a      	beq.n	801865c <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018646:	6a3b      	ldr	r3, [r7, #32]
 8018648:	3324      	adds	r3, #36	; 0x24
 801864a:	4618      	mov	r0, r3
 801864c:	f000 ff4e 	bl	80194ec <xTaskRemoveFromEventList>
 8018650:	4603      	mov	r3, r0
 8018652:	2b00      	cmp	r3, #0
 8018654:	d007      	beq.n	8018666 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018656:	f001 fcfb 	bl	801a050 <vPortYield>
 801865a:	e004      	b.n	8018666 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801865c:	69fb      	ldr	r3, [r7, #28]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d001      	beq.n	8018666 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8018662:	f001 fcf5 	bl	801a050 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8018666:	f001 fd17 	bl	801a098 <vPortExitCritical>
				return pdPASS;
 801866a:	2301      	movs	r3, #1
 801866c:	e05c      	b.n	8018728 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	2b00      	cmp	r3, #0
 8018672:	d103      	bne.n	801867c <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018674:	f001 fd10 	bl	801a098 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8018678:	2300      	movs	r3, #0
 801867a:	e055      	b.n	8018728 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801867e:	2b00      	cmp	r3, #0
 8018680:	d106      	bne.n	8018690 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018682:	f107 0314 	add.w	r3, r7, #20
 8018686:	4618      	mov	r0, r3
 8018688:	f000 ff8c 	bl	80195a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801868c:	2301      	movs	r3, #1
 801868e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018690:	f001 fd02 	bl	801a098 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018694:	f000 fd38 	bl	8019108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018698:	f001 fcec 	bl	801a074 <vPortEnterCritical>
 801869c:	6a3b      	ldr	r3, [r7, #32]
 801869e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80186a2:	b25b      	sxtb	r3, r3
 80186a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186a8:	d103      	bne.n	80186b2 <xQueueGenericSend+0x114>
 80186aa:	6a3b      	ldr	r3, [r7, #32]
 80186ac:	2200      	movs	r2, #0
 80186ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80186b2:	6a3b      	ldr	r3, [r7, #32]
 80186b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80186b8:	b25b      	sxtb	r3, r3
 80186ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186be:	d103      	bne.n	80186c8 <xQueueGenericSend+0x12a>
 80186c0:	6a3b      	ldr	r3, [r7, #32]
 80186c2:	2200      	movs	r2, #0
 80186c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80186c8:	f001 fce6 	bl	801a098 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80186cc:	1d3a      	adds	r2, r7, #4
 80186ce:	f107 0314 	add.w	r3, r7, #20
 80186d2:	4611      	mov	r1, r2
 80186d4:	4618      	mov	r0, r3
 80186d6:	f000 ff7b 	bl	80195d0 <xTaskCheckForTimeOut>
 80186da:	4603      	mov	r3, r0
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d11d      	bne.n	801871c <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80186e0:	6a38      	ldr	r0, [r7, #32]
 80186e2:	f000 fa47 	bl	8018b74 <prvIsQueueFull>
 80186e6:	4603      	mov	r3, r0
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d011      	beq.n	8018710 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80186ec:	6a3b      	ldr	r3, [r7, #32]
 80186ee:	3310      	adds	r3, #16
 80186f0:	687a      	ldr	r2, [r7, #4]
 80186f2:	4611      	mov	r1, r2
 80186f4:	4618      	mov	r0, r3
 80186f6:	f000 feb9 	bl	801946c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80186fa:	6a38      	ldr	r0, [r7, #32]
 80186fc:	f000 f9d2 	bl	8018aa4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8018700:	f000 fd10 	bl	8019124 <xTaskResumeAll>
 8018704:	4603      	mov	r3, r0
 8018706:	2b00      	cmp	r3, #0
 8018708:	d188      	bne.n	801861c <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 801870a:	f001 fca1 	bl	801a050 <vPortYield>
 801870e:	e785      	b.n	801861c <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8018710:	6a38      	ldr	r0, [r7, #32]
 8018712:	f000 f9c7 	bl	8018aa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018716:	f000 fd05 	bl	8019124 <xTaskResumeAll>
 801871a:	e77f      	b.n	801861c <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801871c:	6a38      	ldr	r0, [r7, #32]
 801871e:	f000 f9c1 	bl	8018aa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018722:	f000 fcff 	bl	8019124 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8018726:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8018728:	4618      	mov	r0, r3
 801872a:	3728      	adds	r7, #40	; 0x28
 801872c:	46bd      	mov	sp, r7
 801872e:	bd80      	pop	{r7, pc}

08018730 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018730:	b580      	push	{r7, lr}
 8018732:	b08a      	sub	sp, #40	; 0x28
 8018734:	af00      	add	r7, sp, #0
 8018736:	60f8      	str	r0, [r7, #12]
 8018738:	60b9      	str	r1, [r7, #8]
 801873a:	607a      	str	r2, [r7, #4]
 801873c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801873e:	68fb      	ldr	r3, [r7, #12]
 8018740:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8018742:	6a3b      	ldr	r3, [r7, #32]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d102      	bne.n	801874e <xQueueGenericSendFromISR+0x1e>
 8018748:	f001 fdc6 	bl	801a2d8 <ulSetInterruptMask>
 801874c:	e7fe      	b.n	801874c <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801874e:	68bb      	ldr	r3, [r7, #8]
 8018750:	2b00      	cmp	r3, #0
 8018752:	d103      	bne.n	801875c <xQueueGenericSendFromISR+0x2c>
 8018754:	6a3b      	ldr	r3, [r7, #32]
 8018756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018758:	2b00      	cmp	r3, #0
 801875a:	d101      	bne.n	8018760 <xQueueGenericSendFromISR+0x30>
 801875c:	2301      	movs	r3, #1
 801875e:	e000      	b.n	8018762 <xQueueGenericSendFromISR+0x32>
 8018760:	2300      	movs	r3, #0
 8018762:	2b00      	cmp	r3, #0
 8018764:	d102      	bne.n	801876c <xQueueGenericSendFromISR+0x3c>
 8018766:	f001 fdb7 	bl	801a2d8 <ulSetInterruptMask>
 801876a:	e7fe      	b.n	801876a <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801876c:	683b      	ldr	r3, [r7, #0]
 801876e:	2b02      	cmp	r3, #2
 8018770:	d103      	bne.n	801877a <xQueueGenericSendFromISR+0x4a>
 8018772:	6a3b      	ldr	r3, [r7, #32]
 8018774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018776:	2b01      	cmp	r3, #1
 8018778:	d101      	bne.n	801877e <xQueueGenericSendFromISR+0x4e>
 801877a:	2301      	movs	r3, #1
 801877c:	e000      	b.n	8018780 <xQueueGenericSendFromISR+0x50>
 801877e:	2300      	movs	r3, #0
 8018780:	2b00      	cmp	r3, #0
 8018782:	d102      	bne.n	801878a <xQueueGenericSendFromISR+0x5a>
 8018784:	f001 fda8 	bl	801a2d8 <ulSetInterruptMask>
 8018788:	e7fe      	b.n	8018788 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801878a:	f001 fda5 	bl	801a2d8 <ulSetInterruptMask>
 801878e:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018790:	6a3b      	ldr	r3, [r7, #32]
 8018792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018794:	6a3b      	ldr	r3, [r7, #32]
 8018796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018798:	429a      	cmp	r2, r3
 801879a:	d302      	bcc.n	80187a2 <xQueueGenericSendFromISR+0x72>
 801879c:	683b      	ldr	r3, [r7, #0]
 801879e:	2b02      	cmp	r3, #2
 80187a0:	d12d      	bne.n	80187fe <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80187a2:	6a3b      	ldr	r3, [r7, #32]
 80187a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80187a8:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80187aa:	6a3b      	ldr	r3, [r7, #32]
 80187ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187ae:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80187b0:	683a      	ldr	r2, [r7, #0]
 80187b2:	68b9      	ldr	r1, [r7, #8]
 80187b4:	6a38      	ldr	r0, [r7, #32]
 80187b6:	f000 f8e5 	bl	8018984 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80187ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80187be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187c2:	d112      	bne.n	80187ea <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80187c4:	6a3b      	ldr	r3, [r7, #32]
 80187c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d015      	beq.n	80187f8 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80187cc:	6a3b      	ldr	r3, [r7, #32]
 80187ce:	3324      	adds	r3, #36	; 0x24
 80187d0:	4618      	mov	r0, r3
 80187d2:	f000 fe8b 	bl	80194ec <xTaskRemoveFromEventList>
 80187d6:	4603      	mov	r3, r0
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d00d      	beq.n	80187f8 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d00a      	beq.n	80187f8 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	2201      	movs	r2, #1
 80187e6:	601a      	str	r2, [r3, #0]
 80187e8:	e006      	b.n	80187f8 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80187ea:	7efb      	ldrb	r3, [r7, #27]
 80187ec:	3301      	adds	r3, #1
 80187ee:	b2db      	uxtb	r3, r3
 80187f0:	b25a      	sxtb	r2, r3
 80187f2:	6a3b      	ldr	r3, [r7, #32]
 80187f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80187f8:	2301      	movs	r3, #1
 80187fa:	627b      	str	r3, [r7, #36]	; 0x24
		{
 80187fc:	e001      	b.n	8018802 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80187fe:	2300      	movs	r3, #0
 8018800:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8018802:	69f8      	ldr	r0, [r7, #28]
 8018804:	f001 fd75 	bl	801a2f2 <vClearInterruptMask>

	return xReturn;
 8018808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801880a:	4618      	mov	r0, r3
 801880c:	3728      	adds	r7, #40	; 0x28
 801880e:	46bd      	mov	sp, r7
 8018810:	bd80      	pop	{r7, pc}

08018812 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8018812:	b580      	push	{r7, lr}
 8018814:	b08a      	sub	sp, #40	; 0x28
 8018816:	af00      	add	r7, sp, #0
 8018818:	60f8      	str	r0, [r7, #12]
 801881a:	60b9      	str	r1, [r7, #8]
 801881c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801881e:	2300      	movs	r3, #0
 8018820:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018826:	6a3b      	ldr	r3, [r7, #32]
 8018828:	2b00      	cmp	r3, #0
 801882a:	d102      	bne.n	8018832 <xQueueReceive+0x20>
 801882c:	f001 fd54 	bl	801a2d8 <ulSetInterruptMask>
 8018830:	e7fe      	b.n	8018830 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018832:	68bb      	ldr	r3, [r7, #8]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d103      	bne.n	8018840 <xQueueReceive+0x2e>
 8018838:	6a3b      	ldr	r3, [r7, #32]
 801883a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801883c:	2b00      	cmp	r3, #0
 801883e:	d101      	bne.n	8018844 <xQueueReceive+0x32>
 8018840:	2301      	movs	r3, #1
 8018842:	e000      	b.n	8018846 <xQueueReceive+0x34>
 8018844:	2300      	movs	r3, #0
 8018846:	2b00      	cmp	r3, #0
 8018848:	d102      	bne.n	8018850 <xQueueReceive+0x3e>
 801884a:	f001 fd45 	bl	801a2d8 <ulSetInterruptMask>
 801884e:	e7fe      	b.n	801884e <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018850:	f000 ffe2 	bl	8019818 <xTaskGetSchedulerState>
 8018854:	4603      	mov	r3, r0
 8018856:	2b00      	cmp	r3, #0
 8018858:	d102      	bne.n	8018860 <xQueueReceive+0x4e>
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	2b00      	cmp	r3, #0
 801885e:	d101      	bne.n	8018864 <xQueueReceive+0x52>
 8018860:	2301      	movs	r3, #1
 8018862:	e000      	b.n	8018866 <xQueueReceive+0x54>
 8018864:	2300      	movs	r3, #0
 8018866:	2b00      	cmp	r3, #0
 8018868:	d102      	bne.n	8018870 <xQueueReceive+0x5e>
 801886a:	f001 fd35 	bl	801a2d8 <ulSetInterruptMask>
 801886e:	e7fe      	b.n	801886e <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018870:	f001 fc00 	bl	801a074 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018874:	6a3b      	ldr	r3, [r7, #32]
 8018876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018878:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801887a:	69fb      	ldr	r3, [r7, #28]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d019      	beq.n	80188b4 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018880:	68b9      	ldr	r1, [r7, #8]
 8018882:	6a38      	ldr	r0, [r7, #32]
 8018884:	f000 f8e8 	bl	8018a58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018888:	69fb      	ldr	r3, [r7, #28]
 801888a:	1e5a      	subs	r2, r3, #1
 801888c:	6a3b      	ldr	r3, [r7, #32]
 801888e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018890:	6a3b      	ldr	r3, [r7, #32]
 8018892:	691b      	ldr	r3, [r3, #16]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d009      	beq.n	80188ac <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018898:	6a3b      	ldr	r3, [r7, #32]
 801889a:	3310      	adds	r3, #16
 801889c:	4618      	mov	r0, r3
 801889e:	f000 fe25 	bl	80194ec <xTaskRemoveFromEventList>
 80188a2:	4603      	mov	r3, r0
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d001      	beq.n	80188ac <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80188a8:	f001 fbd2 	bl	801a050 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80188ac:	f001 fbf4 	bl	801a098 <vPortExitCritical>
				return pdPASS;
 80188b0:	2301      	movs	r3, #1
 80188b2:	e063      	b.n	801897c <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d103      	bne.n	80188c2 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80188ba:	f001 fbed 	bl	801a098 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80188be:	2300      	movs	r3, #0
 80188c0:	e05c      	b.n	801897c <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80188c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d106      	bne.n	80188d6 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80188c8:	f107 0314 	add.w	r3, r7, #20
 80188cc:	4618      	mov	r0, r3
 80188ce:	f000 fe69 	bl	80195a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80188d2:	2301      	movs	r3, #1
 80188d4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80188d6:	f001 fbdf 	bl	801a098 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80188da:	f000 fc15 	bl	8019108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80188de:	f001 fbc9 	bl	801a074 <vPortEnterCritical>
 80188e2:	6a3b      	ldr	r3, [r7, #32]
 80188e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80188e8:	b25b      	sxtb	r3, r3
 80188ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188ee:	d103      	bne.n	80188f8 <xQueueReceive+0xe6>
 80188f0:	6a3b      	ldr	r3, [r7, #32]
 80188f2:	2200      	movs	r2, #0
 80188f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80188f8:	6a3b      	ldr	r3, [r7, #32]
 80188fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80188fe:	b25b      	sxtb	r3, r3
 8018900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018904:	d103      	bne.n	801890e <xQueueReceive+0xfc>
 8018906:	6a3b      	ldr	r3, [r7, #32]
 8018908:	2200      	movs	r2, #0
 801890a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801890e:	f001 fbc3 	bl	801a098 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018912:	1d3a      	adds	r2, r7, #4
 8018914:	f107 0314 	add.w	r3, r7, #20
 8018918:	4611      	mov	r1, r2
 801891a:	4618      	mov	r0, r3
 801891c:	f000 fe58 	bl	80195d0 <xTaskCheckForTimeOut>
 8018920:	4603      	mov	r3, r0
 8018922:	2b00      	cmp	r3, #0
 8018924:	d11d      	bne.n	8018962 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018926:	6a38      	ldr	r0, [r7, #32]
 8018928:	f000 f90e 	bl	8018b48 <prvIsQueueEmpty>
 801892c:	4603      	mov	r3, r0
 801892e:	2b00      	cmp	r3, #0
 8018930:	d011      	beq.n	8018956 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018932:	6a3b      	ldr	r3, [r7, #32]
 8018934:	3324      	adds	r3, #36	; 0x24
 8018936:	687a      	ldr	r2, [r7, #4]
 8018938:	4611      	mov	r1, r2
 801893a:	4618      	mov	r0, r3
 801893c:	f000 fd96 	bl	801946c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018940:	6a38      	ldr	r0, [r7, #32]
 8018942:	f000 f8af 	bl	8018aa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018946:	f000 fbed 	bl	8019124 <xTaskResumeAll>
 801894a:	4603      	mov	r3, r0
 801894c:	2b00      	cmp	r3, #0
 801894e:	d18f      	bne.n	8018870 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 8018950:	f001 fb7e 	bl	801a050 <vPortYield>
 8018954:	e78c      	b.n	8018870 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018956:	6a38      	ldr	r0, [r7, #32]
 8018958:	f000 f8a4 	bl	8018aa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801895c:	f000 fbe2 	bl	8019124 <xTaskResumeAll>
 8018960:	e786      	b.n	8018870 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018962:	6a38      	ldr	r0, [r7, #32]
 8018964:	f000 f89e 	bl	8018aa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018968:	f000 fbdc 	bl	8019124 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801896c:	6a38      	ldr	r0, [r7, #32]
 801896e:	f000 f8eb 	bl	8018b48 <prvIsQueueEmpty>
 8018972:	4603      	mov	r3, r0
 8018974:	2b00      	cmp	r3, #0
 8018976:	f43f af7b 	beq.w	8018870 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801897a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801897c:	4618      	mov	r0, r3
 801897e:	3728      	adds	r7, #40	; 0x28
 8018980:	46bd      	mov	sp, r7
 8018982:	bd80      	pop	{r7, pc}

08018984 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018984:	b580      	push	{r7, lr}
 8018986:	b086      	sub	sp, #24
 8018988:	af00      	add	r7, sp, #0
 801898a:	60f8      	str	r0, [r7, #12]
 801898c:	60b9      	str	r1, [r7, #8]
 801898e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018990:	2300      	movs	r3, #0
 8018992:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018998:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d10d      	bne.n	80189be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d14d      	bne.n	8018a46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	689b      	ldr	r3, [r3, #8]
 80189ae:	4618      	mov	r0, r3
 80189b0:	f000 ff50 	bl	8019854 <xTaskPriorityDisinherit>
 80189b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	2200      	movs	r2, #0
 80189ba:	609a      	str	r2, [r3, #8]
 80189bc:	e043      	b.n	8018a46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d119      	bne.n	80189f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	6858      	ldr	r0, [r3, #4]
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80189cc:	461a      	mov	r2, r3
 80189ce:	68b9      	ldr	r1, [r7, #8]
 80189d0:	f004 fbb1 	bl	801d136 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80189d4:	68fb      	ldr	r3, [r7, #12]
 80189d6:	685a      	ldr	r2, [r3, #4]
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80189dc:	441a      	add	r2, r3
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80189e2:	68fb      	ldr	r3, [r7, #12]
 80189e4:	685a      	ldr	r2, [r3, #4]
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	689b      	ldr	r3, [r3, #8]
 80189ea:	429a      	cmp	r2, r3
 80189ec:	d32b      	bcc.n	8018a46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	681a      	ldr	r2, [r3, #0]
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	605a      	str	r2, [r3, #4]
 80189f6:	e026      	b.n	8018a46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	68d8      	ldr	r0, [r3, #12]
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a00:	461a      	mov	r2, r3
 8018a02:	68b9      	ldr	r1, [r7, #8]
 8018a04:	f004 fb97 	bl	801d136 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	68da      	ldr	r2, [r3, #12]
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a10:	425b      	negs	r3, r3
 8018a12:	441a      	add	r2, r3
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	68da      	ldr	r2, [r3, #12]
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	429a      	cmp	r2, r3
 8018a22:	d207      	bcs.n	8018a34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	689a      	ldr	r2, [r3, #8]
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a2c:	425b      	negs	r3, r3
 8018a2e:	441a      	add	r2, r3
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	2b02      	cmp	r3, #2
 8018a38:	d105      	bne.n	8018a46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018a3a:	693b      	ldr	r3, [r7, #16]
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d002      	beq.n	8018a46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018a40:	693b      	ldr	r3, [r7, #16]
 8018a42:	3b01      	subs	r3, #1
 8018a44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018a46:	693b      	ldr	r3, [r7, #16]
 8018a48:	1c5a      	adds	r2, r3, #1
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8018a4e:	697b      	ldr	r3, [r7, #20]
}
 8018a50:	4618      	mov	r0, r3
 8018a52:	3718      	adds	r7, #24
 8018a54:	46bd      	mov	sp, r7
 8018a56:	bd80      	pop	{r7, pc}

08018a58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018a58:	b580      	push	{r7, lr}
 8018a5a:	b082      	sub	sp, #8
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	6078      	str	r0, [r7, #4]
 8018a60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d018      	beq.n	8018a9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	68da      	ldr	r2, [r3, #12]
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a72:	441a      	add	r2, r3
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	68da      	ldr	r2, [r3, #12]
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	689b      	ldr	r3, [r3, #8]
 8018a80:	429a      	cmp	r2, r3
 8018a82:	d303      	bcc.n	8018a8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	681a      	ldr	r2, [r3, #0]
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	68d9      	ldr	r1, [r3, #12]
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a94:	461a      	mov	r2, r3
 8018a96:	6838      	ldr	r0, [r7, #0]
 8018a98:	f004 fb4d 	bl	801d136 <memcpy>
	}
}
 8018a9c:	bf00      	nop
 8018a9e:	3708      	adds	r7, #8
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	bd80      	pop	{r7, pc}

08018aa4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018aa4:	b580      	push	{r7, lr}
 8018aa6:	b084      	sub	sp, #16
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018aac:	f001 fae2 	bl	801a074 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018ab6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018ab8:	e011      	b.n	8018ade <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d012      	beq.n	8018ae8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	3324      	adds	r3, #36	; 0x24
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f000 fd10 	bl	80194ec <xTaskRemoveFromEventList>
 8018acc:	4603      	mov	r3, r0
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d001      	beq.n	8018ad6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8018ad2:	f000 fdcf 	bl	8019674 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8018ad6:	7bfb      	ldrb	r3, [r7, #15]
 8018ad8:	3b01      	subs	r3, #1
 8018ada:	b2db      	uxtb	r3, r3
 8018adc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	dce9      	bgt.n	8018aba <prvUnlockQueue+0x16>
 8018ae6:	e000      	b.n	8018aea <prvUnlockQueue+0x46>
					break;
 8018ae8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	22ff      	movs	r2, #255	; 0xff
 8018aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8018af2:	f001 fad1 	bl	801a098 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8018af6:	f001 fabd 	bl	801a074 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018b00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018b02:	e011      	b.n	8018b28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	691b      	ldr	r3, [r3, #16]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d012      	beq.n	8018b32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	3310      	adds	r3, #16
 8018b10:	4618      	mov	r0, r3
 8018b12:	f000 fceb 	bl	80194ec <xTaskRemoveFromEventList>
 8018b16:	4603      	mov	r3, r0
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d001      	beq.n	8018b20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8018b1c:	f000 fdaa 	bl	8019674 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018b20:	7bbb      	ldrb	r3, [r7, #14]
 8018b22:	3b01      	subs	r3, #1
 8018b24:	b2db      	uxtb	r3, r3
 8018b26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018b28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	dce9      	bgt.n	8018b04 <prvUnlockQueue+0x60>
 8018b30:	e000      	b.n	8018b34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8018b32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	22ff      	movs	r2, #255	; 0xff
 8018b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8018b3c:	f001 faac 	bl	801a098 <vPortExitCritical>
}
 8018b40:	bf00      	nop
 8018b42:	3710      	adds	r7, #16
 8018b44:	46bd      	mov	sp, r7
 8018b46:	bd80      	pop	{r7, pc}

08018b48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b084      	sub	sp, #16
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018b50:	f001 fa90 	bl	801a074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d102      	bne.n	8018b62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018b5c:	2301      	movs	r3, #1
 8018b5e:	60fb      	str	r3, [r7, #12]
 8018b60:	e001      	b.n	8018b66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8018b62:	2300      	movs	r3, #0
 8018b64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018b66:	f001 fa97 	bl	801a098 <vPortExitCritical>

	return xReturn;
 8018b6a:	68fb      	ldr	r3, [r7, #12]
}
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	3710      	adds	r7, #16
 8018b70:	46bd      	mov	sp, r7
 8018b72:	bd80      	pop	{r7, pc}

08018b74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018b74:	b580      	push	{r7, lr}
 8018b76:	b084      	sub	sp, #16
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018b7c:	f001 fa7a 	bl	801a074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b88:	429a      	cmp	r2, r3
 8018b8a:	d102      	bne.n	8018b92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018b8c:	2301      	movs	r3, #1
 8018b8e:	60fb      	str	r3, [r7, #12]
 8018b90:	e001      	b.n	8018b96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018b92:	2300      	movs	r3, #0
 8018b94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018b96:	f001 fa7f 	bl	801a098 <vPortExitCritical>

	return xReturn;
 8018b9a:	68fb      	ldr	r3, [r7, #12]
}
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	3710      	adds	r7, #16
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	bd80      	pop	{r7, pc}

08018ba4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018ba4:	b480      	push	{r7}
 8018ba6:	b085      	sub	sp, #20
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	6078      	str	r0, [r7, #4]
 8018bac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018bae:	2300      	movs	r3, #0
 8018bb0:	60fb      	str	r3, [r7, #12]
 8018bb2:	e014      	b.n	8018bde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018bb4:	4a0f      	ldr	r2, [pc, #60]	; (8018bf4 <vQueueAddToRegistry+0x50>)
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d10b      	bne.n	8018bd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018bc0:	490c      	ldr	r1, [pc, #48]	; (8018bf4 <vQueueAddToRegistry+0x50>)
 8018bc2:	68fb      	ldr	r3, [r7, #12]
 8018bc4:	683a      	ldr	r2, [r7, #0]
 8018bc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8018bca:	4a0a      	ldr	r2, [pc, #40]	; (8018bf4 <vQueueAddToRegistry+0x50>)
 8018bcc:	68fb      	ldr	r3, [r7, #12]
 8018bce:	00db      	lsls	r3, r3, #3
 8018bd0:	4413      	add	r3, r2
 8018bd2:	687a      	ldr	r2, [r7, #4]
 8018bd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8018bd6:	e006      	b.n	8018be6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	3301      	adds	r3, #1
 8018bdc:	60fb      	str	r3, [r7, #12]
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	2b07      	cmp	r3, #7
 8018be2:	d9e7      	bls.n	8018bb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018be4:	bf00      	nop
 8018be6:	bf00      	nop
 8018be8:	3714      	adds	r7, #20
 8018bea:	46bd      	mov	sp, r7
 8018bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf0:	4770      	bx	lr
 8018bf2:	bf00      	nop
 8018bf4:	20001074 	.word	0x20001074

08018bf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b086      	sub	sp, #24
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	60f8      	str	r0, [r7, #12]
 8018c00:	60b9      	str	r1, [r7, #8]
 8018c02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018c08:	f001 fa34 	bl	801a074 <vPortEnterCritical>
 8018c0c:	697b      	ldr	r3, [r7, #20]
 8018c0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018c12:	b25b      	sxtb	r3, r3
 8018c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c18:	d103      	bne.n	8018c22 <vQueueWaitForMessageRestricted+0x2a>
 8018c1a:	697b      	ldr	r3, [r7, #20]
 8018c1c:	2200      	movs	r2, #0
 8018c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018c22:	697b      	ldr	r3, [r7, #20]
 8018c24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018c28:	b25b      	sxtb	r3, r3
 8018c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c2e:	d103      	bne.n	8018c38 <vQueueWaitForMessageRestricted+0x40>
 8018c30:	697b      	ldr	r3, [r7, #20]
 8018c32:	2200      	movs	r2, #0
 8018c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018c38:	f001 fa2e 	bl	801a098 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018c3c:	697b      	ldr	r3, [r7, #20]
 8018c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d106      	bne.n	8018c52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018c44:	697b      	ldr	r3, [r7, #20]
 8018c46:	3324      	adds	r3, #36	; 0x24
 8018c48:	687a      	ldr	r2, [r7, #4]
 8018c4a:	68b9      	ldr	r1, [r7, #8]
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	f000 fc29 	bl	80194a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018c52:	6978      	ldr	r0, [r7, #20]
 8018c54:	f7ff ff26 	bl	8018aa4 <prvUnlockQueue>
	}
 8018c58:	bf00      	nop
 8018c5a:	3718      	adds	r7, #24
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}

08018c60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b08c      	sub	sp, #48	; 0x30
 8018c64:	af04      	add	r7, sp, #16
 8018c66:	60f8      	str	r0, [r7, #12]
 8018c68:	60b9      	str	r1, [r7, #8]
 8018c6a:	607a      	str	r2, [r7, #4]
 8018c6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8018c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d102      	bne.n	8018c7a <xTaskCreateStatic+0x1a>
 8018c74:	f001 fb30 	bl	801a2d8 <ulSetInterruptMask>
 8018c78:	e7fe      	b.n	8018c78 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 8018c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d102      	bne.n	8018c86 <xTaskCreateStatic+0x26>
 8018c80:	f001 fb2a 	bl	801a2d8 <ulSetInterruptMask>
 8018c84:	e7fe      	b.n	8018c84 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8018c86:	235c      	movs	r3, #92	; 0x5c
 8018c88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8018c8a:	697b      	ldr	r3, [r7, #20]
 8018c8c:	2b5c      	cmp	r3, #92	; 0x5c
 8018c8e:	d002      	beq.n	8018c96 <xTaskCreateStatic+0x36>
 8018c90:	f001 fb22 	bl	801a2d8 <ulSetInterruptMask>
 8018c94:	e7fe      	b.n	8018c94 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018c96:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d01e      	beq.n	8018cdc <xTaskCreateStatic+0x7c>
 8018c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d01b      	beq.n	8018cdc <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ca6:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018ca8:	69fb      	ldr	r3, [r7, #28]
 8018caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018cac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018cae:	69fb      	ldr	r3, [r7, #28]
 8018cb0:	2202      	movs	r2, #2
 8018cb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	9303      	str	r3, [sp, #12]
 8018cba:	69fb      	ldr	r3, [r7, #28]
 8018cbc:	9302      	str	r3, [sp, #8]
 8018cbe:	f107 0318 	add.w	r3, r7, #24
 8018cc2:	9301      	str	r3, [sp, #4]
 8018cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cc6:	9300      	str	r3, [sp, #0]
 8018cc8:	683b      	ldr	r3, [r7, #0]
 8018cca:	687a      	ldr	r2, [r7, #4]
 8018ccc:	68b9      	ldr	r1, [r7, #8]
 8018cce:	68f8      	ldr	r0, [r7, #12]
 8018cd0:	f000 f850 	bl	8018d74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018cd4:	69f8      	ldr	r0, [r7, #28]
 8018cd6:	f000 f8d7 	bl	8018e88 <prvAddNewTaskToReadyList>
 8018cda:	e001      	b.n	8018ce0 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 8018cdc:	2300      	movs	r3, #0
 8018cde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018ce0:	69bb      	ldr	r3, [r7, #24]
	}
 8018ce2:	4618      	mov	r0, r3
 8018ce4:	3720      	adds	r7, #32
 8018ce6:	46bd      	mov	sp, r7
 8018ce8:	bd80      	pop	{r7, pc}

08018cea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018cea:	b580      	push	{r7, lr}
 8018cec:	b08c      	sub	sp, #48	; 0x30
 8018cee:	af04      	add	r7, sp, #16
 8018cf0:	60f8      	str	r0, [r7, #12]
 8018cf2:	60b9      	str	r1, [r7, #8]
 8018cf4:	603b      	str	r3, [r7, #0]
 8018cf6:	4613      	mov	r3, r2
 8018cf8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018cfa:	88fb      	ldrh	r3, [r7, #6]
 8018cfc:	009b      	lsls	r3, r3, #2
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f001 fb4a 	bl	801a398 <pvPortMalloc>
 8018d04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8018d06:	697b      	ldr	r3, [r7, #20]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d00e      	beq.n	8018d2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018d0c:	205c      	movs	r0, #92	; 0x5c
 8018d0e:	f001 fb43 	bl	801a398 <pvPortMalloc>
 8018d12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018d14:	69fb      	ldr	r3, [r7, #28]
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d003      	beq.n	8018d22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018d1a:	69fb      	ldr	r3, [r7, #28]
 8018d1c:	697a      	ldr	r2, [r7, #20]
 8018d1e:	631a      	str	r2, [r3, #48]	; 0x30
 8018d20:	e005      	b.n	8018d2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018d22:	6978      	ldr	r0, [r7, #20]
 8018d24:	f001 fbec 	bl	801a500 <vPortFree>
 8018d28:	e001      	b.n	8018d2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018d2e:	69fb      	ldr	r3, [r7, #28]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d017      	beq.n	8018d64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8018d34:	69fb      	ldr	r3, [r7, #28]
 8018d36:	2200      	movs	r2, #0
 8018d38:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018d3c:	88fa      	ldrh	r2, [r7, #6]
 8018d3e:	2300      	movs	r3, #0
 8018d40:	9303      	str	r3, [sp, #12]
 8018d42:	69fb      	ldr	r3, [r7, #28]
 8018d44:	9302      	str	r3, [sp, #8]
 8018d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d48:	9301      	str	r3, [sp, #4]
 8018d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d4c:	9300      	str	r3, [sp, #0]
 8018d4e:	683b      	ldr	r3, [r7, #0]
 8018d50:	68b9      	ldr	r1, [r7, #8]
 8018d52:	68f8      	ldr	r0, [r7, #12]
 8018d54:	f000 f80e 	bl	8018d74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018d58:	69f8      	ldr	r0, [r7, #28]
 8018d5a:	f000 f895 	bl	8018e88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018d5e:	2301      	movs	r3, #1
 8018d60:	61bb      	str	r3, [r7, #24]
 8018d62:	e002      	b.n	8018d6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018d64:	f04f 33ff 	mov.w	r3, #4294967295
 8018d68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018d6a:	69bb      	ldr	r3, [r7, #24]
	}
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	3720      	adds	r7, #32
 8018d70:	46bd      	mov	sp, r7
 8018d72:	bd80      	pop	{r7, pc}

08018d74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018d74:	b580      	push	{r7, lr}
 8018d76:	b086      	sub	sp, #24
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	60f8      	str	r0, [r7, #12]
 8018d7c:	60b9      	str	r1, [r7, #8]
 8018d7e:	607a      	str	r2, [r7, #4]
 8018d80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	009b      	lsls	r3, r3, #2
 8018d8a:	461a      	mov	r2, r3
 8018d8c:	21a5      	movs	r1, #165	; 0xa5
 8018d8e:	f004 f902 	bl	801cf96 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018d9c:	3b01      	subs	r3, #1
 8018d9e:	009b      	lsls	r3, r3, #2
 8018da0:	4413      	add	r3, r2
 8018da2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018da4:	693b      	ldr	r3, [r7, #16]
 8018da6:	f023 0307 	bic.w	r3, r3, #7
 8018daa:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018dac:	693b      	ldr	r3, [r7, #16]
 8018dae:	f003 0307 	and.w	r3, r3, #7
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d002      	beq.n	8018dbc <prvInitialiseNewTask+0x48>
 8018db6:	f001 fa8f 	bl	801a2d8 <ulSetInterruptMask>
 8018dba:	e7fe      	b.n	8018dba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018dbc:	68bb      	ldr	r3, [r7, #8]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d01f      	beq.n	8018e02 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	617b      	str	r3, [r7, #20]
 8018dc6:	e012      	b.n	8018dee <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018dc8:	68ba      	ldr	r2, [r7, #8]
 8018dca:	697b      	ldr	r3, [r7, #20]
 8018dcc:	4413      	add	r3, r2
 8018dce:	7819      	ldrb	r1, [r3, #0]
 8018dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018dd2:	697b      	ldr	r3, [r7, #20]
 8018dd4:	4413      	add	r3, r2
 8018dd6:	3334      	adds	r3, #52	; 0x34
 8018dd8:	460a      	mov	r2, r1
 8018dda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018ddc:	68ba      	ldr	r2, [r7, #8]
 8018dde:	697b      	ldr	r3, [r7, #20]
 8018de0:	4413      	add	r3, r2
 8018de2:	781b      	ldrb	r3, [r3, #0]
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d006      	beq.n	8018df6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018de8:	697b      	ldr	r3, [r7, #20]
 8018dea:	3301      	adds	r3, #1
 8018dec:	617b      	str	r3, [r7, #20]
 8018dee:	697b      	ldr	r3, [r7, #20]
 8018df0:	2b0f      	cmp	r3, #15
 8018df2:	d9e9      	bls.n	8018dc8 <prvInitialiseNewTask+0x54>
 8018df4:	e000      	b.n	8018df8 <prvInitialiseNewTask+0x84>
			{
				break;
 8018df6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dfa:	2200      	movs	r2, #0
 8018dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018e00:	e003      	b.n	8018e0a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e04:	2200      	movs	r2, #0
 8018e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018e0a:	6a3b      	ldr	r3, [r7, #32]
 8018e0c:	2b37      	cmp	r3, #55	; 0x37
 8018e0e:	d901      	bls.n	8018e14 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018e10:	2337      	movs	r3, #55	; 0x37
 8018e12:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e16:	6a3a      	ldr	r2, [r7, #32]
 8018e18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e1c:	6a3a      	ldr	r2, [r7, #32]
 8018e1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e22:	2200      	movs	r2, #0
 8018e24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8018e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e28:	3304      	adds	r3, #4
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	f7ff fa58 	bl	80182e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e32:	3318      	adds	r3, #24
 8018e34:	4618      	mov	r0, r3
 8018e36:	f7ff fa53 	bl	80182e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018e3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018e40:	6a3b      	ldr	r3, [r7, #32]
 8018e42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018e4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e52:	2200      	movs	r2, #0
 8018e54:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e58:	2200      	movs	r2, #0
 8018e5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8018e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8018e62:	683b      	ldr	r3, [r7, #0]
 8018e64:	68fa      	ldr	r2, [r7, #12]
 8018e66:	6938      	ldr	r0, [r7, #16]
 8018e68:	f001 f960 	bl	801a12c <pxPortInitialiseStack>
 8018e6c:	4602      	mov	r2, r0
 8018e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d002      	beq.n	8018e7e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018e7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018e7e:	bf00      	nop
 8018e80:	3718      	adds	r7, #24
 8018e82:	46bd      	mov	sp, r7
 8018e84:	bd80      	pop	{r7, pc}
	...

08018e88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b082      	sub	sp, #8
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018e90:	f001 f8f0 	bl	801a074 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018e94:	4b2a      	ldr	r3, [pc, #168]	; (8018f40 <prvAddNewTaskToReadyList+0xb8>)
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	3301      	adds	r3, #1
 8018e9a:	4a29      	ldr	r2, [pc, #164]	; (8018f40 <prvAddNewTaskToReadyList+0xb8>)
 8018e9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018e9e:	4b29      	ldr	r3, [pc, #164]	; (8018f44 <prvAddNewTaskToReadyList+0xbc>)
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d109      	bne.n	8018eba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018ea6:	4a27      	ldr	r2, [pc, #156]	; (8018f44 <prvAddNewTaskToReadyList+0xbc>)
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018eac:	4b24      	ldr	r3, [pc, #144]	; (8018f40 <prvAddNewTaskToReadyList+0xb8>)
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	2b01      	cmp	r3, #1
 8018eb2:	d110      	bne.n	8018ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018eb4:	f000 fbfa 	bl	80196ac <prvInitialiseTaskLists>
 8018eb8:	e00d      	b.n	8018ed6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8018eba:	4b23      	ldr	r3, [pc, #140]	; (8018f48 <prvAddNewTaskToReadyList+0xc0>)
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d109      	bne.n	8018ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018ec2:	4b20      	ldr	r3, [pc, #128]	; (8018f44 <prvAddNewTaskToReadyList+0xbc>)
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ecc:	429a      	cmp	r2, r3
 8018ece:	d802      	bhi.n	8018ed6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018ed0:	4a1c      	ldr	r2, [pc, #112]	; (8018f44 <prvAddNewTaskToReadyList+0xbc>)
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018ed6:	4b1d      	ldr	r3, [pc, #116]	; (8018f4c <prvAddNewTaskToReadyList+0xc4>)
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	3301      	adds	r3, #1
 8018edc:	4a1b      	ldr	r2, [pc, #108]	; (8018f4c <prvAddNewTaskToReadyList+0xc4>)
 8018ede:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018ee0:	4b1a      	ldr	r3, [pc, #104]	; (8018f4c <prvAddNewTaskToReadyList+0xc4>)
 8018ee2:	681a      	ldr	r2, [r3, #0]
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018eec:	4b18      	ldr	r3, [pc, #96]	; (8018f50 <prvAddNewTaskToReadyList+0xc8>)
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	429a      	cmp	r2, r3
 8018ef2:	d903      	bls.n	8018efc <prvAddNewTaskToReadyList+0x74>
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ef8:	4a15      	ldr	r2, [pc, #84]	; (8018f50 <prvAddNewTaskToReadyList+0xc8>)
 8018efa:	6013      	str	r3, [r2, #0]
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f00:	4613      	mov	r3, r2
 8018f02:	009b      	lsls	r3, r3, #2
 8018f04:	4413      	add	r3, r2
 8018f06:	009b      	lsls	r3, r3, #2
 8018f08:	4a12      	ldr	r2, [pc, #72]	; (8018f54 <prvAddNewTaskToReadyList+0xcc>)
 8018f0a:	441a      	add	r2, r3
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	3304      	adds	r3, #4
 8018f10:	4619      	mov	r1, r3
 8018f12:	4610      	mov	r0, r2
 8018f14:	f7ff f9f1 	bl	80182fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018f18:	f001 f8be 	bl	801a098 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8018f1c:	4b0a      	ldr	r3, [pc, #40]	; (8018f48 <prvAddNewTaskToReadyList+0xc0>)
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d008      	beq.n	8018f36 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018f24:	4b07      	ldr	r3, [pc, #28]	; (8018f44 <prvAddNewTaskToReadyList+0xbc>)
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f2e:	429a      	cmp	r2, r3
 8018f30:	d201      	bcs.n	8018f36 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018f32:	f001 f88d 	bl	801a050 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018f36:	bf00      	nop
 8018f38:	3708      	adds	r7, #8
 8018f3a:	46bd      	mov	sp, r7
 8018f3c:	bd80      	pop	{r7, pc}
 8018f3e:	bf00      	nop
 8018f40:	20001588 	.word	0x20001588
 8018f44:	200010b4 	.word	0x200010b4
 8018f48:	20001594 	.word	0x20001594
 8018f4c:	200015a4 	.word	0x200015a4
 8018f50:	20001590 	.word	0x20001590
 8018f54:	200010b8 	.word	0x200010b8

08018f58 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8018f58:	b580      	push	{r7, lr}
 8018f5a:	b086      	sub	sp, #24
 8018f5c:	af00      	add	r7, sp, #0
 8018f5e:	6078      	str	r0, [r7, #4]
 8018f60:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8018f62:	2300      	movs	r3, #0
 8018f64:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d102      	bne.n	8018f72 <vTaskDelayUntil+0x1a>
 8018f6c:	f001 f9b4 	bl	801a2d8 <ulSetInterruptMask>
 8018f70:	e7fe      	b.n	8018f70 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 8018f72:	683b      	ldr	r3, [r7, #0]
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d102      	bne.n	8018f7e <vTaskDelayUntil+0x26>
 8018f78:	f001 f9ae 	bl	801a2d8 <ulSetInterruptMask>
 8018f7c:	e7fe      	b.n	8018f7c <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
 8018f7e:	4b23      	ldr	r3, [pc, #140]	; (801900c <vTaskDelayUntil+0xb4>)
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d002      	beq.n	8018f8c <vTaskDelayUntil+0x34>
 8018f86:	f001 f9a7 	bl	801a2d8 <ulSetInterruptMask>
 8018f8a:	e7fe      	b.n	8018f8a <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
 8018f8c:	f000 f8bc 	bl	8019108 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8018f90:	4b1f      	ldr	r3, [pc, #124]	; (8019010 <vTaskDelayUntil+0xb8>)
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	683a      	ldr	r2, [r7, #0]
 8018f9c:	4413      	add	r3, r2
 8018f9e:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	693a      	ldr	r2, [r7, #16]
 8018fa6:	429a      	cmp	r2, r3
 8018fa8:	d20b      	bcs.n	8018fc2 <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	68fa      	ldr	r2, [r7, #12]
 8018fb0:	429a      	cmp	r2, r3
 8018fb2:	d211      	bcs.n	8018fd8 <vTaskDelayUntil+0x80>
 8018fb4:	68fa      	ldr	r2, [r7, #12]
 8018fb6:	693b      	ldr	r3, [r7, #16]
 8018fb8:	429a      	cmp	r2, r3
 8018fba:	d90d      	bls.n	8018fd8 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 8018fbc:	2301      	movs	r3, #1
 8018fbe:	617b      	str	r3, [r7, #20]
 8018fc0:	e00a      	b.n	8018fd8 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	68fa      	ldr	r2, [r7, #12]
 8018fc8:	429a      	cmp	r2, r3
 8018fca:	d303      	bcc.n	8018fd4 <vTaskDelayUntil+0x7c>
 8018fcc:	68fa      	ldr	r2, [r7, #12]
 8018fce:	693b      	ldr	r3, [r7, #16]
 8018fd0:	429a      	cmp	r2, r3
 8018fd2:	d901      	bls.n	8018fd8 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 8018fd4:	2301      	movs	r3, #1
 8018fd6:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	68fa      	ldr	r2, [r7, #12]
 8018fdc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8018fde:	697b      	ldr	r3, [r7, #20]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d006      	beq.n	8018ff2 <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8018fe4:	68fa      	ldr	r2, [r7, #12]
 8018fe6:	693b      	ldr	r3, [r7, #16]
 8018fe8:	1ad3      	subs	r3, r2, r3
 8018fea:	2100      	movs	r1, #0
 8018fec:	4618      	mov	r0, r3
 8018fee:	f000 fc8f 	bl	8019910 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8018ff2:	f000 f897 	bl	8019124 <xTaskResumeAll>
 8018ff6:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018ff8:	68bb      	ldr	r3, [r7, #8]
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d101      	bne.n	8019002 <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 8018ffe:	f001 f827 	bl	801a050 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019002:	bf00      	nop
 8019004:	3718      	adds	r7, #24
 8019006:	46bd      	mov	sp, r7
 8019008:	bd80      	pop	{r7, pc}
 801900a:	bf00      	nop
 801900c:	200015b0 	.word	0x200015b0
 8019010:	2000158c 	.word	0x2000158c

08019014 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8019014:	b580      	push	{r7, lr}
 8019016:	b084      	sub	sp, #16
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801901c:	2300      	movs	r3, #0
 801901e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	2b00      	cmp	r3, #0
 8019024:	d00f      	beq.n	8019046 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8019026:	4b0c      	ldr	r3, [pc, #48]	; (8019058 <vTaskDelay+0x44>)
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	2b00      	cmp	r3, #0
 801902c:	d002      	beq.n	8019034 <vTaskDelay+0x20>
 801902e:	f001 f953 	bl	801a2d8 <ulSetInterruptMask>
 8019032:	e7fe      	b.n	8019032 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8019034:	f000 f868 	bl	8019108 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019038:	2100      	movs	r1, #0
 801903a:	6878      	ldr	r0, [r7, #4]
 801903c:	f000 fc68 	bl	8019910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8019040:	f000 f870 	bl	8019124 <xTaskResumeAll>
 8019044:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	2b00      	cmp	r3, #0
 801904a:	d101      	bne.n	8019050 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 801904c:	f001 f800 	bl	801a050 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019050:	bf00      	nop
 8019052:	3710      	adds	r7, #16
 8019054:	46bd      	mov	sp, r7
 8019056:	bd80      	pop	{r7, pc}
 8019058:	200015b0 	.word	0x200015b0

0801905c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801905c:	b580      	push	{r7, lr}
 801905e:	b088      	sub	sp, #32
 8019060:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019062:	2300      	movs	r3, #0
 8019064:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019066:	2300      	movs	r3, #0
 8019068:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801906a:	463a      	mov	r2, r7
 801906c:	1d39      	adds	r1, r7, #4
 801906e:	f107 0308 	add.w	r3, r7, #8
 8019072:	4618      	mov	r0, r3
 8019074:	f7ff f8e0 	bl	8018238 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019078:	6839      	ldr	r1, [r7, #0]
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	68ba      	ldr	r2, [r7, #8]
 801907e:	9202      	str	r2, [sp, #8]
 8019080:	9301      	str	r3, [sp, #4]
 8019082:	2300      	movs	r3, #0
 8019084:	9300      	str	r3, [sp, #0]
 8019086:	2300      	movs	r3, #0
 8019088:	460a      	mov	r2, r1
 801908a:	4919      	ldr	r1, [pc, #100]	; (80190f0 <vTaskStartScheduler+0x94>)
 801908c:	4819      	ldr	r0, [pc, #100]	; (80190f4 <vTaskStartScheduler+0x98>)
 801908e:	f7ff fde7 	bl	8018c60 <xTaskCreateStatic>
 8019092:	4603      	mov	r3, r0
 8019094:	4a18      	ldr	r2, [pc, #96]	; (80190f8 <vTaskStartScheduler+0x9c>)
 8019096:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8019098:	4b17      	ldr	r3, [pc, #92]	; (80190f8 <vTaskStartScheduler+0x9c>)
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d002      	beq.n	80190a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80190a0:	2301      	movs	r3, #1
 80190a2:	60fb      	str	r3, [r7, #12]
 80190a4:	e001      	b.n	80190aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80190a6:	2300      	movs	r3, #0
 80190a8:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	2b01      	cmp	r3, #1
 80190ae:	d102      	bne.n	80190b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80190b0:	f000 fc82 	bl	80199b8 <xTimerCreateTimerTask>
 80190b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	2b01      	cmp	r3, #1
 80190ba:	d10e      	bne.n	80190da <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80190bc:	f001 f90c 	bl	801a2d8 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80190c0:	4b0e      	ldr	r3, [pc, #56]	; (80190fc <vTaskStartScheduler+0xa0>)
 80190c2:	f04f 32ff 	mov.w	r2, #4294967295
 80190c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80190c8:	4b0d      	ldr	r3, [pc, #52]	; (8019100 <vTaskStartScheduler+0xa4>)
 80190ca:	2201      	movs	r2, #1
 80190cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80190ce:	4b0d      	ldr	r3, [pc, #52]	; (8019104 <vTaskStartScheduler+0xa8>)
 80190d0:	2200      	movs	r2, #0
 80190d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80190d4:	f001 f8b4 	bl	801a240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80190d8:	e006      	b.n	80190e8 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80190e0:	d102      	bne.n	80190e8 <vTaskStartScheduler+0x8c>
 80190e2:	f001 f8f9 	bl	801a2d8 <ulSetInterruptMask>
 80190e6:	e7fe      	b.n	80190e6 <vTaskStartScheduler+0x8a>
}
 80190e8:	bf00      	nop
 80190ea:	3710      	adds	r7, #16
 80190ec:	46bd      	mov	sp, r7
 80190ee:	bd80      	pop	{r7, pc}
 80190f0:	0801e664 	.word	0x0801e664
 80190f4:	0801968d 	.word	0x0801968d
 80190f8:	200015ac 	.word	0x200015ac
 80190fc:	200015a8 	.word	0x200015a8
 8019100:	20001594 	.word	0x20001594
 8019104:	2000158c 	.word	0x2000158c

08019108 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8019108:	b480      	push	{r7}
 801910a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801910c:	4b04      	ldr	r3, [pc, #16]	; (8019120 <vTaskSuspendAll+0x18>)
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	3301      	adds	r3, #1
 8019112:	4a03      	ldr	r2, [pc, #12]	; (8019120 <vTaskSuspendAll+0x18>)
 8019114:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8019116:	bf00      	nop
 8019118:	46bd      	mov	sp, r7
 801911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801911e:	4770      	bx	lr
 8019120:	200015b0 	.word	0x200015b0

08019124 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8019124:	b580      	push	{r7, lr}
 8019126:	b084      	sub	sp, #16
 8019128:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801912a:	2300      	movs	r3, #0
 801912c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801912e:	2300      	movs	r3, #0
 8019130:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8019132:	4b3b      	ldr	r3, [pc, #236]	; (8019220 <xTaskResumeAll+0xfc>)
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	2b00      	cmp	r3, #0
 8019138:	d102      	bne.n	8019140 <xTaskResumeAll+0x1c>
 801913a:	f001 f8cd 	bl	801a2d8 <ulSetInterruptMask>
 801913e:	e7fe      	b.n	801913e <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8019140:	f000 ff98 	bl	801a074 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8019144:	4b36      	ldr	r3, [pc, #216]	; (8019220 <xTaskResumeAll+0xfc>)
 8019146:	681b      	ldr	r3, [r3, #0]
 8019148:	3b01      	subs	r3, #1
 801914a:	4a35      	ldr	r2, [pc, #212]	; (8019220 <xTaskResumeAll+0xfc>)
 801914c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801914e:	4b34      	ldr	r3, [pc, #208]	; (8019220 <xTaskResumeAll+0xfc>)
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	2b00      	cmp	r3, #0
 8019154:	d15c      	bne.n	8019210 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019156:	4b33      	ldr	r3, [pc, #204]	; (8019224 <xTaskResumeAll+0x100>)
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	2b00      	cmp	r3, #0
 801915c:	d058      	beq.n	8019210 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801915e:	e02f      	b.n	80191c0 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019160:	4b31      	ldr	r3, [pc, #196]	; (8019228 <xTaskResumeAll+0x104>)
 8019162:	68db      	ldr	r3, [r3, #12]
 8019164:	68db      	ldr	r3, [r3, #12]
 8019166:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	3318      	adds	r3, #24
 801916c:	4618      	mov	r0, r3
 801916e:	f7ff f921 	bl	80183b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	3304      	adds	r3, #4
 8019176:	4618      	mov	r0, r3
 8019178:	f7ff f91c 	bl	80183b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019180:	4b2a      	ldr	r3, [pc, #168]	; (801922c <xTaskResumeAll+0x108>)
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	429a      	cmp	r2, r3
 8019186:	d903      	bls.n	8019190 <xTaskResumeAll+0x6c>
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801918c:	4a27      	ldr	r2, [pc, #156]	; (801922c <xTaskResumeAll+0x108>)
 801918e:	6013      	str	r3, [r2, #0]
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019194:	4613      	mov	r3, r2
 8019196:	009b      	lsls	r3, r3, #2
 8019198:	4413      	add	r3, r2
 801919a:	009b      	lsls	r3, r3, #2
 801919c:	4a24      	ldr	r2, [pc, #144]	; (8019230 <xTaskResumeAll+0x10c>)
 801919e:	441a      	add	r2, r3
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	3304      	adds	r3, #4
 80191a4:	4619      	mov	r1, r3
 80191a6:	4610      	mov	r0, r2
 80191a8:	f7ff f8a7 	bl	80182fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191b0:	4b20      	ldr	r3, [pc, #128]	; (8019234 <xTaskResumeAll+0x110>)
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191b6:	429a      	cmp	r2, r3
 80191b8:	d302      	bcc.n	80191c0 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 80191ba:	4b1f      	ldr	r3, [pc, #124]	; (8019238 <xTaskResumeAll+0x114>)
 80191bc:	2201      	movs	r2, #1
 80191be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80191c0:	4b19      	ldr	r3, [pc, #100]	; (8019228 <xTaskResumeAll+0x104>)
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d1cb      	bne.n	8019160 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d001      	beq.n	80191d2 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80191ce:	f000 fb03 	bl	80197d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80191d2:	4b1a      	ldr	r3, [pc, #104]	; (801923c <xTaskResumeAll+0x118>)
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d010      	beq.n	8019200 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80191de:	f000 f83f 	bl	8019260 <xTaskIncrementTick>
 80191e2:	4603      	mov	r3, r0
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d002      	beq.n	80191ee <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 80191e8:	4b13      	ldr	r3, [pc, #76]	; (8019238 <xTaskResumeAll+0x114>)
 80191ea:	2201      	movs	r2, #1
 80191ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	3b01      	subs	r3, #1
 80191f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d1f1      	bne.n	80191de <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 80191fa:	4b10      	ldr	r3, [pc, #64]	; (801923c <xTaskResumeAll+0x118>)
 80191fc:	2200      	movs	r2, #0
 80191fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8019200:	4b0d      	ldr	r3, [pc, #52]	; (8019238 <xTaskResumeAll+0x114>)
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	2b00      	cmp	r3, #0
 8019206:	d003      	beq.n	8019210 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8019208:	2301      	movs	r3, #1
 801920a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801920c:	f000 ff20 	bl	801a050 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019210:	f000 ff42 	bl	801a098 <vPortExitCritical>

	return xAlreadyYielded;
 8019214:	68bb      	ldr	r3, [r7, #8]
}
 8019216:	4618      	mov	r0, r3
 8019218:	3710      	adds	r7, #16
 801921a:	46bd      	mov	sp, r7
 801921c:	bd80      	pop	{r7, pc}
 801921e:	bf00      	nop
 8019220:	200015b0 	.word	0x200015b0
 8019224:	20001588 	.word	0x20001588
 8019228:	20001548 	.word	0x20001548
 801922c:	20001590 	.word	0x20001590
 8019230:	200010b8 	.word	0x200010b8
 8019234:	200010b4 	.word	0x200010b4
 8019238:	2000159c 	.word	0x2000159c
 801923c:	20001598 	.word	0x20001598

08019240 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8019240:	b480      	push	{r7}
 8019242:	b083      	sub	sp, #12
 8019244:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8019246:	4b05      	ldr	r3, [pc, #20]	; (801925c <xTaskGetTickCount+0x1c>)
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801924c:	687b      	ldr	r3, [r7, #4]
}
 801924e:	4618      	mov	r0, r3
 8019250:	370c      	adds	r7, #12
 8019252:	46bd      	mov	sp, r7
 8019254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019258:	4770      	bx	lr
 801925a:	bf00      	nop
 801925c:	2000158c 	.word	0x2000158c

08019260 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8019260:	b580      	push	{r7, lr}
 8019262:	b086      	sub	sp, #24
 8019264:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8019266:	2300      	movs	r3, #0
 8019268:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801926a:	4b4b      	ldr	r3, [pc, #300]	; (8019398 <xTaskIncrementTick+0x138>)
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	2b00      	cmp	r3, #0
 8019270:	f040 8087 	bne.w	8019382 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019274:	4b49      	ldr	r3, [pc, #292]	; (801939c <xTaskIncrementTick+0x13c>)
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	3301      	adds	r3, #1
 801927a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801927c:	4a47      	ldr	r2, [pc, #284]	; (801939c <xTaskIncrementTick+0x13c>)
 801927e:	693b      	ldr	r3, [r7, #16]
 8019280:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019282:	693b      	ldr	r3, [r7, #16]
 8019284:	2b00      	cmp	r3, #0
 8019286:	d118      	bne.n	80192ba <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8019288:	4b45      	ldr	r3, [pc, #276]	; (80193a0 <xTaskIncrementTick+0x140>)
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	2b00      	cmp	r3, #0
 8019290:	d002      	beq.n	8019298 <xTaskIncrementTick+0x38>
 8019292:	f001 f821 	bl	801a2d8 <ulSetInterruptMask>
 8019296:	e7fe      	b.n	8019296 <xTaskIncrementTick+0x36>
 8019298:	4b41      	ldr	r3, [pc, #260]	; (80193a0 <xTaskIncrementTick+0x140>)
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	60fb      	str	r3, [r7, #12]
 801929e:	4b41      	ldr	r3, [pc, #260]	; (80193a4 <xTaskIncrementTick+0x144>)
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	4a3f      	ldr	r2, [pc, #252]	; (80193a0 <xTaskIncrementTick+0x140>)
 80192a4:	6013      	str	r3, [r2, #0]
 80192a6:	4a3f      	ldr	r2, [pc, #252]	; (80193a4 <xTaskIncrementTick+0x144>)
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	6013      	str	r3, [r2, #0]
 80192ac:	4b3e      	ldr	r3, [pc, #248]	; (80193a8 <xTaskIncrementTick+0x148>)
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	3301      	adds	r3, #1
 80192b2:	4a3d      	ldr	r2, [pc, #244]	; (80193a8 <xTaskIncrementTick+0x148>)
 80192b4:	6013      	str	r3, [r2, #0]
 80192b6:	f000 fa8f 	bl	80197d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80192ba:	4b3c      	ldr	r3, [pc, #240]	; (80193ac <xTaskIncrementTick+0x14c>)
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	693a      	ldr	r2, [r7, #16]
 80192c0:	429a      	cmp	r2, r3
 80192c2:	d349      	bcc.n	8019358 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80192c4:	4b36      	ldr	r3, [pc, #216]	; (80193a0 <xTaskIncrementTick+0x140>)
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d104      	bne.n	80192d8 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80192ce:	4b37      	ldr	r3, [pc, #220]	; (80193ac <xTaskIncrementTick+0x14c>)
 80192d0:	f04f 32ff 	mov.w	r2, #4294967295
 80192d4:	601a      	str	r2, [r3, #0]
					break;
 80192d6:	e03f      	b.n	8019358 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80192d8:	4b31      	ldr	r3, [pc, #196]	; (80193a0 <xTaskIncrementTick+0x140>)
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	68db      	ldr	r3, [r3, #12]
 80192de:	68db      	ldr	r3, [r3, #12]
 80192e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80192e2:	68bb      	ldr	r3, [r7, #8]
 80192e4:	685b      	ldr	r3, [r3, #4]
 80192e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80192e8:	693a      	ldr	r2, [r7, #16]
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	429a      	cmp	r2, r3
 80192ee:	d203      	bcs.n	80192f8 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80192f0:	4a2e      	ldr	r2, [pc, #184]	; (80193ac <xTaskIncrementTick+0x14c>)
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80192f6:	e02f      	b.n	8019358 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80192f8:	68bb      	ldr	r3, [r7, #8]
 80192fa:	3304      	adds	r3, #4
 80192fc:	4618      	mov	r0, r3
 80192fe:	f7ff f859 	bl	80183b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019302:	68bb      	ldr	r3, [r7, #8]
 8019304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019306:	2b00      	cmp	r3, #0
 8019308:	d004      	beq.n	8019314 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801930a:	68bb      	ldr	r3, [r7, #8]
 801930c:	3318      	adds	r3, #24
 801930e:	4618      	mov	r0, r3
 8019310:	f7ff f850 	bl	80183b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8019314:	68bb      	ldr	r3, [r7, #8]
 8019316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019318:	4b25      	ldr	r3, [pc, #148]	; (80193b0 <xTaskIncrementTick+0x150>)
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	429a      	cmp	r2, r3
 801931e:	d903      	bls.n	8019328 <xTaskIncrementTick+0xc8>
 8019320:	68bb      	ldr	r3, [r7, #8]
 8019322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019324:	4a22      	ldr	r2, [pc, #136]	; (80193b0 <xTaskIncrementTick+0x150>)
 8019326:	6013      	str	r3, [r2, #0]
 8019328:	68bb      	ldr	r3, [r7, #8]
 801932a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801932c:	4613      	mov	r3, r2
 801932e:	009b      	lsls	r3, r3, #2
 8019330:	4413      	add	r3, r2
 8019332:	009b      	lsls	r3, r3, #2
 8019334:	4a1f      	ldr	r2, [pc, #124]	; (80193b4 <xTaskIncrementTick+0x154>)
 8019336:	441a      	add	r2, r3
 8019338:	68bb      	ldr	r3, [r7, #8]
 801933a:	3304      	adds	r3, #4
 801933c:	4619      	mov	r1, r3
 801933e:	4610      	mov	r0, r2
 8019340:	f7fe ffdb 	bl	80182fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019344:	68bb      	ldr	r3, [r7, #8]
 8019346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019348:	4b1b      	ldr	r3, [pc, #108]	; (80193b8 <xTaskIncrementTick+0x158>)
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801934e:	429a      	cmp	r2, r3
 8019350:	d3b8      	bcc.n	80192c4 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8019352:	2301      	movs	r3, #1
 8019354:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019356:	e7b5      	b.n	80192c4 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019358:	4b17      	ldr	r3, [pc, #92]	; (80193b8 <xTaskIncrementTick+0x158>)
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801935e:	4915      	ldr	r1, [pc, #84]	; (80193b4 <xTaskIncrementTick+0x154>)
 8019360:	4613      	mov	r3, r2
 8019362:	009b      	lsls	r3, r3, #2
 8019364:	4413      	add	r3, r2
 8019366:	009b      	lsls	r3, r3, #2
 8019368:	440b      	add	r3, r1
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	2b01      	cmp	r3, #1
 801936e:	d901      	bls.n	8019374 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 8019370:	2301      	movs	r3, #1
 8019372:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8019374:	4b11      	ldr	r3, [pc, #68]	; (80193bc <xTaskIncrementTick+0x15c>)
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	2b00      	cmp	r3, #0
 801937a:	d007      	beq.n	801938c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 801937c:	2301      	movs	r3, #1
 801937e:	617b      	str	r3, [r7, #20]
 8019380:	e004      	b.n	801938c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8019382:	4b0f      	ldr	r3, [pc, #60]	; (80193c0 <xTaskIncrementTick+0x160>)
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	3301      	adds	r3, #1
 8019388:	4a0d      	ldr	r2, [pc, #52]	; (80193c0 <xTaskIncrementTick+0x160>)
 801938a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801938c:	697b      	ldr	r3, [r7, #20]
}
 801938e:	4618      	mov	r0, r3
 8019390:	3718      	adds	r7, #24
 8019392:	46bd      	mov	sp, r7
 8019394:	bd80      	pop	{r7, pc}
 8019396:	bf00      	nop
 8019398:	200015b0 	.word	0x200015b0
 801939c:	2000158c 	.word	0x2000158c
 80193a0:	20001540 	.word	0x20001540
 80193a4:	20001544 	.word	0x20001544
 80193a8:	200015a0 	.word	0x200015a0
 80193ac:	200015a8 	.word	0x200015a8
 80193b0:	20001590 	.word	0x20001590
 80193b4:	200010b8 	.word	0x200010b8
 80193b8:	200010b4 	.word	0x200010b4
 80193bc:	2000159c 	.word	0x2000159c
 80193c0:	20001598 	.word	0x20001598

080193c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b082      	sub	sp, #8
 80193c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80193ca:	4b23      	ldr	r3, [pc, #140]	; (8019458 <vTaskSwitchContext+0x94>)
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d003      	beq.n	80193da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80193d2:	4b22      	ldr	r3, [pc, #136]	; (801945c <vTaskSwitchContext+0x98>)
 80193d4:	2201      	movs	r2, #1
 80193d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80193d8:	e039      	b.n	801944e <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 80193da:	4b20      	ldr	r3, [pc, #128]	; (801945c <vTaskSwitchContext+0x98>)
 80193dc:	2200      	movs	r2, #0
 80193de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80193e0:	4b1f      	ldr	r3, [pc, #124]	; (8019460 <vTaskSwitchContext+0x9c>)
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	607b      	str	r3, [r7, #4]
 80193e6:	e008      	b.n	80193fa <vTaskSwitchContext+0x36>
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	d102      	bne.n	80193f4 <vTaskSwitchContext+0x30>
 80193ee:	f000 ff73 	bl	801a2d8 <ulSetInterruptMask>
 80193f2:	e7fe      	b.n	80193f2 <vTaskSwitchContext+0x2e>
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	3b01      	subs	r3, #1
 80193f8:	607b      	str	r3, [r7, #4]
 80193fa:	491a      	ldr	r1, [pc, #104]	; (8019464 <vTaskSwitchContext+0xa0>)
 80193fc:	687a      	ldr	r2, [r7, #4]
 80193fe:	4613      	mov	r3, r2
 8019400:	009b      	lsls	r3, r3, #2
 8019402:	4413      	add	r3, r2
 8019404:	009b      	lsls	r3, r3, #2
 8019406:	440b      	add	r3, r1
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d0ec      	beq.n	80193e8 <vTaskSwitchContext+0x24>
 801940e:	687a      	ldr	r2, [r7, #4]
 8019410:	4613      	mov	r3, r2
 8019412:	009b      	lsls	r3, r3, #2
 8019414:	4413      	add	r3, r2
 8019416:	009b      	lsls	r3, r3, #2
 8019418:	4a12      	ldr	r2, [pc, #72]	; (8019464 <vTaskSwitchContext+0xa0>)
 801941a:	4413      	add	r3, r2
 801941c:	603b      	str	r3, [r7, #0]
 801941e:	683b      	ldr	r3, [r7, #0]
 8019420:	685b      	ldr	r3, [r3, #4]
 8019422:	685a      	ldr	r2, [r3, #4]
 8019424:	683b      	ldr	r3, [r7, #0]
 8019426:	605a      	str	r2, [r3, #4]
 8019428:	683b      	ldr	r3, [r7, #0]
 801942a:	685a      	ldr	r2, [r3, #4]
 801942c:	683b      	ldr	r3, [r7, #0]
 801942e:	3308      	adds	r3, #8
 8019430:	429a      	cmp	r2, r3
 8019432:	d104      	bne.n	801943e <vTaskSwitchContext+0x7a>
 8019434:	683b      	ldr	r3, [r7, #0]
 8019436:	685b      	ldr	r3, [r3, #4]
 8019438:	685a      	ldr	r2, [r3, #4]
 801943a:	683b      	ldr	r3, [r7, #0]
 801943c:	605a      	str	r2, [r3, #4]
 801943e:	683b      	ldr	r3, [r7, #0]
 8019440:	685b      	ldr	r3, [r3, #4]
 8019442:	68db      	ldr	r3, [r3, #12]
 8019444:	4a08      	ldr	r2, [pc, #32]	; (8019468 <vTaskSwitchContext+0xa4>)
 8019446:	6013      	str	r3, [r2, #0]
 8019448:	4a05      	ldr	r2, [pc, #20]	; (8019460 <vTaskSwitchContext+0x9c>)
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	6013      	str	r3, [r2, #0]
}
 801944e:	bf00      	nop
 8019450:	3708      	adds	r7, #8
 8019452:	46bd      	mov	sp, r7
 8019454:	bd80      	pop	{r7, pc}
 8019456:	bf00      	nop
 8019458:	200015b0 	.word	0x200015b0
 801945c:	2000159c 	.word	0x2000159c
 8019460:	20001590 	.word	0x20001590
 8019464:	200010b8 	.word	0x200010b8
 8019468:	200010b4 	.word	0x200010b4

0801946c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801946c:	b580      	push	{r7, lr}
 801946e:	b082      	sub	sp, #8
 8019470:	af00      	add	r7, sp, #0
 8019472:	6078      	str	r0, [r7, #4]
 8019474:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	2b00      	cmp	r3, #0
 801947a:	d102      	bne.n	8019482 <vTaskPlaceOnEventList+0x16>
 801947c:	f000 ff2c 	bl	801a2d8 <ulSetInterruptMask>
 8019480:	e7fe      	b.n	8019480 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019482:	4b07      	ldr	r3, [pc, #28]	; (80194a0 <vTaskPlaceOnEventList+0x34>)
 8019484:	681b      	ldr	r3, [r3, #0]
 8019486:	3318      	adds	r3, #24
 8019488:	4619      	mov	r1, r3
 801948a:	6878      	ldr	r0, [r7, #4]
 801948c:	f7fe ff59 	bl	8018342 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019490:	2101      	movs	r1, #1
 8019492:	6838      	ldr	r0, [r7, #0]
 8019494:	f000 fa3c 	bl	8019910 <prvAddCurrentTaskToDelayedList>
}
 8019498:	bf00      	nop
 801949a:	3708      	adds	r7, #8
 801949c:	46bd      	mov	sp, r7
 801949e:	bd80      	pop	{r7, pc}
 80194a0:	200010b4 	.word	0x200010b4

080194a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	b084      	sub	sp, #16
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	60f8      	str	r0, [r7, #12]
 80194ac:	60b9      	str	r1, [r7, #8]
 80194ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d102      	bne.n	80194bc <vTaskPlaceOnEventListRestricted+0x18>
 80194b6:	f000 ff0f 	bl	801a2d8 <ulSetInterruptMask>
 80194ba:	e7fe      	b.n	80194ba <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80194bc:	4b0a      	ldr	r3, [pc, #40]	; (80194e8 <vTaskPlaceOnEventListRestricted+0x44>)
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	3318      	adds	r3, #24
 80194c2:	4619      	mov	r1, r3
 80194c4:	68f8      	ldr	r0, [r7, #12]
 80194c6:	f7fe ff18 	bl	80182fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d002      	beq.n	80194d6 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 80194d0:	f04f 33ff 	mov.w	r3, #4294967295
 80194d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80194d6:	6879      	ldr	r1, [r7, #4]
 80194d8:	68b8      	ldr	r0, [r7, #8]
 80194da:	f000 fa19 	bl	8019910 <prvAddCurrentTaskToDelayedList>
	}
 80194de:	bf00      	nop
 80194e0:	3710      	adds	r7, #16
 80194e2:	46bd      	mov	sp, r7
 80194e4:	bd80      	pop	{r7, pc}
 80194e6:	bf00      	nop
 80194e8:	200010b4 	.word	0x200010b4

080194ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b084      	sub	sp, #16
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	68db      	ldr	r3, [r3, #12]
 80194f8:	68db      	ldr	r3, [r3, #12]
 80194fa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80194fc:	68bb      	ldr	r3, [r7, #8]
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d102      	bne.n	8019508 <xTaskRemoveFromEventList+0x1c>
 8019502:	f000 fee9 	bl	801a2d8 <ulSetInterruptMask>
 8019506:	e7fe      	b.n	8019506 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019508:	68bb      	ldr	r3, [r7, #8]
 801950a:	3318      	adds	r3, #24
 801950c:	4618      	mov	r0, r3
 801950e:	f7fe ff51 	bl	80183b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019512:	4b1e      	ldr	r3, [pc, #120]	; (801958c <xTaskRemoveFromEventList+0xa0>)
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d11d      	bne.n	8019556 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801951a:	68bb      	ldr	r3, [r7, #8]
 801951c:	3304      	adds	r3, #4
 801951e:	4618      	mov	r0, r3
 8019520:	f7fe ff48 	bl	80183b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019524:	68bb      	ldr	r3, [r7, #8]
 8019526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019528:	4b19      	ldr	r3, [pc, #100]	; (8019590 <xTaskRemoveFromEventList+0xa4>)
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	429a      	cmp	r2, r3
 801952e:	d903      	bls.n	8019538 <xTaskRemoveFromEventList+0x4c>
 8019530:	68bb      	ldr	r3, [r7, #8]
 8019532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019534:	4a16      	ldr	r2, [pc, #88]	; (8019590 <xTaskRemoveFromEventList+0xa4>)
 8019536:	6013      	str	r3, [r2, #0]
 8019538:	68bb      	ldr	r3, [r7, #8]
 801953a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801953c:	4613      	mov	r3, r2
 801953e:	009b      	lsls	r3, r3, #2
 8019540:	4413      	add	r3, r2
 8019542:	009b      	lsls	r3, r3, #2
 8019544:	4a13      	ldr	r2, [pc, #76]	; (8019594 <xTaskRemoveFromEventList+0xa8>)
 8019546:	441a      	add	r2, r3
 8019548:	68bb      	ldr	r3, [r7, #8]
 801954a:	3304      	adds	r3, #4
 801954c:	4619      	mov	r1, r3
 801954e:	4610      	mov	r0, r2
 8019550:	f7fe fed3 	bl	80182fa <vListInsertEnd>
 8019554:	e005      	b.n	8019562 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019556:	68bb      	ldr	r3, [r7, #8]
 8019558:	3318      	adds	r3, #24
 801955a:	4619      	mov	r1, r3
 801955c:	480e      	ldr	r0, [pc, #56]	; (8019598 <xTaskRemoveFromEventList+0xac>)
 801955e:	f7fe fecc 	bl	80182fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019562:	68bb      	ldr	r3, [r7, #8]
 8019564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019566:	4b0d      	ldr	r3, [pc, #52]	; (801959c <xTaskRemoveFromEventList+0xb0>)
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801956c:	429a      	cmp	r2, r3
 801956e:	d905      	bls.n	801957c <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8019570:	2301      	movs	r3, #1
 8019572:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8019574:	4b0a      	ldr	r3, [pc, #40]	; (80195a0 <xTaskRemoveFromEventList+0xb4>)
 8019576:	2201      	movs	r2, #1
 8019578:	601a      	str	r2, [r3, #0]
 801957a:	e001      	b.n	8019580 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 801957c:	2300      	movs	r3, #0
 801957e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8019580:	68fb      	ldr	r3, [r7, #12]
}
 8019582:	4618      	mov	r0, r3
 8019584:	3710      	adds	r7, #16
 8019586:	46bd      	mov	sp, r7
 8019588:	bd80      	pop	{r7, pc}
 801958a:	bf00      	nop
 801958c:	200015b0 	.word	0x200015b0
 8019590:	20001590 	.word	0x20001590
 8019594:	200010b8 	.word	0x200010b8
 8019598:	20001548 	.word	0x20001548
 801959c:	200010b4 	.word	0x200010b4
 80195a0:	2000159c 	.word	0x2000159c

080195a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80195a4:	b480      	push	{r7}
 80195a6:	b083      	sub	sp, #12
 80195a8:	af00      	add	r7, sp, #0
 80195aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80195ac:	4b06      	ldr	r3, [pc, #24]	; (80195c8 <vTaskInternalSetTimeOutState+0x24>)
 80195ae:	681a      	ldr	r2, [r3, #0]
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80195b4:	4b05      	ldr	r3, [pc, #20]	; (80195cc <vTaskInternalSetTimeOutState+0x28>)
 80195b6:	681a      	ldr	r2, [r3, #0]
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	605a      	str	r2, [r3, #4]
}
 80195bc:	bf00      	nop
 80195be:	370c      	adds	r7, #12
 80195c0:	46bd      	mov	sp, r7
 80195c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195c6:	4770      	bx	lr
 80195c8:	200015a0 	.word	0x200015a0
 80195cc:	2000158c 	.word	0x2000158c

080195d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b086      	sub	sp, #24
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	6078      	str	r0, [r7, #4]
 80195d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d102      	bne.n	80195e6 <xTaskCheckForTimeOut+0x16>
 80195e0:	f000 fe7a 	bl	801a2d8 <ulSetInterruptMask>
 80195e4:	e7fe      	b.n	80195e4 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 80195e6:	683b      	ldr	r3, [r7, #0]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d102      	bne.n	80195f2 <xTaskCheckForTimeOut+0x22>
 80195ec:	f000 fe74 	bl	801a2d8 <ulSetInterruptMask>
 80195f0:	e7fe      	b.n	80195f0 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 80195f2:	f000 fd3f 	bl	801a074 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80195f6:	4b1d      	ldr	r3, [pc, #116]	; (801966c <xTaskCheckForTimeOut+0x9c>)
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	685b      	ldr	r3, [r3, #4]
 8019600:	693a      	ldr	r2, [r7, #16]
 8019602:	1ad3      	subs	r3, r2, r3
 8019604:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019606:	683b      	ldr	r3, [r7, #0]
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801960e:	d102      	bne.n	8019616 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8019610:	2300      	movs	r3, #0
 8019612:	617b      	str	r3, [r7, #20]
 8019614:	e023      	b.n	801965e <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	681a      	ldr	r2, [r3, #0]
 801961a:	4b15      	ldr	r3, [pc, #84]	; (8019670 <xTaskCheckForTimeOut+0xa0>)
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	429a      	cmp	r2, r3
 8019620:	d007      	beq.n	8019632 <xTaskCheckForTimeOut+0x62>
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	685b      	ldr	r3, [r3, #4]
 8019626:	693a      	ldr	r2, [r7, #16]
 8019628:	429a      	cmp	r2, r3
 801962a:	d302      	bcc.n	8019632 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801962c:	2301      	movs	r3, #1
 801962e:	617b      	str	r3, [r7, #20]
 8019630:	e015      	b.n	801965e <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019632:	683b      	ldr	r3, [r7, #0]
 8019634:	681b      	ldr	r3, [r3, #0]
 8019636:	68fa      	ldr	r2, [r7, #12]
 8019638:	429a      	cmp	r2, r3
 801963a:	d20b      	bcs.n	8019654 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801963c:	683b      	ldr	r3, [r7, #0]
 801963e:	681a      	ldr	r2, [r3, #0]
 8019640:	68fb      	ldr	r3, [r7, #12]
 8019642:	1ad2      	subs	r2, r2, r3
 8019644:	683b      	ldr	r3, [r7, #0]
 8019646:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019648:	6878      	ldr	r0, [r7, #4]
 801964a:	f7ff ffab 	bl	80195a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801964e:	2300      	movs	r3, #0
 8019650:	617b      	str	r3, [r7, #20]
 8019652:	e004      	b.n	801965e <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8019654:	683b      	ldr	r3, [r7, #0]
 8019656:	2200      	movs	r2, #0
 8019658:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801965a:	2301      	movs	r3, #1
 801965c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 801965e:	f000 fd1b 	bl	801a098 <vPortExitCritical>

	return xReturn;
 8019662:	697b      	ldr	r3, [r7, #20]
}
 8019664:	4618      	mov	r0, r3
 8019666:	3718      	adds	r7, #24
 8019668:	46bd      	mov	sp, r7
 801966a:	bd80      	pop	{r7, pc}
 801966c:	2000158c 	.word	0x2000158c
 8019670:	200015a0 	.word	0x200015a0

08019674 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8019674:	b480      	push	{r7}
 8019676:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8019678:	4b03      	ldr	r3, [pc, #12]	; (8019688 <vTaskMissedYield+0x14>)
 801967a:	2201      	movs	r2, #1
 801967c:	601a      	str	r2, [r3, #0]
}
 801967e:	bf00      	nop
 8019680:	46bd      	mov	sp, r7
 8019682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019686:	4770      	bx	lr
 8019688:	2000159c 	.word	0x2000159c

0801968c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801968c:	b580      	push	{r7, lr}
 801968e:	b082      	sub	sp, #8
 8019690:	af00      	add	r7, sp, #0
 8019692:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019694:	f000 f84a 	bl	801972c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019698:	4b03      	ldr	r3, [pc, #12]	; (80196a8 <prvIdleTask+0x1c>)
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	2b01      	cmp	r3, #1
 801969e:	d9f9      	bls.n	8019694 <prvIdleTask+0x8>
			{
				taskYIELD();
 80196a0:	f000 fcd6 	bl	801a050 <vPortYield>
		prvCheckTasksWaitingTermination();
 80196a4:	e7f6      	b.n	8019694 <prvIdleTask+0x8>
 80196a6:	bf00      	nop
 80196a8:	200010b8 	.word	0x200010b8

080196ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80196ac:	b580      	push	{r7, lr}
 80196ae:	b082      	sub	sp, #8
 80196b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80196b2:	2300      	movs	r3, #0
 80196b4:	607b      	str	r3, [r7, #4]
 80196b6:	e00c      	b.n	80196d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80196b8:	687a      	ldr	r2, [r7, #4]
 80196ba:	4613      	mov	r3, r2
 80196bc:	009b      	lsls	r3, r3, #2
 80196be:	4413      	add	r3, r2
 80196c0:	009b      	lsls	r3, r3, #2
 80196c2:	4a12      	ldr	r2, [pc, #72]	; (801970c <prvInitialiseTaskLists+0x60>)
 80196c4:	4413      	add	r3, r2
 80196c6:	4618      	mov	r0, r3
 80196c8:	f7fe fdea 	bl	80182a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	3301      	adds	r3, #1
 80196d0:	607b      	str	r3, [r7, #4]
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	2b37      	cmp	r3, #55	; 0x37
 80196d6:	d9ef      	bls.n	80196b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80196d8:	480d      	ldr	r0, [pc, #52]	; (8019710 <prvInitialiseTaskLists+0x64>)
 80196da:	f7fe fde1 	bl	80182a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80196de:	480d      	ldr	r0, [pc, #52]	; (8019714 <prvInitialiseTaskLists+0x68>)
 80196e0:	f7fe fdde 	bl	80182a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80196e4:	480c      	ldr	r0, [pc, #48]	; (8019718 <prvInitialiseTaskLists+0x6c>)
 80196e6:	f7fe fddb 	bl	80182a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80196ea:	480c      	ldr	r0, [pc, #48]	; (801971c <prvInitialiseTaskLists+0x70>)
 80196ec:	f7fe fdd8 	bl	80182a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80196f0:	480b      	ldr	r0, [pc, #44]	; (8019720 <prvInitialiseTaskLists+0x74>)
 80196f2:	f7fe fdd5 	bl	80182a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80196f6:	4b0b      	ldr	r3, [pc, #44]	; (8019724 <prvInitialiseTaskLists+0x78>)
 80196f8:	4a05      	ldr	r2, [pc, #20]	; (8019710 <prvInitialiseTaskLists+0x64>)
 80196fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80196fc:	4b0a      	ldr	r3, [pc, #40]	; (8019728 <prvInitialiseTaskLists+0x7c>)
 80196fe:	4a05      	ldr	r2, [pc, #20]	; (8019714 <prvInitialiseTaskLists+0x68>)
 8019700:	601a      	str	r2, [r3, #0]
}
 8019702:	bf00      	nop
 8019704:	3708      	adds	r7, #8
 8019706:	46bd      	mov	sp, r7
 8019708:	bd80      	pop	{r7, pc}
 801970a:	bf00      	nop
 801970c:	200010b8 	.word	0x200010b8
 8019710:	20001518 	.word	0x20001518
 8019714:	2000152c 	.word	0x2000152c
 8019718:	20001548 	.word	0x20001548
 801971c:	2000155c 	.word	0x2000155c
 8019720:	20001574 	.word	0x20001574
 8019724:	20001540 	.word	0x20001540
 8019728:	20001544 	.word	0x20001544

0801972c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801972c:	b580      	push	{r7, lr}
 801972e:	b082      	sub	sp, #8
 8019730:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019732:	e019      	b.n	8019768 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8019734:	f000 fc9e 	bl	801a074 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019738:	4b10      	ldr	r3, [pc, #64]	; (801977c <prvCheckTasksWaitingTermination+0x50>)
 801973a:	68db      	ldr	r3, [r3, #12]
 801973c:	68db      	ldr	r3, [r3, #12]
 801973e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	3304      	adds	r3, #4
 8019744:	4618      	mov	r0, r3
 8019746:	f7fe fe35 	bl	80183b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801974a:	4b0d      	ldr	r3, [pc, #52]	; (8019780 <prvCheckTasksWaitingTermination+0x54>)
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	3b01      	subs	r3, #1
 8019750:	4a0b      	ldr	r2, [pc, #44]	; (8019780 <prvCheckTasksWaitingTermination+0x54>)
 8019752:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019754:	4b0b      	ldr	r3, [pc, #44]	; (8019784 <prvCheckTasksWaitingTermination+0x58>)
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	3b01      	subs	r3, #1
 801975a:	4a0a      	ldr	r2, [pc, #40]	; (8019784 <prvCheckTasksWaitingTermination+0x58>)
 801975c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801975e:	f000 fc9b 	bl	801a098 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8019762:	6878      	ldr	r0, [r7, #4]
 8019764:	f000 f810 	bl	8019788 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019768:	4b06      	ldr	r3, [pc, #24]	; (8019784 <prvCheckTasksWaitingTermination+0x58>)
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	2b00      	cmp	r3, #0
 801976e:	d1e1      	bne.n	8019734 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8019770:	bf00      	nop
 8019772:	bf00      	nop
 8019774:	3708      	adds	r7, #8
 8019776:	46bd      	mov	sp, r7
 8019778:	bd80      	pop	{r7, pc}
 801977a:	bf00      	nop
 801977c:	2000155c 	.word	0x2000155c
 8019780:	20001588 	.word	0x20001588
 8019784:	20001570 	.word	0x20001570

08019788 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8019788:	b580      	push	{r7, lr}
 801978a:	b082      	sub	sp, #8
 801978c:	af00      	add	r7, sp, #0
 801978e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019796:	2b00      	cmp	r3, #0
 8019798:	d108      	bne.n	80197ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801979e:	4618      	mov	r0, r3
 80197a0:	f000 feae 	bl	801a500 <vPortFree>
				vPortFree( pxTCB );
 80197a4:	6878      	ldr	r0, [r7, #4]
 80197a6:	f000 feab 	bl	801a500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80197aa:	e010      	b.n	80197ce <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80197b2:	2b01      	cmp	r3, #1
 80197b4:	d103      	bne.n	80197be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80197b6:	6878      	ldr	r0, [r7, #4]
 80197b8:	f000 fea2 	bl	801a500 <vPortFree>
	}
 80197bc:	e007      	b.n	80197ce <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80197c4:	2b02      	cmp	r3, #2
 80197c6:	d002      	beq.n	80197ce <prvDeleteTCB+0x46>
 80197c8:	f000 fd86 	bl	801a2d8 <ulSetInterruptMask>
 80197cc:	e7fe      	b.n	80197cc <prvDeleteTCB+0x44>
	}
 80197ce:	bf00      	nop
 80197d0:	3708      	adds	r7, #8
 80197d2:	46bd      	mov	sp, r7
 80197d4:	bd80      	pop	{r7, pc}
	...

080197d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80197d8:	b480      	push	{r7}
 80197da:	b083      	sub	sp, #12
 80197dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80197de:	4b0c      	ldr	r3, [pc, #48]	; (8019810 <prvResetNextTaskUnblockTime+0x38>)
 80197e0:	681b      	ldr	r3, [r3, #0]
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d104      	bne.n	80197f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80197e8:	4b0a      	ldr	r3, [pc, #40]	; (8019814 <prvResetNextTaskUnblockTime+0x3c>)
 80197ea:	f04f 32ff 	mov.w	r2, #4294967295
 80197ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80197f0:	e008      	b.n	8019804 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80197f2:	4b07      	ldr	r3, [pc, #28]	; (8019810 <prvResetNextTaskUnblockTime+0x38>)
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	68db      	ldr	r3, [r3, #12]
 80197f8:	68db      	ldr	r3, [r3, #12]
 80197fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	685b      	ldr	r3, [r3, #4]
 8019800:	4a04      	ldr	r2, [pc, #16]	; (8019814 <prvResetNextTaskUnblockTime+0x3c>)
 8019802:	6013      	str	r3, [r2, #0]
}
 8019804:	bf00      	nop
 8019806:	370c      	adds	r7, #12
 8019808:	46bd      	mov	sp, r7
 801980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801980e:	4770      	bx	lr
 8019810:	20001540 	.word	0x20001540
 8019814:	200015a8 	.word	0x200015a8

08019818 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8019818:	b480      	push	{r7}
 801981a:	b083      	sub	sp, #12
 801981c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801981e:	4b0b      	ldr	r3, [pc, #44]	; (801984c <xTaskGetSchedulerState+0x34>)
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	2b00      	cmp	r3, #0
 8019824:	d102      	bne.n	801982c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019826:	2301      	movs	r3, #1
 8019828:	607b      	str	r3, [r7, #4]
 801982a:	e008      	b.n	801983e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801982c:	4b08      	ldr	r3, [pc, #32]	; (8019850 <xTaskGetSchedulerState+0x38>)
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	2b00      	cmp	r3, #0
 8019832:	d102      	bne.n	801983a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8019834:	2302      	movs	r3, #2
 8019836:	607b      	str	r3, [r7, #4]
 8019838:	e001      	b.n	801983e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801983a:	2300      	movs	r3, #0
 801983c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801983e:	687b      	ldr	r3, [r7, #4]
	}
 8019840:	4618      	mov	r0, r3
 8019842:	370c      	adds	r7, #12
 8019844:	46bd      	mov	sp, r7
 8019846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801984a:	4770      	bx	lr
 801984c:	20001594 	.word	0x20001594
 8019850:	200015b0 	.word	0x200015b0

08019854 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8019854:	b580      	push	{r7, lr}
 8019856:	b084      	sub	sp, #16
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8019860:	2300      	movs	r3, #0
 8019862:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	2b00      	cmp	r3, #0
 8019868:	d046      	beq.n	80198f8 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801986a:	4b26      	ldr	r3, [pc, #152]	; (8019904 <xTaskPriorityDisinherit+0xb0>)
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	68ba      	ldr	r2, [r7, #8]
 8019870:	429a      	cmp	r2, r3
 8019872:	d002      	beq.n	801987a <xTaskPriorityDisinherit+0x26>
 8019874:	f000 fd30 	bl	801a2d8 <ulSetInterruptMask>
 8019878:	e7fe      	b.n	8019878 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 801987a:	68bb      	ldr	r3, [r7, #8]
 801987c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801987e:	2b00      	cmp	r3, #0
 8019880:	d102      	bne.n	8019888 <xTaskPriorityDisinherit+0x34>
 8019882:	f000 fd29 	bl	801a2d8 <ulSetInterruptMask>
 8019886:	e7fe      	b.n	8019886 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 8019888:	68bb      	ldr	r3, [r7, #8]
 801988a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801988c:	1e5a      	subs	r2, r3, #1
 801988e:	68bb      	ldr	r3, [r7, #8]
 8019890:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019892:	68bb      	ldr	r3, [r7, #8]
 8019894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019896:	68bb      	ldr	r3, [r7, #8]
 8019898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801989a:	429a      	cmp	r2, r3
 801989c:	d02c      	beq.n	80198f8 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801989e:	68bb      	ldr	r3, [r7, #8]
 80198a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d128      	bne.n	80198f8 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80198a6:	68bb      	ldr	r3, [r7, #8]
 80198a8:	3304      	adds	r3, #4
 80198aa:	4618      	mov	r0, r3
 80198ac:	f7fe fd82 	bl	80183b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80198b0:	68bb      	ldr	r3, [r7, #8]
 80198b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80198b4:	68bb      	ldr	r3, [r7, #8]
 80198b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80198b8:	68bb      	ldr	r3, [r7, #8]
 80198ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80198bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80198c0:	68bb      	ldr	r3, [r7, #8]
 80198c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80198c4:	68bb      	ldr	r3, [r7, #8]
 80198c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80198c8:	4b0f      	ldr	r3, [pc, #60]	; (8019908 <xTaskPriorityDisinherit+0xb4>)
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	429a      	cmp	r2, r3
 80198ce:	d903      	bls.n	80198d8 <xTaskPriorityDisinherit+0x84>
 80198d0:	68bb      	ldr	r3, [r7, #8]
 80198d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80198d4:	4a0c      	ldr	r2, [pc, #48]	; (8019908 <xTaskPriorityDisinherit+0xb4>)
 80198d6:	6013      	str	r3, [r2, #0]
 80198d8:	68bb      	ldr	r3, [r7, #8]
 80198da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80198dc:	4613      	mov	r3, r2
 80198de:	009b      	lsls	r3, r3, #2
 80198e0:	4413      	add	r3, r2
 80198e2:	009b      	lsls	r3, r3, #2
 80198e4:	4a09      	ldr	r2, [pc, #36]	; (801990c <xTaskPriorityDisinherit+0xb8>)
 80198e6:	441a      	add	r2, r3
 80198e8:	68bb      	ldr	r3, [r7, #8]
 80198ea:	3304      	adds	r3, #4
 80198ec:	4619      	mov	r1, r3
 80198ee:	4610      	mov	r0, r2
 80198f0:	f7fe fd03 	bl	80182fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80198f4:	2301      	movs	r3, #1
 80198f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80198f8:	68fb      	ldr	r3, [r7, #12]
	}
 80198fa:	4618      	mov	r0, r3
 80198fc:	3710      	adds	r7, #16
 80198fe:	46bd      	mov	sp, r7
 8019900:	bd80      	pop	{r7, pc}
 8019902:	bf00      	nop
 8019904:	200010b4 	.word	0x200010b4
 8019908:	20001590 	.word	0x20001590
 801990c:	200010b8 	.word	0x200010b8

08019910 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019910:	b580      	push	{r7, lr}
 8019912:	b084      	sub	sp, #16
 8019914:	af00      	add	r7, sp, #0
 8019916:	6078      	str	r0, [r7, #4]
 8019918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801991a:	4b21      	ldr	r3, [pc, #132]	; (80199a0 <prvAddCurrentTaskToDelayedList+0x90>)
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019920:	4b20      	ldr	r3, [pc, #128]	; (80199a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	3304      	adds	r3, #4
 8019926:	4618      	mov	r0, r3
 8019928:	f7fe fd44 	bl	80183b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019932:	d10a      	bne.n	801994a <prvAddCurrentTaskToDelayedList+0x3a>
 8019934:	683b      	ldr	r3, [r7, #0]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d007      	beq.n	801994a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801993a:	4b1a      	ldr	r3, [pc, #104]	; (80199a4 <prvAddCurrentTaskToDelayedList+0x94>)
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	3304      	adds	r3, #4
 8019940:	4619      	mov	r1, r3
 8019942:	4819      	ldr	r0, [pc, #100]	; (80199a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8019944:	f7fe fcd9 	bl	80182fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019948:	e026      	b.n	8019998 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801994a:	68fa      	ldr	r2, [r7, #12]
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	4413      	add	r3, r2
 8019950:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019952:	4b14      	ldr	r3, [pc, #80]	; (80199a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	68ba      	ldr	r2, [r7, #8]
 8019958:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801995a:	68ba      	ldr	r2, [r7, #8]
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	429a      	cmp	r2, r3
 8019960:	d209      	bcs.n	8019976 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019962:	4b12      	ldr	r3, [pc, #72]	; (80199ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8019964:	681a      	ldr	r2, [r3, #0]
 8019966:	4b0f      	ldr	r3, [pc, #60]	; (80199a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	3304      	adds	r3, #4
 801996c:	4619      	mov	r1, r3
 801996e:	4610      	mov	r0, r2
 8019970:	f7fe fce7 	bl	8018342 <vListInsert>
}
 8019974:	e010      	b.n	8019998 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019976:	4b0e      	ldr	r3, [pc, #56]	; (80199b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8019978:	681a      	ldr	r2, [r3, #0]
 801997a:	4b0a      	ldr	r3, [pc, #40]	; (80199a4 <prvAddCurrentTaskToDelayedList+0x94>)
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	3304      	adds	r3, #4
 8019980:	4619      	mov	r1, r3
 8019982:	4610      	mov	r0, r2
 8019984:	f7fe fcdd 	bl	8018342 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019988:	4b0a      	ldr	r3, [pc, #40]	; (80199b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	68ba      	ldr	r2, [r7, #8]
 801998e:	429a      	cmp	r2, r3
 8019990:	d202      	bcs.n	8019998 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8019992:	4a08      	ldr	r2, [pc, #32]	; (80199b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019994:	68bb      	ldr	r3, [r7, #8]
 8019996:	6013      	str	r3, [r2, #0]
}
 8019998:	bf00      	nop
 801999a:	3710      	adds	r7, #16
 801999c:	46bd      	mov	sp, r7
 801999e:	bd80      	pop	{r7, pc}
 80199a0:	2000158c 	.word	0x2000158c
 80199a4:	200010b4 	.word	0x200010b4
 80199a8:	20001574 	.word	0x20001574
 80199ac:	20001544 	.word	0x20001544
 80199b0:	20001540 	.word	0x20001540
 80199b4:	200015a8 	.word	0x200015a8

080199b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b088      	sub	sp, #32
 80199bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80199be:	2300      	movs	r3, #0
 80199c0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80199c2:	f000 fac7 	bl	8019f54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80199c6:	4b18      	ldr	r3, [pc, #96]	; (8019a28 <xTimerCreateTimerTask+0x70>)
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d020      	beq.n	8019a10 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80199ce:	2300      	movs	r3, #0
 80199d0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80199d2:	2300      	movs	r3, #0
 80199d4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80199d6:	463a      	mov	r2, r7
 80199d8:	1d39      	adds	r1, r7, #4
 80199da:	f107 0308 	add.w	r3, r7, #8
 80199de:	4618      	mov	r0, r3
 80199e0:	f7fe fc44 	bl	801826c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80199e4:	6839      	ldr	r1, [r7, #0]
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	68ba      	ldr	r2, [r7, #8]
 80199ea:	9202      	str	r2, [sp, #8]
 80199ec:	9301      	str	r3, [sp, #4]
 80199ee:	2302      	movs	r3, #2
 80199f0:	9300      	str	r3, [sp, #0]
 80199f2:	2300      	movs	r3, #0
 80199f4:	460a      	mov	r2, r1
 80199f6:	490d      	ldr	r1, [pc, #52]	; (8019a2c <xTimerCreateTimerTask+0x74>)
 80199f8:	480d      	ldr	r0, [pc, #52]	; (8019a30 <xTimerCreateTimerTask+0x78>)
 80199fa:	f7ff f931 	bl	8018c60 <xTaskCreateStatic>
 80199fe:	4603      	mov	r3, r0
 8019a00:	4a0c      	ldr	r2, [pc, #48]	; (8019a34 <xTimerCreateTimerTask+0x7c>)
 8019a02:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8019a04:	4b0b      	ldr	r3, [pc, #44]	; (8019a34 <xTimerCreateTimerTask+0x7c>)
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d001      	beq.n	8019a10 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8019a0c:	2301      	movs	r3, #1
 8019a0e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d102      	bne.n	8019a1c <xTimerCreateTimerTask+0x64>
 8019a16:	f000 fc5f 	bl	801a2d8 <ulSetInterruptMask>
 8019a1a:	e7fe      	b.n	8019a1a <xTimerCreateTimerTask+0x62>
	return xReturn;
 8019a1c:	68fb      	ldr	r3, [r7, #12]
}
 8019a1e:	4618      	mov	r0, r3
 8019a20:	3710      	adds	r7, #16
 8019a22:	46bd      	mov	sp, r7
 8019a24:	bd80      	pop	{r7, pc}
 8019a26:	bf00      	nop
 8019a28:	200015e4 	.word	0x200015e4
 8019a2c:	0801e66c 	.word	0x0801e66c
 8019a30:	08019b4d 	.word	0x08019b4d
 8019a34:	200015e8 	.word	0x200015e8

08019a38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019a38:	b580      	push	{r7, lr}
 8019a3a:	b08a      	sub	sp, #40	; 0x28
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	60f8      	str	r0, [r7, #12]
 8019a40:	60b9      	str	r1, [r7, #8]
 8019a42:	607a      	str	r2, [r7, #4]
 8019a44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019a46:	2300      	movs	r3, #0
 8019a48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d102      	bne.n	8019a56 <xTimerGenericCommand+0x1e>
 8019a50:	f000 fc42 	bl	801a2d8 <ulSetInterruptMask>
 8019a54:	e7fe      	b.n	8019a54 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019a56:	4b1a      	ldr	r3, [pc, #104]	; (8019ac0 <xTimerGenericCommand+0x88>)
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d02a      	beq.n	8019ab4 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019a5e:	68bb      	ldr	r3, [r7, #8]
 8019a60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019a6a:	68bb      	ldr	r3, [r7, #8]
 8019a6c:	2b05      	cmp	r3, #5
 8019a6e:	dc18      	bgt.n	8019aa2 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019a70:	f7ff fed2 	bl	8019818 <xTaskGetSchedulerState>
 8019a74:	4603      	mov	r3, r0
 8019a76:	2b02      	cmp	r3, #2
 8019a78:	d109      	bne.n	8019a8e <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019a7a:	4b11      	ldr	r3, [pc, #68]	; (8019ac0 <xTimerGenericCommand+0x88>)
 8019a7c:	6818      	ldr	r0, [r3, #0]
 8019a7e:	f107 0114 	add.w	r1, r7, #20
 8019a82:	2300      	movs	r3, #0
 8019a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019a86:	f7fe fd8a 	bl	801859e <xQueueGenericSend>
 8019a8a:	6278      	str	r0, [r7, #36]	; 0x24
 8019a8c:	e012      	b.n	8019ab4 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019a8e:	4b0c      	ldr	r3, [pc, #48]	; (8019ac0 <xTimerGenericCommand+0x88>)
 8019a90:	6818      	ldr	r0, [r3, #0]
 8019a92:	f107 0114 	add.w	r1, r7, #20
 8019a96:	2300      	movs	r3, #0
 8019a98:	2200      	movs	r2, #0
 8019a9a:	f7fe fd80 	bl	801859e <xQueueGenericSend>
 8019a9e:	6278      	str	r0, [r7, #36]	; 0x24
 8019aa0:	e008      	b.n	8019ab4 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019aa2:	4b07      	ldr	r3, [pc, #28]	; (8019ac0 <xTimerGenericCommand+0x88>)
 8019aa4:	6818      	ldr	r0, [r3, #0]
 8019aa6:	f107 0114 	add.w	r1, r7, #20
 8019aaa:	2300      	movs	r3, #0
 8019aac:	683a      	ldr	r2, [r7, #0]
 8019aae:	f7fe fe3f 	bl	8018730 <xQueueGenericSendFromISR>
 8019ab2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	3728      	adds	r7, #40	; 0x28
 8019aba:	46bd      	mov	sp, r7
 8019abc:	bd80      	pop	{r7, pc}
 8019abe:	bf00      	nop
 8019ac0:	200015e4 	.word	0x200015e4

08019ac4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8019ac4:	b580      	push	{r7, lr}
 8019ac6:	b086      	sub	sp, #24
 8019ac8:	af02      	add	r7, sp, #8
 8019aca:	6078      	str	r0, [r7, #4]
 8019acc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019ace:	4b1e      	ldr	r3, [pc, #120]	; (8019b48 <prvProcessExpiredTimer+0x84>)
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	68db      	ldr	r3, [r3, #12]
 8019ad4:	68db      	ldr	r3, [r3, #12]
 8019ad6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	3304      	adds	r3, #4
 8019adc:	4618      	mov	r0, r3
 8019ade:	f7fe fc69 	bl	80183b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019ae8:	f003 0304 	and.w	r3, r3, #4
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d01a      	beq.n	8019b26 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	699a      	ldr	r2, [r3, #24]
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	18d1      	adds	r1, r2, r3
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	683a      	ldr	r2, [r7, #0]
 8019afc:	68f8      	ldr	r0, [r7, #12]
 8019afe:	f000 f8c1 	bl	8019c84 <prvInsertTimerInActiveList>
 8019b02:	4603      	mov	r3, r0
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d017      	beq.n	8019b38 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019b08:	2300      	movs	r3, #0
 8019b0a:	9300      	str	r3, [sp, #0]
 8019b0c:	2300      	movs	r3, #0
 8019b0e:	687a      	ldr	r2, [r7, #4]
 8019b10:	2100      	movs	r1, #0
 8019b12:	68f8      	ldr	r0, [r7, #12]
 8019b14:	f7ff ff90 	bl	8019a38 <xTimerGenericCommand>
 8019b18:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8019b1a:	68bb      	ldr	r3, [r7, #8]
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d10b      	bne.n	8019b38 <prvProcessExpiredTimer+0x74>
 8019b20:	f000 fbda 	bl	801a2d8 <ulSetInterruptMask>
 8019b24:	e7fe      	b.n	8019b24 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019b2c:	f023 0301 	bic.w	r3, r3, #1
 8019b30:	b2da      	uxtb	r2, r3
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	6a1b      	ldr	r3, [r3, #32]
 8019b3c:	68f8      	ldr	r0, [r7, #12]
 8019b3e:	4798      	blx	r3
}
 8019b40:	bf00      	nop
 8019b42:	3710      	adds	r7, #16
 8019b44:	46bd      	mov	sp, r7
 8019b46:	bd80      	pop	{r7, pc}
 8019b48:	200015dc 	.word	0x200015dc

08019b4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019b4c:	b580      	push	{r7, lr}
 8019b4e:	b084      	sub	sp, #16
 8019b50:	af00      	add	r7, sp, #0
 8019b52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019b54:	f107 0308 	add.w	r3, r7, #8
 8019b58:	4618      	mov	r0, r3
 8019b5a:	f000 f84f 	bl	8019bfc <prvGetNextExpireTime>
 8019b5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019b60:	68bb      	ldr	r3, [r7, #8]
 8019b62:	4619      	mov	r1, r3
 8019b64:	68f8      	ldr	r0, [r7, #12]
 8019b66:	f000 f803 	bl	8019b70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019b6a:	f000 f8cd 	bl	8019d08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019b6e:	e7f1      	b.n	8019b54 <prvTimerTask+0x8>

08019b70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b084      	sub	sp, #16
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
 8019b78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019b7a:	f7ff fac5 	bl	8019108 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019b7e:	f107 0308 	add.w	r3, r7, #8
 8019b82:	4618      	mov	r0, r3
 8019b84:	f000 f85e 	bl	8019c44 <prvSampleTimeNow>
 8019b88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019b8a:	68bb      	ldr	r3, [r7, #8]
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d12a      	bne.n	8019be6 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019b90:	683b      	ldr	r3, [r7, #0]
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d10a      	bne.n	8019bac <prvProcessTimerOrBlockTask+0x3c>
 8019b96:	687a      	ldr	r2, [r7, #4]
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	429a      	cmp	r2, r3
 8019b9c:	d806      	bhi.n	8019bac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019b9e:	f7ff fac1 	bl	8019124 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019ba2:	68f9      	ldr	r1, [r7, #12]
 8019ba4:	6878      	ldr	r0, [r7, #4]
 8019ba6:	f7ff ff8d 	bl	8019ac4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8019baa:	e01e      	b.n	8019bea <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8019bac:	683b      	ldr	r3, [r7, #0]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d008      	beq.n	8019bc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019bb2:	4b10      	ldr	r3, [pc, #64]	; (8019bf4 <prvProcessTimerOrBlockTask+0x84>)
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d101      	bne.n	8019bc0 <prvProcessTimerOrBlockTask+0x50>
 8019bbc:	2301      	movs	r3, #1
 8019bbe:	e000      	b.n	8019bc2 <prvProcessTimerOrBlockTask+0x52>
 8019bc0:	2300      	movs	r3, #0
 8019bc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019bc4:	4b0c      	ldr	r3, [pc, #48]	; (8019bf8 <prvProcessTimerOrBlockTask+0x88>)
 8019bc6:	6818      	ldr	r0, [r3, #0]
 8019bc8:	687a      	ldr	r2, [r7, #4]
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	1ad3      	subs	r3, r2, r3
 8019bce:	683a      	ldr	r2, [r7, #0]
 8019bd0:	4619      	mov	r1, r3
 8019bd2:	f7ff f811 	bl	8018bf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019bd6:	f7ff faa5 	bl	8019124 <xTaskResumeAll>
 8019bda:	4603      	mov	r3, r0
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d104      	bne.n	8019bea <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8019be0:	f000 fa36 	bl	801a050 <vPortYield>
}
 8019be4:	e001      	b.n	8019bea <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8019be6:	f7ff fa9d 	bl	8019124 <xTaskResumeAll>
}
 8019bea:	bf00      	nop
 8019bec:	3710      	adds	r7, #16
 8019bee:	46bd      	mov	sp, r7
 8019bf0:	bd80      	pop	{r7, pc}
 8019bf2:	bf00      	nop
 8019bf4:	200015e0 	.word	0x200015e0
 8019bf8:	200015e4 	.word	0x200015e4

08019bfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019bfc:	b480      	push	{r7}
 8019bfe:	b085      	sub	sp, #20
 8019c00:	af00      	add	r7, sp, #0
 8019c02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019c04:	4b0e      	ldr	r3, [pc, #56]	; (8019c40 <prvGetNextExpireTime+0x44>)
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d101      	bne.n	8019c12 <prvGetNextExpireTime+0x16>
 8019c0e:	2201      	movs	r2, #1
 8019c10:	e000      	b.n	8019c14 <prvGetNextExpireTime+0x18>
 8019c12:	2200      	movs	r2, #0
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d105      	bne.n	8019c2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019c20:	4b07      	ldr	r3, [pc, #28]	; (8019c40 <prvGetNextExpireTime+0x44>)
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	68db      	ldr	r3, [r3, #12]
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	60fb      	str	r3, [r7, #12]
 8019c2a:	e001      	b.n	8019c30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019c2c:	2300      	movs	r3, #0
 8019c2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019c30:	68fb      	ldr	r3, [r7, #12]
}
 8019c32:	4618      	mov	r0, r3
 8019c34:	3714      	adds	r7, #20
 8019c36:	46bd      	mov	sp, r7
 8019c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c3c:	4770      	bx	lr
 8019c3e:	bf00      	nop
 8019c40:	200015dc 	.word	0x200015dc

08019c44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019c44:	b580      	push	{r7, lr}
 8019c46:	b084      	sub	sp, #16
 8019c48:	af00      	add	r7, sp, #0
 8019c4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019c4c:	f7ff faf8 	bl	8019240 <xTaskGetTickCount>
 8019c50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019c52:	4b0b      	ldr	r3, [pc, #44]	; (8019c80 <prvSampleTimeNow+0x3c>)
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	68fa      	ldr	r2, [r7, #12]
 8019c58:	429a      	cmp	r2, r3
 8019c5a:	d205      	bcs.n	8019c68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019c5c:	f000 f91e 	bl	8019e9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	2201      	movs	r2, #1
 8019c64:	601a      	str	r2, [r3, #0]
 8019c66:	e002      	b.n	8019c6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	2200      	movs	r2, #0
 8019c6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019c6e:	4a04      	ldr	r2, [pc, #16]	; (8019c80 <prvSampleTimeNow+0x3c>)
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019c74:	68fb      	ldr	r3, [r7, #12]
}
 8019c76:	4618      	mov	r0, r3
 8019c78:	3710      	adds	r7, #16
 8019c7a:	46bd      	mov	sp, r7
 8019c7c:	bd80      	pop	{r7, pc}
 8019c7e:	bf00      	nop
 8019c80:	200015ec 	.word	0x200015ec

08019c84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019c84:	b580      	push	{r7, lr}
 8019c86:	b086      	sub	sp, #24
 8019c88:	af00      	add	r7, sp, #0
 8019c8a:	60f8      	str	r0, [r7, #12]
 8019c8c:	60b9      	str	r1, [r7, #8]
 8019c8e:	607a      	str	r2, [r7, #4]
 8019c90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019c92:	2300      	movs	r3, #0
 8019c94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019c96:	68fb      	ldr	r3, [r7, #12]
 8019c98:	68ba      	ldr	r2, [r7, #8]
 8019c9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	68fa      	ldr	r2, [r7, #12]
 8019ca0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019ca2:	68ba      	ldr	r2, [r7, #8]
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	429a      	cmp	r2, r3
 8019ca8:	d812      	bhi.n	8019cd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019caa:	687a      	ldr	r2, [r7, #4]
 8019cac:	683b      	ldr	r3, [r7, #0]
 8019cae:	1ad2      	subs	r2, r2, r3
 8019cb0:	68fb      	ldr	r3, [r7, #12]
 8019cb2:	699b      	ldr	r3, [r3, #24]
 8019cb4:	429a      	cmp	r2, r3
 8019cb6:	d302      	bcc.n	8019cbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019cb8:	2301      	movs	r3, #1
 8019cba:	617b      	str	r3, [r7, #20]
 8019cbc:	e01b      	b.n	8019cf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019cbe:	4b10      	ldr	r3, [pc, #64]	; (8019d00 <prvInsertTimerInActiveList+0x7c>)
 8019cc0:	681a      	ldr	r2, [r3, #0]
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	3304      	adds	r3, #4
 8019cc6:	4619      	mov	r1, r3
 8019cc8:	4610      	mov	r0, r2
 8019cca:	f7fe fb3a 	bl	8018342 <vListInsert>
 8019cce:	e012      	b.n	8019cf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019cd0:	687a      	ldr	r2, [r7, #4]
 8019cd2:	683b      	ldr	r3, [r7, #0]
 8019cd4:	429a      	cmp	r2, r3
 8019cd6:	d206      	bcs.n	8019ce6 <prvInsertTimerInActiveList+0x62>
 8019cd8:	68ba      	ldr	r2, [r7, #8]
 8019cda:	683b      	ldr	r3, [r7, #0]
 8019cdc:	429a      	cmp	r2, r3
 8019cde:	d302      	bcc.n	8019ce6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019ce0:	2301      	movs	r3, #1
 8019ce2:	617b      	str	r3, [r7, #20]
 8019ce4:	e007      	b.n	8019cf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019ce6:	4b07      	ldr	r3, [pc, #28]	; (8019d04 <prvInsertTimerInActiveList+0x80>)
 8019ce8:	681a      	ldr	r2, [r3, #0]
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	3304      	adds	r3, #4
 8019cee:	4619      	mov	r1, r3
 8019cf0:	4610      	mov	r0, r2
 8019cf2:	f7fe fb26 	bl	8018342 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019cf6:	697b      	ldr	r3, [r7, #20]
}
 8019cf8:	4618      	mov	r0, r3
 8019cfa:	3718      	adds	r7, #24
 8019cfc:	46bd      	mov	sp, r7
 8019cfe:	bd80      	pop	{r7, pc}
 8019d00:	200015e0 	.word	0x200015e0
 8019d04:	200015dc 	.word	0x200015dc

08019d08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019d08:	b580      	push	{r7, lr}
 8019d0a:	b08c      	sub	sp, #48	; 0x30
 8019d0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019d0e:	e0b2      	b.n	8019e76 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019d10:	68bb      	ldr	r3, [r7, #8]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	da11      	bge.n	8019d3a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019d16:	f107 0308 	add.w	r3, r7, #8
 8019d1a:	3304      	adds	r3, #4
 8019d1c:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d102      	bne.n	8019d2a <prvProcessReceivedCommands+0x22>
 8019d24:	f000 fad8 	bl	801a2d8 <ulSetInterruptMask>
 8019d28:	e7fe      	b.n	8019d28 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d30:	6850      	ldr	r0, [r2, #4]
 8019d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d34:	6892      	ldr	r2, [r2, #8]
 8019d36:	4611      	mov	r1, r2
 8019d38:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019d3a:	68bb      	ldr	r3, [r7, #8]
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	f2c0 809a 	blt.w	8019e76 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019d42:	693b      	ldr	r3, [r7, #16]
 8019d44:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019d46:	6a3b      	ldr	r3, [r7, #32]
 8019d48:	695b      	ldr	r3, [r3, #20]
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d004      	beq.n	8019d58 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019d4e:	6a3b      	ldr	r3, [r7, #32]
 8019d50:	3304      	adds	r3, #4
 8019d52:	4618      	mov	r0, r3
 8019d54:	f7fe fb2e 	bl	80183b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019d58:	1d3b      	adds	r3, r7, #4
 8019d5a:	4618      	mov	r0, r3
 8019d5c:	f7ff ff72 	bl	8019c44 <prvSampleTimeNow>
 8019d60:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8019d62:	68bb      	ldr	r3, [r7, #8]
 8019d64:	2b09      	cmp	r3, #9
 8019d66:	f200 8085 	bhi.w	8019e74 <prvProcessReceivedCommands+0x16c>
 8019d6a:	a201      	add	r2, pc, #4	; (adr r2, 8019d70 <prvProcessReceivedCommands+0x68>)
 8019d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d70:	08019d99 	.word	0x08019d99
 8019d74:	08019d99 	.word	0x08019d99
 8019d78:	08019d99 	.word	0x08019d99
 8019d7c:	08019dfd 	.word	0x08019dfd
 8019d80:	08019e11 	.word	0x08019e11
 8019d84:	08019e4b 	.word	0x08019e4b
 8019d88:	08019d99 	.word	0x08019d99
 8019d8c:	08019d99 	.word	0x08019d99
 8019d90:	08019dfd 	.word	0x08019dfd
 8019d94:	08019e11 	.word	0x08019e11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019d98:	6a3b      	ldr	r3, [r7, #32]
 8019d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019d9e:	f043 0301 	orr.w	r3, r3, #1
 8019da2:	b2da      	uxtb	r2, r3
 8019da4:	6a3b      	ldr	r3, [r7, #32]
 8019da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019daa:	68fa      	ldr	r2, [r7, #12]
 8019dac:	6a3b      	ldr	r3, [r7, #32]
 8019dae:	699b      	ldr	r3, [r3, #24]
 8019db0:	18d1      	adds	r1, r2, r3
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	69fa      	ldr	r2, [r7, #28]
 8019db6:	6a38      	ldr	r0, [r7, #32]
 8019db8:	f7ff ff64 	bl	8019c84 <prvInsertTimerInActiveList>
 8019dbc:	4603      	mov	r3, r0
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d059      	beq.n	8019e76 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019dc2:	6a3b      	ldr	r3, [r7, #32]
 8019dc4:	6a1b      	ldr	r3, [r3, #32]
 8019dc6:	6a38      	ldr	r0, [r7, #32]
 8019dc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019dca:	6a3b      	ldr	r3, [r7, #32]
 8019dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019dd0:	f003 0304 	and.w	r3, r3, #4
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d04e      	beq.n	8019e76 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019dd8:	68fa      	ldr	r2, [r7, #12]
 8019dda:	6a3b      	ldr	r3, [r7, #32]
 8019ddc:	699b      	ldr	r3, [r3, #24]
 8019dde:	441a      	add	r2, r3
 8019de0:	2300      	movs	r3, #0
 8019de2:	9300      	str	r3, [sp, #0]
 8019de4:	2300      	movs	r3, #0
 8019de6:	2100      	movs	r1, #0
 8019de8:	6a38      	ldr	r0, [r7, #32]
 8019dea:	f7ff fe25 	bl	8019a38 <xTimerGenericCommand>
 8019dee:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8019df0:	69bb      	ldr	r3, [r7, #24]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d13f      	bne.n	8019e76 <prvProcessReceivedCommands+0x16e>
 8019df6:	f000 fa6f 	bl	801a2d8 <ulSetInterruptMask>
 8019dfa:	e7fe      	b.n	8019dfa <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019dfc:	6a3b      	ldr	r3, [r7, #32]
 8019dfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019e02:	f023 0301 	bic.w	r3, r3, #1
 8019e06:	b2da      	uxtb	r2, r3
 8019e08:	6a3b      	ldr	r3, [r7, #32]
 8019e0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019e0e:	e032      	b.n	8019e76 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019e10:	6a3b      	ldr	r3, [r7, #32]
 8019e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019e16:	f043 0301 	orr.w	r3, r3, #1
 8019e1a:	b2da      	uxtb	r2, r3
 8019e1c:	6a3b      	ldr	r3, [r7, #32]
 8019e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019e22:	68fa      	ldr	r2, [r7, #12]
 8019e24:	6a3b      	ldr	r3, [r7, #32]
 8019e26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019e28:	6a3b      	ldr	r3, [r7, #32]
 8019e2a:	699b      	ldr	r3, [r3, #24]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d102      	bne.n	8019e36 <prvProcessReceivedCommands+0x12e>
 8019e30:	f000 fa52 	bl	801a2d8 <ulSetInterruptMask>
 8019e34:	e7fe      	b.n	8019e34 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019e36:	6a3b      	ldr	r3, [r7, #32]
 8019e38:	699a      	ldr	r2, [r3, #24]
 8019e3a:	69fb      	ldr	r3, [r7, #28]
 8019e3c:	18d1      	adds	r1, r2, r3
 8019e3e:	69fb      	ldr	r3, [r7, #28]
 8019e40:	69fa      	ldr	r2, [r7, #28]
 8019e42:	6a38      	ldr	r0, [r7, #32]
 8019e44:	f7ff ff1e 	bl	8019c84 <prvInsertTimerInActiveList>
					break;
 8019e48:	e015      	b.n	8019e76 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019e4a:	6a3b      	ldr	r3, [r7, #32]
 8019e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019e50:	f003 0302 	and.w	r3, r3, #2
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d103      	bne.n	8019e60 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8019e58:	6a38      	ldr	r0, [r7, #32]
 8019e5a:	f000 fb51 	bl	801a500 <vPortFree>
 8019e5e:	e00a      	b.n	8019e76 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019e60:	6a3b      	ldr	r3, [r7, #32]
 8019e62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019e66:	f023 0301 	bic.w	r3, r3, #1
 8019e6a:	b2da      	uxtb	r2, r3
 8019e6c:	6a3b      	ldr	r3, [r7, #32]
 8019e6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019e72:	e000      	b.n	8019e76 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8019e74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019e76:	4b08      	ldr	r3, [pc, #32]	; (8019e98 <prvProcessReceivedCommands+0x190>)
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	f107 0108 	add.w	r1, r7, #8
 8019e7e:	2200      	movs	r2, #0
 8019e80:	4618      	mov	r0, r3
 8019e82:	f7fe fcc6 	bl	8018812 <xQueueReceive>
 8019e86:	4603      	mov	r3, r0
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	f47f af41 	bne.w	8019d10 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8019e8e:	bf00      	nop
 8019e90:	bf00      	nop
 8019e92:	3728      	adds	r7, #40	; 0x28
 8019e94:	46bd      	mov	sp, r7
 8019e96:	bd80      	pop	{r7, pc}
 8019e98:	200015e4 	.word	0x200015e4

08019e9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019e9c:	b580      	push	{r7, lr}
 8019e9e:	b088      	sub	sp, #32
 8019ea0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019ea2:	e040      	b.n	8019f26 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019ea4:	4b29      	ldr	r3, [pc, #164]	; (8019f4c <prvSwitchTimerLists+0xb0>)
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	68db      	ldr	r3, [r3, #12]
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019eae:	4b27      	ldr	r3, [pc, #156]	; (8019f4c <prvSwitchTimerLists+0xb0>)
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	68db      	ldr	r3, [r3, #12]
 8019eb4:	68db      	ldr	r3, [r3, #12]
 8019eb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	3304      	adds	r3, #4
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	f7fe fa79 	bl	80183b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	6a1b      	ldr	r3, [r3, #32]
 8019ec6:	68f8      	ldr	r0, [r7, #12]
 8019ec8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019eca:	68fb      	ldr	r3, [r7, #12]
 8019ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019ed0:	f003 0304 	and.w	r3, r3, #4
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d026      	beq.n	8019f26 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	699b      	ldr	r3, [r3, #24]
 8019edc:	693a      	ldr	r2, [r7, #16]
 8019ede:	4413      	add	r3, r2
 8019ee0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019ee2:	68ba      	ldr	r2, [r7, #8]
 8019ee4:	693b      	ldr	r3, [r7, #16]
 8019ee6:	429a      	cmp	r2, r3
 8019ee8:	d90e      	bls.n	8019f08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	68ba      	ldr	r2, [r7, #8]
 8019eee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	68fa      	ldr	r2, [r7, #12]
 8019ef4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019ef6:	4b15      	ldr	r3, [pc, #84]	; (8019f4c <prvSwitchTimerLists+0xb0>)
 8019ef8:	681a      	ldr	r2, [r3, #0]
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	3304      	adds	r3, #4
 8019efe:	4619      	mov	r1, r3
 8019f00:	4610      	mov	r0, r2
 8019f02:	f7fe fa1e 	bl	8018342 <vListInsert>
 8019f06:	e00e      	b.n	8019f26 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019f08:	2300      	movs	r3, #0
 8019f0a:	9300      	str	r3, [sp, #0]
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	693a      	ldr	r2, [r7, #16]
 8019f10:	2100      	movs	r1, #0
 8019f12:	68f8      	ldr	r0, [r7, #12]
 8019f14:	f7ff fd90 	bl	8019a38 <xTimerGenericCommand>
 8019f18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d102      	bne.n	8019f26 <prvSwitchTimerLists+0x8a>
 8019f20:	f000 f9da 	bl	801a2d8 <ulSetInterruptMask>
 8019f24:	e7fe      	b.n	8019f24 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019f26:	4b09      	ldr	r3, [pc, #36]	; (8019f4c <prvSwitchTimerLists+0xb0>)
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d1b9      	bne.n	8019ea4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019f30:	4b06      	ldr	r3, [pc, #24]	; (8019f4c <prvSwitchTimerLists+0xb0>)
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019f36:	4b06      	ldr	r3, [pc, #24]	; (8019f50 <prvSwitchTimerLists+0xb4>)
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	4a04      	ldr	r2, [pc, #16]	; (8019f4c <prvSwitchTimerLists+0xb0>)
 8019f3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019f3e:	4a04      	ldr	r2, [pc, #16]	; (8019f50 <prvSwitchTimerLists+0xb4>)
 8019f40:	697b      	ldr	r3, [r7, #20]
 8019f42:	6013      	str	r3, [r2, #0]
}
 8019f44:	bf00      	nop
 8019f46:	3718      	adds	r7, #24
 8019f48:	46bd      	mov	sp, r7
 8019f4a:	bd80      	pop	{r7, pc}
 8019f4c:	200015dc 	.word	0x200015dc
 8019f50:	200015e0 	.word	0x200015e0

08019f54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019f54:	b580      	push	{r7, lr}
 8019f56:	b082      	sub	sp, #8
 8019f58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019f5a:	f000 f88b 	bl	801a074 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019f5e:	4b15      	ldr	r3, [pc, #84]	; (8019fb4 <prvCheckForValidListAndQueue+0x60>)
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d120      	bne.n	8019fa8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019f66:	4814      	ldr	r0, [pc, #80]	; (8019fb8 <prvCheckForValidListAndQueue+0x64>)
 8019f68:	f7fe f99a 	bl	80182a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019f6c:	4813      	ldr	r0, [pc, #76]	; (8019fbc <prvCheckForValidListAndQueue+0x68>)
 8019f6e:	f7fe f997 	bl	80182a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019f72:	4b13      	ldr	r3, [pc, #76]	; (8019fc0 <prvCheckForValidListAndQueue+0x6c>)
 8019f74:	4a10      	ldr	r2, [pc, #64]	; (8019fb8 <prvCheckForValidListAndQueue+0x64>)
 8019f76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019f78:	4b12      	ldr	r3, [pc, #72]	; (8019fc4 <prvCheckForValidListAndQueue+0x70>)
 8019f7a:	4a10      	ldr	r2, [pc, #64]	; (8019fbc <prvCheckForValidListAndQueue+0x68>)
 8019f7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019f7e:	2300      	movs	r3, #0
 8019f80:	9300      	str	r3, [sp, #0]
 8019f82:	4b11      	ldr	r3, [pc, #68]	; (8019fc8 <prvCheckForValidListAndQueue+0x74>)
 8019f84:	4a11      	ldr	r2, [pc, #68]	; (8019fcc <prvCheckForValidListAndQueue+0x78>)
 8019f86:	2110      	movs	r1, #16
 8019f88:	200a      	movs	r0, #10
 8019f8a:	f7fe fa95 	bl	80184b8 <xQueueGenericCreateStatic>
 8019f8e:	4603      	mov	r3, r0
 8019f90:	4a08      	ldr	r2, [pc, #32]	; (8019fb4 <prvCheckForValidListAndQueue+0x60>)
 8019f92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019f94:	4b07      	ldr	r3, [pc, #28]	; (8019fb4 <prvCheckForValidListAndQueue+0x60>)
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d005      	beq.n	8019fa8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019f9c:	4b05      	ldr	r3, [pc, #20]	; (8019fb4 <prvCheckForValidListAndQueue+0x60>)
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	490b      	ldr	r1, [pc, #44]	; (8019fd0 <prvCheckForValidListAndQueue+0x7c>)
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	f7fe fdfe 	bl	8018ba4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019fa8:	f000 f876 	bl	801a098 <vPortExitCritical>
}
 8019fac:	bf00      	nop
 8019fae:	46bd      	mov	sp, r7
 8019fb0:	bd80      	pop	{r7, pc}
 8019fb2:	bf00      	nop
 8019fb4:	200015e4 	.word	0x200015e4
 8019fb8:	200015b4 	.word	0x200015b4
 8019fbc:	200015c8 	.word	0x200015c8
 8019fc0:	200015dc 	.word	0x200015dc
 8019fc4:	200015e0 	.word	0x200015e0
 8019fc8:	20001690 	.word	0x20001690
 8019fcc:	200015f0 	.word	0x200015f0
 8019fd0:	0801e674 	.word	0x0801e674

08019fd4 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8019fd4:	b480      	push	{r7}
 8019fd6:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019fd8:	4b0b      	ldr	r3, [pc, #44]	; (801a008 <vPortSetupTimerInterrupt+0x34>)
 8019fda:	2200      	movs	r2, #0
 8019fdc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019fde:	4b0b      	ldr	r3, [pc, #44]	; (801a00c <vPortSetupTimerInterrupt+0x38>)
 8019fe0:	2200      	movs	r2, #0
 8019fe2:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019fe4:	4b0a      	ldr	r3, [pc, #40]	; (801a010 <vPortSetupTimerInterrupt+0x3c>)
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	4a0a      	ldr	r2, [pc, #40]	; (801a014 <vPortSetupTimerInterrupt+0x40>)
 8019fea:	fba2 2303 	umull	r2, r3, r2, r3
 8019fee:	099b      	lsrs	r3, r3, #6
 8019ff0:	4a09      	ldr	r2, [pc, #36]	; (801a018 <vPortSetupTimerInterrupt+0x44>)
 8019ff2:	3b01      	subs	r3, #1
 8019ff4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8019ff6:	4b04      	ldr	r3, [pc, #16]	; (801a008 <vPortSetupTimerInterrupt+0x34>)
 8019ff8:	2207      	movs	r2, #7
 8019ffa:	601a      	str	r2, [r3, #0]
}
 8019ffc:	bf00      	nop
 8019ffe:	46bd      	mov	sp, r7
 801a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a004:	4770      	bx	lr
 801a006:	bf00      	nop
 801a008:	e000e010 	.word	0xe000e010
 801a00c:	e000e018 	.word	0xe000e018
 801a010:	20000004 	.word	0x20000004
 801a014:	10624dd3 	.word	0x10624dd3
 801a018:	e000e014 	.word	0xe000e014

0801a01c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a01c:	b580      	push	{r7, lr}
 801a01e:	b082      	sub	sp, #8
 801a020:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801a022:	2300      	movs	r3, #0
 801a024:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 801a026:	4b09      	ldr	r3, [pc, #36]	; (801a04c <prvTaskExitError+0x30>)
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a02e:	d002      	beq.n	801a036 <prvTaskExitError+0x1a>
 801a030:	f000 f952 	bl	801a2d8 <ulSetInterruptMask>
 801a034:	e7fe      	b.n	801a034 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 801a036:	f000 f94f 	bl	801a2d8 <ulSetInterruptMask>

	while( ulDummy == 0 )
 801a03a:	bf00      	nop
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d0fc      	beq.n	801a03c <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 801a042:	bf00      	nop
 801a044:	bf00      	nop
 801a046:	3708      	adds	r7, #8
 801a048:	46bd      	mov	sp, r7
 801a04a:	bd80      	pop	{r7, pc}
 801a04c:	20000010 	.word	0x20000010

0801a050 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 801a050:	b480      	push	{r7}
 801a052:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a054:	4b06      	ldr	r3, [pc, #24]	; (801a070 <vPortYield+0x20>)
 801a056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a05a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801a05c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801a060:	f3bf 8f6f 	isb	sy
}
 801a064:	bf00      	nop
 801a066:	46bd      	mov	sp, r7
 801a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a06c:	4770      	bx	lr
 801a06e:	bf00      	nop
 801a070:	e000ed04 	.word	0xe000ed04

0801a074 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 801a074:	b580      	push	{r7, lr}
 801a076:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 801a078:	f000 f92e 	bl	801a2d8 <ulSetInterruptMask>
	ulCriticalNesting++;
 801a07c:	4b05      	ldr	r3, [pc, #20]	; (801a094 <vPortEnterCritical+0x20>)
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	3301      	adds	r3, #1
 801a082:	4a04      	ldr	r2, [pc, #16]	; (801a094 <vPortEnterCritical+0x20>)
 801a084:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801a086:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801a08a:	f3bf 8f6f 	isb	sy
}
 801a08e:	bf00      	nop
 801a090:	bd80      	pop	{r7, pc}
 801a092:	bf00      	nop
 801a094:	20000010 	.word	0x20000010

0801a098 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 801a098:	b580      	push	{r7, lr}
 801a09a:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 801a09c:	4b0a      	ldr	r3, [pc, #40]	; (801a0c8 <vPortExitCritical+0x30>)
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d102      	bne.n	801a0aa <vPortExitCritical+0x12>
 801a0a4:	f000 f918 	bl	801a2d8 <ulSetInterruptMask>
 801a0a8:	e7fe      	b.n	801a0a8 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 801a0aa:	4b07      	ldr	r3, [pc, #28]	; (801a0c8 <vPortExitCritical+0x30>)
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	3b01      	subs	r3, #1
 801a0b0:	4a05      	ldr	r2, [pc, #20]	; (801a0c8 <vPortExitCritical+0x30>)
 801a0b2:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 801a0b4:	4b04      	ldr	r3, [pc, #16]	; (801a0c8 <vPortExitCritical+0x30>)
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d102      	bne.n	801a0c2 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 801a0bc:	2000      	movs	r0, #0
 801a0be:	f000 f918 	bl	801a2f2 <vClearInterruptMask>
	}
}
 801a0c2:	bf00      	nop
 801a0c4:	bd80      	pop	{r7, pc}
 801a0c6:	bf00      	nop
 801a0c8:	20000010 	.word	0x20000010

0801a0cc <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 801a0cc:	b580      	push	{r7, lr}
 801a0ce:	b082      	sub	sp, #8
 801a0d0:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801a0d2:	f000 f901 	bl	801a2d8 <ulSetInterruptMask>
 801a0d6:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a0d8:	f7ff f8c2 	bl	8019260 <xTaskIncrementTick>
 801a0dc:	4603      	mov	r3, r0
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d003      	beq.n	801a0ea <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a0e2:	4b05      	ldr	r3, [pc, #20]	; (801a0f8 <xPortSysTickHandler+0x2c>)
 801a0e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a0e8:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 801a0ea:	6878      	ldr	r0, [r7, #4]
 801a0ec:	f000 f901 	bl	801a2f2 <vClearInterruptMask>
}
 801a0f0:	bf00      	nop
 801a0f2:	3708      	adds	r7, #8
 801a0f4:	46bd      	mov	sp, r7
 801a0f6:	bd80      	pop	{r7, pc}
 801a0f8:	e000ed04 	.word	0xe000ed04

0801a0fc <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b084      	sub	sp, #16
 801a100:	af00      	add	r7, sp, #0
 801a102:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	699b      	ldr	r3, [r3, #24]
 801a108:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	3b02      	subs	r3, #2
 801a10e:	781b      	ldrb	r3, [r3, #0]
 801a110:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 801a112:	7afb      	ldrb	r3, [r7, #11]
 801a114:	2b02      	cmp	r3, #2
 801a116:	d102      	bne.n	801a11e <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 801a118:	f000 f8b2 	bl	801a280 <vRestoreContextOfFirstTask>
		}
		break;
 801a11c:	e002      	b.n	801a124 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 801a11e:	f000 f8db 	bl	801a2d8 <ulSetInterruptMask>
 801a122:	e7fe      	b.n	801a122 <vPortSVCHandler_C+0x26>
		}
	}
}
 801a124:	bf00      	nop
 801a126:	3710      	adds	r7, #16
 801a128:	46bd      	mov	sp, r7
 801a12a:	bd80      	pop	{r7, pc}

0801a12c <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 801a12c:	b480      	push	{r7}
 801a12e:	b085      	sub	sp, #20
 801a130:	af00      	add	r7, sp, #0
 801a132:	60f8      	str	r0, [r7, #12]
 801a134:	60b9      	str	r1, [r7, #8]
 801a136:	607a      	str	r2, [r7, #4]
 801a138:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	3b04      	subs	r3, #4
 801a13e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801a146:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801a148:	68fb      	ldr	r3, [r7, #12]
 801a14a:	3b04      	subs	r3, #4
 801a14c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 801a14e:	687a      	ldr	r2, [r7, #4]
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	3b04      	subs	r3, #4
 801a158:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a15a:	4a38      	ldr	r2, [pc, #224]	; (801a23c <pxPortInitialiseStack+0x110>)
 801a15c:	68fb      	ldr	r3, [r7, #12]
 801a15e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	3b04      	subs	r3, #4
 801a164:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 801a16c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	3b04      	subs	r3, #4
 801a172:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 801a17a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801a17c:	68fb      	ldr	r3, [r7, #12]
 801a17e:	3b04      	subs	r3, #4
 801a180:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 801a188:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801a18a:	68fb      	ldr	r3, [r7, #12]
 801a18c:	3b04      	subs	r3, #4
 801a18e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 801a196:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	3b04      	subs	r3, #4
 801a19c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 801a19e:	683a      	ldr	r2, [r7, #0]
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801a1a4:	68fb      	ldr	r3, [r7, #12]
 801a1a6:	3b04      	subs	r3, #4
 801a1a8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 801a1b0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	3b04      	subs	r3, #4
 801a1b6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 801a1be:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	3b04      	subs	r3, #4
 801a1c4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 801a1c6:	68fb      	ldr	r3, [r7, #12]
 801a1c8:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 801a1cc:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	3b04      	subs	r3, #4
 801a1d2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 801a1d4:	68fb      	ldr	r3, [r7, #12]
 801a1d6:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 801a1da:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	3b04      	subs	r3, #4
 801a1e0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 801a1e2:	68fb      	ldr	r3, [r7, #12]
 801a1e4:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 801a1e8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	3b04      	subs	r3, #4
 801a1ee:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 801a1f6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	3b04      	subs	r3, #4
 801a1fc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 801a1fe:	68fb      	ldr	r3, [r7, #12]
 801a200:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 801a204:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801a206:	68fb      	ldr	r3, [r7, #12]
 801a208:	3b04      	subs	r3, #4
 801a20a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 801a212:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	3b04      	subs	r3, #4
 801a218:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	f06f 0243 	mvn.w	r2, #67	; 0x43
 801a220:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	3b04      	subs	r3, #4
 801a226:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 801a228:	68ba      	ldr	r2, [r7, #8]
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 801a22e:	68fb      	ldr	r3, [r7, #12]
}
 801a230:	4618      	mov	r0, r3
 801a232:	3714      	adds	r7, #20
 801a234:	46bd      	mov	sp, r7
 801a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a23a:	4770      	bx	lr
 801a23c:	0801a01d 	.word	0x0801a01d

0801a240 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 801a240:	b580      	push	{r7, lr}
 801a242:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a244:	4b0c      	ldr	r3, [pc, #48]	; (801a278 <xPortStartScheduler+0x38>)
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	4a0b      	ldr	r2, [pc, #44]	; (801a278 <xPortStartScheduler+0x38>)
 801a24a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801a24e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a250:	4b09      	ldr	r3, [pc, #36]	; (801a278 <xPortStartScheduler+0x38>)
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	4a08      	ldr	r2, [pc, #32]	; (801a278 <xPortStartScheduler+0x38>)
 801a256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801a25a:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 801a25c:	f7ff feba 	bl	8019fd4 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 801a260:	4b06      	ldr	r3, [pc, #24]	; (801a27c <xPortStartScheduler+0x3c>)
 801a262:	2200      	movs	r2, #0
 801a264:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 801a266:	f000 f823 	bl	801a2b0 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 801a26a:	f7ff f8ab 	bl	80193c4 <vTaskSwitchContext>
	prvTaskExitError();
 801a26e:	f7ff fed5 	bl	801a01c <prvTaskExitError>

	/* Should not get here. */
	return 0;
 801a272:	2300      	movs	r3, #0
}
 801a274:	4618      	mov	r0, r3
 801a276:	bd80      	pop	{r7, pc}
 801a278:	e000ed20 	.word	0xe000ed20
 801a27c:	20000010 	.word	0x20000010

0801a280 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801a280:	4a07      	ldr	r2, [pc, #28]	; (801a2a0 <pxCurrentTCBConst2>)
 801a282:	6811      	ldr	r1, [r2, #0]
 801a284:	6808      	ldr	r0, [r1, #0]
 801a286:	c806      	ldmia	r0!, {r1, r2}
 801a288:	f381 880b 	msr	PSPLIM, r1
 801a28c:	2102      	movs	r1, #2
 801a28e:	f381 8814 	msr	CONTROL, r1
 801a292:	3020      	adds	r0, #32
 801a294:	f380 8809 	msr	PSP, r0
 801a298:	f3bf 8f6f 	isb	sy
 801a29c:	4710      	bx	r2
 801a29e:	bf00      	nop

0801a2a0 <pxCurrentTCBConst2>:
 801a2a0:	200010b4 	.word	0x200010b4
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 801a2a4:	bf00      	nop
 801a2a6:	bf00      	nop
	...

0801a2b0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801a2b0:	4807      	ldr	r0, [pc, #28]	; (801a2d0 <xVTORConst>)
 801a2b2:	6800      	ldr	r0, [r0, #0]
 801a2b4:	6800      	ldr	r0, [r0, #0]
 801a2b6:	f380 8808 	msr	MSP, r0
 801a2ba:	b662      	cpsie	i
 801a2bc:	b661      	cpsie	f
 801a2be:	f3bf 8f4f 	dsb	sy
 801a2c2:	f3bf 8f6f 	isb	sy
 801a2c6:	df02      	svc	2
 801a2c8:	bf00      	nop
 801a2ca:	bf00      	nop
 801a2cc:	f3af 8000 	nop.w

0801a2d0 <xVTORConst>:
 801a2d0:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 801a2d4:	bf00      	nop
 801a2d6:	bf00      	nop

0801a2d8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801a2d8:	f3ef 8011 	mrs	r0, BASEPRI
 801a2dc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 801a2e0:	f381 8811 	msr	BASEPRI, r1
 801a2e4:	f3bf 8f4f 	dsb	sy
 801a2e8:	f3bf 8f6f 	isb	sy
 801a2ec:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801a2ee:	bf00      	nop
 801a2f0:	4618      	mov	r0, r3

0801a2f2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801a2f2:	f380 8811 	msr	BASEPRI, r0
 801a2f6:	f3bf 8f4f 	dsb	sy
 801a2fa:	f3bf 8f6f 	isb	sy
 801a2fe:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 801a300:	bf00      	nop
	...

0801a310 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801a310:	f3ef 8009 	mrs	r0, PSP
 801a314:	f3ef 820b 	mrs	r2, PSPLIM
 801a318:	4673      	mov	r3, lr
 801a31a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801a31e:	4a10      	ldr	r2, [pc, #64]	; (801a360 <pxCurrentTCBConst>)
 801a320:	6811      	ldr	r1, [r2, #0]
 801a322:	6008      	str	r0, [r1, #0]
 801a324:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 801a328:	f380 8811 	msr	BASEPRI, r0
 801a32c:	f3bf 8f4f 	dsb	sy
 801a330:	f3bf 8f6f 	isb	sy
 801a334:	f7ff f846 	bl	80193c4 <vTaskSwitchContext>
 801a338:	f04f 0000 	mov.w	r0, #0
 801a33c:	f380 8811 	msr	BASEPRI, r0
 801a340:	4a07      	ldr	r2, [pc, #28]	; (801a360 <pxCurrentTCBConst>)
 801a342:	6811      	ldr	r1, [r2, #0]
 801a344:	6808      	ldr	r0, [r1, #0]
 801a346:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801a34a:	f382 880b 	msr	PSPLIM, r2
 801a34e:	f380 8809 	msr	PSP, r0
 801a352:	4718      	bx	r3
 801a354:	f3af 8000 	nop.w
 801a358:	f3af 8000 	nop.w
 801a35c:	f3af 8000 	nop.w

0801a360 <pxCurrentTCBConst>:
 801a360:	200010b4 	.word	0x200010b4
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 801a364:	bf00      	nop
 801a366:	bf00      	nop
	...

0801a370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801a370:	f01e 0f04 	tst.w	lr, #4
 801a374:	bf0c      	ite	eq
 801a376:	f3ef 8008 	mrseq	r0, MSP
 801a37a:	f3ef 8009 	mrsne	r0, PSP
 801a37e:	4904      	ldr	r1, [pc, #16]	; (801a390 <svchandler_address_const>)
 801a380:	4708      	bx	r1
 801a382:	bf00      	nop
 801a384:	f3af 8000 	nop.w
 801a388:	f3af 8000 	nop.w
 801a38c:	f3af 8000 	nop.w

0801a390 <svchandler_address_const>:
 801a390:	0801a0fd 	.word	0x0801a0fd
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 801a394:	bf00      	nop
 801a396:	bf00      	nop

0801a398 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b086      	sub	sp, #24
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a3a0:	2300      	movs	r3, #0
 801a3a2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801a3a4:	f7fe feb0 	bl	8019108 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a3a8:	4b4f      	ldr	r3, [pc, #316]	; (801a4e8 <pvPortMalloc+0x150>)
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d101      	bne.n	801a3b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a3b0:	f000 f8f8 	bl	801a5a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a3b4:	4b4d      	ldr	r3, [pc, #308]	; (801a4ec <pvPortMalloc+0x154>)
 801a3b6:	681a      	ldr	r2, [r3, #0]
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	4013      	ands	r3, r2
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	f040 8083 	bne.w	801a4c8 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d015      	beq.n	801a3f4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 801a3c8:	2208      	movs	r2, #8
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	4413      	add	r3, r2
 801a3ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	f003 0307 	and.w	r3, r3, #7
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d00c      	beq.n	801a3f4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	f023 0307 	bic.w	r3, r3, #7
 801a3e0:	3308      	adds	r3, #8
 801a3e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	f003 0307 	and.w	r3, r3, #7
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d002      	beq.n	801a3f4 <pvPortMalloc+0x5c>
 801a3ee:	f7ff ff73 	bl	801a2d8 <ulSetInterruptMask>
 801a3f2:	e7fe      	b.n	801a3f2 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d066      	beq.n	801a4c8 <pvPortMalloc+0x130>
 801a3fa:	4b3d      	ldr	r3, [pc, #244]	; (801a4f0 <pvPortMalloc+0x158>)
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	687a      	ldr	r2, [r7, #4]
 801a400:	429a      	cmp	r2, r3
 801a402:	d861      	bhi.n	801a4c8 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a404:	4b3b      	ldr	r3, [pc, #236]	; (801a4f4 <pvPortMalloc+0x15c>)
 801a406:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 801a408:	4b3a      	ldr	r3, [pc, #232]	; (801a4f4 <pvPortMalloc+0x15c>)
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a40e:	e004      	b.n	801a41a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 801a410:	697b      	ldr	r3, [r7, #20]
 801a412:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a414:	697b      	ldr	r3, [r7, #20]
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a41a:	697b      	ldr	r3, [r7, #20]
 801a41c:	685b      	ldr	r3, [r3, #4]
 801a41e:	687a      	ldr	r2, [r7, #4]
 801a420:	429a      	cmp	r2, r3
 801a422:	d903      	bls.n	801a42c <pvPortMalloc+0x94>
 801a424:	697b      	ldr	r3, [r7, #20]
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d1f1      	bne.n	801a410 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a42c:	4b2e      	ldr	r3, [pc, #184]	; (801a4e8 <pvPortMalloc+0x150>)
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	697a      	ldr	r2, [r7, #20]
 801a432:	429a      	cmp	r2, r3
 801a434:	d048      	beq.n	801a4c8 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a436:	693b      	ldr	r3, [r7, #16]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	2208      	movs	r2, #8
 801a43c:	4413      	add	r3, r2
 801a43e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a440:	697b      	ldr	r3, [r7, #20]
 801a442:	681a      	ldr	r2, [r3, #0]
 801a444:	693b      	ldr	r3, [r7, #16]
 801a446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a448:	697b      	ldr	r3, [r7, #20]
 801a44a:	685a      	ldr	r2, [r3, #4]
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	1ad2      	subs	r2, r2, r3
 801a450:	2308      	movs	r3, #8
 801a452:	005b      	lsls	r3, r3, #1
 801a454:	429a      	cmp	r2, r3
 801a456:	d917      	bls.n	801a488 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a458:	697a      	ldr	r2, [r7, #20]
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	4413      	add	r3, r2
 801a45e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a460:	68bb      	ldr	r3, [r7, #8]
 801a462:	f003 0307 	and.w	r3, r3, #7
 801a466:	2b00      	cmp	r3, #0
 801a468:	d002      	beq.n	801a470 <pvPortMalloc+0xd8>
 801a46a:	f7ff ff35 	bl	801a2d8 <ulSetInterruptMask>
 801a46e:	e7fe      	b.n	801a46e <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a470:	697b      	ldr	r3, [r7, #20]
 801a472:	685a      	ldr	r2, [r3, #4]
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	1ad2      	subs	r2, r2, r3
 801a478:	68bb      	ldr	r3, [r7, #8]
 801a47a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a47c:	697b      	ldr	r3, [r7, #20]
 801a47e:	687a      	ldr	r2, [r7, #4]
 801a480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a482:	68b8      	ldr	r0, [r7, #8]
 801a484:	f000 f8f0 	bl	801a668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a488:	4b19      	ldr	r3, [pc, #100]	; (801a4f0 <pvPortMalloc+0x158>)
 801a48a:	681a      	ldr	r2, [r3, #0]
 801a48c:	697b      	ldr	r3, [r7, #20]
 801a48e:	685b      	ldr	r3, [r3, #4]
 801a490:	1ad3      	subs	r3, r2, r3
 801a492:	4a17      	ldr	r2, [pc, #92]	; (801a4f0 <pvPortMalloc+0x158>)
 801a494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a496:	4b16      	ldr	r3, [pc, #88]	; (801a4f0 <pvPortMalloc+0x158>)
 801a498:	681a      	ldr	r2, [r3, #0]
 801a49a:	4b17      	ldr	r3, [pc, #92]	; (801a4f8 <pvPortMalloc+0x160>)
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	429a      	cmp	r2, r3
 801a4a0:	d203      	bcs.n	801a4aa <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a4a2:	4b13      	ldr	r3, [pc, #76]	; (801a4f0 <pvPortMalloc+0x158>)
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	4a14      	ldr	r2, [pc, #80]	; (801a4f8 <pvPortMalloc+0x160>)
 801a4a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a4aa:	697b      	ldr	r3, [r7, #20]
 801a4ac:	685a      	ldr	r2, [r3, #4]
 801a4ae:	4b0f      	ldr	r3, [pc, #60]	; (801a4ec <pvPortMalloc+0x154>)
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	431a      	orrs	r2, r3
 801a4b4:	697b      	ldr	r3, [r7, #20]
 801a4b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a4b8:	697b      	ldr	r3, [r7, #20]
 801a4ba:	2200      	movs	r2, #0
 801a4bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a4be:	4b0f      	ldr	r3, [pc, #60]	; (801a4fc <pvPortMalloc+0x164>)
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	3301      	adds	r3, #1
 801a4c4:	4a0d      	ldr	r2, [pc, #52]	; (801a4fc <pvPortMalloc+0x164>)
 801a4c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a4c8:	f7fe fe2c 	bl	8019124 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a4cc:	68fb      	ldr	r3, [r7, #12]
 801a4ce:	f003 0307 	and.w	r3, r3, #7
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d002      	beq.n	801a4dc <pvPortMalloc+0x144>
 801a4d6:	f7ff feff 	bl	801a2d8 <ulSetInterruptMask>
 801a4da:	e7fe      	b.n	801a4da <pvPortMalloc+0x142>
	return pvReturn;
 801a4dc:	68fb      	ldr	r3, [r7, #12]
}
 801a4de:	4618      	mov	r0, r3
 801a4e0:	3718      	adds	r7, #24
 801a4e2:	46bd      	mov	sp, r7
 801a4e4:	bd80      	pop	{r7, pc}
 801a4e6:	bf00      	nop
 801a4e8:	200036e8 	.word	0x200036e8
 801a4ec:	200036fc 	.word	0x200036fc
 801a4f0:	200036ec 	.word	0x200036ec
 801a4f4:	200036e0 	.word	0x200036e0
 801a4f8:	200036f0 	.word	0x200036f0
 801a4fc:	200036f4 	.word	0x200036f4

0801a500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a500:	b580      	push	{r7, lr}
 801a502:	b084      	sub	sp, #16
 801a504:	af00      	add	r7, sp, #0
 801a506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d03d      	beq.n	801a58e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a512:	2308      	movs	r3, #8
 801a514:	425b      	negs	r3, r3
 801a516:	68fa      	ldr	r2, [r7, #12]
 801a518:	4413      	add	r3, r2
 801a51a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a51c:	68fb      	ldr	r3, [r7, #12]
 801a51e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a520:	68bb      	ldr	r3, [r7, #8]
 801a522:	685a      	ldr	r2, [r3, #4]
 801a524:	4b1c      	ldr	r3, [pc, #112]	; (801a598 <vPortFree+0x98>)
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	4013      	ands	r3, r2
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	d102      	bne.n	801a534 <vPortFree+0x34>
 801a52e:	f7ff fed3 	bl	801a2d8 <ulSetInterruptMask>
 801a532:	e7fe      	b.n	801a532 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a534:	68bb      	ldr	r3, [r7, #8]
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d002      	beq.n	801a542 <vPortFree+0x42>
 801a53c:	f7ff fecc 	bl	801a2d8 <ulSetInterruptMask>
 801a540:	e7fe      	b.n	801a540 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a542:	68bb      	ldr	r3, [r7, #8]
 801a544:	685a      	ldr	r2, [r3, #4]
 801a546:	4b14      	ldr	r3, [pc, #80]	; (801a598 <vPortFree+0x98>)
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	4013      	ands	r3, r2
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d01e      	beq.n	801a58e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a550:	68bb      	ldr	r3, [r7, #8]
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	2b00      	cmp	r3, #0
 801a556:	d11a      	bne.n	801a58e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a558:	68bb      	ldr	r3, [r7, #8]
 801a55a:	685a      	ldr	r2, [r3, #4]
 801a55c:	4b0e      	ldr	r3, [pc, #56]	; (801a598 <vPortFree+0x98>)
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	43db      	mvns	r3, r3
 801a562:	401a      	ands	r2, r3
 801a564:	68bb      	ldr	r3, [r7, #8]
 801a566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a568:	f7fe fdce 	bl	8019108 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a56c:	68bb      	ldr	r3, [r7, #8]
 801a56e:	685a      	ldr	r2, [r3, #4]
 801a570:	4b0a      	ldr	r3, [pc, #40]	; (801a59c <vPortFree+0x9c>)
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	4413      	add	r3, r2
 801a576:	4a09      	ldr	r2, [pc, #36]	; (801a59c <vPortFree+0x9c>)
 801a578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a57a:	68b8      	ldr	r0, [r7, #8]
 801a57c:	f000 f874 	bl	801a668 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a580:	4b07      	ldr	r3, [pc, #28]	; (801a5a0 <vPortFree+0xa0>)
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	3301      	adds	r3, #1
 801a586:	4a06      	ldr	r2, [pc, #24]	; (801a5a0 <vPortFree+0xa0>)
 801a588:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a58a:	f7fe fdcb 	bl	8019124 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a58e:	bf00      	nop
 801a590:	3710      	adds	r7, #16
 801a592:	46bd      	mov	sp, r7
 801a594:	bd80      	pop	{r7, pc}
 801a596:	bf00      	nop
 801a598:	200036fc 	.word	0x200036fc
 801a59c:	200036ec 	.word	0x200036ec
 801a5a0:	200036f8 	.word	0x200036f8

0801a5a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a5a4:	b480      	push	{r7}
 801a5a6:	b085      	sub	sp, #20
 801a5a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a5aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a5ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a5b0:	4b27      	ldr	r3, [pc, #156]	; (801a650 <prvHeapInit+0xac>)
 801a5b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	f003 0307 	and.w	r3, r3, #7
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d00c      	beq.n	801a5d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	3307      	adds	r3, #7
 801a5c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a5c4:	68fb      	ldr	r3, [r7, #12]
 801a5c6:	f023 0307 	bic.w	r3, r3, #7
 801a5ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a5cc:	68ba      	ldr	r2, [r7, #8]
 801a5ce:	68fb      	ldr	r3, [r7, #12]
 801a5d0:	1ad3      	subs	r3, r2, r3
 801a5d2:	4a1f      	ldr	r2, [pc, #124]	; (801a650 <prvHeapInit+0xac>)
 801a5d4:	4413      	add	r3, r2
 801a5d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a5dc:	4a1d      	ldr	r2, [pc, #116]	; (801a654 <prvHeapInit+0xb0>)
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a5e2:	4b1c      	ldr	r3, [pc, #112]	; (801a654 <prvHeapInit+0xb0>)
 801a5e4:	2200      	movs	r2, #0
 801a5e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	68ba      	ldr	r2, [r7, #8]
 801a5ec:	4413      	add	r3, r2
 801a5ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a5f0:	2208      	movs	r2, #8
 801a5f2:	68fb      	ldr	r3, [r7, #12]
 801a5f4:	1a9b      	subs	r3, r3, r2
 801a5f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a5f8:	68fb      	ldr	r3, [r7, #12]
 801a5fa:	f023 0307 	bic.w	r3, r3, #7
 801a5fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a600:	68fb      	ldr	r3, [r7, #12]
 801a602:	4a15      	ldr	r2, [pc, #84]	; (801a658 <prvHeapInit+0xb4>)
 801a604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a606:	4b14      	ldr	r3, [pc, #80]	; (801a658 <prvHeapInit+0xb4>)
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	2200      	movs	r2, #0
 801a60c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a60e:	4b12      	ldr	r3, [pc, #72]	; (801a658 <prvHeapInit+0xb4>)
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	2200      	movs	r2, #0
 801a614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a61a:	683b      	ldr	r3, [r7, #0]
 801a61c:	68fa      	ldr	r2, [r7, #12]
 801a61e:	1ad2      	subs	r2, r2, r3
 801a620:	683b      	ldr	r3, [r7, #0]
 801a622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a624:	4b0c      	ldr	r3, [pc, #48]	; (801a658 <prvHeapInit+0xb4>)
 801a626:	681a      	ldr	r2, [r3, #0]
 801a628:	683b      	ldr	r3, [r7, #0]
 801a62a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a62c:	683b      	ldr	r3, [r7, #0]
 801a62e:	685b      	ldr	r3, [r3, #4]
 801a630:	4a0a      	ldr	r2, [pc, #40]	; (801a65c <prvHeapInit+0xb8>)
 801a632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a634:	683b      	ldr	r3, [r7, #0]
 801a636:	685b      	ldr	r3, [r3, #4]
 801a638:	4a09      	ldr	r2, [pc, #36]	; (801a660 <prvHeapInit+0xbc>)
 801a63a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a63c:	4b09      	ldr	r3, [pc, #36]	; (801a664 <prvHeapInit+0xc0>)
 801a63e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a642:	601a      	str	r2, [r3, #0]
}
 801a644:	bf00      	nop
 801a646:	3714      	adds	r7, #20
 801a648:	46bd      	mov	sp, r7
 801a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a64e:	4770      	bx	lr
 801a650:	200016e0 	.word	0x200016e0
 801a654:	200036e0 	.word	0x200036e0
 801a658:	200036e8 	.word	0x200036e8
 801a65c:	200036f0 	.word	0x200036f0
 801a660:	200036ec 	.word	0x200036ec
 801a664:	200036fc 	.word	0x200036fc

0801a668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a668:	b480      	push	{r7}
 801a66a:	b085      	sub	sp, #20
 801a66c:	af00      	add	r7, sp, #0
 801a66e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a670:	4b28      	ldr	r3, [pc, #160]	; (801a714 <prvInsertBlockIntoFreeList+0xac>)
 801a672:	60fb      	str	r3, [r7, #12]
 801a674:	e002      	b.n	801a67c <prvInsertBlockIntoFreeList+0x14>
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	60fb      	str	r3, [r7, #12]
 801a67c:	68fb      	ldr	r3, [r7, #12]
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	687a      	ldr	r2, [r7, #4]
 801a682:	429a      	cmp	r2, r3
 801a684:	d8f7      	bhi.n	801a676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a68a:	68fb      	ldr	r3, [r7, #12]
 801a68c:	685b      	ldr	r3, [r3, #4]
 801a68e:	68ba      	ldr	r2, [r7, #8]
 801a690:	4413      	add	r3, r2
 801a692:	687a      	ldr	r2, [r7, #4]
 801a694:	429a      	cmp	r2, r3
 801a696:	d108      	bne.n	801a6aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	685a      	ldr	r2, [r3, #4]
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	685b      	ldr	r3, [r3, #4]
 801a6a0:	441a      	add	r2, r3
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a6a6:	68fb      	ldr	r3, [r7, #12]
 801a6a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	685b      	ldr	r3, [r3, #4]
 801a6b2:	68ba      	ldr	r2, [r7, #8]
 801a6b4:	441a      	add	r2, r3
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	429a      	cmp	r2, r3
 801a6bc:	d118      	bne.n	801a6f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	681a      	ldr	r2, [r3, #0]
 801a6c2:	4b15      	ldr	r3, [pc, #84]	; (801a718 <prvInsertBlockIntoFreeList+0xb0>)
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	429a      	cmp	r2, r3
 801a6c8:	d00d      	beq.n	801a6e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	685a      	ldr	r2, [r3, #4]
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	681b      	ldr	r3, [r3, #0]
 801a6d2:	685b      	ldr	r3, [r3, #4]
 801a6d4:	441a      	add	r2, r3
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a6da:	68fb      	ldr	r3, [r7, #12]
 801a6dc:	681b      	ldr	r3, [r3, #0]
 801a6de:	681a      	ldr	r2, [r3, #0]
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	601a      	str	r2, [r3, #0]
 801a6e4:	e008      	b.n	801a6f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a6e6:	4b0c      	ldr	r3, [pc, #48]	; (801a718 <prvInsertBlockIntoFreeList+0xb0>)
 801a6e8:	681a      	ldr	r2, [r3, #0]
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	601a      	str	r2, [r3, #0]
 801a6ee:	e003      	b.n	801a6f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a6f0:	68fb      	ldr	r3, [r7, #12]
 801a6f2:	681a      	ldr	r2, [r3, #0]
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a6f8:	68fa      	ldr	r2, [r7, #12]
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	429a      	cmp	r2, r3
 801a6fe:	d002      	beq.n	801a706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a700:	68fb      	ldr	r3, [r7, #12]
 801a702:	687a      	ldr	r2, [r7, #4]
 801a704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a706:	bf00      	nop
 801a708:	3714      	adds	r7, #20
 801a70a:	46bd      	mov	sp, r7
 801a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a710:	4770      	bx	lr
 801a712:	bf00      	nop
 801a714:	200036e0 	.word	0x200036e0
 801a718:	200036e8 	.word	0x200036e8

0801a71c <_ZdlPv>:
 801a71c:	f002 b9fc 	b.w	801cb18 <free>

0801a720 <_ZdlPvj>:
 801a720:	f7ff bffc 	b.w	801a71c <_ZdlPv>

0801a724 <_Znwj>:
 801a724:	2801      	cmp	r0, #1
 801a726:	bf38      	it	cc
 801a728:	2001      	movcc	r0, #1
 801a72a:	b510      	push	{r4, lr}
 801a72c:	4604      	mov	r4, r0
 801a72e:	4620      	mov	r0, r4
 801a730:	f002 f9ea 	bl	801cb08 <malloc>
 801a734:	b100      	cbz	r0, 801a738 <_Znwj+0x14>
 801a736:	bd10      	pop	{r4, pc}
 801a738:	f000 f812 	bl	801a760 <_ZSt15get_new_handlerv>
 801a73c:	b908      	cbnz	r0, 801a742 <_Znwj+0x1e>
 801a73e:	f002 f9dc 	bl	801cafa <abort>
 801a742:	4780      	blx	r0
 801a744:	e7f3      	b.n	801a72e <_Znwj+0xa>

0801a746 <_ZNSaIcEC1Ev>:
 801a746:	4770      	bx	lr

0801a748 <_ZNSaIcEC1ERKS_>:
 801a748:	4770      	bx	lr

0801a74a <_ZNSaIcED1Ev>:
 801a74a:	4770      	bx	lr

0801a74c <_ZSt17__throw_bad_allocv>:
 801a74c:	b508      	push	{r3, lr}
 801a74e:	f002 f9d4 	bl	801cafa <abort>

0801a752 <_ZSt28__throw_bad_array_new_lengthv>:
 801a752:	b508      	push	{r3, lr}
 801a754:	f002 f9d1 	bl	801cafa <abort>

0801a758 <_ZSt20__throw_length_errorPKc>:
 801a758:	b508      	push	{r3, lr}
 801a75a:	f002 f9ce 	bl	801cafa <abort>
	...

0801a760 <_ZSt15get_new_handlerv>:
 801a760:	4b01      	ldr	r3, [pc, #4]	; (801a768 <_ZSt15get_new_handlerv+0x8>)
 801a762:	e8d3 0faf 	lda	r0, [r3]
 801a766:	4770      	bx	lr
 801a768:	20003700 	.word	0x20003700

0801a76c <atan2>:
 801a76c:	f000 ba44 	b.w	801abf8 <__ieee754_atan2>

0801a770 <fmod>:
 801a770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a772:	ec57 6b10 	vmov	r6, r7, d0
 801a776:	ec55 4b11 	vmov	r4, r5, d1
 801a77a:	ed2d 8b02 	vpush	{d8}
 801a77e:	f000 fb01 	bl	801ad84 <__ieee754_fmod>
 801a782:	4622      	mov	r2, r4
 801a784:	462b      	mov	r3, r5
 801a786:	4630      	mov	r0, r6
 801a788:	4639      	mov	r1, r7
 801a78a:	eeb0 8a40 	vmov.f32	s16, s0
 801a78e:	eef0 8a60 	vmov.f32	s17, s1
 801a792:	f7e6 f9bd 	bl	8000b10 <__aeabi_dcmpun>
 801a796:	b990      	cbnz	r0, 801a7be <fmod+0x4e>
 801a798:	2200      	movs	r2, #0
 801a79a:	2300      	movs	r3, #0
 801a79c:	4620      	mov	r0, r4
 801a79e:	4629      	mov	r1, r5
 801a7a0:	f7e6 f984 	bl	8000aac <__aeabi_dcmpeq>
 801a7a4:	b158      	cbz	r0, 801a7be <fmod+0x4e>
 801a7a6:	f002 fc99 	bl	801d0dc <__errno>
 801a7aa:	2321      	movs	r3, #33	; 0x21
 801a7ac:	2200      	movs	r2, #0
 801a7ae:	6003      	str	r3, [r0, #0]
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	4610      	mov	r0, r2
 801a7b4:	4619      	mov	r1, r3
 801a7b6:	f7e6 f83b 	bl	8000830 <__aeabi_ddiv>
 801a7ba:	ec41 0b18 	vmov	d8, r0, r1
 801a7be:	eeb0 0a48 	vmov.f32	s0, s16
 801a7c2:	eef0 0a68 	vmov.f32	s1, s17
 801a7c6:	ecbd 8b02 	vpop	{d8}
 801a7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a7cc <pow>:
 801a7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7ce:	ec55 4b11 	vmov	r4, r5, d1
 801a7d2:	ed2d 8b02 	vpush	{d8}
 801a7d6:	eeb0 8a40 	vmov.f32	s16, s0
 801a7da:	eef0 8a60 	vmov.f32	s17, s1
 801a7de:	f000 fbdf 	bl	801afa0 <__ieee754_pow>
 801a7e2:	4622      	mov	r2, r4
 801a7e4:	462b      	mov	r3, r5
 801a7e6:	4620      	mov	r0, r4
 801a7e8:	4629      	mov	r1, r5
 801a7ea:	ec57 6b10 	vmov	r6, r7, d0
 801a7ee:	f7e6 f98f 	bl	8000b10 <__aeabi_dcmpun>
 801a7f2:	2800      	cmp	r0, #0
 801a7f4:	d13b      	bne.n	801a86e <pow+0xa2>
 801a7f6:	2200      	movs	r2, #0
 801a7f8:	2300      	movs	r3, #0
 801a7fa:	ec51 0b18 	vmov	r0, r1, d8
 801a7fe:	f7e6 f955 	bl	8000aac <__aeabi_dcmpeq>
 801a802:	b1b8      	cbz	r0, 801a834 <pow+0x68>
 801a804:	2200      	movs	r2, #0
 801a806:	2300      	movs	r3, #0
 801a808:	4620      	mov	r0, r4
 801a80a:	4629      	mov	r1, r5
 801a80c:	f7e6 f94e 	bl	8000aac <__aeabi_dcmpeq>
 801a810:	2800      	cmp	r0, #0
 801a812:	d146      	bne.n	801a8a2 <pow+0xd6>
 801a814:	ec45 4b10 	vmov	d0, r4, r5
 801a818:	f000 f900 	bl	801aa1c <finite>
 801a81c:	b338      	cbz	r0, 801a86e <pow+0xa2>
 801a81e:	2200      	movs	r2, #0
 801a820:	2300      	movs	r3, #0
 801a822:	4620      	mov	r0, r4
 801a824:	4629      	mov	r1, r5
 801a826:	f7e6 f94b 	bl	8000ac0 <__aeabi_dcmplt>
 801a82a:	b300      	cbz	r0, 801a86e <pow+0xa2>
 801a82c:	f002 fc56 	bl	801d0dc <__errno>
 801a830:	2322      	movs	r3, #34	; 0x22
 801a832:	e01b      	b.n	801a86c <pow+0xa0>
 801a834:	ec47 6b10 	vmov	d0, r6, r7
 801a838:	f000 f8f0 	bl	801aa1c <finite>
 801a83c:	b9e0      	cbnz	r0, 801a878 <pow+0xac>
 801a83e:	eeb0 0a48 	vmov.f32	s0, s16
 801a842:	eef0 0a68 	vmov.f32	s1, s17
 801a846:	f000 f8e9 	bl	801aa1c <finite>
 801a84a:	b1a8      	cbz	r0, 801a878 <pow+0xac>
 801a84c:	ec45 4b10 	vmov	d0, r4, r5
 801a850:	f000 f8e4 	bl	801aa1c <finite>
 801a854:	b180      	cbz	r0, 801a878 <pow+0xac>
 801a856:	4632      	mov	r2, r6
 801a858:	463b      	mov	r3, r7
 801a85a:	4630      	mov	r0, r6
 801a85c:	4639      	mov	r1, r7
 801a85e:	f7e6 f957 	bl	8000b10 <__aeabi_dcmpun>
 801a862:	2800      	cmp	r0, #0
 801a864:	d0e2      	beq.n	801a82c <pow+0x60>
 801a866:	f002 fc39 	bl	801d0dc <__errno>
 801a86a:	2321      	movs	r3, #33	; 0x21
 801a86c:	6003      	str	r3, [r0, #0]
 801a86e:	ecbd 8b02 	vpop	{d8}
 801a872:	ec47 6b10 	vmov	d0, r6, r7
 801a876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a878:	2200      	movs	r2, #0
 801a87a:	2300      	movs	r3, #0
 801a87c:	4630      	mov	r0, r6
 801a87e:	4639      	mov	r1, r7
 801a880:	f7e6 f914 	bl	8000aac <__aeabi_dcmpeq>
 801a884:	2800      	cmp	r0, #0
 801a886:	d0f2      	beq.n	801a86e <pow+0xa2>
 801a888:	eeb0 0a48 	vmov.f32	s0, s16
 801a88c:	eef0 0a68 	vmov.f32	s1, s17
 801a890:	f000 f8c4 	bl	801aa1c <finite>
 801a894:	2800      	cmp	r0, #0
 801a896:	d0ea      	beq.n	801a86e <pow+0xa2>
 801a898:	ec45 4b10 	vmov	d0, r4, r5
 801a89c:	f000 f8be 	bl	801aa1c <finite>
 801a8a0:	e7c3      	b.n	801a82a <pow+0x5e>
 801a8a2:	2600      	movs	r6, #0
 801a8a4:	4f00      	ldr	r7, [pc, #0]	; (801a8a8 <pow+0xdc>)
 801a8a6:	e7e2      	b.n	801a86e <pow+0xa2>
 801a8a8:	3ff00000 	.word	0x3ff00000

0801a8ac <sqrt>:
 801a8ac:	b538      	push	{r3, r4, r5, lr}
 801a8ae:	ec55 4b10 	vmov	r4, r5, d0
 801a8b2:	ed2d 8b02 	vpush	{d8}
 801a8b6:	f000 f8bd 	bl	801aa34 <__ieee754_sqrt>
 801a8ba:	4622      	mov	r2, r4
 801a8bc:	462b      	mov	r3, r5
 801a8be:	4620      	mov	r0, r4
 801a8c0:	4629      	mov	r1, r5
 801a8c2:	eeb0 8a40 	vmov.f32	s16, s0
 801a8c6:	eef0 8a60 	vmov.f32	s17, s1
 801a8ca:	f7e6 f921 	bl	8000b10 <__aeabi_dcmpun>
 801a8ce:	b990      	cbnz	r0, 801a8f6 <sqrt+0x4a>
 801a8d0:	2200      	movs	r2, #0
 801a8d2:	2300      	movs	r3, #0
 801a8d4:	4620      	mov	r0, r4
 801a8d6:	4629      	mov	r1, r5
 801a8d8:	f7e6 f8f2 	bl	8000ac0 <__aeabi_dcmplt>
 801a8dc:	b158      	cbz	r0, 801a8f6 <sqrt+0x4a>
 801a8de:	f002 fbfd 	bl	801d0dc <__errno>
 801a8e2:	2321      	movs	r3, #33	; 0x21
 801a8e4:	2200      	movs	r2, #0
 801a8e6:	6003      	str	r3, [r0, #0]
 801a8e8:	2300      	movs	r3, #0
 801a8ea:	4610      	mov	r0, r2
 801a8ec:	4619      	mov	r1, r3
 801a8ee:	f7e5 ff9f 	bl	8000830 <__aeabi_ddiv>
 801a8f2:	ec41 0b18 	vmov	d8, r0, r1
 801a8f6:	eeb0 0a48 	vmov.f32	s0, s16
 801a8fa:	eef0 0a68 	vmov.f32	s1, s17
 801a8fe:	ecbd 8b02 	vpop	{d8}
 801a902:	bd38      	pop	{r3, r4, r5, pc}

0801a904 <atan2f>:
 801a904:	f001 bacc 	b.w	801bea0 <__ieee754_atan2f>

0801a908 <cosf>:
 801a908:	ee10 3a10 	vmov	r3, s0
 801a90c:	b507      	push	{r0, r1, r2, lr}
 801a90e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a912:	4a1d      	ldr	r2, [pc, #116]	; (801a988 <cosf+0x80>)
 801a914:	4293      	cmp	r3, r2
 801a916:	dc06      	bgt.n	801a926 <cosf+0x1e>
 801a918:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801a98c <cosf+0x84>
 801a91c:	b003      	add	sp, #12
 801a91e:	f85d eb04 	ldr.w	lr, [sp], #4
 801a922:	f001 ba17 	b.w	801bd54 <__kernel_cosf>
 801a926:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a92a:	db04      	blt.n	801a936 <cosf+0x2e>
 801a92c:	ee30 0a40 	vsub.f32	s0, s0, s0
 801a930:	b003      	add	sp, #12
 801a932:	f85d fb04 	ldr.w	pc, [sp], #4
 801a936:	4668      	mov	r0, sp
 801a938:	f001 fb50 	bl	801bfdc <__ieee754_rem_pio2f>
 801a93c:	f000 0003 	and.w	r0, r0, #3
 801a940:	2801      	cmp	r0, #1
 801a942:	d009      	beq.n	801a958 <cosf+0x50>
 801a944:	2802      	cmp	r0, #2
 801a946:	d010      	beq.n	801a96a <cosf+0x62>
 801a948:	b9b0      	cbnz	r0, 801a978 <cosf+0x70>
 801a94a:	eddd 0a01 	vldr	s1, [sp, #4]
 801a94e:	ed9d 0a00 	vldr	s0, [sp]
 801a952:	f001 f9ff 	bl	801bd54 <__kernel_cosf>
 801a956:	e7eb      	b.n	801a930 <cosf+0x28>
 801a958:	eddd 0a01 	vldr	s1, [sp, #4]
 801a95c:	ed9d 0a00 	vldr	s0, [sp]
 801a960:	f001 fa56 	bl	801be10 <__kernel_sinf>
 801a964:	eeb1 0a40 	vneg.f32	s0, s0
 801a968:	e7e2      	b.n	801a930 <cosf+0x28>
 801a96a:	eddd 0a01 	vldr	s1, [sp, #4]
 801a96e:	ed9d 0a00 	vldr	s0, [sp]
 801a972:	f001 f9ef 	bl	801bd54 <__kernel_cosf>
 801a976:	e7f5      	b.n	801a964 <cosf+0x5c>
 801a978:	2001      	movs	r0, #1
 801a97a:	eddd 0a01 	vldr	s1, [sp, #4]
 801a97e:	ed9d 0a00 	vldr	s0, [sp]
 801a982:	f001 fa45 	bl	801be10 <__kernel_sinf>
 801a986:	e7d3      	b.n	801a930 <cosf+0x28>
 801a988:	3f490fd8 	.word	0x3f490fd8
 801a98c:	00000000 	.word	0x00000000

0801a990 <sinf>:
 801a990:	ee10 3a10 	vmov	r3, s0
 801a994:	b507      	push	{r0, r1, r2, lr}
 801a996:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a99a:	4a1e      	ldr	r2, [pc, #120]	; (801aa14 <sinf+0x84>)
 801a99c:	4293      	cmp	r3, r2
 801a99e:	dc07      	bgt.n	801a9b0 <sinf+0x20>
 801a9a0:	2000      	movs	r0, #0
 801a9a2:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801aa18 <sinf+0x88>
 801a9a6:	b003      	add	sp, #12
 801a9a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a9ac:	f001 ba30 	b.w	801be10 <__kernel_sinf>
 801a9b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a9b4:	db04      	blt.n	801a9c0 <sinf+0x30>
 801a9b6:	ee30 0a40 	vsub.f32	s0, s0, s0
 801a9ba:	b003      	add	sp, #12
 801a9bc:	f85d fb04 	ldr.w	pc, [sp], #4
 801a9c0:	4668      	mov	r0, sp
 801a9c2:	f001 fb0b 	bl	801bfdc <__ieee754_rem_pio2f>
 801a9c6:	f000 0003 	and.w	r0, r0, #3
 801a9ca:	2801      	cmp	r0, #1
 801a9cc:	d00a      	beq.n	801a9e4 <sinf+0x54>
 801a9ce:	2802      	cmp	r0, #2
 801a9d0:	d00f      	beq.n	801a9f2 <sinf+0x62>
 801a9d2:	b9c0      	cbnz	r0, 801aa06 <sinf+0x76>
 801a9d4:	2001      	movs	r0, #1
 801a9d6:	eddd 0a01 	vldr	s1, [sp, #4]
 801a9da:	ed9d 0a00 	vldr	s0, [sp]
 801a9de:	f001 fa17 	bl	801be10 <__kernel_sinf>
 801a9e2:	e7ea      	b.n	801a9ba <sinf+0x2a>
 801a9e4:	eddd 0a01 	vldr	s1, [sp, #4]
 801a9e8:	ed9d 0a00 	vldr	s0, [sp]
 801a9ec:	f001 f9b2 	bl	801bd54 <__kernel_cosf>
 801a9f0:	e7e3      	b.n	801a9ba <sinf+0x2a>
 801a9f2:	2001      	movs	r0, #1
 801a9f4:	eddd 0a01 	vldr	s1, [sp, #4]
 801a9f8:	ed9d 0a00 	vldr	s0, [sp]
 801a9fc:	f001 fa08 	bl	801be10 <__kernel_sinf>
 801aa00:	eeb1 0a40 	vneg.f32	s0, s0
 801aa04:	e7d9      	b.n	801a9ba <sinf+0x2a>
 801aa06:	eddd 0a01 	vldr	s1, [sp, #4]
 801aa0a:	ed9d 0a00 	vldr	s0, [sp]
 801aa0e:	f001 f9a1 	bl	801bd54 <__kernel_cosf>
 801aa12:	e7f5      	b.n	801aa00 <sinf+0x70>
 801aa14:	3f490fd8 	.word	0x3f490fd8
 801aa18:	00000000 	.word	0x00000000

0801aa1c <finite>:
 801aa1c:	b082      	sub	sp, #8
 801aa1e:	ed8d 0b00 	vstr	d0, [sp]
 801aa22:	9801      	ldr	r0, [sp, #4]
 801aa24:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801aa28:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801aa2c:	0fc0      	lsrs	r0, r0, #31
 801aa2e:	b002      	add	sp, #8
 801aa30:	4770      	bx	lr
	...

0801aa34 <__ieee754_sqrt>:
 801aa34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa38:	4e6b      	ldr	r6, [pc, #428]	; (801abe8 <__ieee754_sqrt+0x1b4>)
 801aa3a:	ee10 0a10 	vmov	r0, s0
 801aa3e:	ee10 2a10 	vmov	r2, s0
 801aa42:	ec55 4b10 	vmov	r4, r5, d0
 801aa46:	43ae      	bics	r6, r5
 801aa48:	4629      	mov	r1, r5
 801aa4a:	462b      	mov	r3, r5
 801aa4c:	d10d      	bne.n	801aa6a <__ieee754_sqrt+0x36>
 801aa4e:	f7e5 fdc5 	bl	80005dc <__aeabi_dmul>
 801aa52:	4602      	mov	r2, r0
 801aa54:	460b      	mov	r3, r1
 801aa56:	4620      	mov	r0, r4
 801aa58:	4629      	mov	r1, r5
 801aa5a:	f7e5 fc09 	bl	8000270 <__adddf3>
 801aa5e:	4604      	mov	r4, r0
 801aa60:	460d      	mov	r5, r1
 801aa62:	ec45 4b10 	vmov	d0, r4, r5
 801aa66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa6a:	2d00      	cmp	r5, #0
 801aa6c:	dc0b      	bgt.n	801aa86 <__ieee754_sqrt+0x52>
 801aa6e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801aa72:	4326      	orrs	r6, r4
 801aa74:	d0f5      	beq.n	801aa62 <__ieee754_sqrt+0x2e>
 801aa76:	b135      	cbz	r5, 801aa86 <__ieee754_sqrt+0x52>
 801aa78:	f7e5 fbf8 	bl	800026c <__aeabi_dsub>
 801aa7c:	4602      	mov	r2, r0
 801aa7e:	460b      	mov	r3, r1
 801aa80:	f7e5 fed6 	bl	8000830 <__aeabi_ddiv>
 801aa84:	e7eb      	b.n	801aa5e <__ieee754_sqrt+0x2a>
 801aa86:	1509      	asrs	r1, r1, #20
 801aa88:	f000 8091 	beq.w	801abae <__ieee754_sqrt+0x17a>
 801aa8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801aa90:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801aa94:	07c9      	lsls	r1, r1, #31
 801aa96:	f04f 0500 	mov.w	r5, #0
 801aa9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801aa9e:	ea4f 0666 	mov.w	r6, r6, asr #1
 801aaa2:	f04f 0e16 	mov.w	lr, #22
 801aaa6:	46ac      	mov	ip, r5
 801aaa8:	bf58      	it	pl
 801aaaa:	005b      	lslpl	r3, r3, #1
 801aaac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801aab0:	bf5c      	itt	pl
 801aab2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801aab6:	0052      	lslpl	r2, r2, #1
 801aab8:	005b      	lsls	r3, r3, #1
 801aaba:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801aabe:	0052      	lsls	r2, r2, #1
 801aac0:	eb0c 0001 	add.w	r0, ip, r1
 801aac4:	4298      	cmp	r0, r3
 801aac6:	bfde      	ittt	le
 801aac8:	1a1b      	suble	r3, r3, r0
 801aaca:	eb00 0c01 	addle.w	ip, r0, r1
 801aace:	186d      	addle	r5, r5, r1
 801aad0:	f1be 0e01 	subs.w	lr, lr, #1
 801aad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801aad8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801aadc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801aae0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801aae4:	d1ec      	bne.n	801aac0 <__ieee754_sqrt+0x8c>
 801aae6:	4674      	mov	r4, lr
 801aae8:	2720      	movs	r7, #32
 801aaea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801aaee:	4563      	cmp	r3, ip
 801aaf0:	eb01 000e 	add.w	r0, r1, lr
 801aaf4:	dc02      	bgt.n	801aafc <__ieee754_sqrt+0xc8>
 801aaf6:	d114      	bne.n	801ab22 <__ieee754_sqrt+0xee>
 801aaf8:	4290      	cmp	r0, r2
 801aafa:	d812      	bhi.n	801ab22 <__ieee754_sqrt+0xee>
 801aafc:	2800      	cmp	r0, #0
 801aafe:	eb00 0e01 	add.w	lr, r0, r1
 801ab02:	da59      	bge.n	801abb8 <__ieee754_sqrt+0x184>
 801ab04:	f1be 0f00 	cmp.w	lr, #0
 801ab08:	db56      	blt.n	801abb8 <__ieee754_sqrt+0x184>
 801ab0a:	f10c 0801 	add.w	r8, ip, #1
 801ab0e:	eba3 030c 	sub.w	r3, r3, ip
 801ab12:	4290      	cmp	r0, r2
 801ab14:	440c      	add	r4, r1
 801ab16:	eba2 0200 	sub.w	r2, r2, r0
 801ab1a:	bf88      	it	hi
 801ab1c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801ab20:	46c4      	mov	ip, r8
 801ab22:	005b      	lsls	r3, r3, #1
 801ab24:	3f01      	subs	r7, #1
 801ab26:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801ab2a:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801ab2e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801ab32:	d1dc      	bne.n	801aaee <__ieee754_sqrt+0xba>
 801ab34:	4313      	orrs	r3, r2
 801ab36:	d01b      	beq.n	801ab70 <__ieee754_sqrt+0x13c>
 801ab38:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 801abec <__ieee754_sqrt+0x1b8>
 801ab3c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 801abf0 <__ieee754_sqrt+0x1bc>
 801ab40:	e9da 0100 	ldrd	r0, r1, [sl]
 801ab44:	e9db 2300 	ldrd	r2, r3, [fp]
 801ab48:	e9da 8900 	ldrd	r8, r9, [sl]
 801ab4c:	f7e5 fb8e 	bl	800026c <__aeabi_dsub>
 801ab50:	4602      	mov	r2, r0
 801ab52:	460b      	mov	r3, r1
 801ab54:	4640      	mov	r0, r8
 801ab56:	4649      	mov	r1, r9
 801ab58:	f7e5 ffbc 	bl	8000ad4 <__aeabi_dcmple>
 801ab5c:	b140      	cbz	r0, 801ab70 <__ieee754_sqrt+0x13c>
 801ab5e:	f1b4 3fff 	cmp.w	r4, #4294967295
 801ab62:	e9da 0100 	ldrd	r0, r1, [sl]
 801ab66:	e9db 2300 	ldrd	r2, r3, [fp]
 801ab6a:	d127      	bne.n	801abbc <__ieee754_sqrt+0x188>
 801ab6c:	3501      	adds	r5, #1
 801ab6e:	463c      	mov	r4, r7
 801ab70:	106a      	asrs	r2, r5, #1
 801ab72:	07e9      	lsls	r1, r5, #31
 801ab74:	ea4f 0354 	mov.w	r3, r4, lsr #1
 801ab78:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801ab7c:	bf48      	it	mi
 801ab7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801ab82:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801ab86:	461c      	mov	r4, r3
 801ab88:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801ab8c:	e769      	b.n	801aa62 <__ieee754_sqrt+0x2e>
 801ab8e:	0ad3      	lsrs	r3, r2, #11
 801ab90:	3815      	subs	r0, #21
 801ab92:	0552      	lsls	r2, r2, #21
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d0fa      	beq.n	801ab8e <__ieee754_sqrt+0x15a>
 801ab98:	02dc      	lsls	r4, r3, #11
 801ab9a:	d50a      	bpl.n	801abb2 <__ieee754_sqrt+0x17e>
 801ab9c:	f1c1 0420 	rsb	r4, r1, #32
 801aba0:	1e4d      	subs	r5, r1, #1
 801aba2:	fa22 f404 	lsr.w	r4, r2, r4
 801aba6:	408a      	lsls	r2, r1
 801aba8:	1b41      	subs	r1, r0, r5
 801abaa:	4323      	orrs	r3, r4
 801abac:	e76e      	b.n	801aa8c <__ieee754_sqrt+0x58>
 801abae:	4608      	mov	r0, r1
 801abb0:	e7f0      	b.n	801ab94 <__ieee754_sqrt+0x160>
 801abb2:	005b      	lsls	r3, r3, #1
 801abb4:	3101      	adds	r1, #1
 801abb6:	e7ef      	b.n	801ab98 <__ieee754_sqrt+0x164>
 801abb8:	46e0      	mov	r8, ip
 801abba:	e7a8      	b.n	801ab0e <__ieee754_sqrt+0xda>
 801abbc:	e9da 8900 	ldrd	r8, r9, [sl]
 801abc0:	f7e5 fb56 	bl	8000270 <__adddf3>
 801abc4:	4602      	mov	r2, r0
 801abc6:	460b      	mov	r3, r1
 801abc8:	4640      	mov	r0, r8
 801abca:	4649      	mov	r1, r9
 801abcc:	f7e5 ff78 	bl	8000ac0 <__aeabi_dcmplt>
 801abd0:	b128      	cbz	r0, 801abde <__ieee754_sqrt+0x1aa>
 801abd2:	1ca0      	adds	r0, r4, #2
 801abd4:	f104 0402 	add.w	r4, r4, #2
 801abd8:	bf08      	it	eq
 801abda:	3501      	addeq	r5, #1
 801abdc:	e7c8      	b.n	801ab70 <__ieee754_sqrt+0x13c>
 801abde:	3401      	adds	r4, #1
 801abe0:	f024 0401 	bic.w	r4, r4, #1
 801abe4:	e7c4      	b.n	801ab70 <__ieee754_sqrt+0x13c>
 801abe6:	bf00      	nop
 801abe8:	7ff00000 	.word	0x7ff00000
 801abec:	20000018 	.word	0x20000018
 801abf0:	20000020 	.word	0x20000020
 801abf4:	00000000 	.word	0x00000000

0801abf8 <__ieee754_atan2>:
 801abf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801abfc:	ec57 6b11 	vmov	r6, r7, d1
 801ac00:	4273      	negs	r3, r6
 801ac02:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801ac06:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801ad80 <__ieee754_atan2+0x188>
 801ac0a:	ee11 5a10 	vmov	r5, s2
 801ac0e:	4333      	orrs	r3, r6
 801ac10:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801ac14:	4543      	cmp	r3, r8
 801ac16:	ec51 0b10 	vmov	r0, r1, d0
 801ac1a:	d80a      	bhi.n	801ac32 <__ieee754_atan2+0x3a>
 801ac1c:	4244      	negs	r4, r0
 801ac1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ac22:	468e      	mov	lr, r1
 801ac24:	ee10 9a10 	vmov	r9, s0
 801ac28:	4304      	orrs	r4, r0
 801ac2a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801ac2e:	4544      	cmp	r4, r8
 801ac30:	d907      	bls.n	801ac42 <__ieee754_atan2+0x4a>
 801ac32:	4632      	mov	r2, r6
 801ac34:	463b      	mov	r3, r7
 801ac36:	f7e5 fb1b 	bl	8000270 <__adddf3>
 801ac3a:	ec41 0b10 	vmov	d0, r0, r1
 801ac3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac42:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801ac46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ac4a:	4334      	orrs	r4, r6
 801ac4c:	d103      	bne.n	801ac56 <__ieee754_atan2+0x5e>
 801ac4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac52:	f000 bed5 	b.w	801ba00 <atan>
 801ac56:	17bc      	asrs	r4, r7, #30
 801ac58:	ea53 0909 	orrs.w	r9, r3, r9
 801ac5c:	f004 0402 	and.w	r4, r4, #2
 801ac60:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801ac64:	d107      	bne.n	801ac76 <__ieee754_atan2+0x7e>
 801ac66:	2c02      	cmp	r4, #2
 801ac68:	d05f      	beq.n	801ad2a <__ieee754_atan2+0x132>
 801ac6a:	2c03      	cmp	r4, #3
 801ac6c:	d1e5      	bne.n	801ac3a <__ieee754_atan2+0x42>
 801ac6e:	a140      	add	r1, pc, #256	; (adr r1, 801ad70 <__ieee754_atan2+0x178>)
 801ac70:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac74:	e7e1      	b.n	801ac3a <__ieee754_atan2+0x42>
 801ac76:	4315      	orrs	r5, r2
 801ac78:	d106      	bne.n	801ac88 <__ieee754_atan2+0x90>
 801ac7a:	f1be 0f00 	cmp.w	lr, #0
 801ac7e:	da5f      	bge.n	801ad40 <__ieee754_atan2+0x148>
 801ac80:	a13d      	add	r1, pc, #244	; (adr r1, 801ad78 <__ieee754_atan2+0x180>)
 801ac82:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac86:	e7d8      	b.n	801ac3a <__ieee754_atan2+0x42>
 801ac88:	4542      	cmp	r2, r8
 801ac8a:	d10f      	bne.n	801acac <__ieee754_atan2+0xb4>
 801ac8c:	4293      	cmp	r3, r2
 801ac8e:	f104 34ff 	add.w	r4, r4, #4294967295
 801ac92:	d107      	bne.n	801aca4 <__ieee754_atan2+0xac>
 801ac94:	2c02      	cmp	r4, #2
 801ac96:	d84c      	bhi.n	801ad32 <__ieee754_atan2+0x13a>
 801ac98:	4b33      	ldr	r3, [pc, #204]	; (801ad68 <__ieee754_atan2+0x170>)
 801ac9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ac9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801aca2:	e7ca      	b.n	801ac3a <__ieee754_atan2+0x42>
 801aca4:	2c02      	cmp	r4, #2
 801aca6:	d848      	bhi.n	801ad3a <__ieee754_atan2+0x142>
 801aca8:	4b30      	ldr	r3, [pc, #192]	; (801ad6c <__ieee754_atan2+0x174>)
 801acaa:	e7f6      	b.n	801ac9a <__ieee754_atan2+0xa2>
 801acac:	4543      	cmp	r3, r8
 801acae:	d0e4      	beq.n	801ac7a <__ieee754_atan2+0x82>
 801acb0:	1a9b      	subs	r3, r3, r2
 801acb2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801acb6:	ea4f 5223 	mov.w	r2, r3, asr #20
 801acba:	da1e      	bge.n	801acfa <__ieee754_atan2+0x102>
 801acbc:	2f00      	cmp	r7, #0
 801acbe:	da01      	bge.n	801acc4 <__ieee754_atan2+0xcc>
 801acc0:	323c      	adds	r2, #60	; 0x3c
 801acc2:	db1e      	blt.n	801ad02 <__ieee754_atan2+0x10a>
 801acc4:	4632      	mov	r2, r6
 801acc6:	463b      	mov	r3, r7
 801acc8:	f7e5 fdb2 	bl	8000830 <__aeabi_ddiv>
 801accc:	ec41 0b10 	vmov	d0, r0, r1
 801acd0:	f001 f836 	bl	801bd40 <fabs>
 801acd4:	f000 fe94 	bl	801ba00 <atan>
 801acd8:	ec51 0b10 	vmov	r0, r1, d0
 801acdc:	2c01      	cmp	r4, #1
 801acde:	d013      	beq.n	801ad08 <__ieee754_atan2+0x110>
 801ace0:	2c02      	cmp	r4, #2
 801ace2:	d015      	beq.n	801ad10 <__ieee754_atan2+0x118>
 801ace4:	2c00      	cmp	r4, #0
 801ace6:	d0a8      	beq.n	801ac3a <__ieee754_atan2+0x42>
 801ace8:	a317      	add	r3, pc, #92	; (adr r3, 801ad48 <__ieee754_atan2+0x150>)
 801acea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acee:	f7e5 fabd 	bl	800026c <__aeabi_dsub>
 801acf2:	a317      	add	r3, pc, #92	; (adr r3, 801ad50 <__ieee754_atan2+0x158>)
 801acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acf8:	e014      	b.n	801ad24 <__ieee754_atan2+0x12c>
 801acfa:	a117      	add	r1, pc, #92	; (adr r1, 801ad58 <__ieee754_atan2+0x160>)
 801acfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad00:	e7ec      	b.n	801acdc <__ieee754_atan2+0xe4>
 801ad02:	2000      	movs	r0, #0
 801ad04:	2100      	movs	r1, #0
 801ad06:	e7e9      	b.n	801acdc <__ieee754_atan2+0xe4>
 801ad08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ad0c:	4619      	mov	r1, r3
 801ad0e:	e794      	b.n	801ac3a <__ieee754_atan2+0x42>
 801ad10:	a30d      	add	r3, pc, #52	; (adr r3, 801ad48 <__ieee754_atan2+0x150>)
 801ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad16:	f7e5 faa9 	bl	800026c <__aeabi_dsub>
 801ad1a:	4602      	mov	r2, r0
 801ad1c:	460b      	mov	r3, r1
 801ad1e:	a10c      	add	r1, pc, #48	; (adr r1, 801ad50 <__ieee754_atan2+0x158>)
 801ad20:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad24:	f7e5 faa2 	bl	800026c <__aeabi_dsub>
 801ad28:	e787      	b.n	801ac3a <__ieee754_atan2+0x42>
 801ad2a:	a109      	add	r1, pc, #36	; (adr r1, 801ad50 <__ieee754_atan2+0x158>)
 801ad2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad30:	e783      	b.n	801ac3a <__ieee754_atan2+0x42>
 801ad32:	a10b      	add	r1, pc, #44	; (adr r1, 801ad60 <__ieee754_atan2+0x168>)
 801ad34:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad38:	e77f      	b.n	801ac3a <__ieee754_atan2+0x42>
 801ad3a:	2000      	movs	r0, #0
 801ad3c:	2100      	movs	r1, #0
 801ad3e:	e77c      	b.n	801ac3a <__ieee754_atan2+0x42>
 801ad40:	a105      	add	r1, pc, #20	; (adr r1, 801ad58 <__ieee754_atan2+0x160>)
 801ad42:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad46:	e778      	b.n	801ac3a <__ieee754_atan2+0x42>
 801ad48:	33145c07 	.word	0x33145c07
 801ad4c:	3ca1a626 	.word	0x3ca1a626
 801ad50:	54442d18 	.word	0x54442d18
 801ad54:	400921fb 	.word	0x400921fb
 801ad58:	54442d18 	.word	0x54442d18
 801ad5c:	3ff921fb 	.word	0x3ff921fb
 801ad60:	54442d18 	.word	0x54442d18
 801ad64:	3fe921fb 	.word	0x3fe921fb
 801ad68:	0801e778 	.word	0x0801e778
 801ad6c:	0801e790 	.word	0x0801e790
 801ad70:	54442d18 	.word	0x54442d18
 801ad74:	c00921fb 	.word	0xc00921fb
 801ad78:	54442d18 	.word	0x54442d18
 801ad7c:	bff921fb 	.word	0xbff921fb
 801ad80:	7ff00000 	.word	0x7ff00000

0801ad84 <__ieee754_fmod>:
 801ad84:	ec53 2b11 	vmov	r2, r3, d1
 801ad88:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 801ad8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad90:	ea5c 0402 	orrs.w	r4, ip, r2
 801ad94:	461e      	mov	r6, r3
 801ad96:	ee11 7a10 	vmov	r7, s2
 801ad9a:	ee11 ea10 	vmov	lr, s2
 801ad9e:	ec51 0b10 	vmov	r0, r1, d0
 801ada2:	d00c      	beq.n	801adbe <__ieee754_fmod+0x3a>
 801ada4:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801ada8:	4c77      	ldr	r4, [pc, #476]	; (801af88 <__ieee754_fmod+0x204>)
 801adaa:	4689      	mov	r9, r1
 801adac:	45a0      	cmp	r8, r4
 801adae:	dc06      	bgt.n	801adbe <__ieee754_fmod+0x3a>
 801adb0:	4254      	negs	r4, r2
 801adb2:	4d76      	ldr	r5, [pc, #472]	; (801af8c <__ieee754_fmod+0x208>)
 801adb4:	4314      	orrs	r4, r2
 801adb6:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 801adba:	42ac      	cmp	r4, r5
 801adbc:	d909      	bls.n	801add2 <__ieee754_fmod+0x4e>
 801adbe:	f7e5 fc0d 	bl	80005dc <__aeabi_dmul>
 801adc2:	4602      	mov	r2, r0
 801adc4:	460b      	mov	r3, r1
 801adc6:	f7e5 fd33 	bl	8000830 <__aeabi_ddiv>
 801adca:	ec41 0b10 	vmov	d0, r0, r1
 801adce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801add2:	45e0      	cmp	r8, ip
 801add4:	ee10 aa10 	vmov	sl, s0
 801add8:	ee10 4a10 	vmov	r4, s0
 801addc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801ade0:	dc09      	bgt.n	801adf6 <__ieee754_fmod+0x72>
 801ade2:	dbf2      	blt.n	801adca <__ieee754_fmod+0x46>
 801ade4:	4290      	cmp	r0, r2
 801ade6:	d3f0      	bcc.n	801adca <__ieee754_fmod+0x46>
 801ade8:	d105      	bne.n	801adf6 <__ieee754_fmod+0x72>
 801adea:	4b69      	ldr	r3, [pc, #420]	; (801af90 <__ieee754_fmod+0x20c>)
 801adec:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 801adf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801adf4:	e7e9      	b.n	801adca <__ieee754_fmod+0x46>
 801adf6:	4a65      	ldr	r2, [pc, #404]	; (801af8c <__ieee754_fmod+0x208>)
 801adf8:	ea19 0f02 	tst.w	r9, r2
 801adfc:	d148      	bne.n	801ae90 <__ieee754_fmod+0x10c>
 801adfe:	f1b8 0f00 	cmp.w	r8, #0
 801ae02:	d13d      	bne.n	801ae80 <__ieee754_fmod+0xfc>
 801ae04:	4653      	mov	r3, sl
 801ae06:	4963      	ldr	r1, [pc, #396]	; (801af94 <__ieee754_fmod+0x210>)
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	dc36      	bgt.n	801ae7a <__ieee754_fmod+0xf6>
 801ae0c:	4216      	tst	r6, r2
 801ae0e:	d14f      	bne.n	801aeb0 <__ieee754_fmod+0x12c>
 801ae10:	f1bc 0f00 	cmp.w	ip, #0
 801ae14:	d144      	bne.n	801aea0 <__ieee754_fmod+0x11c>
 801ae16:	463b      	mov	r3, r7
 801ae18:	4a5e      	ldr	r2, [pc, #376]	; (801af94 <__ieee754_fmod+0x210>)
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	dc3d      	bgt.n	801ae9a <__ieee754_fmod+0x116>
 801ae1e:	485e      	ldr	r0, [pc, #376]	; (801af98 <__ieee754_fmod+0x214>)
 801ae20:	4281      	cmp	r1, r0
 801ae22:	db4a      	blt.n	801aeba <__ieee754_fmod+0x136>
 801ae24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ae28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ae2c:	485a      	ldr	r0, [pc, #360]	; (801af98 <__ieee754_fmod+0x214>)
 801ae2e:	4282      	cmp	r2, r0
 801ae30:	db57      	blt.n	801aee2 <__ieee754_fmod+0x15e>
 801ae32:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801ae36:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801ae3a:	1a89      	subs	r1, r1, r2
 801ae3c:	1b98      	subs	r0, r3, r6
 801ae3e:	eba4 070e 	sub.w	r7, r4, lr
 801ae42:	2900      	cmp	r1, #0
 801ae44:	d162      	bne.n	801af0c <__ieee754_fmod+0x188>
 801ae46:	4574      	cmp	r4, lr
 801ae48:	bf38      	it	cc
 801ae4a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801ae4e:	2800      	cmp	r0, #0
 801ae50:	bfa4      	itt	ge
 801ae52:	463c      	movge	r4, r7
 801ae54:	4603      	movge	r3, r0
 801ae56:	ea53 0104 	orrs.w	r1, r3, r4
 801ae5a:	d0c6      	beq.n	801adea <__ieee754_fmod+0x66>
 801ae5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ae60:	db69      	blt.n	801af36 <__ieee754_fmod+0x1b2>
 801ae62:	494d      	ldr	r1, [pc, #308]	; (801af98 <__ieee754_fmod+0x214>)
 801ae64:	428a      	cmp	r2, r1
 801ae66:	db6c      	blt.n	801af42 <__ieee754_fmod+0x1be>
 801ae68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801ae6c:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801ae70:	4620      	mov	r0, r4
 801ae72:	432b      	orrs	r3, r5
 801ae74:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801ae78:	e7a7      	b.n	801adca <__ieee754_fmod+0x46>
 801ae7a:	3901      	subs	r1, #1
 801ae7c:	005b      	lsls	r3, r3, #1
 801ae7e:	e7c3      	b.n	801ae08 <__ieee754_fmod+0x84>
 801ae80:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801ae84:	4944      	ldr	r1, [pc, #272]	; (801af98 <__ieee754_fmod+0x214>)
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	ddc0      	ble.n	801ae0c <__ieee754_fmod+0x88>
 801ae8a:	3901      	subs	r1, #1
 801ae8c:	005b      	lsls	r3, r3, #1
 801ae8e:	e7fa      	b.n	801ae86 <__ieee754_fmod+0x102>
 801ae90:	ea4f 5128 	mov.w	r1, r8, asr #20
 801ae94:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801ae98:	e7b8      	b.n	801ae0c <__ieee754_fmod+0x88>
 801ae9a:	3a01      	subs	r2, #1
 801ae9c:	005b      	lsls	r3, r3, #1
 801ae9e:	e7bc      	b.n	801ae1a <__ieee754_fmod+0x96>
 801aea0:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801aea4:	4a3c      	ldr	r2, [pc, #240]	; (801af98 <__ieee754_fmod+0x214>)
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	ddb9      	ble.n	801ae1e <__ieee754_fmod+0x9a>
 801aeaa:	3a01      	subs	r2, #1
 801aeac:	005b      	lsls	r3, r3, #1
 801aeae:	e7fa      	b.n	801aea6 <__ieee754_fmod+0x122>
 801aeb0:	ea4f 522c 	mov.w	r2, ip, asr #20
 801aeb4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801aeb8:	e7b1      	b.n	801ae1e <__ieee754_fmod+0x9a>
 801aeba:	1a40      	subs	r0, r0, r1
 801aebc:	281f      	cmp	r0, #31
 801aebe:	dc0a      	bgt.n	801aed6 <__ieee754_fmod+0x152>
 801aec0:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 801aec4:	fa08 f800 	lsl.w	r8, r8, r0
 801aec8:	fa0a f400 	lsl.w	r4, sl, r0
 801aecc:	fa2a f303 	lsr.w	r3, sl, r3
 801aed0:	ea43 0308 	orr.w	r3, r3, r8
 801aed4:	e7aa      	b.n	801ae2c <__ieee754_fmod+0xa8>
 801aed6:	4b31      	ldr	r3, [pc, #196]	; (801af9c <__ieee754_fmod+0x218>)
 801aed8:	2400      	movs	r4, #0
 801aeda:	1a5b      	subs	r3, r3, r1
 801aedc:	fa0a f303 	lsl.w	r3, sl, r3
 801aee0:	e7a4      	b.n	801ae2c <__ieee754_fmod+0xa8>
 801aee2:	1a80      	subs	r0, r0, r2
 801aee4:	281f      	cmp	r0, #31
 801aee6:	dc0a      	bgt.n	801aefe <__ieee754_fmod+0x17a>
 801aee8:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801aeec:	fa0c fc00 	lsl.w	ip, ip, r0
 801aef0:	fa07 fe00 	lsl.w	lr, r7, r0
 801aef4:	fa27 f606 	lsr.w	r6, r7, r6
 801aef8:	ea46 060c 	orr.w	r6, r6, ip
 801aefc:	e79d      	b.n	801ae3a <__ieee754_fmod+0xb6>
 801aefe:	4e27      	ldr	r6, [pc, #156]	; (801af9c <__ieee754_fmod+0x218>)
 801af00:	f04f 0e00 	mov.w	lr, #0
 801af04:	1ab6      	subs	r6, r6, r2
 801af06:	fa07 f606 	lsl.w	r6, r7, r6
 801af0a:	e796      	b.n	801ae3a <__ieee754_fmod+0xb6>
 801af0c:	4574      	cmp	r4, lr
 801af0e:	bf38      	it	cc
 801af10:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801af14:	2800      	cmp	r0, #0
 801af16:	da05      	bge.n	801af24 <__ieee754_fmod+0x1a0>
 801af18:	0fe0      	lsrs	r0, r4, #31
 801af1a:	0064      	lsls	r4, r4, #1
 801af1c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801af20:	3901      	subs	r1, #1
 801af22:	e78b      	b.n	801ae3c <__ieee754_fmod+0xb8>
 801af24:	ea50 0307 	orrs.w	r3, r0, r7
 801af28:	f43f af5f 	beq.w	801adea <__ieee754_fmod+0x66>
 801af2c:	0ffb      	lsrs	r3, r7, #31
 801af2e:	007c      	lsls	r4, r7, #1
 801af30:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801af34:	e7f4      	b.n	801af20 <__ieee754_fmod+0x19c>
 801af36:	0fe1      	lsrs	r1, r4, #31
 801af38:	3a01      	subs	r2, #1
 801af3a:	0064      	lsls	r4, r4, #1
 801af3c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801af40:	e78c      	b.n	801ae5c <__ieee754_fmod+0xd8>
 801af42:	1a89      	subs	r1, r1, r2
 801af44:	2914      	cmp	r1, #20
 801af46:	dc0a      	bgt.n	801af5e <__ieee754_fmod+0x1da>
 801af48:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801af4c:	40cc      	lsrs	r4, r1
 801af4e:	fa03 f202 	lsl.w	r2, r3, r2
 801af52:	410b      	asrs	r3, r1
 801af54:	4322      	orrs	r2, r4
 801af56:	ea43 0105 	orr.w	r1, r3, r5
 801af5a:	4610      	mov	r0, r2
 801af5c:	e735      	b.n	801adca <__ieee754_fmod+0x46>
 801af5e:	291f      	cmp	r1, #31
 801af60:	dc07      	bgt.n	801af72 <__ieee754_fmod+0x1ee>
 801af62:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801af66:	40cc      	lsrs	r4, r1
 801af68:	fa03 f202 	lsl.w	r2, r3, r2
 801af6c:	4322      	orrs	r2, r4
 801af6e:	462b      	mov	r3, r5
 801af70:	e7f1      	b.n	801af56 <__ieee754_fmod+0x1d2>
 801af72:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801af76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801af7a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801af7e:	32e2      	adds	r2, #226	; 0xe2
 801af80:	fa43 f202 	asr.w	r2, r3, r2
 801af84:	e7f3      	b.n	801af6e <__ieee754_fmod+0x1ea>
 801af86:	bf00      	nop
 801af88:	7fefffff 	.word	0x7fefffff
 801af8c:	7ff00000 	.word	0x7ff00000
 801af90:	0801e7a8 	.word	0x0801e7a8
 801af94:	fffffbed 	.word	0xfffffbed
 801af98:	fffffc02 	.word	0xfffffc02
 801af9c:	fffffbe2 	.word	0xfffffbe2

0801afa0 <__ieee754_pow>:
 801afa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afa4:	ed2d 8b06 	vpush	{d8-d10}
 801afa8:	b089      	sub	sp, #36	; 0x24
 801afaa:	ed8d 1b00 	vstr	d1, [sp]
 801afae:	e9dd 2900 	ldrd	r2, r9, [sp]
 801afb2:	ec57 6b10 	vmov	r6, r7, d0
 801afb6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801afba:	ea58 0102 	orrs.w	r1, r8, r2
 801afbe:	d115      	bne.n	801afec <__ieee754_pow+0x4c>
 801afc0:	19b3      	adds	r3, r6, r6
 801afc2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801afc6:	4152      	adcs	r2, r2
 801afc8:	4299      	cmp	r1, r3
 801afca:	4b89      	ldr	r3, [pc, #548]	; (801b1f0 <__ieee754_pow+0x250>)
 801afcc:	4193      	sbcs	r3, r2
 801afce:	f080 84d2 	bcs.w	801b976 <__ieee754_pow+0x9d6>
 801afd2:	4630      	mov	r0, r6
 801afd4:	4639      	mov	r1, r7
 801afd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801afda:	f7e5 f949 	bl	8000270 <__adddf3>
 801afde:	ec41 0b10 	vmov	d0, r0, r1
 801afe2:	b009      	add	sp, #36	; 0x24
 801afe4:	ecbd 8b06 	vpop	{d8-d10}
 801afe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afec:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801aff0:	4b80      	ldr	r3, [pc, #512]	; (801b1f4 <__ieee754_pow+0x254>)
 801aff2:	463d      	mov	r5, r7
 801aff4:	ee10 aa10 	vmov	sl, s0
 801aff8:	429c      	cmp	r4, r3
 801affa:	dc06      	bgt.n	801b00a <__ieee754_pow+0x6a>
 801affc:	d101      	bne.n	801b002 <__ieee754_pow+0x62>
 801affe:	2e00      	cmp	r6, #0
 801b000:	d1e7      	bne.n	801afd2 <__ieee754_pow+0x32>
 801b002:	4598      	cmp	r8, r3
 801b004:	dc01      	bgt.n	801b00a <__ieee754_pow+0x6a>
 801b006:	d10f      	bne.n	801b028 <__ieee754_pow+0x88>
 801b008:	b172      	cbz	r2, 801b028 <__ieee754_pow+0x88>
 801b00a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801b00e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801b012:	ea55 050a 	orrs.w	r5, r5, sl
 801b016:	d1dc      	bne.n	801afd2 <__ieee754_pow+0x32>
 801b018:	e9dd 3200 	ldrd	r3, r2, [sp]
 801b01c:	18db      	adds	r3, r3, r3
 801b01e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801b022:	4152      	adcs	r2, r2
 801b024:	429d      	cmp	r5, r3
 801b026:	e7d0      	b.n	801afca <__ieee754_pow+0x2a>
 801b028:	2d00      	cmp	r5, #0
 801b02a:	da3b      	bge.n	801b0a4 <__ieee754_pow+0x104>
 801b02c:	4b72      	ldr	r3, [pc, #456]	; (801b1f8 <__ieee754_pow+0x258>)
 801b02e:	4598      	cmp	r8, r3
 801b030:	dc51      	bgt.n	801b0d6 <__ieee754_pow+0x136>
 801b032:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801b036:	4598      	cmp	r8, r3
 801b038:	f340 84ac 	ble.w	801b994 <__ieee754_pow+0x9f4>
 801b03c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b040:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b044:	2b14      	cmp	r3, #20
 801b046:	dd0f      	ble.n	801b068 <__ieee754_pow+0xc8>
 801b048:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801b04c:	fa22 f103 	lsr.w	r1, r2, r3
 801b050:	fa01 f303 	lsl.w	r3, r1, r3
 801b054:	4293      	cmp	r3, r2
 801b056:	f040 849d 	bne.w	801b994 <__ieee754_pow+0x9f4>
 801b05a:	f001 0101 	and.w	r1, r1, #1
 801b05e:	f1c1 0302 	rsb	r3, r1, #2
 801b062:	9304      	str	r3, [sp, #16]
 801b064:	b182      	cbz	r2, 801b088 <__ieee754_pow+0xe8>
 801b066:	e05f      	b.n	801b128 <__ieee754_pow+0x188>
 801b068:	2a00      	cmp	r2, #0
 801b06a:	d15b      	bne.n	801b124 <__ieee754_pow+0x184>
 801b06c:	f1c3 0314 	rsb	r3, r3, #20
 801b070:	fa48 f103 	asr.w	r1, r8, r3
 801b074:	fa01 f303 	lsl.w	r3, r1, r3
 801b078:	4543      	cmp	r3, r8
 801b07a:	f040 8488 	bne.w	801b98e <__ieee754_pow+0x9ee>
 801b07e:	f001 0101 	and.w	r1, r1, #1
 801b082:	f1c1 0302 	rsb	r3, r1, #2
 801b086:	9304      	str	r3, [sp, #16]
 801b088:	4b5c      	ldr	r3, [pc, #368]	; (801b1fc <__ieee754_pow+0x25c>)
 801b08a:	4598      	cmp	r8, r3
 801b08c:	d132      	bne.n	801b0f4 <__ieee754_pow+0x154>
 801b08e:	f1b9 0f00 	cmp.w	r9, #0
 801b092:	f280 8478 	bge.w	801b986 <__ieee754_pow+0x9e6>
 801b096:	4632      	mov	r2, r6
 801b098:	463b      	mov	r3, r7
 801b09a:	2000      	movs	r0, #0
 801b09c:	4957      	ldr	r1, [pc, #348]	; (801b1fc <__ieee754_pow+0x25c>)
 801b09e:	f7e5 fbc7 	bl	8000830 <__aeabi_ddiv>
 801b0a2:	e79c      	b.n	801afde <__ieee754_pow+0x3e>
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	9304      	str	r3, [sp, #16]
 801b0a8:	2a00      	cmp	r2, #0
 801b0aa:	d13d      	bne.n	801b128 <__ieee754_pow+0x188>
 801b0ac:	4b51      	ldr	r3, [pc, #324]	; (801b1f4 <__ieee754_pow+0x254>)
 801b0ae:	4598      	cmp	r8, r3
 801b0b0:	d1ea      	bne.n	801b088 <__ieee754_pow+0xe8>
 801b0b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801b0b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b0ba:	ea53 030a 	orrs.w	r3, r3, sl
 801b0be:	f000 845a 	beq.w	801b976 <__ieee754_pow+0x9d6>
 801b0c2:	4b4f      	ldr	r3, [pc, #316]	; (801b200 <__ieee754_pow+0x260>)
 801b0c4:	429c      	cmp	r4, r3
 801b0c6:	dd08      	ble.n	801b0da <__ieee754_pow+0x13a>
 801b0c8:	f1b9 0f00 	cmp.w	r9, #0
 801b0cc:	f2c0 8457 	blt.w	801b97e <__ieee754_pow+0x9de>
 801b0d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b0d4:	e783      	b.n	801afde <__ieee754_pow+0x3e>
 801b0d6:	2302      	movs	r3, #2
 801b0d8:	e7e5      	b.n	801b0a6 <__ieee754_pow+0x106>
 801b0da:	f1b9 0f00 	cmp.w	r9, #0
 801b0de:	f04f 0000 	mov.w	r0, #0
 801b0e2:	f04f 0100 	mov.w	r1, #0
 801b0e6:	f6bf af7a 	bge.w	801afde <__ieee754_pow+0x3e>
 801b0ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 801b0ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b0f2:	e774      	b.n	801afde <__ieee754_pow+0x3e>
 801b0f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801b0f8:	d106      	bne.n	801b108 <__ieee754_pow+0x168>
 801b0fa:	4632      	mov	r2, r6
 801b0fc:	463b      	mov	r3, r7
 801b0fe:	4630      	mov	r0, r6
 801b100:	4639      	mov	r1, r7
 801b102:	f7e5 fa6b 	bl	80005dc <__aeabi_dmul>
 801b106:	e76a      	b.n	801afde <__ieee754_pow+0x3e>
 801b108:	4b3e      	ldr	r3, [pc, #248]	; (801b204 <__ieee754_pow+0x264>)
 801b10a:	4599      	cmp	r9, r3
 801b10c:	d10c      	bne.n	801b128 <__ieee754_pow+0x188>
 801b10e:	2d00      	cmp	r5, #0
 801b110:	db0a      	blt.n	801b128 <__ieee754_pow+0x188>
 801b112:	ec47 6b10 	vmov	d0, r6, r7
 801b116:	b009      	add	sp, #36	; 0x24
 801b118:	ecbd 8b06 	vpop	{d8-d10}
 801b11c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b120:	f7ff bc88 	b.w	801aa34 <__ieee754_sqrt>
 801b124:	2300      	movs	r3, #0
 801b126:	9304      	str	r3, [sp, #16]
 801b128:	ec47 6b10 	vmov	d0, r6, r7
 801b12c:	f000 fe08 	bl	801bd40 <fabs>
 801b130:	ec51 0b10 	vmov	r0, r1, d0
 801b134:	f1ba 0f00 	cmp.w	sl, #0
 801b138:	d129      	bne.n	801b18e <__ieee754_pow+0x1ee>
 801b13a:	b124      	cbz	r4, 801b146 <__ieee754_pow+0x1a6>
 801b13c:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801b140:	4b2e      	ldr	r3, [pc, #184]	; (801b1fc <__ieee754_pow+0x25c>)
 801b142:	429a      	cmp	r2, r3
 801b144:	d123      	bne.n	801b18e <__ieee754_pow+0x1ee>
 801b146:	f1b9 0f00 	cmp.w	r9, #0
 801b14a:	da05      	bge.n	801b158 <__ieee754_pow+0x1b8>
 801b14c:	4602      	mov	r2, r0
 801b14e:	460b      	mov	r3, r1
 801b150:	2000      	movs	r0, #0
 801b152:	492a      	ldr	r1, [pc, #168]	; (801b1fc <__ieee754_pow+0x25c>)
 801b154:	f7e5 fb6c 	bl	8000830 <__aeabi_ddiv>
 801b158:	2d00      	cmp	r5, #0
 801b15a:	f6bf af40 	bge.w	801afde <__ieee754_pow+0x3e>
 801b15e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b162:	9b04      	ldr	r3, [sp, #16]
 801b164:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b168:	431c      	orrs	r4, r3
 801b16a:	d108      	bne.n	801b17e <__ieee754_pow+0x1de>
 801b16c:	4602      	mov	r2, r0
 801b16e:	460b      	mov	r3, r1
 801b170:	4610      	mov	r0, r2
 801b172:	4619      	mov	r1, r3
 801b174:	f7e5 f87a 	bl	800026c <__aeabi_dsub>
 801b178:	4602      	mov	r2, r0
 801b17a:	460b      	mov	r3, r1
 801b17c:	e78f      	b.n	801b09e <__ieee754_pow+0xfe>
 801b17e:	9b04      	ldr	r3, [sp, #16]
 801b180:	2b01      	cmp	r3, #1
 801b182:	f47f af2c 	bne.w	801afde <__ieee754_pow+0x3e>
 801b186:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b18a:	4619      	mov	r1, r3
 801b18c:	e727      	b.n	801afde <__ieee754_pow+0x3e>
 801b18e:	0feb      	lsrs	r3, r5, #31
 801b190:	3b01      	subs	r3, #1
 801b192:	9306      	str	r3, [sp, #24]
 801b194:	9a06      	ldr	r2, [sp, #24]
 801b196:	9b04      	ldr	r3, [sp, #16]
 801b198:	4313      	orrs	r3, r2
 801b19a:	d102      	bne.n	801b1a2 <__ieee754_pow+0x202>
 801b19c:	4632      	mov	r2, r6
 801b19e:	463b      	mov	r3, r7
 801b1a0:	e7e6      	b.n	801b170 <__ieee754_pow+0x1d0>
 801b1a2:	4b19      	ldr	r3, [pc, #100]	; (801b208 <__ieee754_pow+0x268>)
 801b1a4:	4598      	cmp	r8, r3
 801b1a6:	f340 80fb 	ble.w	801b3a0 <__ieee754_pow+0x400>
 801b1aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801b1ae:	4598      	cmp	r8, r3
 801b1b0:	4b13      	ldr	r3, [pc, #76]	; (801b200 <__ieee754_pow+0x260>)
 801b1b2:	dd0c      	ble.n	801b1ce <__ieee754_pow+0x22e>
 801b1b4:	429c      	cmp	r4, r3
 801b1b6:	dc0f      	bgt.n	801b1d8 <__ieee754_pow+0x238>
 801b1b8:	f1b9 0f00 	cmp.w	r9, #0
 801b1bc:	da0f      	bge.n	801b1de <__ieee754_pow+0x23e>
 801b1be:	2000      	movs	r0, #0
 801b1c0:	b009      	add	sp, #36	; 0x24
 801b1c2:	ecbd 8b06 	vpop	{d8-d10}
 801b1c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1ca:	f001 b9b2 	b.w	801c532 <__math_oflow>
 801b1ce:	429c      	cmp	r4, r3
 801b1d0:	dbf2      	blt.n	801b1b8 <__ieee754_pow+0x218>
 801b1d2:	4b0a      	ldr	r3, [pc, #40]	; (801b1fc <__ieee754_pow+0x25c>)
 801b1d4:	429c      	cmp	r4, r3
 801b1d6:	dd19      	ble.n	801b20c <__ieee754_pow+0x26c>
 801b1d8:	f1b9 0f00 	cmp.w	r9, #0
 801b1dc:	dcef      	bgt.n	801b1be <__ieee754_pow+0x21e>
 801b1de:	2000      	movs	r0, #0
 801b1e0:	b009      	add	sp, #36	; 0x24
 801b1e2:	ecbd 8b06 	vpop	{d8-d10}
 801b1e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1ea:	f001 b999 	b.w	801c520 <__math_uflow>
 801b1ee:	bf00      	nop
 801b1f0:	fff00000 	.word	0xfff00000
 801b1f4:	7ff00000 	.word	0x7ff00000
 801b1f8:	433fffff 	.word	0x433fffff
 801b1fc:	3ff00000 	.word	0x3ff00000
 801b200:	3fefffff 	.word	0x3fefffff
 801b204:	3fe00000 	.word	0x3fe00000
 801b208:	41e00000 	.word	0x41e00000
 801b20c:	2200      	movs	r2, #0
 801b20e:	4b60      	ldr	r3, [pc, #384]	; (801b390 <__ieee754_pow+0x3f0>)
 801b210:	f7e5 f82c 	bl	800026c <__aeabi_dsub>
 801b214:	4604      	mov	r4, r0
 801b216:	460d      	mov	r5, r1
 801b218:	a353      	add	r3, pc, #332	; (adr r3, 801b368 <__ieee754_pow+0x3c8>)
 801b21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b21e:	f7e5 f9dd 	bl	80005dc <__aeabi_dmul>
 801b222:	4606      	mov	r6, r0
 801b224:	460f      	mov	r7, r1
 801b226:	4620      	mov	r0, r4
 801b228:	4629      	mov	r1, r5
 801b22a:	a351      	add	r3, pc, #324	; (adr r3, 801b370 <__ieee754_pow+0x3d0>)
 801b22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b230:	f7e5 f9d4 	bl	80005dc <__aeabi_dmul>
 801b234:	2200      	movs	r2, #0
 801b236:	4682      	mov	sl, r0
 801b238:	468b      	mov	fp, r1
 801b23a:	4b56      	ldr	r3, [pc, #344]	; (801b394 <__ieee754_pow+0x3f4>)
 801b23c:	4620      	mov	r0, r4
 801b23e:	4629      	mov	r1, r5
 801b240:	f7e5 f9cc 	bl	80005dc <__aeabi_dmul>
 801b244:	4602      	mov	r2, r0
 801b246:	460b      	mov	r3, r1
 801b248:	a14b      	add	r1, pc, #300	; (adr r1, 801b378 <__ieee754_pow+0x3d8>)
 801b24a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b24e:	f7e5 f80d 	bl	800026c <__aeabi_dsub>
 801b252:	4622      	mov	r2, r4
 801b254:	462b      	mov	r3, r5
 801b256:	f7e5 f9c1 	bl	80005dc <__aeabi_dmul>
 801b25a:	4602      	mov	r2, r0
 801b25c:	460b      	mov	r3, r1
 801b25e:	2000      	movs	r0, #0
 801b260:	494d      	ldr	r1, [pc, #308]	; (801b398 <__ieee754_pow+0x3f8>)
 801b262:	f7e5 f803 	bl	800026c <__aeabi_dsub>
 801b266:	4680      	mov	r8, r0
 801b268:	4689      	mov	r9, r1
 801b26a:	4622      	mov	r2, r4
 801b26c:	462b      	mov	r3, r5
 801b26e:	4620      	mov	r0, r4
 801b270:	4629      	mov	r1, r5
 801b272:	f7e5 f9b3 	bl	80005dc <__aeabi_dmul>
 801b276:	4602      	mov	r2, r0
 801b278:	460b      	mov	r3, r1
 801b27a:	4640      	mov	r0, r8
 801b27c:	4649      	mov	r1, r9
 801b27e:	f7e5 f9ad 	bl	80005dc <__aeabi_dmul>
 801b282:	a33f      	add	r3, pc, #252	; (adr r3, 801b380 <__ieee754_pow+0x3e0>)
 801b284:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b288:	f7e5 f9a8 	bl	80005dc <__aeabi_dmul>
 801b28c:	4602      	mov	r2, r0
 801b28e:	460b      	mov	r3, r1
 801b290:	4650      	mov	r0, sl
 801b292:	4659      	mov	r1, fp
 801b294:	f7e4 ffea 	bl	800026c <__aeabi_dsub>
 801b298:	4602      	mov	r2, r0
 801b29a:	460b      	mov	r3, r1
 801b29c:	4680      	mov	r8, r0
 801b29e:	4689      	mov	r9, r1
 801b2a0:	4630      	mov	r0, r6
 801b2a2:	4639      	mov	r1, r7
 801b2a4:	f7e4 ffe4 	bl	8000270 <__adddf3>
 801b2a8:	2000      	movs	r0, #0
 801b2aa:	4632      	mov	r2, r6
 801b2ac:	463b      	mov	r3, r7
 801b2ae:	4604      	mov	r4, r0
 801b2b0:	460d      	mov	r5, r1
 801b2b2:	f7e4 ffdb 	bl	800026c <__aeabi_dsub>
 801b2b6:	4602      	mov	r2, r0
 801b2b8:	460b      	mov	r3, r1
 801b2ba:	4640      	mov	r0, r8
 801b2bc:	4649      	mov	r1, r9
 801b2be:	f7e4 ffd5 	bl	800026c <__aeabi_dsub>
 801b2c2:	9b04      	ldr	r3, [sp, #16]
 801b2c4:	9a06      	ldr	r2, [sp, #24]
 801b2c6:	4682      	mov	sl, r0
 801b2c8:	3b01      	subs	r3, #1
 801b2ca:	468b      	mov	fp, r1
 801b2cc:	4313      	orrs	r3, r2
 801b2ce:	f040 81e7 	bne.w	801b6a0 <__ieee754_pow+0x700>
 801b2d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801b388 <__ieee754_pow+0x3e8>
 801b2d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 801b2da:	2600      	movs	r6, #0
 801b2dc:	eeb0 8a47 	vmov.f32	s16, s14
 801b2e0:	eef0 8a67 	vmov.f32	s17, s15
 801b2e4:	463b      	mov	r3, r7
 801b2e6:	4632      	mov	r2, r6
 801b2e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b2ec:	f7e4 ffbe 	bl	800026c <__aeabi_dsub>
 801b2f0:	4622      	mov	r2, r4
 801b2f2:	462b      	mov	r3, r5
 801b2f4:	f7e5 f972 	bl	80005dc <__aeabi_dmul>
 801b2f8:	4680      	mov	r8, r0
 801b2fa:	4689      	mov	r9, r1
 801b2fc:	4650      	mov	r0, sl
 801b2fe:	4659      	mov	r1, fp
 801b300:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b304:	f7e5 f96a 	bl	80005dc <__aeabi_dmul>
 801b308:	4602      	mov	r2, r0
 801b30a:	460b      	mov	r3, r1
 801b30c:	4640      	mov	r0, r8
 801b30e:	4649      	mov	r1, r9
 801b310:	f7e4 ffae 	bl	8000270 <__adddf3>
 801b314:	4680      	mov	r8, r0
 801b316:	4689      	mov	r9, r1
 801b318:	4632      	mov	r2, r6
 801b31a:	463b      	mov	r3, r7
 801b31c:	4620      	mov	r0, r4
 801b31e:	4629      	mov	r1, r5
 801b320:	f7e5 f95c 	bl	80005dc <__aeabi_dmul>
 801b324:	460b      	mov	r3, r1
 801b326:	4604      	mov	r4, r0
 801b328:	460d      	mov	r5, r1
 801b32a:	4602      	mov	r2, r0
 801b32c:	4649      	mov	r1, r9
 801b32e:	4640      	mov	r0, r8
 801b330:	f7e4 ff9e 	bl	8000270 <__adddf3>
 801b334:	4b19      	ldr	r3, [pc, #100]	; (801b39c <__ieee754_pow+0x3fc>)
 801b336:	4606      	mov	r6, r0
 801b338:	460f      	mov	r7, r1
 801b33a:	4299      	cmp	r1, r3
 801b33c:	468b      	mov	fp, r1
 801b33e:	ec45 4b19 	vmov	d9, r4, r5
 801b342:	f340 82f1 	ble.w	801b928 <__ieee754_pow+0x988>
 801b346:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801b34a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801b34e:	4303      	orrs	r3, r0
 801b350:	f000 81e4 	beq.w	801b71c <__ieee754_pow+0x77c>
 801b354:	2200      	movs	r2, #0
 801b356:	2300      	movs	r3, #0
 801b358:	ec51 0b18 	vmov	r0, r1, d8
 801b35c:	f7e5 fbb0 	bl	8000ac0 <__aeabi_dcmplt>
 801b360:	3800      	subs	r0, #0
 801b362:	bf18      	it	ne
 801b364:	2001      	movne	r0, #1
 801b366:	e72b      	b.n	801b1c0 <__ieee754_pow+0x220>
 801b368:	60000000 	.word	0x60000000
 801b36c:	3ff71547 	.word	0x3ff71547
 801b370:	f85ddf44 	.word	0xf85ddf44
 801b374:	3e54ae0b 	.word	0x3e54ae0b
 801b378:	55555555 	.word	0x55555555
 801b37c:	3fd55555 	.word	0x3fd55555
 801b380:	652b82fe 	.word	0x652b82fe
 801b384:	3ff71547 	.word	0x3ff71547
 801b388:	00000000 	.word	0x00000000
 801b38c:	bff00000 	.word	0xbff00000
 801b390:	3ff00000 	.word	0x3ff00000
 801b394:	3fd00000 	.word	0x3fd00000
 801b398:	3fe00000 	.word	0x3fe00000
 801b39c:	408fffff 	.word	0x408fffff
 801b3a0:	4bd5      	ldr	r3, [pc, #852]	; (801b6f8 <__ieee754_pow+0x758>)
 801b3a2:	2200      	movs	r2, #0
 801b3a4:	402b      	ands	r3, r5
 801b3a6:	b92b      	cbnz	r3, 801b3b4 <__ieee754_pow+0x414>
 801b3a8:	4bd4      	ldr	r3, [pc, #848]	; (801b6fc <__ieee754_pow+0x75c>)
 801b3aa:	f7e5 f917 	bl	80005dc <__aeabi_dmul>
 801b3ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801b3b2:	460c      	mov	r4, r1
 801b3b4:	1523      	asrs	r3, r4, #20
 801b3b6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801b3ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b3be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801b3c2:	4413      	add	r3, r2
 801b3c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801b3c8:	9305      	str	r3, [sp, #20]
 801b3ca:	4bcd      	ldr	r3, [pc, #820]	; (801b700 <__ieee754_pow+0x760>)
 801b3cc:	429c      	cmp	r4, r3
 801b3ce:	dd08      	ble.n	801b3e2 <__ieee754_pow+0x442>
 801b3d0:	4bcc      	ldr	r3, [pc, #816]	; (801b704 <__ieee754_pow+0x764>)
 801b3d2:	429c      	cmp	r4, r3
 801b3d4:	f340 8162 	ble.w	801b69c <__ieee754_pow+0x6fc>
 801b3d8:	9b05      	ldr	r3, [sp, #20]
 801b3da:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801b3de:	3301      	adds	r3, #1
 801b3e0:	9305      	str	r3, [sp, #20]
 801b3e2:	2400      	movs	r4, #0
 801b3e4:	00e3      	lsls	r3, r4, #3
 801b3e6:	4682      	mov	sl, r0
 801b3e8:	4629      	mov	r1, r5
 801b3ea:	46ab      	mov	fp, r5
 801b3ec:	9307      	str	r3, [sp, #28]
 801b3ee:	4bc6      	ldr	r3, [pc, #792]	; (801b708 <__ieee754_pow+0x768>)
 801b3f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b3f4:	ed93 7b00 	vldr	d7, [r3]
 801b3f8:	eeb0 9a47 	vmov.f32	s18, s14
 801b3fc:	eef0 9a67 	vmov.f32	s19, s15
 801b400:	ec53 2b17 	vmov	r2, r3, d7
 801b404:	f7e4 ff32 	bl	800026c <__aeabi_dsub>
 801b408:	4652      	mov	r2, sl
 801b40a:	4606      	mov	r6, r0
 801b40c:	460f      	mov	r7, r1
 801b40e:	462b      	mov	r3, r5
 801b410:	106d      	asrs	r5, r5, #1
 801b412:	ec51 0b19 	vmov	r0, r1, d9
 801b416:	f7e4 ff2b 	bl	8000270 <__adddf3>
 801b41a:	4602      	mov	r2, r0
 801b41c:	460b      	mov	r3, r1
 801b41e:	2000      	movs	r0, #0
 801b420:	49ba      	ldr	r1, [pc, #744]	; (801b70c <__ieee754_pow+0x76c>)
 801b422:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801b426:	f7e5 fa03 	bl	8000830 <__aeabi_ddiv>
 801b42a:	4602      	mov	r2, r0
 801b42c:	460b      	mov	r3, r1
 801b42e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801b432:	ec41 0b1a 	vmov	d10, r0, r1
 801b436:	4630      	mov	r0, r6
 801b438:	4639      	mov	r1, r7
 801b43a:	f7e5 f8cf 	bl	80005dc <__aeabi_dmul>
 801b43e:	2300      	movs	r3, #0
 801b440:	2200      	movs	r2, #0
 801b442:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b446:	9302      	str	r3, [sp, #8]
 801b448:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801b44c:	4614      	mov	r4, r2
 801b44e:	461d      	mov	r5, r3
 801b450:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801b454:	ec41 0b18 	vmov	d8, r0, r1
 801b458:	4640      	mov	r0, r8
 801b45a:	4649      	mov	r1, r9
 801b45c:	f7e5 f8be 	bl	80005dc <__aeabi_dmul>
 801b460:	4602      	mov	r2, r0
 801b462:	460b      	mov	r3, r1
 801b464:	4630      	mov	r0, r6
 801b466:	4639      	mov	r1, r7
 801b468:	f7e4 ff00 	bl	800026c <__aeabi_dsub>
 801b46c:	4606      	mov	r6, r0
 801b46e:	460f      	mov	r7, r1
 801b470:	4620      	mov	r0, r4
 801b472:	4629      	mov	r1, r5
 801b474:	ec53 2b19 	vmov	r2, r3, d9
 801b478:	f7e4 fef8 	bl	800026c <__aeabi_dsub>
 801b47c:	4602      	mov	r2, r0
 801b47e:	460b      	mov	r3, r1
 801b480:	4650      	mov	r0, sl
 801b482:	4659      	mov	r1, fp
 801b484:	f7e4 fef2 	bl	800026c <__aeabi_dsub>
 801b488:	4642      	mov	r2, r8
 801b48a:	464b      	mov	r3, r9
 801b48c:	f7e5 f8a6 	bl	80005dc <__aeabi_dmul>
 801b490:	4602      	mov	r2, r0
 801b492:	460b      	mov	r3, r1
 801b494:	4630      	mov	r0, r6
 801b496:	4639      	mov	r1, r7
 801b498:	f7e4 fee8 	bl	800026c <__aeabi_dsub>
 801b49c:	ec53 2b1a 	vmov	r2, r3, d10
 801b4a0:	f7e5 f89c 	bl	80005dc <__aeabi_dmul>
 801b4a4:	ec53 2b18 	vmov	r2, r3, d8
 801b4a8:	ec41 0b19 	vmov	d9, r0, r1
 801b4ac:	ec51 0b18 	vmov	r0, r1, d8
 801b4b0:	f7e5 f894 	bl	80005dc <__aeabi_dmul>
 801b4b4:	4604      	mov	r4, r0
 801b4b6:	460d      	mov	r5, r1
 801b4b8:	a37b      	add	r3, pc, #492	; (adr r3, 801b6a8 <__ieee754_pow+0x708>)
 801b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4be:	f7e5 f88d 	bl	80005dc <__aeabi_dmul>
 801b4c2:	a37b      	add	r3, pc, #492	; (adr r3, 801b6b0 <__ieee754_pow+0x710>)
 801b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4c8:	f7e4 fed2 	bl	8000270 <__adddf3>
 801b4cc:	4622      	mov	r2, r4
 801b4ce:	462b      	mov	r3, r5
 801b4d0:	f7e5 f884 	bl	80005dc <__aeabi_dmul>
 801b4d4:	a378      	add	r3, pc, #480	; (adr r3, 801b6b8 <__ieee754_pow+0x718>)
 801b4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4da:	f7e4 fec9 	bl	8000270 <__adddf3>
 801b4de:	4622      	mov	r2, r4
 801b4e0:	462b      	mov	r3, r5
 801b4e2:	f7e5 f87b 	bl	80005dc <__aeabi_dmul>
 801b4e6:	a376      	add	r3, pc, #472	; (adr r3, 801b6c0 <__ieee754_pow+0x720>)
 801b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ec:	f7e4 fec0 	bl	8000270 <__adddf3>
 801b4f0:	4622      	mov	r2, r4
 801b4f2:	462b      	mov	r3, r5
 801b4f4:	f7e5 f872 	bl	80005dc <__aeabi_dmul>
 801b4f8:	a373      	add	r3, pc, #460	; (adr r3, 801b6c8 <__ieee754_pow+0x728>)
 801b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4fe:	f7e4 feb7 	bl	8000270 <__adddf3>
 801b502:	4622      	mov	r2, r4
 801b504:	462b      	mov	r3, r5
 801b506:	f7e5 f869 	bl	80005dc <__aeabi_dmul>
 801b50a:	a371      	add	r3, pc, #452	; (adr r3, 801b6d0 <__ieee754_pow+0x730>)
 801b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b510:	f7e4 feae 	bl	8000270 <__adddf3>
 801b514:	4606      	mov	r6, r0
 801b516:	460f      	mov	r7, r1
 801b518:	4622      	mov	r2, r4
 801b51a:	462b      	mov	r3, r5
 801b51c:	4620      	mov	r0, r4
 801b51e:	4629      	mov	r1, r5
 801b520:	f7e5 f85c 	bl	80005dc <__aeabi_dmul>
 801b524:	4602      	mov	r2, r0
 801b526:	460b      	mov	r3, r1
 801b528:	4630      	mov	r0, r6
 801b52a:	4639      	mov	r1, r7
 801b52c:	f7e5 f856 	bl	80005dc <__aeabi_dmul>
 801b530:	4642      	mov	r2, r8
 801b532:	4604      	mov	r4, r0
 801b534:	460d      	mov	r5, r1
 801b536:	464b      	mov	r3, r9
 801b538:	ec51 0b18 	vmov	r0, r1, d8
 801b53c:	f7e4 fe98 	bl	8000270 <__adddf3>
 801b540:	ec53 2b19 	vmov	r2, r3, d9
 801b544:	f7e5 f84a 	bl	80005dc <__aeabi_dmul>
 801b548:	4622      	mov	r2, r4
 801b54a:	462b      	mov	r3, r5
 801b54c:	f7e4 fe90 	bl	8000270 <__adddf3>
 801b550:	4642      	mov	r2, r8
 801b552:	4682      	mov	sl, r0
 801b554:	468b      	mov	fp, r1
 801b556:	464b      	mov	r3, r9
 801b558:	4640      	mov	r0, r8
 801b55a:	4649      	mov	r1, r9
 801b55c:	f7e5 f83e 	bl	80005dc <__aeabi_dmul>
 801b560:	2200      	movs	r2, #0
 801b562:	4b6b      	ldr	r3, [pc, #428]	; (801b710 <__ieee754_pow+0x770>)
 801b564:	4606      	mov	r6, r0
 801b566:	460f      	mov	r7, r1
 801b568:	f7e4 fe82 	bl	8000270 <__adddf3>
 801b56c:	4652      	mov	r2, sl
 801b56e:	465b      	mov	r3, fp
 801b570:	f7e4 fe7e 	bl	8000270 <__adddf3>
 801b574:	2000      	movs	r0, #0
 801b576:	460d      	mov	r5, r1
 801b578:	460b      	mov	r3, r1
 801b57a:	4604      	mov	r4, r0
 801b57c:	4602      	mov	r2, r0
 801b57e:	4649      	mov	r1, r9
 801b580:	4640      	mov	r0, r8
 801b582:	f7e5 f82b 	bl	80005dc <__aeabi_dmul>
 801b586:	2200      	movs	r2, #0
 801b588:	4680      	mov	r8, r0
 801b58a:	4689      	mov	r9, r1
 801b58c:	4b60      	ldr	r3, [pc, #384]	; (801b710 <__ieee754_pow+0x770>)
 801b58e:	4620      	mov	r0, r4
 801b590:	4629      	mov	r1, r5
 801b592:	f7e4 fe6b 	bl	800026c <__aeabi_dsub>
 801b596:	4632      	mov	r2, r6
 801b598:	463b      	mov	r3, r7
 801b59a:	f7e4 fe67 	bl	800026c <__aeabi_dsub>
 801b59e:	4602      	mov	r2, r0
 801b5a0:	460b      	mov	r3, r1
 801b5a2:	4650      	mov	r0, sl
 801b5a4:	4659      	mov	r1, fp
 801b5a6:	f7e4 fe61 	bl	800026c <__aeabi_dsub>
 801b5aa:	ec53 2b18 	vmov	r2, r3, d8
 801b5ae:	f7e5 f815 	bl	80005dc <__aeabi_dmul>
 801b5b2:	4606      	mov	r6, r0
 801b5b4:	460f      	mov	r7, r1
 801b5b6:	4622      	mov	r2, r4
 801b5b8:	462b      	mov	r3, r5
 801b5ba:	ec51 0b19 	vmov	r0, r1, d9
 801b5be:	f7e5 f80d 	bl	80005dc <__aeabi_dmul>
 801b5c2:	4602      	mov	r2, r0
 801b5c4:	460b      	mov	r3, r1
 801b5c6:	4630      	mov	r0, r6
 801b5c8:	4639      	mov	r1, r7
 801b5ca:	f7e4 fe51 	bl	8000270 <__adddf3>
 801b5ce:	4606      	mov	r6, r0
 801b5d0:	460f      	mov	r7, r1
 801b5d2:	4602      	mov	r2, r0
 801b5d4:	460b      	mov	r3, r1
 801b5d6:	4640      	mov	r0, r8
 801b5d8:	4649      	mov	r1, r9
 801b5da:	f7e4 fe49 	bl	8000270 <__adddf3>
 801b5de:	2000      	movs	r0, #0
 801b5e0:	460d      	mov	r5, r1
 801b5e2:	4604      	mov	r4, r0
 801b5e4:	a33c      	add	r3, pc, #240	; (adr r3, 801b6d8 <__ieee754_pow+0x738>)
 801b5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5ea:	f7e4 fff7 	bl	80005dc <__aeabi_dmul>
 801b5ee:	4642      	mov	r2, r8
 801b5f0:	464b      	mov	r3, r9
 801b5f2:	ec41 0b18 	vmov	d8, r0, r1
 801b5f6:	4620      	mov	r0, r4
 801b5f8:	4629      	mov	r1, r5
 801b5fa:	f7e4 fe37 	bl	800026c <__aeabi_dsub>
 801b5fe:	4602      	mov	r2, r0
 801b600:	460b      	mov	r3, r1
 801b602:	4630      	mov	r0, r6
 801b604:	4639      	mov	r1, r7
 801b606:	f7e4 fe31 	bl	800026c <__aeabi_dsub>
 801b60a:	a335      	add	r3, pc, #212	; (adr r3, 801b6e0 <__ieee754_pow+0x740>)
 801b60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b610:	f7e4 ffe4 	bl	80005dc <__aeabi_dmul>
 801b614:	4606      	mov	r6, r0
 801b616:	460f      	mov	r7, r1
 801b618:	4620      	mov	r0, r4
 801b61a:	4629      	mov	r1, r5
 801b61c:	a332      	add	r3, pc, #200	; (adr r3, 801b6e8 <__ieee754_pow+0x748>)
 801b61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b622:	f7e4 ffdb 	bl	80005dc <__aeabi_dmul>
 801b626:	4602      	mov	r2, r0
 801b628:	460b      	mov	r3, r1
 801b62a:	4630      	mov	r0, r6
 801b62c:	4639      	mov	r1, r7
 801b62e:	f7e4 fe1f 	bl	8000270 <__adddf3>
 801b632:	9a07      	ldr	r2, [sp, #28]
 801b634:	4b37      	ldr	r3, [pc, #220]	; (801b714 <__ieee754_pow+0x774>)
 801b636:	4413      	add	r3, r2
 801b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b63c:	f7e4 fe18 	bl	8000270 <__adddf3>
 801b640:	4682      	mov	sl, r0
 801b642:	9805      	ldr	r0, [sp, #20]
 801b644:	468b      	mov	fp, r1
 801b646:	f7e4 ff5f 	bl	8000508 <__aeabi_i2d>
 801b64a:	9a07      	ldr	r2, [sp, #28]
 801b64c:	4b32      	ldr	r3, [pc, #200]	; (801b718 <__ieee754_pow+0x778>)
 801b64e:	4606      	mov	r6, r0
 801b650:	460f      	mov	r7, r1
 801b652:	4413      	add	r3, r2
 801b654:	4652      	mov	r2, sl
 801b656:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b65a:	ec51 0b18 	vmov	r0, r1, d8
 801b65e:	465b      	mov	r3, fp
 801b660:	f7e4 fe06 	bl	8000270 <__adddf3>
 801b664:	4642      	mov	r2, r8
 801b666:	464b      	mov	r3, r9
 801b668:	f7e4 fe02 	bl	8000270 <__adddf3>
 801b66c:	4632      	mov	r2, r6
 801b66e:	463b      	mov	r3, r7
 801b670:	f7e4 fdfe 	bl	8000270 <__adddf3>
 801b674:	2000      	movs	r0, #0
 801b676:	4632      	mov	r2, r6
 801b678:	463b      	mov	r3, r7
 801b67a:	4604      	mov	r4, r0
 801b67c:	460d      	mov	r5, r1
 801b67e:	f7e4 fdf5 	bl	800026c <__aeabi_dsub>
 801b682:	4642      	mov	r2, r8
 801b684:	464b      	mov	r3, r9
 801b686:	f7e4 fdf1 	bl	800026c <__aeabi_dsub>
 801b68a:	ec53 2b18 	vmov	r2, r3, d8
 801b68e:	f7e4 fded 	bl	800026c <__aeabi_dsub>
 801b692:	4602      	mov	r2, r0
 801b694:	460b      	mov	r3, r1
 801b696:	4650      	mov	r0, sl
 801b698:	4659      	mov	r1, fp
 801b69a:	e610      	b.n	801b2be <__ieee754_pow+0x31e>
 801b69c:	2401      	movs	r4, #1
 801b69e:	e6a1      	b.n	801b3e4 <__ieee754_pow+0x444>
 801b6a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801b6f0 <__ieee754_pow+0x750>
 801b6a4:	e617      	b.n	801b2d6 <__ieee754_pow+0x336>
 801b6a6:	bf00      	nop
 801b6a8:	4a454eef 	.word	0x4a454eef
 801b6ac:	3fca7e28 	.word	0x3fca7e28
 801b6b0:	93c9db65 	.word	0x93c9db65
 801b6b4:	3fcd864a 	.word	0x3fcd864a
 801b6b8:	a91d4101 	.word	0xa91d4101
 801b6bc:	3fd17460 	.word	0x3fd17460
 801b6c0:	518f264d 	.word	0x518f264d
 801b6c4:	3fd55555 	.word	0x3fd55555
 801b6c8:	db6fabff 	.word	0xdb6fabff
 801b6cc:	3fdb6db6 	.word	0x3fdb6db6
 801b6d0:	33333303 	.word	0x33333303
 801b6d4:	3fe33333 	.word	0x3fe33333
 801b6d8:	e0000000 	.word	0xe0000000
 801b6dc:	3feec709 	.word	0x3feec709
 801b6e0:	dc3a03fd 	.word	0xdc3a03fd
 801b6e4:	3feec709 	.word	0x3feec709
 801b6e8:	145b01f5 	.word	0x145b01f5
 801b6ec:	be3e2fe0 	.word	0xbe3e2fe0
 801b6f0:	00000000 	.word	0x00000000
 801b6f4:	3ff00000 	.word	0x3ff00000
 801b6f8:	7ff00000 	.word	0x7ff00000
 801b6fc:	43400000 	.word	0x43400000
 801b700:	0003988e 	.word	0x0003988e
 801b704:	000bb679 	.word	0x000bb679
 801b708:	0801e7b8 	.word	0x0801e7b8
 801b70c:	3ff00000 	.word	0x3ff00000
 801b710:	40080000 	.word	0x40080000
 801b714:	0801e7d8 	.word	0x0801e7d8
 801b718:	0801e7c8 	.word	0x0801e7c8
 801b71c:	a3b5      	add	r3, pc, #724	; (adr r3, 801b9f4 <__ieee754_pow+0xa54>)
 801b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b722:	4640      	mov	r0, r8
 801b724:	4649      	mov	r1, r9
 801b726:	f7e4 fda3 	bl	8000270 <__adddf3>
 801b72a:	4622      	mov	r2, r4
 801b72c:	462b      	mov	r3, r5
 801b72e:	ec41 0b1a 	vmov	d10, r0, r1
 801b732:	4630      	mov	r0, r6
 801b734:	4639      	mov	r1, r7
 801b736:	f7e4 fd99 	bl	800026c <__aeabi_dsub>
 801b73a:	4602      	mov	r2, r0
 801b73c:	460b      	mov	r3, r1
 801b73e:	ec51 0b1a 	vmov	r0, r1, d10
 801b742:	f7e5 f9db 	bl	8000afc <__aeabi_dcmpgt>
 801b746:	2800      	cmp	r0, #0
 801b748:	f47f ae04 	bne.w	801b354 <__ieee754_pow+0x3b4>
 801b74c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b750:	4aa3      	ldr	r2, [pc, #652]	; (801b9e0 <__ieee754_pow+0xa40>)
 801b752:	4293      	cmp	r3, r2
 801b754:	f340 8108 	ble.w	801b968 <__ieee754_pow+0x9c8>
 801b758:	151b      	asrs	r3, r3, #20
 801b75a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801b75e:	48a1      	ldr	r0, [pc, #644]	; (801b9e4 <__ieee754_pow+0xa44>)
 801b760:	f1bb 0f00 	cmp.w	fp, #0
 801b764:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801b768:	f04f 0200 	mov.w	r2, #0
 801b76c:	fa4a fa03 	asr.w	sl, sl, r3
 801b770:	44da      	add	sl, fp
 801b772:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801b776:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801b77a:	fa40 f001 	asr.w	r0, r0, r1
 801b77e:	f1c1 0114 	rsb	r1, r1, #20
 801b782:	ea00 030a 	and.w	r3, r0, sl
 801b786:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801b78a:	4620      	mov	r0, r4
 801b78c:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801b790:	fa4a fa01 	asr.w	sl, sl, r1
 801b794:	4629      	mov	r1, r5
 801b796:	bfb8      	it	lt
 801b798:	f1ca 0a00 	rsblt	sl, sl, #0
 801b79c:	f7e4 fd66 	bl	800026c <__aeabi_dsub>
 801b7a0:	ec41 0b19 	vmov	d9, r0, r1
 801b7a4:	4642      	mov	r2, r8
 801b7a6:	464b      	mov	r3, r9
 801b7a8:	ec51 0b19 	vmov	r0, r1, d9
 801b7ac:	f7e4 fd60 	bl	8000270 <__adddf3>
 801b7b0:	2000      	movs	r0, #0
 801b7b2:	460d      	mov	r5, r1
 801b7b4:	4604      	mov	r4, r0
 801b7b6:	a37a      	add	r3, pc, #488	; (adr r3, 801b9a0 <__ieee754_pow+0xa00>)
 801b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7bc:	f7e4 ff0e 	bl	80005dc <__aeabi_dmul>
 801b7c0:	4606      	mov	r6, r0
 801b7c2:	460f      	mov	r7, r1
 801b7c4:	4620      	mov	r0, r4
 801b7c6:	4629      	mov	r1, r5
 801b7c8:	ec53 2b19 	vmov	r2, r3, d9
 801b7cc:	f7e4 fd4e 	bl	800026c <__aeabi_dsub>
 801b7d0:	4602      	mov	r2, r0
 801b7d2:	460b      	mov	r3, r1
 801b7d4:	4640      	mov	r0, r8
 801b7d6:	4649      	mov	r1, r9
 801b7d8:	f7e4 fd48 	bl	800026c <__aeabi_dsub>
 801b7dc:	a372      	add	r3, pc, #456	; (adr r3, 801b9a8 <__ieee754_pow+0xa08>)
 801b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7e2:	f7e4 fefb 	bl	80005dc <__aeabi_dmul>
 801b7e6:	4680      	mov	r8, r0
 801b7e8:	4689      	mov	r9, r1
 801b7ea:	4620      	mov	r0, r4
 801b7ec:	4629      	mov	r1, r5
 801b7ee:	a370      	add	r3, pc, #448	; (adr r3, 801b9b0 <__ieee754_pow+0xa10>)
 801b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7f4:	f7e4 fef2 	bl	80005dc <__aeabi_dmul>
 801b7f8:	4602      	mov	r2, r0
 801b7fa:	460b      	mov	r3, r1
 801b7fc:	4640      	mov	r0, r8
 801b7fe:	4649      	mov	r1, r9
 801b800:	f7e4 fd36 	bl	8000270 <__adddf3>
 801b804:	4604      	mov	r4, r0
 801b806:	460d      	mov	r5, r1
 801b808:	4602      	mov	r2, r0
 801b80a:	460b      	mov	r3, r1
 801b80c:	4630      	mov	r0, r6
 801b80e:	4639      	mov	r1, r7
 801b810:	f7e4 fd2e 	bl	8000270 <__adddf3>
 801b814:	4632      	mov	r2, r6
 801b816:	4680      	mov	r8, r0
 801b818:	4689      	mov	r9, r1
 801b81a:	463b      	mov	r3, r7
 801b81c:	f7e4 fd26 	bl	800026c <__aeabi_dsub>
 801b820:	4602      	mov	r2, r0
 801b822:	460b      	mov	r3, r1
 801b824:	4620      	mov	r0, r4
 801b826:	4629      	mov	r1, r5
 801b828:	f7e4 fd20 	bl	800026c <__aeabi_dsub>
 801b82c:	4642      	mov	r2, r8
 801b82e:	4606      	mov	r6, r0
 801b830:	460f      	mov	r7, r1
 801b832:	464b      	mov	r3, r9
 801b834:	4640      	mov	r0, r8
 801b836:	4649      	mov	r1, r9
 801b838:	f7e4 fed0 	bl	80005dc <__aeabi_dmul>
 801b83c:	4604      	mov	r4, r0
 801b83e:	460d      	mov	r5, r1
 801b840:	a35d      	add	r3, pc, #372	; (adr r3, 801b9b8 <__ieee754_pow+0xa18>)
 801b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b846:	f7e4 fec9 	bl	80005dc <__aeabi_dmul>
 801b84a:	a35d      	add	r3, pc, #372	; (adr r3, 801b9c0 <__ieee754_pow+0xa20>)
 801b84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b850:	f7e4 fd0c 	bl	800026c <__aeabi_dsub>
 801b854:	4622      	mov	r2, r4
 801b856:	462b      	mov	r3, r5
 801b858:	f7e4 fec0 	bl	80005dc <__aeabi_dmul>
 801b85c:	a35a      	add	r3, pc, #360	; (adr r3, 801b9c8 <__ieee754_pow+0xa28>)
 801b85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b862:	f7e4 fd05 	bl	8000270 <__adddf3>
 801b866:	4622      	mov	r2, r4
 801b868:	462b      	mov	r3, r5
 801b86a:	f7e4 feb7 	bl	80005dc <__aeabi_dmul>
 801b86e:	a358      	add	r3, pc, #352	; (adr r3, 801b9d0 <__ieee754_pow+0xa30>)
 801b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b874:	f7e4 fcfa 	bl	800026c <__aeabi_dsub>
 801b878:	4622      	mov	r2, r4
 801b87a:	462b      	mov	r3, r5
 801b87c:	f7e4 feae 	bl	80005dc <__aeabi_dmul>
 801b880:	a355      	add	r3, pc, #340	; (adr r3, 801b9d8 <__ieee754_pow+0xa38>)
 801b882:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b886:	f7e4 fcf3 	bl	8000270 <__adddf3>
 801b88a:	4622      	mov	r2, r4
 801b88c:	462b      	mov	r3, r5
 801b88e:	f7e4 fea5 	bl	80005dc <__aeabi_dmul>
 801b892:	4602      	mov	r2, r0
 801b894:	460b      	mov	r3, r1
 801b896:	4640      	mov	r0, r8
 801b898:	4649      	mov	r1, r9
 801b89a:	f7e4 fce7 	bl	800026c <__aeabi_dsub>
 801b89e:	4604      	mov	r4, r0
 801b8a0:	460d      	mov	r5, r1
 801b8a2:	4602      	mov	r2, r0
 801b8a4:	460b      	mov	r3, r1
 801b8a6:	4640      	mov	r0, r8
 801b8a8:	4649      	mov	r1, r9
 801b8aa:	f7e4 fe97 	bl	80005dc <__aeabi_dmul>
 801b8ae:	2200      	movs	r2, #0
 801b8b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b8b4:	ec41 0b19 	vmov	d9, r0, r1
 801b8b8:	4620      	mov	r0, r4
 801b8ba:	4629      	mov	r1, r5
 801b8bc:	f7e4 fcd6 	bl	800026c <__aeabi_dsub>
 801b8c0:	4602      	mov	r2, r0
 801b8c2:	460b      	mov	r3, r1
 801b8c4:	ec51 0b19 	vmov	r0, r1, d9
 801b8c8:	f7e4 ffb2 	bl	8000830 <__aeabi_ddiv>
 801b8cc:	4632      	mov	r2, r6
 801b8ce:	4604      	mov	r4, r0
 801b8d0:	460d      	mov	r5, r1
 801b8d2:	463b      	mov	r3, r7
 801b8d4:	4640      	mov	r0, r8
 801b8d6:	4649      	mov	r1, r9
 801b8d8:	f7e4 fe80 	bl	80005dc <__aeabi_dmul>
 801b8dc:	4632      	mov	r2, r6
 801b8de:	463b      	mov	r3, r7
 801b8e0:	f7e4 fcc6 	bl	8000270 <__adddf3>
 801b8e4:	4602      	mov	r2, r0
 801b8e6:	460b      	mov	r3, r1
 801b8e8:	4620      	mov	r0, r4
 801b8ea:	4629      	mov	r1, r5
 801b8ec:	f7e4 fcbe 	bl	800026c <__aeabi_dsub>
 801b8f0:	4642      	mov	r2, r8
 801b8f2:	464b      	mov	r3, r9
 801b8f4:	f7e4 fcba 	bl	800026c <__aeabi_dsub>
 801b8f8:	460b      	mov	r3, r1
 801b8fa:	4602      	mov	r2, r0
 801b8fc:	493a      	ldr	r1, [pc, #232]	; (801b9e8 <__ieee754_pow+0xa48>)
 801b8fe:	2000      	movs	r0, #0
 801b900:	f7e4 fcb4 	bl	800026c <__aeabi_dsub>
 801b904:	ec41 0b10 	vmov	d0, r0, r1
 801b908:	ee10 3a90 	vmov	r3, s1
 801b90c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801b910:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b914:	da2b      	bge.n	801b96e <__ieee754_pow+0x9ce>
 801b916:	4650      	mov	r0, sl
 801b918:	f000 fd66 	bl	801c3e8 <scalbn>
 801b91c:	ec51 0b10 	vmov	r0, r1, d0
 801b920:	ec53 2b18 	vmov	r2, r3, d8
 801b924:	f7ff bbed 	b.w	801b102 <__ieee754_pow+0x162>
 801b928:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801b92c:	4b2f      	ldr	r3, [pc, #188]	; (801b9ec <__ieee754_pow+0xa4c>)
 801b92e:	429e      	cmp	r6, r3
 801b930:	f77f af0c 	ble.w	801b74c <__ieee754_pow+0x7ac>
 801b934:	4b2e      	ldr	r3, [pc, #184]	; (801b9f0 <__ieee754_pow+0xa50>)
 801b936:	440b      	add	r3, r1
 801b938:	4303      	orrs	r3, r0
 801b93a:	d009      	beq.n	801b950 <__ieee754_pow+0x9b0>
 801b93c:	2200      	movs	r2, #0
 801b93e:	2300      	movs	r3, #0
 801b940:	ec51 0b18 	vmov	r0, r1, d8
 801b944:	f7e5 f8bc 	bl	8000ac0 <__aeabi_dcmplt>
 801b948:	3800      	subs	r0, #0
 801b94a:	bf18      	it	ne
 801b94c:	2001      	movne	r0, #1
 801b94e:	e447      	b.n	801b1e0 <__ieee754_pow+0x240>
 801b950:	4622      	mov	r2, r4
 801b952:	462b      	mov	r3, r5
 801b954:	f7e4 fc8a 	bl	800026c <__aeabi_dsub>
 801b958:	4642      	mov	r2, r8
 801b95a:	464b      	mov	r3, r9
 801b95c:	f7e5 f8c4 	bl	8000ae8 <__aeabi_dcmpge>
 801b960:	2800      	cmp	r0, #0
 801b962:	f43f aef3 	beq.w	801b74c <__ieee754_pow+0x7ac>
 801b966:	e7e9      	b.n	801b93c <__ieee754_pow+0x99c>
 801b968:	f04f 0a00 	mov.w	sl, #0
 801b96c:	e71a      	b.n	801b7a4 <__ieee754_pow+0x804>
 801b96e:	ec51 0b10 	vmov	r0, r1, d0
 801b972:	4619      	mov	r1, r3
 801b974:	e7d4      	b.n	801b920 <__ieee754_pow+0x980>
 801b976:	2000      	movs	r0, #0
 801b978:	491b      	ldr	r1, [pc, #108]	; (801b9e8 <__ieee754_pow+0xa48>)
 801b97a:	f7ff bb30 	b.w	801afde <__ieee754_pow+0x3e>
 801b97e:	2000      	movs	r0, #0
 801b980:	2100      	movs	r1, #0
 801b982:	f7ff bb2c 	b.w	801afde <__ieee754_pow+0x3e>
 801b986:	4630      	mov	r0, r6
 801b988:	4639      	mov	r1, r7
 801b98a:	f7ff bb28 	b.w	801afde <__ieee754_pow+0x3e>
 801b98e:	9204      	str	r2, [sp, #16]
 801b990:	f7ff bb7a 	b.w	801b088 <__ieee754_pow+0xe8>
 801b994:	2300      	movs	r3, #0
 801b996:	f7ff bb64 	b.w	801b062 <__ieee754_pow+0xc2>
 801b99a:	bf00      	nop
 801b99c:	f3af 8000 	nop.w
 801b9a0:	00000000 	.word	0x00000000
 801b9a4:	3fe62e43 	.word	0x3fe62e43
 801b9a8:	fefa39ef 	.word	0xfefa39ef
 801b9ac:	3fe62e42 	.word	0x3fe62e42
 801b9b0:	0ca86c39 	.word	0x0ca86c39
 801b9b4:	be205c61 	.word	0xbe205c61
 801b9b8:	72bea4d0 	.word	0x72bea4d0
 801b9bc:	3e663769 	.word	0x3e663769
 801b9c0:	c5d26bf1 	.word	0xc5d26bf1
 801b9c4:	3ebbbd41 	.word	0x3ebbbd41
 801b9c8:	af25de2c 	.word	0xaf25de2c
 801b9cc:	3f11566a 	.word	0x3f11566a
 801b9d0:	16bebd93 	.word	0x16bebd93
 801b9d4:	3f66c16c 	.word	0x3f66c16c
 801b9d8:	5555553e 	.word	0x5555553e
 801b9dc:	3fc55555 	.word	0x3fc55555
 801b9e0:	3fe00000 	.word	0x3fe00000
 801b9e4:	fff00000 	.word	0xfff00000
 801b9e8:	3ff00000 	.word	0x3ff00000
 801b9ec:	4090cbff 	.word	0x4090cbff
 801b9f0:	3f6f3400 	.word	0x3f6f3400
 801b9f4:	652b82fe 	.word	0x652b82fe
 801b9f8:	3c971547 	.word	0x3c971547
 801b9fc:	00000000 	.word	0x00000000

0801ba00 <atan>:
 801ba00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba04:	ec55 4b10 	vmov	r4, r5, d0
 801ba08:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ba0c:	4bc2      	ldr	r3, [pc, #776]	; (801bd18 <atan+0x318>)
 801ba0e:	46ab      	mov	fp, r5
 801ba10:	429e      	cmp	r6, r3
 801ba12:	dd18      	ble.n	801ba46 <atan+0x46>
 801ba14:	4bc1      	ldr	r3, [pc, #772]	; (801bd1c <atan+0x31c>)
 801ba16:	429e      	cmp	r6, r3
 801ba18:	dc01      	bgt.n	801ba1e <atan+0x1e>
 801ba1a:	d109      	bne.n	801ba30 <atan+0x30>
 801ba1c:	b144      	cbz	r4, 801ba30 <atan+0x30>
 801ba1e:	4622      	mov	r2, r4
 801ba20:	462b      	mov	r3, r5
 801ba22:	4620      	mov	r0, r4
 801ba24:	4629      	mov	r1, r5
 801ba26:	f7e4 fc23 	bl	8000270 <__adddf3>
 801ba2a:	4604      	mov	r4, r0
 801ba2c:	460d      	mov	r5, r1
 801ba2e:	e006      	b.n	801ba3e <atan+0x3e>
 801ba30:	f1bb 0f00 	cmp.w	fp, #0
 801ba34:	f300 8131 	bgt.w	801bc9a <atan+0x29a>
 801ba38:	a59b      	add	r5, pc, #620	; (adr r5, 801bca8 <atan+0x2a8>)
 801ba3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ba3e:	ec45 4b10 	vmov	d0, r4, r5
 801ba42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba46:	4bb6      	ldr	r3, [pc, #728]	; (801bd20 <atan+0x320>)
 801ba48:	429e      	cmp	r6, r3
 801ba4a:	dc14      	bgt.n	801ba76 <atan+0x76>
 801ba4c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801ba50:	429e      	cmp	r6, r3
 801ba52:	dc0d      	bgt.n	801ba70 <atan+0x70>
 801ba54:	ee10 0a10 	vmov	r0, s0
 801ba58:	4629      	mov	r1, r5
 801ba5a:	a395      	add	r3, pc, #596	; (adr r3, 801bcb0 <atan+0x2b0>)
 801ba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba60:	f7e4 fc06 	bl	8000270 <__adddf3>
 801ba64:	2200      	movs	r2, #0
 801ba66:	4baf      	ldr	r3, [pc, #700]	; (801bd24 <atan+0x324>)
 801ba68:	f7e5 f848 	bl	8000afc <__aeabi_dcmpgt>
 801ba6c:	2800      	cmp	r0, #0
 801ba6e:	d1e6      	bne.n	801ba3e <atan+0x3e>
 801ba70:	f04f 3aff 	mov.w	sl, #4294967295
 801ba74:	e02b      	b.n	801bace <atan+0xce>
 801ba76:	f000 f963 	bl	801bd40 <fabs>
 801ba7a:	4bab      	ldr	r3, [pc, #684]	; (801bd28 <atan+0x328>)
 801ba7c:	429e      	cmp	r6, r3
 801ba7e:	ec55 4b10 	vmov	r4, r5, d0
 801ba82:	f300 80bf 	bgt.w	801bc04 <atan+0x204>
 801ba86:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801ba8a:	429e      	cmp	r6, r3
 801ba8c:	f300 80a0 	bgt.w	801bbd0 <atan+0x1d0>
 801ba90:	ee10 2a10 	vmov	r2, s0
 801ba94:	ee10 0a10 	vmov	r0, s0
 801ba98:	462b      	mov	r3, r5
 801ba9a:	4629      	mov	r1, r5
 801ba9c:	f7e4 fbe8 	bl	8000270 <__adddf3>
 801baa0:	2200      	movs	r2, #0
 801baa2:	4ba0      	ldr	r3, [pc, #640]	; (801bd24 <atan+0x324>)
 801baa4:	f04f 0a00 	mov.w	sl, #0
 801baa8:	f7e4 fbe0 	bl	800026c <__aeabi_dsub>
 801baac:	4606      	mov	r6, r0
 801baae:	460f      	mov	r7, r1
 801bab0:	2200      	movs	r2, #0
 801bab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bab6:	4620      	mov	r0, r4
 801bab8:	4629      	mov	r1, r5
 801baba:	f7e4 fbd9 	bl	8000270 <__adddf3>
 801babe:	4602      	mov	r2, r0
 801bac0:	460b      	mov	r3, r1
 801bac2:	4630      	mov	r0, r6
 801bac4:	4639      	mov	r1, r7
 801bac6:	f7e4 feb3 	bl	8000830 <__aeabi_ddiv>
 801baca:	4604      	mov	r4, r0
 801bacc:	460d      	mov	r5, r1
 801bace:	4622      	mov	r2, r4
 801bad0:	462b      	mov	r3, r5
 801bad2:	4620      	mov	r0, r4
 801bad4:	4629      	mov	r1, r5
 801bad6:	f7e4 fd81 	bl	80005dc <__aeabi_dmul>
 801bada:	4602      	mov	r2, r0
 801badc:	460b      	mov	r3, r1
 801bade:	4680      	mov	r8, r0
 801bae0:	4689      	mov	r9, r1
 801bae2:	f7e4 fd7b 	bl	80005dc <__aeabi_dmul>
 801bae6:	4606      	mov	r6, r0
 801bae8:	460f      	mov	r7, r1
 801baea:	a373      	add	r3, pc, #460	; (adr r3, 801bcb8 <atan+0x2b8>)
 801baec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baf0:	f7e4 fd74 	bl	80005dc <__aeabi_dmul>
 801baf4:	a372      	add	r3, pc, #456	; (adr r3, 801bcc0 <atan+0x2c0>)
 801baf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bafa:	f7e4 fbb9 	bl	8000270 <__adddf3>
 801bafe:	4632      	mov	r2, r6
 801bb00:	463b      	mov	r3, r7
 801bb02:	f7e4 fd6b 	bl	80005dc <__aeabi_dmul>
 801bb06:	a370      	add	r3, pc, #448	; (adr r3, 801bcc8 <atan+0x2c8>)
 801bb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb0c:	f7e4 fbb0 	bl	8000270 <__adddf3>
 801bb10:	4632      	mov	r2, r6
 801bb12:	463b      	mov	r3, r7
 801bb14:	f7e4 fd62 	bl	80005dc <__aeabi_dmul>
 801bb18:	a36d      	add	r3, pc, #436	; (adr r3, 801bcd0 <atan+0x2d0>)
 801bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb1e:	f7e4 fba7 	bl	8000270 <__adddf3>
 801bb22:	4632      	mov	r2, r6
 801bb24:	463b      	mov	r3, r7
 801bb26:	f7e4 fd59 	bl	80005dc <__aeabi_dmul>
 801bb2a:	a36b      	add	r3, pc, #428	; (adr r3, 801bcd8 <atan+0x2d8>)
 801bb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb30:	f7e4 fb9e 	bl	8000270 <__adddf3>
 801bb34:	4632      	mov	r2, r6
 801bb36:	463b      	mov	r3, r7
 801bb38:	f7e4 fd50 	bl	80005dc <__aeabi_dmul>
 801bb3c:	a368      	add	r3, pc, #416	; (adr r3, 801bce0 <atan+0x2e0>)
 801bb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb42:	f7e4 fb95 	bl	8000270 <__adddf3>
 801bb46:	4642      	mov	r2, r8
 801bb48:	464b      	mov	r3, r9
 801bb4a:	f7e4 fd47 	bl	80005dc <__aeabi_dmul>
 801bb4e:	4680      	mov	r8, r0
 801bb50:	4689      	mov	r9, r1
 801bb52:	4630      	mov	r0, r6
 801bb54:	4639      	mov	r1, r7
 801bb56:	a364      	add	r3, pc, #400	; (adr r3, 801bce8 <atan+0x2e8>)
 801bb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb5c:	f7e4 fd3e 	bl	80005dc <__aeabi_dmul>
 801bb60:	a363      	add	r3, pc, #396	; (adr r3, 801bcf0 <atan+0x2f0>)
 801bb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb66:	f7e4 fb81 	bl	800026c <__aeabi_dsub>
 801bb6a:	4632      	mov	r2, r6
 801bb6c:	463b      	mov	r3, r7
 801bb6e:	f7e4 fd35 	bl	80005dc <__aeabi_dmul>
 801bb72:	a361      	add	r3, pc, #388	; (adr r3, 801bcf8 <atan+0x2f8>)
 801bb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb78:	f7e4 fb78 	bl	800026c <__aeabi_dsub>
 801bb7c:	4632      	mov	r2, r6
 801bb7e:	463b      	mov	r3, r7
 801bb80:	f7e4 fd2c 	bl	80005dc <__aeabi_dmul>
 801bb84:	a35e      	add	r3, pc, #376	; (adr r3, 801bd00 <atan+0x300>)
 801bb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb8a:	f7e4 fb6f 	bl	800026c <__aeabi_dsub>
 801bb8e:	4632      	mov	r2, r6
 801bb90:	463b      	mov	r3, r7
 801bb92:	f7e4 fd23 	bl	80005dc <__aeabi_dmul>
 801bb96:	a35c      	add	r3, pc, #368	; (adr r3, 801bd08 <atan+0x308>)
 801bb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb9c:	f7e4 fb66 	bl	800026c <__aeabi_dsub>
 801bba0:	4632      	mov	r2, r6
 801bba2:	463b      	mov	r3, r7
 801bba4:	f7e4 fd1a 	bl	80005dc <__aeabi_dmul>
 801bba8:	4602      	mov	r2, r0
 801bbaa:	460b      	mov	r3, r1
 801bbac:	4640      	mov	r0, r8
 801bbae:	4649      	mov	r1, r9
 801bbb0:	f7e4 fb5e 	bl	8000270 <__adddf3>
 801bbb4:	4622      	mov	r2, r4
 801bbb6:	462b      	mov	r3, r5
 801bbb8:	f7e4 fd10 	bl	80005dc <__aeabi_dmul>
 801bbbc:	f1ba 3fff 	cmp.w	sl, #4294967295
 801bbc0:	4602      	mov	r2, r0
 801bbc2:	460b      	mov	r3, r1
 801bbc4:	d14b      	bne.n	801bc5e <atan+0x25e>
 801bbc6:	4620      	mov	r0, r4
 801bbc8:	4629      	mov	r1, r5
 801bbca:	f7e4 fb4f 	bl	800026c <__aeabi_dsub>
 801bbce:	e72c      	b.n	801ba2a <atan+0x2a>
 801bbd0:	ee10 0a10 	vmov	r0, s0
 801bbd4:	2200      	movs	r2, #0
 801bbd6:	4b53      	ldr	r3, [pc, #332]	; (801bd24 <atan+0x324>)
 801bbd8:	4629      	mov	r1, r5
 801bbda:	f7e4 fb47 	bl	800026c <__aeabi_dsub>
 801bbde:	4606      	mov	r6, r0
 801bbe0:	460f      	mov	r7, r1
 801bbe2:	2200      	movs	r2, #0
 801bbe4:	4b4f      	ldr	r3, [pc, #316]	; (801bd24 <atan+0x324>)
 801bbe6:	4620      	mov	r0, r4
 801bbe8:	4629      	mov	r1, r5
 801bbea:	f04f 0a01 	mov.w	sl, #1
 801bbee:	f7e4 fb3f 	bl	8000270 <__adddf3>
 801bbf2:	4602      	mov	r2, r0
 801bbf4:	460b      	mov	r3, r1
 801bbf6:	4630      	mov	r0, r6
 801bbf8:	4639      	mov	r1, r7
 801bbfa:	f7e4 fe19 	bl	8000830 <__aeabi_ddiv>
 801bbfe:	4604      	mov	r4, r0
 801bc00:	460d      	mov	r5, r1
 801bc02:	e764      	b.n	801bace <atan+0xce>
 801bc04:	4b49      	ldr	r3, [pc, #292]	; (801bd2c <atan+0x32c>)
 801bc06:	429e      	cmp	r6, r3
 801bc08:	da1d      	bge.n	801bc46 <atan+0x246>
 801bc0a:	ee10 0a10 	vmov	r0, s0
 801bc0e:	2200      	movs	r2, #0
 801bc10:	4b47      	ldr	r3, [pc, #284]	; (801bd30 <atan+0x330>)
 801bc12:	4629      	mov	r1, r5
 801bc14:	f7e4 fb2a 	bl	800026c <__aeabi_dsub>
 801bc18:	2200      	movs	r2, #0
 801bc1a:	4606      	mov	r6, r0
 801bc1c:	460f      	mov	r7, r1
 801bc1e:	4b44      	ldr	r3, [pc, #272]	; (801bd30 <atan+0x330>)
 801bc20:	4620      	mov	r0, r4
 801bc22:	4629      	mov	r1, r5
 801bc24:	f04f 0a02 	mov.w	sl, #2
 801bc28:	f7e4 fcd8 	bl	80005dc <__aeabi_dmul>
 801bc2c:	2200      	movs	r2, #0
 801bc2e:	4b3d      	ldr	r3, [pc, #244]	; (801bd24 <atan+0x324>)
 801bc30:	f7e4 fb1e 	bl	8000270 <__adddf3>
 801bc34:	4602      	mov	r2, r0
 801bc36:	460b      	mov	r3, r1
 801bc38:	4630      	mov	r0, r6
 801bc3a:	4639      	mov	r1, r7
 801bc3c:	f7e4 fdf8 	bl	8000830 <__aeabi_ddiv>
 801bc40:	4604      	mov	r4, r0
 801bc42:	460d      	mov	r5, r1
 801bc44:	e743      	b.n	801bace <atan+0xce>
 801bc46:	462b      	mov	r3, r5
 801bc48:	ee10 2a10 	vmov	r2, s0
 801bc4c:	2000      	movs	r0, #0
 801bc4e:	4939      	ldr	r1, [pc, #228]	; (801bd34 <atan+0x334>)
 801bc50:	f7e4 fdee 	bl	8000830 <__aeabi_ddiv>
 801bc54:	f04f 0a03 	mov.w	sl, #3
 801bc58:	4604      	mov	r4, r0
 801bc5a:	460d      	mov	r5, r1
 801bc5c:	e737      	b.n	801bace <atan+0xce>
 801bc5e:	4b36      	ldr	r3, [pc, #216]	; (801bd38 <atan+0x338>)
 801bc60:	4e36      	ldr	r6, [pc, #216]	; (801bd3c <atan+0x33c>)
 801bc62:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801bc66:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801bc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc6e:	f7e4 fafd 	bl	800026c <__aeabi_dsub>
 801bc72:	4622      	mov	r2, r4
 801bc74:	462b      	mov	r3, r5
 801bc76:	f7e4 faf9 	bl	800026c <__aeabi_dsub>
 801bc7a:	4602      	mov	r2, r0
 801bc7c:	460b      	mov	r3, r1
 801bc7e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801bc82:	f7e4 faf3 	bl	800026c <__aeabi_dsub>
 801bc86:	f1bb 0f00 	cmp.w	fp, #0
 801bc8a:	4604      	mov	r4, r0
 801bc8c:	460d      	mov	r5, r1
 801bc8e:	f6bf aed6 	bge.w	801ba3e <atan+0x3e>
 801bc92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bc96:	461d      	mov	r5, r3
 801bc98:	e6d1      	b.n	801ba3e <atan+0x3e>
 801bc9a:	a51d      	add	r5, pc, #116	; (adr r5, 801bd10 <atan+0x310>)
 801bc9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bca0:	e6cd      	b.n	801ba3e <atan+0x3e>
 801bca2:	bf00      	nop
 801bca4:	f3af 8000 	nop.w
 801bca8:	54442d18 	.word	0x54442d18
 801bcac:	bff921fb 	.word	0xbff921fb
 801bcb0:	8800759c 	.word	0x8800759c
 801bcb4:	7e37e43c 	.word	0x7e37e43c
 801bcb8:	e322da11 	.word	0xe322da11
 801bcbc:	3f90ad3a 	.word	0x3f90ad3a
 801bcc0:	24760deb 	.word	0x24760deb
 801bcc4:	3fa97b4b 	.word	0x3fa97b4b
 801bcc8:	a0d03d51 	.word	0xa0d03d51
 801bccc:	3fb10d66 	.word	0x3fb10d66
 801bcd0:	c54c206e 	.word	0xc54c206e
 801bcd4:	3fb745cd 	.word	0x3fb745cd
 801bcd8:	920083ff 	.word	0x920083ff
 801bcdc:	3fc24924 	.word	0x3fc24924
 801bce0:	5555550d 	.word	0x5555550d
 801bce4:	3fd55555 	.word	0x3fd55555
 801bce8:	2c6a6c2f 	.word	0x2c6a6c2f
 801bcec:	bfa2b444 	.word	0xbfa2b444
 801bcf0:	52defd9a 	.word	0x52defd9a
 801bcf4:	3fadde2d 	.word	0x3fadde2d
 801bcf8:	af749a6d 	.word	0xaf749a6d
 801bcfc:	3fb3b0f2 	.word	0x3fb3b0f2
 801bd00:	fe231671 	.word	0xfe231671
 801bd04:	3fbc71c6 	.word	0x3fbc71c6
 801bd08:	9998ebc4 	.word	0x9998ebc4
 801bd0c:	3fc99999 	.word	0x3fc99999
 801bd10:	54442d18 	.word	0x54442d18
 801bd14:	3ff921fb 	.word	0x3ff921fb
 801bd18:	440fffff 	.word	0x440fffff
 801bd1c:	7ff00000 	.word	0x7ff00000
 801bd20:	3fdbffff 	.word	0x3fdbffff
 801bd24:	3ff00000 	.word	0x3ff00000
 801bd28:	3ff2ffff 	.word	0x3ff2ffff
 801bd2c:	40038000 	.word	0x40038000
 801bd30:	3ff80000 	.word	0x3ff80000
 801bd34:	bff00000 	.word	0xbff00000
 801bd38:	0801e808 	.word	0x0801e808
 801bd3c:	0801e7e8 	.word	0x0801e7e8

0801bd40 <fabs>:
 801bd40:	ec51 0b10 	vmov	r0, r1, d0
 801bd44:	ee10 2a10 	vmov	r2, s0
 801bd48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bd4c:	ec43 2b10 	vmov	d0, r2, r3
 801bd50:	4770      	bx	lr
	...

0801bd54 <__kernel_cosf>:
 801bd54:	ee10 3a10 	vmov	r3, s0
 801bd58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bd5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bd60:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801bd64:	da05      	bge.n	801bd72 <__kernel_cosf+0x1e>
 801bd66:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801bd6a:	ee17 2a90 	vmov	r2, s15
 801bd6e:	2a00      	cmp	r2, #0
 801bd70:	d03b      	beq.n	801bdea <__kernel_cosf+0x96>
 801bd72:	ee20 7a00 	vmul.f32	s14, s0, s0
 801bd76:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801bdf0 <__kernel_cosf+0x9c>
 801bd7a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801bdf4 <__kernel_cosf+0xa0>
 801bd7e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801bd82:	4a1d      	ldr	r2, [pc, #116]	; (801bdf8 <__kernel_cosf+0xa4>)
 801bd84:	eea7 6a27 	vfma.f32	s12, s14, s15
 801bd88:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801bdfc <__kernel_cosf+0xa8>
 801bd8c:	4293      	cmp	r3, r2
 801bd8e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801bd92:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 801be00 <__kernel_cosf+0xac>
 801bd96:	eea7 6a87 	vfma.f32	s12, s15, s14
 801bd9a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801be04 <__kernel_cosf+0xb0>
 801bd9e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801bda2:	ed9f 6a19 	vldr	s12, [pc, #100]	; 801be08 <__kernel_cosf+0xb4>
 801bda6:	eea7 6a87 	vfma.f32	s12, s15, s14
 801bdaa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801bdae:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bdb2:	ee26 6a07 	vmul.f32	s12, s12, s14
 801bdb6:	eee7 0a06 	vfma.f32	s1, s14, s12
 801bdba:	dc04      	bgt.n	801bdc6 <__kernel_cosf+0x72>
 801bdbc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801bdc0:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801bdc4:	4770      	bx	lr
 801bdc6:	4a11      	ldr	r2, [pc, #68]	; (801be0c <__kernel_cosf+0xb8>)
 801bdc8:	4293      	cmp	r3, r2
 801bdca:	bfd6      	itet	le
 801bdcc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801bdd0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801bdd4:	ee07 3a10 	vmovle	s14, r3
 801bdd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bddc:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801bde0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801bde4:	ee30 0a67 	vsub.f32	s0, s0, s15
 801bde8:	4770      	bx	lr
 801bdea:	eeb0 0a66 	vmov.f32	s0, s13
 801bdee:	4770      	bx	lr
 801bdf0:	ad47d74e 	.word	0xad47d74e
 801bdf4:	310f74f6 	.word	0x310f74f6
 801bdf8:	3e999999 	.word	0x3e999999
 801bdfc:	b493f27c 	.word	0xb493f27c
 801be00:	37d00d01 	.word	0x37d00d01
 801be04:	bab60b61 	.word	0xbab60b61
 801be08:	3d2aaaab 	.word	0x3d2aaaab
 801be0c:	3f480000 	.word	0x3f480000

0801be10 <__kernel_sinf>:
 801be10:	ee10 3a10 	vmov	r3, s0
 801be14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801be18:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801be1c:	da04      	bge.n	801be28 <__kernel_sinf+0x18>
 801be1e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801be22:	ee17 3a90 	vmov	r3, s15
 801be26:	b35b      	cbz	r3, 801be80 <__kernel_sinf+0x70>
 801be28:	ee20 7a00 	vmul.f32	s14, s0, s0
 801be2c:	eddf 7a15 	vldr	s15, [pc, #84]	; 801be84 <__kernel_sinf+0x74>
 801be30:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801be88 <__kernel_sinf+0x78>
 801be34:	eea7 6a27 	vfma.f32	s12, s14, s15
 801be38:	eddf 7a14 	vldr	s15, [pc, #80]	; 801be8c <__kernel_sinf+0x7c>
 801be3c:	ee60 6a07 	vmul.f32	s13, s0, s14
 801be40:	eee6 7a07 	vfma.f32	s15, s12, s14
 801be44:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801be90 <__kernel_sinf+0x80>
 801be48:	eea7 6a87 	vfma.f32	s12, s15, s14
 801be4c:	eddf 7a11 	vldr	s15, [pc, #68]	; 801be94 <__kernel_sinf+0x84>
 801be50:	eee6 7a07 	vfma.f32	s15, s12, s14
 801be54:	b930      	cbnz	r0, 801be64 <__kernel_sinf+0x54>
 801be56:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801be98 <__kernel_sinf+0x88>
 801be5a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801be5e:	eea6 0a26 	vfma.f32	s0, s12, s13
 801be62:	4770      	bx	lr
 801be64:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801be68:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801be6c:	eee0 7a86 	vfma.f32	s15, s1, s12
 801be70:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801be74:	eddf 7a09 	vldr	s15, [pc, #36]	; 801be9c <__kernel_sinf+0x8c>
 801be78:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801be7c:	ee30 0a60 	vsub.f32	s0, s0, s1
 801be80:	4770      	bx	lr
 801be82:	bf00      	nop
 801be84:	2f2ec9d3 	.word	0x2f2ec9d3
 801be88:	b2d72f34 	.word	0xb2d72f34
 801be8c:	3638ef1b 	.word	0x3638ef1b
 801be90:	b9500d01 	.word	0xb9500d01
 801be94:	3c088889 	.word	0x3c088889
 801be98:	be2aaaab 	.word	0xbe2aaaab
 801be9c:	3e2aaaab 	.word	0x3e2aaaab

0801bea0 <__ieee754_atan2f>:
 801bea0:	ee10 2a90 	vmov	r2, s1
 801bea4:	eef0 7a40 	vmov.f32	s15, s0
 801bea8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801beac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801beb0:	b510      	push	{r4, lr}
 801beb2:	dc06      	bgt.n	801bec2 <__ieee754_atan2f+0x22>
 801beb4:	ee10 0a10 	vmov	r0, s0
 801beb8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801bebc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801bec0:	dd04      	ble.n	801becc <__ieee754_atan2f+0x2c>
 801bec2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801bec6:	eeb0 0a67 	vmov.f32	s0, s15
 801beca:	bd10      	pop	{r4, pc}
 801becc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801bed0:	d103      	bne.n	801beda <__ieee754_atan2f+0x3a>
 801bed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bed6:	f000 b9ab 	b.w	801c230 <atanf>
 801beda:	1794      	asrs	r4, r2, #30
 801bedc:	f004 0402 	and.w	r4, r4, #2
 801bee0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801bee4:	b93b      	cbnz	r3, 801bef6 <__ieee754_atan2f+0x56>
 801bee6:	2c02      	cmp	r4, #2
 801bee8:	d05c      	beq.n	801bfa4 <__ieee754_atan2f+0x104>
 801beea:	2c03      	cmp	r4, #3
 801beec:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801bfb8 <__ieee754_atan2f+0x118>
 801bef0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801bef4:	e7e7      	b.n	801bec6 <__ieee754_atan2f+0x26>
 801bef6:	b939      	cbnz	r1, 801bf08 <__ieee754_atan2f+0x68>
 801bef8:	2800      	cmp	r0, #0
 801befa:	eddf 7a30 	vldr	s15, [pc, #192]	; 801bfbc <__ieee754_atan2f+0x11c>
 801befe:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801bfc0 <__ieee754_atan2f+0x120>
 801bf02:	fe67 7a87 	vselge.f32	s15, s15, s14
 801bf06:	e7de      	b.n	801bec6 <__ieee754_atan2f+0x26>
 801bf08:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801bf0c:	d110      	bne.n	801bf30 <__ieee754_atan2f+0x90>
 801bf0e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801bf12:	f104 34ff 	add.w	r4, r4, #4294967295
 801bf16:	d107      	bne.n	801bf28 <__ieee754_atan2f+0x88>
 801bf18:	2c02      	cmp	r4, #2
 801bf1a:	d846      	bhi.n	801bfaa <__ieee754_atan2f+0x10a>
 801bf1c:	4b29      	ldr	r3, [pc, #164]	; (801bfc4 <__ieee754_atan2f+0x124>)
 801bf1e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801bf22:	edd3 7a00 	vldr	s15, [r3]
 801bf26:	e7ce      	b.n	801bec6 <__ieee754_atan2f+0x26>
 801bf28:	2c02      	cmp	r4, #2
 801bf2a:	d841      	bhi.n	801bfb0 <__ieee754_atan2f+0x110>
 801bf2c:	4b26      	ldr	r3, [pc, #152]	; (801bfc8 <__ieee754_atan2f+0x128>)
 801bf2e:	e7f6      	b.n	801bf1e <__ieee754_atan2f+0x7e>
 801bf30:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801bf34:	d0e0      	beq.n	801bef8 <__ieee754_atan2f+0x58>
 801bf36:	1a5b      	subs	r3, r3, r1
 801bf38:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801bf3c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801bf40:	da1a      	bge.n	801bf78 <__ieee754_atan2f+0xd8>
 801bf42:	2a00      	cmp	r2, #0
 801bf44:	da01      	bge.n	801bf4a <__ieee754_atan2f+0xaa>
 801bf46:	313c      	adds	r1, #60	; 0x3c
 801bf48:	db19      	blt.n	801bf7e <__ieee754_atan2f+0xde>
 801bf4a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801bf4e:	f000 fa43 	bl	801c3d8 <fabsf>
 801bf52:	f000 f96d 	bl	801c230 <atanf>
 801bf56:	eef0 7a40 	vmov.f32	s15, s0
 801bf5a:	2c01      	cmp	r4, #1
 801bf5c:	d012      	beq.n	801bf84 <__ieee754_atan2f+0xe4>
 801bf5e:	2c02      	cmp	r4, #2
 801bf60:	d017      	beq.n	801bf92 <__ieee754_atan2f+0xf2>
 801bf62:	2c00      	cmp	r4, #0
 801bf64:	d0af      	beq.n	801bec6 <__ieee754_atan2f+0x26>
 801bf66:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801bfcc <__ieee754_atan2f+0x12c>
 801bf6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bf6e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801bfd0 <__ieee754_atan2f+0x130>
 801bf72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bf76:	e7a6      	b.n	801bec6 <__ieee754_atan2f+0x26>
 801bf78:	eddf 7a10 	vldr	s15, [pc, #64]	; 801bfbc <__ieee754_atan2f+0x11c>
 801bf7c:	e7ed      	b.n	801bf5a <__ieee754_atan2f+0xba>
 801bf7e:	eddf 7a15 	vldr	s15, [pc, #84]	; 801bfd4 <__ieee754_atan2f+0x134>
 801bf82:	e7ea      	b.n	801bf5a <__ieee754_atan2f+0xba>
 801bf84:	ee17 3a90 	vmov	r3, s15
 801bf88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801bf8c:	ee07 3a90 	vmov	s15, r3
 801bf90:	e799      	b.n	801bec6 <__ieee754_atan2f+0x26>
 801bf92:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801bfcc <__ieee754_atan2f+0x12c>
 801bf96:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bf9a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801bfd0 <__ieee754_atan2f+0x130>
 801bf9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bfa2:	e790      	b.n	801bec6 <__ieee754_atan2f+0x26>
 801bfa4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801bfd0 <__ieee754_atan2f+0x130>
 801bfa8:	e78d      	b.n	801bec6 <__ieee754_atan2f+0x26>
 801bfaa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801bfd8 <__ieee754_atan2f+0x138>
 801bfae:	e78a      	b.n	801bec6 <__ieee754_atan2f+0x26>
 801bfb0:	eddf 7a08 	vldr	s15, [pc, #32]	; 801bfd4 <__ieee754_atan2f+0x134>
 801bfb4:	e787      	b.n	801bec6 <__ieee754_atan2f+0x26>
 801bfb6:	bf00      	nop
 801bfb8:	c0490fdb 	.word	0xc0490fdb
 801bfbc:	3fc90fdb 	.word	0x3fc90fdb
 801bfc0:	bfc90fdb 	.word	0xbfc90fdb
 801bfc4:	0801e828 	.word	0x0801e828
 801bfc8:	0801e834 	.word	0x0801e834
 801bfcc:	33bbbd2e 	.word	0x33bbbd2e
 801bfd0:	40490fdb 	.word	0x40490fdb
 801bfd4:	00000000 	.word	0x00000000
 801bfd8:	3f490fdb 	.word	0x3f490fdb

0801bfdc <__ieee754_rem_pio2f>:
 801bfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfde:	ee10 6a10 	vmov	r6, s0
 801bfe2:	4b85      	ldr	r3, [pc, #532]	; (801c1f8 <__ieee754_rem_pio2f+0x21c>)
 801bfe4:	b087      	sub	sp, #28
 801bfe6:	4604      	mov	r4, r0
 801bfe8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801bfec:	429d      	cmp	r5, r3
 801bfee:	dc05      	bgt.n	801bffc <__ieee754_rem_pio2f+0x20>
 801bff0:	2300      	movs	r3, #0
 801bff2:	ed80 0a00 	vstr	s0, [r0]
 801bff6:	6043      	str	r3, [r0, #4]
 801bff8:	2000      	movs	r0, #0
 801bffa:	e020      	b.n	801c03e <__ieee754_rem_pio2f+0x62>
 801bffc:	4b7f      	ldr	r3, [pc, #508]	; (801c1fc <__ieee754_rem_pio2f+0x220>)
 801bffe:	429d      	cmp	r5, r3
 801c000:	dc38      	bgt.n	801c074 <__ieee754_rem_pio2f+0x98>
 801c002:	2e00      	cmp	r6, #0
 801c004:	f025 050f 	bic.w	r5, r5, #15
 801c008:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801c200 <__ieee754_rem_pio2f+0x224>
 801c00c:	4b7d      	ldr	r3, [pc, #500]	; (801c204 <__ieee754_rem_pio2f+0x228>)
 801c00e:	dd18      	ble.n	801c042 <__ieee754_rem_pio2f+0x66>
 801c010:	429d      	cmp	r5, r3
 801c012:	ee70 7a47 	vsub.f32	s15, s0, s14
 801c016:	bf09      	itett	eq
 801c018:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801c208 <__ieee754_rem_pio2f+0x22c>
 801c01c:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 801c20c <__ieee754_rem_pio2f+0x230>
 801c020:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801c024:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 801c210 <__ieee754_rem_pio2f+0x234>
 801c028:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801c02c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c030:	edc0 6a00 	vstr	s13, [r0]
 801c034:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c038:	edc0 7a01 	vstr	s15, [r0, #4]
 801c03c:	2001      	movs	r0, #1
 801c03e:	b007      	add	sp, #28
 801c040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c042:	429d      	cmp	r5, r3
 801c044:	ee70 7a07 	vadd.f32	s15, s0, s14
 801c048:	bf09      	itett	eq
 801c04a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801c208 <__ieee754_rem_pio2f+0x22c>
 801c04e:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 801c20c <__ieee754_rem_pio2f+0x230>
 801c052:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801c056:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 801c210 <__ieee754_rem_pio2f+0x234>
 801c05a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801c05e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c062:	edc0 6a00 	vstr	s13, [r0]
 801c066:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c06a:	edc0 7a01 	vstr	s15, [r0, #4]
 801c06e:	f04f 30ff 	mov.w	r0, #4294967295
 801c072:	e7e4      	b.n	801c03e <__ieee754_rem_pio2f+0x62>
 801c074:	4b67      	ldr	r3, [pc, #412]	; (801c214 <__ieee754_rem_pio2f+0x238>)
 801c076:	429d      	cmp	r5, r3
 801c078:	dc70      	bgt.n	801c15c <__ieee754_rem_pio2f+0x180>
 801c07a:	f000 f9ad 	bl	801c3d8 <fabsf>
 801c07e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c082:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801c218 <__ieee754_rem_pio2f+0x23c>
 801c086:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c08a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c08e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c092:	ee17 0a90 	vmov	r0, s15
 801c096:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801c200 <__ieee754_rem_pio2f+0x224>
 801c09a:	281f      	cmp	r0, #31
 801c09c:	eea7 0a67 	vfms.f32	s0, s14, s15
 801c0a0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801c20c <__ieee754_rem_pio2f+0x230>
 801c0a4:	eeb1 6a47 	vneg.f32	s12, s14
 801c0a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c0ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 801c0b0:	ee16 2a90 	vmov	r2, s13
 801c0b4:	dc1c      	bgt.n	801c0f0 <__ieee754_rem_pio2f+0x114>
 801c0b6:	1e47      	subs	r7, r0, #1
 801c0b8:	4958      	ldr	r1, [pc, #352]	; (801c21c <__ieee754_rem_pio2f+0x240>)
 801c0ba:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801c0be:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801c0c2:	428b      	cmp	r3, r1
 801c0c4:	d014      	beq.n	801c0f0 <__ieee754_rem_pio2f+0x114>
 801c0c6:	6022      	str	r2, [r4, #0]
 801c0c8:	ed94 7a00 	vldr	s14, [r4]
 801c0cc:	2e00      	cmp	r6, #0
 801c0ce:	ee30 0a47 	vsub.f32	s0, s0, s14
 801c0d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c0d6:	ed84 0a01 	vstr	s0, [r4, #4]
 801c0da:	dab0      	bge.n	801c03e <__ieee754_rem_pio2f+0x62>
 801c0dc:	eeb1 7a47 	vneg.f32	s14, s14
 801c0e0:	eeb1 0a40 	vneg.f32	s0, s0
 801c0e4:	ed84 7a00 	vstr	s14, [r4]
 801c0e8:	ed84 0a01 	vstr	s0, [r4, #4]
 801c0ec:	4240      	negs	r0, r0
 801c0ee:	e7a6      	b.n	801c03e <__ieee754_rem_pio2f+0x62>
 801c0f0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801c0f4:	15eb      	asrs	r3, r5, #23
 801c0f6:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801c0fa:	2908      	cmp	r1, #8
 801c0fc:	dde3      	ble.n	801c0c6 <__ieee754_rem_pio2f+0xea>
 801c0fe:	eef0 6a40 	vmov.f32	s13, s0
 801c102:	eddf 5a41 	vldr	s11, [pc, #260]	; 801c208 <__ieee754_rem_pio2f+0x22c>
 801c106:	eee6 6a25 	vfma.f32	s13, s12, s11
 801c10a:	ee70 7a66 	vsub.f32	s15, s0, s13
 801c10e:	eee6 7a25 	vfma.f32	s15, s12, s11
 801c112:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801c210 <__ieee754_rem_pio2f+0x234>
 801c116:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801c11a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801c11e:	ee15 2a90 	vmov	r2, s11
 801c122:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801c126:	1a5b      	subs	r3, r3, r1
 801c128:	2b19      	cmp	r3, #25
 801c12a:	dc04      	bgt.n	801c136 <__ieee754_rem_pio2f+0x15a>
 801c12c:	eeb0 0a66 	vmov.f32	s0, s13
 801c130:	edc4 5a00 	vstr	s11, [r4]
 801c134:	e7c8      	b.n	801c0c8 <__ieee754_rem_pio2f+0xec>
 801c136:	eeb0 0a66 	vmov.f32	s0, s13
 801c13a:	eddf 5a39 	vldr	s11, [pc, #228]	; 801c220 <__ieee754_rem_pio2f+0x244>
 801c13e:	eea6 0a25 	vfma.f32	s0, s12, s11
 801c142:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801c146:	eddf 6a37 	vldr	s13, [pc, #220]	; 801c224 <__ieee754_rem_pio2f+0x248>
 801c14a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801c14e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801c152:	ee30 7a67 	vsub.f32	s14, s0, s15
 801c156:	ed84 7a00 	vstr	s14, [r4]
 801c15a:	e7b5      	b.n	801c0c8 <__ieee754_rem_pio2f+0xec>
 801c15c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801c160:	db06      	blt.n	801c170 <__ieee754_rem_pio2f+0x194>
 801c162:	ee70 7a40 	vsub.f32	s15, s0, s0
 801c166:	edc0 7a01 	vstr	s15, [r0, #4]
 801c16a:	edc0 7a00 	vstr	s15, [r0]
 801c16e:	e743      	b.n	801bff8 <__ieee754_rem_pio2f+0x1c>
 801c170:	15ea      	asrs	r2, r5, #23
 801c172:	eddf 6a2d 	vldr	s13, [pc, #180]	; 801c228 <__ieee754_rem_pio2f+0x24c>
 801c176:	3a86      	subs	r2, #134	; 0x86
 801c178:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801c17c:	ee07 3a90 	vmov	s15, r3
 801c180:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c184:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c188:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c18c:	ed8d 7a03 	vstr	s14, [sp, #12]
 801c190:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c194:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c198:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c19c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c1a0:	ed8d 7a04 	vstr	s14, [sp, #16]
 801c1a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c1a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 801c1ac:	edcd 7a05 	vstr	s15, [sp, #20]
 801c1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1b4:	d11e      	bne.n	801c1f4 <__ieee754_rem_pio2f+0x218>
 801c1b6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801c1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1be:	bf14      	ite	ne
 801c1c0:	2302      	movne	r3, #2
 801c1c2:	2301      	moveq	r3, #1
 801c1c4:	4919      	ldr	r1, [pc, #100]	; (801c22c <__ieee754_rem_pio2f+0x250>)
 801c1c6:	a803      	add	r0, sp, #12
 801c1c8:	9101      	str	r1, [sp, #4]
 801c1ca:	2102      	movs	r1, #2
 801c1cc:	9100      	str	r1, [sp, #0]
 801c1ce:	4621      	mov	r1, r4
 801c1d0:	f000 f9b8 	bl	801c544 <__kernel_rem_pio2f>
 801c1d4:	2e00      	cmp	r6, #0
 801c1d6:	f6bf af32 	bge.w	801c03e <__ieee754_rem_pio2f+0x62>
 801c1da:	edd4 7a00 	vldr	s15, [r4]
 801c1de:	eef1 7a67 	vneg.f32	s15, s15
 801c1e2:	edc4 7a00 	vstr	s15, [r4]
 801c1e6:	edd4 7a01 	vldr	s15, [r4, #4]
 801c1ea:	eef1 7a67 	vneg.f32	s15, s15
 801c1ee:	edc4 7a01 	vstr	s15, [r4, #4]
 801c1f2:	e77b      	b.n	801c0ec <__ieee754_rem_pio2f+0x110>
 801c1f4:	2303      	movs	r3, #3
 801c1f6:	e7e5      	b.n	801c1c4 <__ieee754_rem_pio2f+0x1e8>
 801c1f8:	3f490fd8 	.word	0x3f490fd8
 801c1fc:	4016cbe3 	.word	0x4016cbe3
 801c200:	3fc90f80 	.word	0x3fc90f80
 801c204:	3fc90fd0 	.word	0x3fc90fd0
 801c208:	37354400 	.word	0x37354400
 801c20c:	37354443 	.word	0x37354443
 801c210:	2e85a308 	.word	0x2e85a308
 801c214:	43490f80 	.word	0x43490f80
 801c218:	3f22f984 	.word	0x3f22f984
 801c21c:	0801e840 	.word	0x0801e840
 801c220:	2e85a300 	.word	0x2e85a300
 801c224:	248d3132 	.word	0x248d3132
 801c228:	43800000 	.word	0x43800000
 801c22c:	0801e8c0 	.word	0x0801e8c0

0801c230 <atanf>:
 801c230:	b538      	push	{r3, r4, r5, lr}
 801c232:	ee10 5a10 	vmov	r5, s0
 801c236:	eef0 7a40 	vmov.f32	s15, s0
 801c23a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801c23e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801c242:	db0f      	blt.n	801c264 <atanf+0x34>
 801c244:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801c248:	dd04      	ble.n	801c254 <atanf+0x24>
 801c24a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801c24e:	eeb0 0a67 	vmov.f32	s0, s15
 801c252:	bd38      	pop	{r3, r4, r5, pc}
 801c254:	2d00      	cmp	r5, #0
 801c256:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801c38c <atanf+0x15c>
 801c25a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801c390 <atanf+0x160>
 801c25e:	fe77 7a87 	vselgt.f32	s15, s15, s14
 801c262:	e7f4      	b.n	801c24e <atanf+0x1e>
 801c264:	4b4b      	ldr	r3, [pc, #300]	; (801c394 <atanf+0x164>)
 801c266:	429c      	cmp	r4, r3
 801c268:	dc10      	bgt.n	801c28c <atanf+0x5c>
 801c26a:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801c26e:	da0a      	bge.n	801c286 <atanf+0x56>
 801c270:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801c398 <atanf+0x168>
 801c274:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c278:	ee30 7a07 	vadd.f32	s14, s0, s14
 801c27c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801c280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c284:	dce3      	bgt.n	801c24e <atanf+0x1e>
 801c286:	f04f 33ff 	mov.w	r3, #4294967295
 801c28a:	e013      	b.n	801c2b4 <atanf+0x84>
 801c28c:	f000 f8a4 	bl	801c3d8 <fabsf>
 801c290:	4b42      	ldr	r3, [pc, #264]	; (801c39c <atanf+0x16c>)
 801c292:	429c      	cmp	r4, r3
 801c294:	dc4f      	bgt.n	801c336 <atanf+0x106>
 801c296:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801c29a:	429c      	cmp	r4, r3
 801c29c:	dc41      	bgt.n	801c322 <atanf+0xf2>
 801c29e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801c2a2:	2300      	movs	r3, #0
 801c2a4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801c2a8:	eea0 7a27 	vfma.f32	s14, s0, s15
 801c2ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c2b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c2b4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 801c3a0 <atanf+0x170>
 801c2b8:	1c5a      	adds	r2, r3, #1
 801c2ba:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801c3a4 <atanf+0x174>
 801c2be:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801c3a8 <atanf+0x178>
 801c2c2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801c2c6:	ee66 6a06 	vmul.f32	s13, s12, s12
 801c2ca:	eee6 5a87 	vfma.f32	s11, s13, s14
 801c2ce:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801c3ac <atanf+0x17c>
 801c2d2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801c2d6:	eddf 5a36 	vldr	s11, [pc, #216]	; 801c3b0 <atanf+0x180>
 801c2da:	eee7 5a26 	vfma.f32	s11, s14, s13
 801c2de:	ed9f 7a35 	vldr	s14, [pc, #212]	; 801c3b4 <atanf+0x184>
 801c2e2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801c2e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 801c3b8 <atanf+0x188>
 801c2ea:	eee7 5a26 	vfma.f32	s11, s14, s13
 801c2ee:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801c3bc <atanf+0x18c>
 801c2f2:	eea6 5a87 	vfma.f32	s10, s13, s14
 801c2f6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801c3c0 <atanf+0x190>
 801c2fa:	eea5 7a26 	vfma.f32	s14, s10, s13
 801c2fe:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801c3c4 <atanf+0x194>
 801c302:	eea7 5a26 	vfma.f32	s10, s14, s13
 801c306:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801c3c8 <atanf+0x198>
 801c30a:	eea5 7a26 	vfma.f32	s14, s10, s13
 801c30e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c312:	eea5 7a86 	vfma.f32	s14, s11, s12
 801c316:	ee27 7a87 	vmul.f32	s14, s15, s14
 801c31a:	d121      	bne.n	801c360 <atanf+0x130>
 801c31c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c320:	e795      	b.n	801c24e <atanf+0x1e>
 801c322:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c326:	2301      	movs	r3, #1
 801c328:	ee30 7a67 	vsub.f32	s14, s0, s15
 801c32c:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c330:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c334:	e7be      	b.n	801c2b4 <atanf+0x84>
 801c336:	4b25      	ldr	r3, [pc, #148]	; (801c3cc <atanf+0x19c>)
 801c338:	429c      	cmp	r4, r3
 801c33a:	dc0b      	bgt.n	801c354 <atanf+0x124>
 801c33c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801c340:	2302      	movs	r3, #2
 801c342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c346:	ee70 6a67 	vsub.f32	s13, s0, s15
 801c34a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801c34e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c352:	e7af      	b.n	801c2b4 <atanf+0x84>
 801c354:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801c358:	2303      	movs	r3, #3
 801c35a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c35e:	e7a9      	b.n	801c2b4 <atanf+0x84>
 801c360:	4a1b      	ldr	r2, [pc, #108]	; (801c3d0 <atanf+0x1a0>)
 801c362:	2d00      	cmp	r5, #0
 801c364:	491b      	ldr	r1, [pc, #108]	; (801c3d4 <atanf+0x1a4>)
 801c366:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801c36a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c36e:	edd3 6a00 	vldr	s13, [r3]
 801c372:	ee37 7a66 	vsub.f32	s14, s14, s13
 801c376:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c37a:	edd2 7a00 	vldr	s15, [r2]
 801c37e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c382:	bfb8      	it	lt
 801c384:	eef1 7a67 	vneglt.f32	s15, s15
 801c388:	e761      	b.n	801c24e <atanf+0x1e>
 801c38a:	bf00      	nop
 801c38c:	3fc90fdb 	.word	0x3fc90fdb
 801c390:	bfc90fdb 	.word	0xbfc90fdb
 801c394:	3edfffff 	.word	0x3edfffff
 801c398:	7149f2ca 	.word	0x7149f2ca
 801c39c:	3f97ffff 	.word	0x3f97ffff
 801c3a0:	3c8569d7 	.word	0x3c8569d7
 801c3a4:	3d4bda59 	.word	0x3d4bda59
 801c3a8:	bd6ef16b 	.word	0xbd6ef16b
 801c3ac:	3d886b35 	.word	0x3d886b35
 801c3b0:	3dba2e6e 	.word	0x3dba2e6e
 801c3b4:	3e124925 	.word	0x3e124925
 801c3b8:	3eaaaaab 	.word	0x3eaaaaab
 801c3bc:	bd15a221 	.word	0xbd15a221
 801c3c0:	bd9d8795 	.word	0xbd9d8795
 801c3c4:	bde38e38 	.word	0xbde38e38
 801c3c8:	be4ccccd 	.word	0xbe4ccccd
 801c3cc:	401bffff 	.word	0x401bffff
 801c3d0:	0801ebd8 	.word	0x0801ebd8
 801c3d4:	0801ebe8 	.word	0x0801ebe8

0801c3d8 <fabsf>:
 801c3d8:	ee10 3a10 	vmov	r3, s0
 801c3dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c3e0:	ee00 3a10 	vmov	s0, r3
 801c3e4:	4770      	bx	lr
	...

0801c3e8 <scalbn>:
 801c3e8:	b570      	push	{r4, r5, r6, lr}
 801c3ea:	ec55 4b10 	vmov	r4, r5, d0
 801c3ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801c3f2:	4606      	mov	r6, r0
 801c3f4:	462b      	mov	r3, r5
 801c3f6:	b999      	cbnz	r1, 801c420 <scalbn+0x38>
 801c3f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c3fc:	4323      	orrs	r3, r4
 801c3fe:	d03f      	beq.n	801c480 <scalbn+0x98>
 801c400:	4b35      	ldr	r3, [pc, #212]	; (801c4d8 <scalbn+0xf0>)
 801c402:	4629      	mov	r1, r5
 801c404:	2200      	movs	r2, #0
 801c406:	ee10 0a10 	vmov	r0, s0
 801c40a:	f7e4 f8e7 	bl	80005dc <__aeabi_dmul>
 801c40e:	4b33      	ldr	r3, [pc, #204]	; (801c4dc <scalbn+0xf4>)
 801c410:	4604      	mov	r4, r0
 801c412:	460d      	mov	r5, r1
 801c414:	429e      	cmp	r6, r3
 801c416:	da10      	bge.n	801c43a <scalbn+0x52>
 801c418:	a327      	add	r3, pc, #156	; (adr r3, 801c4b8 <scalbn+0xd0>)
 801c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c41e:	e01f      	b.n	801c460 <scalbn+0x78>
 801c420:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801c424:	4291      	cmp	r1, r2
 801c426:	d10c      	bne.n	801c442 <scalbn+0x5a>
 801c428:	ee10 2a10 	vmov	r2, s0
 801c42c:	4620      	mov	r0, r4
 801c42e:	4629      	mov	r1, r5
 801c430:	f7e3 ff1e 	bl	8000270 <__adddf3>
 801c434:	4604      	mov	r4, r0
 801c436:	460d      	mov	r5, r1
 801c438:	e022      	b.n	801c480 <scalbn+0x98>
 801c43a:	460b      	mov	r3, r1
 801c43c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801c440:	3936      	subs	r1, #54	; 0x36
 801c442:	f24c 3250 	movw	r2, #50000	; 0xc350
 801c446:	4296      	cmp	r6, r2
 801c448:	dd0d      	ble.n	801c466 <scalbn+0x7e>
 801c44a:	2d00      	cmp	r5, #0
 801c44c:	a11c      	add	r1, pc, #112	; (adr r1, 801c4c0 <scalbn+0xd8>)
 801c44e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c452:	da02      	bge.n	801c45a <scalbn+0x72>
 801c454:	a11c      	add	r1, pc, #112	; (adr r1, 801c4c8 <scalbn+0xe0>)
 801c456:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c45a:	a319      	add	r3, pc, #100	; (adr r3, 801c4c0 <scalbn+0xd8>)
 801c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c460:	f7e4 f8bc 	bl	80005dc <__aeabi_dmul>
 801c464:	e7e6      	b.n	801c434 <scalbn+0x4c>
 801c466:	1872      	adds	r2, r6, r1
 801c468:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c46c:	428a      	cmp	r2, r1
 801c46e:	dcec      	bgt.n	801c44a <scalbn+0x62>
 801c470:	2a00      	cmp	r2, #0
 801c472:	dd08      	ble.n	801c486 <scalbn+0x9e>
 801c474:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c478:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c47c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c480:	ec45 4b10 	vmov	d0, r4, r5
 801c484:	bd70      	pop	{r4, r5, r6, pc}
 801c486:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c48a:	da08      	bge.n	801c49e <scalbn+0xb6>
 801c48c:	2d00      	cmp	r5, #0
 801c48e:	a10a      	add	r1, pc, #40	; (adr r1, 801c4b8 <scalbn+0xd0>)
 801c490:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c494:	dac0      	bge.n	801c418 <scalbn+0x30>
 801c496:	a10e      	add	r1, pc, #56	; (adr r1, 801c4d0 <scalbn+0xe8>)
 801c498:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c49c:	e7bc      	b.n	801c418 <scalbn+0x30>
 801c49e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c4a2:	3236      	adds	r2, #54	; 0x36
 801c4a4:	4620      	mov	r0, r4
 801c4a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c4aa:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c4ae:	2200      	movs	r2, #0
 801c4b0:	4b0b      	ldr	r3, [pc, #44]	; (801c4e0 <scalbn+0xf8>)
 801c4b2:	e7d5      	b.n	801c460 <scalbn+0x78>
 801c4b4:	f3af 8000 	nop.w
 801c4b8:	c2f8f359 	.word	0xc2f8f359
 801c4bc:	01a56e1f 	.word	0x01a56e1f
 801c4c0:	8800759c 	.word	0x8800759c
 801c4c4:	7e37e43c 	.word	0x7e37e43c
 801c4c8:	8800759c 	.word	0x8800759c
 801c4cc:	fe37e43c 	.word	0xfe37e43c
 801c4d0:	c2f8f359 	.word	0xc2f8f359
 801c4d4:	81a56e1f 	.word	0x81a56e1f
 801c4d8:	43500000 	.word	0x43500000
 801c4dc:	ffff3cb0 	.word	0xffff3cb0
 801c4e0:	3c900000 	.word	0x3c900000

0801c4e4 <with_errno>:
 801c4e4:	b570      	push	{r4, r5, r6, lr}
 801c4e6:	4604      	mov	r4, r0
 801c4e8:	460d      	mov	r5, r1
 801c4ea:	4616      	mov	r6, r2
 801c4ec:	f000 fdf6 	bl	801d0dc <__errno>
 801c4f0:	4629      	mov	r1, r5
 801c4f2:	6006      	str	r6, [r0, #0]
 801c4f4:	4620      	mov	r0, r4
 801c4f6:	bd70      	pop	{r4, r5, r6, pc}

0801c4f8 <xflow>:
 801c4f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c4fa:	4614      	mov	r4, r2
 801c4fc:	461d      	mov	r5, r3
 801c4fe:	b108      	cbz	r0, 801c504 <xflow+0xc>
 801c500:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c504:	4620      	mov	r0, r4
 801c506:	4629      	mov	r1, r5
 801c508:	e9cd 2300 	strd	r2, r3, [sp]
 801c50c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c510:	f7e4 f864 	bl	80005dc <__aeabi_dmul>
 801c514:	2222      	movs	r2, #34	; 0x22
 801c516:	b003      	add	sp, #12
 801c518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c51c:	f7ff bfe2 	b.w	801c4e4 <with_errno>

0801c520 <__math_uflow>:
 801c520:	b508      	push	{r3, lr}
 801c522:	2200      	movs	r2, #0
 801c524:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801c528:	f7ff ffe6 	bl	801c4f8 <xflow>
 801c52c:	ec41 0b10 	vmov	d0, r0, r1
 801c530:	bd08      	pop	{r3, pc}

0801c532 <__math_oflow>:
 801c532:	b508      	push	{r3, lr}
 801c534:	2200      	movs	r2, #0
 801c536:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801c53a:	f7ff ffdd 	bl	801c4f8 <xflow>
 801c53e:	ec41 0b10 	vmov	d0, r0, r1
 801c542:	bd08      	pop	{r3, pc}

0801c544 <__kernel_rem_pio2f>:
 801c544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c548:	ed2d 8b04 	vpush	{d8-d9}
 801c54c:	b0d9      	sub	sp, #356	; 0x164
 801c54e:	4688      	mov	r8, r1
 801c550:	49b9      	ldr	r1, [pc, #740]	; (801c838 <__kernel_rem_pio2f+0x2f4>)
 801c552:	9002      	str	r0, [sp, #8]
 801c554:	9866      	ldr	r0, [sp, #408]	; 0x198
 801c556:	9301      	str	r3, [sp, #4]
 801c558:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801c55c:	9901      	ldr	r1, [sp, #4]
 801c55e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801c560:	f101 3bff 	add.w	fp, r1, #4294967295
 801c564:	1d11      	adds	r1, r2, #4
 801c566:	db25      	blt.n	801c5b4 <__kernel_rem_pio2f+0x70>
 801c568:	1ed0      	subs	r0, r2, #3
 801c56a:	bf48      	it	mi
 801c56c:	1d10      	addmi	r0, r2, #4
 801c56e:	10c0      	asrs	r0, r0, #3
 801c570:	1c45      	adds	r5, r0, #1
 801c572:	eba0 070b 	sub.w	r7, r0, fp
 801c576:	eb0a 0c0b 	add.w	ip, sl, fp
 801c57a:	ae1c      	add	r6, sp, #112	; 0x70
 801c57c:	00e9      	lsls	r1, r5, #3
 801c57e:	2400      	movs	r4, #0
 801c580:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801c584:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 801c848 <__kernel_rem_pio2f+0x304>
 801c588:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801c58c:	9103      	str	r1, [sp, #12]
 801c58e:	4564      	cmp	r4, ip
 801c590:	dd12      	ble.n	801c5b8 <__kernel_rem_pio2f+0x74>
 801c592:	ac1c      	add	r4, sp, #112	; 0x70
 801c594:	9901      	ldr	r1, [sp, #4]
 801c596:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801c59a:	f04f 0c00 	mov.w	ip, #0
 801c59e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801c5a2:	45d4      	cmp	ip, sl
 801c5a4:	dc29      	bgt.n	801c5fa <__kernel_rem_pio2f+0xb6>
 801c5a6:	f8dd e008 	ldr.w	lr, [sp, #8]
 801c5aa:	4627      	mov	r7, r4
 801c5ac:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801c848 <__kernel_rem_pio2f+0x304>
 801c5b0:	2600      	movs	r6, #0
 801c5b2:	e018      	b.n	801c5e6 <__kernel_rem_pio2f+0xa2>
 801c5b4:	2000      	movs	r0, #0
 801c5b6:	e7db      	b.n	801c570 <__kernel_rem_pio2f+0x2c>
 801c5b8:	42e7      	cmn	r7, r4
 801c5ba:	bf54      	ite	pl
 801c5bc:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801c5c0:	eef0 7a47 	vmovmi.f32	s15, s14
 801c5c4:	f104 0401 	add.w	r4, r4, #1
 801c5c8:	bf5c      	itt	pl
 801c5ca:	ee07 1a90 	vmovpl	s15, r1
 801c5ce:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801c5d2:	ece6 7a01 	vstmia	r6!, {s15}
 801c5d6:	e7da      	b.n	801c58e <__kernel_rem_pio2f+0x4a>
 801c5d8:	ecfe 6a01 	vldmia	lr!, {s13}
 801c5dc:	3601      	adds	r6, #1
 801c5de:	ed97 7a00 	vldr	s14, [r7]
 801c5e2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c5e6:	455e      	cmp	r6, fp
 801c5e8:	f1a7 0704 	sub.w	r7, r7, #4
 801c5ec:	ddf4      	ble.n	801c5d8 <__kernel_rem_pio2f+0x94>
 801c5ee:	f10c 0c01 	add.w	ip, ip, #1
 801c5f2:	3404      	adds	r4, #4
 801c5f4:	ece9 7a01 	vstmia	r9!, {s15}
 801c5f8:	e7d3      	b.n	801c5a2 <__kernel_rem_pio2f+0x5e>
 801c5fa:	a908      	add	r1, sp, #32
 801c5fc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801c600:	4656      	mov	r6, sl
 801c602:	eddf 8a90 	vldr	s17, [pc, #576]	; 801c844 <__kernel_rem_pio2f+0x300>
 801c606:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c60a:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801c840 <__kernel_rem_pio2f+0x2fc>
 801c60e:	9304      	str	r3, [sp, #16]
 801c610:	9105      	str	r1, [sp, #20]
 801c612:	00b3      	lsls	r3, r6, #2
 801c614:	ac08      	add	r4, sp, #32
 801c616:	4637      	mov	r7, r6
 801c618:	9306      	str	r3, [sp, #24]
 801c61a:	ab58      	add	r3, sp, #352	; 0x160
 801c61c:	46a4      	mov	ip, r4
 801c61e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801c622:	ab44      	add	r3, sp, #272	; 0x110
 801c624:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801c628:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801c62c:	2f00      	cmp	r7, #0
 801c62e:	f1a0 0004 	sub.w	r0, r0, #4
 801c632:	dc4a      	bgt.n	801c6ca <__kernel_rem_pio2f+0x186>
 801c634:	4628      	mov	r0, r5
 801c636:	9207      	str	r2, [sp, #28]
 801c638:	f000 f9f8 	bl	801ca2c <scalbnf>
 801c63c:	eeb0 8a40 	vmov.f32	s16, s0
 801c640:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801c644:	ee28 0a00 	vmul.f32	s0, s16, s0
 801c648:	f000 fa54 	bl	801caf4 <floorf>
 801c64c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801c650:	2d00      	cmp	r5, #0
 801c652:	9a07      	ldr	r2, [sp, #28]
 801c654:	eea0 8a67 	vfms.f32	s16, s0, s15
 801c658:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801c65c:	ee17 9a90 	vmov	r9, s15
 801c660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c664:	ee38 8a67 	vsub.f32	s16, s16, s15
 801c668:	dd41      	ble.n	801c6ee <__kernel_rem_pio2f+0x1aa>
 801c66a:	f106 3cff 	add.w	ip, r6, #4294967295
 801c66e:	ab08      	add	r3, sp, #32
 801c670:	f1c5 0e08 	rsb	lr, r5, #8
 801c674:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801c678:	fa47 f00e 	asr.w	r0, r7, lr
 801c67c:	4481      	add	r9, r0
 801c67e:	fa00 f00e 	lsl.w	r0, r0, lr
 801c682:	1a3f      	subs	r7, r7, r0
 801c684:	f1c5 0007 	rsb	r0, r5, #7
 801c688:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801c68c:	4107      	asrs	r7, r0
 801c68e:	2f00      	cmp	r7, #0
 801c690:	dd3c      	ble.n	801c70c <__kernel_rem_pio2f+0x1c8>
 801c692:	f04f 0e00 	mov.w	lr, #0
 801c696:	f109 0901 	add.w	r9, r9, #1
 801c69a:	4671      	mov	r1, lr
 801c69c:	4576      	cmp	r6, lr
 801c69e:	dc67      	bgt.n	801c770 <__kernel_rem_pio2f+0x22c>
 801c6a0:	2d00      	cmp	r5, #0
 801c6a2:	dd03      	ble.n	801c6ac <__kernel_rem_pio2f+0x168>
 801c6a4:	2d01      	cmp	r5, #1
 801c6a6:	d074      	beq.n	801c792 <__kernel_rem_pio2f+0x24e>
 801c6a8:	2d02      	cmp	r5, #2
 801c6aa:	d07b      	beq.n	801c7a4 <__kernel_rem_pio2f+0x260>
 801c6ac:	2f02      	cmp	r7, #2
 801c6ae:	d12d      	bne.n	801c70c <__kernel_rem_pio2f+0x1c8>
 801c6b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c6b4:	ee30 8a48 	vsub.f32	s16, s0, s16
 801c6b8:	b341      	cbz	r1, 801c70c <__kernel_rem_pio2f+0x1c8>
 801c6ba:	4628      	mov	r0, r5
 801c6bc:	9207      	str	r2, [sp, #28]
 801c6be:	f000 f9b5 	bl	801ca2c <scalbnf>
 801c6c2:	9a07      	ldr	r2, [sp, #28]
 801c6c4:	ee38 8a40 	vsub.f32	s16, s16, s0
 801c6c8:	e020      	b.n	801c70c <__kernel_rem_pio2f+0x1c8>
 801c6ca:	ee60 7a28 	vmul.f32	s15, s0, s17
 801c6ce:	3f01      	subs	r7, #1
 801c6d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c6d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c6d8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801c6dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801c6e0:	ecac 0a01 	vstmia	ip!, {s0}
 801c6e4:	ed90 0a00 	vldr	s0, [r0]
 801c6e8:	ee37 0a80 	vadd.f32	s0, s15, s0
 801c6ec:	e79e      	b.n	801c62c <__kernel_rem_pio2f+0xe8>
 801c6ee:	d105      	bne.n	801c6fc <__kernel_rem_pio2f+0x1b8>
 801c6f0:	1e70      	subs	r0, r6, #1
 801c6f2:	ab08      	add	r3, sp, #32
 801c6f4:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801c6f8:	11ff      	asrs	r7, r7, #7
 801c6fa:	e7c8      	b.n	801c68e <__kernel_rem_pio2f+0x14a>
 801c6fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c700:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801c704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c708:	da30      	bge.n	801c76c <__kernel_rem_pio2f+0x228>
 801c70a:	2700      	movs	r7, #0
 801c70c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801c710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c714:	f040 809a 	bne.w	801c84c <__kernel_rem_pio2f+0x308>
 801c718:	1e74      	subs	r4, r6, #1
 801c71a:	2100      	movs	r1, #0
 801c71c:	46a4      	mov	ip, r4
 801c71e:	45d4      	cmp	ip, sl
 801c720:	da47      	bge.n	801c7b2 <__kernel_rem_pio2f+0x26e>
 801c722:	2900      	cmp	r1, #0
 801c724:	d063      	beq.n	801c7ee <__kernel_rem_pio2f+0x2aa>
 801c726:	ab08      	add	r3, sp, #32
 801c728:	3d08      	subs	r5, #8
 801c72a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801c72e:	2b00      	cmp	r3, #0
 801c730:	d07f      	beq.n	801c832 <__kernel_rem_pio2f+0x2ee>
 801c732:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c736:	4628      	mov	r0, r5
 801c738:	f000 f978 	bl	801ca2c <scalbnf>
 801c73c:	1c63      	adds	r3, r4, #1
 801c73e:	aa44      	add	r2, sp, #272	; 0x110
 801c740:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801c844 <__kernel_rem_pio2f+0x300>
 801c744:	0099      	lsls	r1, r3, #2
 801c746:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801c74a:	4623      	mov	r3, r4
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	f280 80ad 	bge.w	801c8ac <__kernel_rem_pio2f+0x368>
 801c752:	4623      	mov	r3, r4
 801c754:	2b00      	cmp	r3, #0
 801c756:	f2c0 80cb 	blt.w	801c8f0 <__kernel_rem_pio2f+0x3ac>
 801c75a:	aa44      	add	r2, sp, #272	; 0x110
 801c75c:	4e37      	ldr	r6, [pc, #220]	; (801c83c <__kernel_rem_pio2f+0x2f8>)
 801c75e:	eddf 7a3a 	vldr	s15, [pc, #232]	; 801c848 <__kernel_rem_pio2f+0x304>
 801c762:	2000      	movs	r0, #0
 801c764:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801c768:	1ae2      	subs	r2, r4, r3
 801c76a:	e0b6      	b.n	801c8da <__kernel_rem_pio2f+0x396>
 801c76c:	2702      	movs	r7, #2
 801c76e:	e790      	b.n	801c692 <__kernel_rem_pio2f+0x14e>
 801c770:	6820      	ldr	r0, [r4, #0]
 801c772:	b949      	cbnz	r1, 801c788 <__kernel_rem_pio2f+0x244>
 801c774:	b118      	cbz	r0, 801c77e <__kernel_rem_pio2f+0x23a>
 801c776:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801c77a:	6020      	str	r0, [r4, #0]
 801c77c:	2001      	movs	r0, #1
 801c77e:	f10e 0e01 	add.w	lr, lr, #1
 801c782:	3404      	adds	r4, #4
 801c784:	4601      	mov	r1, r0
 801c786:	e789      	b.n	801c69c <__kernel_rem_pio2f+0x158>
 801c788:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801c78c:	6020      	str	r0, [r4, #0]
 801c78e:	4608      	mov	r0, r1
 801c790:	e7f5      	b.n	801c77e <__kernel_rem_pio2f+0x23a>
 801c792:	1e74      	subs	r4, r6, #1
 801c794:	ab08      	add	r3, sp, #32
 801c796:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801c79a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801c79e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801c7a2:	e783      	b.n	801c6ac <__kernel_rem_pio2f+0x168>
 801c7a4:	1e74      	subs	r4, r6, #1
 801c7a6:	ab08      	add	r3, sp, #32
 801c7a8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801c7ac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801c7b0:	e7f5      	b.n	801c79e <__kernel_rem_pio2f+0x25a>
 801c7b2:	ab08      	add	r3, sp, #32
 801c7b4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801c7b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c7bc:	4301      	orrs	r1, r0
 801c7be:	e7ae      	b.n	801c71e <__kernel_rem_pio2f+0x1da>
 801c7c0:	3001      	adds	r0, #1
 801c7c2:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801c7c6:	2f00      	cmp	r7, #0
 801c7c8:	d0fa      	beq.n	801c7c0 <__kernel_rem_pio2f+0x27c>
 801c7ca:	9b06      	ldr	r3, [sp, #24]
 801c7cc:	f106 0c01 	add.w	ip, r6, #1
 801c7d0:	4430      	add	r0, r6
 801c7d2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801c7d6:	eb0d 0403 	add.w	r4, sp, r3
 801c7da:	9b01      	ldr	r3, [sp, #4]
 801c7dc:	18f7      	adds	r7, r6, r3
 801c7de:	ab1c      	add	r3, sp, #112	; 0x70
 801c7e0:	3c4c      	subs	r4, #76	; 0x4c
 801c7e2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c7e6:	4560      	cmp	r0, ip
 801c7e8:	da04      	bge.n	801c7f4 <__kernel_rem_pio2f+0x2b0>
 801c7ea:	4606      	mov	r6, r0
 801c7ec:	e711      	b.n	801c612 <__kernel_rem_pio2f+0xce>
 801c7ee:	9c05      	ldr	r4, [sp, #20]
 801c7f0:	2001      	movs	r0, #1
 801c7f2:	e7e6      	b.n	801c7c2 <__kernel_rem_pio2f+0x27e>
 801c7f4:	9b04      	ldr	r3, [sp, #16]
 801c7f6:	2600      	movs	r6, #0
 801c7f8:	f8dd e008 	ldr.w	lr, [sp, #8]
 801c7fc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801c800:	ee07 3a90 	vmov	s15, r3
 801c804:	9306      	str	r3, [sp, #24]
 801c806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c80a:	ece7 7a01 	vstmia	r7!, {s15}
 801c80e:	46b9      	mov	r9, r7
 801c810:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801c848 <__kernel_rem_pio2f+0x304>
 801c814:	455e      	cmp	r6, fp
 801c816:	dd04      	ble.n	801c822 <__kernel_rem_pio2f+0x2de>
 801c818:	f10c 0c01 	add.w	ip, ip, #1
 801c81c:	ece4 7a01 	vstmia	r4!, {s15}
 801c820:	e7e1      	b.n	801c7e6 <__kernel_rem_pio2f+0x2a2>
 801c822:	ecfe 6a01 	vldmia	lr!, {s13}
 801c826:	3601      	adds	r6, #1
 801c828:	ed39 7a01 	vldmdb	r9!, {s14}
 801c82c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c830:	e7f0      	b.n	801c814 <__kernel_rem_pio2f+0x2d0>
 801c832:	3c01      	subs	r4, #1
 801c834:	e777      	b.n	801c726 <__kernel_rem_pio2f+0x1e2>
 801c836:	bf00      	nop
 801c838:	0801ec24 	.word	0x0801ec24
 801c83c:	0801ebf8 	.word	0x0801ebf8
 801c840:	43800000 	.word	0x43800000
 801c844:	3b800000 	.word	0x3b800000
 801c848:	00000000 	.word	0x00000000
 801c84c:	9b03      	ldr	r3, [sp, #12]
 801c84e:	eeb0 0a48 	vmov.f32	s0, s16
 801c852:	1a98      	subs	r0, r3, r2
 801c854:	f000 f8ea 	bl	801ca2c <scalbnf>
 801c858:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801c840 <__kernel_rem_pio2f+0x2fc>
 801c85c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801c860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c864:	db19      	blt.n	801c89a <__kernel_rem_pio2f+0x356>
 801c866:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801c844 <__kernel_rem_pio2f+0x300>
 801c86a:	aa08      	add	r2, sp, #32
 801c86c:	1c74      	adds	r4, r6, #1
 801c86e:	3508      	adds	r5, #8
 801c870:	ee60 7a27 	vmul.f32	s15, s0, s15
 801c874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c87c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801c880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c884:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801c888:	ee10 3a10 	vmov	r3, s0
 801c88c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801c890:	ee17 3a90 	vmov	r3, s15
 801c894:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801c898:	e74b      	b.n	801c732 <__kernel_rem_pio2f+0x1ee>
 801c89a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801c89e:	aa08      	add	r2, sp, #32
 801c8a0:	4634      	mov	r4, r6
 801c8a2:	ee10 3a10 	vmov	r3, s0
 801c8a6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801c8aa:	e742      	b.n	801c732 <__kernel_rem_pio2f+0x1ee>
 801c8ac:	a808      	add	r0, sp, #32
 801c8ae:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801c8b2:	3b01      	subs	r3, #1
 801c8b4:	ee07 0a90 	vmov	s15, r0
 801c8b8:	9001      	str	r0, [sp, #4]
 801c8ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c8be:	ee67 7a80 	vmul.f32	s15, s15, s0
 801c8c2:	ee20 0a07 	vmul.f32	s0, s0, s14
 801c8c6:	ed62 7a01 	vstmdb	r2!, {s15}
 801c8ca:	e73f      	b.n	801c74c <__kernel_rem_pio2f+0x208>
 801c8cc:	ecf6 6a01 	vldmia	r6!, {s13}
 801c8d0:	3001      	adds	r0, #1
 801c8d2:	ecb5 7a01 	vldmia	r5!, {s14}
 801c8d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c8da:	4550      	cmp	r0, sl
 801c8dc:	dc01      	bgt.n	801c8e2 <__kernel_rem_pio2f+0x39e>
 801c8de:	4290      	cmp	r0, r2
 801c8e0:	ddf4      	ble.n	801c8cc <__kernel_rem_pio2f+0x388>
 801c8e2:	a858      	add	r0, sp, #352	; 0x160
 801c8e4:	3b01      	subs	r3, #1
 801c8e6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801c8ea:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801c8ee:	e731      	b.n	801c754 <__kernel_rem_pio2f+0x210>
 801c8f0:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801c8f2:	2b02      	cmp	r3, #2
 801c8f4:	dc09      	bgt.n	801c90a <__kernel_rem_pio2f+0x3c6>
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	dc2b      	bgt.n	801c952 <__kernel_rem_pio2f+0x40e>
 801c8fa:	d044      	beq.n	801c986 <__kernel_rem_pio2f+0x442>
 801c8fc:	f009 0007 	and.w	r0, r9, #7
 801c900:	b059      	add	sp, #356	; 0x164
 801c902:	ecbd 8b04 	vpop	{d8-d9}
 801c906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c90a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801c90c:	2b03      	cmp	r3, #3
 801c90e:	d1f5      	bne.n	801c8fc <__kernel_rem_pio2f+0x3b8>
 801c910:	aa30      	add	r2, sp, #192	; 0xc0
 801c912:	1f0b      	subs	r3, r1, #4
 801c914:	4620      	mov	r0, r4
 801c916:	4413      	add	r3, r2
 801c918:	461a      	mov	r2, r3
 801c91a:	2800      	cmp	r0, #0
 801c91c:	f1a2 0204 	sub.w	r2, r2, #4
 801c920:	dc52      	bgt.n	801c9c8 <__kernel_rem_pio2f+0x484>
 801c922:	4622      	mov	r2, r4
 801c924:	2a01      	cmp	r2, #1
 801c926:	f1a3 0304 	sub.w	r3, r3, #4
 801c92a:	dc5d      	bgt.n	801c9e8 <__kernel_rem_pio2f+0x4a4>
 801c92c:	ab30      	add	r3, sp, #192	; 0xc0
 801c92e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801c848 <__kernel_rem_pio2f+0x304>
 801c932:	440b      	add	r3, r1
 801c934:	2c01      	cmp	r4, #1
 801c936:	dc67      	bgt.n	801ca08 <__kernel_rem_pio2f+0x4c4>
 801c938:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801c93c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801c940:	2f00      	cmp	r7, #0
 801c942:	d167      	bne.n	801ca14 <__kernel_rem_pio2f+0x4d0>
 801c944:	edc8 6a00 	vstr	s13, [r8]
 801c948:	ed88 7a01 	vstr	s14, [r8, #4]
 801c94c:	edc8 7a02 	vstr	s15, [r8, #8]
 801c950:	e7d4      	b.n	801c8fc <__kernel_rem_pio2f+0x3b8>
 801c952:	ab30      	add	r3, sp, #192	; 0xc0
 801c954:	4622      	mov	r2, r4
 801c956:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801c848 <__kernel_rem_pio2f+0x304>
 801c95a:	440b      	add	r3, r1
 801c95c:	2a00      	cmp	r2, #0
 801c95e:	da24      	bge.n	801c9aa <__kernel_rem_pio2f+0x466>
 801c960:	b34f      	cbz	r7, 801c9b6 <__kernel_rem_pio2f+0x472>
 801c962:	eef1 7a47 	vneg.f32	s15, s14
 801c966:	edc8 7a00 	vstr	s15, [r8]
 801c96a:	aa31      	add	r2, sp, #196	; 0xc4
 801c96c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801c970:	2301      	movs	r3, #1
 801c972:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c976:	429c      	cmp	r4, r3
 801c978:	da20      	bge.n	801c9bc <__kernel_rem_pio2f+0x478>
 801c97a:	b10f      	cbz	r7, 801c980 <__kernel_rem_pio2f+0x43c>
 801c97c:	eef1 7a67 	vneg.f32	s15, s15
 801c980:	edc8 7a01 	vstr	s15, [r8, #4]
 801c984:	e7ba      	b.n	801c8fc <__kernel_rem_pio2f+0x3b8>
 801c986:	ab30      	add	r3, sp, #192	; 0xc0
 801c988:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801c848 <__kernel_rem_pio2f+0x304>
 801c98c:	440b      	add	r3, r1
 801c98e:	2c00      	cmp	r4, #0
 801c990:	da05      	bge.n	801c99e <__kernel_rem_pio2f+0x45a>
 801c992:	b10f      	cbz	r7, 801c998 <__kernel_rem_pio2f+0x454>
 801c994:	eef1 7a67 	vneg.f32	s15, s15
 801c998:	edc8 7a00 	vstr	s15, [r8]
 801c99c:	e7ae      	b.n	801c8fc <__kernel_rem_pio2f+0x3b8>
 801c99e:	ed33 7a01 	vldmdb	r3!, {s14}
 801c9a2:	3c01      	subs	r4, #1
 801c9a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c9a8:	e7f1      	b.n	801c98e <__kernel_rem_pio2f+0x44a>
 801c9aa:	ed73 7a01 	vldmdb	r3!, {s15}
 801c9ae:	3a01      	subs	r2, #1
 801c9b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c9b4:	e7d2      	b.n	801c95c <__kernel_rem_pio2f+0x418>
 801c9b6:	eef0 7a47 	vmov.f32	s15, s14
 801c9ba:	e7d4      	b.n	801c966 <__kernel_rem_pio2f+0x422>
 801c9bc:	ecb2 7a01 	vldmia	r2!, {s14}
 801c9c0:	3301      	adds	r3, #1
 801c9c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c9c6:	e7d6      	b.n	801c976 <__kernel_rem_pio2f+0x432>
 801c9c8:	edd2 7a00 	vldr	s15, [r2]
 801c9cc:	3801      	subs	r0, #1
 801c9ce:	edd2 6a01 	vldr	s13, [r2, #4]
 801c9d2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801c9d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c9da:	ed82 7a00 	vstr	s14, [r2]
 801c9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c9e2:	edc2 7a01 	vstr	s15, [r2, #4]
 801c9e6:	e798      	b.n	801c91a <__kernel_rem_pio2f+0x3d6>
 801c9e8:	edd3 7a00 	vldr	s15, [r3]
 801c9ec:	3a01      	subs	r2, #1
 801c9ee:	edd3 6a01 	vldr	s13, [r3, #4]
 801c9f2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801c9f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c9fa:	ed83 7a00 	vstr	s14, [r3]
 801c9fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ca02:	edc3 7a01 	vstr	s15, [r3, #4]
 801ca06:	e78d      	b.n	801c924 <__kernel_rem_pio2f+0x3e0>
 801ca08:	ed33 7a01 	vldmdb	r3!, {s14}
 801ca0c:	3c01      	subs	r4, #1
 801ca0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ca12:	e78f      	b.n	801c934 <__kernel_rem_pio2f+0x3f0>
 801ca14:	eef1 6a66 	vneg.f32	s13, s13
 801ca18:	eeb1 7a47 	vneg.f32	s14, s14
 801ca1c:	eef1 7a67 	vneg.f32	s15, s15
 801ca20:	edc8 6a00 	vstr	s13, [r8]
 801ca24:	ed88 7a01 	vstr	s14, [r8, #4]
 801ca28:	e790      	b.n	801c94c <__kernel_rem_pio2f+0x408>
 801ca2a:	bf00      	nop

0801ca2c <scalbnf>:
 801ca2c:	ee10 3a10 	vmov	r3, s0
 801ca30:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801ca34:	d02a      	beq.n	801ca8c <scalbnf+0x60>
 801ca36:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801ca3a:	d302      	bcc.n	801ca42 <scalbnf+0x16>
 801ca3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ca40:	4770      	bx	lr
 801ca42:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801ca46:	d122      	bne.n	801ca8e <scalbnf+0x62>
 801ca48:	4b23      	ldr	r3, [pc, #140]	; (801cad8 <scalbnf+0xac>)
 801ca4a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801cadc <scalbnf+0xb0>
 801ca4e:	4298      	cmp	r0, r3
 801ca50:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ca54:	db16      	blt.n	801ca84 <scalbnf+0x58>
 801ca56:	ee10 3a10 	vmov	r3, s0
 801ca5a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ca5e:	3a19      	subs	r2, #25
 801ca60:	f24c 3150 	movw	r1, #50000	; 0xc350
 801ca64:	4288      	cmp	r0, r1
 801ca66:	dd14      	ble.n	801ca92 <scalbnf+0x66>
 801ca68:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801cae0 <scalbnf+0xb4>
 801ca6c:	ee10 3a10 	vmov	r3, s0
 801ca70:	eddf 6a1c 	vldr	s13, [pc, #112]	; 801cae4 <scalbnf+0xb8>
 801ca74:	eeb0 7a67 	vmov.f32	s14, s15
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801ca7e:	ee27 0a87 	vmul.f32	s0, s15, s14
 801ca82:	4770      	bx	lr
 801ca84:	eddf 7a18 	vldr	s15, [pc, #96]	; 801cae8 <scalbnf+0xbc>
 801ca88:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ca8c:	4770      	bx	lr
 801ca8e:	0dd2      	lsrs	r2, r2, #23
 801ca90:	e7e6      	b.n	801ca60 <scalbnf+0x34>
 801ca92:	4410      	add	r0, r2
 801ca94:	28fe      	cmp	r0, #254	; 0xfe
 801ca96:	dce7      	bgt.n	801ca68 <scalbnf+0x3c>
 801ca98:	2800      	cmp	r0, #0
 801ca9a:	dd06      	ble.n	801caaa <scalbnf+0x7e>
 801ca9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801caa0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801caa4:	ee00 3a10 	vmov	s0, r3
 801caa8:	4770      	bx	lr
 801caaa:	f110 0f16 	cmn.w	r0, #22
 801caae:	da09      	bge.n	801cac4 <scalbnf+0x98>
 801cab0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801cae8 <scalbnf+0xbc>
 801cab4:	ee10 3a10 	vmov	r3, s0
 801cab8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 801caec <scalbnf+0xc0>
 801cabc:	eeb0 7a67 	vmov.f32	s14, s15
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	e7da      	b.n	801ca7a <scalbnf+0x4e>
 801cac4:	3019      	adds	r0, #25
 801cac6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801caca:	ed9f 0a09 	vldr	s0, [pc, #36]	; 801caf0 <scalbnf+0xc4>
 801cace:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801cad2:	ee07 3a90 	vmov	s15, r3
 801cad6:	e7d7      	b.n	801ca88 <scalbnf+0x5c>
 801cad8:	ffff3cb0 	.word	0xffff3cb0
 801cadc:	4c000000 	.word	0x4c000000
 801cae0:	7149f2ca 	.word	0x7149f2ca
 801cae4:	f149f2ca 	.word	0xf149f2ca
 801cae8:	0da24260 	.word	0x0da24260
 801caec:	8da24260 	.word	0x8da24260
 801caf0:	33000000 	.word	0x33000000

0801caf4 <floorf>:
 801caf4:	febb 0a40 	vrintm.f32	s0, s0
 801caf8:	4770      	bx	lr

0801cafa <abort>:
 801cafa:	2006      	movs	r0, #6
 801cafc:	b508      	push	{r3, lr}
 801cafe:	f000 fa7b 	bl	801cff8 <raise>
 801cb02:	2001      	movs	r0, #1
 801cb04:	f7f2 fc34 	bl	800f370 <_exit>

0801cb08 <malloc>:
 801cb08:	4b02      	ldr	r3, [pc, #8]	; (801cb14 <malloc+0xc>)
 801cb0a:	4601      	mov	r1, r0
 801cb0c:	6818      	ldr	r0, [r3, #0]
 801cb0e:	f000 b82b 	b.w	801cb68 <_malloc_r>
 801cb12:	bf00      	nop
 801cb14:	20000080 	.word	0x20000080

0801cb18 <free>:
 801cb18:	4b02      	ldr	r3, [pc, #8]	; (801cb24 <free+0xc>)
 801cb1a:	4601      	mov	r1, r0
 801cb1c:	6818      	ldr	r0, [r3, #0]
 801cb1e:	f000 bb35 	b.w	801d18c <_free_r>
 801cb22:	bf00      	nop
 801cb24:	20000080 	.word	0x20000080

0801cb28 <sbrk_aligned>:
 801cb28:	b570      	push	{r4, r5, r6, lr}
 801cb2a:	4e0e      	ldr	r6, [pc, #56]	; (801cb64 <sbrk_aligned+0x3c>)
 801cb2c:	460c      	mov	r4, r1
 801cb2e:	4605      	mov	r5, r0
 801cb30:	6831      	ldr	r1, [r6, #0]
 801cb32:	b911      	cbnz	r1, 801cb3a <sbrk_aligned+0x12>
 801cb34:	f000 fab0 	bl	801d098 <_sbrk_r>
 801cb38:	6030      	str	r0, [r6, #0]
 801cb3a:	4621      	mov	r1, r4
 801cb3c:	4628      	mov	r0, r5
 801cb3e:	f000 faab 	bl	801d098 <_sbrk_r>
 801cb42:	1c43      	adds	r3, r0, #1
 801cb44:	d00a      	beq.n	801cb5c <sbrk_aligned+0x34>
 801cb46:	1cc4      	adds	r4, r0, #3
 801cb48:	f024 0403 	bic.w	r4, r4, #3
 801cb4c:	42a0      	cmp	r0, r4
 801cb4e:	d007      	beq.n	801cb60 <sbrk_aligned+0x38>
 801cb50:	1a21      	subs	r1, r4, r0
 801cb52:	4628      	mov	r0, r5
 801cb54:	f000 faa0 	bl	801d098 <_sbrk_r>
 801cb58:	3001      	adds	r0, #1
 801cb5a:	d101      	bne.n	801cb60 <sbrk_aligned+0x38>
 801cb5c:	f04f 34ff 	mov.w	r4, #4294967295
 801cb60:	4620      	mov	r0, r4
 801cb62:	bd70      	pop	{r4, r5, r6, pc}
 801cb64:	20003708 	.word	0x20003708

0801cb68 <_malloc_r>:
 801cb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cb6c:	1ccd      	adds	r5, r1, #3
 801cb6e:	4607      	mov	r7, r0
 801cb70:	f025 0503 	bic.w	r5, r5, #3
 801cb74:	3508      	adds	r5, #8
 801cb76:	2d0c      	cmp	r5, #12
 801cb78:	bf38      	it	cc
 801cb7a:	250c      	movcc	r5, #12
 801cb7c:	2d00      	cmp	r5, #0
 801cb7e:	db01      	blt.n	801cb84 <_malloc_r+0x1c>
 801cb80:	42a9      	cmp	r1, r5
 801cb82:	d905      	bls.n	801cb90 <_malloc_r+0x28>
 801cb84:	230c      	movs	r3, #12
 801cb86:	2600      	movs	r6, #0
 801cb88:	603b      	str	r3, [r7, #0]
 801cb8a:	4630      	mov	r0, r6
 801cb8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801cc64 <_malloc_r+0xfc>
 801cb94:	f000 f868 	bl	801cc68 <__malloc_lock>
 801cb98:	f8d8 3000 	ldr.w	r3, [r8]
 801cb9c:	461c      	mov	r4, r3
 801cb9e:	bb5c      	cbnz	r4, 801cbf8 <_malloc_r+0x90>
 801cba0:	4629      	mov	r1, r5
 801cba2:	4638      	mov	r0, r7
 801cba4:	f7ff ffc0 	bl	801cb28 <sbrk_aligned>
 801cba8:	1c43      	adds	r3, r0, #1
 801cbaa:	4604      	mov	r4, r0
 801cbac:	d155      	bne.n	801cc5a <_malloc_r+0xf2>
 801cbae:	f8d8 4000 	ldr.w	r4, [r8]
 801cbb2:	4626      	mov	r6, r4
 801cbb4:	2e00      	cmp	r6, #0
 801cbb6:	d145      	bne.n	801cc44 <_malloc_r+0xdc>
 801cbb8:	2c00      	cmp	r4, #0
 801cbba:	d048      	beq.n	801cc4e <_malloc_r+0xe6>
 801cbbc:	6823      	ldr	r3, [r4, #0]
 801cbbe:	4631      	mov	r1, r6
 801cbc0:	4638      	mov	r0, r7
 801cbc2:	eb04 0903 	add.w	r9, r4, r3
 801cbc6:	f000 fa67 	bl	801d098 <_sbrk_r>
 801cbca:	4581      	cmp	r9, r0
 801cbcc:	d13f      	bne.n	801cc4e <_malloc_r+0xe6>
 801cbce:	6821      	ldr	r1, [r4, #0]
 801cbd0:	4638      	mov	r0, r7
 801cbd2:	1a6d      	subs	r5, r5, r1
 801cbd4:	4629      	mov	r1, r5
 801cbd6:	f7ff ffa7 	bl	801cb28 <sbrk_aligned>
 801cbda:	3001      	adds	r0, #1
 801cbdc:	d037      	beq.n	801cc4e <_malloc_r+0xe6>
 801cbde:	6823      	ldr	r3, [r4, #0]
 801cbe0:	442b      	add	r3, r5
 801cbe2:	6023      	str	r3, [r4, #0]
 801cbe4:	f8d8 3000 	ldr.w	r3, [r8]
 801cbe8:	2b00      	cmp	r3, #0
 801cbea:	d038      	beq.n	801cc5e <_malloc_r+0xf6>
 801cbec:	685a      	ldr	r2, [r3, #4]
 801cbee:	42a2      	cmp	r2, r4
 801cbf0:	d12b      	bne.n	801cc4a <_malloc_r+0xe2>
 801cbf2:	2200      	movs	r2, #0
 801cbf4:	605a      	str	r2, [r3, #4]
 801cbf6:	e00f      	b.n	801cc18 <_malloc_r+0xb0>
 801cbf8:	6822      	ldr	r2, [r4, #0]
 801cbfa:	1b52      	subs	r2, r2, r5
 801cbfc:	d41f      	bmi.n	801cc3e <_malloc_r+0xd6>
 801cbfe:	2a0b      	cmp	r2, #11
 801cc00:	d917      	bls.n	801cc32 <_malloc_r+0xca>
 801cc02:	1961      	adds	r1, r4, r5
 801cc04:	42a3      	cmp	r3, r4
 801cc06:	6025      	str	r5, [r4, #0]
 801cc08:	bf18      	it	ne
 801cc0a:	6059      	strne	r1, [r3, #4]
 801cc0c:	6863      	ldr	r3, [r4, #4]
 801cc0e:	bf08      	it	eq
 801cc10:	f8c8 1000 	streq.w	r1, [r8]
 801cc14:	5162      	str	r2, [r4, r5]
 801cc16:	604b      	str	r3, [r1, #4]
 801cc18:	f104 060b 	add.w	r6, r4, #11
 801cc1c:	4638      	mov	r0, r7
 801cc1e:	f000 f829 	bl	801cc74 <__malloc_unlock>
 801cc22:	1d23      	adds	r3, r4, #4
 801cc24:	f026 0607 	bic.w	r6, r6, #7
 801cc28:	1af2      	subs	r2, r6, r3
 801cc2a:	d0ae      	beq.n	801cb8a <_malloc_r+0x22>
 801cc2c:	1b9b      	subs	r3, r3, r6
 801cc2e:	50a3      	str	r3, [r4, r2]
 801cc30:	e7ab      	b.n	801cb8a <_malloc_r+0x22>
 801cc32:	42a3      	cmp	r3, r4
 801cc34:	6862      	ldr	r2, [r4, #4]
 801cc36:	d1dd      	bne.n	801cbf4 <_malloc_r+0x8c>
 801cc38:	f8c8 2000 	str.w	r2, [r8]
 801cc3c:	e7ec      	b.n	801cc18 <_malloc_r+0xb0>
 801cc3e:	4623      	mov	r3, r4
 801cc40:	6864      	ldr	r4, [r4, #4]
 801cc42:	e7ac      	b.n	801cb9e <_malloc_r+0x36>
 801cc44:	4634      	mov	r4, r6
 801cc46:	6876      	ldr	r6, [r6, #4]
 801cc48:	e7b4      	b.n	801cbb4 <_malloc_r+0x4c>
 801cc4a:	4613      	mov	r3, r2
 801cc4c:	e7cc      	b.n	801cbe8 <_malloc_r+0x80>
 801cc4e:	230c      	movs	r3, #12
 801cc50:	4638      	mov	r0, r7
 801cc52:	603b      	str	r3, [r7, #0]
 801cc54:	f000 f80e 	bl	801cc74 <__malloc_unlock>
 801cc58:	e797      	b.n	801cb8a <_malloc_r+0x22>
 801cc5a:	6025      	str	r5, [r4, #0]
 801cc5c:	e7dc      	b.n	801cc18 <_malloc_r+0xb0>
 801cc5e:	605b      	str	r3, [r3, #4]
 801cc60:	deff      	udf	#255	; 0xff
 801cc62:	bf00      	nop
 801cc64:	20003704 	.word	0x20003704

0801cc68 <__malloc_lock>:
 801cc68:	4801      	ldr	r0, [pc, #4]	; (801cc70 <__malloc_lock+0x8>)
 801cc6a:	f000 ba62 	b.w	801d132 <__retarget_lock_acquire_recursive>
 801cc6e:	bf00      	nop
 801cc70:	2000384c 	.word	0x2000384c

0801cc74 <__malloc_unlock>:
 801cc74:	4801      	ldr	r0, [pc, #4]	; (801cc7c <__malloc_unlock+0x8>)
 801cc76:	f000 ba5d 	b.w	801d134 <__retarget_lock_release_recursive>
 801cc7a:	bf00      	nop
 801cc7c:	2000384c 	.word	0x2000384c

0801cc80 <rand>:
 801cc80:	4b16      	ldr	r3, [pc, #88]	; (801ccdc <rand+0x5c>)
 801cc82:	b510      	push	{r4, lr}
 801cc84:	681c      	ldr	r4, [r3, #0]
 801cc86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cc88:	b9b3      	cbnz	r3, 801ccb8 <rand+0x38>
 801cc8a:	2018      	movs	r0, #24
 801cc8c:	f7ff ff3c 	bl	801cb08 <malloc>
 801cc90:	4602      	mov	r2, r0
 801cc92:	6320      	str	r0, [r4, #48]	; 0x30
 801cc94:	b920      	cbnz	r0, 801cca0 <rand+0x20>
 801cc96:	4b12      	ldr	r3, [pc, #72]	; (801cce0 <rand+0x60>)
 801cc98:	2152      	movs	r1, #82	; 0x52
 801cc9a:	4812      	ldr	r0, [pc, #72]	; (801cce4 <rand+0x64>)
 801cc9c:	f000 fa58 	bl	801d150 <__assert_func>
 801cca0:	4911      	ldr	r1, [pc, #68]	; (801cce8 <rand+0x68>)
 801cca2:	4b12      	ldr	r3, [pc, #72]	; (801ccec <rand+0x6c>)
 801cca4:	e9c0 1300 	strd	r1, r3, [r0]
 801cca8:	4b11      	ldr	r3, [pc, #68]	; (801ccf0 <rand+0x70>)
 801ccaa:	2100      	movs	r1, #0
 801ccac:	6083      	str	r3, [r0, #8]
 801ccae:	230b      	movs	r3, #11
 801ccb0:	8183      	strh	r3, [r0, #12]
 801ccb2:	2001      	movs	r0, #1
 801ccb4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ccb8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801ccba:	480e      	ldr	r0, [pc, #56]	; (801ccf4 <rand+0x74>)
 801ccbc:	690b      	ldr	r3, [r1, #16]
 801ccbe:	694c      	ldr	r4, [r1, #20]
 801ccc0:	4a0d      	ldr	r2, [pc, #52]	; (801ccf8 <rand+0x78>)
 801ccc2:	4358      	muls	r0, r3
 801ccc4:	fb02 0004 	mla	r0, r2, r4, r0
 801ccc8:	fba3 3202 	umull	r3, r2, r3, r2
 801cccc:	3301      	adds	r3, #1
 801ccce:	eb40 0002 	adc.w	r0, r0, r2
 801ccd2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801ccd6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ccda:	bd10      	pop	{r4, pc}
 801ccdc:	20000080 	.word	0x20000080
 801cce0:	0801ec30 	.word	0x0801ec30
 801cce4:	0801ec47 	.word	0x0801ec47
 801cce8:	abcd330e 	.word	0xabcd330e
 801ccec:	e66d1234 	.word	0xe66d1234
 801ccf0:	0005deec 	.word	0x0005deec
 801ccf4:	5851f42d 	.word	0x5851f42d
 801ccf8:	4c957f2d 	.word	0x4c957f2d

0801ccfc <std>:
 801ccfc:	2300      	movs	r3, #0
 801ccfe:	b510      	push	{r4, lr}
 801cd00:	4604      	mov	r4, r0
 801cd02:	6083      	str	r3, [r0, #8]
 801cd04:	8181      	strh	r1, [r0, #12]
 801cd06:	4619      	mov	r1, r3
 801cd08:	6643      	str	r3, [r0, #100]	; 0x64
 801cd0a:	81c2      	strh	r2, [r0, #14]
 801cd0c:	2208      	movs	r2, #8
 801cd0e:	6183      	str	r3, [r0, #24]
 801cd10:	e9c0 3300 	strd	r3, r3, [r0]
 801cd14:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cd18:	305c      	adds	r0, #92	; 0x5c
 801cd1a:	f000 f93c 	bl	801cf96 <memset>
 801cd1e:	4b0d      	ldr	r3, [pc, #52]	; (801cd54 <std+0x58>)
 801cd20:	6224      	str	r4, [r4, #32]
 801cd22:	6263      	str	r3, [r4, #36]	; 0x24
 801cd24:	4b0c      	ldr	r3, [pc, #48]	; (801cd58 <std+0x5c>)
 801cd26:	62a3      	str	r3, [r4, #40]	; 0x28
 801cd28:	4b0c      	ldr	r3, [pc, #48]	; (801cd5c <std+0x60>)
 801cd2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cd2c:	4b0c      	ldr	r3, [pc, #48]	; (801cd60 <std+0x64>)
 801cd2e:	6323      	str	r3, [r4, #48]	; 0x30
 801cd30:	4b0c      	ldr	r3, [pc, #48]	; (801cd64 <std+0x68>)
 801cd32:	429c      	cmp	r4, r3
 801cd34:	d006      	beq.n	801cd44 <std+0x48>
 801cd36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801cd3a:	4294      	cmp	r4, r2
 801cd3c:	d002      	beq.n	801cd44 <std+0x48>
 801cd3e:	33d0      	adds	r3, #208	; 0xd0
 801cd40:	429c      	cmp	r4, r3
 801cd42:	d105      	bne.n	801cd50 <std+0x54>
 801cd44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cd48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cd4c:	f000 b9f0 	b.w	801d130 <__retarget_lock_init_recursive>
 801cd50:	bd10      	pop	{r4, pc}
 801cd52:	bf00      	nop
 801cd54:	0801ced9 	.word	0x0801ced9
 801cd58:	0801ceff 	.word	0x0801ceff
 801cd5c:	0801cf37 	.word	0x0801cf37
 801cd60:	0801cf5b 	.word	0x0801cf5b
 801cd64:	2000370c 	.word	0x2000370c

0801cd68 <stdio_exit_handler>:
 801cd68:	4a02      	ldr	r2, [pc, #8]	; (801cd74 <stdio_exit_handler+0xc>)
 801cd6a:	4903      	ldr	r1, [pc, #12]	; (801cd78 <stdio_exit_handler+0x10>)
 801cd6c:	4803      	ldr	r0, [pc, #12]	; (801cd7c <stdio_exit_handler+0x14>)
 801cd6e:	f000 b869 	b.w	801ce44 <_fwalk_sglue>
 801cd72:	bf00      	nop
 801cd74:	20000028 	.word	0x20000028
 801cd78:	0801d969 	.word	0x0801d969
 801cd7c:	20000034 	.word	0x20000034

0801cd80 <cleanup_stdio>:
 801cd80:	6841      	ldr	r1, [r0, #4]
 801cd82:	4b0c      	ldr	r3, [pc, #48]	; (801cdb4 <cleanup_stdio+0x34>)
 801cd84:	4299      	cmp	r1, r3
 801cd86:	b510      	push	{r4, lr}
 801cd88:	4604      	mov	r4, r0
 801cd8a:	d001      	beq.n	801cd90 <cleanup_stdio+0x10>
 801cd8c:	f000 fdec 	bl	801d968 <_fflush_r>
 801cd90:	68a1      	ldr	r1, [r4, #8]
 801cd92:	4b09      	ldr	r3, [pc, #36]	; (801cdb8 <cleanup_stdio+0x38>)
 801cd94:	4299      	cmp	r1, r3
 801cd96:	d002      	beq.n	801cd9e <cleanup_stdio+0x1e>
 801cd98:	4620      	mov	r0, r4
 801cd9a:	f000 fde5 	bl	801d968 <_fflush_r>
 801cd9e:	68e1      	ldr	r1, [r4, #12]
 801cda0:	4b06      	ldr	r3, [pc, #24]	; (801cdbc <cleanup_stdio+0x3c>)
 801cda2:	4299      	cmp	r1, r3
 801cda4:	d004      	beq.n	801cdb0 <cleanup_stdio+0x30>
 801cda6:	4620      	mov	r0, r4
 801cda8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cdac:	f000 bddc 	b.w	801d968 <_fflush_r>
 801cdb0:	bd10      	pop	{r4, pc}
 801cdb2:	bf00      	nop
 801cdb4:	2000370c 	.word	0x2000370c
 801cdb8:	20003774 	.word	0x20003774
 801cdbc:	200037dc 	.word	0x200037dc

0801cdc0 <global_stdio_init.part.0>:
 801cdc0:	b510      	push	{r4, lr}
 801cdc2:	4b0b      	ldr	r3, [pc, #44]	; (801cdf0 <global_stdio_init.part.0+0x30>)
 801cdc4:	2104      	movs	r1, #4
 801cdc6:	4c0b      	ldr	r4, [pc, #44]	; (801cdf4 <global_stdio_init.part.0+0x34>)
 801cdc8:	4a0b      	ldr	r2, [pc, #44]	; (801cdf8 <global_stdio_init.part.0+0x38>)
 801cdca:	4620      	mov	r0, r4
 801cdcc:	601a      	str	r2, [r3, #0]
 801cdce:	2200      	movs	r2, #0
 801cdd0:	f7ff ff94 	bl	801ccfc <std>
 801cdd4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801cdd8:	2201      	movs	r2, #1
 801cdda:	2109      	movs	r1, #9
 801cddc:	f7ff ff8e 	bl	801ccfc <std>
 801cde0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801cde4:	2202      	movs	r2, #2
 801cde6:	2112      	movs	r1, #18
 801cde8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cdec:	f7ff bf86 	b.w	801ccfc <std>
 801cdf0:	20003844 	.word	0x20003844
 801cdf4:	2000370c 	.word	0x2000370c
 801cdf8:	0801cd69 	.word	0x0801cd69

0801cdfc <__sfp_lock_acquire>:
 801cdfc:	4801      	ldr	r0, [pc, #4]	; (801ce04 <__sfp_lock_acquire+0x8>)
 801cdfe:	f000 b998 	b.w	801d132 <__retarget_lock_acquire_recursive>
 801ce02:	bf00      	nop
 801ce04:	2000384d 	.word	0x2000384d

0801ce08 <__sfp_lock_release>:
 801ce08:	4801      	ldr	r0, [pc, #4]	; (801ce10 <__sfp_lock_release+0x8>)
 801ce0a:	f000 b993 	b.w	801d134 <__retarget_lock_release_recursive>
 801ce0e:	bf00      	nop
 801ce10:	2000384d 	.word	0x2000384d

0801ce14 <__sinit>:
 801ce14:	b510      	push	{r4, lr}
 801ce16:	4604      	mov	r4, r0
 801ce18:	f7ff fff0 	bl	801cdfc <__sfp_lock_acquire>
 801ce1c:	6a23      	ldr	r3, [r4, #32]
 801ce1e:	b11b      	cbz	r3, 801ce28 <__sinit+0x14>
 801ce20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce24:	f7ff bff0 	b.w	801ce08 <__sfp_lock_release>
 801ce28:	4b04      	ldr	r3, [pc, #16]	; (801ce3c <__sinit+0x28>)
 801ce2a:	6223      	str	r3, [r4, #32]
 801ce2c:	4b04      	ldr	r3, [pc, #16]	; (801ce40 <__sinit+0x2c>)
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d1f5      	bne.n	801ce20 <__sinit+0xc>
 801ce34:	f7ff ffc4 	bl	801cdc0 <global_stdio_init.part.0>
 801ce38:	e7f2      	b.n	801ce20 <__sinit+0xc>
 801ce3a:	bf00      	nop
 801ce3c:	0801cd81 	.word	0x0801cd81
 801ce40:	20003844 	.word	0x20003844

0801ce44 <_fwalk_sglue>:
 801ce44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ce48:	4607      	mov	r7, r0
 801ce4a:	4688      	mov	r8, r1
 801ce4c:	4614      	mov	r4, r2
 801ce4e:	2600      	movs	r6, #0
 801ce50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ce54:	f1b9 0901 	subs.w	r9, r9, #1
 801ce58:	d505      	bpl.n	801ce66 <_fwalk_sglue+0x22>
 801ce5a:	6824      	ldr	r4, [r4, #0]
 801ce5c:	2c00      	cmp	r4, #0
 801ce5e:	d1f7      	bne.n	801ce50 <_fwalk_sglue+0xc>
 801ce60:	4630      	mov	r0, r6
 801ce62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ce66:	89ab      	ldrh	r3, [r5, #12]
 801ce68:	2b01      	cmp	r3, #1
 801ce6a:	d907      	bls.n	801ce7c <_fwalk_sglue+0x38>
 801ce6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ce70:	3301      	adds	r3, #1
 801ce72:	d003      	beq.n	801ce7c <_fwalk_sglue+0x38>
 801ce74:	4629      	mov	r1, r5
 801ce76:	4638      	mov	r0, r7
 801ce78:	47c0      	blx	r8
 801ce7a:	4306      	orrs	r6, r0
 801ce7c:	3568      	adds	r5, #104	; 0x68
 801ce7e:	e7e9      	b.n	801ce54 <_fwalk_sglue+0x10>

0801ce80 <siscanf>:
 801ce80:	b40e      	push	{r1, r2, r3}
 801ce82:	b510      	push	{r4, lr}
 801ce84:	b09f      	sub	sp, #124	; 0x7c
 801ce86:	f44f 7101 	mov.w	r1, #516	; 0x204
 801ce8a:	ac21      	add	r4, sp, #132	; 0x84
 801ce8c:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ce90:	9004      	str	r0, [sp, #16]
 801ce92:	f854 2b04 	ldr.w	r2, [r4], #4
 801ce96:	9008      	str	r0, [sp, #32]
 801ce98:	9201      	str	r2, [sp, #4]
 801ce9a:	f7e3 f9db 	bl	8000254 <strlen>
 801ce9e:	4b0c      	ldr	r3, [pc, #48]	; (801ced0 <siscanf+0x50>)
 801cea0:	a904      	add	r1, sp, #16
 801cea2:	9005      	str	r0, [sp, #20]
 801cea4:	930d      	str	r3, [sp, #52]	; 0x34
 801cea6:	2300      	movs	r3, #0
 801cea8:	9009      	str	r0, [sp, #36]	; 0x24
 801ceaa:	9311      	str	r3, [sp, #68]	; 0x44
 801ceac:	9316      	str	r3, [sp, #88]	; 0x58
 801ceae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ceb2:	4808      	ldr	r0, [pc, #32]	; (801ced4 <siscanf+0x54>)
 801ceb4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ceb8:	4623      	mov	r3, r4
 801ceba:	9a01      	ldr	r2, [sp, #4]
 801cebc:	6800      	ldr	r0, [r0, #0]
 801cebe:	9403      	str	r4, [sp, #12]
 801cec0:	f000 fa0a 	bl	801d2d8 <__ssvfiscanf_r>
 801cec4:	b01f      	add	sp, #124	; 0x7c
 801cec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ceca:	b003      	add	sp, #12
 801cecc:	4770      	bx	lr
 801cece:	bf00      	nop
 801ced0:	0801cefb 	.word	0x0801cefb
 801ced4:	20000080 	.word	0x20000080

0801ced8 <__sread>:
 801ced8:	b510      	push	{r4, lr}
 801ceda:	460c      	mov	r4, r1
 801cedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cee0:	f000 f8b4 	bl	801d04c <_read_r>
 801cee4:	2800      	cmp	r0, #0
 801cee6:	bfab      	itete	ge
 801cee8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ceea:	89a3      	ldrhlt	r3, [r4, #12]
 801ceec:	181b      	addge	r3, r3, r0
 801ceee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cef2:	bfac      	ite	ge
 801cef4:	6563      	strge	r3, [r4, #84]	; 0x54
 801cef6:	81a3      	strhlt	r3, [r4, #12]
 801cef8:	bd10      	pop	{r4, pc}

0801cefa <__seofread>:
 801cefa:	2000      	movs	r0, #0
 801cefc:	4770      	bx	lr

0801cefe <__swrite>:
 801cefe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf02:	461f      	mov	r7, r3
 801cf04:	898b      	ldrh	r3, [r1, #12]
 801cf06:	4605      	mov	r5, r0
 801cf08:	460c      	mov	r4, r1
 801cf0a:	05db      	lsls	r3, r3, #23
 801cf0c:	4616      	mov	r6, r2
 801cf0e:	d505      	bpl.n	801cf1c <__swrite+0x1e>
 801cf10:	2302      	movs	r3, #2
 801cf12:	2200      	movs	r2, #0
 801cf14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf18:	f000 f886 	bl	801d028 <_lseek_r>
 801cf1c:	89a3      	ldrh	r3, [r4, #12]
 801cf1e:	4632      	mov	r2, r6
 801cf20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cf24:	4628      	mov	r0, r5
 801cf26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cf2a:	81a3      	strh	r3, [r4, #12]
 801cf2c:	463b      	mov	r3, r7
 801cf2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cf32:	f000 b8c1 	b.w	801d0b8 <_write_r>

0801cf36 <__sseek>:
 801cf36:	b510      	push	{r4, lr}
 801cf38:	460c      	mov	r4, r1
 801cf3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf3e:	f000 f873 	bl	801d028 <_lseek_r>
 801cf42:	1c43      	adds	r3, r0, #1
 801cf44:	89a3      	ldrh	r3, [r4, #12]
 801cf46:	bf15      	itete	ne
 801cf48:	6560      	strne	r0, [r4, #84]	; 0x54
 801cf4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cf4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cf52:	81a3      	strheq	r3, [r4, #12]
 801cf54:	bf18      	it	ne
 801cf56:	81a3      	strhne	r3, [r4, #12]
 801cf58:	bd10      	pop	{r4, pc}

0801cf5a <__sclose>:
 801cf5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf5e:	f000 b853 	b.w	801d008 <_close_r>

0801cf62 <memmove>:
 801cf62:	4288      	cmp	r0, r1
 801cf64:	b510      	push	{r4, lr}
 801cf66:	eb01 0402 	add.w	r4, r1, r2
 801cf6a:	d902      	bls.n	801cf72 <memmove+0x10>
 801cf6c:	4284      	cmp	r4, r0
 801cf6e:	4623      	mov	r3, r4
 801cf70:	d807      	bhi.n	801cf82 <memmove+0x20>
 801cf72:	1e43      	subs	r3, r0, #1
 801cf74:	42a1      	cmp	r1, r4
 801cf76:	d008      	beq.n	801cf8a <memmove+0x28>
 801cf78:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cf7c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801cf80:	e7f8      	b.n	801cf74 <memmove+0x12>
 801cf82:	4402      	add	r2, r0
 801cf84:	4601      	mov	r1, r0
 801cf86:	428a      	cmp	r2, r1
 801cf88:	d100      	bne.n	801cf8c <memmove+0x2a>
 801cf8a:	bd10      	pop	{r4, pc}
 801cf8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801cf90:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801cf94:	e7f7      	b.n	801cf86 <memmove+0x24>

0801cf96 <memset>:
 801cf96:	4402      	add	r2, r0
 801cf98:	4603      	mov	r3, r0
 801cf9a:	4293      	cmp	r3, r2
 801cf9c:	d100      	bne.n	801cfa0 <memset+0xa>
 801cf9e:	4770      	bx	lr
 801cfa0:	f803 1b01 	strb.w	r1, [r3], #1
 801cfa4:	e7f9      	b.n	801cf9a <memset+0x4>

0801cfa6 <_raise_r>:
 801cfa6:	291f      	cmp	r1, #31
 801cfa8:	b538      	push	{r3, r4, r5, lr}
 801cfaa:	4604      	mov	r4, r0
 801cfac:	460d      	mov	r5, r1
 801cfae:	d904      	bls.n	801cfba <_raise_r+0x14>
 801cfb0:	2316      	movs	r3, #22
 801cfb2:	6003      	str	r3, [r0, #0]
 801cfb4:	f04f 30ff 	mov.w	r0, #4294967295
 801cfb8:	bd38      	pop	{r3, r4, r5, pc}
 801cfba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801cfbc:	b112      	cbz	r2, 801cfc4 <_raise_r+0x1e>
 801cfbe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cfc2:	b94b      	cbnz	r3, 801cfd8 <_raise_r+0x32>
 801cfc4:	4620      	mov	r0, r4
 801cfc6:	f000 f865 	bl	801d094 <_getpid_r>
 801cfca:	462a      	mov	r2, r5
 801cfcc:	4601      	mov	r1, r0
 801cfce:	4620      	mov	r0, r4
 801cfd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cfd4:	f000 b84c 	b.w	801d070 <_kill_r>
 801cfd8:	2b01      	cmp	r3, #1
 801cfda:	d00a      	beq.n	801cff2 <_raise_r+0x4c>
 801cfdc:	1c59      	adds	r1, r3, #1
 801cfde:	d103      	bne.n	801cfe8 <_raise_r+0x42>
 801cfe0:	2316      	movs	r3, #22
 801cfe2:	6003      	str	r3, [r0, #0]
 801cfe4:	2001      	movs	r0, #1
 801cfe6:	e7e7      	b.n	801cfb8 <_raise_r+0x12>
 801cfe8:	2400      	movs	r4, #0
 801cfea:	4628      	mov	r0, r5
 801cfec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cff0:	4798      	blx	r3
 801cff2:	2000      	movs	r0, #0
 801cff4:	e7e0      	b.n	801cfb8 <_raise_r+0x12>
	...

0801cff8 <raise>:
 801cff8:	4b02      	ldr	r3, [pc, #8]	; (801d004 <raise+0xc>)
 801cffa:	4601      	mov	r1, r0
 801cffc:	6818      	ldr	r0, [r3, #0]
 801cffe:	f7ff bfd2 	b.w	801cfa6 <_raise_r>
 801d002:	bf00      	nop
 801d004:	20000080 	.word	0x20000080

0801d008 <_close_r>:
 801d008:	b538      	push	{r3, r4, r5, lr}
 801d00a:	2300      	movs	r3, #0
 801d00c:	4d05      	ldr	r5, [pc, #20]	; (801d024 <_close_r+0x1c>)
 801d00e:	4604      	mov	r4, r0
 801d010:	4608      	mov	r0, r1
 801d012:	602b      	str	r3, [r5, #0]
 801d014:	f7f2 f9ef 	bl	800f3f6 <_close>
 801d018:	1c43      	adds	r3, r0, #1
 801d01a:	d102      	bne.n	801d022 <_close_r+0x1a>
 801d01c:	682b      	ldr	r3, [r5, #0]
 801d01e:	b103      	cbz	r3, 801d022 <_close_r+0x1a>
 801d020:	6023      	str	r3, [r4, #0]
 801d022:	bd38      	pop	{r3, r4, r5, pc}
 801d024:	20003848 	.word	0x20003848

0801d028 <_lseek_r>:
 801d028:	b538      	push	{r3, r4, r5, lr}
 801d02a:	4604      	mov	r4, r0
 801d02c:	4d06      	ldr	r5, [pc, #24]	; (801d048 <_lseek_r+0x20>)
 801d02e:	4608      	mov	r0, r1
 801d030:	4611      	mov	r1, r2
 801d032:	2200      	movs	r2, #0
 801d034:	602a      	str	r2, [r5, #0]
 801d036:	461a      	mov	r2, r3
 801d038:	f7f2 fa04 	bl	800f444 <_lseek>
 801d03c:	1c43      	adds	r3, r0, #1
 801d03e:	d102      	bne.n	801d046 <_lseek_r+0x1e>
 801d040:	682b      	ldr	r3, [r5, #0]
 801d042:	b103      	cbz	r3, 801d046 <_lseek_r+0x1e>
 801d044:	6023      	str	r3, [r4, #0]
 801d046:	bd38      	pop	{r3, r4, r5, pc}
 801d048:	20003848 	.word	0x20003848

0801d04c <_read_r>:
 801d04c:	b538      	push	{r3, r4, r5, lr}
 801d04e:	4604      	mov	r4, r0
 801d050:	4d06      	ldr	r5, [pc, #24]	; (801d06c <_read_r+0x20>)
 801d052:	4608      	mov	r0, r1
 801d054:	4611      	mov	r1, r2
 801d056:	2200      	movs	r2, #0
 801d058:	602a      	str	r2, [r5, #0]
 801d05a:	461a      	mov	r2, r3
 801d05c:	f7f2 f992 	bl	800f384 <_read>
 801d060:	1c43      	adds	r3, r0, #1
 801d062:	d102      	bne.n	801d06a <_read_r+0x1e>
 801d064:	682b      	ldr	r3, [r5, #0]
 801d066:	b103      	cbz	r3, 801d06a <_read_r+0x1e>
 801d068:	6023      	str	r3, [r4, #0]
 801d06a:	bd38      	pop	{r3, r4, r5, pc}
 801d06c:	20003848 	.word	0x20003848

0801d070 <_kill_r>:
 801d070:	b538      	push	{r3, r4, r5, lr}
 801d072:	2300      	movs	r3, #0
 801d074:	4d06      	ldr	r5, [pc, #24]	; (801d090 <_kill_r+0x20>)
 801d076:	4604      	mov	r4, r0
 801d078:	4608      	mov	r0, r1
 801d07a:	4611      	mov	r1, r2
 801d07c:	602b      	str	r3, [r5, #0]
 801d07e:	f7f2 f967 	bl	800f350 <_kill>
 801d082:	1c43      	adds	r3, r0, #1
 801d084:	d102      	bne.n	801d08c <_kill_r+0x1c>
 801d086:	682b      	ldr	r3, [r5, #0]
 801d088:	b103      	cbz	r3, 801d08c <_kill_r+0x1c>
 801d08a:	6023      	str	r3, [r4, #0]
 801d08c:	bd38      	pop	{r3, r4, r5, pc}
 801d08e:	bf00      	nop
 801d090:	20003848 	.word	0x20003848

0801d094 <_getpid_r>:
 801d094:	f7f2 b954 	b.w	800f340 <_getpid>

0801d098 <_sbrk_r>:
 801d098:	b538      	push	{r3, r4, r5, lr}
 801d09a:	2300      	movs	r3, #0
 801d09c:	4d05      	ldr	r5, [pc, #20]	; (801d0b4 <_sbrk_r+0x1c>)
 801d09e:	4604      	mov	r4, r0
 801d0a0:	4608      	mov	r0, r1
 801d0a2:	602b      	str	r3, [r5, #0]
 801d0a4:	f7f2 f9dc 	bl	800f460 <_sbrk>
 801d0a8:	1c43      	adds	r3, r0, #1
 801d0aa:	d102      	bne.n	801d0b2 <_sbrk_r+0x1a>
 801d0ac:	682b      	ldr	r3, [r5, #0]
 801d0ae:	b103      	cbz	r3, 801d0b2 <_sbrk_r+0x1a>
 801d0b0:	6023      	str	r3, [r4, #0]
 801d0b2:	bd38      	pop	{r3, r4, r5, pc}
 801d0b4:	20003848 	.word	0x20003848

0801d0b8 <_write_r>:
 801d0b8:	b538      	push	{r3, r4, r5, lr}
 801d0ba:	4604      	mov	r4, r0
 801d0bc:	4d06      	ldr	r5, [pc, #24]	; (801d0d8 <_write_r+0x20>)
 801d0be:	4608      	mov	r0, r1
 801d0c0:	4611      	mov	r1, r2
 801d0c2:	2200      	movs	r2, #0
 801d0c4:	602a      	str	r2, [r5, #0]
 801d0c6:	461a      	mov	r2, r3
 801d0c8:	f7f2 f979 	bl	800f3be <_write>
 801d0cc:	1c43      	adds	r3, r0, #1
 801d0ce:	d102      	bne.n	801d0d6 <_write_r+0x1e>
 801d0d0:	682b      	ldr	r3, [r5, #0]
 801d0d2:	b103      	cbz	r3, 801d0d6 <_write_r+0x1e>
 801d0d4:	6023      	str	r3, [r4, #0]
 801d0d6:	bd38      	pop	{r3, r4, r5, pc}
 801d0d8:	20003848 	.word	0x20003848

0801d0dc <__errno>:
 801d0dc:	4b01      	ldr	r3, [pc, #4]	; (801d0e4 <__errno+0x8>)
 801d0de:	6818      	ldr	r0, [r3, #0]
 801d0e0:	4770      	bx	lr
 801d0e2:	bf00      	nop
 801d0e4:	20000080 	.word	0x20000080

0801d0e8 <__libc_init_array>:
 801d0e8:	b570      	push	{r4, r5, r6, lr}
 801d0ea:	4d0d      	ldr	r5, [pc, #52]	; (801d120 <__libc_init_array+0x38>)
 801d0ec:	2600      	movs	r6, #0
 801d0ee:	4c0d      	ldr	r4, [pc, #52]	; (801d124 <__libc_init_array+0x3c>)
 801d0f0:	1b64      	subs	r4, r4, r5
 801d0f2:	10a4      	asrs	r4, r4, #2
 801d0f4:	42a6      	cmp	r6, r4
 801d0f6:	d109      	bne.n	801d10c <__libc_init_array+0x24>
 801d0f8:	4d0b      	ldr	r5, [pc, #44]	; (801d128 <__libc_init_array+0x40>)
 801d0fa:	2600      	movs	r6, #0
 801d0fc:	4c0b      	ldr	r4, [pc, #44]	; (801d12c <__libc_init_array+0x44>)
 801d0fe:	f001 fa0b 	bl	801e518 <_init>
 801d102:	1b64      	subs	r4, r4, r5
 801d104:	10a4      	asrs	r4, r4, #2
 801d106:	42a6      	cmp	r6, r4
 801d108:	d105      	bne.n	801d116 <__libc_init_array+0x2e>
 801d10a:	bd70      	pop	{r4, r5, r6, pc}
 801d10c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d110:	3601      	adds	r6, #1
 801d112:	4798      	blx	r3
 801d114:	e7ee      	b.n	801d0f4 <__libc_init_array+0xc>
 801d116:	f855 3b04 	ldr.w	r3, [r5], #4
 801d11a:	3601      	adds	r6, #1
 801d11c:	4798      	blx	r3
 801d11e:	e7f2      	b.n	801d106 <__libc_init_array+0x1e>
 801d120:	0801ee34 	.word	0x0801ee34
 801d124:	0801ee34 	.word	0x0801ee34
 801d128:	0801ee34 	.word	0x0801ee34
 801d12c:	0801ee38 	.word	0x0801ee38

0801d130 <__retarget_lock_init_recursive>:
 801d130:	4770      	bx	lr

0801d132 <__retarget_lock_acquire_recursive>:
 801d132:	4770      	bx	lr

0801d134 <__retarget_lock_release_recursive>:
 801d134:	4770      	bx	lr

0801d136 <memcpy>:
 801d136:	440a      	add	r2, r1
 801d138:	1e43      	subs	r3, r0, #1
 801d13a:	4291      	cmp	r1, r2
 801d13c:	d100      	bne.n	801d140 <memcpy+0xa>
 801d13e:	4770      	bx	lr
 801d140:	b510      	push	{r4, lr}
 801d142:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d146:	4291      	cmp	r1, r2
 801d148:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d14c:	d1f9      	bne.n	801d142 <memcpy+0xc>
 801d14e:	bd10      	pop	{r4, pc}

0801d150 <__assert_func>:
 801d150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d152:	4614      	mov	r4, r2
 801d154:	461a      	mov	r2, r3
 801d156:	4b09      	ldr	r3, [pc, #36]	; (801d17c <__assert_func+0x2c>)
 801d158:	4605      	mov	r5, r0
 801d15a:	681b      	ldr	r3, [r3, #0]
 801d15c:	68d8      	ldr	r0, [r3, #12]
 801d15e:	b14c      	cbz	r4, 801d174 <__assert_func+0x24>
 801d160:	4b07      	ldr	r3, [pc, #28]	; (801d180 <__assert_func+0x30>)
 801d162:	9100      	str	r1, [sp, #0]
 801d164:	4907      	ldr	r1, [pc, #28]	; (801d184 <__assert_func+0x34>)
 801d166:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d16a:	462b      	mov	r3, r5
 801d16c:	f000 fc24 	bl	801d9b8 <fiprintf>
 801d170:	f7ff fcc3 	bl	801cafa <abort>
 801d174:	4b04      	ldr	r3, [pc, #16]	; (801d188 <__assert_func+0x38>)
 801d176:	461c      	mov	r4, r3
 801d178:	e7f3      	b.n	801d162 <__assert_func+0x12>
 801d17a:	bf00      	nop
 801d17c:	20000080 	.word	0x20000080
 801d180:	0801ec9f 	.word	0x0801ec9f
 801d184:	0801ecac 	.word	0x0801ecac
 801d188:	0801ecda 	.word	0x0801ecda

0801d18c <_free_r>:
 801d18c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d18e:	2900      	cmp	r1, #0
 801d190:	d043      	beq.n	801d21a <_free_r+0x8e>
 801d192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d196:	1f0c      	subs	r4, r1, #4
 801d198:	9001      	str	r0, [sp, #4]
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	bfb8      	it	lt
 801d19e:	18e4      	addlt	r4, r4, r3
 801d1a0:	f7ff fd62 	bl	801cc68 <__malloc_lock>
 801d1a4:	4a1e      	ldr	r2, [pc, #120]	; (801d220 <_free_r+0x94>)
 801d1a6:	9801      	ldr	r0, [sp, #4]
 801d1a8:	6813      	ldr	r3, [r2, #0]
 801d1aa:	b933      	cbnz	r3, 801d1ba <_free_r+0x2e>
 801d1ac:	6063      	str	r3, [r4, #4]
 801d1ae:	6014      	str	r4, [r2, #0]
 801d1b0:	b003      	add	sp, #12
 801d1b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d1b6:	f7ff bd5d 	b.w	801cc74 <__malloc_unlock>
 801d1ba:	42a3      	cmp	r3, r4
 801d1bc:	d908      	bls.n	801d1d0 <_free_r+0x44>
 801d1be:	6825      	ldr	r5, [r4, #0]
 801d1c0:	1961      	adds	r1, r4, r5
 801d1c2:	428b      	cmp	r3, r1
 801d1c4:	bf01      	itttt	eq
 801d1c6:	6819      	ldreq	r1, [r3, #0]
 801d1c8:	685b      	ldreq	r3, [r3, #4]
 801d1ca:	1949      	addeq	r1, r1, r5
 801d1cc:	6021      	streq	r1, [r4, #0]
 801d1ce:	e7ed      	b.n	801d1ac <_free_r+0x20>
 801d1d0:	461a      	mov	r2, r3
 801d1d2:	685b      	ldr	r3, [r3, #4]
 801d1d4:	b10b      	cbz	r3, 801d1da <_free_r+0x4e>
 801d1d6:	42a3      	cmp	r3, r4
 801d1d8:	d9fa      	bls.n	801d1d0 <_free_r+0x44>
 801d1da:	6811      	ldr	r1, [r2, #0]
 801d1dc:	1855      	adds	r5, r2, r1
 801d1de:	42a5      	cmp	r5, r4
 801d1e0:	d10b      	bne.n	801d1fa <_free_r+0x6e>
 801d1e2:	6824      	ldr	r4, [r4, #0]
 801d1e4:	4421      	add	r1, r4
 801d1e6:	1854      	adds	r4, r2, r1
 801d1e8:	6011      	str	r1, [r2, #0]
 801d1ea:	42a3      	cmp	r3, r4
 801d1ec:	d1e0      	bne.n	801d1b0 <_free_r+0x24>
 801d1ee:	681c      	ldr	r4, [r3, #0]
 801d1f0:	685b      	ldr	r3, [r3, #4]
 801d1f2:	440c      	add	r4, r1
 801d1f4:	6053      	str	r3, [r2, #4]
 801d1f6:	6014      	str	r4, [r2, #0]
 801d1f8:	e7da      	b.n	801d1b0 <_free_r+0x24>
 801d1fa:	d902      	bls.n	801d202 <_free_r+0x76>
 801d1fc:	230c      	movs	r3, #12
 801d1fe:	6003      	str	r3, [r0, #0]
 801d200:	e7d6      	b.n	801d1b0 <_free_r+0x24>
 801d202:	6825      	ldr	r5, [r4, #0]
 801d204:	1961      	adds	r1, r4, r5
 801d206:	428b      	cmp	r3, r1
 801d208:	bf02      	ittt	eq
 801d20a:	6819      	ldreq	r1, [r3, #0]
 801d20c:	685b      	ldreq	r3, [r3, #4]
 801d20e:	1949      	addeq	r1, r1, r5
 801d210:	6063      	str	r3, [r4, #4]
 801d212:	bf08      	it	eq
 801d214:	6021      	streq	r1, [r4, #0]
 801d216:	6054      	str	r4, [r2, #4]
 801d218:	e7ca      	b.n	801d1b0 <_free_r+0x24>
 801d21a:	b003      	add	sp, #12
 801d21c:	bd30      	pop	{r4, r5, pc}
 801d21e:	bf00      	nop
 801d220:	20003704 	.word	0x20003704

0801d224 <_sungetc_r>:
 801d224:	b538      	push	{r3, r4, r5, lr}
 801d226:	1c4b      	adds	r3, r1, #1
 801d228:	4614      	mov	r4, r2
 801d22a:	d103      	bne.n	801d234 <_sungetc_r+0x10>
 801d22c:	f04f 35ff 	mov.w	r5, #4294967295
 801d230:	4628      	mov	r0, r5
 801d232:	bd38      	pop	{r3, r4, r5, pc}
 801d234:	8993      	ldrh	r3, [r2, #12]
 801d236:	b2cd      	uxtb	r5, r1
 801d238:	f023 0320 	bic.w	r3, r3, #32
 801d23c:	8193      	strh	r3, [r2, #12]
 801d23e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d240:	6852      	ldr	r2, [r2, #4]
 801d242:	b18b      	cbz	r3, 801d268 <_sungetc_r+0x44>
 801d244:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d246:	4293      	cmp	r3, r2
 801d248:	dd08      	ble.n	801d25c <_sungetc_r+0x38>
 801d24a:	6823      	ldr	r3, [r4, #0]
 801d24c:	1e5a      	subs	r2, r3, #1
 801d24e:	6022      	str	r2, [r4, #0]
 801d250:	f803 5c01 	strb.w	r5, [r3, #-1]
 801d254:	6863      	ldr	r3, [r4, #4]
 801d256:	3301      	adds	r3, #1
 801d258:	6063      	str	r3, [r4, #4]
 801d25a:	e7e9      	b.n	801d230 <_sungetc_r+0xc>
 801d25c:	4621      	mov	r1, r4
 801d25e:	f000 fbf6 	bl	801da4e <__submore>
 801d262:	2800      	cmp	r0, #0
 801d264:	d0f1      	beq.n	801d24a <_sungetc_r+0x26>
 801d266:	e7e1      	b.n	801d22c <_sungetc_r+0x8>
 801d268:	6921      	ldr	r1, [r4, #16]
 801d26a:	6823      	ldr	r3, [r4, #0]
 801d26c:	b151      	cbz	r1, 801d284 <_sungetc_r+0x60>
 801d26e:	4299      	cmp	r1, r3
 801d270:	d208      	bcs.n	801d284 <_sungetc_r+0x60>
 801d272:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801d276:	42a9      	cmp	r1, r5
 801d278:	d104      	bne.n	801d284 <_sungetc_r+0x60>
 801d27a:	3b01      	subs	r3, #1
 801d27c:	3201      	adds	r2, #1
 801d27e:	6023      	str	r3, [r4, #0]
 801d280:	6062      	str	r2, [r4, #4]
 801d282:	e7d5      	b.n	801d230 <_sungetc_r+0xc>
 801d284:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801d288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d28c:	6363      	str	r3, [r4, #52]	; 0x34
 801d28e:	2303      	movs	r3, #3
 801d290:	63a3      	str	r3, [r4, #56]	; 0x38
 801d292:	4623      	mov	r3, r4
 801d294:	f803 5f46 	strb.w	r5, [r3, #70]!
 801d298:	6023      	str	r3, [r4, #0]
 801d29a:	2301      	movs	r3, #1
 801d29c:	e7dc      	b.n	801d258 <_sungetc_r+0x34>

0801d29e <__ssrefill_r>:
 801d29e:	b510      	push	{r4, lr}
 801d2a0:	460c      	mov	r4, r1
 801d2a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801d2a4:	b169      	cbz	r1, 801d2c2 <__ssrefill_r+0x24>
 801d2a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d2aa:	4299      	cmp	r1, r3
 801d2ac:	d001      	beq.n	801d2b2 <__ssrefill_r+0x14>
 801d2ae:	f7ff ff6d 	bl	801d18c <_free_r>
 801d2b2:	2000      	movs	r0, #0
 801d2b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d2b6:	6360      	str	r0, [r4, #52]	; 0x34
 801d2b8:	6063      	str	r3, [r4, #4]
 801d2ba:	b113      	cbz	r3, 801d2c2 <__ssrefill_r+0x24>
 801d2bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d2be:	6023      	str	r3, [r4, #0]
 801d2c0:	bd10      	pop	{r4, pc}
 801d2c2:	6923      	ldr	r3, [r4, #16]
 801d2c4:	f04f 30ff 	mov.w	r0, #4294967295
 801d2c8:	6023      	str	r3, [r4, #0]
 801d2ca:	2300      	movs	r3, #0
 801d2cc:	6063      	str	r3, [r4, #4]
 801d2ce:	89a3      	ldrh	r3, [r4, #12]
 801d2d0:	f043 0320 	orr.w	r3, r3, #32
 801d2d4:	81a3      	strh	r3, [r4, #12]
 801d2d6:	e7f3      	b.n	801d2c0 <__ssrefill_r+0x22>

0801d2d8 <__ssvfiscanf_r>:
 801d2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d2dc:	460c      	mov	r4, r1
 801d2de:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801d2e2:	2100      	movs	r1, #0
 801d2e4:	4606      	mov	r6, r0
 801d2e6:	f10d 0804 	add.w	r8, sp, #4
 801d2ea:	4fa6      	ldr	r7, [pc, #664]	; (801d584 <__ssvfiscanf_r+0x2ac>)
 801d2ec:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 801d590 <__ssvfiscanf_r+0x2b8>
 801d2f0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801d2f4:	9300      	str	r3, [sp, #0]
 801d2f6:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801d2fa:	49a3      	ldr	r1, [pc, #652]	; (801d588 <__ssvfiscanf_r+0x2b0>)
 801d2fc:	91a0      	str	r1, [sp, #640]	; 0x280
 801d2fe:	49a3      	ldr	r1, [pc, #652]	; (801d58c <__ssvfiscanf_r+0x2b4>)
 801d300:	91a1      	str	r1, [sp, #644]	; 0x284
 801d302:	7813      	ldrb	r3, [r2, #0]
 801d304:	2b00      	cmp	r3, #0
 801d306:	f000 815a 	beq.w	801d5be <__ssvfiscanf_r+0x2e6>
 801d30a:	5cf9      	ldrb	r1, [r7, r3]
 801d30c:	1c55      	adds	r5, r2, #1
 801d30e:	f011 0108 	ands.w	r1, r1, #8
 801d312:	d019      	beq.n	801d348 <__ssvfiscanf_r+0x70>
 801d314:	6863      	ldr	r3, [r4, #4]
 801d316:	2b00      	cmp	r3, #0
 801d318:	dd0f      	ble.n	801d33a <__ssvfiscanf_r+0x62>
 801d31a:	6823      	ldr	r3, [r4, #0]
 801d31c:	781a      	ldrb	r2, [r3, #0]
 801d31e:	5cba      	ldrb	r2, [r7, r2]
 801d320:	0712      	lsls	r2, r2, #28
 801d322:	d401      	bmi.n	801d328 <__ssvfiscanf_r+0x50>
 801d324:	462a      	mov	r2, r5
 801d326:	e7ec      	b.n	801d302 <__ssvfiscanf_r+0x2a>
 801d328:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801d32a:	3301      	adds	r3, #1
 801d32c:	3201      	adds	r2, #1
 801d32e:	6023      	str	r3, [r4, #0]
 801d330:	9245      	str	r2, [sp, #276]	; 0x114
 801d332:	6862      	ldr	r2, [r4, #4]
 801d334:	3a01      	subs	r2, #1
 801d336:	6062      	str	r2, [r4, #4]
 801d338:	e7ec      	b.n	801d314 <__ssvfiscanf_r+0x3c>
 801d33a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801d33c:	4621      	mov	r1, r4
 801d33e:	4630      	mov	r0, r6
 801d340:	4798      	blx	r3
 801d342:	2800      	cmp	r0, #0
 801d344:	d0e9      	beq.n	801d31a <__ssvfiscanf_r+0x42>
 801d346:	e7ed      	b.n	801d324 <__ssvfiscanf_r+0x4c>
 801d348:	2b25      	cmp	r3, #37	; 0x25
 801d34a:	d012      	beq.n	801d372 <__ssvfiscanf_r+0x9a>
 801d34c:	469a      	mov	sl, r3
 801d34e:	6863      	ldr	r3, [r4, #4]
 801d350:	2b00      	cmp	r3, #0
 801d352:	f340 8092 	ble.w	801d47a <__ssvfiscanf_r+0x1a2>
 801d356:	6822      	ldr	r2, [r4, #0]
 801d358:	7813      	ldrb	r3, [r2, #0]
 801d35a:	4553      	cmp	r3, sl
 801d35c:	f040 812f 	bne.w	801d5be <__ssvfiscanf_r+0x2e6>
 801d360:	6863      	ldr	r3, [r4, #4]
 801d362:	3201      	adds	r2, #1
 801d364:	3b01      	subs	r3, #1
 801d366:	6022      	str	r2, [r4, #0]
 801d368:	6063      	str	r3, [r4, #4]
 801d36a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801d36c:	3301      	adds	r3, #1
 801d36e:	9345      	str	r3, [sp, #276]	; 0x114
 801d370:	e7d8      	b.n	801d324 <__ssvfiscanf_r+0x4c>
 801d372:	9141      	str	r1, [sp, #260]	; 0x104
 801d374:	9143      	str	r1, [sp, #268]	; 0x10c
 801d376:	7853      	ldrb	r3, [r2, #1]
 801d378:	2b2a      	cmp	r3, #42	; 0x2a
 801d37a:	bf04      	itt	eq
 801d37c:	2310      	moveq	r3, #16
 801d37e:	1c95      	addeq	r5, r2, #2
 801d380:	f04f 020a 	mov.w	r2, #10
 801d384:	bf08      	it	eq
 801d386:	9341      	streq	r3, [sp, #260]	; 0x104
 801d388:	46aa      	mov	sl, r5
 801d38a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801d38e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801d392:	2b09      	cmp	r3, #9
 801d394:	d91c      	bls.n	801d3d0 <__ssvfiscanf_r+0xf8>
 801d396:	2203      	movs	r2, #3
 801d398:	487d      	ldr	r0, [pc, #500]	; (801d590 <__ssvfiscanf_r+0x2b8>)
 801d39a:	f000 fb8f 	bl	801dabc <memchr>
 801d39e:	b138      	cbz	r0, 801d3b0 <__ssvfiscanf_r+0xd8>
 801d3a0:	eba0 0009 	sub.w	r0, r0, r9
 801d3a4:	2301      	movs	r3, #1
 801d3a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801d3a8:	4655      	mov	r5, sl
 801d3aa:	4083      	lsls	r3, r0
 801d3ac:	4313      	orrs	r3, r2
 801d3ae:	9341      	str	r3, [sp, #260]	; 0x104
 801d3b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d3b4:	2b78      	cmp	r3, #120	; 0x78
 801d3b6:	d806      	bhi.n	801d3c6 <__ssvfiscanf_r+0xee>
 801d3b8:	2b57      	cmp	r3, #87	; 0x57
 801d3ba:	d810      	bhi.n	801d3de <__ssvfiscanf_r+0x106>
 801d3bc:	2b25      	cmp	r3, #37	; 0x25
 801d3be:	d0c5      	beq.n	801d34c <__ssvfiscanf_r+0x74>
 801d3c0:	d856      	bhi.n	801d470 <__ssvfiscanf_r+0x198>
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	d064      	beq.n	801d490 <__ssvfiscanf_r+0x1b8>
 801d3c6:	2303      	movs	r3, #3
 801d3c8:	9347      	str	r3, [sp, #284]	; 0x11c
 801d3ca:	230a      	movs	r3, #10
 801d3cc:	9342      	str	r3, [sp, #264]	; 0x108
 801d3ce:	e075      	b.n	801d4bc <__ssvfiscanf_r+0x1e4>
 801d3d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801d3d2:	4655      	mov	r5, sl
 801d3d4:	fb02 1103 	mla	r1, r2, r3, r1
 801d3d8:	3930      	subs	r1, #48	; 0x30
 801d3da:	9143      	str	r1, [sp, #268]	; 0x10c
 801d3dc:	e7d4      	b.n	801d388 <__ssvfiscanf_r+0xb0>
 801d3de:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801d3e2:	2a20      	cmp	r2, #32
 801d3e4:	d8ef      	bhi.n	801d3c6 <__ssvfiscanf_r+0xee>
 801d3e6:	a101      	add	r1, pc, #4	; (adr r1, 801d3ec <__ssvfiscanf_r+0x114>)
 801d3e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d3ec:	0801d49f 	.word	0x0801d49f
 801d3f0:	0801d3c7 	.word	0x0801d3c7
 801d3f4:	0801d3c7 	.word	0x0801d3c7
 801d3f8:	0801d4fd 	.word	0x0801d4fd
 801d3fc:	0801d3c7 	.word	0x0801d3c7
 801d400:	0801d3c7 	.word	0x0801d3c7
 801d404:	0801d3c7 	.word	0x0801d3c7
 801d408:	0801d3c7 	.word	0x0801d3c7
 801d40c:	0801d3c7 	.word	0x0801d3c7
 801d410:	0801d3c7 	.word	0x0801d3c7
 801d414:	0801d3c7 	.word	0x0801d3c7
 801d418:	0801d513 	.word	0x0801d513
 801d41c:	0801d4f9 	.word	0x0801d4f9
 801d420:	0801d477 	.word	0x0801d477
 801d424:	0801d477 	.word	0x0801d477
 801d428:	0801d477 	.word	0x0801d477
 801d42c:	0801d3c7 	.word	0x0801d3c7
 801d430:	0801d4b5 	.word	0x0801d4b5
 801d434:	0801d3c7 	.word	0x0801d3c7
 801d438:	0801d3c7 	.word	0x0801d3c7
 801d43c:	0801d3c7 	.word	0x0801d3c7
 801d440:	0801d3c7 	.word	0x0801d3c7
 801d444:	0801d523 	.word	0x0801d523
 801d448:	0801d4f1 	.word	0x0801d4f1
 801d44c:	0801d497 	.word	0x0801d497
 801d450:	0801d3c7 	.word	0x0801d3c7
 801d454:	0801d3c7 	.word	0x0801d3c7
 801d458:	0801d51f 	.word	0x0801d51f
 801d45c:	0801d3c7 	.word	0x0801d3c7
 801d460:	0801d4f9 	.word	0x0801d4f9
 801d464:	0801d3c7 	.word	0x0801d3c7
 801d468:	0801d3c7 	.word	0x0801d3c7
 801d46c:	0801d49f 	.word	0x0801d49f
 801d470:	3b45      	subs	r3, #69	; 0x45
 801d472:	2b02      	cmp	r3, #2
 801d474:	d8a7      	bhi.n	801d3c6 <__ssvfiscanf_r+0xee>
 801d476:	2305      	movs	r3, #5
 801d478:	e01f      	b.n	801d4ba <__ssvfiscanf_r+0x1e2>
 801d47a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801d47c:	4621      	mov	r1, r4
 801d47e:	4630      	mov	r0, r6
 801d480:	4798      	blx	r3
 801d482:	2800      	cmp	r0, #0
 801d484:	f43f af67 	beq.w	801d356 <__ssvfiscanf_r+0x7e>
 801d488:	9844      	ldr	r0, [sp, #272]	; 0x110
 801d48a:	2800      	cmp	r0, #0
 801d48c:	f040 808d 	bne.w	801d5aa <__ssvfiscanf_r+0x2d2>
 801d490:	f04f 30ff 	mov.w	r0, #4294967295
 801d494:	e08f      	b.n	801d5b6 <__ssvfiscanf_r+0x2de>
 801d496:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801d498:	f042 0220 	orr.w	r2, r2, #32
 801d49c:	9241      	str	r2, [sp, #260]	; 0x104
 801d49e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801d4a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d4a4:	9241      	str	r2, [sp, #260]	; 0x104
 801d4a6:	2210      	movs	r2, #16
 801d4a8:	2b6f      	cmp	r3, #111	; 0x6f
 801d4aa:	9242      	str	r2, [sp, #264]	; 0x108
 801d4ac:	bf34      	ite	cc
 801d4ae:	2303      	movcc	r3, #3
 801d4b0:	2304      	movcs	r3, #4
 801d4b2:	e002      	b.n	801d4ba <__ssvfiscanf_r+0x1e2>
 801d4b4:	2300      	movs	r3, #0
 801d4b6:	9342      	str	r3, [sp, #264]	; 0x108
 801d4b8:	2303      	movs	r3, #3
 801d4ba:	9347      	str	r3, [sp, #284]	; 0x11c
 801d4bc:	6863      	ldr	r3, [r4, #4]
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	dd3e      	ble.n	801d540 <__ssvfiscanf_r+0x268>
 801d4c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801d4c4:	0659      	lsls	r1, r3, #25
 801d4c6:	d404      	bmi.n	801d4d2 <__ssvfiscanf_r+0x1fa>
 801d4c8:	6823      	ldr	r3, [r4, #0]
 801d4ca:	781a      	ldrb	r2, [r3, #0]
 801d4cc:	5cba      	ldrb	r2, [r7, r2]
 801d4ce:	0712      	lsls	r2, r2, #28
 801d4d0:	d43d      	bmi.n	801d54e <__ssvfiscanf_r+0x276>
 801d4d2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801d4d4:	2b02      	cmp	r3, #2
 801d4d6:	dc4c      	bgt.n	801d572 <__ssvfiscanf_r+0x29a>
 801d4d8:	466b      	mov	r3, sp
 801d4da:	4622      	mov	r2, r4
 801d4dc:	a941      	add	r1, sp, #260	; 0x104
 801d4de:	4630      	mov	r0, r6
 801d4e0:	f000 f872 	bl	801d5c8 <_scanf_chars>
 801d4e4:	2801      	cmp	r0, #1
 801d4e6:	d06a      	beq.n	801d5be <__ssvfiscanf_r+0x2e6>
 801d4e8:	2802      	cmp	r0, #2
 801d4ea:	f47f af1b 	bne.w	801d324 <__ssvfiscanf_r+0x4c>
 801d4ee:	e7cb      	b.n	801d488 <__ssvfiscanf_r+0x1b0>
 801d4f0:	2308      	movs	r3, #8
 801d4f2:	9342      	str	r3, [sp, #264]	; 0x108
 801d4f4:	2304      	movs	r3, #4
 801d4f6:	e7e0      	b.n	801d4ba <__ssvfiscanf_r+0x1e2>
 801d4f8:	220a      	movs	r2, #10
 801d4fa:	e7d5      	b.n	801d4a8 <__ssvfiscanf_r+0x1d0>
 801d4fc:	4629      	mov	r1, r5
 801d4fe:	4640      	mov	r0, r8
 801d500:	f000 fa6c 	bl	801d9dc <__sccl>
 801d504:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801d506:	4605      	mov	r5, r0
 801d508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d50c:	9341      	str	r3, [sp, #260]	; 0x104
 801d50e:	2301      	movs	r3, #1
 801d510:	e7d3      	b.n	801d4ba <__ssvfiscanf_r+0x1e2>
 801d512:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801d514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d518:	9341      	str	r3, [sp, #260]	; 0x104
 801d51a:	2300      	movs	r3, #0
 801d51c:	e7cd      	b.n	801d4ba <__ssvfiscanf_r+0x1e2>
 801d51e:	2302      	movs	r3, #2
 801d520:	e7cb      	b.n	801d4ba <__ssvfiscanf_r+0x1e2>
 801d522:	9841      	ldr	r0, [sp, #260]	; 0x104
 801d524:	06c3      	lsls	r3, r0, #27
 801d526:	f53f aefd 	bmi.w	801d324 <__ssvfiscanf_r+0x4c>
 801d52a:	9b00      	ldr	r3, [sp, #0]
 801d52c:	07c0      	lsls	r0, r0, #31
 801d52e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801d530:	f103 0104 	add.w	r1, r3, #4
 801d534:	9100      	str	r1, [sp, #0]
 801d536:	681b      	ldr	r3, [r3, #0]
 801d538:	bf4c      	ite	mi
 801d53a:	801a      	strhmi	r2, [r3, #0]
 801d53c:	601a      	strpl	r2, [r3, #0]
 801d53e:	e6f1      	b.n	801d324 <__ssvfiscanf_r+0x4c>
 801d540:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801d542:	4621      	mov	r1, r4
 801d544:	4630      	mov	r0, r6
 801d546:	4798      	blx	r3
 801d548:	2800      	cmp	r0, #0
 801d54a:	d0ba      	beq.n	801d4c2 <__ssvfiscanf_r+0x1ea>
 801d54c:	e79c      	b.n	801d488 <__ssvfiscanf_r+0x1b0>
 801d54e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801d550:	3201      	adds	r2, #1
 801d552:	9245      	str	r2, [sp, #276]	; 0x114
 801d554:	6862      	ldr	r2, [r4, #4]
 801d556:	3a01      	subs	r2, #1
 801d558:	2a00      	cmp	r2, #0
 801d55a:	6062      	str	r2, [r4, #4]
 801d55c:	dd02      	ble.n	801d564 <__ssvfiscanf_r+0x28c>
 801d55e:	3301      	adds	r3, #1
 801d560:	6023      	str	r3, [r4, #0]
 801d562:	e7b1      	b.n	801d4c8 <__ssvfiscanf_r+0x1f0>
 801d564:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801d566:	4621      	mov	r1, r4
 801d568:	4630      	mov	r0, r6
 801d56a:	4798      	blx	r3
 801d56c:	2800      	cmp	r0, #0
 801d56e:	d0ab      	beq.n	801d4c8 <__ssvfiscanf_r+0x1f0>
 801d570:	e78a      	b.n	801d488 <__ssvfiscanf_r+0x1b0>
 801d572:	2b04      	cmp	r3, #4
 801d574:	dc0e      	bgt.n	801d594 <__ssvfiscanf_r+0x2bc>
 801d576:	466b      	mov	r3, sp
 801d578:	4622      	mov	r2, r4
 801d57a:	a941      	add	r1, sp, #260	; 0x104
 801d57c:	4630      	mov	r0, r6
 801d57e:	f000 f87d 	bl	801d67c <_scanf_i>
 801d582:	e7af      	b.n	801d4e4 <__ssvfiscanf_r+0x20c>
 801d584:	0801ecfb 	.word	0x0801ecfb
 801d588:	0801d225 	.word	0x0801d225
 801d58c:	0801d29f 	.word	0x0801d29f
 801d590:	0801ecdb 	.word	0x0801ecdb
 801d594:	4b0b      	ldr	r3, [pc, #44]	; (801d5c4 <__ssvfiscanf_r+0x2ec>)
 801d596:	2b00      	cmp	r3, #0
 801d598:	f43f aec4 	beq.w	801d324 <__ssvfiscanf_r+0x4c>
 801d59c:	466b      	mov	r3, sp
 801d59e:	4622      	mov	r2, r4
 801d5a0:	a941      	add	r1, sp, #260	; 0x104
 801d5a2:	4630      	mov	r0, r6
 801d5a4:	f3af 8000 	nop.w
 801d5a8:	e79c      	b.n	801d4e4 <__ssvfiscanf_r+0x20c>
 801d5aa:	89a3      	ldrh	r3, [r4, #12]
 801d5ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 801d5b0:	bf18      	it	ne
 801d5b2:	f04f 30ff 	movne.w	r0, #4294967295
 801d5b6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801d5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d5be:	9844      	ldr	r0, [sp, #272]	; 0x110
 801d5c0:	e7f9      	b.n	801d5b6 <__ssvfiscanf_r+0x2de>
 801d5c2:	bf00      	nop
 801d5c4:	00000000 	.word	0x00000000

0801d5c8 <_scanf_chars>:
 801d5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d5cc:	4615      	mov	r5, r2
 801d5ce:	688a      	ldr	r2, [r1, #8]
 801d5d0:	4680      	mov	r8, r0
 801d5d2:	460c      	mov	r4, r1
 801d5d4:	b932      	cbnz	r2, 801d5e4 <_scanf_chars+0x1c>
 801d5d6:	698a      	ldr	r2, [r1, #24]
 801d5d8:	2a00      	cmp	r2, #0
 801d5da:	bf0c      	ite	eq
 801d5dc:	2201      	moveq	r2, #1
 801d5de:	f04f 32ff 	movne.w	r2, #4294967295
 801d5e2:	608a      	str	r2, [r1, #8]
 801d5e4:	6822      	ldr	r2, [r4, #0]
 801d5e6:	2700      	movs	r7, #0
 801d5e8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801d678 <_scanf_chars+0xb0>
 801d5ec:	06d1      	lsls	r1, r2, #27
 801d5ee:	bf5f      	itttt	pl
 801d5f0:	681a      	ldrpl	r2, [r3, #0]
 801d5f2:	1d11      	addpl	r1, r2, #4
 801d5f4:	6019      	strpl	r1, [r3, #0]
 801d5f6:	6816      	ldrpl	r6, [r2, #0]
 801d5f8:	69a0      	ldr	r0, [r4, #24]
 801d5fa:	b188      	cbz	r0, 801d620 <_scanf_chars+0x58>
 801d5fc:	2801      	cmp	r0, #1
 801d5fe:	d107      	bne.n	801d610 <_scanf_chars+0x48>
 801d600:	682a      	ldr	r2, [r5, #0]
 801d602:	7811      	ldrb	r1, [r2, #0]
 801d604:	6962      	ldr	r2, [r4, #20]
 801d606:	5c52      	ldrb	r2, [r2, r1]
 801d608:	b952      	cbnz	r2, 801d620 <_scanf_chars+0x58>
 801d60a:	2f00      	cmp	r7, #0
 801d60c:	d031      	beq.n	801d672 <_scanf_chars+0xaa>
 801d60e:	e022      	b.n	801d656 <_scanf_chars+0x8e>
 801d610:	2802      	cmp	r0, #2
 801d612:	d120      	bne.n	801d656 <_scanf_chars+0x8e>
 801d614:	682b      	ldr	r3, [r5, #0]
 801d616:	781b      	ldrb	r3, [r3, #0]
 801d618:	f819 3003 	ldrb.w	r3, [r9, r3]
 801d61c:	071b      	lsls	r3, r3, #28
 801d61e:	d41a      	bmi.n	801d656 <_scanf_chars+0x8e>
 801d620:	6823      	ldr	r3, [r4, #0]
 801d622:	3701      	adds	r7, #1
 801d624:	06da      	lsls	r2, r3, #27
 801d626:	bf5e      	ittt	pl
 801d628:	682b      	ldrpl	r3, [r5, #0]
 801d62a:	781b      	ldrbpl	r3, [r3, #0]
 801d62c:	f806 3b01 	strbpl.w	r3, [r6], #1
 801d630:	682a      	ldr	r2, [r5, #0]
 801d632:	686b      	ldr	r3, [r5, #4]
 801d634:	3201      	adds	r2, #1
 801d636:	3b01      	subs	r3, #1
 801d638:	602a      	str	r2, [r5, #0]
 801d63a:	68a2      	ldr	r2, [r4, #8]
 801d63c:	606b      	str	r3, [r5, #4]
 801d63e:	3a01      	subs	r2, #1
 801d640:	60a2      	str	r2, [r4, #8]
 801d642:	b142      	cbz	r2, 801d656 <_scanf_chars+0x8e>
 801d644:	2b00      	cmp	r3, #0
 801d646:	dcd7      	bgt.n	801d5f8 <_scanf_chars+0x30>
 801d648:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801d64c:	4629      	mov	r1, r5
 801d64e:	4640      	mov	r0, r8
 801d650:	4798      	blx	r3
 801d652:	2800      	cmp	r0, #0
 801d654:	d0d0      	beq.n	801d5f8 <_scanf_chars+0x30>
 801d656:	6823      	ldr	r3, [r4, #0]
 801d658:	f013 0310 	ands.w	r3, r3, #16
 801d65c:	d105      	bne.n	801d66a <_scanf_chars+0xa2>
 801d65e:	68e2      	ldr	r2, [r4, #12]
 801d660:	3201      	adds	r2, #1
 801d662:	60e2      	str	r2, [r4, #12]
 801d664:	69a2      	ldr	r2, [r4, #24]
 801d666:	b102      	cbz	r2, 801d66a <_scanf_chars+0xa2>
 801d668:	7033      	strb	r3, [r6, #0]
 801d66a:	6923      	ldr	r3, [r4, #16]
 801d66c:	2000      	movs	r0, #0
 801d66e:	443b      	add	r3, r7
 801d670:	6123      	str	r3, [r4, #16]
 801d672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d676:	bf00      	nop
 801d678:	0801ecfb 	.word	0x0801ecfb

0801d67c <_scanf_i>:
 801d67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d680:	4698      	mov	r8, r3
 801d682:	b087      	sub	sp, #28
 801d684:	4b72      	ldr	r3, [pc, #456]	; (801d850 <_scanf_i+0x1d4>)
 801d686:	460c      	mov	r4, r1
 801d688:	4682      	mov	sl, r0
 801d68a:	4616      	mov	r6, r2
 801d68c:	4627      	mov	r7, r4
 801d68e:	f04f 0b00 	mov.w	fp, #0
 801d692:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d696:	ab03      	add	r3, sp, #12
 801d698:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801d69c:	4b6d      	ldr	r3, [pc, #436]	; (801d854 <_scanf_i+0x1d8>)
 801d69e:	69a1      	ldr	r1, [r4, #24]
 801d6a0:	4a6d      	ldr	r2, [pc, #436]	; (801d858 <_scanf_i+0x1dc>)
 801d6a2:	2903      	cmp	r1, #3
 801d6a4:	bf18      	it	ne
 801d6a6:	461a      	movne	r2, r3
 801d6a8:	68a3      	ldr	r3, [r4, #8]
 801d6aa:	9201      	str	r2, [sp, #4]
 801d6ac:	1e5a      	subs	r2, r3, #1
 801d6ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801d6b2:	bf89      	itett	hi
 801d6b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801d6b8:	f04f 0900 	movls.w	r9, #0
 801d6bc:	eb03 0905 	addhi.w	r9, r3, r5
 801d6c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 801d6c4:	bf88      	it	hi
 801d6c6:	60a3      	strhi	r3, [r4, #8]
 801d6c8:	f857 3b1c 	ldr.w	r3, [r7], #28
 801d6cc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801d6d0:	463d      	mov	r5, r7
 801d6d2:	6023      	str	r3, [r4, #0]
 801d6d4:	6831      	ldr	r1, [r6, #0]
 801d6d6:	ab03      	add	r3, sp, #12
 801d6d8:	2202      	movs	r2, #2
 801d6da:	7809      	ldrb	r1, [r1, #0]
 801d6dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801d6e0:	f000 f9ec 	bl	801dabc <memchr>
 801d6e4:	b328      	cbz	r0, 801d732 <_scanf_i+0xb6>
 801d6e6:	f1bb 0f01 	cmp.w	fp, #1
 801d6ea:	d159      	bne.n	801d7a0 <_scanf_i+0x124>
 801d6ec:	6862      	ldr	r2, [r4, #4]
 801d6ee:	b92a      	cbnz	r2, 801d6fc <_scanf_i+0x80>
 801d6f0:	6822      	ldr	r2, [r4, #0]
 801d6f2:	2308      	movs	r3, #8
 801d6f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d6f8:	6063      	str	r3, [r4, #4]
 801d6fa:	6022      	str	r2, [r4, #0]
 801d6fc:	6822      	ldr	r2, [r4, #0]
 801d6fe:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801d702:	6022      	str	r2, [r4, #0]
 801d704:	68a2      	ldr	r2, [r4, #8]
 801d706:	1e51      	subs	r1, r2, #1
 801d708:	60a1      	str	r1, [r4, #8]
 801d70a:	b192      	cbz	r2, 801d732 <_scanf_i+0xb6>
 801d70c:	6832      	ldr	r2, [r6, #0]
 801d70e:	1c51      	adds	r1, r2, #1
 801d710:	6031      	str	r1, [r6, #0]
 801d712:	7812      	ldrb	r2, [r2, #0]
 801d714:	f805 2b01 	strb.w	r2, [r5], #1
 801d718:	6872      	ldr	r2, [r6, #4]
 801d71a:	3a01      	subs	r2, #1
 801d71c:	2a00      	cmp	r2, #0
 801d71e:	6072      	str	r2, [r6, #4]
 801d720:	dc07      	bgt.n	801d732 <_scanf_i+0xb6>
 801d722:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801d726:	4631      	mov	r1, r6
 801d728:	4650      	mov	r0, sl
 801d72a:	4790      	blx	r2
 801d72c:	2800      	cmp	r0, #0
 801d72e:	f040 8085 	bne.w	801d83c <_scanf_i+0x1c0>
 801d732:	f10b 0b01 	add.w	fp, fp, #1
 801d736:	f1bb 0f03 	cmp.w	fp, #3
 801d73a:	d1cb      	bne.n	801d6d4 <_scanf_i+0x58>
 801d73c:	6863      	ldr	r3, [r4, #4]
 801d73e:	b90b      	cbnz	r3, 801d744 <_scanf_i+0xc8>
 801d740:	230a      	movs	r3, #10
 801d742:	6063      	str	r3, [r4, #4]
 801d744:	6863      	ldr	r3, [r4, #4]
 801d746:	f04f 0b00 	mov.w	fp, #0
 801d74a:	4944      	ldr	r1, [pc, #272]	; (801d85c <_scanf_i+0x1e0>)
 801d74c:	6960      	ldr	r0, [r4, #20]
 801d74e:	1ac9      	subs	r1, r1, r3
 801d750:	f000 f944 	bl	801d9dc <__sccl>
 801d754:	68a3      	ldr	r3, [r4, #8]
 801d756:	6822      	ldr	r2, [r4, #0]
 801d758:	2b00      	cmp	r3, #0
 801d75a:	d03d      	beq.n	801d7d8 <_scanf_i+0x15c>
 801d75c:	6831      	ldr	r1, [r6, #0]
 801d75e:	6960      	ldr	r0, [r4, #20]
 801d760:	f891 c000 	ldrb.w	ip, [r1]
 801d764:	f810 000c 	ldrb.w	r0, [r0, ip]
 801d768:	2800      	cmp	r0, #0
 801d76a:	d035      	beq.n	801d7d8 <_scanf_i+0x15c>
 801d76c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801d770:	d124      	bne.n	801d7bc <_scanf_i+0x140>
 801d772:	0510      	lsls	r0, r2, #20
 801d774:	d522      	bpl.n	801d7bc <_scanf_i+0x140>
 801d776:	f10b 0b01 	add.w	fp, fp, #1
 801d77a:	f1b9 0f00 	cmp.w	r9, #0
 801d77e:	d003      	beq.n	801d788 <_scanf_i+0x10c>
 801d780:	3301      	adds	r3, #1
 801d782:	f109 39ff 	add.w	r9, r9, #4294967295
 801d786:	60a3      	str	r3, [r4, #8]
 801d788:	6873      	ldr	r3, [r6, #4]
 801d78a:	3b01      	subs	r3, #1
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	6073      	str	r3, [r6, #4]
 801d790:	dd1b      	ble.n	801d7ca <_scanf_i+0x14e>
 801d792:	6833      	ldr	r3, [r6, #0]
 801d794:	3301      	adds	r3, #1
 801d796:	6033      	str	r3, [r6, #0]
 801d798:	68a3      	ldr	r3, [r4, #8]
 801d79a:	3b01      	subs	r3, #1
 801d79c:	60a3      	str	r3, [r4, #8]
 801d79e:	e7d9      	b.n	801d754 <_scanf_i+0xd8>
 801d7a0:	f1bb 0f02 	cmp.w	fp, #2
 801d7a4:	d1ae      	bne.n	801d704 <_scanf_i+0x88>
 801d7a6:	6822      	ldr	r2, [r4, #0]
 801d7a8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801d7ac:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801d7b0:	d1bf      	bne.n	801d732 <_scanf_i+0xb6>
 801d7b2:	2310      	movs	r3, #16
 801d7b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d7b8:	6063      	str	r3, [r4, #4]
 801d7ba:	e7a2      	b.n	801d702 <_scanf_i+0x86>
 801d7bc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801d7c0:	6022      	str	r2, [r4, #0]
 801d7c2:	780b      	ldrb	r3, [r1, #0]
 801d7c4:	f805 3b01 	strb.w	r3, [r5], #1
 801d7c8:	e7de      	b.n	801d788 <_scanf_i+0x10c>
 801d7ca:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801d7ce:	4631      	mov	r1, r6
 801d7d0:	4650      	mov	r0, sl
 801d7d2:	4798      	blx	r3
 801d7d4:	2800      	cmp	r0, #0
 801d7d6:	d0df      	beq.n	801d798 <_scanf_i+0x11c>
 801d7d8:	6823      	ldr	r3, [r4, #0]
 801d7da:	05d9      	lsls	r1, r3, #23
 801d7dc:	d50d      	bpl.n	801d7fa <_scanf_i+0x17e>
 801d7de:	42bd      	cmp	r5, r7
 801d7e0:	d909      	bls.n	801d7f6 <_scanf_i+0x17a>
 801d7e2:	f105 39ff 	add.w	r9, r5, #4294967295
 801d7e6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801d7ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d7ee:	4632      	mov	r2, r6
 801d7f0:	464d      	mov	r5, r9
 801d7f2:	4650      	mov	r0, sl
 801d7f4:	4798      	blx	r3
 801d7f6:	42bd      	cmp	r5, r7
 801d7f8:	d028      	beq.n	801d84c <_scanf_i+0x1d0>
 801d7fa:	6822      	ldr	r2, [r4, #0]
 801d7fc:	f012 0210 	ands.w	r2, r2, #16
 801d800:	d113      	bne.n	801d82a <_scanf_i+0x1ae>
 801d802:	702a      	strb	r2, [r5, #0]
 801d804:	4639      	mov	r1, r7
 801d806:	6863      	ldr	r3, [r4, #4]
 801d808:	4650      	mov	r0, sl
 801d80a:	9e01      	ldr	r6, [sp, #4]
 801d80c:	47b0      	blx	r6
 801d80e:	f8d8 3000 	ldr.w	r3, [r8]
 801d812:	6821      	ldr	r1, [r4, #0]
 801d814:	1d1a      	adds	r2, r3, #4
 801d816:	f011 0f20 	tst.w	r1, #32
 801d81a:	f8c8 2000 	str.w	r2, [r8]
 801d81e:	681b      	ldr	r3, [r3, #0]
 801d820:	d00f      	beq.n	801d842 <_scanf_i+0x1c6>
 801d822:	6018      	str	r0, [r3, #0]
 801d824:	68e3      	ldr	r3, [r4, #12]
 801d826:	3301      	adds	r3, #1
 801d828:	60e3      	str	r3, [r4, #12]
 801d82a:	1bed      	subs	r5, r5, r7
 801d82c:	6923      	ldr	r3, [r4, #16]
 801d82e:	2000      	movs	r0, #0
 801d830:	445d      	add	r5, fp
 801d832:	442b      	add	r3, r5
 801d834:	6123      	str	r3, [r4, #16]
 801d836:	b007      	add	sp, #28
 801d838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d83c:	f04f 0b00 	mov.w	fp, #0
 801d840:	e7ca      	b.n	801d7d8 <_scanf_i+0x15c>
 801d842:	07ca      	lsls	r2, r1, #31
 801d844:	bf4c      	ite	mi
 801d846:	8018      	strhmi	r0, [r3, #0]
 801d848:	6018      	strpl	r0, [r3, #0]
 801d84a:	e7eb      	b.n	801d824 <_scanf_i+0x1a8>
 801d84c:	2001      	movs	r0, #1
 801d84e:	e7f2      	b.n	801d836 <_scanf_i+0x1ba>
 801d850:	0801e67c 	.word	0x0801e67c
 801d854:	0801dd25 	.word	0x0801dd25
 801d858:	0801dc3d 	.word	0x0801dc3d
 801d85c:	0801ecef 	.word	0x0801ecef

0801d860 <__sflush_r>:
 801d860:	898a      	ldrh	r2, [r1, #12]
 801d862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d866:	4605      	mov	r5, r0
 801d868:	0710      	lsls	r0, r2, #28
 801d86a:	460c      	mov	r4, r1
 801d86c:	d458      	bmi.n	801d920 <__sflush_r+0xc0>
 801d86e:	684b      	ldr	r3, [r1, #4]
 801d870:	2b00      	cmp	r3, #0
 801d872:	dc05      	bgt.n	801d880 <__sflush_r+0x20>
 801d874:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d876:	2b00      	cmp	r3, #0
 801d878:	dc02      	bgt.n	801d880 <__sflush_r+0x20>
 801d87a:	2000      	movs	r0, #0
 801d87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d882:	2e00      	cmp	r6, #0
 801d884:	d0f9      	beq.n	801d87a <__sflush_r+0x1a>
 801d886:	2300      	movs	r3, #0
 801d888:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d88c:	682f      	ldr	r7, [r5, #0]
 801d88e:	6a21      	ldr	r1, [r4, #32]
 801d890:	602b      	str	r3, [r5, #0]
 801d892:	d032      	beq.n	801d8fa <__sflush_r+0x9a>
 801d894:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d896:	89a3      	ldrh	r3, [r4, #12]
 801d898:	075a      	lsls	r2, r3, #29
 801d89a:	d505      	bpl.n	801d8a8 <__sflush_r+0x48>
 801d89c:	6863      	ldr	r3, [r4, #4]
 801d89e:	1ac0      	subs	r0, r0, r3
 801d8a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d8a2:	b10b      	cbz	r3, 801d8a8 <__sflush_r+0x48>
 801d8a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d8a6:	1ac0      	subs	r0, r0, r3
 801d8a8:	2300      	movs	r3, #0
 801d8aa:	4602      	mov	r2, r0
 801d8ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d8ae:	4628      	mov	r0, r5
 801d8b0:	6a21      	ldr	r1, [r4, #32]
 801d8b2:	47b0      	blx	r6
 801d8b4:	1c43      	adds	r3, r0, #1
 801d8b6:	89a3      	ldrh	r3, [r4, #12]
 801d8b8:	d106      	bne.n	801d8c8 <__sflush_r+0x68>
 801d8ba:	6829      	ldr	r1, [r5, #0]
 801d8bc:	291d      	cmp	r1, #29
 801d8be:	d82b      	bhi.n	801d918 <__sflush_r+0xb8>
 801d8c0:	4a28      	ldr	r2, [pc, #160]	; (801d964 <__sflush_r+0x104>)
 801d8c2:	410a      	asrs	r2, r1
 801d8c4:	07d6      	lsls	r6, r2, #31
 801d8c6:	d427      	bmi.n	801d918 <__sflush_r+0xb8>
 801d8c8:	2200      	movs	r2, #0
 801d8ca:	04d9      	lsls	r1, r3, #19
 801d8cc:	6062      	str	r2, [r4, #4]
 801d8ce:	6922      	ldr	r2, [r4, #16]
 801d8d0:	6022      	str	r2, [r4, #0]
 801d8d2:	d504      	bpl.n	801d8de <__sflush_r+0x7e>
 801d8d4:	1c42      	adds	r2, r0, #1
 801d8d6:	d101      	bne.n	801d8dc <__sflush_r+0x7c>
 801d8d8:	682b      	ldr	r3, [r5, #0]
 801d8da:	b903      	cbnz	r3, 801d8de <__sflush_r+0x7e>
 801d8dc:	6560      	str	r0, [r4, #84]	; 0x54
 801d8de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d8e0:	602f      	str	r7, [r5, #0]
 801d8e2:	2900      	cmp	r1, #0
 801d8e4:	d0c9      	beq.n	801d87a <__sflush_r+0x1a>
 801d8e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d8ea:	4299      	cmp	r1, r3
 801d8ec:	d002      	beq.n	801d8f4 <__sflush_r+0x94>
 801d8ee:	4628      	mov	r0, r5
 801d8f0:	f7ff fc4c 	bl	801d18c <_free_r>
 801d8f4:	2000      	movs	r0, #0
 801d8f6:	6360      	str	r0, [r4, #52]	; 0x34
 801d8f8:	e7c0      	b.n	801d87c <__sflush_r+0x1c>
 801d8fa:	2301      	movs	r3, #1
 801d8fc:	4628      	mov	r0, r5
 801d8fe:	47b0      	blx	r6
 801d900:	1c41      	adds	r1, r0, #1
 801d902:	d1c8      	bne.n	801d896 <__sflush_r+0x36>
 801d904:	682b      	ldr	r3, [r5, #0]
 801d906:	2b00      	cmp	r3, #0
 801d908:	d0c5      	beq.n	801d896 <__sflush_r+0x36>
 801d90a:	2b1d      	cmp	r3, #29
 801d90c:	d001      	beq.n	801d912 <__sflush_r+0xb2>
 801d90e:	2b16      	cmp	r3, #22
 801d910:	d101      	bne.n	801d916 <__sflush_r+0xb6>
 801d912:	602f      	str	r7, [r5, #0]
 801d914:	e7b1      	b.n	801d87a <__sflush_r+0x1a>
 801d916:	89a3      	ldrh	r3, [r4, #12]
 801d918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d91c:	81a3      	strh	r3, [r4, #12]
 801d91e:	e7ad      	b.n	801d87c <__sflush_r+0x1c>
 801d920:	690f      	ldr	r7, [r1, #16]
 801d922:	2f00      	cmp	r7, #0
 801d924:	d0a9      	beq.n	801d87a <__sflush_r+0x1a>
 801d926:	0793      	lsls	r3, r2, #30
 801d928:	680e      	ldr	r6, [r1, #0]
 801d92a:	600f      	str	r7, [r1, #0]
 801d92c:	bf0c      	ite	eq
 801d92e:	694b      	ldreq	r3, [r1, #20]
 801d930:	2300      	movne	r3, #0
 801d932:	eba6 0807 	sub.w	r8, r6, r7
 801d936:	608b      	str	r3, [r1, #8]
 801d938:	f1b8 0f00 	cmp.w	r8, #0
 801d93c:	dd9d      	ble.n	801d87a <__sflush_r+0x1a>
 801d93e:	4643      	mov	r3, r8
 801d940:	463a      	mov	r2, r7
 801d942:	6a21      	ldr	r1, [r4, #32]
 801d944:	4628      	mov	r0, r5
 801d946:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d948:	47b0      	blx	r6
 801d94a:	2800      	cmp	r0, #0
 801d94c:	dc06      	bgt.n	801d95c <__sflush_r+0xfc>
 801d94e:	89a3      	ldrh	r3, [r4, #12]
 801d950:	f04f 30ff 	mov.w	r0, #4294967295
 801d954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d958:	81a3      	strh	r3, [r4, #12]
 801d95a:	e78f      	b.n	801d87c <__sflush_r+0x1c>
 801d95c:	4407      	add	r7, r0
 801d95e:	eba8 0800 	sub.w	r8, r8, r0
 801d962:	e7e9      	b.n	801d938 <__sflush_r+0xd8>
 801d964:	dfbffffe 	.word	0xdfbffffe

0801d968 <_fflush_r>:
 801d968:	b538      	push	{r3, r4, r5, lr}
 801d96a:	690b      	ldr	r3, [r1, #16]
 801d96c:	4605      	mov	r5, r0
 801d96e:	460c      	mov	r4, r1
 801d970:	b913      	cbnz	r3, 801d978 <_fflush_r+0x10>
 801d972:	2500      	movs	r5, #0
 801d974:	4628      	mov	r0, r5
 801d976:	bd38      	pop	{r3, r4, r5, pc}
 801d978:	b118      	cbz	r0, 801d982 <_fflush_r+0x1a>
 801d97a:	6a03      	ldr	r3, [r0, #32]
 801d97c:	b90b      	cbnz	r3, 801d982 <_fflush_r+0x1a>
 801d97e:	f7ff fa49 	bl	801ce14 <__sinit>
 801d982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d986:	2b00      	cmp	r3, #0
 801d988:	d0f3      	beq.n	801d972 <_fflush_r+0xa>
 801d98a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d98c:	07d0      	lsls	r0, r2, #31
 801d98e:	d404      	bmi.n	801d99a <_fflush_r+0x32>
 801d990:	0599      	lsls	r1, r3, #22
 801d992:	d402      	bmi.n	801d99a <_fflush_r+0x32>
 801d994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d996:	f7ff fbcc 	bl	801d132 <__retarget_lock_acquire_recursive>
 801d99a:	4628      	mov	r0, r5
 801d99c:	4621      	mov	r1, r4
 801d99e:	f7ff ff5f 	bl	801d860 <__sflush_r>
 801d9a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d9a4:	4605      	mov	r5, r0
 801d9a6:	07da      	lsls	r2, r3, #31
 801d9a8:	d4e4      	bmi.n	801d974 <_fflush_r+0xc>
 801d9aa:	89a3      	ldrh	r3, [r4, #12]
 801d9ac:	059b      	lsls	r3, r3, #22
 801d9ae:	d4e1      	bmi.n	801d974 <_fflush_r+0xc>
 801d9b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d9b2:	f7ff fbbf 	bl	801d134 <__retarget_lock_release_recursive>
 801d9b6:	e7dd      	b.n	801d974 <_fflush_r+0xc>

0801d9b8 <fiprintf>:
 801d9b8:	b40e      	push	{r1, r2, r3}
 801d9ba:	b503      	push	{r0, r1, lr}
 801d9bc:	ab03      	add	r3, sp, #12
 801d9be:	4601      	mov	r1, r0
 801d9c0:	4805      	ldr	r0, [pc, #20]	; (801d9d8 <fiprintf+0x20>)
 801d9c2:	f853 2b04 	ldr.w	r2, [r3], #4
 801d9c6:	6800      	ldr	r0, [r0, #0]
 801d9c8:	9301      	str	r3, [sp, #4]
 801d9ca:	f000 f9d7 	bl	801dd7c <_vfiprintf_r>
 801d9ce:	b002      	add	sp, #8
 801d9d0:	f85d eb04 	ldr.w	lr, [sp], #4
 801d9d4:	b003      	add	sp, #12
 801d9d6:	4770      	bx	lr
 801d9d8:	20000080 	.word	0x20000080

0801d9dc <__sccl>:
 801d9dc:	b570      	push	{r4, r5, r6, lr}
 801d9de:	780b      	ldrb	r3, [r1, #0]
 801d9e0:	4604      	mov	r4, r0
 801d9e2:	3801      	subs	r0, #1
 801d9e4:	2b5e      	cmp	r3, #94	; 0x5e
 801d9e6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801d9ea:	bf13      	iteet	ne
 801d9ec:	1c4a      	addne	r2, r1, #1
 801d9ee:	1c8a      	addeq	r2, r1, #2
 801d9f0:	784b      	ldrbeq	r3, [r1, #1]
 801d9f2:	2100      	movne	r1, #0
 801d9f4:	bf08      	it	eq
 801d9f6:	2101      	moveq	r1, #1
 801d9f8:	f800 1f01 	strb.w	r1, [r0, #1]!
 801d9fc:	42a8      	cmp	r0, r5
 801d9fe:	d1fb      	bne.n	801d9f8 <__sccl+0x1c>
 801da00:	b90b      	cbnz	r3, 801da06 <__sccl+0x2a>
 801da02:	1e50      	subs	r0, r2, #1
 801da04:	bd70      	pop	{r4, r5, r6, pc}
 801da06:	f081 0101 	eor.w	r1, r1, #1
 801da0a:	4610      	mov	r0, r2
 801da0c:	54e1      	strb	r1, [r4, r3]
 801da0e:	4602      	mov	r2, r0
 801da10:	f812 5b01 	ldrb.w	r5, [r2], #1
 801da14:	2d2d      	cmp	r5, #45	; 0x2d
 801da16:	d005      	beq.n	801da24 <__sccl+0x48>
 801da18:	2d5d      	cmp	r5, #93	; 0x5d
 801da1a:	d016      	beq.n	801da4a <__sccl+0x6e>
 801da1c:	2d00      	cmp	r5, #0
 801da1e:	d0f1      	beq.n	801da04 <__sccl+0x28>
 801da20:	462b      	mov	r3, r5
 801da22:	e7f2      	b.n	801da0a <__sccl+0x2e>
 801da24:	7846      	ldrb	r6, [r0, #1]
 801da26:	2e5d      	cmp	r6, #93	; 0x5d
 801da28:	d0fa      	beq.n	801da20 <__sccl+0x44>
 801da2a:	42b3      	cmp	r3, r6
 801da2c:	dcf8      	bgt.n	801da20 <__sccl+0x44>
 801da2e:	3002      	adds	r0, #2
 801da30:	461a      	mov	r2, r3
 801da32:	3201      	adds	r2, #1
 801da34:	4296      	cmp	r6, r2
 801da36:	54a1      	strb	r1, [r4, r2]
 801da38:	dcfb      	bgt.n	801da32 <__sccl+0x56>
 801da3a:	1af2      	subs	r2, r6, r3
 801da3c:	1c5d      	adds	r5, r3, #1
 801da3e:	3a01      	subs	r2, #1
 801da40:	42b3      	cmp	r3, r6
 801da42:	bfa8      	it	ge
 801da44:	2200      	movge	r2, #0
 801da46:	18ab      	adds	r3, r5, r2
 801da48:	e7e1      	b.n	801da0e <__sccl+0x32>
 801da4a:	4610      	mov	r0, r2
 801da4c:	e7da      	b.n	801da04 <__sccl+0x28>

0801da4e <__submore>:
 801da4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da52:	460c      	mov	r4, r1
 801da54:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801da56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801da5a:	4299      	cmp	r1, r3
 801da5c:	d11a      	bne.n	801da94 <__submore+0x46>
 801da5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801da62:	f7ff f881 	bl	801cb68 <_malloc_r>
 801da66:	b918      	cbnz	r0, 801da70 <__submore+0x22>
 801da68:	f04f 30ff 	mov.w	r0, #4294967295
 801da6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801da74:	6360      	str	r0, [r4, #52]	; 0x34
 801da76:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801da7a:	63a3      	str	r3, [r4, #56]	; 0x38
 801da7c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801da80:	7083      	strb	r3, [r0, #2]
 801da82:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801da86:	7043      	strb	r3, [r0, #1]
 801da88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801da8c:	7003      	strb	r3, [r0, #0]
 801da8e:	6020      	str	r0, [r4, #0]
 801da90:	2000      	movs	r0, #0
 801da92:	e7eb      	b.n	801da6c <__submore+0x1e>
 801da94:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801da96:	0077      	lsls	r7, r6, #1
 801da98:	463a      	mov	r2, r7
 801da9a:	f000 f81d 	bl	801dad8 <_realloc_r>
 801da9e:	4605      	mov	r5, r0
 801daa0:	2800      	cmp	r0, #0
 801daa2:	d0e1      	beq.n	801da68 <__submore+0x1a>
 801daa4:	eb00 0806 	add.w	r8, r0, r6
 801daa8:	4601      	mov	r1, r0
 801daaa:	4632      	mov	r2, r6
 801daac:	4640      	mov	r0, r8
 801daae:	f7ff fb42 	bl	801d136 <memcpy>
 801dab2:	f8c4 8000 	str.w	r8, [r4]
 801dab6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801daba:	e7e9      	b.n	801da90 <__submore+0x42>

0801dabc <memchr>:
 801dabc:	b2c9      	uxtb	r1, r1
 801dabe:	4402      	add	r2, r0
 801dac0:	b510      	push	{r4, lr}
 801dac2:	4290      	cmp	r0, r2
 801dac4:	4603      	mov	r3, r0
 801dac6:	d101      	bne.n	801dacc <memchr+0x10>
 801dac8:	2300      	movs	r3, #0
 801daca:	e003      	b.n	801dad4 <memchr+0x18>
 801dacc:	781c      	ldrb	r4, [r3, #0]
 801dace:	3001      	adds	r0, #1
 801dad0:	428c      	cmp	r4, r1
 801dad2:	d1f6      	bne.n	801dac2 <memchr+0x6>
 801dad4:	4618      	mov	r0, r3
 801dad6:	bd10      	pop	{r4, pc}

0801dad8 <_realloc_r>:
 801dad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dadc:	4680      	mov	r8, r0
 801dade:	4614      	mov	r4, r2
 801dae0:	460e      	mov	r6, r1
 801dae2:	b921      	cbnz	r1, 801daee <_realloc_r+0x16>
 801dae4:	4611      	mov	r1, r2
 801dae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801daea:	f7ff b83d 	b.w	801cb68 <_malloc_r>
 801daee:	b92a      	cbnz	r2, 801dafc <_realloc_r+0x24>
 801daf0:	4625      	mov	r5, r4
 801daf2:	f7ff fb4b 	bl	801d18c <_free_r>
 801daf6:	4628      	mov	r0, r5
 801daf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dafc:	f000 fc80 	bl	801e400 <_malloc_usable_size_r>
 801db00:	4284      	cmp	r4, r0
 801db02:	4607      	mov	r7, r0
 801db04:	d802      	bhi.n	801db0c <_realloc_r+0x34>
 801db06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801db0a:	d812      	bhi.n	801db32 <_realloc_r+0x5a>
 801db0c:	4621      	mov	r1, r4
 801db0e:	4640      	mov	r0, r8
 801db10:	f7ff f82a 	bl	801cb68 <_malloc_r>
 801db14:	4605      	mov	r5, r0
 801db16:	2800      	cmp	r0, #0
 801db18:	d0ed      	beq.n	801daf6 <_realloc_r+0x1e>
 801db1a:	42bc      	cmp	r4, r7
 801db1c:	4622      	mov	r2, r4
 801db1e:	4631      	mov	r1, r6
 801db20:	bf28      	it	cs
 801db22:	463a      	movcs	r2, r7
 801db24:	f7ff fb07 	bl	801d136 <memcpy>
 801db28:	4631      	mov	r1, r6
 801db2a:	4640      	mov	r0, r8
 801db2c:	f7ff fb2e 	bl	801d18c <_free_r>
 801db30:	e7e1      	b.n	801daf6 <_realloc_r+0x1e>
 801db32:	4635      	mov	r5, r6
 801db34:	e7df      	b.n	801daf6 <_realloc_r+0x1e>
	...

0801db38 <_strtol_l.constprop.0>:
 801db38:	2b01      	cmp	r3, #1
 801db3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801db3e:	d001      	beq.n	801db44 <_strtol_l.constprop.0+0xc>
 801db40:	2b24      	cmp	r3, #36	; 0x24
 801db42:	d906      	bls.n	801db52 <_strtol_l.constprop.0+0x1a>
 801db44:	f7ff faca 	bl	801d0dc <__errno>
 801db48:	2316      	movs	r3, #22
 801db4a:	6003      	str	r3, [r0, #0]
 801db4c:	2000      	movs	r0, #0
 801db4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db52:	460d      	mov	r5, r1
 801db54:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 801dc38 <_strtol_l.constprop.0+0x100>
 801db58:	462e      	mov	r6, r5
 801db5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801db5e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801db62:	f017 0708 	ands.w	r7, r7, #8
 801db66:	d1f7      	bne.n	801db58 <_strtol_l.constprop.0+0x20>
 801db68:	2c2d      	cmp	r4, #45	; 0x2d
 801db6a:	d132      	bne.n	801dbd2 <_strtol_l.constprop.0+0x9a>
 801db6c:	782c      	ldrb	r4, [r5, #0]
 801db6e:	2701      	movs	r7, #1
 801db70:	1cb5      	adds	r5, r6, #2
 801db72:	2b00      	cmp	r3, #0
 801db74:	d05b      	beq.n	801dc2e <_strtol_l.constprop.0+0xf6>
 801db76:	2b10      	cmp	r3, #16
 801db78:	d109      	bne.n	801db8e <_strtol_l.constprop.0+0x56>
 801db7a:	2c30      	cmp	r4, #48	; 0x30
 801db7c:	d107      	bne.n	801db8e <_strtol_l.constprop.0+0x56>
 801db7e:	782c      	ldrb	r4, [r5, #0]
 801db80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801db84:	2c58      	cmp	r4, #88	; 0x58
 801db86:	d14d      	bne.n	801dc24 <_strtol_l.constprop.0+0xec>
 801db88:	786c      	ldrb	r4, [r5, #1]
 801db8a:	2310      	movs	r3, #16
 801db8c:	3502      	adds	r5, #2
 801db8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801db92:	f04f 0e00 	mov.w	lr, #0
 801db96:	f108 38ff 	add.w	r8, r8, #4294967295
 801db9a:	4676      	mov	r6, lr
 801db9c:	fbb8 f9f3 	udiv	r9, r8, r3
 801dba0:	fb03 8a19 	mls	sl, r3, r9, r8
 801dba4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801dba8:	f1bc 0f09 	cmp.w	ip, #9
 801dbac:	d816      	bhi.n	801dbdc <_strtol_l.constprop.0+0xa4>
 801dbae:	4664      	mov	r4, ip
 801dbb0:	42a3      	cmp	r3, r4
 801dbb2:	dd24      	ble.n	801dbfe <_strtol_l.constprop.0+0xc6>
 801dbb4:	f1be 3fff 	cmp.w	lr, #4294967295
 801dbb8:	d008      	beq.n	801dbcc <_strtol_l.constprop.0+0x94>
 801dbba:	45b1      	cmp	r9, r6
 801dbbc:	d31c      	bcc.n	801dbf8 <_strtol_l.constprop.0+0xc0>
 801dbbe:	d101      	bne.n	801dbc4 <_strtol_l.constprop.0+0x8c>
 801dbc0:	45a2      	cmp	sl, r4
 801dbc2:	db19      	blt.n	801dbf8 <_strtol_l.constprop.0+0xc0>
 801dbc4:	fb06 4603 	mla	r6, r6, r3, r4
 801dbc8:	f04f 0e01 	mov.w	lr, #1
 801dbcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801dbd0:	e7e8      	b.n	801dba4 <_strtol_l.constprop.0+0x6c>
 801dbd2:	2c2b      	cmp	r4, #43	; 0x2b
 801dbd4:	bf04      	itt	eq
 801dbd6:	782c      	ldrbeq	r4, [r5, #0]
 801dbd8:	1cb5      	addeq	r5, r6, #2
 801dbda:	e7ca      	b.n	801db72 <_strtol_l.constprop.0+0x3a>
 801dbdc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801dbe0:	f1bc 0f19 	cmp.w	ip, #25
 801dbe4:	d801      	bhi.n	801dbea <_strtol_l.constprop.0+0xb2>
 801dbe6:	3c37      	subs	r4, #55	; 0x37
 801dbe8:	e7e2      	b.n	801dbb0 <_strtol_l.constprop.0+0x78>
 801dbea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801dbee:	f1bc 0f19 	cmp.w	ip, #25
 801dbf2:	d804      	bhi.n	801dbfe <_strtol_l.constprop.0+0xc6>
 801dbf4:	3c57      	subs	r4, #87	; 0x57
 801dbf6:	e7db      	b.n	801dbb0 <_strtol_l.constprop.0+0x78>
 801dbf8:	f04f 3eff 	mov.w	lr, #4294967295
 801dbfc:	e7e6      	b.n	801dbcc <_strtol_l.constprop.0+0x94>
 801dbfe:	f1be 3fff 	cmp.w	lr, #4294967295
 801dc02:	d105      	bne.n	801dc10 <_strtol_l.constprop.0+0xd8>
 801dc04:	2322      	movs	r3, #34	; 0x22
 801dc06:	4646      	mov	r6, r8
 801dc08:	6003      	str	r3, [r0, #0]
 801dc0a:	b942      	cbnz	r2, 801dc1e <_strtol_l.constprop.0+0xe6>
 801dc0c:	4630      	mov	r0, r6
 801dc0e:	e79e      	b.n	801db4e <_strtol_l.constprop.0+0x16>
 801dc10:	b107      	cbz	r7, 801dc14 <_strtol_l.constprop.0+0xdc>
 801dc12:	4276      	negs	r6, r6
 801dc14:	2a00      	cmp	r2, #0
 801dc16:	d0f9      	beq.n	801dc0c <_strtol_l.constprop.0+0xd4>
 801dc18:	f1be 0f00 	cmp.w	lr, #0
 801dc1c:	d000      	beq.n	801dc20 <_strtol_l.constprop.0+0xe8>
 801dc1e:	1e69      	subs	r1, r5, #1
 801dc20:	6011      	str	r1, [r2, #0]
 801dc22:	e7f3      	b.n	801dc0c <_strtol_l.constprop.0+0xd4>
 801dc24:	2430      	movs	r4, #48	; 0x30
 801dc26:	2b00      	cmp	r3, #0
 801dc28:	d1b1      	bne.n	801db8e <_strtol_l.constprop.0+0x56>
 801dc2a:	2308      	movs	r3, #8
 801dc2c:	e7af      	b.n	801db8e <_strtol_l.constprop.0+0x56>
 801dc2e:	2c30      	cmp	r4, #48	; 0x30
 801dc30:	d0a5      	beq.n	801db7e <_strtol_l.constprop.0+0x46>
 801dc32:	230a      	movs	r3, #10
 801dc34:	e7ab      	b.n	801db8e <_strtol_l.constprop.0+0x56>
 801dc36:	bf00      	nop
 801dc38:	0801ecfb 	.word	0x0801ecfb

0801dc3c <_strtol_r>:
 801dc3c:	f7ff bf7c 	b.w	801db38 <_strtol_l.constprop.0>

0801dc40 <_strtoul_l.constprop.0>:
 801dc40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dc44:	4686      	mov	lr, r0
 801dc46:	460d      	mov	r5, r1
 801dc48:	4f35      	ldr	r7, [pc, #212]	; (801dd20 <_strtoul_l.constprop.0+0xe0>)
 801dc4a:	4628      	mov	r0, r5
 801dc4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801dc50:	5d3e      	ldrb	r6, [r7, r4]
 801dc52:	f016 0608 	ands.w	r6, r6, #8
 801dc56:	d1f8      	bne.n	801dc4a <_strtoul_l.constprop.0+0xa>
 801dc58:	2c2d      	cmp	r4, #45	; 0x2d
 801dc5a:	d130      	bne.n	801dcbe <_strtoul_l.constprop.0+0x7e>
 801dc5c:	782c      	ldrb	r4, [r5, #0]
 801dc5e:	2601      	movs	r6, #1
 801dc60:	1c85      	adds	r5, r0, #2
 801dc62:	2b00      	cmp	r3, #0
 801dc64:	d057      	beq.n	801dd16 <_strtoul_l.constprop.0+0xd6>
 801dc66:	2b10      	cmp	r3, #16
 801dc68:	d109      	bne.n	801dc7e <_strtoul_l.constprop.0+0x3e>
 801dc6a:	2c30      	cmp	r4, #48	; 0x30
 801dc6c:	d107      	bne.n	801dc7e <_strtoul_l.constprop.0+0x3e>
 801dc6e:	7828      	ldrb	r0, [r5, #0]
 801dc70:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801dc74:	2858      	cmp	r0, #88	; 0x58
 801dc76:	d149      	bne.n	801dd0c <_strtoul_l.constprop.0+0xcc>
 801dc78:	786c      	ldrb	r4, [r5, #1]
 801dc7a:	2310      	movs	r3, #16
 801dc7c:	3502      	adds	r5, #2
 801dc7e:	f04f 38ff 	mov.w	r8, #4294967295
 801dc82:	2700      	movs	r7, #0
 801dc84:	fbb8 f8f3 	udiv	r8, r8, r3
 801dc88:	fb03 f908 	mul.w	r9, r3, r8
 801dc8c:	4638      	mov	r0, r7
 801dc8e:	ea6f 0909 	mvn.w	r9, r9
 801dc92:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801dc96:	f1bc 0f09 	cmp.w	ip, #9
 801dc9a:	d815      	bhi.n	801dcc8 <_strtoul_l.constprop.0+0x88>
 801dc9c:	4664      	mov	r4, ip
 801dc9e:	42a3      	cmp	r3, r4
 801dca0:	dd23      	ble.n	801dcea <_strtoul_l.constprop.0+0xaa>
 801dca2:	f1b7 3fff 	cmp.w	r7, #4294967295
 801dca6:	d007      	beq.n	801dcb8 <_strtoul_l.constprop.0+0x78>
 801dca8:	4580      	cmp	r8, r0
 801dcaa:	d31b      	bcc.n	801dce4 <_strtoul_l.constprop.0+0xa4>
 801dcac:	d101      	bne.n	801dcb2 <_strtoul_l.constprop.0+0x72>
 801dcae:	45a1      	cmp	r9, r4
 801dcb0:	db18      	blt.n	801dce4 <_strtoul_l.constprop.0+0xa4>
 801dcb2:	fb00 4003 	mla	r0, r0, r3, r4
 801dcb6:	2701      	movs	r7, #1
 801dcb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801dcbc:	e7e9      	b.n	801dc92 <_strtoul_l.constprop.0+0x52>
 801dcbe:	2c2b      	cmp	r4, #43	; 0x2b
 801dcc0:	bf04      	itt	eq
 801dcc2:	782c      	ldrbeq	r4, [r5, #0]
 801dcc4:	1c85      	addeq	r5, r0, #2
 801dcc6:	e7cc      	b.n	801dc62 <_strtoul_l.constprop.0+0x22>
 801dcc8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801dccc:	f1bc 0f19 	cmp.w	ip, #25
 801dcd0:	d801      	bhi.n	801dcd6 <_strtoul_l.constprop.0+0x96>
 801dcd2:	3c37      	subs	r4, #55	; 0x37
 801dcd4:	e7e3      	b.n	801dc9e <_strtoul_l.constprop.0+0x5e>
 801dcd6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801dcda:	f1bc 0f19 	cmp.w	ip, #25
 801dcde:	d804      	bhi.n	801dcea <_strtoul_l.constprop.0+0xaa>
 801dce0:	3c57      	subs	r4, #87	; 0x57
 801dce2:	e7dc      	b.n	801dc9e <_strtoul_l.constprop.0+0x5e>
 801dce4:	f04f 37ff 	mov.w	r7, #4294967295
 801dce8:	e7e6      	b.n	801dcb8 <_strtoul_l.constprop.0+0x78>
 801dcea:	1c7b      	adds	r3, r7, #1
 801dcec:	d106      	bne.n	801dcfc <_strtoul_l.constprop.0+0xbc>
 801dcee:	2322      	movs	r3, #34	; 0x22
 801dcf0:	4638      	mov	r0, r7
 801dcf2:	f8ce 3000 	str.w	r3, [lr]
 801dcf6:	b932      	cbnz	r2, 801dd06 <_strtoul_l.constprop.0+0xc6>
 801dcf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dcfc:	b106      	cbz	r6, 801dd00 <_strtoul_l.constprop.0+0xc0>
 801dcfe:	4240      	negs	r0, r0
 801dd00:	2a00      	cmp	r2, #0
 801dd02:	d0f9      	beq.n	801dcf8 <_strtoul_l.constprop.0+0xb8>
 801dd04:	b107      	cbz	r7, 801dd08 <_strtoul_l.constprop.0+0xc8>
 801dd06:	1e69      	subs	r1, r5, #1
 801dd08:	6011      	str	r1, [r2, #0]
 801dd0a:	e7f5      	b.n	801dcf8 <_strtoul_l.constprop.0+0xb8>
 801dd0c:	2430      	movs	r4, #48	; 0x30
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d1b5      	bne.n	801dc7e <_strtoul_l.constprop.0+0x3e>
 801dd12:	2308      	movs	r3, #8
 801dd14:	e7b3      	b.n	801dc7e <_strtoul_l.constprop.0+0x3e>
 801dd16:	2c30      	cmp	r4, #48	; 0x30
 801dd18:	d0a9      	beq.n	801dc6e <_strtoul_l.constprop.0+0x2e>
 801dd1a:	230a      	movs	r3, #10
 801dd1c:	e7af      	b.n	801dc7e <_strtoul_l.constprop.0+0x3e>
 801dd1e:	bf00      	nop
 801dd20:	0801ecfb 	.word	0x0801ecfb

0801dd24 <_strtoul_r>:
 801dd24:	f7ff bf8c 	b.w	801dc40 <_strtoul_l.constprop.0>

0801dd28 <__sfputc_r>:
 801dd28:	6893      	ldr	r3, [r2, #8]
 801dd2a:	3b01      	subs	r3, #1
 801dd2c:	2b00      	cmp	r3, #0
 801dd2e:	6093      	str	r3, [r2, #8]
 801dd30:	b410      	push	{r4}
 801dd32:	da08      	bge.n	801dd46 <__sfputc_r+0x1e>
 801dd34:	6994      	ldr	r4, [r2, #24]
 801dd36:	42a3      	cmp	r3, r4
 801dd38:	db01      	blt.n	801dd3e <__sfputc_r+0x16>
 801dd3a:	290a      	cmp	r1, #10
 801dd3c:	d103      	bne.n	801dd46 <__sfputc_r+0x1e>
 801dd3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dd42:	f000 bac7 	b.w	801e2d4 <__swbuf_r>
 801dd46:	6813      	ldr	r3, [r2, #0]
 801dd48:	1c58      	adds	r0, r3, #1
 801dd4a:	6010      	str	r0, [r2, #0]
 801dd4c:	4608      	mov	r0, r1
 801dd4e:	7019      	strb	r1, [r3, #0]
 801dd50:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dd54:	4770      	bx	lr

0801dd56 <__sfputs_r>:
 801dd56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd58:	4606      	mov	r6, r0
 801dd5a:	460f      	mov	r7, r1
 801dd5c:	4614      	mov	r4, r2
 801dd5e:	18d5      	adds	r5, r2, r3
 801dd60:	42ac      	cmp	r4, r5
 801dd62:	d101      	bne.n	801dd68 <__sfputs_r+0x12>
 801dd64:	2000      	movs	r0, #0
 801dd66:	e007      	b.n	801dd78 <__sfputs_r+0x22>
 801dd68:	463a      	mov	r2, r7
 801dd6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dd6e:	4630      	mov	r0, r6
 801dd70:	f7ff ffda 	bl	801dd28 <__sfputc_r>
 801dd74:	1c43      	adds	r3, r0, #1
 801dd76:	d1f3      	bne.n	801dd60 <__sfputs_r+0xa>
 801dd78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dd7c <_vfiprintf_r>:
 801dd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd80:	460d      	mov	r5, r1
 801dd82:	b09d      	sub	sp, #116	; 0x74
 801dd84:	4614      	mov	r4, r2
 801dd86:	4698      	mov	r8, r3
 801dd88:	4606      	mov	r6, r0
 801dd8a:	b118      	cbz	r0, 801dd94 <_vfiprintf_r+0x18>
 801dd8c:	6a03      	ldr	r3, [r0, #32]
 801dd8e:	b90b      	cbnz	r3, 801dd94 <_vfiprintf_r+0x18>
 801dd90:	f7ff f840 	bl	801ce14 <__sinit>
 801dd94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dd96:	07d9      	lsls	r1, r3, #31
 801dd98:	d405      	bmi.n	801dda6 <_vfiprintf_r+0x2a>
 801dd9a:	89ab      	ldrh	r3, [r5, #12]
 801dd9c:	059a      	lsls	r2, r3, #22
 801dd9e:	d402      	bmi.n	801dda6 <_vfiprintf_r+0x2a>
 801dda0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dda2:	f7ff f9c6 	bl	801d132 <__retarget_lock_acquire_recursive>
 801dda6:	89ab      	ldrh	r3, [r5, #12]
 801dda8:	071b      	lsls	r3, r3, #28
 801ddaa:	d501      	bpl.n	801ddb0 <_vfiprintf_r+0x34>
 801ddac:	692b      	ldr	r3, [r5, #16]
 801ddae:	b99b      	cbnz	r3, 801ddd8 <_vfiprintf_r+0x5c>
 801ddb0:	4629      	mov	r1, r5
 801ddb2:	4630      	mov	r0, r6
 801ddb4:	f000 facc 	bl	801e350 <__swsetup_r>
 801ddb8:	b170      	cbz	r0, 801ddd8 <_vfiprintf_r+0x5c>
 801ddba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ddbc:	07dc      	lsls	r4, r3, #31
 801ddbe:	d504      	bpl.n	801ddca <_vfiprintf_r+0x4e>
 801ddc0:	f04f 30ff 	mov.w	r0, #4294967295
 801ddc4:	b01d      	add	sp, #116	; 0x74
 801ddc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddca:	89ab      	ldrh	r3, [r5, #12]
 801ddcc:	0598      	lsls	r0, r3, #22
 801ddce:	d4f7      	bmi.n	801ddc0 <_vfiprintf_r+0x44>
 801ddd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ddd2:	f7ff f9af 	bl	801d134 <__retarget_lock_release_recursive>
 801ddd6:	e7f3      	b.n	801ddc0 <_vfiprintf_r+0x44>
 801ddd8:	2300      	movs	r3, #0
 801ddda:	f8cd 800c 	str.w	r8, [sp, #12]
 801ddde:	f04f 0901 	mov.w	r9, #1
 801dde2:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801df9c <_vfiprintf_r+0x220>
 801dde6:	9309      	str	r3, [sp, #36]	; 0x24
 801dde8:	2320      	movs	r3, #32
 801ddea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ddee:	2330      	movs	r3, #48	; 0x30
 801ddf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ddf4:	4623      	mov	r3, r4
 801ddf6:	469a      	mov	sl, r3
 801ddf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ddfc:	b10a      	cbz	r2, 801de02 <_vfiprintf_r+0x86>
 801ddfe:	2a25      	cmp	r2, #37	; 0x25
 801de00:	d1f9      	bne.n	801ddf6 <_vfiprintf_r+0x7a>
 801de02:	ebba 0b04 	subs.w	fp, sl, r4
 801de06:	d00b      	beq.n	801de20 <_vfiprintf_r+0xa4>
 801de08:	465b      	mov	r3, fp
 801de0a:	4622      	mov	r2, r4
 801de0c:	4629      	mov	r1, r5
 801de0e:	4630      	mov	r0, r6
 801de10:	f7ff ffa1 	bl	801dd56 <__sfputs_r>
 801de14:	3001      	adds	r0, #1
 801de16:	f000 80a9 	beq.w	801df6c <_vfiprintf_r+0x1f0>
 801de1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801de1c:	445a      	add	r2, fp
 801de1e:	9209      	str	r2, [sp, #36]	; 0x24
 801de20:	f89a 3000 	ldrb.w	r3, [sl]
 801de24:	2b00      	cmp	r3, #0
 801de26:	f000 80a1 	beq.w	801df6c <_vfiprintf_r+0x1f0>
 801de2a:	2300      	movs	r3, #0
 801de2c:	f04f 32ff 	mov.w	r2, #4294967295
 801de30:	f10a 0a01 	add.w	sl, sl, #1
 801de34:	9304      	str	r3, [sp, #16]
 801de36:	9307      	str	r3, [sp, #28]
 801de38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801de3c:	931a      	str	r3, [sp, #104]	; 0x68
 801de3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801de42:	4654      	mov	r4, sl
 801de44:	2205      	movs	r2, #5
 801de46:	4855      	ldr	r0, [pc, #340]	; (801df9c <_vfiprintf_r+0x220>)
 801de48:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de4c:	f7ff fe36 	bl	801dabc <memchr>
 801de50:	9a04      	ldr	r2, [sp, #16]
 801de52:	b9d8      	cbnz	r0, 801de8c <_vfiprintf_r+0x110>
 801de54:	06d1      	lsls	r1, r2, #27
 801de56:	bf44      	itt	mi
 801de58:	2320      	movmi	r3, #32
 801de5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801de5e:	0713      	lsls	r3, r2, #28
 801de60:	bf44      	itt	mi
 801de62:	232b      	movmi	r3, #43	; 0x2b
 801de64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801de68:	f89a 3000 	ldrb.w	r3, [sl]
 801de6c:	2b2a      	cmp	r3, #42	; 0x2a
 801de6e:	d015      	beq.n	801de9c <_vfiprintf_r+0x120>
 801de70:	9a07      	ldr	r2, [sp, #28]
 801de72:	4654      	mov	r4, sl
 801de74:	2000      	movs	r0, #0
 801de76:	f04f 0c0a 	mov.w	ip, #10
 801de7a:	4621      	mov	r1, r4
 801de7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801de80:	3b30      	subs	r3, #48	; 0x30
 801de82:	2b09      	cmp	r3, #9
 801de84:	d94d      	bls.n	801df22 <_vfiprintf_r+0x1a6>
 801de86:	b1b0      	cbz	r0, 801deb6 <_vfiprintf_r+0x13a>
 801de88:	9207      	str	r2, [sp, #28]
 801de8a:	e014      	b.n	801deb6 <_vfiprintf_r+0x13a>
 801de8c:	eba0 0308 	sub.w	r3, r0, r8
 801de90:	46a2      	mov	sl, r4
 801de92:	fa09 f303 	lsl.w	r3, r9, r3
 801de96:	4313      	orrs	r3, r2
 801de98:	9304      	str	r3, [sp, #16]
 801de9a:	e7d2      	b.n	801de42 <_vfiprintf_r+0xc6>
 801de9c:	9b03      	ldr	r3, [sp, #12]
 801de9e:	1d19      	adds	r1, r3, #4
 801dea0:	681b      	ldr	r3, [r3, #0]
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	9103      	str	r1, [sp, #12]
 801dea6:	bfbb      	ittet	lt
 801dea8:	425b      	neglt	r3, r3
 801deaa:	f042 0202 	orrlt.w	r2, r2, #2
 801deae:	9307      	strge	r3, [sp, #28]
 801deb0:	9307      	strlt	r3, [sp, #28]
 801deb2:	bfb8      	it	lt
 801deb4:	9204      	strlt	r2, [sp, #16]
 801deb6:	7823      	ldrb	r3, [r4, #0]
 801deb8:	2b2e      	cmp	r3, #46	; 0x2e
 801deba:	d10c      	bne.n	801ded6 <_vfiprintf_r+0x15a>
 801debc:	7863      	ldrb	r3, [r4, #1]
 801debe:	2b2a      	cmp	r3, #42	; 0x2a
 801dec0:	d134      	bne.n	801df2c <_vfiprintf_r+0x1b0>
 801dec2:	9b03      	ldr	r3, [sp, #12]
 801dec4:	3402      	adds	r4, #2
 801dec6:	1d1a      	adds	r2, r3, #4
 801dec8:	681b      	ldr	r3, [r3, #0]
 801deca:	2b00      	cmp	r3, #0
 801decc:	9203      	str	r2, [sp, #12]
 801dece:	bfb8      	it	lt
 801ded0:	f04f 33ff 	movlt.w	r3, #4294967295
 801ded4:	9305      	str	r3, [sp, #20]
 801ded6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801dfac <_vfiprintf_r+0x230>
 801deda:	2203      	movs	r2, #3
 801dedc:	7821      	ldrb	r1, [r4, #0]
 801dede:	4650      	mov	r0, sl
 801dee0:	f7ff fdec 	bl	801dabc <memchr>
 801dee4:	b138      	cbz	r0, 801def6 <_vfiprintf_r+0x17a>
 801dee6:	eba0 000a 	sub.w	r0, r0, sl
 801deea:	2240      	movs	r2, #64	; 0x40
 801deec:	9b04      	ldr	r3, [sp, #16]
 801deee:	3401      	adds	r4, #1
 801def0:	4082      	lsls	r2, r0
 801def2:	4313      	orrs	r3, r2
 801def4:	9304      	str	r3, [sp, #16]
 801def6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801defa:	2206      	movs	r2, #6
 801defc:	4828      	ldr	r0, [pc, #160]	; (801dfa0 <_vfiprintf_r+0x224>)
 801defe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801df02:	f7ff fddb 	bl	801dabc <memchr>
 801df06:	2800      	cmp	r0, #0
 801df08:	d03f      	beq.n	801df8a <_vfiprintf_r+0x20e>
 801df0a:	4b26      	ldr	r3, [pc, #152]	; (801dfa4 <_vfiprintf_r+0x228>)
 801df0c:	bb1b      	cbnz	r3, 801df56 <_vfiprintf_r+0x1da>
 801df0e:	9b03      	ldr	r3, [sp, #12]
 801df10:	3307      	adds	r3, #7
 801df12:	f023 0307 	bic.w	r3, r3, #7
 801df16:	3308      	adds	r3, #8
 801df18:	9303      	str	r3, [sp, #12]
 801df1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df1c:	443b      	add	r3, r7
 801df1e:	9309      	str	r3, [sp, #36]	; 0x24
 801df20:	e768      	b.n	801ddf4 <_vfiprintf_r+0x78>
 801df22:	fb0c 3202 	mla	r2, ip, r2, r3
 801df26:	460c      	mov	r4, r1
 801df28:	2001      	movs	r0, #1
 801df2a:	e7a6      	b.n	801de7a <_vfiprintf_r+0xfe>
 801df2c:	2300      	movs	r3, #0
 801df2e:	3401      	adds	r4, #1
 801df30:	f04f 0c0a 	mov.w	ip, #10
 801df34:	4619      	mov	r1, r3
 801df36:	9305      	str	r3, [sp, #20]
 801df38:	4620      	mov	r0, r4
 801df3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801df3e:	3a30      	subs	r2, #48	; 0x30
 801df40:	2a09      	cmp	r2, #9
 801df42:	d903      	bls.n	801df4c <_vfiprintf_r+0x1d0>
 801df44:	2b00      	cmp	r3, #0
 801df46:	d0c6      	beq.n	801ded6 <_vfiprintf_r+0x15a>
 801df48:	9105      	str	r1, [sp, #20]
 801df4a:	e7c4      	b.n	801ded6 <_vfiprintf_r+0x15a>
 801df4c:	fb0c 2101 	mla	r1, ip, r1, r2
 801df50:	4604      	mov	r4, r0
 801df52:	2301      	movs	r3, #1
 801df54:	e7f0      	b.n	801df38 <_vfiprintf_r+0x1bc>
 801df56:	ab03      	add	r3, sp, #12
 801df58:	462a      	mov	r2, r5
 801df5a:	a904      	add	r1, sp, #16
 801df5c:	4630      	mov	r0, r6
 801df5e:	9300      	str	r3, [sp, #0]
 801df60:	4b11      	ldr	r3, [pc, #68]	; (801dfa8 <_vfiprintf_r+0x22c>)
 801df62:	f3af 8000 	nop.w
 801df66:	4607      	mov	r7, r0
 801df68:	1c78      	adds	r0, r7, #1
 801df6a:	d1d6      	bne.n	801df1a <_vfiprintf_r+0x19e>
 801df6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801df6e:	07d9      	lsls	r1, r3, #31
 801df70:	d405      	bmi.n	801df7e <_vfiprintf_r+0x202>
 801df72:	89ab      	ldrh	r3, [r5, #12]
 801df74:	059a      	lsls	r2, r3, #22
 801df76:	d402      	bmi.n	801df7e <_vfiprintf_r+0x202>
 801df78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801df7a:	f7ff f8db 	bl	801d134 <__retarget_lock_release_recursive>
 801df7e:	89ab      	ldrh	r3, [r5, #12]
 801df80:	065b      	lsls	r3, r3, #25
 801df82:	f53f af1d 	bmi.w	801ddc0 <_vfiprintf_r+0x44>
 801df86:	9809      	ldr	r0, [sp, #36]	; 0x24
 801df88:	e71c      	b.n	801ddc4 <_vfiprintf_r+0x48>
 801df8a:	ab03      	add	r3, sp, #12
 801df8c:	462a      	mov	r2, r5
 801df8e:	a904      	add	r1, sp, #16
 801df90:	4630      	mov	r0, r6
 801df92:	9300      	str	r3, [sp, #0]
 801df94:	4b04      	ldr	r3, [pc, #16]	; (801dfa8 <_vfiprintf_r+0x22c>)
 801df96:	f000 f87d 	bl	801e094 <_printf_i>
 801df9a:	e7e4      	b.n	801df66 <_vfiprintf_r+0x1ea>
 801df9c:	0801edfb 	.word	0x0801edfb
 801dfa0:	0801ee01 	.word	0x0801ee01
 801dfa4:	00000000 	.word	0x00000000
 801dfa8:	0801dd57 	.word	0x0801dd57
 801dfac:	0801ecdb 	.word	0x0801ecdb

0801dfb0 <_printf_common>:
 801dfb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dfb4:	4616      	mov	r6, r2
 801dfb6:	4699      	mov	r9, r3
 801dfb8:	688a      	ldr	r2, [r1, #8]
 801dfba:	4607      	mov	r7, r0
 801dfbc:	690b      	ldr	r3, [r1, #16]
 801dfbe:	460c      	mov	r4, r1
 801dfc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801dfc4:	4293      	cmp	r3, r2
 801dfc6:	bfb8      	it	lt
 801dfc8:	4613      	movlt	r3, r2
 801dfca:	6033      	str	r3, [r6, #0]
 801dfcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801dfd0:	b10a      	cbz	r2, 801dfd6 <_printf_common+0x26>
 801dfd2:	3301      	adds	r3, #1
 801dfd4:	6033      	str	r3, [r6, #0]
 801dfd6:	6823      	ldr	r3, [r4, #0]
 801dfd8:	0699      	lsls	r1, r3, #26
 801dfda:	bf42      	ittt	mi
 801dfdc:	6833      	ldrmi	r3, [r6, #0]
 801dfde:	3302      	addmi	r3, #2
 801dfe0:	6033      	strmi	r3, [r6, #0]
 801dfe2:	6825      	ldr	r5, [r4, #0]
 801dfe4:	f015 0506 	ands.w	r5, r5, #6
 801dfe8:	d106      	bne.n	801dff8 <_printf_common+0x48>
 801dfea:	f104 0a19 	add.w	sl, r4, #25
 801dfee:	68e3      	ldr	r3, [r4, #12]
 801dff0:	6832      	ldr	r2, [r6, #0]
 801dff2:	1a9b      	subs	r3, r3, r2
 801dff4:	42ab      	cmp	r3, r5
 801dff6:	dc2b      	bgt.n	801e050 <_printf_common+0xa0>
 801dff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801dffc:	1e13      	subs	r3, r2, #0
 801dffe:	6822      	ldr	r2, [r4, #0]
 801e000:	bf18      	it	ne
 801e002:	2301      	movne	r3, #1
 801e004:	0692      	lsls	r2, r2, #26
 801e006:	d430      	bmi.n	801e06a <_printf_common+0xba>
 801e008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e00c:	4649      	mov	r1, r9
 801e00e:	4638      	mov	r0, r7
 801e010:	47c0      	blx	r8
 801e012:	3001      	adds	r0, #1
 801e014:	d023      	beq.n	801e05e <_printf_common+0xae>
 801e016:	6823      	ldr	r3, [r4, #0]
 801e018:	341a      	adds	r4, #26
 801e01a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801e01e:	f003 0306 	and.w	r3, r3, #6
 801e022:	2b04      	cmp	r3, #4
 801e024:	bf0a      	itet	eq
 801e026:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801e02a:	2500      	movne	r5, #0
 801e02c:	6833      	ldreq	r3, [r6, #0]
 801e02e:	f04f 0600 	mov.w	r6, #0
 801e032:	bf08      	it	eq
 801e034:	1aed      	subeq	r5, r5, r3
 801e036:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801e03a:	bf08      	it	eq
 801e03c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e040:	4293      	cmp	r3, r2
 801e042:	bfc4      	itt	gt
 801e044:	1a9b      	subgt	r3, r3, r2
 801e046:	18ed      	addgt	r5, r5, r3
 801e048:	42b5      	cmp	r5, r6
 801e04a:	d11a      	bne.n	801e082 <_printf_common+0xd2>
 801e04c:	2000      	movs	r0, #0
 801e04e:	e008      	b.n	801e062 <_printf_common+0xb2>
 801e050:	2301      	movs	r3, #1
 801e052:	4652      	mov	r2, sl
 801e054:	4649      	mov	r1, r9
 801e056:	4638      	mov	r0, r7
 801e058:	47c0      	blx	r8
 801e05a:	3001      	adds	r0, #1
 801e05c:	d103      	bne.n	801e066 <_printf_common+0xb6>
 801e05e:	f04f 30ff 	mov.w	r0, #4294967295
 801e062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e066:	3501      	adds	r5, #1
 801e068:	e7c1      	b.n	801dfee <_printf_common+0x3e>
 801e06a:	18e1      	adds	r1, r4, r3
 801e06c:	1c5a      	adds	r2, r3, #1
 801e06e:	2030      	movs	r0, #48	; 0x30
 801e070:	3302      	adds	r3, #2
 801e072:	4422      	add	r2, r4
 801e074:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e078:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e07c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e080:	e7c2      	b.n	801e008 <_printf_common+0x58>
 801e082:	2301      	movs	r3, #1
 801e084:	4622      	mov	r2, r4
 801e086:	4649      	mov	r1, r9
 801e088:	4638      	mov	r0, r7
 801e08a:	47c0      	blx	r8
 801e08c:	3001      	adds	r0, #1
 801e08e:	d0e6      	beq.n	801e05e <_printf_common+0xae>
 801e090:	3601      	adds	r6, #1
 801e092:	e7d9      	b.n	801e048 <_printf_common+0x98>

0801e094 <_printf_i>:
 801e094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e098:	7e0f      	ldrb	r7, [r1, #24]
 801e09a:	4691      	mov	r9, r2
 801e09c:	4680      	mov	r8, r0
 801e09e:	460c      	mov	r4, r1
 801e0a0:	2f78      	cmp	r7, #120	; 0x78
 801e0a2:	469a      	mov	sl, r3
 801e0a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e0a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e0aa:	d807      	bhi.n	801e0bc <_printf_i+0x28>
 801e0ac:	2f62      	cmp	r7, #98	; 0x62
 801e0ae:	d80a      	bhi.n	801e0c6 <_printf_i+0x32>
 801e0b0:	2f00      	cmp	r7, #0
 801e0b2:	f000 80d3 	beq.w	801e25c <_printf_i+0x1c8>
 801e0b6:	2f58      	cmp	r7, #88	; 0x58
 801e0b8:	f000 80bf 	beq.w	801e23a <_printf_i+0x1a6>
 801e0bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e0c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e0c4:	e03a      	b.n	801e13c <_printf_i+0xa8>
 801e0c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e0ca:	2b15      	cmp	r3, #21
 801e0cc:	d8f6      	bhi.n	801e0bc <_printf_i+0x28>
 801e0ce:	a101      	add	r1, pc, #4	; (adr r1, 801e0d4 <_printf_i+0x40>)
 801e0d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e0d4:	0801e12d 	.word	0x0801e12d
 801e0d8:	0801e141 	.word	0x0801e141
 801e0dc:	0801e0bd 	.word	0x0801e0bd
 801e0e0:	0801e0bd 	.word	0x0801e0bd
 801e0e4:	0801e0bd 	.word	0x0801e0bd
 801e0e8:	0801e0bd 	.word	0x0801e0bd
 801e0ec:	0801e141 	.word	0x0801e141
 801e0f0:	0801e0bd 	.word	0x0801e0bd
 801e0f4:	0801e0bd 	.word	0x0801e0bd
 801e0f8:	0801e0bd 	.word	0x0801e0bd
 801e0fc:	0801e0bd 	.word	0x0801e0bd
 801e100:	0801e243 	.word	0x0801e243
 801e104:	0801e16d 	.word	0x0801e16d
 801e108:	0801e1ff 	.word	0x0801e1ff
 801e10c:	0801e0bd 	.word	0x0801e0bd
 801e110:	0801e0bd 	.word	0x0801e0bd
 801e114:	0801e265 	.word	0x0801e265
 801e118:	0801e0bd 	.word	0x0801e0bd
 801e11c:	0801e16d 	.word	0x0801e16d
 801e120:	0801e0bd 	.word	0x0801e0bd
 801e124:	0801e0bd 	.word	0x0801e0bd
 801e128:	0801e207 	.word	0x0801e207
 801e12c:	682b      	ldr	r3, [r5, #0]
 801e12e:	1d1a      	adds	r2, r3, #4
 801e130:	681b      	ldr	r3, [r3, #0]
 801e132:	602a      	str	r2, [r5, #0]
 801e134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e13c:	2301      	movs	r3, #1
 801e13e:	e09e      	b.n	801e27e <_printf_i+0x1ea>
 801e140:	6820      	ldr	r0, [r4, #0]
 801e142:	682b      	ldr	r3, [r5, #0]
 801e144:	0607      	lsls	r7, r0, #24
 801e146:	f103 0104 	add.w	r1, r3, #4
 801e14a:	6029      	str	r1, [r5, #0]
 801e14c:	d501      	bpl.n	801e152 <_printf_i+0xbe>
 801e14e:	681e      	ldr	r6, [r3, #0]
 801e150:	e003      	b.n	801e15a <_printf_i+0xc6>
 801e152:	0646      	lsls	r6, r0, #25
 801e154:	d5fb      	bpl.n	801e14e <_printf_i+0xba>
 801e156:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e15a:	2e00      	cmp	r6, #0
 801e15c:	da03      	bge.n	801e166 <_printf_i+0xd2>
 801e15e:	232d      	movs	r3, #45	; 0x2d
 801e160:	4276      	negs	r6, r6
 801e162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e166:	4859      	ldr	r0, [pc, #356]	; (801e2cc <_printf_i+0x238>)
 801e168:	230a      	movs	r3, #10
 801e16a:	e012      	b.n	801e192 <_printf_i+0xfe>
 801e16c:	682b      	ldr	r3, [r5, #0]
 801e16e:	6820      	ldr	r0, [r4, #0]
 801e170:	1d19      	adds	r1, r3, #4
 801e172:	6029      	str	r1, [r5, #0]
 801e174:	0605      	lsls	r5, r0, #24
 801e176:	d501      	bpl.n	801e17c <_printf_i+0xe8>
 801e178:	681e      	ldr	r6, [r3, #0]
 801e17a:	e002      	b.n	801e182 <_printf_i+0xee>
 801e17c:	0641      	lsls	r1, r0, #25
 801e17e:	d5fb      	bpl.n	801e178 <_printf_i+0xe4>
 801e180:	881e      	ldrh	r6, [r3, #0]
 801e182:	2f6f      	cmp	r7, #111	; 0x6f
 801e184:	4851      	ldr	r0, [pc, #324]	; (801e2cc <_printf_i+0x238>)
 801e186:	bf0c      	ite	eq
 801e188:	2308      	moveq	r3, #8
 801e18a:	230a      	movne	r3, #10
 801e18c:	2100      	movs	r1, #0
 801e18e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e192:	6865      	ldr	r5, [r4, #4]
 801e194:	2d00      	cmp	r5, #0
 801e196:	60a5      	str	r5, [r4, #8]
 801e198:	bfa2      	ittt	ge
 801e19a:	6821      	ldrge	r1, [r4, #0]
 801e19c:	f021 0104 	bicge.w	r1, r1, #4
 801e1a0:	6021      	strge	r1, [r4, #0]
 801e1a2:	b90e      	cbnz	r6, 801e1a8 <_printf_i+0x114>
 801e1a4:	2d00      	cmp	r5, #0
 801e1a6:	d04a      	beq.n	801e23e <_printf_i+0x1aa>
 801e1a8:	4615      	mov	r5, r2
 801e1aa:	fbb6 f1f3 	udiv	r1, r6, r3
 801e1ae:	fb03 6711 	mls	r7, r3, r1, r6
 801e1b2:	5dc7      	ldrb	r7, [r0, r7]
 801e1b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e1b8:	4637      	mov	r7, r6
 801e1ba:	460e      	mov	r6, r1
 801e1bc:	42bb      	cmp	r3, r7
 801e1be:	d9f4      	bls.n	801e1aa <_printf_i+0x116>
 801e1c0:	2b08      	cmp	r3, #8
 801e1c2:	d10b      	bne.n	801e1dc <_printf_i+0x148>
 801e1c4:	6823      	ldr	r3, [r4, #0]
 801e1c6:	07de      	lsls	r6, r3, #31
 801e1c8:	d508      	bpl.n	801e1dc <_printf_i+0x148>
 801e1ca:	6923      	ldr	r3, [r4, #16]
 801e1cc:	6861      	ldr	r1, [r4, #4]
 801e1ce:	4299      	cmp	r1, r3
 801e1d0:	bfde      	ittt	le
 801e1d2:	2330      	movle	r3, #48	; 0x30
 801e1d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e1d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e1dc:	1b52      	subs	r2, r2, r5
 801e1de:	6122      	str	r2, [r4, #16]
 801e1e0:	464b      	mov	r3, r9
 801e1e2:	aa03      	add	r2, sp, #12
 801e1e4:	4621      	mov	r1, r4
 801e1e6:	4640      	mov	r0, r8
 801e1e8:	f8cd a000 	str.w	sl, [sp]
 801e1ec:	f7ff fee0 	bl	801dfb0 <_printf_common>
 801e1f0:	3001      	adds	r0, #1
 801e1f2:	d149      	bne.n	801e288 <_printf_i+0x1f4>
 801e1f4:	f04f 30ff 	mov.w	r0, #4294967295
 801e1f8:	b004      	add	sp, #16
 801e1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1fe:	6823      	ldr	r3, [r4, #0]
 801e200:	f043 0320 	orr.w	r3, r3, #32
 801e204:	6023      	str	r3, [r4, #0]
 801e206:	2778      	movs	r7, #120	; 0x78
 801e208:	4831      	ldr	r0, [pc, #196]	; (801e2d0 <_printf_i+0x23c>)
 801e20a:	6823      	ldr	r3, [r4, #0]
 801e20c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801e210:	061f      	lsls	r7, r3, #24
 801e212:	6829      	ldr	r1, [r5, #0]
 801e214:	f851 6b04 	ldr.w	r6, [r1], #4
 801e218:	d402      	bmi.n	801e220 <_printf_i+0x18c>
 801e21a:	065f      	lsls	r7, r3, #25
 801e21c:	bf48      	it	mi
 801e21e:	b2b6      	uxthmi	r6, r6
 801e220:	07df      	lsls	r7, r3, #31
 801e222:	6029      	str	r1, [r5, #0]
 801e224:	bf44      	itt	mi
 801e226:	f043 0320 	orrmi.w	r3, r3, #32
 801e22a:	6023      	strmi	r3, [r4, #0]
 801e22c:	b91e      	cbnz	r6, 801e236 <_printf_i+0x1a2>
 801e22e:	6823      	ldr	r3, [r4, #0]
 801e230:	f023 0320 	bic.w	r3, r3, #32
 801e234:	6023      	str	r3, [r4, #0]
 801e236:	2310      	movs	r3, #16
 801e238:	e7a8      	b.n	801e18c <_printf_i+0xf8>
 801e23a:	4824      	ldr	r0, [pc, #144]	; (801e2cc <_printf_i+0x238>)
 801e23c:	e7e5      	b.n	801e20a <_printf_i+0x176>
 801e23e:	4615      	mov	r5, r2
 801e240:	e7be      	b.n	801e1c0 <_printf_i+0x12c>
 801e242:	682b      	ldr	r3, [r5, #0]
 801e244:	6826      	ldr	r6, [r4, #0]
 801e246:	1d18      	adds	r0, r3, #4
 801e248:	6961      	ldr	r1, [r4, #20]
 801e24a:	6028      	str	r0, [r5, #0]
 801e24c:	0635      	lsls	r5, r6, #24
 801e24e:	681b      	ldr	r3, [r3, #0]
 801e250:	d501      	bpl.n	801e256 <_printf_i+0x1c2>
 801e252:	6019      	str	r1, [r3, #0]
 801e254:	e002      	b.n	801e25c <_printf_i+0x1c8>
 801e256:	0670      	lsls	r0, r6, #25
 801e258:	d5fb      	bpl.n	801e252 <_printf_i+0x1be>
 801e25a:	8019      	strh	r1, [r3, #0]
 801e25c:	2300      	movs	r3, #0
 801e25e:	4615      	mov	r5, r2
 801e260:	6123      	str	r3, [r4, #16]
 801e262:	e7bd      	b.n	801e1e0 <_printf_i+0x14c>
 801e264:	682b      	ldr	r3, [r5, #0]
 801e266:	2100      	movs	r1, #0
 801e268:	1d1a      	adds	r2, r3, #4
 801e26a:	602a      	str	r2, [r5, #0]
 801e26c:	681d      	ldr	r5, [r3, #0]
 801e26e:	6862      	ldr	r2, [r4, #4]
 801e270:	4628      	mov	r0, r5
 801e272:	f7ff fc23 	bl	801dabc <memchr>
 801e276:	b108      	cbz	r0, 801e27c <_printf_i+0x1e8>
 801e278:	1b40      	subs	r0, r0, r5
 801e27a:	6060      	str	r0, [r4, #4]
 801e27c:	6863      	ldr	r3, [r4, #4]
 801e27e:	6123      	str	r3, [r4, #16]
 801e280:	2300      	movs	r3, #0
 801e282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e286:	e7ab      	b.n	801e1e0 <_printf_i+0x14c>
 801e288:	6923      	ldr	r3, [r4, #16]
 801e28a:	462a      	mov	r2, r5
 801e28c:	4649      	mov	r1, r9
 801e28e:	4640      	mov	r0, r8
 801e290:	47d0      	blx	sl
 801e292:	3001      	adds	r0, #1
 801e294:	d0ae      	beq.n	801e1f4 <_printf_i+0x160>
 801e296:	6823      	ldr	r3, [r4, #0]
 801e298:	079b      	lsls	r3, r3, #30
 801e29a:	d413      	bmi.n	801e2c4 <_printf_i+0x230>
 801e29c:	68e0      	ldr	r0, [r4, #12]
 801e29e:	9b03      	ldr	r3, [sp, #12]
 801e2a0:	4298      	cmp	r0, r3
 801e2a2:	bfb8      	it	lt
 801e2a4:	4618      	movlt	r0, r3
 801e2a6:	e7a7      	b.n	801e1f8 <_printf_i+0x164>
 801e2a8:	2301      	movs	r3, #1
 801e2aa:	4632      	mov	r2, r6
 801e2ac:	4649      	mov	r1, r9
 801e2ae:	4640      	mov	r0, r8
 801e2b0:	47d0      	blx	sl
 801e2b2:	3001      	adds	r0, #1
 801e2b4:	d09e      	beq.n	801e1f4 <_printf_i+0x160>
 801e2b6:	3501      	adds	r5, #1
 801e2b8:	68e3      	ldr	r3, [r4, #12]
 801e2ba:	9903      	ldr	r1, [sp, #12]
 801e2bc:	1a5b      	subs	r3, r3, r1
 801e2be:	42ab      	cmp	r3, r5
 801e2c0:	dcf2      	bgt.n	801e2a8 <_printf_i+0x214>
 801e2c2:	e7eb      	b.n	801e29c <_printf_i+0x208>
 801e2c4:	2500      	movs	r5, #0
 801e2c6:	f104 0619 	add.w	r6, r4, #25
 801e2ca:	e7f5      	b.n	801e2b8 <_printf_i+0x224>
 801e2cc:	0801ee08 	.word	0x0801ee08
 801e2d0:	0801ee19 	.word	0x0801ee19

0801e2d4 <__swbuf_r>:
 801e2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2d6:	460e      	mov	r6, r1
 801e2d8:	4614      	mov	r4, r2
 801e2da:	4605      	mov	r5, r0
 801e2dc:	b118      	cbz	r0, 801e2e6 <__swbuf_r+0x12>
 801e2de:	6a03      	ldr	r3, [r0, #32]
 801e2e0:	b90b      	cbnz	r3, 801e2e6 <__swbuf_r+0x12>
 801e2e2:	f7fe fd97 	bl	801ce14 <__sinit>
 801e2e6:	69a3      	ldr	r3, [r4, #24]
 801e2e8:	60a3      	str	r3, [r4, #8]
 801e2ea:	89a3      	ldrh	r3, [r4, #12]
 801e2ec:	071a      	lsls	r2, r3, #28
 801e2ee:	d525      	bpl.n	801e33c <__swbuf_r+0x68>
 801e2f0:	6923      	ldr	r3, [r4, #16]
 801e2f2:	b31b      	cbz	r3, 801e33c <__swbuf_r+0x68>
 801e2f4:	6823      	ldr	r3, [r4, #0]
 801e2f6:	b2f6      	uxtb	r6, r6
 801e2f8:	6922      	ldr	r2, [r4, #16]
 801e2fa:	4637      	mov	r7, r6
 801e2fc:	1a98      	subs	r0, r3, r2
 801e2fe:	6963      	ldr	r3, [r4, #20]
 801e300:	4283      	cmp	r3, r0
 801e302:	dc04      	bgt.n	801e30e <__swbuf_r+0x3a>
 801e304:	4621      	mov	r1, r4
 801e306:	4628      	mov	r0, r5
 801e308:	f7ff fb2e 	bl	801d968 <_fflush_r>
 801e30c:	b9e0      	cbnz	r0, 801e348 <__swbuf_r+0x74>
 801e30e:	68a3      	ldr	r3, [r4, #8]
 801e310:	3b01      	subs	r3, #1
 801e312:	60a3      	str	r3, [r4, #8]
 801e314:	6823      	ldr	r3, [r4, #0]
 801e316:	1c5a      	adds	r2, r3, #1
 801e318:	6022      	str	r2, [r4, #0]
 801e31a:	701e      	strb	r6, [r3, #0]
 801e31c:	1c43      	adds	r3, r0, #1
 801e31e:	6962      	ldr	r2, [r4, #20]
 801e320:	429a      	cmp	r2, r3
 801e322:	d004      	beq.n	801e32e <__swbuf_r+0x5a>
 801e324:	89a3      	ldrh	r3, [r4, #12]
 801e326:	07db      	lsls	r3, r3, #31
 801e328:	d506      	bpl.n	801e338 <__swbuf_r+0x64>
 801e32a:	2e0a      	cmp	r6, #10
 801e32c:	d104      	bne.n	801e338 <__swbuf_r+0x64>
 801e32e:	4621      	mov	r1, r4
 801e330:	4628      	mov	r0, r5
 801e332:	f7ff fb19 	bl	801d968 <_fflush_r>
 801e336:	b938      	cbnz	r0, 801e348 <__swbuf_r+0x74>
 801e338:	4638      	mov	r0, r7
 801e33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e33c:	4621      	mov	r1, r4
 801e33e:	4628      	mov	r0, r5
 801e340:	f000 f806 	bl	801e350 <__swsetup_r>
 801e344:	2800      	cmp	r0, #0
 801e346:	d0d5      	beq.n	801e2f4 <__swbuf_r+0x20>
 801e348:	f04f 37ff 	mov.w	r7, #4294967295
 801e34c:	e7f4      	b.n	801e338 <__swbuf_r+0x64>
	...

0801e350 <__swsetup_r>:
 801e350:	b538      	push	{r3, r4, r5, lr}
 801e352:	4b2a      	ldr	r3, [pc, #168]	; (801e3fc <__swsetup_r+0xac>)
 801e354:	4605      	mov	r5, r0
 801e356:	460c      	mov	r4, r1
 801e358:	6818      	ldr	r0, [r3, #0]
 801e35a:	b118      	cbz	r0, 801e364 <__swsetup_r+0x14>
 801e35c:	6a03      	ldr	r3, [r0, #32]
 801e35e:	b90b      	cbnz	r3, 801e364 <__swsetup_r+0x14>
 801e360:	f7fe fd58 	bl	801ce14 <__sinit>
 801e364:	89a3      	ldrh	r3, [r4, #12]
 801e366:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e36a:	0718      	lsls	r0, r3, #28
 801e36c:	d422      	bmi.n	801e3b4 <__swsetup_r+0x64>
 801e36e:	06d9      	lsls	r1, r3, #27
 801e370:	d407      	bmi.n	801e382 <__swsetup_r+0x32>
 801e372:	2309      	movs	r3, #9
 801e374:	602b      	str	r3, [r5, #0]
 801e376:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e37a:	f04f 30ff 	mov.w	r0, #4294967295
 801e37e:	81a3      	strh	r3, [r4, #12]
 801e380:	e034      	b.n	801e3ec <__swsetup_r+0x9c>
 801e382:	0758      	lsls	r0, r3, #29
 801e384:	d512      	bpl.n	801e3ac <__swsetup_r+0x5c>
 801e386:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e388:	b141      	cbz	r1, 801e39c <__swsetup_r+0x4c>
 801e38a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e38e:	4299      	cmp	r1, r3
 801e390:	d002      	beq.n	801e398 <__swsetup_r+0x48>
 801e392:	4628      	mov	r0, r5
 801e394:	f7fe fefa 	bl	801d18c <_free_r>
 801e398:	2300      	movs	r3, #0
 801e39a:	6363      	str	r3, [r4, #52]	; 0x34
 801e39c:	89a3      	ldrh	r3, [r4, #12]
 801e39e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e3a2:	81a3      	strh	r3, [r4, #12]
 801e3a4:	2300      	movs	r3, #0
 801e3a6:	6063      	str	r3, [r4, #4]
 801e3a8:	6923      	ldr	r3, [r4, #16]
 801e3aa:	6023      	str	r3, [r4, #0]
 801e3ac:	89a3      	ldrh	r3, [r4, #12]
 801e3ae:	f043 0308 	orr.w	r3, r3, #8
 801e3b2:	81a3      	strh	r3, [r4, #12]
 801e3b4:	6923      	ldr	r3, [r4, #16]
 801e3b6:	b94b      	cbnz	r3, 801e3cc <__swsetup_r+0x7c>
 801e3b8:	89a3      	ldrh	r3, [r4, #12]
 801e3ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e3be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e3c2:	d003      	beq.n	801e3cc <__swsetup_r+0x7c>
 801e3c4:	4621      	mov	r1, r4
 801e3c6:	4628      	mov	r0, r5
 801e3c8:	f000 f847 	bl	801e45a <__smakebuf_r>
 801e3cc:	89a0      	ldrh	r0, [r4, #12]
 801e3ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e3d2:	f010 0301 	ands.w	r3, r0, #1
 801e3d6:	d00a      	beq.n	801e3ee <__swsetup_r+0x9e>
 801e3d8:	2300      	movs	r3, #0
 801e3da:	60a3      	str	r3, [r4, #8]
 801e3dc:	6963      	ldr	r3, [r4, #20]
 801e3de:	425b      	negs	r3, r3
 801e3e0:	61a3      	str	r3, [r4, #24]
 801e3e2:	6923      	ldr	r3, [r4, #16]
 801e3e4:	b943      	cbnz	r3, 801e3f8 <__swsetup_r+0xa8>
 801e3e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e3ea:	d1c4      	bne.n	801e376 <__swsetup_r+0x26>
 801e3ec:	bd38      	pop	{r3, r4, r5, pc}
 801e3ee:	0781      	lsls	r1, r0, #30
 801e3f0:	bf58      	it	pl
 801e3f2:	6963      	ldrpl	r3, [r4, #20]
 801e3f4:	60a3      	str	r3, [r4, #8]
 801e3f6:	e7f4      	b.n	801e3e2 <__swsetup_r+0x92>
 801e3f8:	2000      	movs	r0, #0
 801e3fa:	e7f7      	b.n	801e3ec <__swsetup_r+0x9c>
 801e3fc:	20000080 	.word	0x20000080

0801e400 <_malloc_usable_size_r>:
 801e400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e404:	1f18      	subs	r0, r3, #4
 801e406:	2b00      	cmp	r3, #0
 801e408:	bfbc      	itt	lt
 801e40a:	580b      	ldrlt	r3, [r1, r0]
 801e40c:	18c0      	addlt	r0, r0, r3
 801e40e:	4770      	bx	lr

0801e410 <__swhatbuf_r>:
 801e410:	b570      	push	{r4, r5, r6, lr}
 801e412:	460c      	mov	r4, r1
 801e414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e418:	b096      	sub	sp, #88	; 0x58
 801e41a:	4615      	mov	r5, r2
 801e41c:	2900      	cmp	r1, #0
 801e41e:	461e      	mov	r6, r3
 801e420:	da0c      	bge.n	801e43c <__swhatbuf_r+0x2c>
 801e422:	89a3      	ldrh	r3, [r4, #12]
 801e424:	2100      	movs	r1, #0
 801e426:	f013 0f80 	tst.w	r3, #128	; 0x80
 801e42a:	bf0c      	ite	eq
 801e42c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801e430:	2340      	movne	r3, #64	; 0x40
 801e432:	2000      	movs	r0, #0
 801e434:	6031      	str	r1, [r6, #0]
 801e436:	602b      	str	r3, [r5, #0]
 801e438:	b016      	add	sp, #88	; 0x58
 801e43a:	bd70      	pop	{r4, r5, r6, pc}
 801e43c:	466a      	mov	r2, sp
 801e43e:	f000 f849 	bl	801e4d4 <_fstat_r>
 801e442:	2800      	cmp	r0, #0
 801e444:	dbed      	blt.n	801e422 <__swhatbuf_r+0x12>
 801e446:	9901      	ldr	r1, [sp, #4]
 801e448:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801e44c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801e450:	4259      	negs	r1, r3
 801e452:	4159      	adcs	r1, r3
 801e454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e458:	e7eb      	b.n	801e432 <__swhatbuf_r+0x22>

0801e45a <__smakebuf_r>:
 801e45a:	898b      	ldrh	r3, [r1, #12]
 801e45c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e45e:	079d      	lsls	r5, r3, #30
 801e460:	4606      	mov	r6, r0
 801e462:	460c      	mov	r4, r1
 801e464:	d507      	bpl.n	801e476 <__smakebuf_r+0x1c>
 801e466:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e46a:	6023      	str	r3, [r4, #0]
 801e46c:	6123      	str	r3, [r4, #16]
 801e46e:	2301      	movs	r3, #1
 801e470:	6163      	str	r3, [r4, #20]
 801e472:	b002      	add	sp, #8
 801e474:	bd70      	pop	{r4, r5, r6, pc}
 801e476:	ab01      	add	r3, sp, #4
 801e478:	466a      	mov	r2, sp
 801e47a:	f7ff ffc9 	bl	801e410 <__swhatbuf_r>
 801e47e:	9900      	ldr	r1, [sp, #0]
 801e480:	4605      	mov	r5, r0
 801e482:	4630      	mov	r0, r6
 801e484:	f7fe fb70 	bl	801cb68 <_malloc_r>
 801e488:	b948      	cbnz	r0, 801e49e <__smakebuf_r+0x44>
 801e48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e48e:	059a      	lsls	r2, r3, #22
 801e490:	d4ef      	bmi.n	801e472 <__smakebuf_r+0x18>
 801e492:	f023 0303 	bic.w	r3, r3, #3
 801e496:	f043 0302 	orr.w	r3, r3, #2
 801e49a:	81a3      	strh	r3, [r4, #12]
 801e49c:	e7e3      	b.n	801e466 <__smakebuf_r+0xc>
 801e49e:	89a3      	ldrh	r3, [r4, #12]
 801e4a0:	6020      	str	r0, [r4, #0]
 801e4a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e4a6:	6120      	str	r0, [r4, #16]
 801e4a8:	81a3      	strh	r3, [r4, #12]
 801e4aa:	9b00      	ldr	r3, [sp, #0]
 801e4ac:	6163      	str	r3, [r4, #20]
 801e4ae:	9b01      	ldr	r3, [sp, #4]
 801e4b0:	b15b      	cbz	r3, 801e4ca <__smakebuf_r+0x70>
 801e4b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e4b6:	4630      	mov	r0, r6
 801e4b8:	f000 f81e 	bl	801e4f8 <_isatty_r>
 801e4bc:	b128      	cbz	r0, 801e4ca <__smakebuf_r+0x70>
 801e4be:	89a3      	ldrh	r3, [r4, #12]
 801e4c0:	f023 0303 	bic.w	r3, r3, #3
 801e4c4:	f043 0301 	orr.w	r3, r3, #1
 801e4c8:	81a3      	strh	r3, [r4, #12]
 801e4ca:	89a3      	ldrh	r3, [r4, #12]
 801e4cc:	431d      	orrs	r5, r3
 801e4ce:	81a5      	strh	r5, [r4, #12]
 801e4d0:	e7cf      	b.n	801e472 <__smakebuf_r+0x18>
	...

0801e4d4 <_fstat_r>:
 801e4d4:	b538      	push	{r3, r4, r5, lr}
 801e4d6:	2300      	movs	r3, #0
 801e4d8:	4d06      	ldr	r5, [pc, #24]	; (801e4f4 <_fstat_r+0x20>)
 801e4da:	4604      	mov	r4, r0
 801e4dc:	4608      	mov	r0, r1
 801e4de:	4611      	mov	r1, r2
 801e4e0:	602b      	str	r3, [r5, #0]
 801e4e2:	f7f0 ff94 	bl	800f40e <_fstat>
 801e4e6:	1c43      	adds	r3, r0, #1
 801e4e8:	d102      	bne.n	801e4f0 <_fstat_r+0x1c>
 801e4ea:	682b      	ldr	r3, [r5, #0]
 801e4ec:	b103      	cbz	r3, 801e4f0 <_fstat_r+0x1c>
 801e4ee:	6023      	str	r3, [r4, #0]
 801e4f0:	bd38      	pop	{r3, r4, r5, pc}
 801e4f2:	bf00      	nop
 801e4f4:	20003848 	.word	0x20003848

0801e4f8 <_isatty_r>:
 801e4f8:	b538      	push	{r3, r4, r5, lr}
 801e4fa:	2300      	movs	r3, #0
 801e4fc:	4d05      	ldr	r5, [pc, #20]	; (801e514 <_isatty_r+0x1c>)
 801e4fe:	4604      	mov	r4, r0
 801e500:	4608      	mov	r0, r1
 801e502:	602b      	str	r3, [r5, #0]
 801e504:	f7f0 ff93 	bl	800f42e <_isatty>
 801e508:	1c43      	adds	r3, r0, #1
 801e50a:	d102      	bne.n	801e512 <_isatty_r+0x1a>
 801e50c:	682b      	ldr	r3, [r5, #0]
 801e50e:	b103      	cbz	r3, 801e512 <_isatty_r+0x1a>
 801e510:	6023      	str	r3, [r4, #0]
 801e512:	bd38      	pop	{r3, r4, r5, pc}
 801e514:	20003848 	.word	0x20003848

0801e518 <_init>:
 801e518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e51a:	bf00      	nop
 801e51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e51e:	bc08      	pop	{r3}
 801e520:	469e      	mov	lr, r3
 801e522:	4770      	bx	lr

0801e524 <_fini>:
 801e524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e526:	bf00      	nop
 801e528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e52a:	bc08      	pop	{r3}
 801e52c:	469e      	mov	lr, r3
 801e52e:	4770      	bx	lr
