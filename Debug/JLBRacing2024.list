
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023bdc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000098c  08023de0  08023de0  00033de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802476c  0802476c  00040104  2**0
                  CONTENTS
  4 .ARM          00000008  0802476c  0802476c  0003476c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024774  08024774  00040104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08024774  08024774  00034774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08024784  08024784  00034784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08024794  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c20  20000108  08024898  00040108  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003d28  08024898  00043d28  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00040104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005e1d5  00000000  00000000  0004013a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000087c4  00000000  00000000  0009e30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004130  00000000  00000000  000a6ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003ee0  00000000  00000000  000aac08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003964c  00000000  00000000  000aeae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004339d  00000000  00000000  000e8134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00169340  00000000  00000000  0012b4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00294811  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001362c  00000000  00000000  00294864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	e000      	b.n	8000212 <__do_global_dtors_aux+0x12>
 8000210:	bf00      	nop
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000108 	.word	0x20000108
 800021c:	00000000 	.word	0x00000000
 8000220:	08023dc4 	.word	0x08023dc4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	e000      	b.n	8000232 <frame_dummy+0xe>
 8000230:	bf00      	nop
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000010c 	.word	0x2000010c
 800023c:	08023dc4 	.word	0x08023dc4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b982 	b.w	8000f38 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000c52:	4604      	mov	r4, r0
 8000c54:	460f      	mov	r7, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d148      	bne.n	8000cec <__udivmoddi4+0xa0>
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	d961      	bls.n	8000d24 <__udivmoddi4+0xd8>
 8000c60:	fab2 f382 	clz	r3, r2
 8000c64:	b143      	cbz	r3, 8000c78 <__udivmoddi4+0x2c>
 8000c66:	f1c3 0120 	rsb	r1, r3, #32
 8000c6a:	409f      	lsls	r7, r3
 8000c6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c70:	409c      	lsls	r4, r3
 8000c72:	fa20 f101 	lsr.w	r1, r0, r1
 8000c76:	430f      	orrs	r7, r1
 8000c78:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c7c:	fa1f fe8c 	uxth.w	lr, ip
 8000c80:	0c22      	lsrs	r2, r4, #16
 8000c82:	fbb7 f6f1 	udiv	r6, r7, r1
 8000c86:	fb01 7716 	mls	r7, r1, r6, r7
 8000c8a:	fb06 f00e 	mul.w	r0, r6, lr
 8000c8e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c92:	4290      	cmp	r0, r2
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x5c>
 8000c96:	eb1c 0202 	adds.w	r2, ip, r2
 8000c9a:	f106 37ff 	add.w	r7, r6, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x5a>
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	f200 8137 	bhi.w	8000f14 <__udivmoddi4+0x2c8>
 8000ca6:	463e      	mov	r6, r7
 8000ca8:	1a12      	subs	r2, r2, r0
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb2 f0f1 	udiv	r0, r2, r1
 8000cb0:	fb01 2210 	mls	r2, r1, r0, r2
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cbc:	45a6      	cmp	lr, r4
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x86>
 8000cc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cc8:	d202      	bcs.n	8000cd0 <__udivmoddi4+0x84>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f200 811c 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	2600      	movs	r6, #0
 8000cdc:	b11d      	cbz	r5, 8000ce6 <__udivmoddi4+0x9a>
 8000cde:	40dc      	lsrs	r4, r3
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce6:	4631      	mov	r1, r6
 8000ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cec:	428b      	cmp	r3, r1
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0xb8>
 8000cf0:	2d00      	cmp	r5, #0
 8000cf2:	f000 80fd 	beq.w	8000ef0 <__udivmoddi4+0x2a4>
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4631      	mov	r1, r6
 8000d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d04:	fab3 f683 	clz	r6, r3
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d14b      	bne.n	8000da4 <__udivmoddi4+0x158>
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	f0c0 80f2 	bcc.w	8000ef6 <__udivmoddi4+0x2aa>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f240 80ef 	bls.w	8000ef6 <__udivmoddi4+0x2aa>
 8000d18:	4630      	mov	r0, r6
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0e3      	beq.n	8000ce6 <__udivmoddi4+0x9a>
 8000d1e:	e9c5 4700 	strd	r4, r7, [r5]
 8000d22:	e7e0      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000d24:	b902      	cbnz	r2, 8000d28 <__udivmoddi4+0xdc>
 8000d26:	deff      	udf	#255	; 0xff
 8000d28:	fab2 f382 	clz	r3, r2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f040 809d 	bne.w	8000e6c <__udivmoddi4+0x220>
 8000d32:	1a89      	subs	r1, r1, r2
 8000d34:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d38:	b297      	uxth	r7, r2
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f2fe 	udiv	r2, r1, lr
 8000d42:	fb0e 1112 	mls	r1, lr, r2, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb07 f002 	mul.w	r0, r7, r2
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d90f      	bls.n	8000d72 <__udivmoddi4+0x126>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f102 38ff 	add.w	r8, r2, #4294967295
 8000d5a:	bf2c      	ite	cs
 8000d5c:	f04f 0901 	movcs.w	r9, #1
 8000d60:	f04f 0900 	movcc.w	r9, #0
 8000d64:	4288      	cmp	r0, r1
 8000d66:	d903      	bls.n	8000d70 <__udivmoddi4+0x124>
 8000d68:	f1b9 0f00 	cmp.w	r9, #0
 8000d6c:	f000 80cf 	beq.w	8000f0e <__udivmoddi4+0x2c2>
 8000d70:	4642      	mov	r2, r8
 8000d72:	1a09      	subs	r1, r1, r0
 8000d74:	b2a4      	uxth	r4, r4
 8000d76:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d7a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7e:	fb00 f707 	mul.w	r7, r0, r7
 8000d82:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d86:	42a7      	cmp	r7, r4
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x150>
 8000d8a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d8e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x14e>
 8000d94:	42a7      	cmp	r7, r4
 8000d96:	f200 80b4 	bhi.w	8000f02 <__udivmoddi4+0x2b6>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	1be4      	subs	r4, r4, r7
 8000d9e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000da2:	e79b      	b.n	8000cdc <__udivmoddi4+0x90>
 8000da4:	f1c6 0720 	rsb	r7, r6, #32
 8000da8:	40b3      	lsls	r3, r6
 8000daa:	fa01 f406 	lsl.w	r4, r1, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	40f9      	lsrs	r1, r7
 8000db4:	40b2      	lsls	r2, r6
 8000db6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dba:	fa20 f307 	lsr.w	r3, r0, r7
 8000dbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc2:	431c      	orrs	r4, r3
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dd2:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb08 f00e 	mul.w	r0, r8, lr
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d90f      	bls.n	8000e02 <__udivmoddi4+0x1b6>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dea:	bf2c      	ite	cs
 8000dec:	f04f 0b01 	movcs.w	fp, #1
 8000df0:	f04f 0b00 	movcc.w	fp, #0
 8000df4:	4288      	cmp	r0, r1
 8000df6:	d903      	bls.n	8000e00 <__udivmoddi4+0x1b4>
 8000df8:	f1bb 0f00 	cmp.w	fp, #0
 8000dfc:	f000 808d 	beq.w	8000f1a <__udivmoddi4+0x2ce>
 8000e00:	46d0      	mov	r8, sl
 8000e02:	1a09      	subs	r1, r1, r0
 8000e04:	b2a4      	uxth	r4, r4
 8000e06:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e0a:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e12:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e16:	458e      	cmp	lr, r1
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x1de>
 8000e1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e22:	d201      	bcs.n	8000e28 <__udivmoddi4+0x1dc>
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d87f      	bhi.n	8000f28 <__udivmoddi4+0x2dc>
 8000e28:	4620      	mov	r0, r4
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	eba1 010e 	sub.w	r1, r1, lr
 8000e32:	fba0 9802 	umull	r9, r8, r0, r2
 8000e36:	4541      	cmp	r1, r8
 8000e38:	464c      	mov	r4, r9
 8000e3a:	46c6      	mov	lr, r8
 8000e3c:	d302      	bcc.n	8000e44 <__udivmoddi4+0x1f8>
 8000e3e:	d106      	bne.n	8000e4e <__udivmoddi4+0x202>
 8000e40:	454b      	cmp	r3, r9
 8000e42:	d204      	bcs.n	8000e4e <__udivmoddi4+0x202>
 8000e44:	3801      	subs	r0, #1
 8000e46:	ebb9 0402 	subs.w	r4, r9, r2
 8000e4a:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	d070      	beq.n	8000f34 <__udivmoddi4+0x2e8>
 8000e52:	1b1a      	subs	r2, r3, r4
 8000e54:	eb61 010e 	sbc.w	r1, r1, lr
 8000e58:	fa22 f306 	lsr.w	r3, r2, r6
 8000e5c:	fa01 f707 	lsl.w	r7, r1, r7
 8000e60:	40f1      	lsrs	r1, r6
 8000e62:	2600      	movs	r6, #0
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	e73c      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000e6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e70:	f1c3 0020 	rsb	r0, r3, #32
 8000e74:	fa01 f203 	lsl.w	r2, r1, r3
 8000e78:	fa21 f600 	lsr.w	r6, r1, r0
 8000e7c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e80:	fa24 f100 	lsr.w	r1, r4, r0
 8000e84:	fa1f f78c 	uxth.w	r7, ip
 8000e88:	409c      	lsls	r4, r3
 8000e8a:	4311      	orrs	r1, r2
 8000e8c:	fbb6 f0fe 	udiv	r0, r6, lr
 8000e90:	0c0a      	lsrs	r2, r1, #16
 8000e92:	fb0e 6610 	mls	r6, lr, r0, r6
 8000e96:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000e9a:	fb00 f607 	mul.w	r6, r0, r7
 8000e9e:	4296      	cmp	r6, r2
 8000ea0:	d90e      	bls.n	8000ec0 <__udivmoddi4+0x274>
 8000ea2:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eaa:	bf2c      	ite	cs
 8000eac:	f04f 0901 	movcs.w	r9, #1
 8000eb0:	f04f 0900 	movcc.w	r9, #0
 8000eb4:	4296      	cmp	r6, r2
 8000eb6:	d902      	bls.n	8000ebe <__udivmoddi4+0x272>
 8000eb8:	f1b9 0f00 	cmp.w	r9, #0
 8000ebc:	d031      	beq.n	8000f22 <__udivmoddi4+0x2d6>
 8000ebe:	4640      	mov	r0, r8
 8000ec0:	1b92      	subs	r2, r2, r6
 8000ec2:	b289      	uxth	r1, r1
 8000ec4:	fbb2 f6fe 	udiv	r6, r2, lr
 8000ec8:	fb0e 2216 	mls	r2, lr, r6, r2
 8000ecc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000ed0:	fb06 f207 	mul.w	r2, r6, r7
 8000ed4:	428a      	cmp	r2, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x29c>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee0:	d201      	bcs.n	8000ee6 <__udivmoddi4+0x29a>
 8000ee2:	428a      	cmp	r2, r1
 8000ee4:	d823      	bhi.n	8000f2e <__udivmoddi4+0x2e2>
 8000ee6:	4646      	mov	r6, r8
 8000ee8:	1a89      	subs	r1, r1, r2
 8000eea:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eee:	e725      	b.n	8000d3c <__udivmoddi4+0xf0>
 8000ef0:	462e      	mov	r6, r5
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	e6f7      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000ef6:	1a84      	subs	r4, r0, r2
 8000ef8:	eb61 0303 	sbc.w	r3, r1, r3
 8000efc:	2001      	movs	r0, #1
 8000efe:	461f      	mov	r7, r3
 8000f00:	e70b      	b.n	8000d1a <__udivmoddi4+0xce>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e749      	b.n	8000d9c <__udivmoddi4+0x150>
 8000f08:	4464      	add	r4, ip
 8000f0a:	3802      	subs	r0, #2
 8000f0c:	e6e1      	b.n	8000cd2 <__udivmoddi4+0x86>
 8000f0e:	3a02      	subs	r2, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	e72e      	b.n	8000d72 <__udivmoddi4+0x126>
 8000f14:	3e02      	subs	r6, #2
 8000f16:	4462      	add	r2, ip
 8000f18:	e6c6      	b.n	8000ca8 <__udivmoddi4+0x5c>
 8000f1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	e76f      	b.n	8000e02 <__udivmoddi4+0x1b6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4462      	add	r2, ip
 8000f26:	e7cb      	b.n	8000ec0 <__udivmoddi4+0x274>
 8000f28:	3802      	subs	r0, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	e77d      	b.n	8000e2a <__udivmoddi4+0x1de>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	e7d9      	b.n	8000ee8 <__udivmoddi4+0x29c>
 8000f34:	462e      	mov	r6, r5
 8000f36:	e6d6      	b.n	8000ce6 <__udivmoddi4+0x9a>

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <Pack_measurements_1_jlb>:
}

#else

uint32_t Pack_measurements_1_jlb(measurements_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	75fb      	strb	r3, [r7, #23]
 8000f4e:	e007      	b.n	8000f60 <Pack_measurements_1_jlb+0x24>
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	75fa      	strb	r2, [r7, #23]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	2b07      	cmp	r3, #7
 8000f64:	d9f4      	bls.n	8000f50 <Pack_measurements_1_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->line_sensor_1 & (0x03U)) | ((_m->line_sensor_2 & (0x03U)) << 2U) | ((_m->line_sensor_3 & (0x03U)) << 4U) | ((_m->line_sensor_4 & (0x03U)) << 6U) );
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	781a      	ldrb	r2, [r3, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	b2d9      	uxtb	r1, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	785b      	ldrb	r3, [r3, #1]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	430b      	orrs	r3, r1
 8000f84:	b2d9      	uxtb	r1, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	789b      	ldrb	r3, [r3, #2]
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	430b      	orrs	r3, r1
 8000f96:	b2d9      	uxtb	r1, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	78db      	ldrb	r3, [r3, #3]
 8000f9c:	019b      	lsls	r3, r3, #6
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->line_sensor_5 & (0x03U)) | ((_m->line_sensor_6 & (0x03U)) << 2U) | ((_m->line_sensor_7 & (0x03U)) << 4U) | ((_m->line_sensor_8 & (0x03U)) << 6U) );
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	7819      	ldrb	r1, [r3, #0]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	791b      	ldrb	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	795b      	ldrb	r3, [r3, #5]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	799b      	ldrb	r3, [r3, #6]
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	79db      	ldrb	r3, [r3, #7]
 8000fe4:	019b      	lsls	r3, r3, #6
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_sensor_9 & (0x03U)) | ((_m->line_sensor_10 & (0x03U)) << 2U) | ((_m->line_sensor_11 & (0x03U)) << 4U) | ((_m->line_sensor_12 & (0x03U)) << 6U) );
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	7819      	ldrb	r1, [r3, #0]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	7a1b      	ldrb	r3, [r3, #8]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	b2da      	uxtb	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	7a5b      	ldrb	r3, [r3, #9]
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b2da      	uxtb	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	7a9b      	ldrb	r3, [r3, #10]
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	b2db      	uxtb	r3, r3
 8001020:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b2da      	uxtb	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	7adb      	ldrb	r3, [r3, #11]
 800102e:	019b      	lsls	r3, r3, #6
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b2da      	uxtb	r2, r3
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	3302      	adds	r3, #2
 800103a:	430a      	orrs	r2, r1
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->line_sensor_13 & (0x03U)) | ((_m->line_sensor_14 & (0x03U)) << 2U) | ((_m->line_sensor_15 & (0x03U)) << 4U) | ((_m->line_sensor_16 & (0x03U)) << 6U) );
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	3303      	adds	r3, #3
 8001044:	7819      	ldrb	r1, [r3, #0]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	7b1b      	ldrb	r3, [r3, #12]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	b2da      	uxtb	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	7b5b      	ldrb	r3, [r3, #13]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b2da      	uxtb	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	7b9b      	ldrb	r3, [r3, #14]
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	b2db      	uxtb	r3, r3
 800106a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b2da      	uxtb	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	7bdb      	ldrb	r3, [r3, #15]
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b2da      	uxtb	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	3303      	adds	r3, #3
 8001084:	430a      	orrs	r2, r1
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_sensor_17 & (0x03U)) | ((_m->line_sensor_18 & (0x03U)) << 2U) | ((_m->line_sensor_19 & (0x03U)) << 4U) | ((_m->line_sensor_20 & (0x03U)) << 6U) );
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	3304      	adds	r3, #4
 800108e:	7819      	ldrb	r1, [r3, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	7c1b      	ldrb	r3, [r3, #16]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	b2da      	uxtb	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	7c5b      	ldrb	r3, [r3, #17]
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	7c9b      	ldrb	r3, [r3, #18]
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	7cdb      	ldrb	r3, [r3, #19]
 80010c2:	019b      	lsls	r3, r3, #6
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3304      	adds	r3, #4
 80010ce:	430a      	orrs	r2, r1
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->line_sensor_21 & (0x03U)) | ((_m->line_sensor_22 & (0x03U)) << 2U) | ((_m->line_sensor_23 & (0x03U)) << 4U) | ((_m->line_sensor_24 & (0x03U)) << 6U) );
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	3305      	adds	r3, #5
 80010d8:	7819      	ldrb	r1, [r3, #0]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	7d1b      	ldrb	r3, [r3, #20]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	7d5b      	ldrb	r3, [r3, #21]
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	f003 030c 	and.w	r3, r3, #12
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	7d9b      	ldrb	r3, [r3, #22]
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b2da      	uxtb	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	7ddb      	ldrb	r3, [r3, #23]
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b2da      	uxtb	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	3305      	adds	r3, #5
 8001118:	430a      	orrs	r2, r1
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->line_sensor_25 & (0x03U)) | ((_m->line_sensor_26 & (0x03U)) << 2U) | ((_m->line_sensor_27 & (0x03U)) << 4U) | ((_m->line_sensor_28 & (0x03U)) << 6U) );
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	3306      	adds	r3, #6
 8001122:	7819      	ldrb	r1, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	7e1b      	ldrb	r3, [r3, #24]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	b2da      	uxtb	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	7e5b      	ldrb	r3, [r3, #25]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b2da      	uxtb	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	7e9b      	ldrb	r3, [r3, #26]
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b2da      	uxtb	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	7edb      	ldrb	r3, [r3, #27]
 8001156:	019b      	lsls	r3, r3, #6
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b2da      	uxtb	r2, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	3306      	adds	r3, #6
 8001162:	430a      	orrs	r2, r1
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( (_m->line_sensor_29 & (0x03U)) | ((_m->line_sensor_30 & (0x03U)) << 2U) | ((_m->line_sensor_31 & (0x03U)) << 4U) | ((_m->line_sensor_32 & (0x03U)) << 6U) );
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3307      	adds	r3, #7
 800116c:	7819      	ldrb	r1, [r3, #0]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	7f1b      	ldrb	r3, [r3, #28]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	b2da      	uxtb	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	7f5b      	ldrb	r3, [r3, #29]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b2da      	uxtb	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	7f9b      	ldrb	r3, [r3, #30]
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001196:	b2db      	uxtb	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b2da      	uxtb	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	7fdb      	ldrb	r3, [r3, #31]
 80011a0:	019b      	lsls	r3, r3, #6
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	3307      	adds	r3, #7
 80011ac:	430a      	orrs	r2, r1
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_1_DLC;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2208      	movs	r2, #8
 80011b6:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_1_IDE;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
  return measurements_1_CANID;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <Pack_measurements_2_jlb>:
}

#else

uint32_t Pack_measurements_2_jlb(measurements_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]
 80011de:	e007      	b.n	80011f0 <Pack_measurements_2_jlb+0x24>
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	75fa      	strb	r2, [r7, #23]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4413      	add	r3, r2
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	2b07      	cmp	r3, #7
 80011f4:	d9f4      	bls.n	80011e0 <Pack_measurements_2_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->line_sensor_1 & (0x03U)) | ((_m->line_sensor_2 & (0x03U)) << 2U) | ((_m->line_sensor_3 & (0x03U)) << 4U) | ((_m->line_sensor_4 & (0x03U)) << 6U) );
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	b2d9      	uxtb	r1, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	b2db      	uxtb	r3, r3
 8001212:	430b      	orrs	r3, r1
 8001214:	b2d9      	uxtb	r1, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	789b      	ldrb	r3, [r3, #2]
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001222:	b2db      	uxtb	r3, r3
 8001224:	430b      	orrs	r3, r1
 8001226:	b2d9      	uxtb	r1, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	78db      	ldrb	r3, [r3, #3]
 800122c:	019b      	lsls	r3, r3, #6
 800122e:	b2db      	uxtb	r3, r3
 8001230:	430b      	orrs	r3, r1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b2da      	uxtb	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->line_sensor_5 & (0x03U)) | ((_m->line_sensor_6 & (0x03U)) << 2U) | ((_m->line_sensor_7 & (0x03U)) << 4U) | ((_m->line_sensor_8 & (0x03U)) << 6U) );
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	3301      	adds	r3, #1
 8001240:	7819      	ldrb	r1, [r3, #0]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	791b      	ldrb	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	b2da      	uxtb	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	795b      	ldrb	r3, [r3, #5]
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f003 030c 	and.w	r3, r3, #12
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b2da      	uxtb	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	799b      	ldrb	r3, [r3, #6]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b2da      	uxtb	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	79db      	ldrb	r3, [r3, #7]
 8001274:	019b      	lsls	r3, r3, #6
 8001276:	b2db      	uxtb	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b2da      	uxtb	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	3301      	adds	r3, #1
 8001280:	430a      	orrs	r2, r1
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_sensor_9 & (0x03U)) | ((_m->line_sensor_10 & (0x03U)) << 2U) | ((_m->line_sensor_11 & (0x03U)) << 4U) | ((_m->line_sensor_12 & (0x03U)) << 6U) );
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	3302      	adds	r3, #2
 800128a:	7819      	ldrb	r1, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	7a1b      	ldrb	r3, [r3, #8]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	b2da      	uxtb	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	7a5b      	ldrb	r3, [r3, #9]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	7a9b      	ldrb	r3, [r3, #10]
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	7adb      	ldrb	r3, [r3, #11]
 80012be:	019b      	lsls	r3, r3, #6
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	3302      	adds	r3, #2
 80012ca:	430a      	orrs	r2, r1
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->line_sensor_13 & (0x03U)) | ((_m->line_sensor_14 & (0x03U)) << 2U) | ((_m->line_sensor_15 & (0x03U)) << 4U) | ((_m->line_sensor_16 & (0x03U)) << 6U) );
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	3303      	adds	r3, #3
 80012d4:	7819      	ldrb	r1, [r3, #0]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	7b1b      	ldrb	r3, [r3, #12]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	7b5b      	ldrb	r3, [r3, #13]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	7b9b      	ldrb	r3, [r3, #14]
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	b2da      	uxtb	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	7bdb      	ldrb	r3, [r3, #15]
 8001308:	019b      	lsls	r3, r3, #6
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b2da      	uxtb	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3303      	adds	r3, #3
 8001314:	430a      	orrs	r2, r1
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_sensor_17 & (0x03U)) | ((_m->line_sensor_18 & (0x03U)) << 2U) | ((_m->line_sensor_19 & (0x03U)) << 4U) | ((_m->line_sensor_20 & (0x03U)) << 6U) );
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	3304      	adds	r3, #4
 800131e:	7819      	ldrb	r1, [r3, #0]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	7c1b      	ldrb	r3, [r3, #16]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	b2da      	uxtb	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	7c5b      	ldrb	r3, [r3, #17]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	b2db      	uxtb	r3, r3
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b2da      	uxtb	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	7c9b      	ldrb	r3, [r3, #18]
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001348:	b2db      	uxtb	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b2da      	uxtb	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	7cdb      	ldrb	r3, [r3, #19]
 8001352:	019b      	lsls	r3, r3, #6
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	b2da      	uxtb	r2, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3304      	adds	r3, #4
 800135e:	430a      	orrs	r2, r1
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->line_sensor_21 & (0x03U)) | ((_m->line_sensor_22 & (0x03U)) << 2U) | ((_m->line_sensor_23 & (0x03U)) << 4U) | ((_m->line_sensor_24 & (0x03U)) << 6U) );
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3305      	adds	r3, #5
 8001368:	7819      	ldrb	r1, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	7d1b      	ldrb	r3, [r3, #20]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	b2da      	uxtb	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	7d5b      	ldrb	r3, [r3, #21]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b2da      	uxtb	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	7d9b      	ldrb	r3, [r3, #22]
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b2da      	uxtb	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	7ddb      	ldrb	r3, [r3, #23]
 800139c:	019b      	lsls	r3, r3, #6
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	3305      	adds	r3, #5
 80013a8:	430a      	orrs	r2, r1
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->line_sensor_25 & (0x03U)) | ((_m->line_sensor_26 & (0x03U)) << 2U) | ((_m->line_sensor_27 & (0x03U)) << 4U) | ((_m->line_sensor_28 & (0x03U)) << 6U) );
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3306      	adds	r3, #6
 80013b2:	7819      	ldrb	r1, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	7e1b      	ldrb	r3, [r3, #24]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	7e5b      	ldrb	r3, [r3, #25]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	7e9b      	ldrb	r3, [r3, #26]
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4313      	orrs	r3, r2
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	7edb      	ldrb	r3, [r3, #27]
 80013e6:	019b      	lsls	r3, r3, #6
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	3306      	adds	r3, #6
 80013f2:	430a      	orrs	r2, r1
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( (_m->line_sensor_29 & (0x03U)) | ((_m->line_sensor_30 & (0x03U)) << 2U) | ((_m->line_sensor_31 & (0x03U)) << 4U) | ((_m->line_sensor_32 & (0x03U)) << 6U) );
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	3307      	adds	r3, #7
 80013fc:	7819      	ldrb	r1, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	7f1b      	ldrb	r3, [r3, #28]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	b2da      	uxtb	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	7f5b      	ldrb	r3, [r3, #29]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b2da      	uxtb	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	7f9b      	ldrb	r3, [r3, #30]
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b2da      	uxtb	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	7fdb      	ldrb	r3, [r3, #31]
 8001430:	019b      	lsls	r3, r3, #6
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b2da      	uxtb	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	3307      	adds	r3, #7
 800143c:	430a      	orrs	r2, r1
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_2_DLC;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2208      	movs	r2, #8
 8001446:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_2_IDE;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
  return measurements_2_CANID;
 800144e:	2302      	movs	r3, #2
}
 8001450:	4618      	mov	r0, r3
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	0000      	movs	r0, r0
	...

08001460 <Pack_measurements_3_jlb>:
}

#else

uint32_t Pack_measurements_3_jlb(measurements_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_3_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
 8001472:	e007      	b.n	8001484 <Pack_measurements_3_jlb+0x24>
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	75fa      	strb	r2, [r7, #23]
 800147a:	461a      	mov	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4413      	add	r3, r2
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	2b07      	cmp	r3, #7
 8001488:	d9f4      	bls.n	8001474 <Pack_measurements_3_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->angular_velocity_x_ro = (uint16_t) JLB_angular_velocity_x_ro_toS(_m->angular_velocity_x_phys);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001490:	a34f      	add	r3, pc, #316	; (adr r3, 80015d0 <Pack_measurements_3_jlb+0x170>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7fe feeb 	bl	8000270 <__adddf3>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	a34d      	add	r3, pc, #308	; (adr r3, 80015d8 <Pack_measurements_3_jlb+0x178>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7ff f9c2 	bl	8000830 <__aeabi_ddiv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff fb42 	bl	8000b3c <__aeabi_d2uiz>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	801a      	strh	r2, [r3, #0]
  _m->angular_velocity_y_ro = (uint16_t) JLB_angular_velocity_y_ro_toS(_m->angular_velocity_y_phys);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80014c6:	a342      	add	r3, pc, #264	; (adr r3, 80015d0 <Pack_measurements_3_jlb+0x170>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7fe fed0 	bl	8000270 <__adddf3>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	a33f      	add	r3, pc, #252	; (adr r3, 80015d8 <Pack_measurements_3_jlb+0x178>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f9a7 	bl	8000830 <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb27 	bl	8000b3c <__aeabi_d2uiz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	821a      	strh	r2, [r3, #16]
  _m->angular_velocity_z_ro = (uint16_t) JLB_angular_velocity_z_ro_toS(_m->angular_velocity_z_phys);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014fc:	a334      	add	r3, pc, #208	; (adr r3, 80015d0 <Pack_measurements_3_jlb+0x170>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7fe feb5 	bl	8000270 <__adddf3>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	a332      	add	r3, pc, #200	; (adr r3, 80015d8 <Pack_measurements_3_jlb+0x178>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7ff f98c 	bl	8000830 <__aeabi_ddiv>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fb0c 	bl	8000b3c <__aeabi_d2uiz>
 8001524:	4603      	mov	r3, r0
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->angular_velocity_x_ro & (0xFFU)) );
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	781a      	ldrb	r2, [r3, #0]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b2da      	uxtb	r2, r3
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->angular_velocity_x_ro >> 8U) & (0xFFU)) );
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	3301      	adds	r3, #1
 8001542:	7819      	ldrb	r1, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	b29b      	uxth	r3, r3
 800154c:	b2da      	uxtb	r2, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3301      	adds	r3, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->angular_velocity_y_ro & (0xFFU)) );
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	3302      	adds	r3, #2
 800155c:	7819      	ldrb	r1, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8a1b      	ldrh	r3, [r3, #16]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	3302      	adds	r3, #2
 8001568:	430a      	orrs	r2, r1
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->angular_velocity_y_ro >> 8U) & (0xFFU)) );
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	3303      	adds	r3, #3
 8001572:	7819      	ldrb	r1, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8a1b      	ldrh	r3, [r3, #16]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	b29b      	uxth	r3, r3
 800157c:	b2da      	uxtb	r2, r3
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	3303      	adds	r3, #3
 8001582:	430a      	orrs	r2, r1
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->angular_velocity_z_ro & (0xFFU)) );
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	3304      	adds	r3, #4
 800158c:	7819      	ldrb	r1, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8c1b      	ldrh	r3, [r3, #32]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	3304      	adds	r3, #4
 8001598:	430a      	orrs	r2, r1
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->angular_velocity_z_ro >> 8U) & (0xFFU)) );
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3305      	adds	r3, #5
 80015a2:	7819      	ldrb	r1, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8c1b      	ldrh	r3, [r3, #32]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	3305      	adds	r3, #5
 80015b2:	430a      	orrs	r2, r1
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_3_DLC;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2208      	movs	r2, #8
 80015bc:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_3_IDE;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
  return measurements_3_CANID;
 80015c4:	2303      	movs	r3, #3
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	b4395810 	.word	0xb4395810
 80015d4:	401a36c8 	.word	0x401a36c8
 80015d8:	eb1c432d 	.word	0xeb1c432d
 80015dc:	3f2a36e2 	.word	0x3f2a36e2

080015e0 <Pack_measurements_4_jlb>:
}

#else

uint32_t Pack_measurements_4_jlb(measurements_4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_4_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]
 80015f2:	e007      	b.n	8001604 <Pack_measurements_4_jlb+0x24>
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	75fa      	strb	r2, [r7, #23]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4413      	add	r3, r2
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	2b07      	cmp	r3, #7
 8001608:	d9f4      	bls.n	80015f4 <Pack_measurements_4_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->linear_acceleration_x_ro = (uint16_t) JLB_linear_acceleration_x_ro_toS(_m->linear_acceleration_x_phys);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001610:	a34f      	add	r3, pc, #316	; (adr r3, 8001750 <Pack_measurements_4_jlb+0x170>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7fe fe2b 	bl	8000270 <__adddf3>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	a34d      	add	r3, pc, #308	; (adr r3, 8001758 <Pack_measurements_4_jlb+0x178>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f902 	bl	8000830 <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fa82 	bl	8000b3c <__aeabi_d2uiz>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	801a      	strh	r2, [r3, #0]
  _m->linear_acceleration_y_ro = (uint16_t) JLB_linear_acceleration_y_ro_toS(_m->linear_acceleration_y_phys);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001646:	a342      	add	r3, pc, #264	; (adr r3, 8001750 <Pack_measurements_4_jlb+0x170>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe fe10 	bl	8000270 <__adddf3>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	a33f      	add	r3, pc, #252	; (adr r3, 8001758 <Pack_measurements_4_jlb+0x178>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7ff f8e7 	bl	8000830 <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa67 	bl	8000b3c <__aeabi_d2uiz>
 800166e:	4603      	mov	r3, r0
 8001670:	b29a      	uxth	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	821a      	strh	r2, [r3, #16]
  _m->linear_acceleration_z_ro = (uint16_t) JLB_linear_acceleration_z_ro_toS(_m->linear_acceleration_z_phys);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800167c:	a334      	add	r3, pc, #208	; (adr r3, 8001750 <Pack_measurements_4_jlb+0x170>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe fdf5 	bl	8000270 <__adddf3>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	a332      	add	r3, pc, #200	; (adr r3, 8001758 <Pack_measurements_4_jlb+0x178>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7ff f8cc 	bl	8000830 <__aeabi_ddiv>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff fa4c 	bl	8000b3c <__aeabi_d2uiz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->linear_acceleration_x_ro & (0xFFU)) );
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	781a      	ldrb	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->linear_acceleration_x_ro >> 8U) & (0xFFU)) );
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3301      	adds	r3, #1
 80016c2:	7819      	ldrb	r1, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	3301      	adds	r3, #1
 80016d2:	430a      	orrs	r2, r1
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->linear_acceleration_y_ro & (0xFFU)) );
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	3302      	adds	r3, #2
 80016dc:	7819      	ldrb	r1, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8a1b      	ldrh	r3, [r3, #16]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	3302      	adds	r3, #2
 80016e8:	430a      	orrs	r2, r1
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->linear_acceleration_y_ro >> 8U) & (0xFFU)) );
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3303      	adds	r3, #3
 80016f2:	7819      	ldrb	r1, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8a1b      	ldrh	r3, [r3, #16]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3303      	adds	r3, #3
 8001702:	430a      	orrs	r2, r1
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->linear_acceleration_z_ro & (0xFFU)) );
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	3304      	adds	r3, #4
 800170c:	7819      	ldrb	r1, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8c1b      	ldrh	r3, [r3, #32]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	3304      	adds	r3, #4
 8001718:	430a      	orrs	r2, r1
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->linear_acceleration_z_ro >> 8U) & (0xFFU)) );
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3305      	adds	r3, #5
 8001722:	7819      	ldrb	r1, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8c1b      	ldrh	r3, [r3, #32]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	b29b      	uxth	r3, r3
 800172c:	b2da      	uxtb	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	3305      	adds	r3, #5
 8001732:	430a      	orrs	r2, r1
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_4_DLC;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2208      	movs	r2, #8
 800173c:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_4_IDE;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
  return measurements_4_CANID;
 8001744:	2304      	movs	r3, #4
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	70a3d70a 	.word	0x70a3d70a
 8001754:	4030623d 	.word	0x4030623d
 8001758:	d2f1a9fc 	.word	0xd2f1a9fc
 800175c:	3f40624d 	.word	0x3f40624d

08001760 <Pack_measurements_5_jlb>:
}

#else

uint32_t Pack_measurements_5_jlb(measurements_5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_5_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]
 8001772:	e007      	b.n	8001784 <Pack_measurements_5_jlb+0x24>
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	75fa      	strb	r2, [r7, #23]
 800177a:	461a      	mov	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4413      	add	r3, r2
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
 8001784:	7dfb      	ldrb	r3, [r7, #23]
 8001786:	2b07      	cmp	r3, #7
 8001788:	d9f4      	bls.n	8001774 <Pack_measurements_5_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->wheel_rpm_ro = (uint16_t) JLB_wheel_rpm_ro_toS(_m->wheel_rpm_phys);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001790:	a35b      	add	r3, pc, #364	; (adr r3, 8001900 <Pack_measurements_5_jlb+0x1a0>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe fd6b 	bl	8000270 <__adddf3>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	a359      	add	r3, pc, #356	; (adr r3, 8001908 <Pack_measurements_5_jlb+0x1a8>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7ff f842 	bl	8000830 <__aeabi_ddiv>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff f9c2 	bl	8000b3c <__aeabi_d2uiz>
 80017b8:	4603      	mov	r3, r0
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	801a      	strh	r2, [r3, #0]
  _m->object_range_ro = (uint16_t) JLB_object_range_ro_toS(_m->object_range_phys);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017c6:	a352      	add	r3, pc, #328	; (adr r3, 8001910 <Pack_measurements_5_jlb+0x1b0>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7ff f830 	bl	8000830 <__aeabi_ddiv>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f9b0 	bl	8000b3c <__aeabi_d2uiz>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29a      	uxth	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	821a      	strh	r2, [r3, #16]
  _m->motor_current_ro = (uint16_t) JLB_motor_current_ro_toS(_m->motor_current_phys);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80017ea:	a34b      	add	r3, pc, #300	; (adr r3, 8001918 <Pack_measurements_5_jlb+0x1b8>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7ff f81e 	bl	8000830 <__aeabi_ddiv>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff f99e 	bl	8000b3c <__aeabi_d2uiz>
 8001800:	4603      	mov	r3, r0
 8001802:	b29a      	uxth	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	841a      	strh	r2, [r3, #32]
  _m->duty_cycle_ro = (uint16_t) JLB_duty_cycle_ro_toS(_m->duty_cycle_phys);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800180e:	a344      	add	r3, pc, #272	; (adr r3, 8001920 <Pack_measurements_5_jlb+0x1c0>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7ff f80c 	bl	8000830 <__aeabi_ddiv>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f7ff f98c 	bl	8000b3c <__aeabi_d2uiz>
 8001824:	4603      	mov	r3, r0
 8001826:	b29a      	uxth	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->wheel_rpm_ro & (0xFFU)) );
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	781a      	ldrb	r2, [r3, #0]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4313      	orrs	r3, r2
 8001838:	b2da      	uxtb	r2, r3
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->wheel_rpm_ro >> 8U) & (0xFFU)) );
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3301      	adds	r3, #1
 8001842:	7819      	ldrb	r1, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	b29b      	uxth	r3, r3
 800184c:	b2da      	uxtb	r2, r3
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	3301      	adds	r3, #1
 8001852:	430a      	orrs	r2, r1
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->object_range_ro & (0xFFU)) );
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	3302      	adds	r3, #2
 800185c:	7819      	ldrb	r1, [r3, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8a1b      	ldrh	r3, [r3, #16]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	3302      	adds	r3, #2
 8001868:	430a      	orrs	r2, r1
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->object_range_ro >> 8U) & (0xFFU)) );
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	3303      	adds	r3, #3
 8001872:	7819      	ldrb	r1, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8a1b      	ldrh	r3, [r3, #16]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	b29b      	uxth	r3, r3
 800187c:	b2da      	uxtb	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3303      	adds	r3, #3
 8001882:	430a      	orrs	r2, r1
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->motor_current_ro & (0xFFU)) );
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	3304      	adds	r3, #4
 800188c:	7819      	ldrb	r1, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8c1b      	ldrh	r3, [r3, #32]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	3304      	adds	r3, #4
 8001898:	430a      	orrs	r2, r1
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->motor_current_ro >> 8U) & (0xFFU)) );
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3305      	adds	r3, #5
 80018a2:	7819      	ldrb	r1, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8c1b      	ldrh	r3, [r3, #32]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3305      	adds	r3, #5
 80018b2:	430a      	orrs	r2, r1
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->duty_cycle_ro & (0xFFU)) );
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	3306      	adds	r3, #6
 80018bc:	7819      	ldrb	r1, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	3306      	adds	r3, #6
 80018c8:	430a      	orrs	r2, r1
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->duty_cycle_ro >> 8U) & (0xFFU)) );
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	3307      	adds	r3, #7
 80018d2:	7819      	ldrb	r1, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3307      	adds	r3, #7
 80018e2:	430a      	orrs	r2, r1
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_5_DLC;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2208      	movs	r2, #8
 80018ec:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_5_IDE;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
  return measurements_5_CANID;
 80018f4:	2305      	movs	r3, #5
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	00000000 	.word	0x00000000
 8001904:	40a99980 	.word	0x40a99980
 8001908:	9999999a 	.word	0x9999999a
 800190c:	3fb99999 	.word	0x3fb99999
 8001910:	eb1c432d 	.word	0xeb1c432d
 8001914:	3f1a36e2 	.word	0x3f1a36e2
 8001918:	d2f1a9fc 	.word	0xd2f1a9fc
 800191c:	3f50624d 	.word	0x3f50624d
 8001920:	d7c6fbd2 	.word	0xd7c6fbd2
 8001924:	3ef2599e 	.word	0x3ef2599e

08001928 <Pack_odometry_1_jlb>:
}

#else

uint32_t Pack_odometry_1_jlb(odometry_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(odometry_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001936:	2300      	movs	r3, #0
 8001938:	75fb      	strb	r3, [r7, #23]
 800193a:	e007      	b.n	800194c <Pack_odometry_1_jlb+0x24>
 800193c:	7dfb      	ldrb	r3, [r7, #23]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	75fa      	strb	r2, [r7, #23]
 8001942:	461a      	mov	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4413      	add	r3, r2
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b07      	cmp	r3, #7
 8001950:	d9f4      	bls.n	800193c <Pack_odometry_1_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->orientation_ro = (uint16_t) JLB_orientation_ro_toS(_m->orientation_phys);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001958:	a34f      	add	r3, pc, #316	; (adr r3, 8001a98 <Pack_odometry_1_jlb+0x170>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fc87 	bl	8000270 <__adddf3>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	a34d      	add	r3, pc, #308	; (adr r3, 8001aa0 <Pack_odometry_1_jlb+0x178>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	f7fe ff5e 	bl	8000830 <__aeabi_ddiv>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff f8de 	bl	8000b3c <__aeabi_d2uiz>
 8001980:	4603      	mov	r3, r0
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	801a      	strh	r2, [r3, #0]
  _m->position_x_ro = (uint16_t) JLB_position_x_ro_toS(_m->position_x_phys);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800198e:	a346      	add	r3, pc, #280	; (adr r3, 8001aa8 <Pack_odometry_1_jlb+0x180>)
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	f7fe fc6c 	bl	8000270 <__adddf3>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	a343      	add	r3, pc, #268	; (adr r3, 8001ab0 <Pack_odometry_1_jlb+0x188>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	f7fe ff43 	bl	8000830 <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff f8c3 	bl	8000b3c <__aeabi_d2uiz>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	821a      	strh	r2, [r3, #16]
  _m->position_y_ro = (uint16_t) JLB_position_y_ro_toS(_m->position_y_phys);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80019c4:	a338      	add	r3, pc, #224	; (adr r3, 8001aa8 <Pack_odometry_1_jlb+0x180>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	f7fe fc51 	bl	8000270 <__adddf3>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	a336      	add	r3, pc, #216	; (adr r3, 8001ab0 <Pack_odometry_1_jlb+0x188>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe ff28 	bl	8000830 <__aeabi_ddiv>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff f8a8 	bl	8000b3c <__aeabi_d2uiz>
 80019ec:	4603      	mov	r3, r0
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->orientation_ro & (0xFFU)) );
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->orientation_ro >> 8U) & (0xFFU)) );
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	7819      	ldrb	r1, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->position_x_ro & (0xFFU)) );
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	3302      	adds	r3, #2
 8001a24:	7819      	ldrb	r1, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8a1b      	ldrh	r3, [r3, #16]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	3302      	adds	r3, #2
 8001a30:	430a      	orrs	r2, r1
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->position_x_ro >> 8U) & (0xFFU)) );
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3303      	adds	r3, #3
 8001a3a:	7819      	ldrb	r1, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8a1b      	ldrh	r3, [r3, #16]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	3303      	adds	r3, #3
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->position_y_ro & (0xFFU)) );
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	3304      	adds	r3, #4
 8001a54:	7819      	ldrb	r1, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8c1b      	ldrh	r3, [r3, #32]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	3304      	adds	r3, #4
 8001a60:	430a      	orrs	r2, r1
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->position_y_ro >> 8U) & (0xFFU)) );
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	3305      	adds	r3, #5
 8001a6a:	7819      	ldrb	r1, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8c1b      	ldrh	r3, [r3, #32]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	3305      	adds	r3, #5
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) odometry_1_DLC;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2208      	movs	r2, #8
 8001a84:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) odometry_1_IDE;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
  return odometry_1_CANID;
 8001a8c:	2311      	movs	r3, #17
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	b4395810 	.word	0xb4395810
 8001a9c:	401a36c8 	.word	0x401a36c8
 8001aa0:	eb1c432d 	.word	0xeb1c432d
 8001aa4:	3f2a36e2 	.word	0x3f2a36e2
 8001aa8:	70a3d70a 	.word	0x70a3d70a
 8001aac:	4030623d 	.word	0x4030623d
 8001ab0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ab4:	3f40624d 	.word	0x3f40624d

08001ab8 <Pack_odometry_2_jlb>:
}

#else

uint32_t Pack_odometry_2_jlb(odometry_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(odometry_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	75fb      	strb	r3, [r7, #23]
 8001aca:	e007      	b.n	8001adc <Pack_odometry_2_jlb+0x24>
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	75fa      	strb	r2, [r7, #23]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	2b07      	cmp	r3, #7
 8001ae0:	d9f4      	bls.n	8001acc <Pack_odometry_2_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->angular_velocity_z_ro = (uint16_t) JLB_angular_velocity_z_ro_toS(_m->angular_velocity_z_phys);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ae8:	a335      	add	r3, pc, #212	; (adr r3, 8001bc0 <Pack_odometry_2_jlb+0x108>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe fbbf 	bl	8000270 <__adddf3>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	a333      	add	r3, pc, #204	; (adr r3, 8001bc8 <Pack_odometry_2_jlb+0x110>)
 8001afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b00:	f7fe fe96 	bl	8000830 <__aeabi_ddiv>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7ff f816 	bl	8000b3c <__aeabi_d2uiz>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	801a      	strh	r2, [r3, #0]
  _m->linear_velocity_x_ro = (uint16_t) JLB_linear_velocity_x_ro_toS(_m->linear_velocity_x_phys);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b1e:	a32c      	add	r3, pc, #176	; (adr r3, 8001bd0 <Pack_odometry_2_jlb+0x118>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fba4 	bl	8000270 <__adddf3>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	a329      	add	r3, pc, #164	; (adr r3, 8001bd8 <Pack_odometry_2_jlb+0x120>)
 8001b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b36:	f7fe fe7b 	bl	8000830 <__aeabi_ddiv>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7fe fffb 	bl	8000b3c <__aeabi_d2uiz>
 8001b46:	4603      	mov	r3, r0
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	821a      	strh	r2, [r3, #16]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->angular_velocity_z_ro & (0xFFU)) );
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->angular_velocity_z_ro >> 8U) & (0xFFU)) );
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	3301      	adds	r3, #1
 8001b64:	7819      	ldrb	r1, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	3301      	adds	r3, #1
 8001b74:	430a      	orrs	r2, r1
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->linear_velocity_x_ro & (0xFFU)) );
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	7819      	ldrb	r1, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8a1b      	ldrh	r3, [r3, #16]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	3302      	adds	r3, #2
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->linear_velocity_x_ro >> 8U) & (0xFFU)) );
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	3303      	adds	r3, #3
 8001b94:	7819      	ldrb	r1, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8a1b      	ldrh	r3, [r3, #16]
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	3303      	adds	r3, #3
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) odometry_2_DLC;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2208      	movs	r2, #8
 8001bae:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) odometry_2_IDE;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
  return odometry_2_CANID;
 8001bb6:	2312      	movs	r3, #18
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	b4395810 	.word	0xb4395810
 8001bc4:	401a36c8 	.word	0x401a36c8
 8001bc8:	eb1c432d 	.word	0xeb1c432d
 8001bcc:	3f2a36e2 	.word	0x3f2a36e2
 8001bd0:	70a3d70a 	.word	0x70a3d70a
 8001bd4:	4030623d 	.word	0x4030623d
 8001bd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bdc:	3f40624d 	.word	0x3f40624d

08001be0 <Pack_logic_1_jlb>:
}

#else

uint32_t Pack_logic_1_jlb(logic_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]
 8001bf2:	e007      	b.n	8001c04 <Pack_logic_1_jlb+0x24>
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	75fa      	strb	r2, [r7, #23]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	4413      	add	r3, r2
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
 8001c06:	2b07      	cmp	r3, #7
 8001c08:	d9f4      	bls.n	8001bf4 <Pack_logic_1_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->target_angle_ro = (uint16_t) JLB_target_angle_ro_toS(_m->target_angle_phys);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c10:	a369      	add	r3, pc, #420	; (adr r3, 8001db8 <Pack_logic_1_jlb+0x1d8>)
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	f7fe fb2b 	bl	8000270 <__adddf3>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	a367      	add	r3, pc, #412	; (adr r3, 8001dc0 <Pack_logic_1_jlb+0x1e0>)
 8001c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c28:	f7fe fe02 	bl	8000830 <__aeabi_ddiv>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	f7fe ff82 	bl	8000b3c <__aeabi_d2uiz>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	801a      	strh	r2, [r3, #0]
  _m->target_speed_ro = (uint16_t) JLB_target_speed_ro_toS(_m->target_speed_phys);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c46:	a360      	add	r3, pc, #384	; (adr r3, 8001dc8 <Pack_logic_1_jlb+0x1e8>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fb10 	bl	8000270 <__adddf3>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	a35d      	add	r3, pc, #372	; (adr r3, 8001dd0 <Pack_logic_1_jlb+0x1f0>)
 8001c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5e:	f7fe fde7 	bl	8000830 <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ff67 	bl	8000b3c <__aeabi_d2uiz>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	821a      	strh	r2, [r3, #16]
  _m->cross_track_error_ro = (uint16_t) JLB_cross_track_error_ro_toS(_m->cross_track_error_phys);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001c7c:	a34e      	add	r3, pc, #312	; (adr r3, 8001db8 <Pack_logic_1_jlb+0x1d8>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	f7fe faf5 	bl	8000270 <__adddf3>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	a34c      	add	r3, pc, #304	; (adr r3, 8001dc0 <Pack_logic_1_jlb+0x1e0>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fdcc 	bl	8000830 <__aeabi_ddiv>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f7fe ff4c 	bl	8000b3c <__aeabi_d2uiz>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	841a      	strh	r2, [r3, #32]
  _m->heading_error_ro = (uint16_t) JLB_heading_error_ro_toS(_m->heading_error_phys);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001cb2:	a349      	add	r3, pc, #292	; (adr r3, 8001dd8 <Pack_logic_1_jlb+0x1f8>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fada 	bl	8000270 <__adddf3>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	a346      	add	r3, pc, #280	; (adr r3, 8001de0 <Pack_logic_1_jlb+0x200>)
 8001cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cca:	f7fe fdb1 	bl	8000830 <__aeabi_ddiv>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f7fe ff31 	bl	8000b3c <__aeabi_d2uiz>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->target_angle_ro & (0xFFU)) );
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	781a      	ldrb	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	4313      	orrs	r3, r2
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->target_angle_ro >> 8U) & (0xFFU)) );
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	7819      	ldrb	r1, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	3301      	adds	r3, #1
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->target_speed_ro & (0xFFU)) );
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	3302      	adds	r3, #2
 8001d12:	7819      	ldrb	r1, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8a1b      	ldrh	r3, [r3, #16]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->target_speed_ro >> 8U) & (0xFFU)) );
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	3303      	adds	r3, #3
 8001d28:	7819      	ldrb	r1, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8a1b      	ldrh	r3, [r3, #16]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	3303      	adds	r3, #3
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->cross_track_error_ro & (0xFFU)) );
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	3304      	adds	r3, #4
 8001d42:	7819      	ldrb	r1, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8c1b      	ldrh	r3, [r3, #32]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->cross_track_error_ro >> 8U) & (0xFFU)) );
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	3305      	adds	r3, #5
 8001d58:	7819      	ldrb	r1, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8c1b      	ldrh	r3, [r3, #32]
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	3305      	adds	r3, #5
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->heading_error_ro & (0xFFU)) );
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	3306      	adds	r3, #6
 8001d72:	7819      	ldrb	r1, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	3306      	adds	r3, #6
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->heading_error_ro >> 8U) & (0xFFU)) );
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	3307      	adds	r3, #7
 8001d88:	7819      	ldrb	r1, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	3307      	adds	r3, #7
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_1_DLC;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2208      	movs	r2, #8
 8001da2:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_1_IDE;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
  return logic_1_CANID;
 8001daa:	2321      	movs	r3, #33	; 0x21
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	f3af 8000 	nop.w
 8001db8:	b4395810 	.word	0xb4395810
 8001dbc:	400a36c8 	.word	0x400a36c8
 8001dc0:	eb1c432d 	.word	0xeb1c432d
 8001dc4:	3f1a36e2 	.word	0x3f1a36e2
 8001dc8:	70a3d70a 	.word	0x70a3d70a
 8001dcc:	4030623d 	.word	0x4030623d
 8001dd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001dd4:	3f40624d 	.word	0x3f40624d
 8001dd8:	b4395810 	.word	0xb4395810
 8001ddc:	3ffa36c8 	.word	0x3ffa36c8
 8001de0:	eb1c432d 	.word	0xeb1c432d
 8001de4:	3f0a36e2 	.word	0x3f0a36e2

08001de8 <Pack_logic_2_jlb>:
}

#else

uint32_t Pack_logic_2_jlb(logic_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]
 8001dfa:	e007      	b.n	8001e0c <Pack_logic_2_jlb+0x24>
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	75fa      	strb	r2, [r7, #23]
 8001e02:	461a      	mov	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	4413      	add	r3, r2
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b07      	cmp	r3, #7
 8001e10:	d9f4      	bls.n	8001dfc <Pack_logic_2_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->distance_traveled_ro = (uint16_t) JLB_distance_traveled_ro_toS(_m->distance_traveled_phys);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e18:	a335      	add	r3, pc, #212	; (adr r3, 8001ef0 <Pack_logic_2_jlb+0x108>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fd07 	bl	8000830 <__aeabi_ddiv>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f7fe fe87 	bl	8000b3c <__aeabi_d2uiz>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	80da      	strh	r2, [r3, #6]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->direction & (0xFFU)) );
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->mission & (0xFFU)) );
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	7819      	ldrb	r1, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	785a      	ldrb	r2, [r3, #1]
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	3301      	adds	r3, #1
 8001e54:	430a      	orrs	r2, r1
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->fast_state & (0xFFU)) );
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	7819      	ldrb	r1, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	789a      	ldrb	r2, [r3, #2]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	3302      	adds	r3, #2
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->labyrinth_state & (0xFFU)) );
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	3303      	adds	r3, #3
 8001e72:	7819      	ldrb	r1, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	78da      	ldrb	r2, [r3, #3]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	3303      	adds	r3, #3
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->next_node & (0xFFU)) );
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	3304      	adds	r3, #4
 8001e86:	7819      	ldrb	r1, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	791a      	ldrb	r2, [r3, #4]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	430a      	orrs	r2, r1
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->previous_node & (0xFFU)) );
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	3305      	adds	r3, #5
 8001e9a:	7819      	ldrb	r1, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	795a      	ldrb	r2, [r3, #5]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	3305      	adds	r3, #5
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->distance_traveled_ro & (0xFFU)) );
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	3306      	adds	r3, #6
 8001eae:	7819      	ldrb	r1, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	88db      	ldrh	r3, [r3, #6]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	3306      	adds	r3, #6
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->distance_traveled_ro >> 8U) & (0xFFU)) );
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	3307      	adds	r3, #7
 8001ec4:	7819      	ldrb	r1, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	88db      	ldrh	r3, [r3, #6]
 8001eca:	0a1b      	lsrs	r3, r3, #8
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	3307      	adds	r3, #7
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_2_DLC;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2208      	movs	r2, #8
 8001ede:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_2_IDE;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
  return logic_2_CANID;
 8001ee6:	2322      	movs	r3, #34	; 0x22
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	47ae147b 	.word	0x47ae147b
 8001ef4:	3f847ae1 	.word	0x3f847ae1

08001ef8 <Pack_logic_3_jlb>:
}

#else

uint32_t Pack_logic_3_jlb(logic_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_3_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001f06:	2300      	movs	r3, #0
 8001f08:	75fb      	strb	r3, [r7, #23]
 8001f0a:	e007      	b.n	8001f1c <Pack_logic_3_jlb+0x24>
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	75fa      	strb	r2, [r7, #23]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4413      	add	r3, r2
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	2b07      	cmp	r3, #7
 8001f20:	d9f4      	bls.n	8001f0c <Pack_logic_3_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->ang_error_norm_ro = (uint8_t) JLB_ang_error_norm_ro_toS(_m->ang_error_norm_phys);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f28:	a35d      	add	r3, pc, #372	; (adr r3, 80020a0 <Pack_logic_3_jlb+0x1a8>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	f7fe fc7f 	bl	8000830 <__aeabi_ddiv>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f7fe fdff 	bl	8000b3c <__aeabi_d2uiz>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	701a      	strb	r2, [r3, #0]
  _m->dist_error_norm_ro = (uint8_t) JLB_dist_error_norm_ro_toS(_m->dist_error_norm_phys);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f4c:	a354      	add	r3, pc, #336	; (adr r3, 80020a0 <Pack_logic_3_jlb+0x1a8>)
 8001f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f52:	f7fe fc6d 	bl	8000830 <__aeabi_ddiv>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f7fe fded 	bl	8000b3c <__aeabi_d2uiz>
 8001f62:	4603      	mov	r3, r0
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	741a      	strb	r2, [r3, #16]
  _m->line_position_front_ro = (uint16_t) JLB_line_position_front_ro_toS(_m->line_position_front_phys);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f70:	a34d      	add	r3, pc, #308	; (adr r3, 80020a8 <Pack_logic_3_jlb+0x1b0>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe f97b 	bl	8000270 <__adddf3>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	a34b      	add	r3, pc, #300	; (adr r3, 80020b0 <Pack_logic_3_jlb+0x1b8>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe fc52 	bl	8000830 <__aeabi_ddiv>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fdd2 	bl	8000b3c <__aeabi_d2uiz>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	841a      	strh	r2, [r3, #32]
  _m->line_position_rear_ro = (uint16_t) JLB_line_position_rear_ro_toS(_m->line_position_rear_phys);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001fa6:	a340      	add	r3, pc, #256	; (adr r3, 80020a8 <Pack_logic_3_jlb+0x1b0>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	f7fe f960 	bl	8000270 <__adddf3>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	a33d      	add	r3, pc, #244	; (adr r3, 80020b0 <Pack_logic_3_jlb+0x1b8>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fc37 	bl	8000830 <__aeabi_ddiv>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f7fe fdb7 	bl	8000b3c <__aeabi_d2uiz>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->ang_error_norm_ro & (0xFFU)) );
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	781a      	ldrb	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->dist_error_norm_ro & (0xFFU)) );
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	7819      	ldrb	r1, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	7c1a      	ldrb	r2, [r3, #16]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_position_front_ro & (0xFFU)) );
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	7819      	ldrb	r1, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8c1b      	ldrh	r3, [r3, #32]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	3302      	adds	r3, #2
 800200a:	430a      	orrs	r2, r1
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->line_position_front_ro >> 8U) & (0xFFU)) );
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	3303      	adds	r3, #3
 8002014:	7819      	ldrb	r1, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8c1b      	ldrh	r3, [r3, #32]
 800201a:	0a1b      	lsrs	r3, r3, #8
 800201c:	b29b      	uxth	r3, r3
 800201e:	b2da      	uxtb	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	3303      	adds	r3, #3
 8002024:	430a      	orrs	r2, r1
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_position_rear_ro & (0xFFU)) );
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3304      	adds	r3, #4
 800202e:	7819      	ldrb	r1, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002034:	b2da      	uxtb	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	3304      	adds	r3, #4
 800203a:	430a      	orrs	r2, r1
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->line_position_rear_ro >> 8U) & (0xFFU)) );
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	3305      	adds	r3, #5
 8002044:	7819      	ldrb	r1, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	b29b      	uxth	r3, r3
 800204e:	b2da      	uxtb	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	3305      	adds	r3, #5
 8002054:	430a      	orrs	r2, r1
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->at_cross_section & (0x01U)) | ((_m->under_gate & (0x01U)) << 1U) );
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3306      	adds	r3, #6
 800205e:	7819      	ldrb	r1, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	b2da      	uxtb	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	b2db      	uxtb	r3, r3
 800207c:	4313      	orrs	r3, r2
 800207e:	b2da      	uxtb	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	3306      	adds	r3, #6
 8002084:	430a      	orrs	r2, r1
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_3_DLC;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2208      	movs	r2, #8
 800208e:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_3_IDE;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
  return logic_3_CANID;
 8002096:	2323      	movs	r3, #35	; 0x23
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80020a4:	3f70624d 	.word	0x3f70624d
 80020a8:	70a3d70a 	.word	0x70a3d70a
 80020ac:	4030623d 	.word	0x4030623d
 80020b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80020b4:	3f40624d 	.word	0x3f40624d

080020b8 <HAL_ADC_ConvCpltCallback>:
uint32_t adc_values_raw[8];
analog_signals_s adc_values = {0u};
uint8_t channel_idx = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	adc_values.motor_batt_voltage_raw = adc_values_raw[0];
 80020c0:	4b18      	ldr	r3, [pc, #96]	; (8002124 <HAL_ADC_ConvCpltCallback+0x6c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_ADC_ConvCpltCallback+0x70>)
 80020c8:	801a      	strh	r2, [r3, #0]
	adc_values.motor_curr_raw = adc_values_raw[1];
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <HAL_ADC_ConvCpltCallback+0x6c>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <HAL_ADC_ConvCpltCallback+0x70>)
 80020d2:	805a      	strh	r2, [r3, #2]
	adc_values.vbus_raw = adc_values_raw[2];
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_ADC_ConvCpltCallback+0x6c>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_ADC_ConvCpltCallback+0x70>)
 80020dc:	809a      	strh	r2, [r3, #4]
	adc_values.distance_short2_raw = adc_values_raw[5];
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_ADC_ConvCpltCallback+0x6c>)
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <HAL_ADC_ConvCpltCallback+0x70>)
 80020e6:	80da      	strh	r2, [r3, #6]
	adc_values.distance_short1_raw = adc_values_raw[3];
 80020e8:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <HAL_ADC_ConvCpltCallback+0x6c>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_ADC_ConvCpltCallback+0x70>)
 80020f0:	811a      	strh	r2, [r3, #8]
	adc_values.distance_long1_raw = adc_values_raw[4];
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_ADC_ConvCpltCallback+0x6c>)
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_ADC_ConvCpltCallback+0x70>)
 80020fa:	815a      	strh	r2, [r3, #10]
	adc_values.lv_batt_voltage_raw = adc_values_raw[6];
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_ADC_ConvCpltCallback+0x6c>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	b29a      	uxth	r2, r3
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_ADC_ConvCpltCallback+0x70>)
 8002104:	819a      	strh	r2, [r3, #12]
	adc_values.distance_long2_raw = adc_values_raw[7];
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	b29a      	uxth	r2, r3
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_ADC_ConvCpltCallback+0x70>)
 800210e:	81da      	strh	r2, [r3, #14]

	vTaskResume(static_cast<TaskHandle_t>(mainTaskHandle));
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_ADC_ConvCpltCallback+0x74>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f01c fd81 	bl	801ec1c <vTaskResume>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000124 	.word	0x20000124
 8002128:	20000144 	.word	0x20000144
 800212c:	200006c4 	.word	0x200006c4

08002130 <_Z18DistanceSensorTaskv>:
extern analog_signals_s adc_values;
DistanceSensorData_s distance_sensor = {0u};


void DistanceSensorTask()
{
 8002130:	b5b0      	push	{r4, r5, r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
	uint8_t i,j;
	distance_sensor.voltage_long[0] = ((float)(adc_values.distance_long1_raw)) / 4096.0f * 3.3f;
 8002136:	4b91      	ldr	r3, [pc, #580]	; (800237c <_Z18DistanceSensorTaskv+0x24c>)
 8002138:	895b      	ldrh	r3, [r3, #10]
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002142:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8002380 <_Z18DistanceSensorTaskv+0x250>
 8002146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800214a:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002384 <_Z18DistanceSensorTaskv+0x254>
 800214e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002152:	4b8d      	ldr	r3, [pc, #564]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 8002154:	edc3 7a00 	vstr	s15, [r3]
	distance_sensor.voltage_long[1] = ((float)(adc_values.distance_long2_raw)) / 4096.0f * 3.3f;
 8002158:	4b88      	ldr	r3, [pc, #544]	; (800237c <_Z18DistanceSensorTaskv+0x24c>)
 800215a:	89db      	ldrh	r3, [r3, #14]
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002164:	eddf 6a86 	vldr	s13, [pc, #536]	; 8002380 <_Z18DistanceSensorTaskv+0x250>
 8002168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216c:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8002384 <_Z18DistanceSensorTaskv+0x254>
 8002170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002174:	4b84      	ldr	r3, [pc, #528]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 8002176:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_sensor.voltage_short[0] = ((float)(adc_values.distance_short1_raw)) / 4096.0f * 3.3f;
 800217a:	4b80      	ldr	r3, [pc, #512]	; (800237c <_Z18DistanceSensorTaskv+0x24c>)
 800217c:	891b      	ldrh	r3, [r3, #8]
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002186:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8002380 <_Z18DistanceSensorTaskv+0x250>
 800218a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800218e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002384 <_Z18DistanceSensorTaskv+0x254>
 8002192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002196:	4b7c      	ldr	r3, [pc, #496]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 8002198:	edc3 7a02 	vstr	s15, [r3, #8]
	distance_sensor.voltage_short[1] = ((float)(adc_values.distance_short2_raw)) / 4096.0f * 3.3f;
 800219c:	4b77      	ldr	r3, [pc, #476]	; (800237c <_Z18DistanceSensorTaskv+0x24c>)
 800219e:	88db      	ldrh	r3, [r3, #6]
 80021a0:	ee07 3a90 	vmov	s15, r3
 80021a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021a8:	eddf 6a75 	vldr	s13, [pc, #468]	; 8002380 <_Z18DistanceSensorTaskv+0x250>
 80021ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b0:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8002384 <_Z18DistanceSensorTaskv+0x254>
 80021b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b8:	4b73      	ldr	r3, [pc, #460]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 80021ba:	edc3 7a03 	vstr	s15, [r3, #12]

	for(i = 0; i < 1; ++i)
 80021be:	2300      	movs	r3, #0
 80021c0:	71fb      	strb	r3, [r7, #7]
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f040 80a3 	bne.w	8002310 <_Z18DistanceSensorTaskv+0x1e0>
	{
		float x = distance_sensor.voltage_long[i];
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	4a6e      	ldr	r2, [pc, #440]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	603b      	str	r3, [r7, #0]
		distance_sensor.distance_long[i] = 0.0f;
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	4a6b      	ldr	r2, [pc, #428]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 80021da:	3304      	adds	r3, #4
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 80021e6:	2300      	movs	r3, #0
 80021e8:	71bb      	strb	r3, [r7, #6]
 80021ea:	79bb      	ldrb	r3, [r7, #6]
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d83b      	bhi.n	8002268 <_Z18DistanceSensorTaskv+0x138>
		{
			distance_sensor.distance_long[i] += pow(x,5-j) * long_poly_coeff[j];
 80021f0:	79bb      	ldrb	r3, [r7, #6]
 80021f2:	f1c3 0305 	rsb	r3, r3, #5
 80021f6:	4618      	mov	r0, r3
 80021f8:	ed97 0a00 	vldr	s0, [r7]
 80021fc:	f000 f8cc 	bl	8002398 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002200:	ec55 4b10 	vmov	r4, r5, d0
 8002204:	79bb      	ldrb	r3, [r7, #6]
 8002206:	4a61      	ldr	r2, [pc, #388]	; (800238c <_Z18DistanceSensorTaskv+0x25c>)
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f98c 	bl	800052c <__aeabi_f2d>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4620      	mov	r0, r4
 800221a:	4629      	mov	r1, r5
 800221c:	f7fe f9de 	bl	80005dc <__aeabi_dmul>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4614      	mov	r4, r2
 8002226:	461d      	mov	r5, r3
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	4a57      	ldr	r2, [pc, #348]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 800222c:	3304      	adds	r3, #4
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe f979 	bl	800052c <__aeabi_f2d>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4620      	mov	r0, r4
 8002240:	4629      	mov	r1, r5
 8002242:	f7fe f815 	bl	8000270 <__adddf3>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	79fc      	ldrb	r4, [r7, #7]
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	f7fe fc94 	bl	8000b7c <__aeabi_d2f>
 8002254:	4602      	mov	r2, r0
 8002256:	494c      	ldr	r1, [pc, #304]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 8002258:	1d23      	adds	r3, r4, #4
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 8002260:	79bb      	ldrb	r3, [r7, #6]
 8002262:	3301      	adds	r3, #1
 8002264:	71bb      	strb	r3, [r7, #6]
 8002266:	e7c0      	b.n	80021ea <_Z18DistanceSensorTaskv+0xba>
		}

		distance_sensor.distance_short[i] = 0.0f;
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	4a47      	ldr	r2, [pc, #284]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 800226c:	3306      	adds	r3, #6
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
		x = distance_sensor.voltage_short[i];
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	4a43      	ldr	r2, [pc, #268]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 800227c:	3302      	adds	r3, #2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	603b      	str	r3, [r7, #0]
		for(j = 0; j < 6; ++j)
 8002286:	2300      	movs	r3, #0
 8002288:	71bb      	strb	r3, [r7, #6]
 800228a:	79bb      	ldrb	r3, [r7, #6]
 800228c:	2b05      	cmp	r3, #5
 800228e:	d83b      	bhi.n	8002308 <_Z18DistanceSensorTaskv+0x1d8>
		{
			distance_sensor.distance_short[i] += pow(x,5-j) * short_poly_coeff[j];
 8002290:	79bb      	ldrb	r3, [r7, #6]
 8002292:	f1c3 0305 	rsb	r3, r3, #5
 8002296:	4618      	mov	r0, r3
 8002298:	ed97 0a00 	vldr	s0, [r7]
 800229c:	f000 f87c 	bl	8002398 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80022a0:	ec55 4b10 	vmov	r4, r5, d0
 80022a4:	79bb      	ldrb	r3, [r7, #6]
 80022a6:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <_Z18DistanceSensorTaskv+0x260>)
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe f93c 	bl	800052c <__aeabi_f2d>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4620      	mov	r0, r4
 80022ba:	4629      	mov	r1, r5
 80022bc:	f7fe f98e 	bl	80005dc <__aeabi_dmul>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4614      	mov	r4, r2
 80022c6:	461d      	mov	r5, r3
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	4a2f      	ldr	r2, [pc, #188]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 80022cc:	3306      	adds	r3, #6
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f929 	bl	800052c <__aeabi_f2d>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4620      	mov	r0, r4
 80022e0:	4629      	mov	r1, r5
 80022e2:	f7fd ffc5 	bl	8000270 <__adddf3>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	79fc      	ldrb	r4, [r7, #7]
 80022ec:	4610      	mov	r0, r2
 80022ee:	4619      	mov	r1, r3
 80022f0:	f7fe fc44 	bl	8000b7c <__aeabi_d2f>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4924      	ldr	r1, [pc, #144]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 80022f8:	1da3      	adds	r3, r4, #6
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	3301      	adds	r3, #1
 8002304:	71bb      	strb	r3, [r7, #6]
 8002306:	e7c0      	b.n	800228a <_Z18DistanceSensorTaskv+0x15a>
	for(i = 0; i < 1; ++i)
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	3301      	adds	r3, #1
 800230c:	71fb      	strb	r3, [r7, #7]
 800230e:	e758      	b.n	80021c2 <_Z18DistanceSensorTaskv+0x92>
		}
	}

	if((distance_sensor.distance_short[0] >= 20.0f) || (distance_sensor.distance_short[1] >= 20.0f))
 8002310:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 8002312:	edd3 7a06 	vldr	s15, [r3, #24]
 8002316:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800231a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800231e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002322:	da09      	bge.n	8002338 <_Z18DistanceSensorTaskv+0x208>
 8002324:	4b18      	ldr	r3, [pc, #96]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 8002326:	edd3 7a07 	vldr	s15, [r3, #28]
 800232a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800232e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002336:	db04      	blt.n	8002342 <_Z18DistanceSensorTaskv+0x212>
	{
		//distance_sensor.distance = (distance_sensor.distance_long[0] + distance_sensor.distance_long[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_long[0];
 8002338:	4b13      	ldr	r3, [pc, #76]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	4a12      	ldr	r2, [pc, #72]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 800233e:	6213      	str	r3, [r2, #32]
 8002340:	e003      	b.n	800234a <_Z18DistanceSensorTaskv+0x21a>
	}
	else
	{
		//distance_sensor.distance = (distance_sensor.distance_short[0] + distance_sensor.distance_short[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_short[0];
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 8002348:	6213      	str	r3, [r2, #32]
	}

	distance_sensor.distance -= 7.0f;
 800234a:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 800234c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002350:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002354:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 800235a:	edc3 7a08 	vstr	s15, [r3, #32]
	distance_sensor.distance /= 100.0f;
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 8002360:	ed93 7a08 	vldr	s14, [r3, #32]
 8002364:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002394 <_Z18DistanceSensorTaskv+0x264>
 8002368:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <_Z18DistanceSensorTaskv+0x258>)
 800236e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bdb0      	pop	{r4, r5, r7, pc}
 800237a:	bf00      	nop
 800237c:	20000144 	.word	0x20000144
 8002380:	45800000 	.word	0x45800000
 8002384:	40533333 	.word	0x40533333
 8002388:	20000154 	.word	0x20000154
 800238c:	20000018 	.word	0x20000018
 8002390:	20000000 	.word	0x20000000
 8002394:	42c80000 	.word	0x42c80000

08002398 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8002398:	b5b0      	push	{r4, r5, r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	ed87 0a01 	vstr	s0, [r7, #4]
 80023a2:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7fe f8c1 	bl	800052c <__aeabi_f2d>
 80023aa:	4604      	mov	r4, r0
 80023ac:	460d      	mov	r5, r1
 80023ae:	6838      	ldr	r0, [r7, #0]
 80023b0:	f7fe f8aa 	bl	8000508 <__aeabi_i2d>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	ec43 2b11 	vmov	d1, r2, r3
 80023bc:	ec45 4b10 	vmov	d0, r4, r5
 80023c0:	f01e f8b8 	bl	8020534 <pow>
 80023c4:	eeb0 7a40 	vmov.f32	s14, s0
 80023c8:	eef0 7a60 	vmov.f32	s15, s1
    }
 80023cc:	eeb0 0a47 	vmov.f32	s0, s14
 80023d0:	eef0 0a67 	vmov.f32	s1, s15
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080023dc <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>:

encoder_instance enc_instance_mot;
extern TIM_HandleTypeDef htim3;

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	60fb      	str	r3, [r7, #12]
	static uint8_t first_time = 0;
	if (!first_time)
 80023ee:	4b38      	ldr	r3, [pc, #224]	; (80024d0 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x28>
	{
		encoder_value->velocity = 0;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	801a      	strh	r2, [r3, #0]
		first_time = 1;
 80023fc:	4b34      	ldr	r3, [pc, #208]	; (80024d0 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	e05c      	b.n	80024be <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
	}
	else
	{
		if (temp_counter == encoder_value->last_counter_value)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	429a      	cmp	r2, r3
 800240c:	d103      	bne.n	8002416 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x3a>
		{
			encoder_value->velocity = 0;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	801a      	strh	r2, [r3, #0]
 8002414:	e053      	b.n	80024be <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
		}
		else if (temp_counter > encoder_value->last_counter_value)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	429a      	cmp	r2, r3
 800241e:	d927      	bls.n	8002470 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x94>
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b10      	cmp	r3, #16
 800242c:	bf0c      	ite	eq
 800242e:	2301      	moveq	r3, #1
 8002430:	2300      	movne	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d010      	beq.n	800245a <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x7e>
			{
				encoder_value->velocity = -encoder_value->last_counter_value - (__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	b29a      	uxth	r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	b29b      	uxth	r3, r3
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	b29a      	uxth	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	b29b      	uxth	r3, r3
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	b29b      	uxth	r3, r3
 8002452:	b21a      	sxth	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	801a      	strh	r2, [r3, #0]
 8002458:	e031      	b.n	80024be <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	b29a      	uxth	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	b29b      	uxth	r3, r3
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	b29b      	uxth	r3, r3
 8002468:	b21a      	sxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	801a      	strh	r2, [r3, #0]
 800246e:	e026      	b.n	80024be <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
		}
		else
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	2b10      	cmp	r3, #16
 800247c:	bf0c      	ite	eq
 800247e:	2301      	moveq	r3, #1
 8002480:	2300      	movne	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xc2>
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	b29a      	uxth	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	b29b      	uxth	r3, r3
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	b29b      	uxth	r3, r3
 8002496:	b21a      	sxth	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	801a      	strh	r2, [r3, #0]
 800249c:	e00f      	b.n	80024be <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) - encoder_value->last_counter_value);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	//encoder_value->rpm = ((float) (encoder_value->velocity) / ENCODER_TASK_TIMESTEP) / 2 * 1000.0f * AB_ROT_PER_PULSE * GEAR_RATIO * 60;
	encoder_value->last_counter_value = temp_counter;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	605a      	str	r2, [r3, #4]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	20000184 	.word	0x20000184

080024d4 <_Z12Encoder_TaskPv>:

void Encoder_Task(void * argument)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	// measure velocity, position
	int16_t velocity_values[5] = {0};
 80024dc:	f107 030c 	add.w	r3, r7, #12
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	811a      	strh	r2, [r3, #8]
	uint8_t index = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 80024ec:	f01c fcd6 	bl	801ee9c <xTaskGetTickCount>
 80024f0:	4603      	mov	r3, r0
 80024f2:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		update_encoder(&enc_instance_mot, &htim3);
 80024f4:	491e      	ldr	r1, [pc, #120]	; (8002570 <_Z12Encoder_TaskPv+0x9c>)
 80024f6:	481f      	ldr	r0, [pc, #124]	; (8002574 <_Z12Encoder_TaskPv+0xa0>)
 80024f8:	f7ff ff70 	bl	80023dc <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>
		velocity_values[index++] = enc_instance_mot.velocity;
 80024fc:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <_Z12Encoder_TaskPv+0xa0>)
 80024fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002502:	7dfb      	ldrb	r3, [r7, #23]
 8002504:	1c59      	adds	r1, r3, #1
 8002506:	75f9      	strb	r1, [r7, #23]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	3318      	adds	r3, #24
 800250c:	443b      	add	r3, r7
 800250e:	f823 2c0c 	strh.w	r2, [r3, #-12]

		if(index == 5)
 8002512:	7dfb      	ldrb	r3, [r7, #23]
 8002514:	2b05      	cmp	r3, #5
 8002516:	d101      	bne.n	800251c <_Z12Encoder_TaskPv+0x48>
		{
			index = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	75fb      	strb	r3, [r7, #23]
		}

		enc_instance_mot.rpm = 0.0f;
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <_Z12Encoder_TaskPv+0xa0>)
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	609a      	str	r2, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 8002524:	2300      	movs	r3, #0
 8002526:	75bb      	strb	r3, [r7, #22]
 8002528:	7dbb      	ldrb	r3, [r7, #22]
 800252a:	2b04      	cmp	r3, #4
 800252c:	d819      	bhi.n	8002562 <_Z12Encoder_TaskPv+0x8e>
		{
			enc_instance_mot.rpm += ((float)(velocity_values[i])) / 5.0f;
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <_Z12Encoder_TaskPv+0xa0>)
 8002530:	ed93 7a02 	vldr	s14, [r3, #8]
 8002534:	7dbb      	ldrb	r3, [r7, #22]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	3318      	adds	r3, #24
 800253a:	443b      	add	r3, r7
 800253c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002548:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 800254c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002554:	4b07      	ldr	r3, [pc, #28]	; (8002574 <_Z12Encoder_TaskPv+0xa0>)
 8002556:	edc3 7a02 	vstr	s15, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 800255a:	7dbb      	ldrb	r3, [r7, #22]
 800255c:	3301      	adds	r3, #1
 800255e:	75bb      	strb	r3, [r7, #22]
 8002560:	e7e2      	b.n	8002528 <_Z12Encoder_TaskPv+0x54>
		}

		vTaskDelayUntil(&xLastWakeTime, 1u);
 8002562:	f107 0308 	add.w	r3, r7, #8
 8002566:	2101      	movs	r1, #1
 8002568:	4618      	mov	r0, r3
 800256a:	f01c fa47 	bl	801e9fc <vTaskDelayUntil>
		update_encoder(&enc_instance_mot, &htim3);
 800256e:	e7c1      	b.n	80024f4 <_Z12Encoder_TaskPv+0x20>
 8002570:	20000b50 	.word	0x20000b50
 8002574:	20000178 	.word	0x20000178

08002578 <_Z12CalculateRPMv>:
	}
}

float CalculateRPM()
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
	uint8_t i;
	static uint8_t index = 0u;;
	static float rpm_averaging_array[5];
	float averaged_rpm = 0.0f;
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	603b      	str	r3, [r7, #0]
	rpm_averaging_array[index++] = enc_instance_mot.rpm;
 8002584:	4b20      	ldr	r3, [pc, #128]	; (8002608 <_Z12CalculateRPMv+0x90>)
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	4b20      	ldr	r3, [pc, #128]	; (800260c <_Z12CalculateRPMv+0x94>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	1c59      	adds	r1, r3, #1
 800258e:	b2c8      	uxtb	r0, r1
 8002590:	491e      	ldr	r1, [pc, #120]	; (800260c <_Z12CalculateRPMv+0x94>)
 8002592:	7008      	strb	r0, [r1, #0]
 8002594:	491e      	ldr	r1, [pc, #120]	; (8002610 <_Z12CalculateRPMv+0x98>)
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	601a      	str	r2, [r3, #0]

	if(index == 5)
 800259c:	4b1b      	ldr	r3, [pc, #108]	; (800260c <_Z12CalculateRPMv+0x94>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d102      	bne.n	80025aa <_Z12CalculateRPMv+0x32>
	{
		index = 0;
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <_Z12CalculateRPMv+0x94>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
	}

	averaged_rpm = 0.0f;
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	603b      	str	r3, [r7, #0]
	for(i = 0 ; i < 5; ++i)
 80025b0:	2300      	movs	r3, #0
 80025b2:	71fb      	strb	r3, [r7, #7]
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d813      	bhi.n	80025e2 <_Z12CalculateRPMv+0x6a>
	{
		averaged_rpm += rpm_averaging_array[i] / 5.0f;
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <_Z12CalculateRPMv+0x98>)
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	ed93 7a00 	vldr	s14, [r3]
 80025c6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80025ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025ce:	ed97 7a00 	vldr	s14, [r7]
 80025d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d6:	edc7 7a00 	vstr	s15, [r7]
	for(i = 0 ; i < 5; ++i)
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	3301      	adds	r3, #1
 80025de:	71fb      	strb	r3, [r7, #7]
 80025e0:	e7e8      	b.n	80025b4 <_Z12CalculateRPMv+0x3c>
	}

	averaged_rpm *= -1.36f;
 80025e2:	edd7 7a00 	vldr	s15, [r7]
 80025e6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002614 <_Z12CalculateRPMv+0x9c>
 80025ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ee:	edc7 7a00 	vstr	s15, [r7]

	return averaged_rpm;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	ee07 3a90 	vmov	s15, r3
}
 80025f8:	eeb0 0a67 	vmov.f32	s0, s15
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000178 	.word	0x20000178
 800260c:	20000185 	.word	0x20000185
 8002610:	20000188 	.word	0x20000188
 8002614:	bfae147b 	.word	0xbfae147b

08002618 <_Z15readByteFromIMUh>:
extern I2C_HandleTypeDef hi2c1;
uint8_t IMU_initialized = 0u;
IMU_signals_s imu;

uint8_t readByteFromIMU(uint8_t address)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af02      	add	r7, sp, #8
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	uint8_t ret = 0u;
 8002622:	2300      	movs	r3, #0
 8002624:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 8002626:	1dfa      	adds	r2, r7, #7
 8002628:	2364      	movs	r3, #100	; 0x64
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2301      	movs	r3, #1
 800262e:	21d6      	movs	r1, #214	; 0xd6
 8002630:	4808      	ldr	r0, [pc, #32]	; (8002654 <_Z15readByteFromIMUh+0x3c>)
 8002632:	f013 facd 	bl	8015bd0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 8002636:	f107 020f 	add.w	r2, r7, #15
 800263a:	2364      	movs	r3, #100	; 0x64
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2301      	movs	r3, #1
 8002640:	21d7      	movs	r1, #215	; 0xd7
 8002642:	4804      	ldr	r0, [pc, #16]	; (8002654 <_Z15readByteFromIMUh+0x3c>)
 8002644:	f013 fbb8 	bl	8015db8 <HAL_I2C_Master_Receive>
	return ret;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200007a0 	.word	0x200007a0

08002658 <_Z8IMU_Taskv>:
uint8_t test_data[6] = {0u};

void IMU_Task()
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af02      	add	r7, sp, #8
	if(IMU_initialized == 0u)
 800265e:	4b6f      	ldr	r3, [pc, #444]	; (800281c <_Z8IMU_Taskv+0x1c4>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d13f      	bne.n	80026e6 <_Z8IMU_Taskv+0x8e>
	{
		uint8_t whoami = 0u;
 8002666:	2300      	movs	r3, #0
 8002668:	72bb      	strb	r3, [r7, #10]
		uint8_t whoami_reg = WHO_AM_I_ADDR;
 800266a:	230f      	movs	r3, #15
 800266c:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &whoami_reg, 1, 100);
 800266e:	f107 0209 	add.w	r2, r7, #9
 8002672:	2364      	movs	r3, #100	; 0x64
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2301      	movs	r3, #1
 8002678:	21d6      	movs	r1, #214	; 0xd6
 800267a:	4869      	ldr	r0, [pc, #420]	; (8002820 <_Z8IMU_Taskv+0x1c8>)
 800267c:	f013 faa8 	bl	8015bd0 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &whoami, 1, 100);
 8002680:	f107 020a 	add.w	r2, r7, #10
 8002684:	2364      	movs	r3, #100	; 0x64
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2301      	movs	r3, #1
 800268a:	21d7      	movs	r1, #215	; 0xd7
 800268c:	4864      	ldr	r0, [pc, #400]	; (8002820 <_Z8IMU_Taskv+0x1c8>)
 800268e:	f013 fb93 	bl	8015db8 <HAL_I2C_Master_Receive>
		if(whoami != 0x6A)
 8002692:	7abb      	ldrb	r3, [r7, #10]
 8002694:	2b6a      	cmp	r3, #106	; 0x6a
 8002696:	f040 80bd 	bne.w	8002814 <_Z8IMU_Taskv+0x1bc>
		{
			return;
		}

		uint8_t pData[2] = {CTRL1_XL_ADDR, 0x60};
 800269a:	f246 0310 	movw	r3, #24592	; 0x6010
 800269e:	80bb      	strh	r3, [r7, #4]
		//HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);

		pData[0] = CTRL2_G_ADDR;
 80026a0:	2311      	movs	r3, #17
 80026a2:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 80026a4:	1d3a      	adds	r2, r7, #4
 80026a6:	2364      	movs	r3, #100	; 0x64
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2302      	movs	r3, #2
 80026ac:	21d6      	movs	r1, #214	; 0xd6
 80026ae:	485c      	ldr	r0, [pc, #368]	; (8002820 <_Z8IMU_Taskv+0x1c8>)
 80026b0:	f013 fa8e 	bl	8015bd0 <HAL_I2C_Master_Transmit>

		uint8_t ctrl3c = readByteFromIMU(0x12);
 80026b4:	2012      	movs	r0, #18
 80026b6:	f7ff ffaf 	bl	8002618 <_Z15readByteFromIMUh>
 80026ba:	4603      	mov	r3, r0
 80026bc:	72fb      	strb	r3, [r7, #11]
		ctrl3c = ctrl3c & (~0x04);
 80026be:	7afb      	ldrb	r3, [r7, #11]
 80026c0:	f023 0304 	bic.w	r3, r3, #4
 80026c4:	72fb      	strb	r3, [r7, #11]
		pData[0] = 0x12;
 80026c6:	2312      	movs	r3, #18
 80026c8:	713b      	strb	r3, [r7, #4]
		pData[1] = ctrl3c;
 80026ca:	7afb      	ldrb	r3, [r7, #11]
 80026cc:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 80026ce:	1d3a      	adds	r2, r7, #4
 80026d0:	2364      	movs	r3, #100	; 0x64
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2302      	movs	r3, #2
 80026d6:	21d6      	movs	r1, #214	; 0xd6
 80026d8:	4851      	ldr	r0, [pc, #324]	; (8002820 <_Z8IMU_Taskv+0x1c8>)
 80026da:	f013 fa79 	bl	8015bd0 <HAL_I2C_Master_Transmit>

		IMU_initialized = 1u;
 80026de:	4b4f      	ldr	r3, [pc, #316]	; (800281c <_Z8IMU_Taskv+0x1c4>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e097      	b.n	8002816 <_Z8IMU_Taskv+0x1be>
	}
	else
	{
		uint8_t status = 0u;
 80026e6:	2300      	movs	r3, #0
 80026e8:	70fb      	strb	r3, [r7, #3]
		uint8_t status_reg = STATUS_REG;
 80026ea:	231e      	movs	r3, #30
 80026ec:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &status_reg, 1, 100);
 80026ee:	1cba      	adds	r2, r7, #2
 80026f0:	2364      	movs	r3, #100	; 0x64
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	2301      	movs	r3, #1
 80026f6:	21d6      	movs	r1, #214	; 0xd6
 80026f8:	4849      	ldr	r0, [pc, #292]	; (8002820 <_Z8IMU_Taskv+0x1c8>)
 80026fa:	f013 fa69 	bl	8015bd0 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &status, 1, 100);
 80026fe:	1cfa      	adds	r2, r7, #3
 8002700:	2364      	movs	r3, #100	; 0x64
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2301      	movs	r3, #1
 8002706:	21d7      	movs	r1, #215	; 0xd7
 8002708:	4845      	ldr	r0, [pc, #276]	; (8002820 <_Z8IMU_Taskv+0x1c8>)
 800270a:	f013 fb55 	bl	8015db8 <HAL_I2C_Master_Receive>

		//Accelerometer new data available
		if((status & 0x01) == 1u)
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d053      	beq.n	80027c0 <_Z8IMU_Taskv+0x168>
		{
			uint8_t tmp_low, tmp_high;
			tmp_low = readByteFromIMU(OUTX_L_XL);
 8002718:	2028      	movs	r0, #40	; 0x28
 800271a:	f7ff ff7d 	bl	8002618 <_Z15readByteFromIMUh>
 800271e:	4603      	mov	r3, r0
 8002720:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTX_H_XL);
 8002722:	2029      	movs	r0, #41	; 0x29
 8002724:	f7ff ff78 	bl	8002618 <_Z15readByteFromIMUh>
 8002728:	4603      	mov	r3, r0
 800272a:	73bb      	strb	r3, [r7, #14]
			imu.acc_x = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 800272c:	7bbb      	ldrb	r3, [r7, #14]
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	b21a      	sxth	r2, r3
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	b21b      	sxth	r3, r3
 8002736:	4313      	orrs	r3, r2
 8002738:	b21b      	sxth	r3, r3
 800273a:	ee07 3a90 	vmov	s15, r3
 800273e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002742:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002824 <_Z8IMU_Taskv+0x1cc>
 8002746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800274a:	4b37      	ldr	r3, [pc, #220]	; (8002828 <_Z8IMU_Taskv+0x1d0>)
 800274c:	edc3 7a00 	vstr	s15, [r3]

			tmp_low = readByteFromIMU(OUTY_L_XL);
 8002750:	202a      	movs	r0, #42	; 0x2a
 8002752:	f7ff ff61 	bl	8002618 <_Z15readByteFromIMUh>
 8002756:	4603      	mov	r3, r0
 8002758:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTY_L_XL);
 800275a:	202a      	movs	r0, #42	; 0x2a
 800275c:	f7ff ff5c 	bl	8002618 <_Z15readByteFromIMUh>
 8002760:	4603      	mov	r3, r0
 8002762:	73bb      	strb	r3, [r7, #14]
			imu.acc_y = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8002764:	7bbb      	ldrb	r3, [r7, #14]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	b21a      	sxth	r2, r3
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	b21b      	sxth	r3, r3
 800276e:	4313      	orrs	r3, r2
 8002770:	b21b      	sxth	r3, r3
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800277a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002824 <_Z8IMU_Taskv+0x1cc>
 800277e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002782:	4b29      	ldr	r3, [pc, #164]	; (8002828 <_Z8IMU_Taskv+0x1d0>)
 8002784:	edc3 7a01 	vstr	s15, [r3, #4]

			tmp_low = readByteFromIMU(OUTZ_L_XL);
 8002788:	202c      	movs	r0, #44	; 0x2c
 800278a:	f7ff ff45 	bl	8002618 <_Z15readByteFromIMUh>
 800278e:	4603      	mov	r3, r0
 8002790:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTZ_L_XL);
 8002792:	202c      	movs	r0, #44	; 0x2c
 8002794:	f7ff ff40 	bl	8002618 <_Z15readByteFromIMUh>
 8002798:	4603      	mov	r3, r0
 800279a:	73bb      	strb	r3, [r7, #14]
			imu.acc_z = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 800279c:	7bbb      	ldrb	r3, [r7, #14]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	b21a      	sxth	r2, r3
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	b21b      	sxth	r3, r3
 80027a6:	4313      	orrs	r3, r2
 80027a8:	b21b      	sxth	r3, r3
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002824 <_Z8IMU_Taskv+0x1cc>
 80027b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <_Z8IMU_Taskv+0x1d0>)
 80027bc:	edc3 7a02 	vstr	s15, [r3, #8]

		}
		//Gyroscope new data available
		if((status & 0x02) == 2u)
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d025      	beq.n	8002816 <_Z8IMU_Taskv+0x1be>
		{
			uint8_t tmp_low, tmp_high;

			tmp_low = readByteFromIMU(OUTZ_L_G);
 80027ca:	2026      	movs	r0, #38	; 0x26
 80027cc:	f7ff ff24 	bl	8002618 <_Z15readByteFromIMUh>
 80027d0:	4603      	mov	r3, r0
 80027d2:	737b      	strb	r3, [r7, #13]
			tmp_high = readByteFromIMU(OUTZ_H_G);
 80027d4:	2027      	movs	r0, #39	; 0x27
 80027d6:	f7ff ff1f 	bl	8002618 <_Z15readByteFromIMUh>
 80027da:	4603      	mov	r3, r0
 80027dc:	733b      	strb	r3, [r7, #12]
			imu.yaw = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY / 1000.0f * 0.017453f;
 80027de:	7b3b      	ldrb	r3, [r7, #12]
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	b21a      	sxth	r2, r3
 80027e4:	7b7b      	ldrb	r3, [r7, #13]
 80027e6:	b21b      	sxth	r3, r3
 80027e8:	4313      	orrs	r3, r2
 80027ea:	b21b      	sxth	r3, r3
 80027ec:	ee07 3a90 	vmov	s15, r3
 80027f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f4:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800282c <_Z8IMU_Taskv+0x1d4>
 80027f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027fc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002830 <_Z8IMU_Taskv+0x1d8>
 8002800:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002804:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002834 <_Z8IMU_Taskv+0x1dc>
 8002808:	ee67 7a87 	vmul.f32	s15, s15, s14
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <_Z8IMU_Taskv+0x1d0>)
 800280e:	edc3 7a03 	vstr	s15, [r3, #12]
 8002812:	e000      	b.n	8002816 <_Z8IMU_Taskv+0x1be>
			return;
 8002814:	bf00      	nop
			//tmp_high = readByteFromIMU(OUTY_H_G);
			//imu.pitch = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY;

		}
	}
}
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	2000019c 	.word	0x2000019c
 8002820:	200007a0 	.word	0x200007a0
 8002824:	3d79db23 	.word	0x3d79db23
 8002828:	200001a0 	.word	0x200001a0
 800282c:	407423e2 	.word	0x407423e2
 8002830:	447a0000 	.word	0x447a0000
 8002834:	3c8ef998 	.word	0x3c8ef998

08002838 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
 800283c:	2300      	movs	r3, #0
 800283e:	4618      	mov	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fc8b 	bl	8003184 <_ZNSaIfED1Ev>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fc6e 	bl	8003164 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ffeb 	bl	8002878 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>:
uint16_t infra_adc_values_test[32];
uint8_t infra_adc_data[32*2];

/* Turns on every #num and #num + 4 Infraled on every led driving IC.*/
void TurnOnInfraLEDs(GPIO_TypeDef* LE_port[2], uint16_t LE_pin[2],GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2], uint8_t num)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
	uint8_t i;
	uint8_t data = 0x11 << num;
 80028ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028be:	2211      	movs	r2, #17
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	75bb      	strb	r3, [r7, #22]

	for(i = 0; i < 4; ++i)
 80028c8:	2300      	movs	r3, #0
 80028ca:	75fb      	strb	r3, [r7, #23]
 80028cc:	7dfb      	ldrb	r3, [r7, #23]
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d80b      	bhi.n	80028ea <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x3e>
	{
		HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80028d2:	f107 0116 	add.w	r1, r7, #22
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	2201      	movs	r2, #1
 80028dc:	4820      	ldr	r0, [pc, #128]	; (8002960 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0xb4>)
 80028de:	f015 ff4c 	bl	801877a <HAL_SPI_Transmit>
	for(i = 0; i < 4; ++i)
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	3301      	adds	r3, #1
 80028e6:	75fb      	strb	r3, [r7, #23]
 80028e8:	e7f0      	b.n	80028cc <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x20>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	2201      	movs	r2, #1
 80028f4:	4619      	mov	r1, r3
 80028f6:	f013 f8a9 	bl	8015a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	3304      	adds	r3, #4
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	3302      	adds	r3, #2
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	2201      	movs	r2, #1
 8002908:	4619      	mov	r1, r3
 800290a:	f013 f89f 	bl	8015a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	2200      	movs	r2, #0
 8002918:	4619      	mov	r1, r3
 800291a:	f013 f897 	bl	8015a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3304      	adds	r3, #4
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	3302      	adds	r3, #2
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	2200      	movs	r2, #0
 800292c:	4619      	mov	r1, r3
 800292e:	f013 f88d 	bl	8015a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	2200      	movs	r2, #0
 800293c:	4619      	mov	r1, r3
 800293e:	f013 f885 	bl	8015a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3304      	adds	r3, #4
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	3302      	adds	r3, #2
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	2200      	movs	r2, #0
 8002950:	4619      	mov	r1, r3
 8002952:	f013 f87b 	bl	8015a4c <HAL_GPIO_WritePin>

}
 8002956:	bf00      	nop
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000a3c 	.word	0x20000a3c

08002964 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>:

void TurnOnLEDs(GPIO_TypeDef *LE_port[2], uint16_t LE_pin[2], GPIO_TypeDef *OE_port[2], uint16_t OE_pin[2], uint32_t front, uint32_t rear)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	2201      	movs	r2, #1
 800297c:	4619      	mov	r1, r3
 800297e:	f013 f865 	bl	8015a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	3302      	adds	r3, #2
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	2201      	movs	r2, #1
 8002990:	4619      	mov	r1, r3
 8002992:	f013 f85b 	bl	8015a4c <HAL_GPIO_WritePin>
	uint8_t i;
	for (i = 0; i < 4; ++i)
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]
 800299a:	7dfb      	ldrb	r3, [r7, #23]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d812      	bhi.n	80029c6 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x62>
	{
		uint8_t data_front = (front >> (8u*i)) & 0xFF;
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	6a3a      	ldr	r2, [r7, #32]
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi2, &data_front, 1, HAL_MAX_DELAY);
 80029ae:	f107 0116 	add.w	r1, r7, #22
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295
 80029b6:	2201      	movs	r2, #1
 80029b8:	482c      	ldr	r0, [pc, #176]	; (8002a6c <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 80029ba:	f015 fede 	bl	801877a <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 80029be:	7dfb      	ldrb	r3, [r7, #23]
 80029c0:	3301      	adds	r3, #1
 80029c2:	75fb      	strb	r3, [r7, #23]
 80029c4:	e7e9      	b.n	800299a <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x36>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	2201      	movs	r2, #1
 80029d0:	4619      	mov	r1, r3
 80029d2:	f013 f83b 	bl	8015a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	2200      	movs	r2, #0
 80029e0:	4619      	mov	r1, r3
 80029e2:	f013 f833 	bl	8015a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	2200      	movs	r2, #0
 80029f0:	4619      	mov	r1, r3
 80029f2:	f013 f82b 	bl	8015a4c <HAL_GPIO_WritePin>
	for (i = 0; i < 4; ++i)
 80029f6:	2300      	movs	r3, #0
 80029f8:	75fb      	strb	r3, [r7, #23]
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d812      	bhi.n	8002a26 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0xc2>
	{
		uint8_t data_rear = (rear >> (8u*i)) & 0xFF;
 8002a00:	7dfb      	ldrb	r3, [r7, #23]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a06:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	757b      	strb	r3, [r7, #21]
		HAL_SPI_Transmit(&hspi2, &data_rear, 1, HAL_MAX_DELAY);
 8002a0e:	f107 0115 	add.w	r1, r7, #21
 8002a12:	f04f 33ff 	mov.w	r3, #4294967295
 8002a16:	2201      	movs	r2, #1
 8002a18:	4814      	ldr	r0, [pc, #80]	; (8002a6c <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 8002a1a:	f015 feae 	bl	801877a <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 8002a1e:	7dfb      	ldrb	r3, [r7, #23]
 8002a20:	3301      	adds	r3, #1
 8002a22:	75fb      	strb	r3, [r7, #23]
 8002a24:	e7e9      	b.n	80029fa <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x96>
	}

	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	3302      	adds	r3, #2
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	2201      	movs	r2, #1
 8002a34:	4619      	mov	r1, r3
 8002a36:	f013 f809 	bl	8015a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	3302      	adds	r3, #2
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	2200      	movs	r2, #0
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f012 ffff 	bl	8015a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3304      	adds	r3, #4
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	3302      	adds	r3, #2
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f012 fff5 	bl	8015a4c <HAL_GPIO_WritePin>
}
 8002a62:	bf00      	nop
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000a3c 	.word	0x20000a3c

08002a70 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>:


void TurnOffInfraLEDs(GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2])
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	2201      	movs	r2, #1
 8002a84:	4619      	mov	r1, r3
 8002a86:	f012 ffe1 	bl	8015a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	3302      	adds	r3, #2
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	2201      	movs	r2, #1
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f012 ffd7 	bl	8015a4c <HAL_GPIO_WritePin>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>:

/* Reads out from all of the 4 adc ICs on one line sensor card 2 adc values each defined by num and writes it to res */
void ReadADCValues(GPIO_TypeDef* ports[4], uint16_t pins[4], uint8_t adc_ic_index, uint8_t *res)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t tmp[2] = {0, 0};
 8002ab8:	2300      	movs	r3, #0
 8002aba:	82bb      	strh	r3, [r7, #20]
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_RESET);
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	4413      	add	r3, r2
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f012 ffba 	bl	8015a4c <HAL_GPIO_WritePin>
	for(i = 0; i < 8; ++i)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	75fb      	strb	r3, [r7, #23]
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	2b07      	cmp	r3, #7
 8002ae0:	d81a      	bhi.n	8002b18 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x70>
	{
		tmp[0] = i << 3u;
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	753b      	strb	r3, [r7, #20]
		HAL_SPI_Transmit(&hspi1, tmp, 2, HAL_MAX_DELAY);
 8002aea:	f107 0114 	add.w	r1, r7, #20
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295
 8002af2:	2202      	movs	r2, #2
 8002af4:	4811      	ldr	r0, [pc, #68]	; (8002b3c <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x94>)
 8002af6:	f015 fe40 	bl	801877a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &res[i*2], 2, HAL_MAX_DELAY);
 8002afa:	7dfb      	ldrb	r3, [r7, #23]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	461a      	mov	r2, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	1899      	adds	r1, r3, r2
 8002b04:	f04f 33ff 	mov.w	r3, #4294967295
 8002b08:	2202      	movs	r2, #2
 8002b0a:	480c      	ldr	r0, [pc, #48]	; (8002b3c <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x94>)
 8002b0c:	f015 ffa3 	bl	8018a56 <HAL_SPI_Receive>
	for(i = 0; i < 8; ++i)
 8002b10:	7dfb      	ldrb	r3, [r7, #23]
 8002b12:	3301      	adds	r3, #1
 8002b14:	75fb      	strb	r3, [r7, #23]
 8002b16:	e7e1      	b.n	8002adc <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x34>
	}
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_SET);
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	4413      	add	r3, r2
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f012 ff8c 	bl	8015a4c <HAL_GPIO_WritePin>

}
 8002b34:	bf00      	nop
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	200009d8 	.word	0x200009d8

08002b40 <_Z14LineSensorTaskv>:
void LineSensorTask(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b096      	sub	sp, #88	; 0x58
 8002b44:	af02      	add	r7, sp, #8


#else
	uint8_t j;
	int8_t i;
	for(i = 0; i < 4; ++i)
 8002b46:	2300      	movs	r3, #0
 8002b48:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002b4c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	f300 80c3 	bgt.w	8002cdc <_Z14LineSensorTaskv+0x19c>
	{
		TurnOnInfraLEDs(infra_le_ports, infra_le_pins, infra_oe_ports, infra_le_pins, i);
 8002b56:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	4b86      	ldr	r3, [pc, #536]	; (8002d78 <_Z14LineSensorTaskv+0x238>)
 8002b5e:	4a87      	ldr	r2, [pc, #540]	; (8002d7c <_Z14LineSensorTaskv+0x23c>)
 8002b60:	4985      	ldr	r1, [pc, #532]	; (8002d78 <_Z14LineSensorTaskv+0x238>)
 8002b62:	4887      	ldr	r0, [pc, #540]	; (8002d80 <_Z14LineSensorTaskv+0x240>)
 8002b64:	f7ff fea2 	bl	80028ac <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>

		uint32_t delay_start = __HAL_TIM_GetCounter(&htim6);
 8002b68:	4b86      	ldr	r3, [pc, #536]	; (8002d84 <_Z14LineSensorTaskv+0x244>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	633b      	str	r3, [r7, #48]	; 0x30
		while((__HAL_TIM_GetCounter(&htim6) - delay_start) < INFRA_WAIT_TIME);
 8002b70:	4b84      	ldr	r3, [pc, #528]	; (8002d84 <_Z14LineSensorTaskv+0x244>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b95      	cmp	r3, #149	; 0x95
 8002b7c:	bf94      	ite	ls
 8002b7e:	2301      	movls	r3, #1
 8002b80:	2300      	movhi	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d000      	beq.n	8002b8a <_Z14LineSensorTaskv+0x4a>
 8002b88:	e7f2      	b.n	8002b70 <_Z14LineSensorTaskv+0x30>

		for(j = 0; j < 4; ++j)
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002b90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	f200 8096 	bhi.w	8002cc6 <_Z14LineSensorTaskv+0x186>
		{
			uint8_t adc_front_values[16];
			uint8_t adc_rear_values[16];
			ReadADCValues(front_adc_cs_ports, front_adc_cs_pins, j, adc_front_values);
 8002b9a:	f107 0318 	add.w	r3, r7, #24
 8002b9e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002ba2:	4979      	ldr	r1, [pc, #484]	; (8002d88 <_Z14LineSensorTaskv+0x248>)
 8002ba4:	4879      	ldr	r0, [pc, #484]	; (8002d8c <_Z14LineSensorTaskv+0x24c>)
 8002ba6:	f7ff ff7f 	bl	8002aa8 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>
			ReadADCValues(rear_adc_cs_ports, rear_adc_cs_pins, j, adc_rear_values);
 8002baa:	f107 0308 	add.w	r3, r7, #8
 8002bae:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002bb2:	4977      	ldr	r1, [pc, #476]	; (8002d90 <_Z14LineSensorTaskv+0x250>)
 8002bb4:	4877      	ldr	r0, [pc, #476]	; (8002d94 <_Z14LineSensorTaskv+0x254>)
 8002bb6:	f7ff ff77 	bl	8002aa8 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>

			// i = id of LED, j = id of ic, adc_ic_values contains the 8 adc values from one ic
			ls_data.adc_values_f[j*8 + i] = (uint16_t)(adc_front_values[i*2] << 8u) | (adc_front_values[i*2+1]);
 8002bba:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	3350      	adds	r3, #80	; 0x50
 8002bc2:	443b      	add	r3, r7
 8002bc4:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	b299      	uxth	r1, r3
 8002bce:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	3350      	adds	r3, #80	; 0x50
 8002bd8:	443b      	add	r3, r7
 8002bda:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002be4:	00d8      	lsls	r0, r3, #3
 8002be6:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002bea:	4403      	add	r3, r0
 8002bec:	430a      	orrs	r2, r1
 8002bee:	b291      	uxth	r1, r2
 8002bf0:	4a69      	ldr	r2, [pc, #420]	; (8002d98 <_Z14LineSensorTaskv+0x258>)
 8002bf2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_f[j*8 + i + 4] = (uint16_t)(adc_front_values[(i*2) + 8] << 8u) | (adc_front_values[(i*2) + 8 + 1]);
 8002bf6:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	3350      	adds	r3, #80	; 0x50
 8002c00:	443b      	add	r3, r7
 8002c02:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	b299      	uxth	r1, r3
 8002c0c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002c10:	3304      	adds	r3, #4
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	3301      	adds	r3, #1
 8002c16:	3350      	adds	r3, #80	; 0x50
 8002c18:	443b      	add	r3, r7
 8002c1a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002c24:	00d8      	lsls	r0, r3, #3
 8002c26:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002c2a:	4403      	add	r3, r0
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	b291      	uxth	r1, r2
 8002c32:	4a59      	ldr	r2, [pc, #356]	; (8002d98 <_Z14LineSensorTaskv+0x258>)
 8002c34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			ls_data.adc_values_r[j*8 + i] = (uint16_t)(adc_rear_values[i*2] << 8u) | (adc_rear_values[i*2+1]);
 8002c38:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	3350      	adds	r3, #80	; 0x50
 8002c40:	443b      	add	r3, r7
 8002c42:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	b299      	uxth	r1, r3
 8002c4c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	3301      	adds	r3, #1
 8002c54:	3350      	adds	r3, #80	; 0x50
 8002c56:	443b      	add	r3, r7
 8002c58:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002c62:	00d8      	lsls	r0, r3, #3
 8002c64:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002c68:	4403      	add	r3, r0
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	b291      	uxth	r1, r2
 8002c6e:	4a4a      	ldr	r2, [pc, #296]	; (8002d98 <_Z14LineSensorTaskv+0x258>)
 8002c70:	3320      	adds	r3, #32
 8002c72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_r[j*8 + i + 4] = (uint16_t)(adc_rear_values[(i*2) + 8] << 8u) | (adc_rear_values[(i*2) + 8 + 1]);
 8002c76:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	3350      	adds	r3, #80	; 0x50
 8002c80:	443b      	add	r3, r7
 8002c82:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	b299      	uxth	r1, r3
 8002c8c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002c90:	3304      	adds	r3, #4
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	3301      	adds	r3, #1
 8002c96:	3350      	adds	r3, #80	; 0x50
 8002c98:	443b      	add	r3, r7
 8002c9a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002ca4:	00d8      	lsls	r0, r3, #3
 8002ca6:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002caa:	4403      	add	r3, r0
 8002cac:	3304      	adds	r3, #4
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	b291      	uxth	r1, r2
 8002cb2:	4a39      	ldr	r2, [pc, #228]	; (8002d98 <_Z14LineSensorTaskv+0x258>)
 8002cb4:	3320      	adds	r3, #32
 8002cb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(j = 0; j < 4; ++j)
 8002cba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002cc4:	e764      	b.n	8002b90 <_Z14LineSensorTaskv+0x50>
		}

		TurnOffInfraLEDs(infra_oe_ports, infra_le_pins);
 8002cc6:	492c      	ldr	r1, [pc, #176]	; (8002d78 <_Z14LineSensorTaskv+0x238>)
 8002cc8:	482c      	ldr	r0, [pc, #176]	; (8002d7c <_Z14LineSensorTaskv+0x23c>)
 8002cca:	f7ff fed1 	bl	8002a70 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>
	for(i = 0; i < 4; ++i)
 8002cce:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002cda:	e737      	b.n	8002b4c <_Z14LineSensorTaskv+0xc>
	}

	float denominator_f = 0.0f;
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	64bb      	str	r3, [r7, #72]	; 0x48
	float denominator_r = 0.0f;
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t led_front = 0u;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t led_rear = 0u;
 8002cec:	2300      	movs	r3, #0
 8002cee:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t front_max_index = 0u;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t rear_max_index = 0u;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	for(i = 1; i < 31; ++i)
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002d02:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002d06:	2b1e      	cmp	r3, #30
 8002d08:	dc48      	bgt.n	8002d9c <_Z14LineSensorTaskv+0x25c>
	{
		if(ls_data.adc_values_f[i] > ls_data.adc_values_f[front_max_index])
 8002d0a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002d0e:	4a22      	ldr	r2, [pc, #136]	; (8002d98 <_Z14LineSensorTaskv+0x258>)
 8002d10:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d14:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002d18:	491f      	ldr	r1, [pc, #124]	; (8002d98 <_Z14LineSensorTaskv+0x258>)
 8002d1a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d903      	bls.n	8002d2a <_Z14LineSensorTaskv+0x1ea>
		{
			front_max_index = i;
 8002d22:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002d26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
		if(ls_data.adc_values_r[i] > ls_data.adc_values_r[rear_max_index])
 8002d2a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002d2e:	4a1a      	ldr	r2, [pc, #104]	; (8002d98 <_Z14LineSensorTaskv+0x258>)
 8002d30:	3320      	adds	r3, #32
 8002d32:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d36:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002d3a:	4917      	ldr	r1, [pc, #92]	; (8002d98 <_Z14LineSensorTaskv+0x258>)
 8002d3c:	3320      	adds	r3, #32
 8002d3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d903      	bls.n	8002d4e <_Z14LineSensorTaskv+0x20e>
		{
			rear_max_index = i;
 8002d46:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002d4a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		}
		ls_data.front_detection[i] = true;
 8002d4e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002d52:	4a11      	ldr	r2, [pc, #68]	; (8002d98 <_Z14LineSensorTaskv+0x258>)
 8002d54:	4413      	add	r3, r2
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		ls_data.rear_detection[i] = true;
 8002d5c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002d60:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <_Z14LineSensorTaskv+0x258>)
 8002d62:	4413      	add	r3, r2
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 1; i < 31; ++i)
 8002d6a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002d6e:	3301      	adds	r3, #1
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002d76:	e7c4      	b.n	8002d02 <_Z14LineSensorTaskv+0x1c2>
 8002d78:	20000068 	.word	0x20000068
 8002d7c:	2000006c 	.word	0x2000006c
 8002d80:	20000060 	.word	0x20000060
 8002d84:	20000be8 	.word	0x20000be8
 8002d88:	20000040 	.word	0x20000040
 8002d8c:	20000030 	.word	0x20000030
 8002d90:	20000058 	.word	0x20000058
 8002d94:	20000048 	.word	0x20000048
 8002d98:	200001b8 	.word	0x200001b8
	}

	ls_data.front_detection[0] = true;
 8002d9c:	4bc3      	ldr	r3, [pc, #780]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	ls_data.front_detection[31] = true;
 8002da4:	4bc1      	ldr	r3, [pc, #772]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	ls_data.rear_detection[0] = true;
 8002dac:	4bbf      	ldr	r3, [pc, #764]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	ls_data.rear_detection[31] = true;
 8002db4:	4bbd      	ldr	r3, [pc, #756]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
	for(i = 1; i < 31; ++i)
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002dc2:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002dc6:	2b1e      	cmp	r3, #30
 8002dc8:	dc7f      	bgt.n	8002eca <_Z14LineSensorTaskv+0x38a>
	{
		ls_data.position_front += (float)((i - 16.0f/* - front_max_index*/) * ls_data.adc_values_f[i]);
 8002dca:	4bb8      	ldr	r3, [pc, #736]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002dcc:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002dd0:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002dd4:	ee07 3a90 	vmov	s15, r3
 8002dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ddc:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002de0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002de4:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002de8:	4ab0      	ldr	r2, [pc, #704]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002dea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dee:	ee07 3a90 	vmov	s15, r3
 8002df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dfe:	4bab      	ldr	r3, [pc, #684]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002e00:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		ls_data.position_rear += (float)((i - 16.0f/* - rear_max_index*/) * ls_data.adc_values_r[i]);
 8002e04:	4ba9      	ldr	r3, [pc, #676]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002e06:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 8002e0a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002e0e:	ee07 3a90 	vmov	s15, r3
 8002e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e16:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002e1a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e1e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002e22:	4aa2      	ldr	r2, [pc, #648]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002e24:	3320      	adds	r3, #32
 8002e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e2a:	ee07 3a90 	vmov	s15, r3
 8002e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3a:	4b9c      	ldr	r3, [pc, #624]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002e3c:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
		denominator_f += (float)(ls_data.adc_values_f[i]);
 8002e40:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002e44:	4a99      	ldr	r2, [pc, #612]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e52:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e5a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		denominator_r += (float)(ls_data.adc_values_r[i]);
 8002e5e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002e62:	4a92      	ldr	r2, [pc, #584]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002e64:	3320      	adds	r3, #32
 8002e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e72:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e7a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		if(ls_data.adc_values_f[i] > 2000)
 8002e7e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002e82:	4a8a      	ldr	r2, [pc, #552]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002e8c:	d906      	bls.n	8002e9c <_Z14LineSensorTaskv+0x35c>
		{
			ls_data.front_detection[i] = false;
 8002e8e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002e92:	4a86      	ldr	r2, [pc, #536]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002e94:	4413      	add	r3, r2
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		}

		if(ls_data.adc_values_r[i] > 2000)
 8002e9c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002ea0:	4a82      	ldr	r2, [pc, #520]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002ea2:	3320      	adds	r3, #32
 8002ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002eac:	d906      	bls.n	8002ebc <_Z14LineSensorTaskv+0x37c>
		{
			ls_data.rear_detection[i] = false;
 8002eae:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002eb2:	4a7e      	ldr	r2, [pc, #504]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002eb4:	4413      	add	r3, r2
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 1; i < 31; ++i)
 8002ebc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002ec8:	e77b      	b.n	8002dc2 <_Z14LineSensorTaskv+0x282>
		}
	}

	for(i = 2; i < SENSOR_COUNT - 2; ++i)
 8002eca:	2302      	movs	r3, #2
 8002ecc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002ed0:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002ed4:	2b1d      	cmp	r3, #29
 8002ed6:	dc38      	bgt.n	8002f4a <_Z14LineSensorTaskv+0x40a>
	{
		if((ls_data.front_detection[i - 1] == true) && (ls_data.front_detection[i + 1] == true))
 8002ed8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002edc:	3b01      	subs	r3, #1
 8002ede:	4a73      	ldr	r2, [pc, #460]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d10f      	bne.n	8002f0a <_Z14LineSensorTaskv+0x3ca>
 8002eea:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002eee:	3301      	adds	r3, #1
 8002ef0:	4a6e      	ldr	r2, [pc, #440]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d106      	bne.n	8002f0a <_Z14LineSensorTaskv+0x3ca>
		{
			ls_data.front_detection[i] = true;
 8002efc:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f00:	4a6a      	ldr	r2, [pc, #424]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002f02:	4413      	add	r3, r2
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		}

		if((ls_data.rear_detection[i - 1] == true) && (ls_data.rear_detection[i + 1] == true))
 8002f0a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	4a66      	ldr	r2, [pc, #408]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002f12:	4413      	add	r3, r2
 8002f14:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d10f      	bne.n	8002f3c <_Z14LineSensorTaskv+0x3fc>
 8002f1c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f20:	3301      	adds	r3, #1
 8002f22:	4a62      	ldr	r2, [pc, #392]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002f24:	4413      	add	r3, r2
 8002f26:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d106      	bne.n	8002f3c <_Z14LineSensorTaskv+0x3fc>
		{
			ls_data.rear_detection[i] = true;
 8002f2e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f32:	4a5e      	ldr	r2, [pc, #376]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002f34:	4413      	add	r3, r2
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 2; i < SENSOR_COUNT - 2; ++i)
 8002f3c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002f40:	3301      	adds	r3, #1
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002f48:	e7c2      	b.n	8002ed0 <_Z14LineSensorTaskv+0x390>
		}
	}

	for(i = 1; i < 31; ++i)
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002f50:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f54:	2b1e      	cmp	r3, #30
 8002f56:	dc28      	bgt.n	8002faa <_Z14LineSensorTaskv+0x46a>
	{
		if(ls_data.front_detection[i] == false)
 8002f58:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f5c:	4a53      	ldr	r2, [pc, #332]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002f5e:	4413      	add	r3, r2
 8002f60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d108      	bne.n	8002f7a <_Z14LineSensorTaskv+0x43a>
		{
			led_front |= 0x80000000 >> (i);
 8002f68:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f70:	fa22 f303 	lsr.w	r3, r2, r3
 8002f74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f76:	4313      	orrs	r3, r2
 8002f78:	643b      	str	r3, [r7, #64]	; 0x40
		}
		if(ls_data.rear_detection[i] == false)
 8002f7a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f7e:	4a4b      	ldr	r2, [pc, #300]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002f80:	4413      	add	r3, r2
 8002f82:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d108      	bne.n	8002f9c <_Z14LineSensorTaskv+0x45c>
		{
			led_rear |= 0x80000000 >> (i);
 8002f8a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i = 1; i < 31; ++i)
 8002f9c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002fa8:	e7d2      	b.n	8002f50 <_Z14LineSensorTaskv+0x410>
		}
	}
	uint8_t cluster_start_front = SENSOR_COUNT + 1;
 8002faa:	2321      	movs	r3, #33	; 0x21
 8002fac:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	uint8_t cluster_end_front = SENSOR_COUNT + 1;
 8002fb0:	2321      	movs	r3, #33	; 0x21
 8002fb2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t cluster_start_rear = SENSOR_COUNT + 1;
 8002fb6:	2321      	movs	r3, #33	; 0x21
 8002fb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t cluster_end_rear = SENSOR_COUNT + 1;
 8002fbc:	2321      	movs	r3, #33	; 0x21
 8002fbe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t current_idx;
	ls_data.front.clear();
 8002fc2:	483b      	ldr	r0, [pc, #236]	; (80030b0 <_Z14LineSensorTaskv+0x570>)
 8002fc4:	f000 f91d 	bl	8003202 <_ZNSt6vectorIfSaIfEE5clearEv>
	ls_data.rear.clear();
 8002fc8:	483a      	ldr	r0, [pc, #232]	; (80030b4 <_Z14LineSensorTaskv+0x574>)
 8002fca:	f000 f91a 	bl	8003202 <_ZNSt6vectorIfSaIfEE5clearEv>
	for (current_idx = 0; current_idx < SENSOR_COUNT; current_idx++)
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002fd4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002fd8:	2b1f      	cmp	r3, #31
 8002fda:	f200 80ab 	bhi.w	8003134 <_Z14LineSensorTaskv+0x5f4>
	{
		if (!ls_data.front_detection[current_idx])
 8002fde:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002fe2:	4a32      	ldr	r2, [pc, #200]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002fea:	f083 0301 	eor.w	r3, r3, #1
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00c      	beq.n	800300e <_Z14LineSensorTaskv+0x4ce>
		{
			if (cluster_start_front == SENSOR_COUNT + 1)
 8002ff4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002ff8:	2b21      	cmp	r3, #33	; 0x21
 8002ffa:	d103      	bne.n	8003004 <_Z14LineSensorTaskv+0x4c4>
			{
				cluster_start_front = current_idx;
 8002ffc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003000:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			}
			cluster_end_front = current_idx;
 8003004:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003008:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800300c:	e035      	b.n	800307a <_Z14LineSensorTaskv+0x53a>
		}
		else
		{
			if (cluster_start_front != SENSOR_COUNT + 1)
 800300e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003012:	2b21      	cmp	r3, #33	; 0x21
 8003014:	d031      	beq.n	800307a <_Z14LineSensorTaskv+0x53a>
			{
				// calculate the center of mass of the cluster
				float cluster_center = (cluster_start_front + 1 + cluster_end_front + 1) / 2.0f;
 8003016:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003020:	4413      	add	r3, r2
 8003022:	3301      	adds	r3, #1
 8003024:	ee07 3a90 	vmov	s15, r3
 8003028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800302c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003030:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003034:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				// calculate the position of the line relative to the center of the sensor
				float line_position = cluster_center - 16.5f;
 8003038:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800303c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80030b8 <_Z14LineSensorTaskv+0x578>
 8003040:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003044:	edc7 7a01 	vstr	s15, [r7, #4]
				line_position = -1.0f * line_position * SENSOR_WIDTH / (SENSOR_COUNT - 1);
 8003048:	edd7 7a01 	vldr	s15, [r7, #4]
 800304c:	eef1 7a67 	vneg.f32	s15, s15
 8003050:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80030bc <_Z14LineSensorTaskv+0x57c>
 8003054:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003058:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 800305c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003060:	edc7 7a01 	vstr	s15, [r7, #4]
					denominator += ls_data.adc_values_f[i];
				}
				line_position = -1.0f * (((line_position / denominator) - 16.5f) * SENSOR_WIDTH / (SENSOR_COUNT - 1));
				*/
				// add the line position to the vector
				ls_data.front.push_back(line_position);
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	4619      	mov	r1, r3
 8003068:	4811      	ldr	r0, [pc, #68]	; (80030b0 <_Z14LineSensorTaskv+0x570>)
 800306a:	f000 f8d8 	bl	800321e <_ZNSt6vectorIfSaIfEE9push_backERKf>
				// reset the cluster start and end
				cluster_start_front = SENSOR_COUNT + 1;
 800306e:	2321      	movs	r3, #33	; 0x21
 8003070:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				cluster_end_front = SENSOR_COUNT + 1;
 8003074:	2321      	movs	r3, #33	; 0x21
 8003076:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			}
		}

		if (!ls_data.rear_detection[current_idx])
 800307a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800307e:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <_Z14LineSensorTaskv+0x56c>)
 8003080:	4413      	add	r3, r2
 8003082:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003086:	f083 0301 	eor.w	r3, r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d017      	beq.n	80030c0 <_Z14LineSensorTaskv+0x580>
		{
			if (cluster_start_rear == SENSOR_COUNT + 1)
 8003090:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003094:	2b21      	cmp	r3, #33	; 0x21
 8003096:	d103      	bne.n	80030a0 <_Z14LineSensorTaskv+0x560>
			{
				cluster_start_rear = current_idx;
 8003098:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800309c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
			cluster_end_rear = current_idx;
 80030a0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80030a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80030a8:	e03e      	b.n	8003128 <_Z14LineSensorTaskv+0x5e8>
 80030aa:	bf00      	nop
 80030ac:	200001b8 	.word	0x200001b8
 80030b0:	20000280 	.word	0x20000280
 80030b4:	2000028c 	.word	0x2000028c
 80030b8:	41840000 	.word	0x41840000
 80030bc:	3e4ccccd 	.word	0x3e4ccccd
		}
		else
		{
			if (cluster_start_rear != SENSOR_COUNT + 1)
 80030c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030c4:	2b21      	cmp	r3, #33	; 0x21
 80030c6:	d02f      	beq.n	8003128 <_Z14LineSensorTaskv+0x5e8>
			{
				// calculate the center of mass of the cluster
				float cluster_center = (cluster_start_rear + 1 + cluster_end_rear + 1) / 2.0f;
 80030c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80030d2:	4413      	add	r3, r2
 80030d4:	3301      	adds	r3, #1
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030de:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80030e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030e6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				// calculate the position of the line relative to the center of the sensor
				float line_position = cluster_center - 16.5f;
 80030ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030ee:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 80030b8 <_Z14LineSensorTaskv+0x578>
 80030f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030f6:	edc7 7a00 	vstr	s15, [r7]
				line_position = line_position * SENSOR_WIDTH / (SENSOR_COUNT - 1);
 80030fa:	edd7 7a00 	vldr	s15, [r7]
 80030fe:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 80030bc <_Z14LineSensorTaskv+0x57c>
 8003102:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003106:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 800310a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800310e:	edc7 7a00 	vstr	s15, [r7]
					line_position += ls_data.adc_values_r[i] * i;
					denominator += ls_data.adc_values_r[i];
				}
				line_position = ((line_position / denominator) - 16.5f) * SENSOR_WIDTH / (SENSOR_COUNT - 1);
				*/
				ls_data.rear.push_back(line_position);
 8003112:	463b      	mov	r3, r7
 8003114:	4619      	mov	r1, r3
 8003116:	480e      	ldr	r0, [pc, #56]	; (8003150 <_Z14LineSensorTaskv+0x610>)
 8003118:	f000 f881 	bl	800321e <_ZNSt6vectorIfSaIfEE9push_backERKf>
				// reset the cluster start and end
				cluster_start_rear = SENSOR_COUNT + 1;
 800311c:	2321      	movs	r3, #33	; 0x21
 800311e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				cluster_end_rear = SENSOR_COUNT + 1;
 8003122:	2321      	movs	r3, #33	; 0x21
 8003124:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (current_idx = 0; current_idx < SENSOR_COUNT; current_idx++)
 8003128:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800312c:	3301      	adds	r3, #1
 800312e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8003132:	e74f      	b.n	8002fd4 <_Z14LineSensorTaskv+0x494>
			}
		}
	}


	TurnOnLEDs(led_le_ports, led_le_pins, led_oe_ports, led_oe_pins, led_front, led_rear);
 8003134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003136:	9301      	str	r3, [sp, #4]
 8003138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <_Z14LineSensorTaskv+0x614>)
 800313e:	4a06      	ldr	r2, [pc, #24]	; (8003158 <_Z14LineSensorTaskv+0x618>)
 8003140:	4906      	ldr	r1, [pc, #24]	; (800315c <_Z14LineSensorTaskv+0x61c>)
 8003142:	4807      	ldr	r0, [pc, #28]	; (8003160 <_Z14LineSensorTaskv+0x620>)
 8003144:	f7ff fc0e 	bl	8002964 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>
	//ls_data.position_front = -1.0f * ls_data.position_front * 2.5f / 100.0f / denominator_f;
	//ls_data.position_rear = ls_data.position_rear * 2.5f / 100.0f / denominator_r;


#endif
}
 8003148:	bf00      	nop
 800314a:	3750      	adds	r7, #80	; 0x50
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	2000028c 	.word	0x2000028c
 8003154:	20000088 	.word	0x20000088
 8003158:	20000080 	.word	0x20000080
 800315c:	2000007c 	.word	0x2000007c
 8003160:	20000074 	.word	0x20000074

08003164 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f87b 	bl	8003268 <_ZNSaIfEC1Ev>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4618      	mov	r0, r3
 8003176:	f000 f883 	bl	8003280 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <_ZNSaIfED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80031b2:	461a      	mov	r2, r3
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f877 	bl	80032a8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fb4f 	bl	8002860 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80031cc:	b5b0      	push	{r4, r5, r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681c      	ldr	r4, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f875 	bl	80032ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80031e4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80031e6:	461a      	mov	r2, r3
 80031e8:	4629      	mov	r1, r5
 80031ea:	4620      	mov	r0, r4
 80031ec:	f000 f87a 	bl	80032e4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ffd1 	bl	800319a <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bdb0      	pop	{r4, r5, r7, pc}

08003202 <_ZNSt6vectorIfSaIfEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4619      	mov	r1, r3
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f875 	bl	8003300 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	429a      	cmp	r2, r3
 8003232:	d00c      	beq.n	800324e <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	f000 f895 	bl	800336c <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	1d1a      	adds	r2, r3, #4
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	605a      	str	r2, [r3, #4]
      }
 800324c:	e008      	b.n	8003260 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f89e 	bl	8003390 <_ZNSt6vectorIfSaIfEE3endEv>
 8003254:	4603      	mov	r3, r0
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	4619      	mov	r1, r3
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f8aa 	bl	80033b4 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f91b 	bl	80034ac <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	605a      	str	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
	{ }
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
	if (__p)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f8fe 	bl	80034c2 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f904 	bl	8003500 <_ZSt8_DestroyIPfEvT_S1_>
    }
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	109b      	asrs	r3, r3, #2
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00e      	beq.n	800333a <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff ffd3 	bl	80032ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003328:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800332a:	461a      	mov	r2, r3
 800332c:	4621      	mov	r1, r4
 800332e:	6838      	ldr	r0, [r7, #0]
 8003330:	f7ff ffd8 	bl	80032e4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bd90      	pop	{r4, r7, pc}

08003342 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus > 201703L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8003342:	b590      	push	{r4, r7, lr}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800334c:	6838      	ldr	r0, [r7, #0]
 800334e:	f000 f8ed 	bl	800352c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8003352:	4603      	mov	r3, r0
 8003354:	681c      	ldr	r4, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4619      	mov	r1, r3
 800335a:	2004      	movs	r0, #4
 800335c:	f7ff fa74 	bl	8002848 <_ZnwjPv>
 8003360:	4603      	mov	r3, r0
 8003362:	601c      	str	r4, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bd90      	pop	{r4, r7, pc}

0800336c <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f8d7 	bl	800352c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800337e:	4603      	mov	r3, r0
 8003380:	4619      	mov	r1, r3
 8003382:	68b8      	ldr	r0, [r7, #8]
 8003384:	f7ff ffdd 	bl	8003342 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	1d1a      	adds	r2, r3, #4
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	4611      	mov	r1, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 f8cd 	bl	8003542 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80033b4:	b5b0      	push	{r4, r5, r7, lr}
 80033b6:	b08c      	sub	sp, #48	; 0x30
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80033c0:	4a39      	ldr	r2, [pc, #228]	; (80034a8 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xf4>)
 80033c2:	2101      	movs	r1, #1
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f8cc 	bl	8003562 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 80033ca:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f909 	bl	80035f0 <_ZNSt6vectorIfSaIfEE5beginEv>
 80033de:	4603      	mov	r3, r0
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	f107 0214 	add.w	r2, r7, #20
 80033e6:	f107 0308 	add.w	r3, r7, #8
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 f90f 	bl	8003610 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80033f2:	4603      	mov	r3, r0
 80033f4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f91d 	bl	800363a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003400:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8003406:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	18d5      	adds	r5, r2, r3
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f88b 	bl	800352c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8003416:	4603      	mov	r3, r0
 8003418:	461a      	mov	r2, r3
 800341a:	4629      	mov	r1, r5
 800341c:	4620      	mov	r0, r4
 800341e:	f7ff ffa5 	bl	800336c <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003426:	f107 0308 	add.w	r3, r7, #8
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f92d 	bl	800368a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003430:	4603      	mov	r3, r0
 8003432:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff ff49 	bl	80032ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800343c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	4621      	mov	r1, r4
 8003442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003444:	f000 f90d 	bl	8003662 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8003448:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	3304      	adds	r3, #4
 800344e:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003450:	f107 0308 	add.w	r3, r7, #8
 8003454:	4618      	mov	r0, r3
 8003456:	f000 f918 	bl	800368a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800345a:	4603      	mov	r3, r0
 800345c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ff34 	bl	80032ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003466:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800346c:	4620      	mov	r0, r4
 800346e:	f000 f8f8 	bl	8003662 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8003472:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8003474:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8003480:	461a      	mov	r2, r3
 8003482:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003484:	f7ff ff10 	bl	80032a8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	441a      	add	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	609a      	str	r2, [r3, #8]
    }
 80034a0:	bf00      	nop
 80034a2:	3730      	adds	r7, #48	; 0x30
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bdb0      	pop	{r4, r5, r7, pc}
 80034a8:	08023de8 	.word	0x08023de8

080034ac <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b088      	sub	sp, #32
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 80034da:	f7ff f9ad 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x2a>
	  {
	    ::operator delete(__p);
 80034e4:	69b8      	ldr	r0, [r7, #24]
 80034e6:	f01c ff49 	bl	802037c <_ZdlPv>
	    return;
 80034ea:	e005      	b.n	80034f8 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	69b9      	ldr	r1, [r7, #24]
 80034f0:	69f8      	ldr	r0, [r7, #28]
 80034f2:	f000 f969 	bl	80037c8 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
      { __a.deallocate(__p, __n); }
 80034f6:	bf00      	nop
 80034f8:	bf00      	nop
 80034fa:	3720      	adds	r7, #32
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <_ZSt8_DestroyIPfEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 800350a:	f7ff f995 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d004      	beq.n	800351e <_ZSt8_DestroyIPfEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8003514:	6839      	ldr	r1, [r7, #0]
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f8c2 	bl	80036a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>
 800351c:	e003      	b.n	8003526 <_ZSt8_DestroyIPfEvT_S1_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800351e:	6839      	ldr	r1, [r7, #0]
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f8d5 	bl	80036d0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4618      	mov	r0, r3
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003562:	b590      	push	{r4, r7, lr}
 8003564:	b087      	sub	sp, #28
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f8b9 	bl	80036e6 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003574:	4604      	mov	r4, r0
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f8c6 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800357c:	4603      	mov	r3, r0
 800357e:	1ae2      	subs	r2, r4, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	429a      	cmp	r2, r3
 8003584:	bf34      	ite	cc
 8003586:	2301      	movcc	r3, #1
 8003588:	2300      	movcs	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f01c ff0e 	bl	80203b2 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f8b6 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800359c:	4604      	mov	r4, r0
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f8b2 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80035a4:	4603      	mov	r3, r0
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	f107 0208 	add.w	r2, r7, #8
 80035ac:	f107 0310 	add.w	r3, r7, #16
 80035b0:	4611      	mov	r1, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f8b8 	bl	8003728 <_ZSt3maxIjERKT_S2_S2_>
 80035b8:	4603      	mov	r3, r0
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4423      	add	r3, r4
 80035be:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f8a1 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80035c6:	4602      	mov	r2, r0
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d306      	bcc.n	80035dc <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f889 	bl	80036e6 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 80035d4:	4602      	mov	r2, r0
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	4293      	cmp	r3, r2
 80035da:	d904      	bls.n	80035e6 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f882 	bl	80036e6 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 80035e2:	4603      	mov	r3, r0
 80035e4:	e000      	b.n	80035e8 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 80035e6:	697b      	ldr	r3, [r7, #20]
      }
 80035e8:	4618      	mov	r0, r3
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd90      	pop	{r4, r7, pc}

080035f0 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	f107 030c 	add.w	r3, r7, #12
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff9e 	bl	8003542 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f835 	bl	800368a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003620:	4603      	mov	r3, r0
 8003622:	681c      	ldr	r4, [r3, #0]
 8003624:	6838      	ldr	r0, [r7, #0]
 8003626:	f000 f830 	bl	800368a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800362a:	4603      	mov	r3, r0
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	1ae3      	subs	r3, r4, r3
 8003630:	109b      	asrs	r3, r3, #2
 8003632:	4618      	mov	r0, r3
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bd90      	pop	{r4, r7, pc}

0800363a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d006      	beq.n	8003658 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6839      	ldr	r1, [r7, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f000 f87e 	bl	8003750 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8003654:	4603      	mov	r3, r0
 8003656:	e000      	b.n	800365a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8003658:	2300      	movs	r3, #0
      }
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003662:	b590      	push	{r4, r7, lr}
 8003664:	b087      	sub	sp, #28
 8003666:	af02      	add	r7, sp, #8
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
 800366e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8003670:	f88d 4000 	strb.w	r4, [sp]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f888 	bl	8003790 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>
 8003680:	4603      	mov	r3, r0
      }
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	bd90      	pop	{r4, r7, pc}

0800368a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d00a      	beq.n	80036c8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f897 	bl	80037e6 <_ZSt11__addressofIfEPT_RS0_>
 80036b8:	4603      	mov	r3, r0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f89e 	bl	80037fc <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3304      	adds	r3, #4
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	e7f0      	b.n	80036aa <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0xa>
	}
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 f8b4 	bl	800385e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80036f6:	4603      	mov	r3, r0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 f896 	bl	800382a <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 80036fe:	4603      	mov	r3, r0
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	109b      	asrs	r3, r3, #2
 800371c:	4618      	mov	r0, r3
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d201      	bcs.n	8003742 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	e000      	b.n	8003744 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003742:	687b      	ldr	r3, [r7, #4]
    }
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8003762:	f7ff f869 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d006      	beq.n	800377a <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4618      	mov	r0, r3
 8003772:	f01c fe07 	bl	8020384 <_Znwj>
 8003776:	4603      	mov	r3, r0
 8003778:	e006      	b.n	8003788 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800377a:	2200      	movs	r2, #0
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f8a9 	bl	80038d6 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8003784:	4603      	mov	r3, r0
 8003786:	bf00      	nop
      { return __a.allocate(__n); }
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f865 	bl	8003874 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 80037aa:	4603      	mov	r3, r0
      }
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <_ZSt10destroy_atIfEvPT_>:
    destroy_at(_Tp* __location)
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
    }
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4619      	mov	r1, r3
 80037da:	68b8      	ldr	r0, [r7, #8]
 80037dc:	f01c fdd0 	bl	8020380 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ffd5 	bl	80037b4 <_ZSt10destroy_atIfEvPT_>
    }
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800381a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8003832:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8003836:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff ffea 	bl	8003812 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 800383e:	4603      	mov	r3, r0
 8003840:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003842:	f107 0208 	add.w	r2, r7, #8
 8003846:	f107 030c 	add.w	r3, r7, #12
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f000 f82e 	bl	80038ae <_ZSt3minIjERKT_S2_S2_>
 8003852:	4603      	mov	r3, r0
 8003854:	681b      	ldr	r3, [r3, #0]
      }
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8003874:	b5b0      	push	{r4, r5, r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f846 	bl	8003914 <_ZSt12__niter_baseIPfET_S1_>
 8003888:	4604      	mov	r4, r0
 800388a:	68b8      	ldr	r0, [r7, #8]
 800388c:	f000 f842 	bl	8003914 <_ZSt12__niter_baseIPfET_S1_>
 8003890:	4605      	mov	r5, r0
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f83e 	bl	8003914 <_ZSt12__niter_baseIPfET_S1_>
 8003898:	4602      	mov	r2, r0
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	4629      	mov	r1, r5
 800389e:	4620      	mov	r0, r4
 80038a0:	f000 f843 	bl	800392a <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 80038a4:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bdb0      	pop	{r4, r5, r7, pc}

080038ae <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d201      	bcs.n	80038c8 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	e000      	b.n	80038ca <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80038c8:	687b      	ldr	r3, [r7, #4]
    }
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f83f 	bl	8003966 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4293      	cmp	r3, r2
 80038ee:	bf8c      	ite	hi
 80038f0:	2301      	movhi	r3, #1
 80038f2:	2300      	movls	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80038fa:	f01c fd57 	bl	80203ac <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4618      	mov	r0, r3
 8003904:	f01c fd3e 	bl	8020384 <_Znwj>
 8003908:	4603      	mov	r3, r0
 800390a:	bf00      	nop
      }
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <_ZSt12__niter_baseIPfET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	109b      	asrs	r3, r3, #2
 8003940:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	dd06      	ble.n	8003956 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	461a      	mov	r2, r3
 800394e:	68f9      	ldr	r1, [r7, #12]
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f01e fce8 	bl	8022326 <memmove>
      return __result + __count;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4413      	add	r3, r2
    }
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800396e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <_ZN16LineSensorData_sD1Ev>:
	float position_front;
	float position_rear;

	std::vector<float> front;
	std::vector<float> rear;
}LineSensorData_s;
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	33d4      	adds	r3, #212	; 0xd4
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fc1e 	bl	80031cc <_ZNSt6vectorIfSaIfEED1Ev>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	33c8      	adds	r3, #200	; 0xc8
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fc19 	bl	80031cc <_ZNSt6vectorIfSaIfEED1Ev>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <_Z41__static_initialization_and_destruction_0ii>:
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d116      	bne.n	80039e2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d111      	bne.n	80039e2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
LineSensorData_s ls_data = {0u};
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80039c0:	33c8      	adds	r3, #200	; 0xc8
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	605a      	str	r2, [r3, #4]
 80039c8:	609a      	str	r2, [r3, #8]
 80039ca:	480e      	ldr	r0, [pc, #56]	; (8003a04 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80039cc:	f7fe ff61 	bl	8002892 <_ZNSt6vectorIfSaIfEEC1Ev>
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80039d2:	33d4      	adds	r3, #212	; 0xd4
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	480a      	ldr	r0, [pc, #40]	; (8003a08 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80039de:	f7fe ff58 	bl	8002892 <_ZNSt6vectorIfSaIfEEC1Ev>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <_Z41__static_initialization_and_destruction_0ii+0x54>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d102      	bne.n	80039f8 <_Z41__static_initialization_and_destruction_0ii+0x54>
 80039f2:	4803      	ldr	r0, [pc, #12]	; (8003a00 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80039f4:	f7ff ffc3 	bl	800397e <_ZN16LineSensorData_sD1Ev>
}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	200001b8 	.word	0x200001b8
 8003a04:	20000280 	.word	0x20000280
 8003a08:	2000028c 	.word	0x2000028c

08003a0c <_GLOBAL__sub_I_ls_data>:
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a14:	2001      	movs	r0, #1
 8003a16:	f7ff ffc5 	bl	80039a4 <_Z41__static_initialization_and_destruction_0ii>
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <_GLOBAL__sub_D_ls_data>:
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a24:	2000      	movs	r0, #0
 8003a26:	f7ff ffbd 	bl	80039a4 <_Z41__static_initialization_and_destruction_0ii>
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a36:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a3a:	eef0 7ae7 	vabs.f32	s15, s15
 8003a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a56:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a5e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a66:	bf6c      	ite	vs
 8003a68:	2301      	movvs	r3, #1
 8003a6a:	2300      	movvc	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bf14      	ite	ne
 8003a72:	2301      	movne	r3, #1
 8003a74:	2300      	moveq	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <_ZN3PIDC1Efffffffff>:
#include <algorithm>

class PID
{
public:
    PID(float kp, float ki, float kd, float tau, float T, float minOutput, float maxOutput, float deadband, float derivativeFilterAlpha)
 8003a84:	b480      	push	{r7}
 8003a86:	b08b      	sub	sp, #44	; 0x2c
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6278      	str	r0, [r7, #36]	; 0x24
 8003a8c:	ed87 0a08 	vstr	s0, [r7, #32]
 8003a90:	edc7 0a07 	vstr	s1, [r7, #28]
 8003a94:	ed87 1a06 	vstr	s2, [r7, #24]
 8003a98:	edc7 1a05 	vstr	s3, [r7, #20]
 8003a9c:	ed87 2a04 	vstr	s4, [r7, #16]
 8003aa0:	edc7 2a03 	vstr	s5, [r7, #12]
 8003aa4:	ed87 3a02 	vstr	s6, [r7, #8]
 8003aa8:	edc7 3a01 	vstr	s7, [r7, #4]
 8003aac:	ed87 4a00 	vstr	s8, [r7]
        : kp_(kp), ki_(ki), kd_(kd), tau_(tau), T_(T), minOutput_(minOutput), maxOutput_(maxOutput), deadband_(deadband), derivativeFilterAlpha_(derivativeFilterAlpha)
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	6a3a      	ldr	r2, [r7, #32]
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	605a      	str	r2, [r3, #4]
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	609a      	str	r2, [r3, #8]
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	60da      	str	r2, [r3, #12]
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	611a      	str	r2, [r3, #16]
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	615a      	str	r2, [r3, #20]
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	619a      	str	r2, [r3, #24]
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	61da      	str	r2, [r3, #28]
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	621a      	str	r2, [r3, #32]
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	629a      	str	r2, [r3, #40]	; 0x28
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	4618      	mov	r0, r3
 8003b02:	372c      	adds	r7, #44	; 0x2c
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <_ZN3PIDD1Ev>:

    ~PID() {}
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <_ZN3PID6updateEfff>:
    	kp_                    = kp;
		ki_                    = ki;
		kd_                    = kd;
    }

    float update(float setpoint, float processVariable, float dt)
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08e      	sub	sp, #56	; 0x38
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b30:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b34:	ed87 1a00 	vstr	s2, [r7]
    {
        // Small value to avoid division by zero
        const float epsilon = std::numeric_limits<float>::epsilon();
 8003b38:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
 8003b3c:	633b      	str	r3, [r7, #48]	; 0x30

        // Check if the time step is very close to zero, return zero output to avoid numerical issues
        if (std::abs(dt) < epsilon) { return 0.0f; }
 8003b3e:	ed97 0a00 	vldr	s0, [r7]
 8003b42:	f7ff ff73 	bl	8003a2c <_ZSt3absf>
 8003b46:	eef0 7a40 	vmov.f32	s15, s0
 8003b4a:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8003ddc <_ZN3PID6updateEfff+0x2b8>
 8003b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b56:	bf4c      	ite	mi
 8003b58:	2301      	movmi	r3, #1
 8003b5a:	2300      	movpl	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <_ZN3PID6updateEfff+0x44>
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	e132      	b.n	8003dce <_ZN3PID6updateEfff+0x2aa>

        // Calculate the current error between the setpoint and the process variable
        float error = setpoint - processVariable;
 8003b68:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b74:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        // Check if a zero-crossing has occurred (change in sign of error)
        bool zeroCrossed = (prevError_ * error) < 0.0f;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003b7e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b8e:	bf4c      	ite	mi
 8003b90:	2301      	movmi	r3, #1
 8003b92:	2300      	movpl	r3, #0
 8003b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        // Update the integral term if no zero-crossing has occurred
        if (!zeroCrossed)
 8003b98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b9c:	f083 0301 	eor.w	r3, r3, #1
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d062      	beq.n	8003c6c <_ZN3PID6updateEfff+0x148>
        {
            // Calculate the integral term without considering saturation
            float unsaturatedIntegral = integral_;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	637b      	str	r3, [r7, #52]	; 0x34

            // Integrate positive error if within bounds
            if (error > 0.0f && unsaturatedIntegral < maxOutput_) { unsaturatedIntegral += (error * dt); }
 8003bac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003bb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb8:	dd16      	ble.n	8003be8 <_ZN3PID6updateEfff+0xc4>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	edd3 7a06 	vldr	s15, [r3, #24]
 8003bc0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003bc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bcc:	d50c      	bpl.n	8003be8 <_ZN3PID6updateEfff+0xc4>
 8003bce:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003bd2:	edd7 7a00 	vldr	s15, [r7]
 8003bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bda:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003be2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8003be6:	e01c      	b.n	8003c22 <_ZN3PID6updateEfff+0xfe>
            // Integrate negative error if within bounds
            else if (error < 0.0f && unsaturatedIntegral > minOutput_) { unsaturatedIntegral += (error * dt); }
 8003be8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003bec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf4:	d515      	bpl.n	8003c22 <_ZN3PID6updateEfff+0xfe>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	edd3 7a05 	vldr	s15, [r3, #20]
 8003bfc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003c00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c08:	dd0b      	ble.n	8003c22 <_ZN3PID6updateEfff+0xfe>
 8003c0a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003c0e:	edd7 7a00 	vldr	s15, [r7]
 8003c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c16:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c1e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

            // Handle NaN case: Reset unsaturated integral term to zero
            if (std::isnan(unsaturatedIntegral)) { unsaturatedIntegral = 0.0f; }
 8003c22:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003c26:	f7ff ff11 	bl	8003a4c <_ZSt5isnanf>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <_ZN3PID6updateEfff+0x112>
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	637b      	str	r3, [r7, #52]	; 0x34

            // Calculate the adjustment needed due to saturation
            float deltaIntegral = unsaturatedIntegral - integral_;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003c3c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c44:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

            // Back-calculation: Adjust the integral term based on the impact of saturation
            integral_ += (error * dt) - deltaIntegral;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003c4e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003c52:	edd7 7a00 	vldr	s15, [r7]
 8003c56:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c5e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        {
            // Zero-crossing deadband: Do not update the integral term
        }

        // Anti-windup: Limit the integral term to the specified range
        integral_ = std::clamp(integral_, minOutput_, maxOutput_);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f103 0114 	add.w	r1, r3, #20
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3318      	adds	r3, #24
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f000 f9b5 	bl	8003fec <_ZSt5clampIfERKT_S2_S2_S2_>
 8003c82:	4603      	mov	r3, r0
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	629a      	str	r2, [r3, #40]	; 0x28

        // Deadband: Scale the integral term based on the proximity to the deadband
        float deadbandFactor = 1.0f - std::min(1.0f, std::abs(error) / (deadband_ + epsilon));
 8003c8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003c94:	f7ff feca 	bl	8003a2c <_ZSt3absf>
 8003c98:	eef0 6a40 	vmov.f32	s13, s0
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003ca2:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8003ddc <_ZN3PID6updateEfff+0x2b8>
 8003ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cae:	edc7 7a07 	vstr	s15, [r7, #28]
 8003cb2:	f107 021c 	add.w	r2, r7, #28
 8003cb6:	f107 0318 	add.w	r3, r7, #24
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 f9bc 	bl	800403a <_ZSt3minIfERKT_S2_S2_>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	edd3 7a00 	vldr	s15, [r3]
 8003cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cd0:	edc7 7a08 	vstr	s15, [r7, #32]
        integral_ *= deadbandFactor;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003cda:	edd7 7a08 	vldr	s15, [r7, #32]
 8003cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

        // Calculate the derivative term with low-pass filtering
        derivative_ = (1.0f - derivativeFilterAlpha_) * derivative_ + derivativeFilterAlpha_ * (error - prevError_) / dt;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	edd3 7a08 	vldr	s15, [r3, #32]
 8003cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	edd3 6a08 	vldr	s13, [r3, #32]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003d0c:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8003d10:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003d14:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003d18:	edd7 6a00 	vldr	s13, [r7]
 8003d1c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

        // Calculate the PID controller output using proportional, integral, and derivative terms
        float output = kp_ * (1 + dt / (tau_ + T_ + epsilon)) * error + ki_ * (dt / (T_ + epsilon)) * integral_ - kd_ * derivative_;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	ed93 7a00 	vldr	s14, [r3]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	edd3 6a03 	vldr	s13, [r3, #12]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d40:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003ddc <_ZN3PID6updateEfff+0x2b8>
 8003d44:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8003d48:	ed97 6a00 	vldr	s12, [r7]
 8003d4c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003d50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d5c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	edd3 6a01 	vldr	s13, [r3, #4]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d70:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8003ddc <_ZN3PID6updateEfff+0x2b8>
 8003d74:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003d78:	edd7 5a00 	vldr	s11, [r7]
 8003d7c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003d80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	edd3 6a02 	vldr	s13, [r3, #8]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003da6:	edc7 7a05 	vstr	s15, [r7, #20]

        // Output clamping: Limit the output within the specified range
        output = std::clamp(output, minOutput_, maxOutput_);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f103 0114 	add.w	r1, r3, #20
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f103 0218 	add.w	r2, r3, #24
 8003db6:	f107 0314 	add.w	r3, r7, #20
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 f916 	bl	8003fec <_ZSt5clampIfERKT_S2_S2_S2_>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	617b      	str	r3, [r7, #20]

        // Update the previous error for the next iteration
        prevError_ = error;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dca:	625a      	str	r2, [r3, #36]	; 0x24

        // Return the calculated PID controller output
        return output;
 8003dcc:	697b      	ldr	r3, [r7, #20]
    }
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd6:	3738      	adds	r7, #56	; 0x38
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	34000000 	.word	0x34000000

08003de0 <_Z16MotorControlTaskv>:
float pi_integral_error = 0.0f;

PID motorcontrol_pid{SPEED_CONTROLER_KP,SPEED_CONTROLLER_KI, SPEED_CONTROLLER_KD, SPEED_CONTROLLER_TAU, SPEED_CONTROLLER_T, SPEED_CONTROLLER_MIN, SPEED_CONTROLLER_MAX, SPEED_CONTROLLER_DEADBAND,SPEED_CONTROLLER_DERIVATIVE_FILTER_ALPHA};

void MotorControlTask()
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 8003de4:	4b71      	ldr	r3, [pc, #452]	; (8003fac <_Z16MotorControlTaskv+0x1cc>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003dec:	d90a      	bls.n	8003e04 <_Z16MotorControlTaskv+0x24>
 8003dee:	4b6f      	ldr	r3, [pc, #444]	; (8003fac <_Z16MotorControlTaskv+0x1cc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8003df6:	d205      	bcs.n	8003e04 <_Z16MotorControlTaskv+0x24>
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_SET);
 8003df8:	2201      	movs	r2, #1
 8003dfa:	2108      	movs	r1, #8
 8003dfc:	486c      	ldr	r0, [pc, #432]	; (8003fb0 <_Z16MotorControlTaskv+0x1d0>)
 8003dfe:	f011 fe25 	bl	8015a4c <HAL_GPIO_WritePin>
 8003e02:	e00c      	b.n	8003e1e <_Z16MotorControlTaskv+0x3e>
	}
	else
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_RESET);
 8003e04:	2200      	movs	r2, #0
 8003e06:	2108      	movs	r1, #8
 8003e08:	4869      	ldr	r0, [pc, #420]	; (8003fb0 <_Z16MotorControlTaskv+0x1d0>)
 8003e0a:	f011 fe1f 	bl	8015a4c <HAL_GPIO_WritePin>
		motorcontrol.target_velocity = 0.0f;
 8003e0e:	4b69      	ldr	r3, [pc, #420]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	60da      	str	r2, [r3, #12]
		pi_integral_error = 0.0f;
 8003e16:	4b68      	ldr	r3, [pc, #416]	; (8003fb8 <_Z16MotorControlTaskv+0x1d8>)
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
	}
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 8003e1e:	4b67      	ldr	r3, [pc, #412]	; (8003fbc <_Z16MotorControlTaskv+0x1dc>)
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e2a:	eddf 6a65 	vldr	s13, [pc, #404]	; 8003fc0 <_Z16MotorControlTaskv+0x1e0>
 8003e2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e32:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003fc4 <_Z16MotorControlTaskv+0x1e4>
 8003e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e3a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e42:	4b5c      	ldr	r3, [pc, #368]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003e44:	edc3 7a00 	vstr	s15, [r3]
	motorcontrol.motor_current = (((float)((adc_values.motor_curr_raw)) / 4096.0f) * 3.3f - MOTOR_CURR_NULL) / MOTOR_CURR_SENSITIVITY;
 8003e48:	4b5c      	ldr	r3, [pc, #368]	; (8003fbc <_Z16MotorControlTaskv+0x1dc>)
 8003e4a:	885b      	ldrh	r3, [r3, #2]
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e54:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8003fc0 <_Z16MotorControlTaskv+0x1e0>
 8003e58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e5c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003fc4 <_Z16MotorControlTaskv+0x1e4>
 8003e60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e64:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003fc8 <_Z16MotorControlTaskv+0x1e8>
 8003e68:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003e6c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003fcc <_Z16MotorControlTaskv+0x1ec>
 8003e70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e74:	4b4f      	ldr	r3, [pc, #316]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003e76:	edc3 7a01 	vstr	s15, [r3, #4]
	float pi_proportional_error = pi_error * SPEED_CONTROLER_KP;
	pi_integral_error += pi_error * SPEED_CONTROLLER_KI / MOTOR_CONTROL_TASK_FREQ;
	motorcontrol.duty_cycle = pi_integral_error + pi_proportional_error;
	*/

	motorcontrol.duty_cycle = motorcontrol_pid.update(motorcontrol.target_velocity, motorcontrol.actual_velocity, 0.005f);
 8003e7a:	4b4e      	ldr	r3, [pc, #312]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003e7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e80:	4b4c      	ldr	r3, [pc, #304]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003e82:	ed93 7a02 	vldr	s14, [r3, #8]
 8003e86:	ed9f 1a52 	vldr	s2, [pc, #328]	; 8003fd0 <_Z16MotorControlTaskv+0x1f0>
 8003e8a:	eef0 0a47 	vmov.f32	s1, s14
 8003e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e92:	4850      	ldr	r0, [pc, #320]	; (8003fd4 <_Z16MotorControlTaskv+0x1f4>)
 8003e94:	f7ff fe46 	bl	8003b24 <_ZN3PID6updateEfff>
 8003e98:	eef0 7a40 	vmov.f32	s15, s0
 8003e9c:	4b45      	ldr	r3, [pc, #276]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003e9e:	edc3 7a04 	vstr	s15, [r3, #16]
	motorcontrol.duty_cycle += 0.5f;
 8003ea2:	4b44      	ldr	r3, [pc, #272]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003ea4:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ea8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003eb0:	4b40      	ldr	r3, [pc, #256]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003eb2:	edc3 7a04 	vstr	s15, [r3, #16]
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle > 0.95f) ? 0.95f : motorcontrol.duty_cycle;
 8003eb6:	4b3f      	ldr	r3, [pc, #252]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003eb8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ebc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003fd8 <_Z16MotorControlTaskv+0x1f8>
 8003ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec8:	dd01      	ble.n	8003ece <_Z16MotorControlTaskv+0xee>
 8003eca:	4b44      	ldr	r3, [pc, #272]	; (8003fdc <_Z16MotorControlTaskv+0x1fc>)
 8003ecc:	e001      	b.n	8003ed2 <_Z16MotorControlTaskv+0xf2>
 8003ece:	4b39      	ldr	r3, [pc, #228]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	4a38      	ldr	r2, [pc, #224]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003ed4:	6113      	str	r3, [r2, #16]
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle < 0.5f) ? 0.05f : motorcontrol.duty_cycle;
 8003ed6:	4b37      	ldr	r3, [pc, #220]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003ed8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003edc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee8:	d501      	bpl.n	8003eee <_Z16MotorControlTaskv+0x10e>
 8003eea:	4b3d      	ldr	r3, [pc, #244]	; (8003fe0 <_Z16MotorControlTaskv+0x200>)
 8003eec:	e001      	b.n	8003ef2 <_Z16MotorControlTaskv+0x112>
 8003eee:	4b31      	ldr	r3, [pc, #196]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	4a30      	ldr	r2, [pc, #192]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003ef4:	6113      	str	r3, [r2, #16]


	if((motorcontrol.target_velocity == 0.0f) && (motorcontrol.actual_velocity < 1.0f) && (motorcontrol.actual_velocity >= -1.0f))
 8003ef6:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003ef8:	edd3 7a03 	vldr	s15, [r3, #12]
 8003efc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f04:	d117      	bne.n	8003f36 <_Z16MotorControlTaskv+0x156>
 8003f06:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003f08:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f18:	d50d      	bpl.n	8003f36 <_Z16MotorControlTaskv+0x156>
 8003f1a:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003f1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f20:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f2c:	db03      	blt.n	8003f36 <_Z16MotorControlTaskv+0x156>
	{
		motorcontrol.duty_cycle = 0.5f;
 8003f2e:	4b21      	ldr	r3, [pc, #132]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003f30:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003f34:	611a      	str	r2, [r3, #16]
	}

	if(motorcontrol.target_velocity >= motorcontrol.actual_velocity && motorcontrol.duty_cycle < 0.5f)
 8003f36:	4b1f      	ldr	r3, [pc, #124]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003f38:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f3c:	4b1d      	ldr	r3, [pc, #116]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003f3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4a:	db0d      	blt.n	8003f68 <_Z16MotorControlTaskv+0x188>
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003f4e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003f52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5e:	d503      	bpl.n	8003f68 <_Z16MotorControlTaskv+0x188>
	{
		motorcontrol.duty_cycle = 0.5f;
 8003f60:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003f62:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003f66:	611a      	str	r2, [r3, #16]

	}

	//float duty_cycle = 0.6f;
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, motorcontrol.duty_cycle * PWM_COUNTER_PREIOD);
 8003f68:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003f6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003f6e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003fe4 <_Z16MotorControlTaskv+0x204>
 8003f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f76:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <_Z16MotorControlTaskv+0x208>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f7e:	ee17 2a90 	vmov	r2, s15
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (motorcontrol.duty_cycle * PWM_COUNTER_PREIOD));
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <_Z16MotorControlTaskv+0x1d4>)
 8003f86:	edd3 7a04 	vldr	s15, [r3, #16]
 8003f8a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003fe4 <_Z16MotorControlTaskv+0x204>
 8003f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f92:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003fe4 <_Z16MotorControlTaskv+0x204>
 8003f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f9a:	4b13      	ldr	r3, [pc, #76]	; (8003fe8 <_Z16MotorControlTaskv+0x208>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fa2:	ee17 2a90 	vmov	r2, s15
 8003fa6:	635a      	str	r2, [r3, #52]	; 0x34

}
 8003fa8:	bf00      	nop
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	200002f8 	.word	0x200002f8
 8003fb0:	42021400 	.word	0x42021400
 8003fb4:	20000298 	.word	0x20000298
 8003fb8:	200002ac 	.word	0x200002ac
 8003fbc:	20000144 	.word	0x20000144
 8003fc0:	45800000 	.word	0x45800000
 8003fc4:	40533333 	.word	0x40533333
 8003fc8:	3fd47ae1 	.word	0x3fd47ae1
 8003fcc:	3c0ce704 	.word	0x3c0ce704
 8003fd0:	3ba3d70a 	.word	0x3ba3d70a
 8003fd4:	200002b0 	.word	0x200002b0
 8003fd8:	3f733333 	.word	0x3f733333
 8003fdc:	3f733333 	.word	0x3f733333
 8003fe0:	3d4ccccd 	.word	0x3d4ccccd
 8003fe4:	44e54000 	.word	0x44e54000
 8003fe8:	20000b9c 	.word	0x20000b9c

08003fec <_ZSt5clampIfERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	ed93 7a00 	vldr	s14, [r3]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	edd3 7a00 	vldr	s15, [r3]
 8004004:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400c:	d501      	bpl.n	8004012 <_ZSt5clampIfERKT_S2_S2_S2_+0x26>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	e00d      	b.n	800402e <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	ed93 7a00 	vldr	s14, [r3]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	edd3 7a00 	vldr	s15, [r3]
 800401e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004026:	d501      	bpl.n	800402c <_ZSt5clampIfERKT_S2_S2_S2_+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	e000      	b.n	800402e <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 800402c:	68fb      	ldr	r3, [r7, #12]
    }
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	ed93 7a00 	vldr	s14, [r3]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	edd3 7a00 	vldr	s15, [r3]
 8004050:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004058:	d501      	bpl.n	800405e <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	e000      	b.n	8004060 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800405e:	687b      	ldr	r3, [r7, #4]
    }
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <_Z41__static_initialization_and_destruction_0ii>:
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d119      	bne.n	80040b0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004082:	4293      	cmp	r3, r2
 8004084:	d114      	bne.n	80040b0 <_Z41__static_initialization_and_destruction_0ii+0x44>
PID motorcontrol_pid{SPEED_CONTROLER_KP,SPEED_CONTROLLER_KI, SPEED_CONTROLLER_KD, SPEED_CONTROLLER_TAU, SPEED_CONTROLLER_T, SPEED_CONTROLLER_MIN, SPEED_CONTROLLER_MAX, SPEED_CONTROLLER_DEADBAND,SPEED_CONTROLLER_DERIVATIVE_FILTER_ALPHA};
 8004086:	ed9f 4a12 	vldr	s8, [pc, #72]	; 80040d0 <_Z41__static_initialization_and_destruction_0ii+0x64>
 800408a:	eddf 3a11 	vldr	s7, [pc, #68]	; 80040d0 <_Z41__static_initialization_and_destruction_0ii+0x64>
 800408e:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 8004092:	eefe 2a00 	vmov.f32	s5, #224	; 0xbf000000 -0.5
 8004096:	ed9f 2a0f 	vldr	s4, [pc, #60]	; 80040d4 <_Z41__static_initialization_and_destruction_0ii+0x68>
 800409a:	eddf 1a0f 	vldr	s3, [pc, #60]	; 80040d8 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 800409e:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80040d0 <_Z41__static_initialization_and_destruction_0ii+0x64>
 80040a2:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80040dc <_Z41__static_initialization_and_destruction_0ii+0x70>
 80040a6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80040e0 <_Z41__static_initialization_and_destruction_0ii+0x74>
 80040aa:	480e      	ldr	r0, [pc, #56]	; (80040e4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80040ac:	f7ff fcea 	bl	8003a84 <_ZN3PIDC1Efffffffff>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d107      	bne.n	80040c6 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040bc:	4293      	cmp	r3, r2
 80040be:	d102      	bne.n	80040c6 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80040c0:	4808      	ldr	r0, [pc, #32]	; (80040e4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80040c2:	f7ff fd23 	bl	8003b0c <_ZN3PIDD1Ev>
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	00000000 	.word	0x00000000
 80040d4:	3ba3d70a 	.word	0x3ba3d70a
 80040d8:	3d4ccccd 	.word	0x3d4ccccd
 80040dc:	3fb5c28f 	.word	0x3fb5c28f
 80040e0:	3e2d0e56 	.word	0x3e2d0e56
 80040e4:	200002b0 	.word	0x200002b0

080040e8 <_GLOBAL__sub_I_motorcontrol>:
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80040f0:	2001      	movs	r0, #1
 80040f2:	f7ff ffbb 	bl	800406c <_Z41__static_initialization_and_destruction_0ii>
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <_GLOBAL__sub_D_motorcontrol>:
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004100:	2000      	movs	r0, #0
 8004102:	f7ff ffb3 	bl	800406c <_Z41__static_initialization_and_destruction_0ii>
 8004106:	bd80      	pop	{r7, pc}

08004108 <_Z10Radio_Initv>:
bool flood_active = false;
uint8_t flood_counter = 0;
char pirate_from, pirate_to, pirate_next;
int pirate_percentage = 0;
void Radio_Init()
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT (&huart4, radio_rxBuffer, 12);
 800410c:	220c      	movs	r2, #12
 800410e:	4903      	ldr	r1, [pc, #12]	; (800411c <_Z10Radio_Initv+0x14>)
 8004110:	4803      	ldr	r0, [pc, #12]	; (8004120 <_Z10Radio_Initv+0x18>)
 8004112:	f017 fa83 	bl	801b61c <HAL_UART_Receive_IT>

}
 8004116:	bf00      	nop
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	200002e0 	.word	0x200002e0
 8004120:	20000888 	.word	0x20000888

08004124 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af02      	add	r7, sp, #8
 800412a:	6078      	str	r0, [r7, #4]
	uint8_t i, length;
    // Check to see where is the termination character to determine what type of message is received
    for(i = 0; i < 12; ++i)
 800412c:	2300      	movs	r3, #0
 800412e:	73fb      	strb	r3, [r7, #15]
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	2b0b      	cmp	r3, #11
 8004134:	d80a      	bhi.n	800414c <HAL_UART_RxCpltCallback+0x28>
    {
    	if(radio_rxBuffer[i] == '\r')
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	4a1f      	ldr	r2, [pc, #124]	; (80041b8 <HAL_UART_RxCpltCallback+0x94>)
 800413a:	5cd3      	ldrb	r3, [r2, r3]
 800413c:	2b0d      	cmp	r3, #13
 800413e:	d101      	bne.n	8004144 <HAL_UART_RxCpltCallback+0x20>
    	{
    		length = i;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < 12; ++i)
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	3301      	adds	r3, #1
 8004148:	73fb      	strb	r3, [r7, #15]
 800414a:	e7f1      	b.n	8004130 <HAL_UART_RxCpltCallback+0xc>
    	}
    }
    // Labirinth countdown message received
    if(length == 1)
 800414c:	7bbb      	ldrb	r3, [r7, #14]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d103      	bne.n	800415a <HAL_UART_RxCpltCallback+0x36>
    {
    	countdown_value = radio_rxBuffer[0];
 8004152:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <HAL_UART_RxCpltCallback+0x94>)
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	4b19      	ldr	r3, [pc, #100]	; (80041bc <HAL_UART_RxCpltCallback+0x98>)
 8004158:	701a      	strb	r2, [r3, #0]
    }
    if(length == 6)
 800415a:	7bbb      	ldrb	r3, [r7, #14]
 800415c:	2b06      	cmp	r3, #6
 800415e:	d115      	bne.n	800418c <HAL_UART_RxCpltCallback+0x68>
    {
    	//FLOOD message received
    	if(!strcmp("FLOOD!\r", reinterpret_cast<const char*>(radio_rxBuffer)))
 8004160:	4915      	ldr	r1, [pc, #84]	; (80041b8 <HAL_UART_RxCpltCallback+0x94>)
 8004162:	4817      	ldr	r0, [pc, #92]	; (80041c0 <HAL_UART_RxCpltCallback+0x9c>)
 8004164:	f7fc f86c 	bl	8000240 <strcmp>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d103      	bne.n	8004176 <HAL_UART_RxCpltCallback+0x52>
    	{
    		flood_active = true;
 800416e:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <HAL_UART_RxCpltCallback+0xa0>)
 8004170:	2201      	movs	r2, #1
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e010      	b.n	8004198 <HAL_UART_RxCpltCallback+0x74>
    	}
    	else
    	{
    		sscanf(reinterpret_cast<const char*>(radio_rxBuffer), "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 8004176:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <HAL_UART_RxCpltCallback+0xa4>)
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	4b14      	ldr	r3, [pc, #80]	; (80041cc <HAL_UART_RxCpltCallback+0xa8>)
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <HAL_UART_RxCpltCallback+0xac>)
 8004180:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <HAL_UART_RxCpltCallback+0xb0>)
 8004182:	4915      	ldr	r1, [pc, #84]	; (80041d8 <HAL_UART_RxCpltCallback+0xb4>)
 8004184:	480c      	ldr	r0, [pc, #48]	; (80041b8 <HAL_UART_RxCpltCallback+0x94>)
 8004186:	f01e fa63 	bl	8022650 <siscanf>
 800418a:	e005      	b.n	8004198 <HAL_UART_RxCpltCallback+0x74>
    	}
    }

    else
    {
    	flood_counter++;
 800418c:	4b13      	ldr	r3, [pc, #76]	; (80041dc <HAL_UART_RxCpltCallback+0xb8>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	3301      	adds	r3, #1
 8004192:	b2da      	uxtb	r2, r3
 8004194:	4b11      	ldr	r3, [pc, #68]	; (80041dc <HAL_UART_RxCpltCallback+0xb8>)
 8004196:	701a      	strb	r2, [r3, #0]
    }

    if(flood_counter > 10)
 8004198:	4b10      	ldr	r3, [pc, #64]	; (80041dc <HAL_UART_RxCpltCallback+0xb8>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b0a      	cmp	r3, #10
 800419e:	d902      	bls.n	80041a6 <HAL_UART_RxCpltCallback+0x82>
    {
    	flood_active = false;
 80041a0:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <HAL_UART_RxCpltCallback+0xa0>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart4, radio_rxBuffer, 12);
 80041a6:	220c      	movs	r2, #12
 80041a8:	4903      	ldr	r1, [pc, #12]	; (80041b8 <HAL_UART_RxCpltCallback+0x94>)
 80041aa:	480d      	ldr	r0, [pc, #52]	; (80041e0 <HAL_UART_RxCpltCallback+0xbc>)
 80041ac:	f017 fa36 	bl	801b61c <HAL_UART_Receive_IT>

}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	200002e0 	.word	0x200002e0
 80041bc:	2000008c 	.word	0x2000008c
 80041c0:	08023e04 	.word	0x08023e04
 80041c4:	200002ec 	.word	0x200002ec
 80041c8:	200002f4 	.word	0x200002f4
 80041cc:	200002f0 	.word	0x200002f0
 80041d0:	200002ef 	.word	0x200002ef
 80041d4:	200002ee 	.word	0x200002ee
 80041d8:	08023e0c 	.word	0x08023e0c
 80041dc:	200002ed 	.word	0x200002ed
 80041e0:	20000888 	.word	0x20000888

080041e4 <_Z16SetSteeringAnglef>:
uint8_t Is_First_Captured = 0;


/* Angle in +90 to -90 degree */
void SetSteeringAngle(float angle)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	ed87 0a01 	vstr	s0, [r7, #4]
	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 80041ee:	4b16      	ldr	r3, [pc, #88]	; (8004248 <_Z16SetSteeringAnglef+0x64>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80041f6:	d91c      	bls.n	8004232 <_Z16SetSteeringAnglef+0x4e>
 80041f8:	4b13      	ldr	r3, [pc, #76]	; (8004248 <_Z16SetSteeringAnglef+0x64>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8004200:	d217      	bcs.n	8004232 <_Z16SetSteeringAnglef+0x4e>
	{
		uint16_t compare = SERVO_NULL + (angle/ 21.5f * SERVO_RANGE);
 8004202:	ed97 7a01 	vldr	s14, [r7, #4]
 8004206:	eddf 6a11 	vldr	s13, [pc, #68]	; 800424c <_Z16SetSteeringAnglef+0x68>
 800420a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800420e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004250 <_Z16SetSteeringAnglef+0x6c>
 8004212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004216:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004254 <_Z16SetSteeringAnglef+0x70>
 800421a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800421e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004222:	ee17 3a90 	vmov	r3, s15
 8004226:	81fb      	strh	r3, [r7, #14]
	    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, compare);	}
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <_Z16SetSteeringAnglef+0x74>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	89fa      	ldrh	r2, [r7, #14]
 800422e:	635a      	str	r2, [r3, #52]	; 0x34
 8004230:	e004      	b.n	800423c <_Z16SetSteeringAnglef+0x58>
	else
	{
	    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <_Z16SetSteeringAnglef+0x74>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2200      	movs	r2, #0
 8004238:	635a      	str	r2, [r3, #52]	; 0x34
	}

}
 800423a:	bf00      	nop
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	200002f8 	.word	0x200002f8
 800424c:	41ac0000 	.word	0x41ac0000
 8004250:	43c80000 	.word	0x43c80000
 8004254:	44960000 	.word	0x44960000
 8004258:	20000c34 	.word	0x20000c34

0800425c <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
	// RISING
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	7f1b      	ldrb	r3, [r3, #28]
 8004268:	2b04      	cmp	r3, #4
 800426a:	d104      	bne.n	8004276 <HAL_TIM_IC_CaptureCallback+0x1a>
	{
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2200      	movs	r2, #0
 8004272:	625a      	str	r2, [r3, #36]	; 0x24
		float refClock = TIMCLOCK/(PRESCALAR);
		float mFactor = 1000000/refClock;

		usWidth_throttle = falling_value*mFactor;
	}
}
 8004274:	e024      	b.n	80042c0 <HAL_TIM_IC_CaptureCallback+0x64>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	7f1b      	ldrb	r3, [r3, #28]
 800427a:	2b08      	cmp	r3, #8
 800427c:	d120      	bne.n	80042c0 <HAL_TIM_IC_CaptureCallback+0x64>
		falling_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 800427e:	210c      	movs	r1, #12
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f016 f9ef 	bl	801a664 <HAL_TIM_ReadCapturedValue>
 8004286:	4603      	mov	r3, r0
 8004288:	4a0f      	ldr	r2, [pc, #60]	; (80042c8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800428a:	6013      	str	r3, [r2, #0]
		float refClock = TIMCLOCK/(PRESCALAR);
 800428c:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <HAL_TIM_IC_CaptureCallback+0x70>)
 800428e:	60fb      	str	r3, [r7, #12]
		float mFactor = 1000000/refClock;
 8004290:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80042d0 <HAL_TIM_IC_CaptureCallback+0x74>
 8004294:	ed97 7a03 	vldr	s14, [r7, #12]
 8004298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800429c:	edc7 7a02 	vstr	s15, [r7, #8]
		usWidth_throttle = falling_value*mFactor;
 80042a0:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	ee07 3a90 	vmov	s15, r3
 80042a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80042b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042b8:	ee17 2a90 	vmov	r2, s15
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_TIM_IC_CaptureCallback+0x78>)
 80042be:	601a      	str	r2, [r3, #0]
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	200002fc 	.word	0x200002fc
 80042cc:	49742400 	.word	0x49742400
 80042d0:	49742400 	.word	0x49742400
 80042d4:	200002f8 	.word	0x200002f8

080042d8 <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4618      	mov	r0, r3
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:

    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	7138      	strb	r0, [r7, #4]
 80042f8:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 80042fa:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	09db      	lsrs	r3, r3, #7
 8004302:	b2db      	uxtb	r3, r3
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
 8004314:	bf00      	nop
 8004316:	4618      	mov	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	7138      	strb	r0, [r7, #4]
 8004328:	bf00      	nop
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	fab3 f383 	clz	r3, r3
 8004344:	f1c3 031f 	rsb	r3, r3, #31
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	ed87 0a01 	vstr	s0, [r7, #4]
 800435e:	edc7 0a00 	vstr	s1, [r7]
 8004362:	edd7 0a00 	vldr	s1, [r7]
 8004366:	ed97 0a01 	vldr	s0, [r7, #4]
 800436a:	f01c f97f 	bl	802066c <atan2f>
 800436e:	eef0 7a40 	vmov.f32	s15, s0
 8004372:	eeb0 0a67 	vmov.f32	s0, s15
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	ed87 0a01 	vstr	s0, [r7, #4]
 8004386:	ed97 0a01 	vldr	s0, [r7, #4]
 800438a:	f01c f81b 	bl	80203c4 <cosf>
 800438e:	eef0 7a40 	vmov.f32	s15, s0
 8004392:	eeb0 0a67 	vmov.f32	s0, s15
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80043a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80043aa:	eef0 7ae7 	vabs.f32	s15, s15
 80043ae:	eeb0 0a67 	vmov.f32	s0, s15
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80043c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80043ca:	f01c f83f 	bl	802044c <sinf>
 80043ce:	eef0 7a40 	vmov.f32	s15, s0
 80043d2:	eeb0 0a67 	vmov.f32	s0, s15
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <_ZN3jlb10ControllerC1ENS_9DirectionE>:
        std::vector<float> line_positions_rear;

        Direction direction      = Direction::STRAIGHT;
        Direction prev_direction = Direction::STRAIGHT;

        Controller(Direction direction_ = Direction::STRAIGHT) : direction{direction_} {}
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2210      	movs	r2, #16
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2210      	movs	r2, #16
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	609a      	str	r2, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	60da      	str	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	611a      	str	r2, [r3, #16]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	615a      	str	r2, [r3, #20]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	619a      	str	r2, [r3, #24]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	61da      	str	r2, [r3, #28]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	621a      	str	r2, [r3, #32]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	625a      	str	r2, [r3, #36]	; 0x24
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	629a      	str	r2, [r3, #40]	; 0x28
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	62da      	str	r2, [r3, #44]	; 0x2c
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a28      	ldr	r2, [pc, #160]	; (80044e8 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x10c>)
 8004446:	631a      	str	r2, [r3, #48]	; 0x30
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3374      	adds	r3, #116	; 0x74
 800444c:	4618      	mov	r0, r3
 800444e:	f7fe fa20 	bl	8002892 <_ZNSt6vectorIfSaIfEEC1Ev>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3380      	adds	r3, #128	; 0x80
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe fa1b 	bl	8002892 <_ZNSt6vectorIfSaIfEEC1Ev>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	339c      	adds	r3, #156	; 0x9c
 8004484:	ed9f 4a19 	vldr	s8, [pc, #100]	; 80044ec <_ZN3jlb10ControllerC1ENS_9DirectionE+0x110>
 8004488:	eddf 3a19 	vldr	s7, [pc, #100]	; 80044f0 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x114>
 800448c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8004490:	eddf 2a18 	vldr	s5, [pc, #96]	; 80044f4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x118>
 8004494:	ed9f 2a18 	vldr	s4, [pc, #96]	; 80044f8 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x11c>
 8004498:	eddf 1a15 	vldr	s3, [pc, #84]	; 80044f0 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x114>
 800449c:	ed9f 1a15 	vldr	s2, [pc, #84]	; 80044f4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x118>
 80044a0:	eddf 0a16 	vldr	s1, [pc, #88]	; 80044fc <_ZN3jlb10ControllerC1ENS_9DirectionE+0x120>
 80044a4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8004500 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x124>
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff faeb 	bl	8003a84 <_ZN3PIDC1Efffffffff>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	33cc      	adds	r3, #204	; 0xcc
 80044b2:	ed9f 4a10 	vldr	s8, [pc, #64]	; 80044f4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x118>
 80044b6:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80044ba:	ed9f 3a12 	vldr	s6, [pc, #72]	; 8004504 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x128>
 80044be:	eddf 2a12 	vldr	s5, [pc, #72]	; 8004508 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x12c>
 80044c2:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 80044f8 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x11c>
 80044c6:	eddf 1a0a 	vldr	s3, [pc, #40]	; 80044f0 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x114>
 80044ca:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80044f4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x118>
 80044ce:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8004500 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x124>
 80044d2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800450c <_ZN3jlb10ControllerC1ENS_9DirectionE+0x130>
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fad4 	bl	8003a84 <_ZN3PIDC1Efffffffff>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	42c80000 	.word	0x42c80000
 80044ec:	3dcccccd 	.word	0x3dcccccd
 80044f0:	3d4ccccd 	.word	0x3d4ccccd
 80044f4:	00000000 	.word	0x00000000
 80044f8:	3ba3d70a 	.word	0x3ba3d70a
 80044fc:	3f30a3d7 	.word	0x3f30a3d7
 8004500:	40866666 	.word	0x40866666
 8004504:	41ac0000 	.word	0x41ac0000
 8004508:	c1ac0000 	.word	0xc1ac0000
 800450c:	40dccccd 	.word	0x40dccccd

08004510 <_ZN3jlb10ControllerD1Ev>:

        ~Controller() {}
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	33cc      	adds	r3, #204	; 0xcc
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff faf5 	bl	8003b0c <_ZN3PIDD1Ev>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	339c      	adds	r3, #156	; 0x9c
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff faf0 	bl	8003b0c <_ZN3PIDD1Ev>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3380      	adds	r3, #128	; 0x80
 8004530:	4618      	mov	r0, r3
 8004532:	f7fe fe4b 	bl	80031cc <_ZNSt6vectorIfSaIfEED1Ev>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3374      	adds	r3, #116	; 0x74
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe fe46 	bl	80031cc <_ZNSt6vectorIfSaIfEED1Ev>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>:

        float select_control_point(std::vector<float> line_positions, float prev_line_position)
 800454c:	b590      	push	{r4, r7, lr}
 800454e:	ed2d 8b02 	vpush	{d8}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	ed87 0a01 	vstr	s0, [r7, #4]
        {
            std::sort(line_positions.begin(), line_positions.end());
 800455e:	68b8      	ldr	r0, [r7, #8]
 8004560:	f7ff f846 	bl	80035f0 <_ZNSt6vectorIfSaIfEE5beginEv>
 8004564:	4604      	mov	r4, r0
 8004566:	68b8      	ldr	r0, [r7, #8]
 8004568:	f7fe ff12 	bl	8003390 <_ZNSt6vectorIfSaIfEE3endEv>
 800456c:	4603      	mov	r3, r0
 800456e:	4619      	mov	r1, r3
 8004570:	4620      	mov	r0, r4
 8004572:	f007 f9ca 	bl	800b90a <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>

            if (line_positions.size() == 1) { return line_positions[0]; }
 8004576:	68b8      	ldr	r0, [r7, #8]
 8004578:	f7ff f8c6 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800457c:	4603      	mov	r3, r0
 800457e:	2b01      	cmp	r3, #1
 8004580:	bf0c      	ite	eq
 8004582:	2301      	moveq	r3, #1
 8004584:	2300      	movne	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x50>
 800458c:	2100      	movs	r1, #0
 800458e:	68b8      	ldr	r0, [r7, #8]
 8004590:	f007 f9cb 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 8004594:	4603      	mov	r3, r0
 8004596:	edd3 7a00 	vldr	s15, [r3]
 800459a:	e114      	b.n	80047c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
            else if (line_positions.size() == 2)
 800459c:	68b8      	ldr	r0, [r7, #8]
 800459e:	f7ff f8b3 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	bf0c      	ite	eq
 80045a8:	2301      	moveq	r3, #1
 80045aa:	2300      	movne	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 8096 	beq.w	80046e0 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x194>
            {
                switch (direction)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d00f      	beq.n	80045de <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x92>
 80045be:	2b02      	cmp	r3, #2
 80045c0:	f300 808b 	bgt.w	80046da <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x18e>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x82>
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d07e      	beq.n	80046ca <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x17e>
 80045cc:	e085      	b.n	80046da <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x18e>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 80045ce:	2100      	movs	r1, #0
 80045d0:	68b8      	ldr	r0, [r7, #8]
 80045d2:	f007 f9aa 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 80045d6:	4603      	mov	r3, r0
 80045d8:	edd3 7a00 	vldr	s15, [r3]
 80045dc:	e0f3      	b.n	80047c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        if (direction == prev_direction)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d136      	bne.n	800465c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x110>
                        {
                            return std::fabs(line_positions[0] - prev_line_position) < std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 80045ee:	2100      	movs	r1, #0
 80045f0:	68b8      	ldr	r0, [r7, #8]
 80045f2:	f007 f99a 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 80045f6:	4603      	mov	r3, r0
 80045f8:	ed93 7a00 	vldr	s14, [r3]
 80045fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004604:	eeb0 0a67 	vmov.f32	s0, s15
 8004608:	f7ff fec8 	bl	800439c <_ZSt4fabsf>
 800460c:	eeb0 8a40 	vmov.f32	s16, s0
 8004610:	2101      	movs	r1, #1
 8004612:	68b8      	ldr	r0, [r7, #8]
 8004614:	f007 f989 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 8004618:	4603      	mov	r3, r0
 800461a:	ed93 7a00 	vldr	s14, [r3]
 800461e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004626:	eeb0 0a67 	vmov.f32	s0, s15
 800462a:	f7ff feb7 	bl	800439c <_ZSt4fabsf>
 800462e:	eef0 7a40 	vmov.f32	s15, s0
 8004632:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463a:	d507      	bpl.n	800464c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x100>
 800463c:	2100      	movs	r1, #0
 800463e:	68b8      	ldr	r0, [r7, #8]
 8004640:	f007 f973 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 8004644:	4603      	mov	r3, r0
 8004646:	edd3 7a00 	vldr	s15, [r3]
 800464a:	e0bc      	b.n	80047c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
 800464c:	2101      	movs	r1, #1
 800464e:	68b8      	ldr	r0, [r7, #8]
 8004650:	f007 f96b 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 8004654:	4603      	mov	r3, r0
 8004656:	edd3 7a00 	vldr	s15, [r3]
 800465a:	e0b4      	b.n	80047c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                        }
                        else { return std::fabs(line_positions[0] - prev_line_position) > std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1]; }
 800465c:	2100      	movs	r1, #0
 800465e:	68b8      	ldr	r0, [r7, #8]
 8004660:	f007 f963 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 8004664:	4603      	mov	r3, r0
 8004666:	ed93 7a00 	vldr	s14, [r3]
 800466a:	edd7 7a01 	vldr	s15, [r7, #4]
 800466e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004672:	eeb0 0a67 	vmov.f32	s0, s15
 8004676:	f7ff fe91 	bl	800439c <_ZSt4fabsf>
 800467a:	eeb0 8a40 	vmov.f32	s16, s0
 800467e:	2101      	movs	r1, #1
 8004680:	68b8      	ldr	r0, [r7, #8]
 8004682:	f007 f952 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 8004686:	4603      	mov	r3, r0
 8004688:	ed93 7a00 	vldr	s14, [r3]
 800468c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004694:	eeb0 0a67 	vmov.f32	s0, s15
 8004698:	f7ff fe80 	bl	800439c <_ZSt4fabsf>
 800469c:	eef0 7a40 	vmov.f32	s15, s0
 80046a0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80046a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a8:	dd07      	ble.n	80046ba <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x16e>
 80046aa:	2100      	movs	r1, #0
 80046ac:	68b8      	ldr	r0, [r7, #8]
 80046ae:	f007 f93c 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 80046b2:	4603      	mov	r3, r0
 80046b4:	edd3 7a00 	vldr	s15, [r3]
 80046b8:	e085      	b.n	80047c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
 80046ba:	2101      	movs	r1, #1
 80046bc:	68b8      	ldr	r0, [r7, #8]
 80046be:	f007 f934 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 80046c2:	4603      	mov	r3, r0
 80046c4:	edd3 7a00 	vldr	s15, [r3]
 80046c8:	e07d      	b.n	80047c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[1];
 80046ca:	2101      	movs	r1, #1
 80046cc:	68b8      	ldr	r0, [r7, #8]
 80046ce:	f007 f92c 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 80046d2:	4603      	mov	r3, r0
 80046d4:	edd3 7a00 	vldr	s15, [r3]
 80046d8:	e075      	b.n	80047c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 80046da:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80047d4 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 80046de:	e072      	b.n	80047c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
            }
            else if (line_positions.size() == 3)
 80046e0:	68b8      	ldr	r0, [r7, #8]
 80046e2:	f7ff f811 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	bf0c      	ite	eq
 80046ec:	2301      	moveq	r3, #1
 80046ee:	2300      	movne	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d026      	beq.n	8004744 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f8>
            {
                switch (direction)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d00e      	beq.n	800471e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1d2>
 8004700:	2b02      	cmp	r3, #2
 8004702:	dc1c      	bgt.n	800473e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1c2>
 8004708:	2b01      	cmp	r3, #1
 800470a:	d010      	beq.n	800472e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1e2>
 800470c:	e017      	b.n	800473e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 800470e:	2100      	movs	r1, #0
 8004710:	68b8      	ldr	r0, [r7, #8]
 8004712:	f007 f90a 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 8004716:	4603      	mov	r3, r0
 8004718:	edd3 7a00 	vldr	s15, [r3]
 800471c:	e053      	b.n	80047c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        return line_positions[1];
 800471e:	2101      	movs	r1, #1
 8004720:	68b8      	ldr	r0, [r7, #8]
 8004722:	f007 f902 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 8004726:	4603      	mov	r3, r0
 8004728:	edd3 7a00 	vldr	s15, [r3]
 800472c:	e04b      	b.n	80047c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[2];
 800472e:	2102      	movs	r1, #2
 8004730:	68b8      	ldr	r0, [r7, #8]
 8004732:	f007 f8fa 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 8004736:	4603      	mov	r3, r0
 8004738:	edd3 7a00 	vldr	s15, [r3]
 800473c:	e043      	b.n	80047c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 800473e:	eddf 7a25 	vldr	s15, [pc, #148]	; 80047d4 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8004742:	e040      	b.n	80047c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
            }
            else if (line_positions.size() == 4)
 8004744:	68b8      	ldr	r0, [r7, #8]
 8004746:	f7fe ffdf 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800474a:	4603      	mov	r3, r0
 800474c:	2b04      	cmp	r3, #4
 800474e:	bf0c      	ite	eq
 8004750:	2301      	moveq	r3, #1
 8004752:	2300      	movne	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d033      	beq.n	80047c2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x276>
            {
                switch (direction)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004760:	2b02      	cmp	r3, #2
 8004762:	d00e      	beq.n	8004782 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x236>
 8004764:	2b02      	cmp	r3, #2
 8004766:	dc29      	bgt.n	80047bc <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x270>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x226>
 800476c:	2b01      	cmp	r3, #1
 800476e:	d01d      	beq.n	80047ac <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x260>
 8004770:	e024      	b.n	80047bc <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x270>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 8004772:	2100      	movs	r1, #0
 8004774:	68b8      	ldr	r0, [r7, #8]
 8004776:	f007 f8d8 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 800477a:	4603      	mov	r3, r0
 800477c:	edd3 7a00 	vldr	s15, [r3]
 8004780:	e021      	b.n	80047c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        return line_positions[1] + line_positions[2] / 2.0f;
 8004782:	2101      	movs	r1, #1
 8004784:	68b8      	ldr	r0, [r7, #8]
 8004786:	f007 f8d0 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 800478a:	4603      	mov	r3, r0
 800478c:	ed93 8a00 	vldr	s16, [r3]
 8004790:	2102      	movs	r1, #2
 8004792:	68b8      	ldr	r0, [r7, #8]
 8004794:	f007 f8c9 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 8004798:	4603      	mov	r3, r0
 800479a:	ed93 7a00 	vldr	s14, [r3]
 800479e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80047a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047a6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80047aa:	e00c      	b.n	80047c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[3];
 80047ac:	2103      	movs	r1, #3
 80047ae:	68b8      	ldr	r0, [r7, #8]
 80047b0:	f007 f8bb 	bl	800b92a <_ZNSt6vectorIfSaIfEEixEj>
 80047b4:	4603      	mov	r3, r0
 80047b6:	edd3 7a00 	vldr	s15, [r3]
 80047ba:	e004      	b.n	80047c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 80047bc:	eddf 7a05 	vldr	s15, [pc, #20]	; 80047d4 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 80047c0:	e001      	b.n	80047c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
            }
            else
            {
                // this should never happen

                return 0.0f;
 80047c2:	eddf 7a04 	vldr	s15, [pc, #16]	; 80047d4 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
            }
        }
 80047c6:	eeb0 0a67 	vmov.f32	s0, s15
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	ecbd 8b02 	vpop	{d8}
 80047d2:	bd90      	pop	{r4, r7, pc}
 80047d4:	00000000 	.word	0x00000000

080047d8 <_ZZN3jlb10Controller15lateral_controlEfENKUlbE_clEb>:

        void lateral_control([[maybe_unused]] const float dt)
        {
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; })) { return; }
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	70fb      	strb	r3, [r7, #3]
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <_ZZN3jlb10Controller15lateral_controlEfENKUlbE0_clEb>:

            if (std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; })) { return; }
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	460b      	mov	r3, r1
 80047fc:	70fb      	strb	r3, [r7, #3]
 80047fe:	78fb      	ldrb	r3, [r7, #3]
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <_ZN3jlb10Controller15lateral_controlEf>:
        void lateral_control([[maybe_unused]] const float dt)
 800480c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800480e:	b08b      	sub	sp, #44	; 0x2c
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	ed87 0a00 	vstr	s0, [r7]
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; })) { return; }
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3334      	adds	r3, #52	; 0x34
 800481c:	4618      	mov	r0, r3
 800481e:	f007 f894 	bl	800b94a <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 8004822:	4604      	mov	r4, r0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3334      	adds	r3, #52	; 0x34
 8004828:	4618      	mov	r0, r3
 800482a:	f007 f899 	bl	800b960 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 800482e:	4603      	mov	r3, r0
 8004830:	4632      	mov	r2, r6
 8004832:	4619      	mov	r1, r3
 8004834:	4620      	mov	r0, r4
 8004836:	f007 f89f 	bl	800b978 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE_EbT_S4_T0_>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	f040 80ee 	bne.w	8004a1e <_ZN3jlb10Controller15lateral_controlEf+0x212>
            if (std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; })) { return; }
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3354      	adds	r3, #84	; 0x54
 8004846:	4618      	mov	r0, r3
 8004848:	f007 f87f 	bl	800b94a <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 800484c:	4604      	mov	r4, r0
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3354      	adds	r3, #84	; 0x54
 8004852:	4618      	mov	r0, r3
 8004854:	f007 f884 	bl	800b960 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 8004858:	4603      	mov	r3, r0
 800485a:	462a      	mov	r2, r5
 800485c:	4619      	mov	r1, r3
 800485e:	4620      	mov	r0, r4
 8004860:	f007 f8a0 	bl	800b9a4 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE0_EbT_S4_T0_>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	f040 80db 	bne.w	8004a22 <_ZN3jlb10Controller15lateral_controlEf+0x216>

            if (line_positions_front.size() == 0 || line_positions_rear.size() == 0 || line_positions_front.size() > 4 || line_positions_rear.size() > 4) { return; }
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3374      	adds	r3, #116	; 0x74
 8004870:	4618      	mov	r0, r3
 8004872:	f7fe ff49 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d017      	beq.n	80048ac <_ZN3jlb10Controller15lateral_controlEf+0xa0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3380      	adds	r3, #128	; 0x80
 8004880:	4618      	mov	r0, r3
 8004882:	f7fe ff41 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00f      	beq.n	80048ac <_ZN3jlb10Controller15lateral_controlEf+0xa0>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3374      	adds	r3, #116	; 0x74
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe ff39 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004896:	4603      	mov	r3, r0
 8004898:	2b04      	cmp	r3, #4
 800489a:	d807      	bhi.n	80048ac <_ZN3jlb10Controller15lateral_controlEf+0xa0>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3380      	adds	r3, #128	; 0x80
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe ff31 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d901      	bls.n	80048b0 <_ZN3jlb10Controller15lateral_controlEf+0xa4>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <_ZN3jlb10Controller15lateral_controlEf+0xa6>
 80048b0:	2300      	movs	r3, #0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f040 80b7 	bne.w	8004a26 <_ZN3jlb10Controller15lateral_controlEf+0x21a>

            line_position_front      = select_control_point(line_positions_front, prev_line_position_front);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f103 0274 	add.w	r2, r3, #116	; 0x74
 80048be:	f107 0308 	add.w	r3, r7, #8
 80048c2:	4611      	mov	r1, r2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f007 f883 	bl	800b9d0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80048d0:	f107 0308 	add.w	r3, r7, #8
 80048d4:	eeb0 0a67 	vmov.f32	s0, s15
 80048d8:	4619      	mov	r1, r3
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff fe36 	bl	800454c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 80048e0:	eef0 7a40 	vmov.f32	s15, s0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	edc3 7a02 	vstr	s15, [r3, #8]
 80048ea:	f107 0308 	add.w	r3, r7, #8
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe fc6c 	bl	80031cc <_ZNSt6vectorIfSaIfEED1Ev>
            line_position_rear       = select_control_point(line_positions_rear, prev_line_position_rear);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80048fa:	f107 0314 	add.w	r3, r7, #20
 80048fe:	4611      	mov	r1, r2
 8004900:	4618      	mov	r0, r3
 8004902:	f007 f865 	bl	800b9d0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	edd3 7a05 	vldr	s15, [r3, #20]
 800490c:	f107 0314 	add.w	r3, r7, #20
 8004910:	eeb0 0a67 	vmov.f32	s0, s15
 8004914:	4619      	mov	r1, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff fe18 	bl	800454c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 800491c:	eef0 7a40 	vmov.f32	s15, s0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	edc3 7a03 	vstr	s15, [r3, #12]
 8004926:	f107 0314 	add.w	r3, r7, #20
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe fc4e 	bl	80031cc <_ZNSt6vectorIfSaIfEED1Ev>
            prev_line_position_front = line_position_front;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	611a      	str	r2, [r3, #16]
            prev_line_position_rear  = line_position_rear;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	615a      	str	r2, [r3, #20]

            float sensor_rate   = SENSOR_WIDTH / SENSOR_COUNT;
 8004940:	4b3b      	ldr	r3, [pc, #236]	; (8004a30 <_ZN3jlb10Controller15lateral_controlEf+0x224>)
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
            float sensor_center = SENSOR_COUNT / 2.0f;
 8004944:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8004948:	623b      	str	r3, [r7, #32]
            selected_front      = static_cast<unsigned long>(line_position_front / sensor_rate + sensor_center);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004950:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004958:	edd7 7a08 	vldr	s15, [r7, #32]
 800495c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004964:	ee17 2a90 	vmov	r2, s15
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	601a      	str	r2, [r3, #0]
            selected_rear       = static_cast<unsigned long>(line_position_rear / sensor_rate + sensor_center);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004972:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497a:	edd7 7a08 	vldr	s15, [r7, #32]
 800497e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004986:	ee17 2a90 	vmov	r2, s15
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	605a      	str	r2, [r3, #4]

            cross_track_error = line_position_front;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689a      	ldr	r2, [r3, #8]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	621a      	str	r2, [r3, #32]
            heading_error     = std::atan2(line_position_front - line_position_rear, SENSOR_BASE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	ed93 7a02 	vldr	s14, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	edd3 7a03 	vldr	s15, [r3, #12]
 80049a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049a6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80049aa:	eeb0 0a67 	vmov.f32	s0, s15
 80049ae:	f7ff fcd1 	bl	8004354 <_ZSt5atan2ff>
 80049b2:	eef0 7a40 	vmov.f32	s15, s0
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

            //lateral_pid.update_params(lat::kP/current_velocity, lat::kI/current_velocity, lat::kD/current_velocity);
            target_angle = -lateral_pid.update(0, cross_track_error, dt);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	edd3 7a08 	vldr	s15, [r3, #32]
 80049c8:	ed97 1a00 	vldr	s2, [r7]
 80049cc:	eef0 0a67 	vmov.f32	s1, s15
 80049d0:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8004a34 <_ZN3jlb10Controller15lateral_controlEf+0x228>
 80049d4:	4610      	mov	r0, r2
 80049d6:	f7ff f8a5 	bl	8003b24 <_ZN3PID6updateEfff>
 80049da:	eef0 7a40 	vmov.f32	s15, s0
 80049de:	eef1 7a67 	vneg.f32	s15, s15
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	edc3 7a06 	vstr	s15, [r3, #24]

            if (target_angle > deg2rad(MAX_WHEEL_ANGLE)) target_angle = deg2rad(MAX_WHEEL_ANGLE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	edd3 7a06 	vldr	s15, [r3, #24]
 80049ee:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004a38 <_ZN3jlb10Controller15lateral_controlEf+0x22c>
 80049f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049fa:	dd02      	ble.n	8004a02 <_ZN3jlb10Controller15lateral_controlEf+0x1f6>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a0f      	ldr	r2, [pc, #60]	; (8004a3c <_ZN3jlb10Controller15lateral_controlEf+0x230>)
 8004a00:	619a      	str	r2, [r3, #24]
            if (target_angle < -deg2rad(MAX_WHEEL_ANGLE)) target_angle = -deg2rad(MAX_WHEEL_ANGLE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	edd3 7a06 	vldr	s15, [r3, #24]
 8004a08:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004a40 <_ZN3jlb10Controller15lateral_controlEf+0x234>
 8004a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a14:	d508      	bpl.n	8004a28 <_ZN3jlb10Controller15lateral_controlEf+0x21c>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <_ZN3jlb10Controller15lateral_controlEf+0x238>)
 8004a1a:	619a      	str	r2, [r3, #24]
 8004a1c:	e004      	b.n	8004a28 <_ZN3jlb10Controller15lateral_controlEf+0x21c>
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; })) { return; }
 8004a1e:	bf00      	nop
 8004a20:	e002      	b.n	8004a28 <_ZN3jlb10Controller15lateral_controlEf+0x21c>
            if (std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; })) { return; }
 8004a22:	bf00      	nop
 8004a24:	e000      	b.n	8004a28 <_ZN3jlb10Controller15lateral_controlEf+0x21c>
            if (line_positions_front.size() == 0 || line_positions_rear.size() == 0 || line_positions_front.size() > 4 || line_positions_rear.size() > 4) { return; }
 8004a26:	bf00      	nop
        }
 8004a28:	372c      	adds	r7, #44	; 0x2c
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	3bcccccd 	.word	0x3bcccccd
 8004a34:	00000000 	.word	0x00000000
 8004a38:	3ec02037 	.word	0x3ec02037
 8004a3c:	3ec02037 	.word	0x3ec02037
 8004a40:	bec02037 	.word	0xbec02037
 8004a44:	bec02037 	.word	0xbec02037

08004a48 <_ZN3jlb10Controller20longitudinal_controlEf>:

        void longitudinal_control([[maybe_unused]] const float dt)
 8004a48:	b5b0      	push	{r4, r5, r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	ed87 0a00 	vstr	s0, [r7]
            ang_error_norm  = ang_error / deg2rad(ANG_ERROR_MAX);

            float x      = std::max(dist_error_norm, ang_error_norm);
            target_speed = std::min(reference_speed, reference_speed * (1.0f - (0.1666667f * x) - (0.8333333f * x * x)));
			*/
            target_speed = reference_speed;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	61da      	str	r2, [r3, #28]

            if (target_speed < MIN_SPEED) target_speed = MIN_SPEED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	edd3 7a07 	vldr	s15, [r3, #28]
 8004a64:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8004a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a70:	d503      	bpl.n	8004a7a <_ZN3jlb10Controller20longitudinal_controlEf+0x32>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8004a78:	61da      	str	r2, [r3, #28]

            float object_rate = object_pid.update(obj::FOLLOW_DISTANCE, object_range, dt);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004a86:	ed97 1a00 	vldr	s2, [r7]
 8004a8a:	eef0 0a67 	vmov.f32	s1, s15
 8004a8e:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8004ae8 <_ZN3jlb10Controller20longitudinal_controlEf+0xa0>
 8004a92:	4610      	mov	r0, r2
 8004a94:	f7ff f846 	bl	8003b24 <_ZN3PID6updateEfff>
 8004a98:	ed87 0a03 	vstr	s0, [r7, #12]
            target_speed *= std::pow((1 - object_rate), 2);
 8004a9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aa0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004aa8:	2002      	movs	r0, #2
 8004aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8004aae:	f7fd fc73 	bl	8002398 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004ab2:	ec55 4b10 	vmov	r4, r5, d0
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fb fd36 	bl	800052c <__aeabi_f2d>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	f7fb fd88 	bl	80005dc <__aeabi_dmul>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	f7fc f852 	bl	8000b7c <__aeabi_d2f>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	61da      	str	r2, [r3, #28]
        }
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	3e99999a 	.word	0x3e99999a

08004aec <_ZN3jlb10Controller6updateEv>:

        ControlSignal update()
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
        {
#ifndef SIMULATION
            // TODO: add timestamp
            float dt = 0.005f;
 8004af4:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <_ZN3jlb10Controller6updateEv+0x48>)
 8004af6:	61fb      	str	r3, [r7, #28]
            auto                   control_timestamp_ = std::chrono::steady_clock::now();
            [[maybe_unused]] float dt                 = std::chrono::duration_cast<std::chrono::milliseconds>(control_timestamp_ - prev_control_timestamp_).count() / 1000.0f;
            prev_control_timestamp_                   = control_timestamp_;
#endif

            lateral_control(dt);
 8004af8:	ed97 0a07 	vldr	s0, [r7, #28]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f7ff fe85 	bl	800480c <_ZN3jlb10Controller15lateral_controlEf>
            longitudinal_control(dt);
 8004b02:	ed97 0a07 	vldr	s0, [r7, #28]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7ff ff9e 	bl	8004a48 <_ZN3jlb10Controller20longitudinal_controlEf>

            return {target_angle, target_speed};
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	61bb      	str	r3, [r7, #24]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	ee07 2a10 	vmov	s14, r2
 8004b20:	ee07 3a90 	vmov	s15, r3
        }
 8004b24:	eeb0 0a47 	vmov.f32	s0, s14
 8004b28:	eef0 0a67 	vmov.f32	s1, s15
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	3ba3d70a 	.word	0x3ba3d70a

08004b38 <_ZN3jlb10Controller16set_object_rangeEf>:

        void set_object_range(const float object_range_) { object_range = object_range_; }
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	ed87 0a00 	vstr	s0, [r7]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	631a      	str	r2, [r3, #48]	; 0x30
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>:

        void set_detection_front(bool *detection_front_, std::vector<float> line_positions_front_)
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b086      	sub	sp, #24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_front[i] = detection_front_[i];
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b1f      	cmp	r3, #31
 8004b6a:	d80d      	bhi.n	8004b88 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x32>
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	4413      	add	r3, r2
 8004b72:	7819      	ldrb	r1, [r3, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	4413      	add	r3, r2
 8004b7a:	3334      	adds	r3, #52	; 0x34
 8004b7c:	460a      	mov	r2, r1
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	3301      	adds	r3, #1
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	e7ee      	b.n	8004b66 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x10>
            line_positions_front = line_positions_front_;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3374      	adds	r3, #116	; 0x74
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f006 ff8f 	bl	800bab2 <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 8004b94:	bf00      	nop
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>:

        void set_detection_rear(bool *detection_rear_, std::vector<float> line_positions_rear_)
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_rear[i] = detection_rear_[i];
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b1f      	cmp	r3, #31
 8004bb0:	d80d      	bhi.n	8004bce <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x32>
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	7819      	ldrb	r1, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3354      	adds	r3, #84	; 0x54
 8004bc2:	460a      	mov	r2, r1
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	e7ee      	b.n	8004bac <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x10>
            line_positions_rear = line_positions_rear_;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3380      	adds	r3, #128	; 0x80
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f006 ff6c 	bl	800bab2 <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 8004bda:	bf00      	nop
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <_ZN3jlb10Controller20set_current_velocityEf>:

        void set_current_velocity(const float current_velocity_) { current_velocity = current_velocity_; }
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	ed87 0a00 	vstr	s0, [r7]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <_ZN3jlb10Controller13set_directionENS_9DirectionE>:

        void set_direction(const Direction direction_)
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	6039      	str	r1, [r7, #0]
        {
            prev_direction = direction;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            direction      = direction_;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <_ZN3jlb10Controller19set_reference_speedEf>:

        void set_reference_speed(const float reference_speed_) { reference_speed = reference_speed_; }
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	ed87 0a00 	vstr	s0, [r7]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f007 f834 	bl	800bcc2 <_ZNSaIN3jlb4EdgeEED1Ev>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f007 f817 	bl	800bca2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>:
      vector() = default;
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff ffeb 	bl	8004c64 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <_ZN3jlb4NodeC1Ecff>:
        char              name;
        float             x;
        float             y;
        std::vector<Edge> edges;

        Node(char name_, float x_, float y_) : name{name_}, x(x_), y(y_) {}
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	ed87 0a01 	vstr	s0, [r7, #4]
 8004ca6:	edc7 0a00 	vstr	s1, [r7]
 8004caa:	72fb      	strb	r3, [r7, #11]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	7afa      	ldrb	r2, [r7, #11]
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	605a      	str	r2, [r3, #4]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	609a      	str	r2, [r3, #8]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	330c      	adds	r3, #12
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff ffdb 	bl	8004c7e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <_ZN3jlb4NodeD1Ev>:
        ~Node() {}
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f007 f818 	bl	800bd14 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <_ZN3jlb4EdgeD1Ev>:
    struct Edge
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f007 f862 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>:

        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8004d0a:	b590      	push	{r4, r7, lr}
 8004d0c:	b08d      	sub	sp, #52	; 0x34
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6178      	str	r0, [r7, #20]
 8004d12:	60fa      	str	r2, [r7, #12]
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	74fb      	strb	r3, [r7, #19]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f103 040c 	add.w	r4, r3, #12
 8004d24:	7cfb      	ldrb	r3, [r7, #19]
 8004d26:	763b      	strb	r3, [r7, #24]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	f107 0318 	add.w	r3, r7, #24
 8004d30:	3308      	adds	r3, #8
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f007 f808 	bl	800bd4a <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d3e:	f107 0318 	add.w	r3, r7, #24
 8004d42:	4619      	mov	r1, r3
 8004d44:	4620      	mov	r0, r4
 8004d46:	f007 f858 	bl	800bdfa <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>
 8004d4a:	f107 0318 	add.w	r3, r7, #24
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff ffcd 	bl	8004cee <_ZN3jlb4EdgeD1Ev>
 8004d54:	bf00      	nop
 8004d56:	3734      	adds	r7, #52	; 0x34
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd90      	pop	{r4, r7, pc}

08004d5c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f007 f869 	bl	800be3c <_ZNSaIN3jlb4NodeEED1Ev>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f007 f84c 	bl	800be1c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>:
      vector() = default;
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff ffeb 	bl	8004d74 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <_ZN3jlb5GraphC1Ev>:
    class Graph
    {
    public:
        std::vector<Node> nodes;

        Graph()
 8004da8:	b590      	push	{r4, r7, lr}
 8004daa:	f6ad 4d6c 	subw	sp, sp, #3180	; 0xc6c
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004db4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004db8:	6018      	str	r0, [r3, #0]
        {
 8004dba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004dbe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff ffe2 	bl	8004d8e <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>
            nodes.push_back(Node{static_cast<char>('A'), px_to_m(704), px_to_m(448)});
 8004dca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004dce:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004dd2:	681c      	ldr	r4, [r3, #0]
 8004dd4:	f107 0308 	add.w	r3, r7, #8
 8004dd8:	eddf 0af3 	vldr	s1, [pc, #972]	; 80051a8 <_ZN3jlb5GraphC1Ev+0x400>
 8004ddc:	ed9f 0af3 	vldr	s0, [pc, #972]	; 80051ac <_ZN3jlb5GraphC1Ev+0x404>
 8004de0:	2141      	movs	r1, #65	; 0x41
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff ff58 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8004de8:	f107 0308 	add.w	r3, r7, #8
 8004dec:	4619      	mov	r1, r3
 8004dee:	4620      	mov	r0, r4
 8004df0:	f007 f869 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004df4:	f107 0308 	add.w	r3, r7, #8
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff ff6a 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('B'), px_to_m(704), px_to_m(576)});
 8004dfe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e02:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004e06:	681c      	ldr	r4, [r3, #0]
 8004e08:	f107 0320 	add.w	r3, r7, #32
 8004e0c:	eddf 0aeb 	vldr	s1, [pc, #940]	; 80051bc <_ZN3jlb5GraphC1Ev+0x414>
 8004e10:	ed9f 0ae6 	vldr	s0, [pc, #920]	; 80051ac <_ZN3jlb5GraphC1Ev+0x404>
 8004e14:	2142      	movs	r1, #66	; 0x42
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff ff3e 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8004e1c:	f107 0320 	add.w	r3, r7, #32
 8004e20:	4619      	mov	r1, r3
 8004e22:	4620      	mov	r0, r4
 8004e24:	f007 f84f 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004e28:	f107 0320 	add.w	r3, r7, #32
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff ff50 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('C'), px_to_m(640), px_to_m(384)});
 8004e32:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e36:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004e3a:	681c      	ldr	r4, [r3, #0]
 8004e3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e40:	eddf 0adb 	vldr	s1, [pc, #876]	; 80051b0 <_ZN3jlb5GraphC1Ev+0x408>
 8004e44:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8004e48:	2143      	movs	r1, #67	; 0x43
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff ff24 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8004e50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e54:	4619      	mov	r1, r3
 8004e56:	4620      	mov	r0, r4
 8004e58:	f007 f835 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004e5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff ff36 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('D'), px_to_m(640), px_to_m(512)});
 8004e66:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e6a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004e6e:	681c      	ldr	r4, [r3, #0]
 8004e70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004e74:	eddf 0acf 	vldr	s1, [pc, #828]	; 80051b4 <_ZN3jlb5GraphC1Ev+0x40c>
 8004e78:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8004e7c:	2144      	movs	r1, #68	; 0x44
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff ff0a 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8004e84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	f007 f81b 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004e90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff ff1c 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('E'), px_to_m(640), px_to_m(640)});
 8004e9a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e9e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004ea2:	681c      	ldr	r4, [r3, #0]
 8004ea4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004ea8:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004eac:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8004eb0:	2145      	movs	r1, #69	; 0x45
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff fef0 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8004eb8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f007 f801 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004ec4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff ff02 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('F'), px_to_m(576), px_to_m(448)});
 8004ece:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ed2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004ed6:	681c      	ldr	r4, [r3, #0]
 8004ed8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004edc:	eddf 0ab2 	vldr	s1, [pc, #712]	; 80051a8 <_ZN3jlb5GraphC1Ev+0x400>
 8004ee0:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 80051bc <_ZN3jlb5GraphC1Ev+0x414>
 8004ee4:	2146      	movs	r1, #70	; 0x46
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff fed6 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8004eec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f006 ffe7 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004ef8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff fee8 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('G'), px_to_m(576), px_to_m(576)});
 8004f02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f06:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004f0a:	681c      	ldr	r4, [r3, #0]
 8004f0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004f10:	eddf 0aaa 	vldr	s1, [pc, #680]	; 80051bc <_ZN3jlb5GraphC1Ev+0x414>
 8004f14:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 80051bc <_ZN3jlb5GraphC1Ev+0x414>
 8004f18:	2147      	movs	r1, #71	; 0x47
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff febc 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8004f20:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004f24:	4619      	mov	r1, r3
 8004f26:	4620      	mov	r0, r4
 8004f28:	f006 ffcd 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004f2c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff fece 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('H'), px_to_m(512), px_to_m(384)});
 8004f36:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f3a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004f3e:	681c      	ldr	r4, [r3, #0]
 8004f40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004f44:	eddf 0a9a 	vldr	s1, [pc, #616]	; 80051b0 <_ZN3jlb5GraphC1Ev+0x408>
 8004f48:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 80051b4 <_ZN3jlb5GraphC1Ev+0x40c>
 8004f4c:	2148      	movs	r1, #72	; 0x48
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff fea2 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8004f54:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f006 ffb3 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004f60:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff feb4 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('I'), px_to_m(512), px_to_m(512)});
 8004f6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f6e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004f72:	681c      	ldr	r4, [r3, #0]
 8004f74:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f78:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80051b4 <_ZN3jlb5GraphC1Ev+0x40c>
 8004f7c:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80051b4 <_ZN3jlb5GraphC1Ev+0x40c>
 8004f80:	2149      	movs	r1, #73	; 0x49
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff fe88 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8004f88:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f006 ff99 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004f94:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff fe9a 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('J'), px_to_m(512), px_to_m(640)});
 8004f9e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004fa2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004fa6:	681c      	ldr	r4, [r3, #0]
 8004fa8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004fac:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004fb0:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80051b4 <_ZN3jlb5GraphC1Ev+0x40c>
 8004fb4:	214a      	movs	r1, #74	; 0x4a
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fe6e 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8004fbc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f006 ff7f 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004fc8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fe80 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('K'), px_to_m(448), px_to_m(448)});
 8004fd2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004fd6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004fda:	681c      	ldr	r4, [r3, #0]
 8004fdc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004fe0:	eddf 0a71 	vldr	s1, [pc, #452]	; 80051a8 <_ZN3jlb5GraphC1Ev+0x400>
 8004fe4:	ed9f 0a70 	vldr	s0, [pc, #448]	; 80051a8 <_ZN3jlb5GraphC1Ev+0x400>
 8004fe8:	214b      	movs	r1, #75	; 0x4b
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fe54 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8004ff0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f006 ff65 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004ffc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fe66 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('L'), px_to_m(448), px_to_m(576)});
 8005006:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800500a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800500e:	681c      	ldr	r4, [r3, #0]
 8005010:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005014:	eddf 0a69 	vldr	s1, [pc, #420]	; 80051bc <_ZN3jlb5GraphC1Ev+0x414>
 8005018:	ed9f 0a63 	vldr	s0, [pc, #396]	; 80051a8 <_ZN3jlb5GraphC1Ev+0x400>
 800501c:	214c      	movs	r1, #76	; 0x4c
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff fe3a 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8005024:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005028:	4619      	mov	r1, r3
 800502a:	4620      	mov	r0, r4
 800502c:	f006 ff4b 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005030:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff fe4c 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('M'), px_to_m(384), px_to_m(384)});
 800503a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800503e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005042:	681c      	ldr	r4, [r3, #0]
 8005044:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005048:	eddf 0a59 	vldr	s1, [pc, #356]	; 80051b0 <_ZN3jlb5GraphC1Ev+0x408>
 800504c:	ed9f 0a58 	vldr	s0, [pc, #352]	; 80051b0 <_ZN3jlb5GraphC1Ev+0x408>
 8005050:	214d      	movs	r1, #77	; 0x4d
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff fe20 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8005058:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800505c:	4619      	mov	r1, r3
 800505e:	4620      	mov	r0, r4
 8005060:	f006 ff31 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005064:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff fe32 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('N'), px_to_m(384), px_to_m(512)});
 800506e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005072:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005076:	681c      	ldr	r4, [r3, #0]
 8005078:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800507c:	eddf 0a4d 	vldr	s1, [pc, #308]	; 80051b4 <_ZN3jlb5GraphC1Ev+0x40c>
 8005080:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80051b0 <_ZN3jlb5GraphC1Ev+0x408>
 8005084:	214e      	movs	r1, #78	; 0x4e
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fe06 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 800508c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005090:	4619      	mov	r1, r3
 8005092:	4620      	mov	r0, r4
 8005094:	f006 ff17 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005098:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff fe18 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('O'), px_to_m(384), px_to_m(640)});
 80050a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050a6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80050aa:	681c      	ldr	r4, [r3, #0]
 80050ac:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80050b0:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80050b4:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80051b0 <_ZN3jlb5GraphC1Ev+0x408>
 80050b8:	214f      	movs	r1, #79	; 0x4f
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff fdec 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 80050c0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80050c4:	4619      	mov	r1, r3
 80050c6:	4620      	mov	r0, r4
 80050c8:	f006 fefd 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80050cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff fdfe 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('P'), px_to_m(320), px_to_m(320)});
 80050d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050da:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80050de:	681c      	ldr	r4, [r3, #0]
 80050e0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80050e4:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80050e8:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80050ec:	2150      	movs	r1, #80	; 0x50
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff fdd2 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 80050f4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80050f8:	4619      	mov	r1, r3
 80050fa:	4620      	mov	r0, r4
 80050fc:	f006 fee3 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005100:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff fde4 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('Q'), px_to_m(320), px_to_m(384)});
 800510a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800510e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005112:	681c      	ldr	r4, [r3, #0]
 8005114:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8005118:	eddf 0a25 	vldr	s1, [pc, #148]	; 80051b0 <_ZN3jlb5GraphC1Ev+0x408>
 800511c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005120:	2151      	movs	r1, #81	; 0x51
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff fdb8 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8005128:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800512c:	4619      	mov	r1, r3
 800512e:	4620      	mov	r0, r4
 8005130:	f006 fec9 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005134:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fdca 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('R'), px_to_m(320), px_to_m(448)});
 800513e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005142:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005146:	681c      	ldr	r4, [r3, #0]
 8005148:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800514c:	eddf 0a16 	vldr	s1, [pc, #88]	; 80051a8 <_ZN3jlb5GraphC1Ev+0x400>
 8005150:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005154:	2152      	movs	r1, #82	; 0x52
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff fd9e 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 800515c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005160:	4619      	mov	r1, r3
 8005162:	4620      	mov	r0, r4
 8005164:	f006 feaf 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005168:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff fdb0 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('S'), px_to_m(320), px_to_m(512)});
 8005172:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005176:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800517a:	681c      	ldr	r4, [r3, #0]
 800517c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8005180:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80051b4 <_ZN3jlb5GraphC1Ev+0x40c>
 8005184:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005188:	2153      	movs	r1, #83	; 0x53
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff fd84 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8005190:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8005194:	4619      	mov	r1, r3
 8005196:	4620      	mov	r0, r4
 8005198:	f006 fe95 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800519c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff fd96 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
 80051a6:	e011      	b.n	80051cc <_ZN3jlb5GraphC1Ev+0x424>
 80051a8:	40866667 	.word	0x40866667
 80051ac:	40d33334 	.word	0x40d33334
 80051b0:	40666667 	.word	0x40666667
 80051b4:	4099999a 	.word	0x4099999a
 80051b8:	40d33334 	.word	0x40d33334
 80051bc:	40accccd 	.word	0x40accccd
 80051c0:	4019999a 	.word	0x4019999a
 80051c4:	40866667 	.word	0x40866667
 80051c8:	3f666667 	.word	0x3f666667
            nodes.push_back(Node{static_cast<char>('T'), px_to_m(320), px_to_m(576)});
 80051cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051d0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80051d4:	681c      	ldr	r4, [r3, #0]
 80051d6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80051da:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 80051bc <_ZN3jlb5GraphC1Ev+0x414>
 80051de:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80051e2:	2154      	movs	r1, #84	; 0x54
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff fd57 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 80051ea:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80051ee:	4619      	mov	r1, r3
 80051f0:	4620      	mov	r0, r4
 80051f2:	f006 fe68 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80051f6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff fd69 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('U'), px_to_m(320), px_to_m(704)});
 8005200:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005204:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005208:	681c      	ldr	r4, [r3, #0]
 800520a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800520e:	ed5f 0a16 	vldr	s1, [pc, #-88]	; 80051b8 <_ZN3jlb5GraphC1Ev+0x410>
 8005212:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005216:	2155      	movs	r1, #85	; 0x55
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fd3d 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 800521e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8005222:	4619      	mov	r1, r3
 8005224:	4620      	mov	r0, r4
 8005226:	f006 fe4e 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800522a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff fd4f 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('V'), px_to_m(256), px_to_m(448)});
 8005234:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005238:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800523c:	681c      	ldr	r4, [r3, #0]
 800523e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005242:	ed5f 0a20 	vldr	s1, [pc, #-128]	; 80051c4 <_ZN3jlb5GraphC1Ev+0x41c>
 8005246:	ed1f 0a22 	vldr	s0, [pc, #-136]	; 80051c0 <_ZN3jlb5GraphC1Ev+0x418>
 800524a:	2156      	movs	r1, #86	; 0x56
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff fd23 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8005252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005256:	4619      	mov	r1, r3
 8005258:	4620      	mov	r0, r4
 800525a:	f006 fe34 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800525e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fd35 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('W'), px_to_m(256), px_to_m(576)});
 8005268:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800526c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005270:	681c      	ldr	r4, [r3, #0]
 8005272:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005276:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 80051bc <_ZN3jlb5GraphC1Ev+0x414>
 800527a:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 80051c0 <_ZN3jlb5GraphC1Ev+0x418>
 800527e:	2157      	movs	r1, #87	; 0x57
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fd09 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 8005286:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800528a:	4619      	mov	r1, r3
 800528c:	4620      	mov	r0, r4
 800528e:	f006 fe1a 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005292:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff fd1b 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('X'), px_to_m(96), px_to_m(448)});
 800529c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052a0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80052a4:	681c      	ldr	r4, [r3, #0]
 80052a6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80052aa:	ed5f 0a3a 	vldr	s1, [pc, #-232]	; 80051c4 <_ZN3jlb5GraphC1Ev+0x41c>
 80052ae:	ed1f 0a3a 	vldr	s0, [pc, #-232]	; 80051c8 <_ZN3jlb5GraphC1Ev+0x420>
 80052b2:	2158      	movs	r1, #88	; 0x58
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff fcef 	bl	8004c98 <_ZN3jlb4NodeC1Ecff>
 80052ba:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80052be:	4619      	mov	r1, r3
 80052c0:	4620      	mov	r0, r4
 80052c2:	f006 fe00 	bl	800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80052c6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff fd01 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>

            const auto UNIT           = SQUARE_LENGTH;
 80052d0:	4be9      	ldr	r3, [pc, #932]	; (8005678 <_ZN3jlb5GraphC1Ev+0x8d0>)
 80052d2:	f607 4264 	addw	r2, r7, #3172	; 0xc64
 80052d6:	6013      	str	r3, [r2, #0]
            const auto QUARTER_CIRCLE = 2 * UNIT * M_PI / 4.0f;
 80052d8:	a3e5      	add	r3, pc, #916	; (adr r3, 8005670 <_ZN3jlb5GraphC1Ev+0x8c8>)
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	f607 4158 	addw	r1, r7, #3160	; 0xc58
 80052e2:	e9c1 2300 	strd	r2, r3, [r1]

            this->operator[]('A').add_edge('C', Direction::LEFT, {'B', 'D'}, QUARTER_CIRCLE);
 80052e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052ea:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80052ee:	2141      	movs	r1, #65	; 0x41
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	f002 ff8c 	bl	800820e <_ZN3jlb5GraphixEc>
 80052f6:	4604      	mov	r4, r0
 80052f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052fc:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8005300:	4ade      	ldr	r2, [pc, #888]	; (800567c <_ZN3jlb5GraphC1Ev+0x8d4>)
 8005302:	8812      	ldrh	r2, [r2, #0]
 8005304:	801a      	strh	r2, [r3, #0]
 8005306:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800530a:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 800530e:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005318:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 800531c:	2202      	movs	r2, #2
 800531e:	605a      	str	r2, [r3, #4]
 8005320:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005324:	4618      	mov	r0, r3
 8005326:	f01b f83e 	bl	80203a6 <_ZNSaIcEC1Ev>
 800532a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800532e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005332:	f6a2 2214 	subw	r2, r2, #2580	; 0xa14
 8005336:	f507 7012 	add.w	r0, r7, #584	; 0x248
 800533a:	ca06      	ldmia	r2, {r1, r2}
 800533c:	f006 fdd4 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005340:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8005344:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 8005688 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005348:	2200      	movs	r2, #0
 800534a:	2143      	movs	r1, #67	; 0x43
 800534c:	4620      	mov	r0, r4
 800534e:	f7ff fcdc 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005352:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8005356:	4618      	mov	r0, r3
 8005358:	f006 fd34 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 800535c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005360:	4618      	mov	r0, r3
 8005362:	f01b f822 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('B', Direction::STRAIGHT, {'C'}, 2.0f * UNIT);
 8005366:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800536a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800536e:	2141      	movs	r1, #65	; 0x41
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	f002 ff4c 	bl	800820e <_ZN3jlb5GraphixEc>
 8005376:	4604      	mov	r4, r0
 8005378:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800537c:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 8005380:	2243      	movs	r2, #67	; 0x43
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005388:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 800538c:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005396:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 800539a:	2201      	movs	r2, #1
 800539c:	605a      	str	r2, [r3, #4]
 800539e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80053a2:	4618      	mov	r0, r3
 80053a4:	f01a ffff 	bl	80203a6 <_ZNSaIcEC1Ev>
 80053a8:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80053ac:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80053b0:	f6a2 12f8 	subw	r2, r2, #2552	; 0x9f8
 80053b4:	f507 7019 	add.w	r0, r7, #612	; 0x264
 80053b8:	ca06      	ldmia	r2, {r1, r2}
 80053ba:	f006 fd95 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80053be:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80053c2:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8005680 <_ZN3jlb5GraphC1Ev+0x8d8>
 80053c6:	2202      	movs	r2, #2
 80053c8:	2142      	movs	r1, #66	; 0x42
 80053ca:	4620      	mov	r0, r4
 80053cc:	f7ff fc9d 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80053d0:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80053d4:	4618      	mov	r0, r3
 80053d6:	f006 fcf5 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80053da:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80053de:	4618      	mov	r0, r3
 80053e0:	f01a ffe3 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('D', Direction::RIGHT, {'C'}, QUARTER_CIRCLE);
 80053e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053e8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80053ec:	2141      	movs	r1, #65	; 0x41
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	f002 ff0d 	bl	800820e <_ZN3jlb5GraphixEc>
 80053f4:	4604      	mov	r4, r0
 80053f6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053fa:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 80053fe:	2243      	movs	r2, #67	; 0x43
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005406:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 800540a:	f507 7225 	add.w	r2, r7, #660	; 0x294
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005414:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8005418:	2201      	movs	r2, #1
 800541a:	605a      	str	r2, [r3, #4]
 800541c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8005420:	4618      	mov	r0, r3
 8005422:	f01a ffc0 	bl	80203a6 <_ZNSaIcEC1Ev>
 8005426:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800542a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800542e:	f6a2 12dc 	subw	r2, r2, #2524	; 0x9dc
 8005432:	f507 7020 	add.w	r0, r7, #640	; 0x280
 8005436:	ca06      	ldmia	r2, {r1, r2}
 8005438:	f006 fd56 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800543c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8005440:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8005688 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005444:	2201      	movs	r2, #1
 8005446:	2144      	movs	r1, #68	; 0x44
 8005448:	4620      	mov	r0, r4
 800544a:	f7ff fc5e 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800544e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8005452:	4618      	mov	r0, r3
 8005454:	f006 fcb6 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005458:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800545c:	4618      	mov	r0, r3
 800545e:	f01a ffa4 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('A', Direction::STRAIGHT, {'E'}, 2.0f * UNIT);
 8005462:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005466:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800546a:	2142      	movs	r1, #66	; 0x42
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	f002 fece 	bl	800820e <_ZN3jlb5GraphixEc>
 8005472:	4604      	mov	r4, r0
 8005474:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005478:	f6a3 13b8 	subw	r3, r3, #2488	; 0x9b8
 800547c:	2245      	movs	r2, #69	; 0x45
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005484:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8005488:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005492:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8005496:	2201      	movs	r2, #1
 8005498:	605a      	str	r2, [r3, #4]
 800549a:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800549e:	4618      	mov	r0, r3
 80054a0:	f01a ff81 	bl	80203a6 <_ZNSaIcEC1Ev>
 80054a4:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80054a8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80054ac:	f5a2 621c 	sub.w	r2, r2, #2496	; 0x9c0
 80054b0:	f507 7027 	add.w	r0, r7, #668	; 0x29c
 80054b4:	ca06      	ldmia	r2, {r1, r2}
 80054b6:	f006 fd17 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80054ba:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80054be:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8005680 <_ZN3jlb5GraphC1Ev+0x8d8>
 80054c2:	2202      	movs	r2, #2
 80054c4:	2141      	movs	r1, #65	; 0x41
 80054c6:	4620      	mov	r0, r4
 80054c8:	f7ff fc1f 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80054cc:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80054d0:	4618      	mov	r0, r3
 80054d2:	f006 fc77 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80054d6:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80054da:	4618      	mov	r0, r3
 80054dc:	f01a ff65 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('E', Direction::RIGHT, {'A', 'D'}, QUARTER_CIRCLE);
 80054e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054e4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80054e8:	2142      	movs	r1, #66	; 0x42
 80054ea:	6818      	ldr	r0, [r3, #0]
 80054ec:	f002 fe8f 	bl	800820e <_ZN3jlb5GraphixEc>
 80054f0:	4604      	mov	r4, r0
 80054f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054f6:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 80054fa:	4a62      	ldr	r2, [pc, #392]	; (8005684 <_ZN3jlb5GraphC1Ev+0x8dc>)
 80054fc:	8812      	ldrh	r2, [r2, #0]
 80054fe:	801a      	strh	r2, [r3, #0]
 8005500:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005504:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8005508:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005512:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8005516:	2202      	movs	r2, #2
 8005518:	605a      	str	r2, [r3, #4]
 800551a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800551e:	4618      	mov	r0, r3
 8005520:	f01a ff41 	bl	80203a6 <_ZNSaIcEC1Ev>
 8005524:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005528:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800552c:	f6a2 12a4 	subw	r2, r2, #2468	; 0x9a4
 8005530:	f507 702e 	add.w	r0, r7, #696	; 0x2b8
 8005534:	ca06      	ldmia	r2, {r1, r2}
 8005536:	f006 fcd7 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800553a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800553e:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8005688 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005542:	2201      	movs	r2, #1
 8005544:	2145      	movs	r1, #69	; 0x45
 8005546:	4620      	mov	r0, r4
 8005548:	f7ff fbdf 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800554c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8005550:	4618      	mov	r0, r3
 8005552:	f006 fc37 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005556:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800555a:	4618      	mov	r0, r3
 800555c:	f01a ff25 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('D', Direction::LEFT, {'E'}, QUARTER_CIRCLE);
 8005560:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005564:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005568:	2142      	movs	r1, #66	; 0x42
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	f002 fe4f 	bl	800820e <_ZN3jlb5GraphixEc>
 8005570:	4604      	mov	r4, r0
 8005572:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005576:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 800557a:	2245      	movs	r2, #69	; 0x45
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005582:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8005586:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005590:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8005594:	2201      	movs	r2, #1
 8005596:	605a      	str	r2, [r3, #4]
 8005598:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 800559c:	4618      	mov	r0, r3
 800559e:	f01a ff02 	bl	80203a6 <_ZNSaIcEC1Ev>
 80055a2:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80055a6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80055aa:	f6a2 1288 	subw	r2, r2, #2440	; 0x988
 80055ae:	f507 7035 	add.w	r0, r7, #724	; 0x2d4
 80055b2:	ca06      	ldmia	r2, {r1, r2}
 80055b4:	f006 fc98 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80055b8:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80055bc:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8005688 <_ZN3jlb5GraphC1Ev+0x8e0>
 80055c0:	2200      	movs	r2, #0
 80055c2:	2144      	movs	r1, #68	; 0x44
 80055c4:	4620      	mov	r0, r4
 80055c6:	f7ff fba0 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80055ca:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80055ce:	4618      	mov	r0, r3
 80055d0:	f006 fbf8 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80055d4:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80055d8:	4618      	mov	r0, r3
 80055da:	f01a fee6 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('A', Direction::RIGHT, {'F'}, QUARTER_CIRCLE);
 80055de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055e2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80055e6:	2143      	movs	r1, #67	; 0x43
 80055e8:	6818      	ldr	r0, [r3, #0]
 80055ea:	f002 fe10 	bl	800820e <_ZN3jlb5GraphixEc>
 80055ee:	4604      	mov	r4, r0
 80055f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055f4:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 80055f8:	2246      	movs	r2, #70	; 0x46
 80055fa:	701a      	strb	r2, [r3, #0]
 80055fc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005600:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8005604:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800560e:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8005612:	2201      	movs	r2, #1
 8005614:	605a      	str	r2, [r3, #4]
 8005616:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800561a:	4618      	mov	r0, r3
 800561c:	f01a fec3 	bl	80203a6 <_ZNSaIcEC1Ev>
 8005620:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8005624:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005628:	f6a2 126c 	subw	r2, r2, #2412	; 0x96c
 800562c:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8005630:	ca06      	ldmia	r2, {r1, r2}
 8005632:	f006 fc59 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005636:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800563a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005688 <_ZN3jlb5GraphC1Ev+0x8e0>
 800563e:	2201      	movs	r2, #1
 8005640:	2141      	movs	r1, #65	; 0x41
 8005642:	4620      	mov	r0, r4
 8005644:	f7ff fb61 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005648:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800564c:	4618      	mov	r0, r3
 800564e:	f006 fbb9 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005652:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8005656:	4618      	mov	r0, r3
 8005658:	f01a fea7 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('F', Direction::LEFT, {'A'}, QUARTER_CIRCLE);
 800565c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005660:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005664:	2143      	movs	r1, #67	; 0x43
 8005666:	6818      	ldr	r0, [r3, #0]
 8005668:	f002 fdd1 	bl	800820e <_ZN3jlb5GraphixEc>
 800566c:	e00e      	b.n	800568c <_ZN3jlb5GraphC1Ev+0x8e4>
 800566e:	bf00      	nop
 8005670:	460698c7 	.word	0x460698c7
 8005674:	3fee28c7 	.word	0x3fee28c7
 8005678:	3f19999a 	.word	0x3f19999a
 800567c:	08023e20 	.word	0x08023e20
 8005680:	3f99999a 	.word	0x3f99999a
 8005684:	08023e24 	.word	0x08023e24
 8005688:	3f71463a 	.word	0x3f71463a
 800568c:	4604      	mov	r4, r0
 800568e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005692:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8005696:	2241      	movs	r2, #65	; 0x41
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800569e:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 80056a2:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056ac:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 80056b0:	2201      	movs	r2, #1
 80056b2:	605a      	str	r2, [r3, #4]
 80056b4:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80056b8:	4618      	mov	r0, r3
 80056ba:	f01a fe74 	bl	80203a6 <_ZNSaIcEC1Ev>
 80056be:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80056c2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80056c6:	f5a2 6215 	sub.w	r2, r2, #2384	; 0x950
 80056ca:	f507 7043 	add.w	r0, r7, #780	; 0x30c
 80056ce:	ca06      	ldmia	r2, {r1, r2}
 80056d0:	f006 fc0a 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80056d4:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80056d8:	ed1f 0a15 	vldr	s0, [pc, #-84]	; 8005688 <_ZN3jlb5GraphC1Ev+0x8e0>
 80056dc:	2200      	movs	r2, #0
 80056de:	2146      	movs	r1, #70	; 0x46
 80056e0:	4620      	mov	r0, r4
 80056e2:	f7ff fb12 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80056e6:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80056ea:	4618      	mov	r0, r3
 80056ec:	f006 fb6a 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80056f0:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80056f4:	4618      	mov	r0, r3
 80056f6:	f01a fe58 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('A', Direction::LEFT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 80056fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056fe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005702:	2144      	movs	r1, #68	; 0x44
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	f002 fd82 	bl	800820e <_ZN3jlb5GraphixEc>
 800570a:	4604      	mov	r4, r0
 800570c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005710:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8005714:	4ae5      	ldr	r2, [pc, #916]	; (8005aac <_ZN3jlb5GraphC1Ev+0xd04>)
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	4611      	mov	r1, r2
 800571a:	8019      	strh	r1, [r3, #0]
 800571c:	3302      	adds	r3, #2
 800571e:	0c12      	lsrs	r2, r2, #16
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005726:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 800572a:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005734:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8005738:	2203      	movs	r2, #3
 800573a:	605a      	str	r2, [r3, #4]
 800573c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8005740:	4618      	mov	r0, r3
 8005742:	f01a fe30 	bl	80203a6 <_ZNSaIcEC1Ev>
 8005746:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800574a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800574e:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 8005752:	f507 704a 	add.w	r0, r7, #808	; 0x328
 8005756:	ca06      	ldmia	r2, {r1, r2}
 8005758:	f006 fbc6 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800575c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005760:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8005abc <_ZN3jlb5GraphC1Ev+0xd14>
 8005764:	2200      	movs	r2, #0
 8005766:	2141      	movs	r1, #65	; 0x41
 8005768:	4620      	mov	r0, r4
 800576a:	f7ff face 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800576e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005772:	4618      	mov	r0, r3
 8005774:	f006 fb26 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005778:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800577c:	4618      	mov	r0, r3
 800577e:	f01a fe14 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('B', Direction::RIGHT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 8005782:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005786:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800578a:	2144      	movs	r1, #68	; 0x44
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	f002 fd3e 	bl	800820e <_ZN3jlb5GraphixEc>
 8005792:	4604      	mov	r4, r0
 8005794:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005798:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 800579c:	4ac3      	ldr	r2, [pc, #780]	; (8005aac <_ZN3jlb5GraphC1Ev+0xd04>)
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	4611      	mov	r1, r2
 80057a2:	8019      	strh	r1, [r3, #0]
 80057a4:	3302      	adds	r3, #2
 80057a6:	0c12      	lsrs	r2, r2, #16
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057ae:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 80057b2:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057bc:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 80057c0:	2203      	movs	r2, #3
 80057c2:	605a      	str	r2, [r3, #4]
 80057c4:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80057c8:	4618      	mov	r0, r3
 80057ca:	f01a fdec 	bl	80203a6 <_ZNSaIcEC1Ev>
 80057ce:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80057d2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80057d6:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 80057da:	f507 7051 	add.w	r0, r7, #836	; 0x344
 80057de:	ca06      	ldmia	r2, {r1, r2}
 80057e0:	f006 fb82 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80057e4:	f507 7351 	add.w	r3, r7, #836	; 0x344
 80057e8:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8005abc <_ZN3jlb5GraphC1Ev+0xd14>
 80057ec:	2201      	movs	r2, #1
 80057ee:	2142      	movs	r1, #66	; 0x42
 80057f0:	4620      	mov	r0, r4
 80057f2:	f7ff fa8a 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80057f6:	f507 7351 	add.w	r3, r7, #836	; 0x344
 80057fa:	4618      	mov	r0, r3
 80057fc:	f006 fae2 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005800:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8005804:	4618      	mov	r0, r3
 8005806:	f01a fdd0 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('G', Direction::LEFT, {'A', 'B'}, QUARTER_CIRCLE);
 800580a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800580e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005812:	2144      	movs	r1, #68	; 0x44
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	f002 fcfa 	bl	800820e <_ZN3jlb5GraphixEc>
 800581a:	4604      	mov	r4, r0
 800581c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005820:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 8005824:	4aa2      	ldr	r2, [pc, #648]	; (8005ab0 <_ZN3jlb5GraphC1Ev+0xd08>)
 8005826:	8812      	ldrh	r2, [r2, #0]
 8005828:	801a      	strh	r2, [r3, #0]
 800582a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800582e:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8005832:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800583c:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8005840:	2202      	movs	r2, #2
 8005842:	605a      	str	r2, [r3, #4]
 8005844:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8005848:	4618      	mov	r0, r3
 800584a:	f01a fdac 	bl	80203a6 <_ZNSaIcEC1Ev>
 800584e:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8005852:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005856:	f6a2 02fc 	subw	r2, r2, #2300	; 0x8fc
 800585a:	f507 7058 	add.w	r0, r7, #864	; 0x360
 800585e:	ca06      	ldmia	r2, {r1, r2}
 8005860:	f006 fb42 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005864:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8005868:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8005abc <_ZN3jlb5GraphC1Ev+0xd14>
 800586c:	2200      	movs	r2, #0
 800586e:	2147      	movs	r1, #71	; 0x47
 8005870:	4620      	mov	r0, r4
 8005872:	f7ff fa4a 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005876:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800587a:	4618      	mov	r0, r3
 800587c:	f006 faa2 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005880:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8005884:	4618      	mov	r0, r3
 8005886:	f01a fd90 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('I', Direction::STRAIGHT, {'A', 'B'}, 2.0f * UNIT);
 800588a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800588e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005892:	2144      	movs	r1, #68	; 0x44
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	f002 fcba 	bl	800820e <_ZN3jlb5GraphixEc>
 800589a:	4604      	mov	r4, r0
 800589c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058a0:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 80058a4:	4a82      	ldr	r2, [pc, #520]	; (8005ab0 <_ZN3jlb5GraphC1Ev+0xd08>)
 80058a6:	8812      	ldrh	r2, [r2, #0]
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058ae:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 80058b2:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058bc:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 80058c0:	2202      	movs	r2, #2
 80058c2:	605a      	str	r2, [r3, #4]
 80058c4:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80058c8:	4618      	mov	r0, r3
 80058ca:	f01a fd6c 	bl	80203a6 <_ZNSaIcEC1Ev>
 80058ce:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80058d2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80058d6:	f5a2 620e 	sub.w	r2, r2, #2272	; 0x8e0
 80058da:	f507 705f 	add.w	r0, r7, #892	; 0x37c
 80058de:	ca06      	ldmia	r2, {r1, r2}
 80058e0:	f006 fb02 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80058e4:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80058e8:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8005ab4 <_ZN3jlb5GraphC1Ev+0xd0c>
 80058ec:	2202      	movs	r2, #2
 80058ee:	2149      	movs	r1, #73	; 0x49
 80058f0:	4620      	mov	r0, r4
 80058f2:	f7ff fa0a 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80058f6:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80058fa:	4618      	mov	r0, r3
 80058fc:	f006 fa62 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005900:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8005904:	4618      	mov	r0, r3
 8005906:	f01a fd50 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('F', Direction::RIGHT, {'A', 'B'}, QUARTER_CIRCLE);
 800590a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800590e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005912:	2144      	movs	r1, #68	; 0x44
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	f002 fc7a 	bl	800820e <_ZN3jlb5GraphixEc>
 800591a:	4604      	mov	r4, r0
 800591c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005920:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 8005924:	4a62      	ldr	r2, [pc, #392]	; (8005ab0 <_ZN3jlb5GraphC1Ev+0xd08>)
 8005926:	8812      	ldrh	r2, [r2, #0]
 8005928:	801a      	strh	r2, [r3, #0]
 800592a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800592e:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8005932:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800593c:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8005940:	2202      	movs	r2, #2
 8005942:	605a      	str	r2, [r3, #4]
 8005944:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005948:	4618      	mov	r0, r3
 800594a:	f01a fd2c 	bl	80203a6 <_ZNSaIcEC1Ev>
 800594e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005952:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005956:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 800595a:	f507 7066 	add.w	r0, r7, #920	; 0x398
 800595e:	ca06      	ldmia	r2, {r1, r2}
 8005960:	f006 fac2 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005964:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8005968:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8005abc <_ZN3jlb5GraphC1Ev+0xd14>
 800596c:	2201      	movs	r2, #1
 800596e:	2146      	movs	r1, #70	; 0x46
 8005970:	4620      	mov	r0, r4
 8005972:	f7ff f9ca 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005976:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800597a:	4618      	mov	r0, r3
 800597c:	f006 fa22 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005980:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005984:	4618      	mov	r0, r3
 8005986:	f01a fd10 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('B', Direction::LEFT, {'G', 'J'}, QUARTER_CIRCLE);
 800598a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800598e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005992:	2145      	movs	r1, #69	; 0x45
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	f002 fc3a 	bl	800820e <_ZN3jlb5GraphixEc>
 800599a:	4604      	mov	r4, r0
 800599c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059a0:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 80059a4:	4a44      	ldr	r2, [pc, #272]	; (8005ab8 <_ZN3jlb5GraphC1Ev+0xd10>)
 80059a6:	8812      	ldrh	r2, [r2, #0]
 80059a8:	801a      	strh	r2, [r3, #0]
 80059aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059ae:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 80059b2:	f507 7272 	add.w	r2, r7, #968	; 0x3c8
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059bc:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 80059c0:	2202      	movs	r2, #2
 80059c2:	605a      	str	r2, [r3, #4]
 80059c4:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80059c8:	4618      	mov	r0, r3
 80059ca:	f01a fcec 	bl	80203a6 <_ZNSaIcEC1Ev>
 80059ce:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80059d2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80059d6:	f6a2 02a8 	subw	r2, r2, #2216	; 0x8a8
 80059da:	f507 706d 	add.w	r0, r7, #948	; 0x3b4
 80059de:	ca06      	ldmia	r2, {r1, r2}
 80059e0:	f006 fa82 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80059e4:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 80059e8:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8005abc <_ZN3jlb5GraphC1Ev+0xd14>
 80059ec:	2200      	movs	r2, #0
 80059ee:	2142      	movs	r1, #66	; 0x42
 80059f0:	4620      	mov	r0, r4
 80059f2:	f7ff f98a 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80059f6:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 80059fa:	4618      	mov	r0, r3
 80059fc:	f006 f9e2 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005a00:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8005a04:	4618      	mov	r0, r3
 8005a06:	f01a fcd0 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('J', Direction::STRAIGHT, {'B'}, 2.0f * UNIT);
 8005a0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a0e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005a12:	2145      	movs	r1, #69	; 0x45
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	f002 fbfa 	bl	800820e <_ZN3jlb5GraphixEc>
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a20:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 8005a24:	2242      	movs	r2, #66	; 0x42
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a2c:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8005a30:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a3a:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8005a3e:	2201      	movs	r2, #1
 8005a40:	605a      	str	r2, [r3, #4]
 8005a42:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8005a46:	4618      	mov	r0, r3
 8005a48:	f01a fcad 	bl	80203a6 <_ZNSaIcEC1Ev>
 8005a4c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8005a50:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005a54:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8005a58:	f507 7074 	add.w	r0, r7, #976	; 0x3d0
 8005a5c:	ca06      	ldmia	r2, {r1, r2}
 8005a5e:	f006 fa43 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005a62:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005a66:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005ab4 <_ZN3jlb5GraphC1Ev+0xd0c>
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	214a      	movs	r1, #74	; 0x4a
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f7ff f94b 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005a74:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f006 f9a3 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005a7e:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8005a82:	4618      	mov	r0, r3
 8005a84:	f01a fc91 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('G', Direction::RIGHT, {'B'}, QUARTER_CIRCLE);
 8005a88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a8c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005a90:	2145      	movs	r1, #69	; 0x45
 8005a92:	6818      	ldr	r0, [r3, #0]
 8005a94:	f002 fbbb 	bl	800820e <_ZN3jlb5GraphixEc>
 8005a98:	4604      	mov	r4, r0
 8005a9a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a9e:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8005aa2:	2242      	movs	r2, #66	; 0x42
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005aaa:	e009      	b.n	8005ac0 <_ZN3jlb5GraphC1Ev+0xd18>
 8005aac:	08023e28 	.word	0x08023e28
 8005ab0:	08023e2c 	.word	0x08023e2c
 8005ab4:	3f99999a 	.word	0x3f99999a
 8005ab8:	08023e30 	.word	0x08023e30
 8005abc:	3f71463a 	.word	0x3f71463a
 8005ac0:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 8005ac4:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ace:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	605a      	str	r2, [r3, #4]
 8005ad6:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8005ada:	4618      	mov	r0, r3
 8005adc:	f01a fc63 	bl	80203a6 <_ZNSaIcEC1Ev>
 8005ae0:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8005ae4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005ae8:	f5a2 6207 	sub.w	r2, r2, #2160	; 0x870
 8005aec:	f507 707b 	add.w	r0, r7, #1004	; 0x3ec
 8005af0:	ca06      	ldmia	r2, {r1, r2}
 8005af2:	f006 f9f9 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005af6:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8005afa:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8005abc <_ZN3jlb5GraphC1Ev+0xd14>
 8005afe:	2201      	movs	r2, #1
 8005b00:	2147      	movs	r1, #71	; 0x47
 8005b02:	4620      	mov	r0, r4
 8005b04:	f7ff f901 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005b08:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f006 f959 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005b12:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8005b16:	4618      	mov	r0, r3
 8005b18:	f01a fc47 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('C', Direction::RIGHT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 8005b1c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b20:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005b24:	2146      	movs	r1, #70	; 0x46
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	f002 fb71 	bl	800820e <_ZN3jlb5GraphixEc>
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b32:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8005b36:	4ae4      	ldr	r2, [pc, #912]	; (8005ec8 <_ZN3jlb5GraphC1Ev+0x1120>)
 8005b38:	6812      	ldr	r2, [r2, #0]
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	8019      	strh	r1, [r3, #0]
 8005b3e:	3302      	adds	r3, #2
 8005b40:	0c12      	lsrs	r2, r2, #16
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b48:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8005b4c:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b56:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8005b5a:	2203      	movs	r2, #3
 8005b5c:	605a      	str	r2, [r3, #4]
 8005b5e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005b62:	4618      	mov	r0, r3
 8005b64:	f01a fc1f 	bl	80203a6 <_ZNSaIcEC1Ev>
 8005b68:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005b6c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005b70:	f6a2 0254 	subw	r2, r2, #2132	; 0x854
 8005b74:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 8005b78:	ca06      	ldmia	r2, {r1, r2}
 8005b7a:	f006 f9b5 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005b7e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8005b82:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8005ecc <_ZN3jlb5GraphC1Ev+0x1124>
 8005b86:	2201      	movs	r2, #1
 8005b88:	2143      	movs	r1, #67	; 0x43
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f7ff f8bd 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005b90:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8005b94:	4618      	mov	r0, r3
 8005b96:	f006 f915 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005b9a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f01a fc03 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('D', Direction::LEFT, {'C', 'H'}, QUARTER_CIRCLE);
 8005ba4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ba8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005bac:	2146      	movs	r1, #70	; 0x46
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	f002 fb2d 	bl	800820e <_ZN3jlb5GraphixEc>
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bba:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 8005bbe:	4ac4      	ldr	r2, [pc, #784]	; (8005ed0 <_ZN3jlb5GraphC1Ev+0x1128>)
 8005bc0:	8812      	ldrh	r2, [r2, #0]
 8005bc2:	801a      	strh	r2, [r3, #0]
 8005bc4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bc8:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8005bcc:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bd6:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8005bda:	2202      	movs	r2, #2
 8005bdc:	605a      	str	r2, [r3, #4]
 8005bde:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8005be2:	4618      	mov	r0, r3
 8005be4:	f01a fbdf 	bl	80203a6 <_ZNSaIcEC1Ev>
 8005be8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8005bec:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005bf0:	f6a2 0238 	subw	r2, r2, #2104	; 0x838
 8005bf4:	f207 4024 	addw	r0, r7, #1060	; 0x424
 8005bf8:	ca06      	ldmia	r2, {r1, r2}
 8005bfa:	f006 f975 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005bfe:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8005c02:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8005ecc <_ZN3jlb5GraphC1Ev+0x1124>
 8005c06:	2200      	movs	r2, #0
 8005c08:	2144      	movs	r1, #68	; 0x44
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	f7ff f87d 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005c10:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8005c14:	4618      	mov	r0, r3
 8005c16:	f006 f8d5 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005c1a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f01a fbc3 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('G', Direction::STRAIGHT, {'C', 'H'}, 2.0f * UNIT);
 8005c24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c28:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005c2c:	2146      	movs	r1, #70	; 0x46
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	f002 faed 	bl	800820e <_ZN3jlb5GraphixEc>
 8005c34:	4604      	mov	r4, r0
 8005c36:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c3a:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8005c3e:	4aa4      	ldr	r2, [pc, #656]	; (8005ed0 <_ZN3jlb5GraphC1Ev+0x1128>)
 8005c40:	8812      	ldrh	r2, [r2, #0]
 8005c42:	801a      	strh	r2, [r3, #0]
 8005c44:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c48:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8005c4c:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c56:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	605a      	str	r2, [r3, #4]
 8005c5e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8005c62:	4618      	mov	r0, r3
 8005c64:	f01a fb9f 	bl	80203a6 <_ZNSaIcEC1Ev>
 8005c68:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8005c6c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005c70:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 8005c74:	f507 6088 	add.w	r0, r7, #1088	; 0x440
 8005c78:	ca06      	ldmia	r2, {r1, r2}
 8005c7a:	f006 f935 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005c7e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8005c82:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8005ed4 <_ZN3jlb5GraphC1Ev+0x112c>
 8005c86:	2202      	movs	r2, #2
 8005c88:	2147      	movs	r1, #71	; 0x47
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f7ff f83d 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005c90:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8005c94:	4618      	mov	r0, r3
 8005c96:	f006 f895 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005c9a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f01a fb83 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('I', Direction::RIGHT, {'C', 'H'}, QUARTER_CIRCLE);
 8005ca4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ca8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005cac:	2146      	movs	r1, #70	; 0x46
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	f002 faad 	bl	800820e <_ZN3jlb5GraphixEc>
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cba:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8005cbe:	4a84      	ldr	r2, [pc, #528]	; (8005ed0 <_ZN3jlb5GraphC1Ev+0x1128>)
 8005cc0:	8812      	ldrh	r2, [r2, #0]
 8005cc2:	801a      	strh	r2, [r3, #0]
 8005cc4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cc8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005ccc:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cd6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005cda:	2202      	movs	r2, #2
 8005cdc:	605a      	str	r2, [r3, #4]
 8005cde:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f01a fb5f 	bl	80203a6 <_ZNSaIcEC1Ev>
 8005ce8:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8005cec:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005cf0:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8005cf4:	f207 405c 	addw	r0, r7, #1116	; 0x45c
 8005cf8:	ca06      	ldmia	r2, {r1, r2}
 8005cfa:	f006 f8f5 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005cfe:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8005d02:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8005ecc <_ZN3jlb5GraphC1Ev+0x1124>
 8005d06:	2201      	movs	r2, #1
 8005d08:	2149      	movs	r1, #73	; 0x49
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f7fe fffd 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005d10:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8005d14:	4618      	mov	r0, r3
 8005d16:	f006 f855 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005d1a:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f01a fb43 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('H', Direction::LEFT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 8005d24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d28:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005d2c:	2146      	movs	r1, #70	; 0x46
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	f002 fa6d 	bl	800820e <_ZN3jlb5GraphixEc>
 8005d34:	4604      	mov	r4, r0
 8005d36:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d3a:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8005d3e:	4a62      	ldr	r2, [pc, #392]	; (8005ec8 <_ZN3jlb5GraphC1Ev+0x1120>)
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	4611      	mov	r1, r2
 8005d44:	8019      	strh	r1, [r3, #0]
 8005d46:	3302      	adds	r3, #2
 8005d48:	0c12      	lsrs	r2, r2, #16
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d50:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8005d54:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d5e:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8005d62:	2203      	movs	r2, #3
 8005d64:	605a      	str	r2, [r3, #4]
 8005d66:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f01a fb1b 	bl	80203a6 <_ZNSaIcEC1Ev>
 8005d70:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8005d74:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005d78:	f2a2 72e4 	subw	r2, r2, #2020	; 0x7e4
 8005d7c:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 8005d80:	ca06      	ldmia	r2, {r1, r2}
 8005d82:	f006 f8b1 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005d86:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8005d8a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8005ecc <_ZN3jlb5GraphC1Ev+0x1124>
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2148      	movs	r1, #72	; 0x48
 8005d92:	4620      	mov	r0, r4
 8005d94:	f7fe ffb9 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005d98:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f006 f811 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005da2:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8005da6:	4618      	mov	r0, r3
 8005da8:	f01a faff 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('F', Direction::STRAIGHT, {'E', 'J'}, 2.0f * UNIT);
 8005dac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005db0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005db4:	2147      	movs	r1, #71	; 0x47
 8005db6:	6818      	ldr	r0, [r3, #0]
 8005db8:	f002 fa29 	bl	800820e <_ZN3jlb5GraphixEc>
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005dc2:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 8005dc6:	4a44      	ldr	r2, [pc, #272]	; (8005ed8 <_ZN3jlb5GraphC1Ev+0x1130>)
 8005dc8:	8812      	ldrh	r2, [r2, #0]
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005dd0:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8005dd4:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005dde:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8005de2:	2202      	movs	r2, #2
 8005de4:	605a      	str	r2, [r3, #4]
 8005de6:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8005dea:	4618      	mov	r0, r3
 8005dec:	f01a fadb 	bl	80203a6 <_ZNSaIcEC1Ev>
 8005df0:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8005df4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005df8:	f5a2 62f9 	sub.w	r2, r2, #1992	; 0x7c8
 8005dfc:	f207 4094 	addw	r0, r7, #1172	; 0x494
 8005e00:	ca06      	ldmia	r2, {r1, r2}
 8005e02:	f006 f871 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005e06:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8005e0a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8005ed4 <_ZN3jlb5GraphC1Ev+0x112c>
 8005e0e:	2202      	movs	r2, #2
 8005e10:	2146      	movs	r1, #70	; 0x46
 8005e12:	4620      	mov	r0, r4
 8005e14:	f7fe ff79 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005e18:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f005 ffd1 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005e22:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8005e26:	4618      	mov	r0, r3
 8005e28:	f01a fabf 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('D', Direction::RIGHT, {'E', 'J'}, QUARTER_CIRCLE);
 8005e2c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e30:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005e34:	2147      	movs	r1, #71	; 0x47
 8005e36:	6818      	ldr	r0, [r3, #0]
 8005e38:	f002 f9e9 	bl	800820e <_ZN3jlb5GraphixEc>
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e42:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 8005e46:	4a24      	ldr	r2, [pc, #144]	; (8005ed8 <_ZN3jlb5GraphC1Ev+0x1130>)
 8005e48:	8812      	ldrh	r2, [r2, #0]
 8005e4a:	801a      	strh	r2, [r3, #0]
 8005e4c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e50:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8005e54:	f207 42c4 	addw	r2, r7, #1220	; 0x4c4
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e5e:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8005e62:	2202      	movs	r2, #2
 8005e64:	605a      	str	r2, [r3, #4]
 8005e66:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f01a fa9b 	bl	80203a6 <_ZNSaIcEC1Ev>
 8005e70:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8005e74:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005e78:	f2a2 72ac 	subw	r2, r2, #1964	; 0x7ac
 8005e7c:	f507 6096 	add.w	r0, r7, #1200	; 0x4b0
 8005e80:	ca06      	ldmia	r2, {r1, r2}
 8005e82:	f006 f831 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005e86:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8005e8a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005ecc <_ZN3jlb5GraphC1Ev+0x1124>
 8005e8e:	2201      	movs	r2, #1
 8005e90:	2144      	movs	r1, #68	; 0x44
 8005e92:	4620      	mov	r0, r4
 8005e94:	f7fe ff39 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005e98:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f005 ff91 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005ea2:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f01a fa7f 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('E', Direction::LEFT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 8005eac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005eb0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005eb4:	2147      	movs	r1, #71	; 0x47
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	f002 f9a9 	bl	800820e <_ZN3jlb5GraphixEc>
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ec2:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 8005ec6:	e009      	b.n	8005edc <_ZN3jlb5GraphC1Ev+0x1134>
 8005ec8:	08023e34 	.word	0x08023e34
 8005ecc:	3f71463a 	.word	0x3f71463a
 8005ed0:	08023e38 	.word	0x08023e38
 8005ed4:	3f99999a 	.word	0x3f99999a
 8005ed8:	08023e3c 	.word	0x08023e3c
 8005edc:	4ae6      	ldr	r2, [pc, #920]	; (8006278 <_ZN3jlb5GraphC1Ev+0x14d0>)
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	8019      	strh	r1, [r3, #0]
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	0c12      	lsrs	r2, r2, #16
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005eee:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8005ef2:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005efc:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8005f00:	2203      	movs	r2, #3
 8005f02:	605a      	str	r2, [r3, #4]
 8005f04:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f01a fa4c 	bl	80203a6 <_ZNSaIcEC1Ev>
 8005f0e:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8005f12:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005f16:	f5a2 62f2 	sub.w	r2, r2, #1936	; 0x790
 8005f1a:	f207 40cc 	addw	r0, r7, #1228	; 0x4cc
 8005f1e:	ca06      	ldmia	r2, {r1, r2}
 8005f20:	f005 ffe2 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005f24:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8005f28:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 800627c <_ZN3jlb5GraphC1Ev+0x14d4>
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2145      	movs	r1, #69	; 0x45
 8005f30:	4620      	mov	r0, r4
 8005f32:	f7fe feea 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005f36:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f005 ff42 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005f40:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8005f44:	4618      	mov	r0, r3
 8005f46:	f01a fa30 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('J', Direction::RIGHT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 8005f4a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f4e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005f52:	2147      	movs	r1, #71	; 0x47
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	f002 f95a 	bl	800820e <_ZN3jlb5GraphixEc>
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f60:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8005f64:	4ac4      	ldr	r2, [pc, #784]	; (8006278 <_ZN3jlb5GraphC1Ev+0x14d0>)
 8005f66:	6812      	ldr	r2, [r2, #0]
 8005f68:	4611      	mov	r1, r2
 8005f6a:	8019      	strh	r1, [r3, #0]
 8005f6c:	3302      	adds	r3, #2
 8005f6e:	0c12      	lsrs	r2, r2, #16
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f76:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8005f7a:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f84:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8005f88:	2203      	movs	r2, #3
 8005f8a:	605a      	str	r2, [r3, #4]
 8005f8c:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8005f90:	4618      	mov	r0, r3
 8005f92:	f01a fa08 	bl	80203a6 <_ZNSaIcEC1Ev>
 8005f96:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8005f9a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005f9e:	f2a2 7274 	subw	r2, r2, #1908	; 0x774
 8005fa2:	f507 609d 	add.w	r0, r7, #1256	; 0x4e8
 8005fa6:	ca06      	ldmia	r2, {r1, r2}
 8005fa8:	f005 ff9e 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005fac:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005fb0:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 800627c <_ZN3jlb5GraphC1Ev+0x14d4>
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	214a      	movs	r1, #74	; 0x4a
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f7fe fea6 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005fbe:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f005 fefe 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8005fc8:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f01a f9ec 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('I', Direction::LEFT, {'E', 'J'}, QUARTER_CIRCLE);
 8005fd2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fd6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005fda:	2147      	movs	r1, #71	; 0x47
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	f002 f916 	bl	800820e <_ZN3jlb5GraphixEc>
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fe8:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 8005fec:	4aa4      	ldr	r2, [pc, #656]	; (8006280 <_ZN3jlb5GraphC1Ev+0x14d8>)
 8005fee:	8812      	ldrh	r2, [r2, #0]
 8005ff0:	801a      	strh	r2, [r3, #0]
 8005ff2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ff6:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8005ffa:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006004:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8006008:	2202      	movs	r2, #2
 800600a:	605a      	str	r2, [r3, #4]
 800600c:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8006010:	4618      	mov	r0, r3
 8006012:	f01a f9c8 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006016:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 800601a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800601e:	f5a2 62eb 	sub.w	r2, r2, #1880	; 0x758
 8006022:	f207 5004 	addw	r0, r7, #1284	; 0x504
 8006026:	ca06      	ldmia	r2, {r1, r2}
 8006028:	f005 ff5e 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800602c:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8006030:	ed9f 0a92 	vldr	s0, [pc, #584]	; 800627c <_ZN3jlb5GraphC1Ev+0x14d4>
 8006034:	2200      	movs	r2, #0
 8006036:	2149      	movs	r1, #73	; 0x49
 8006038:	4620      	mov	r0, r4
 800603a:	f7fe fe66 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800603e:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8006042:	4618      	mov	r0, r3
 8006044:	f005 febe 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006048:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 800604c:	4618      	mov	r0, r3
 800604e:	f01a f9ac 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('F', Direction::RIGHT, {'K', 'M'}, QUARTER_CIRCLE);
 8006052:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006056:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800605a:	2148      	movs	r1, #72	; 0x48
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	f002 f8d6 	bl	800820e <_ZN3jlb5GraphixEc>
 8006062:	4604      	mov	r4, r0
 8006064:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006068:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 800606c:	4a85      	ldr	r2, [pc, #532]	; (8006284 <_ZN3jlb5GraphC1Ev+0x14dc>)
 800606e:	8812      	ldrh	r2, [r2, #0]
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006076:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 800607a:	f207 5234 	addw	r2, r7, #1332	; 0x534
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006084:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8006088:	2202      	movs	r2, #2
 800608a:	605a      	str	r2, [r3, #4]
 800608c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8006090:	4618      	mov	r0, r3
 8006092:	f01a f988 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006096:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800609a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800609e:	f2a2 723c 	subw	r2, r2, #1852	; 0x73c
 80060a2:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 80060a6:	ca06      	ldmia	r2, {r1, r2}
 80060a8:	f005 ff1e 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80060ac:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80060b0:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800627c <_ZN3jlb5GraphC1Ev+0x14d4>
 80060b4:	2201      	movs	r2, #1
 80060b6:	2146      	movs	r1, #70	; 0x46
 80060b8:	4620      	mov	r0, r4
 80060ba:	f7fe fe26 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80060be:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80060c2:	4618      	mov	r0, r3
 80060c4:	f005 fe7e 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80060c8:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80060cc:	4618      	mov	r0, r3
 80060ce:	f01a f96c 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('K', Direction::LEFT, {'F'}, QUARTER_CIRCLE);
 80060d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060d6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80060da:	2148      	movs	r1, #72	; 0x48
 80060dc:	6818      	ldr	r0, [r3, #0]
 80060de:	f002 f896 	bl	800820e <_ZN3jlb5GraphixEc>
 80060e2:	4604      	mov	r4, r0
 80060e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060e8:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 80060ec:	2246      	movs	r2, #70	; 0x46
 80060ee:	701a      	strb	r2, [r3, #0]
 80060f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060f4:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 80060f8:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006102:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8006106:	2201      	movs	r2, #1
 8006108:	605a      	str	r2, [r3, #4]
 800610a:	f207 5354 	addw	r3, r7, #1364	; 0x554
 800610e:	4618      	mov	r0, r3
 8006110:	f01a f949 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006114:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8006118:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800611c:	f5a2 62e4 	sub.w	r2, r2, #1824	; 0x720
 8006120:	f207 503c 	addw	r0, r7, #1340	; 0x53c
 8006124:	ca06      	ldmia	r2, {r1, r2}
 8006126:	f005 fedf 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800612a:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 800612e:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800627c <_ZN3jlb5GraphC1Ev+0x14d4>
 8006132:	2200      	movs	r2, #0
 8006134:	214b      	movs	r1, #75	; 0x4b
 8006136:	4620      	mov	r0, r4
 8006138:	f7fe fde7 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800613c:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8006140:	4618      	mov	r0, r3
 8006142:	f005 fe3f 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006146:	f207 5354 	addw	r3, r7, #1364	; 0x554
 800614a:	4618      	mov	r0, r3
 800614c:	f01a f92d 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('M', Direction::STRAIGHT, {'F'}, 2.0f * UNIT);
 8006150:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006154:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006158:	2148      	movs	r1, #72	; 0x48
 800615a:	6818      	ldr	r0, [r3, #0]
 800615c:	f002 f857 	bl	800820e <_ZN3jlb5GraphixEc>
 8006160:	4604      	mov	r4, r0
 8006162:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006166:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 800616a:	2246      	movs	r2, #70	; 0x46
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006172:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 8006176:	f207 526c 	addw	r2, r7, #1388	; 0x56c
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006180:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 8006184:	2201      	movs	r2, #1
 8006186:	605a      	str	r2, [r3, #4]
 8006188:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800618c:	4618      	mov	r0, r3
 800618e:	f01a f90a 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006192:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8006196:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800619a:	f2a2 7204 	subw	r2, r2, #1796	; 0x704
 800619e:	f507 60ab 	add.w	r0, r7, #1368	; 0x558
 80061a2:	ca06      	ldmia	r2, {r1, r2}
 80061a4:	f005 fea0 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80061a8:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80061ac:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800628c <_ZN3jlb5GraphC1Ev+0x14e4>
 80061b0:	2202      	movs	r2, #2
 80061b2:	214d      	movs	r1, #77	; 0x4d
 80061b4:	4620      	mov	r0, r4
 80061b6:	f7fe fda8 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80061ba:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80061be:	4618      	mov	r0, r3
 80061c0:	f005 fe00 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80061c4:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80061c8:	4618      	mov	r0, r3
 80061ca:	f01a f8ee 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('F', Direction::LEFT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 80061ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061d2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80061d6:	2149      	movs	r1, #73	; 0x49
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	f002 f818 	bl	800820e <_ZN3jlb5GraphixEc>
 80061de:	4604      	mov	r4, r0
 80061e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061e4:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 80061e8:	4a27      	ldr	r2, [pc, #156]	; (8006288 <_ZN3jlb5GraphC1Ev+0x14e0>)
 80061ea:	6812      	ldr	r2, [r2, #0]
 80061ec:	4611      	mov	r1, r2
 80061ee:	8019      	strh	r1, [r3, #0]
 80061f0:	3302      	adds	r3, #2
 80061f2:	0c12      	lsrs	r2, r2, #16
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061fa:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 80061fe:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006208:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 800620c:	2203      	movs	r2, #3
 800620e:	605a      	str	r2, [r3, #4]
 8006210:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8006214:	4618      	mov	r0, r3
 8006216:	f01a f8c6 	bl	80203a6 <_ZNSaIcEC1Ev>
 800621a:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 800621e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006222:	f5a2 62dd 	sub.w	r2, r2, #1768	; 0x6e8
 8006226:	f207 5074 	addw	r0, r7, #1396	; 0x574
 800622a:	ca06      	ldmia	r2, {r1, r2}
 800622c:	f005 fe5c 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006230:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8006234:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800627c <_ZN3jlb5GraphC1Ev+0x14d4>
 8006238:	2200      	movs	r2, #0
 800623a:	2146      	movs	r1, #70	; 0x46
 800623c:	4620      	mov	r0, r4
 800623e:	f7fe fd64 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006242:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8006246:	4618      	mov	r0, r3
 8006248:	f005 fdbc 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 800624c:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8006250:	4618      	mov	r0, r3
 8006252:	f01a f8aa 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('D', Direction::STRAIGHT, {'K', 'L', 'N'}, 2.0f * UNIT);
 8006256:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800625a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800625e:	2149      	movs	r1, #73	; 0x49
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	f001 ffd4 	bl	800820e <_ZN3jlb5GraphixEc>
 8006266:	4604      	mov	r4, r0
 8006268:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800626c:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8006270:	4a05      	ldr	r2, [pc, #20]	; (8006288 <_ZN3jlb5GraphC1Ev+0x14e0>)
 8006272:	6812      	ldr	r2, [r2, #0]
 8006274:	4611      	mov	r1, r2
 8006276:	e00b      	b.n	8006290 <_ZN3jlb5GraphC1Ev+0x14e8>
 8006278:	08023e40 	.word	0x08023e40
 800627c:	3f71463a 	.word	0x3f71463a
 8006280:	08023e3c 	.word	0x08023e3c
 8006284:	08023e44 	.word	0x08023e44
 8006288:	08023e48 	.word	0x08023e48
 800628c:	3f99999a 	.word	0x3f99999a
 8006290:	8019      	strh	r1, [r3, #0]
 8006292:	3302      	adds	r3, #2
 8006294:	0c12      	lsrs	r2, r2, #16
 8006296:	701a      	strb	r2, [r3, #0]
 8006298:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800629c:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 80062a0:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062aa:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 80062ae:	2203      	movs	r2, #3
 80062b0:	605a      	str	r2, [r3, #4]
 80062b2:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80062b6:	4618      	mov	r0, r3
 80062b8:	f01a f875 	bl	80203a6 <_ZNSaIcEC1Ev>
 80062bc:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80062c0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80062c4:	f2a2 62cc 	subw	r2, r2, #1740	; 0x6cc
 80062c8:	f507 60b2 	add.w	r0, r7, #1424	; 0x590
 80062cc:	ca06      	ldmia	r2, {r1, r2}
 80062ce:	f005 fe0b 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80062d2:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80062d6:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 800628c <_ZN3jlb5GraphC1Ev+0x14e4>
 80062da:	2202      	movs	r2, #2
 80062dc:	2144      	movs	r1, #68	; 0x44
 80062de:	4620      	mov	r0, r4
 80062e0:	f7fe fd13 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80062e4:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80062e8:	4618      	mov	r0, r3
 80062ea:	f005 fd6b 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80062ee:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80062f2:	4618      	mov	r0, r3
 80062f4:	f01a f859 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('G', Direction::RIGHT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 80062f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062fc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006300:	2149      	movs	r1, #73	; 0x49
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	f001 ff83 	bl	800820e <_ZN3jlb5GraphixEc>
 8006308:	4604      	mov	r4, r0
 800630a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800630e:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8006312:	4ae7      	ldr	r2, [pc, #924]	; (80066b0 <_ZN3jlb5GraphC1Ev+0x1908>)
 8006314:	6812      	ldr	r2, [r2, #0]
 8006316:	4611      	mov	r1, r2
 8006318:	8019      	strh	r1, [r3, #0]
 800631a:	3302      	adds	r3, #2
 800631c:	0c12      	lsrs	r2, r2, #16
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006324:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8006328:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006332:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8006336:	2203      	movs	r2, #3
 8006338:	605a      	str	r2, [r3, #4]
 800633a:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 800633e:	4618      	mov	r0, r3
 8006340:	f01a f831 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006344:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8006348:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800634c:	f5a2 62d6 	sub.w	r2, r2, #1712	; 0x6b0
 8006350:	f207 50ac 	addw	r0, r7, #1452	; 0x5ac
 8006354:	ca06      	ldmia	r2, {r1, r2}
 8006356:	f005 fdc7 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800635a:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 800635e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 80066b4 <_ZN3jlb5GraphC1Ev+0x190c>
 8006362:	2201      	movs	r2, #1
 8006364:	2147      	movs	r1, #71	; 0x47
 8006366:	4620      	mov	r0, r4
 8006368:	f7fe fccf 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800636c:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 8006370:	4618      	mov	r0, r3
 8006372:	f005 fd27 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006376:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 800637a:	4618      	mov	r0, r3
 800637c:	f01a f815 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('L', Direction::LEFT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8006380:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006384:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006388:	2149      	movs	r1, #73	; 0x49
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	f001 ff3f 	bl	800820e <_ZN3jlb5GraphixEc>
 8006390:	4604      	mov	r4, r0
 8006392:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006396:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 800639a:	4ac7      	ldr	r2, [pc, #796]	; (80066b8 <_ZN3jlb5GraphC1Ev+0x1910>)
 800639c:	6812      	ldr	r2, [r2, #0]
 800639e:	4611      	mov	r1, r2
 80063a0:	8019      	strh	r1, [r3, #0]
 80063a2:	3302      	adds	r3, #2
 80063a4:	0c12      	lsrs	r2, r2, #16
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063ac:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 80063b0:	f207 52dc 	addw	r2, r7, #1500	; 0x5dc
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063ba:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 80063be:	2203      	movs	r2, #3
 80063c0:	605a      	str	r2, [r3, #4]
 80063c2:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f019 ffed 	bl	80203a6 <_ZNSaIcEC1Ev>
 80063cc:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 80063d0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80063d4:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 80063d8:	f507 60b9 	add.w	r0, r7, #1480	; 0x5c8
 80063dc:	ca06      	ldmia	r2, {r1, r2}
 80063de:	f005 fd83 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80063e2:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 80063e6:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 80066b4 <_ZN3jlb5GraphC1Ev+0x190c>
 80063ea:	2200      	movs	r2, #0
 80063ec:	214c      	movs	r1, #76	; 0x4c
 80063ee:	4620      	mov	r0, r4
 80063f0:	f7fe fc8b 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80063f4:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 80063f8:	4618      	mov	r0, r3
 80063fa:	f005 fce3 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80063fe:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8006402:	4618      	mov	r0, r3
 8006404:	f019 ffd1 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('N', Direction::STRAIGHT, {'D', 'F', 'G'}, 2.0f * UNIT);
 8006408:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800640c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006410:	2149      	movs	r1, #73	; 0x49
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	f001 fefb 	bl	800820e <_ZN3jlb5GraphixEc>
 8006418:	4604      	mov	r4, r0
 800641a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800641e:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 8006422:	4aa5      	ldr	r2, [pc, #660]	; (80066b8 <_ZN3jlb5GraphC1Ev+0x1910>)
 8006424:	6812      	ldr	r2, [r2, #0]
 8006426:	4611      	mov	r1, r2
 8006428:	8019      	strh	r1, [r3, #0]
 800642a:	3302      	adds	r3, #2
 800642c:	0c12      	lsrs	r2, r2, #16
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006434:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8006438:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006442:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8006446:	2203      	movs	r2, #3
 8006448:	605a      	str	r2, [r3, #4]
 800644a:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 800644e:	4618      	mov	r0, r3
 8006450:	f019 ffa9 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006454:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8006458:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800645c:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 8006460:	f207 50e4 	addw	r0, r7, #1508	; 0x5e4
 8006464:	ca06      	ldmia	r2, {r1, r2}
 8006466:	f005 fd3f 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800646a:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 800646e:	ed9f 0a93 	vldr	s0, [pc, #588]	; 80066bc <_ZN3jlb5GraphC1Ev+0x1914>
 8006472:	2202      	movs	r2, #2
 8006474:	214e      	movs	r1, #78	; 0x4e
 8006476:	4620      	mov	r0, r4
 8006478:	f7fe fc47 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800647c:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8006480:	4618      	mov	r0, r3
 8006482:	f005 fc9f 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006486:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 800648a:	4618      	mov	r0, r3
 800648c:	f019 ff8d 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('K', Direction::RIGHT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8006490:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006494:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006498:	2149      	movs	r1, #73	; 0x49
 800649a:	6818      	ldr	r0, [r3, #0]
 800649c:	f001 feb7 	bl	800820e <_ZN3jlb5GraphixEc>
 80064a0:	4604      	mov	r4, r0
 80064a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064a6:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 80064aa:	4a83      	ldr	r2, [pc, #524]	; (80066b8 <_ZN3jlb5GraphC1Ev+0x1910>)
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	4611      	mov	r1, r2
 80064b0:	8019      	strh	r1, [r3, #0]
 80064b2:	3302      	adds	r3, #2
 80064b4:	0c12      	lsrs	r2, r2, #16
 80064b6:	701a      	strb	r2, [r3, #0]
 80064b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064bc:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 80064c0:	f207 6214 	addw	r2, r7, #1556	; 0x614
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064ca:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 80064ce:	2203      	movs	r2, #3
 80064d0:	605a      	str	r2, [r3, #4]
 80064d2:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80064d6:	4618      	mov	r0, r3
 80064d8:	f019 ff65 	bl	80203a6 <_ZNSaIcEC1Ev>
 80064dc:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80064e0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80064e4:	f2a2 625c 	subw	r2, r2, #1628	; 0x65c
 80064e8:	f507 60c0 	add.w	r0, r7, #1536	; 0x600
 80064ec:	ca06      	ldmia	r2, {r1, r2}
 80064ee:	f005 fcfb 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80064f2:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80064f6:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80066b4 <_ZN3jlb5GraphC1Ev+0x190c>
 80064fa:	2201      	movs	r2, #1
 80064fc:	214b      	movs	r1, #75	; 0x4b
 80064fe:	4620      	mov	r0, r4
 8006500:	f7fe fc03 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006504:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8006508:	4618      	mov	r0, r3
 800650a:	f005 fc5b 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 800650e:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8006512:	4618      	mov	r0, r3
 8006514:	f019 ff49 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('G', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8006518:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800651c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006520:	214a      	movs	r1, #74	; 0x4a
 8006522:	6818      	ldr	r0, [r3, #0]
 8006524:	f001 fe73 	bl	800820e <_ZN3jlb5GraphixEc>
 8006528:	4604      	mov	r4, r0
 800652a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800652e:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 8006532:	224c      	movs	r2, #76	; 0x4c
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800653a:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800653e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006548:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800654c:	2201      	movs	r2, #1
 800654e:	605a      	str	r2, [r3, #4]
 8006550:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8006554:	4618      	mov	r0, r3
 8006556:	f019 ff26 	bl	80203a6 <_ZNSaIcEC1Ev>
 800655a:	f207 6334 	addw	r3, r7, #1588	; 0x634
 800655e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006562:	f5a2 62c8 	sub.w	r2, r2, #1600	; 0x640
 8006566:	f207 601c 	addw	r0, r7, #1564	; 0x61c
 800656a:	ca06      	ldmia	r2, {r1, r2}
 800656c:	f005 fcbc 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006570:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8006574:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80066b4 <_ZN3jlb5GraphC1Ev+0x190c>
 8006578:	2200      	movs	r2, #0
 800657a:	2147      	movs	r1, #71	; 0x47
 800657c:	4620      	mov	r0, r4
 800657e:	f7fe fbc4 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006582:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8006586:	4618      	mov	r0, r3
 8006588:	f005 fc1c 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 800658c:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8006590:	4618      	mov	r0, r3
 8006592:	f019 ff0a 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('E', Direction::STRAIGHT, {'L'}, 2.0f * UNIT);
 8006596:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800659a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800659e:	214a      	movs	r1, #74	; 0x4a
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	f001 fe34 	bl	800820e <_ZN3jlb5GraphixEc>
 80065a6:	4604      	mov	r4, r0
 80065a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065ac:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 80065b0:	224c      	movs	r2, #76	; 0x4c
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065b8:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 80065bc:	f207 624c 	addw	r2, r7, #1612	; 0x64c
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065c6:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 80065ca:	2201      	movs	r2, #1
 80065cc:	605a      	str	r2, [r3, #4]
 80065ce:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80065d2:	4618      	mov	r0, r3
 80065d4:	f019 fee7 	bl	80203a6 <_ZNSaIcEC1Ev>
 80065d8:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80065dc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80065e0:	f2a2 6224 	subw	r2, r2, #1572	; 0x624
 80065e4:	f507 60c7 	add.w	r0, r7, #1592	; 0x638
 80065e8:	ca06      	ldmia	r2, {r1, r2}
 80065ea:	f005 fc7d 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80065ee:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80065f2:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80066bc <_ZN3jlb5GraphC1Ev+0x1914>
 80065f6:	2202      	movs	r2, #2
 80065f8:	2145      	movs	r1, #69	; 0x45
 80065fa:	4620      	mov	r0, r4
 80065fc:	f7fe fb85 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006600:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8006604:	4618      	mov	r0, r3
 8006606:	f005 fbdd 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 800660a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800660e:	4618      	mov	r0, r3
 8006610:	f019 fecb 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('L', Direction::RIGHT, {'E', 'G'}, QUARTER_CIRCLE);
 8006614:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006618:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800661c:	214a      	movs	r1, #74	; 0x4a
 800661e:	6818      	ldr	r0, [r3, #0]
 8006620:	f001 fdf5 	bl	800820e <_ZN3jlb5GraphixEc>
 8006624:	4604      	mov	r4, r0
 8006626:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800662a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 800662e:	4a24      	ldr	r2, [pc, #144]	; (80066c0 <_ZN3jlb5GraphC1Ev+0x1918>)
 8006630:	8812      	ldrh	r2, [r2, #0]
 8006632:	801a      	strh	r2, [r3, #0]
 8006634:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006638:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 800663c:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006646:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 800664a:	2202      	movs	r2, #2
 800664c:	605a      	str	r2, [r3, #4]
 800664e:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8006652:	4618      	mov	r0, r3
 8006654:	f019 fea7 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006658:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 800665c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006660:	f5a2 62c1 	sub.w	r2, r2, #1544	; 0x608
 8006664:	f207 6054 	addw	r0, r7, #1620	; 0x654
 8006668:	ca06      	ldmia	r2, {r1, r2}
 800666a:	f005 fc3d 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800666e:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8006672:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80066b4 <_ZN3jlb5GraphC1Ev+0x190c>
 8006676:	2201      	movs	r2, #1
 8006678:	214c      	movs	r1, #76	; 0x4c
 800667a:	4620      	mov	r0, r4
 800667c:	f7fe fb45 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006680:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8006684:	4618      	mov	r0, r3
 8006686:	f005 fb9d 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 800668a:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 800668e:	4618      	mov	r0, r3
 8006690:	f019 fe8b 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('H', Direction::RIGHT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 8006694:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006698:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800669c:	214b      	movs	r1, #75	; 0x4b
 800669e:	6818      	ldr	r0, [r3, #0]
 80066a0:	f001 fdb5 	bl	800820e <_ZN3jlb5GraphixEc>
 80066a4:	4604      	mov	r4, r0
 80066a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066aa:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80066ae:	e009      	b.n	80066c4 <_ZN3jlb5GraphC1Ev+0x191c>
 80066b0:	08023e48 	.word	0x08023e48
 80066b4:	3f71463a 	.word	0x3f71463a
 80066b8:	08023e4c 	.word	0x08023e4c
 80066bc:	3f99999a 	.word	0x3f99999a
 80066c0:	08023e50 	.word	0x08023e50
 80066c4:	4ae4      	ldr	r2, [pc, #912]	; (8006a58 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 80066c6:	6812      	ldr	r2, [r2, #0]
 80066c8:	4611      	mov	r1, r2
 80066ca:	8019      	strh	r1, [r3, #0]
 80066cc:	3302      	adds	r3, #2
 80066ce:	0c12      	lsrs	r2, r2, #16
 80066d0:	701a      	strb	r2, [r3, #0]
 80066d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066d6:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 80066da:	f207 6284 	addw	r2, r7, #1668	; 0x684
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066e4:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 80066e8:	2203      	movs	r2, #3
 80066ea:	605a      	str	r2, [r3, #4]
 80066ec:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 80066f0:	4618      	mov	r0, r3
 80066f2:	f019 fe58 	bl	80203a6 <_ZNSaIcEC1Ev>
 80066f6:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 80066fa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80066fe:	f2a2 52ec 	subw	r2, r2, #1516	; 0x5ec
 8006702:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 8006706:	ca06      	ldmia	r2, {r1, r2}
 8006708:	f005 fbee 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800670c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8006710:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8006a5c <_ZN3jlb5GraphC1Ev+0x1cb4>
 8006714:	2201      	movs	r2, #1
 8006716:	2148      	movs	r1, #72	; 0x48
 8006718:	4620      	mov	r0, r4
 800671a:	f7fe faf6 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800671e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8006722:	4618      	mov	r0, r3
 8006724:	f005 fb4e 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006728:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 800672c:	4618      	mov	r0, r3
 800672e:	f019 fe3c 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('I', Direction::LEFT, {'H', 'M'}, QUARTER_CIRCLE);
 8006732:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006736:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800673a:	214b      	movs	r1, #75	; 0x4b
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	f001 fd66 	bl	800820e <_ZN3jlb5GraphixEc>
 8006742:	4604      	mov	r4, r0
 8006744:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006748:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800674c:	4ac4      	ldr	r2, [pc, #784]	; (8006a60 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 800674e:	8812      	ldrh	r2, [r2, #0]
 8006750:	801a      	strh	r2, [r3, #0]
 8006752:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006756:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800675a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006764:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8006768:	2202      	movs	r2, #2
 800676a:	605a      	str	r2, [r3, #4]
 800676c:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8006770:	4618      	mov	r0, r3
 8006772:	f019 fe18 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006776:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 800677a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800677e:	f5a2 62ba 	sub.w	r2, r2, #1488	; 0x5d0
 8006782:	f207 608c 	addw	r0, r7, #1676	; 0x68c
 8006786:	ca06      	ldmia	r2, {r1, r2}
 8006788:	f005 fbae 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800678c:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 8006790:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8006a5c <_ZN3jlb5GraphC1Ev+0x1cb4>
 8006794:	2200      	movs	r2, #0
 8006796:	2149      	movs	r1, #73	; 0x49
 8006798:	4620      	mov	r0, r4
 800679a:	f7fe fab6 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800679e:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 80067a2:	4618      	mov	r0, r3
 80067a4:	f005 fb0e 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80067a8:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 80067ac:	4618      	mov	r0, r3
 80067ae:	f019 fdfc 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('L', Direction::STRAIGHT, {'H', 'M'}, 2.0f * UNIT);
 80067b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067b6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80067ba:	214b      	movs	r1, #75	; 0x4b
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	f001 fd26 	bl	800820e <_ZN3jlb5GraphixEc>
 80067c2:	4604      	mov	r4, r0
 80067c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067c8:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 80067cc:	4aa4      	ldr	r2, [pc, #656]	; (8006a60 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 80067ce:	8812      	ldrh	r2, [r2, #0]
 80067d0:	801a      	strh	r2, [r3, #0]
 80067d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067d6:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 80067da:	f207 62bc 	addw	r2, r7, #1724	; 0x6bc
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067e4:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 80067e8:	2202      	movs	r2, #2
 80067ea:	605a      	str	r2, [r3, #4]
 80067ec:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 80067f0:	4618      	mov	r0, r3
 80067f2:	f019 fdd8 	bl	80203a6 <_ZNSaIcEC1Ev>
 80067f6:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 80067fa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80067fe:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 8006802:	f507 60d5 	add.w	r0, r7, #1704	; 0x6a8
 8006806:	ca06      	ldmia	r2, {r1, r2}
 8006808:	f005 fb6e 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800680c:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8006810:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8006a64 <_ZN3jlb5GraphC1Ev+0x1cbc>
 8006814:	2202      	movs	r2, #2
 8006816:	214c      	movs	r1, #76	; 0x4c
 8006818:	4620      	mov	r0, r4
 800681a:	f7fe fa76 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800681e:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8006822:	4618      	mov	r0, r3
 8006824:	f005 face 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006828:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800682c:	4618      	mov	r0, r3
 800682e:	f019 fdbc 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('N', Direction::RIGHT, {'H', 'M'}, QUARTER_CIRCLE);
 8006832:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006836:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800683a:	214b      	movs	r1, #75	; 0x4b
 800683c:	6818      	ldr	r0, [r3, #0]
 800683e:	f001 fce6 	bl	800820e <_ZN3jlb5GraphixEc>
 8006842:	4604      	mov	r4, r0
 8006844:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006848:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800684c:	4a84      	ldr	r2, [pc, #528]	; (8006a60 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 800684e:	8812      	ldrh	r2, [r2, #0]
 8006850:	801a      	strh	r2, [r3, #0]
 8006852:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006856:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800685a:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006864:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8006868:	2202      	movs	r2, #2
 800686a:	605a      	str	r2, [r3, #4]
 800686c:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8006870:	4618      	mov	r0, r3
 8006872:	f019 fd98 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006876:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 800687a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800687e:	f5a2 62b3 	sub.w	r2, r2, #1432	; 0x598
 8006882:	f207 60c4 	addw	r0, r7, #1732	; 0x6c4
 8006886:	ca06      	ldmia	r2, {r1, r2}
 8006888:	f005 fb2e 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800688c:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 8006890:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8006a5c <_ZN3jlb5GraphC1Ev+0x1cb4>
 8006894:	2201      	movs	r2, #1
 8006896:	214e      	movs	r1, #78	; 0x4e
 8006898:	4620      	mov	r0, r4
 800689a:	f7fe fa36 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800689e:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 80068a2:	4618      	mov	r0, r3
 80068a4:	f005 fa8e 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80068a8:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80068ac:	4618      	mov	r0, r3
 80068ae:	f019 fd7c 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('M', Direction::LEFT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 80068b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068b6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80068ba:	214b      	movs	r1, #75	; 0x4b
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	f001 fca6 	bl	800820e <_ZN3jlb5GraphixEc>
 80068c2:	4604      	mov	r4, r0
 80068c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068c8:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 80068cc:	4a62      	ldr	r2, [pc, #392]	; (8006a58 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 80068ce:	6812      	ldr	r2, [r2, #0]
 80068d0:	4611      	mov	r1, r2
 80068d2:	8019      	strh	r1, [r3, #0]
 80068d4:	3302      	adds	r3, #2
 80068d6:	0c12      	lsrs	r2, r2, #16
 80068d8:	701a      	strb	r2, [r3, #0]
 80068da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068de:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80068e2:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068ec:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80068f0:	2203      	movs	r2, #3
 80068f2:	605a      	str	r2, [r3, #4]
 80068f4:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 80068f8:	4618      	mov	r0, r3
 80068fa:	f019 fd54 	bl	80203a6 <_ZNSaIcEC1Ev>
 80068fe:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8006902:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006906:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 800690a:	f507 60dc 	add.w	r0, r7, #1760	; 0x6e0
 800690e:	ca06      	ldmia	r2, {r1, r2}
 8006910:	f005 faea 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006914:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006918:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8006a5c <_ZN3jlb5GraphC1Ev+0x1cb4>
 800691c:	2200      	movs	r2, #0
 800691e:	214d      	movs	r1, #77	; 0x4d
 8006920:	4620      	mov	r0, r4
 8006922:	f7fe f9f2 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006926:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800692a:	4618      	mov	r0, r3
 800692c:	f005 fa4a 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006930:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8006934:	4618      	mov	r0, r3
 8006936:	f019 fd38 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('K', Direction::STRAIGHT, {'J', 'O'}, 2.0f * UNIT);
 800693a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800693e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006942:	214c      	movs	r1, #76	; 0x4c
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	f001 fc62 	bl	800820e <_ZN3jlb5GraphixEc>
 800694a:	4604      	mov	r4, r0
 800694c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006950:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006954:	4a44      	ldr	r2, [pc, #272]	; (8006a68 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 8006956:	8812      	ldrh	r2, [r2, #0]
 8006958:	801a      	strh	r2, [r3, #0]
 800695a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800695e:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8006962:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800696c:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8006970:	2202      	movs	r2, #2
 8006972:	605a      	str	r2, [r3, #4]
 8006974:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8006978:	4618      	mov	r0, r3
 800697a:	f019 fd14 	bl	80203a6 <_ZNSaIcEC1Ev>
 800697e:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8006982:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006986:	f5a2 62ac 	sub.w	r2, r2, #1376	; 0x560
 800698a:	f207 60fc 	addw	r0, r7, #1788	; 0x6fc
 800698e:	ca06      	ldmia	r2, {r1, r2}
 8006990:	f005 faaa 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006994:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8006998:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8006a64 <_ZN3jlb5GraphC1Ev+0x1cbc>
 800699c:	2202      	movs	r2, #2
 800699e:	214b      	movs	r1, #75	; 0x4b
 80069a0:	4620      	mov	r0, r4
 80069a2:	f7fe f9b2 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80069a6:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 80069aa:	4618      	mov	r0, r3
 80069ac:	f005 fa0a 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80069b0:	f207 7314 	addw	r3, r7, #1812	; 0x714
 80069b4:	4618      	mov	r0, r3
 80069b6:	f019 fcf8 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('I', Direction::RIGHT, {'J', 'O'}, QUARTER_CIRCLE);
 80069ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069be:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80069c2:	214c      	movs	r1, #76	; 0x4c
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	f001 fc22 	bl	800820e <_ZN3jlb5GraphixEc>
 80069ca:	4604      	mov	r4, r0
 80069cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069d0:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 80069d4:	4a24      	ldr	r2, [pc, #144]	; (8006a68 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 80069d6:	8812      	ldrh	r2, [r2, #0]
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069de:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 80069e2:	f207 722c 	addw	r2, r7, #1836	; 0x72c
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069ec:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 80069f0:	2202      	movs	r2, #2
 80069f2:	605a      	str	r2, [r3, #4]
 80069f4:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80069f8:	4618      	mov	r0, r3
 80069fa:	f019 fcd4 	bl	80203a6 <_ZNSaIcEC1Ev>
 80069fe:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8006a02:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006a06:	f2a2 5244 	subw	r2, r2, #1348	; 0x544
 8006a0a:	f507 60e3 	add.w	r0, r7, #1816	; 0x718
 8006a0e:	ca06      	ldmia	r2, {r1, r2}
 8006a10:	f005 fa6a 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006a14:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8006a18:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8006a5c <_ZN3jlb5GraphC1Ev+0x1cb4>
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	2149      	movs	r1, #73	; 0x49
 8006a20:	4620      	mov	r0, r4
 8006a22:	f7fe f972 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006a26:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f005 f9ca 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006a30:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8006a34:	4618      	mov	r0, r3
 8006a36:	f019 fcb8 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('J', Direction::LEFT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 8006a3a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a3e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006a42:	214c      	movs	r1, #76	; 0x4c
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	f001 fbe2 	bl	800820e <_ZN3jlb5GraphixEc>
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a50:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8006a54:	e00a      	b.n	8006a6c <_ZN3jlb5GraphC1Ev+0x1cc4>
 8006a56:	bf00      	nop
 8006a58:	08023e54 	.word	0x08023e54
 8006a5c:	3f71463a 	.word	0x3f71463a
 8006a60:	08023e58 	.word	0x08023e58
 8006a64:	3f99999a 	.word	0x3f99999a
 8006a68:	08023e5c 	.word	0x08023e5c
 8006a6c:	4ae4      	ldr	r2, [pc, #912]	; (8006e00 <_ZN3jlb5GraphC1Ev+0x2058>)
 8006a6e:	6812      	ldr	r2, [r2, #0]
 8006a70:	4611      	mov	r1, r2
 8006a72:	8019      	strh	r1, [r3, #0]
 8006a74:	3302      	adds	r3, #2
 8006a76:	0c12      	lsrs	r2, r2, #16
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a7e:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8006a82:	f507 62e9 	add.w	r2, r7, #1864	; 0x748
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a8c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8006a90:	2203      	movs	r2, #3
 8006a92:	605a      	str	r2, [r3, #4]
 8006a94:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f019 fc84 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006a9e:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8006aa2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006aa6:	f5a2 62a5 	sub.w	r2, r2, #1320	; 0x528
 8006aaa:	f207 7034 	addw	r0, r7, #1844	; 0x734
 8006aae:	ca06      	ldmia	r2, {r1, r2}
 8006ab0:	f005 fa1a 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006ab4:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8006ab8:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8006e04 <_ZN3jlb5GraphC1Ev+0x205c>
 8006abc:	2200      	movs	r2, #0
 8006abe:	214a      	movs	r1, #74	; 0x4a
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f7fe f922 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006ac6:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8006aca:	4618      	mov	r0, r3
 8006acc:	f005 f97a 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ad0:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f019 fc68 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('O', Direction::RIGHT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 8006ada:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ade:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006ae2:	214c      	movs	r1, #76	; 0x4c
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	f001 fb92 	bl	800820e <_ZN3jlb5GraphixEc>
 8006aea:	4604      	mov	r4, r0
 8006aec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006af0:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8006af4:	4ac2      	ldr	r2, [pc, #776]	; (8006e00 <_ZN3jlb5GraphC1Ev+0x2058>)
 8006af6:	6812      	ldr	r2, [r2, #0]
 8006af8:	4611      	mov	r1, r2
 8006afa:	8019      	strh	r1, [r3, #0]
 8006afc:	3302      	adds	r3, #2
 8006afe:	0c12      	lsrs	r2, r2, #16
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b06:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8006b0a:	f207 7264 	addw	r2, r7, #1892	; 0x764
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b14:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8006b18:	2203      	movs	r2, #3
 8006b1a:	605a      	str	r2, [r3, #4]
 8006b1c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8006b20:	4618      	mov	r0, r3
 8006b22:	f019 fc40 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006b26:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8006b2a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006b2e:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 8006b32:	f507 60ea 	add.w	r0, r7, #1872	; 0x750
 8006b36:	ca06      	ldmia	r2, {r1, r2}
 8006b38:	f005 f9d6 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006b3c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8006b40:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8006e04 <_ZN3jlb5GraphC1Ev+0x205c>
 8006b44:	2201      	movs	r2, #1
 8006b46:	214f      	movs	r1, #79	; 0x4f
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f7fe f8de 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006b4e:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8006b52:	4618      	mov	r0, r3
 8006b54:	f005 f936 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006b58:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f019 fc24 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('N', Direction::LEFT, {'J', 'O'}, QUARTER_CIRCLE);
 8006b62:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b66:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006b6a:	214c      	movs	r1, #76	; 0x4c
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	f001 fb4e 	bl	800820e <_ZN3jlb5GraphixEc>
 8006b72:	4604      	mov	r4, r0
 8006b74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b78:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8006b7c:	4aa2      	ldr	r2, [pc, #648]	; (8006e08 <_ZN3jlb5GraphC1Ev+0x2060>)
 8006b7e:	8812      	ldrh	r2, [r2, #0]
 8006b80:	801a      	strh	r2, [r3, #0]
 8006b82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b86:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8006b8a:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b94:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8006b98:	2202      	movs	r2, #2
 8006b9a:	605a      	str	r2, [r3, #4]
 8006b9c:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f019 fc00 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006ba6:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8006baa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006bae:	f5a2 629e 	sub.w	r2, r2, #1264	; 0x4f0
 8006bb2:	f207 706c 	addw	r0, r7, #1900	; 0x76c
 8006bb6:	ca06      	ldmia	r2, {r1, r2}
 8006bb8:	f005 f996 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006bbc:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8006bc0:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8006e04 <_ZN3jlb5GraphC1Ev+0x205c>
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	214e      	movs	r1, #78	; 0x4e
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f7fe f89e 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006bce:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f005 f8f6 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006bd8:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f019 fbe4 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('H', Direction::STRAIGHT, {'P', 'Q', 'R'}, 2.0f * UNIT);
 8006be2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006be6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006bea:	214d      	movs	r1, #77	; 0x4d
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	f001 fb0e 	bl	800820e <_ZN3jlb5GraphixEc>
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bf8:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8006bfc:	4a83      	ldr	r2, [pc, #524]	; (8006e0c <_ZN3jlb5GraphC1Ev+0x2064>)
 8006bfe:	6812      	ldr	r2, [r2, #0]
 8006c00:	4611      	mov	r1, r2
 8006c02:	8019      	strh	r1, [r3, #0]
 8006c04:	3302      	adds	r3, #2
 8006c06:	0c12      	lsrs	r2, r2, #16
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c0e:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8006c12:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c1c:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8006c20:	2203      	movs	r2, #3
 8006c22:	605a      	str	r2, [r3, #4]
 8006c24:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f019 fbbc 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006c2e:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8006c32:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006c36:	f2a2 42d4 	subw	r2, r2, #1236	; 0x4d4
 8006c3a:	f507 60f1 	add.w	r0, r7, #1928	; 0x788
 8006c3e:	ca06      	ldmia	r2, {r1, r2}
 8006c40:	f005 f952 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006c44:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8006c48:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8006e10 <_ZN3jlb5GraphC1Ev+0x2068>
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	2148      	movs	r1, #72	; 0x48
 8006c50:	4620      	mov	r0, r4
 8006c52:	f7fe f85a 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006c56:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f005 f8b2 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006c60:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8006c64:	4618      	mov	r0, r3
 8006c66:	f019 fba0 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('K', Direction::RIGHT, {'P', 'Q', 'R'}, QUARTER_CIRCLE);
 8006c6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c6e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006c72:	214d      	movs	r1, #77	; 0x4d
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	f001 faca 	bl	800820e <_ZN3jlb5GraphixEc>
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c80:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8006c84:	4a61      	ldr	r2, [pc, #388]	; (8006e0c <_ZN3jlb5GraphC1Ev+0x2064>)
 8006c86:	6812      	ldr	r2, [r2, #0]
 8006c88:	4611      	mov	r1, r2
 8006c8a:	8019      	strh	r1, [r3, #0]
 8006c8c:	3302      	adds	r3, #2
 8006c8e:	0c12      	lsrs	r2, r2, #16
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c96:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8006c9a:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ca4:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8006ca8:	2203      	movs	r2, #3
 8006caa:	605a      	str	r2, [r3, #4]
 8006cac:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f019 fb78 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006cb6:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8006cba:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006cbe:	f5a2 6297 	sub.w	r2, r2, #1208	; 0x4b8
 8006cc2:	f207 70a4 	addw	r0, r7, #1956	; 0x7a4
 8006cc6:	ca06      	ldmia	r2, {r1, r2}
 8006cc8:	f005 f90e 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006ccc:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8006cd0:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8006e04 <_ZN3jlb5GraphC1Ev+0x205c>
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	214b      	movs	r1, #75	; 0x4b
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f7fe f816 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006cde:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f005 f86e 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ce8:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8006cec:	4618      	mov	r0, r3
 8006cee:	f019 fb5c 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('R', Direction::LEFT, {'H', 'K'}, QUARTER_CIRCLE);
 8006cf2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cf6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006cfa:	214d      	movs	r1, #77	; 0x4d
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	f001 fa86 	bl	800820e <_ZN3jlb5GraphixEc>
 8006d02:	4604      	mov	r4, r0
 8006d04:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d08:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8006d0c:	4a41      	ldr	r2, [pc, #260]	; (8006e14 <_ZN3jlb5GraphC1Ev+0x206c>)
 8006d0e:	8812      	ldrh	r2, [r2, #0]
 8006d10:	801a      	strh	r2, [r3, #0]
 8006d12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d16:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8006d1a:	f207 72d4 	addw	r2, r7, #2004	; 0x7d4
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d24:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8006d28:	2202      	movs	r2, #2
 8006d2a:	605a      	str	r2, [r3, #4]
 8006d2c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8006d30:	4618      	mov	r0, r3
 8006d32:	f019 fb38 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006d36:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8006d3a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006d3e:	f2a2 429c 	subw	r2, r2, #1180	; 0x49c
 8006d42:	f507 60f8 	add.w	r0, r7, #1984	; 0x7c0
 8006d46:	ca06      	ldmia	r2, {r1, r2}
 8006d48:	f005 f8ce 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006d4c:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8006d50:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8006e04 <_ZN3jlb5GraphC1Ev+0x205c>
 8006d54:	2200      	movs	r2, #0
 8006d56:	2152      	movs	r1, #82	; 0x52
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f7fd ffd6 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006d5e:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8006d62:	4618      	mov	r0, r3
 8006d64:	f005 f82e 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006d68:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f019 fb1c 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('Q', Direction::STRAIGHT, {'H', 'K'}, UNIT);
 8006d72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d76:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006d7a:	214d      	movs	r1, #77	; 0x4d
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	f001 fa46 	bl	800820e <_ZN3jlb5GraphixEc>
 8006d82:	4604      	mov	r4, r0
 8006d84:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d88:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8006d8c:	4a21      	ldr	r2, [pc, #132]	; (8006e14 <_ZN3jlb5GraphC1Ev+0x206c>)
 8006d8e:	8812      	ldrh	r2, [r2, #0]
 8006d90:	801a      	strh	r2, [r3, #0]
 8006d92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d96:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8006d9a:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006da4:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8006da8:	2202      	movs	r2, #2
 8006daa:	605a      	str	r2, [r3, #4]
 8006dac:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8006db0:	4618      	mov	r0, r3
 8006db2:	f019 faf8 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006db6:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8006dba:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006dbe:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 8006dc2:	f207 70dc 	addw	r0, r7, #2012	; 0x7dc
 8006dc6:	ca06      	ldmia	r2, {r1, r2}
 8006dc8:	f005 f88e 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006dcc:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8006dd0:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8006e18 <_ZN3jlb5GraphC1Ev+0x2070>
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	2151      	movs	r1, #81	; 0x51
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f7fd ff96 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006dde:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8006de2:	4618      	mov	r0, r3
 8006de4:	f004 ffee 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006de8:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8006dec:	4618      	mov	r0, r3
 8006dee:	f019 fadc 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('P', Direction::RIGHT, {'H', 'K'}, QUARTER_CIRCLE);
 8006df2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006df6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006dfa:	214d      	movs	r1, #77	; 0x4d
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	e00d      	b.n	8006e1c <_ZN3jlb5GraphC1Ev+0x2074>
 8006e00:	08023e60 	.word	0x08023e60
 8006e04:	3f71463a 	.word	0x3f71463a
 8006e08:	08023e5c 	.word	0x08023e5c
 8006e0c:	08023e64 	.word	0x08023e64
 8006e10:	3f99999a 	.word	0x3f99999a
 8006e14:	08023e68 	.word	0x08023e68
 8006e18:	3f19999a 	.word	0x3f19999a
 8006e1c:	f001 f9f7 	bl	800820e <_ZN3jlb5GraphixEc>
 8006e20:	4604      	mov	r4, r0
 8006e22:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e26:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8006e2a:	4ae5      	ldr	r2, [pc, #916]	; (80071c0 <_ZN3jlb5GraphC1Ev+0x2418>)
 8006e2c:	8812      	ldrh	r2, [r2, #0]
 8006e2e:	801a      	strh	r2, [r3, #0]
 8006e30:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e34:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e38:	f607 020c 	addw	r2, r7, #2060	; 0x80c
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e42:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e46:	2202      	movs	r2, #2
 8006e48:	605a      	str	r2, [r3, #4]
 8006e4a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f019 faa9 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006e54:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006e58:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006e5c:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8006e60:	f507 60ff 	add.w	r0, r7, #2040	; 0x7f8
 8006e64:	ca06      	ldmia	r2, {r1, r2}
 8006e66:	f005 f83f 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006e6a:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8006e6e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 80071c4 <_ZN3jlb5GraphC1Ev+0x241c>
 8006e72:	2201      	movs	r2, #1
 8006e74:	2150      	movs	r1, #80	; 0x50
 8006e76:	4620      	mov	r0, r4
 8006e78:	f7fd ff47 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006e7c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8006e80:	4618      	mov	r0, r3
 8006e82:	f004 ff9f 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006e86:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f019 fa8d 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('K', Direction::LEFT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8006e90:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e94:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006e98:	214e      	movs	r1, #78	; 0x4e
 8006e9a:	6818      	ldr	r0, [r3, #0]
 8006e9c:	f001 f9b7 	bl	800820e <_ZN3jlb5GraphixEc>
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ea6:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006eaa:	4ac7      	ldr	r2, [pc, #796]	; (80071c8 <_ZN3jlb5GraphC1Ev+0x2420>)
 8006eac:	6812      	ldr	r2, [r2, #0]
 8006eae:	4611      	mov	r1, r2
 8006eb0:	8019      	strh	r1, [r3, #0]
 8006eb2:	3302      	adds	r3, #2
 8006eb4:	0c12      	lsrs	r2, r2, #16
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ebc:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8006ec0:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006eca:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8006ece:	2203      	movs	r2, #3
 8006ed0:	605a      	str	r2, [r3, #4]
 8006ed2:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f019 fa65 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006edc:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8006ee0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006ee4:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8006ee8:	f607 0014 	addw	r0, r7, #2068	; 0x814
 8006eec:	ca06      	ldmia	r2, {r1, r2}
 8006eee:	f004 fffb 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006ef2:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8006ef6:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 80071c4 <_ZN3jlb5GraphC1Ev+0x241c>
 8006efa:	2200      	movs	r2, #0
 8006efc:	214b      	movs	r1, #75	; 0x4b
 8006efe:	4620      	mov	r0, r4
 8006f00:	f7fd ff03 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006f04:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f004 ff5b 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006f0e:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8006f12:	4618      	mov	r0, r3
 8006f14:	f019 fa49 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('I', Direction::STRAIGHT, {'R', 'S', 'T'}, 2.0f * UNIT);
 8006f18:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f1c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006f20:	214e      	movs	r1, #78	; 0x4e
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	f001 f973 	bl	800820e <_ZN3jlb5GraphixEc>
 8006f28:	4604      	mov	r4, r0
 8006f2a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f2e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8006f32:	4aa5      	ldr	r2, [pc, #660]	; (80071c8 <_ZN3jlb5GraphC1Ev+0x2420>)
 8006f34:	6812      	ldr	r2, [r2, #0]
 8006f36:	4611      	mov	r1, r2
 8006f38:	8019      	strh	r1, [r3, #0]
 8006f3a:	3302      	adds	r3, #2
 8006f3c:	0c12      	lsrs	r2, r2, #16
 8006f3e:	701a      	strb	r2, [r3, #0]
 8006f40:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f44:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8006f48:	f607 0244 	addw	r2, r7, #2116	; 0x844
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f52:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8006f56:	2203      	movs	r2, #3
 8006f58:	605a      	str	r2, [r3, #4]
 8006f5a:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f019 fa21 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006f64:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8006f68:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006f6c:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 8006f70:	f507 6003 	add.w	r0, r7, #2096	; 0x830
 8006f74:	ca06      	ldmia	r2, {r1, r2}
 8006f76:	f004 ffb7 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006f7a:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8006f7e:	ed9f 0a93 	vldr	s0, [pc, #588]	; 80071cc <_ZN3jlb5GraphC1Ev+0x2424>
 8006f82:	2202      	movs	r2, #2
 8006f84:	2149      	movs	r1, #73	; 0x49
 8006f86:	4620      	mov	r0, r4
 8006f88:	f7fd febf 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006f8c:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8006f90:	4618      	mov	r0, r3
 8006f92:	f004 ff17 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8006f96:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f019 fa05 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('L', Direction::RIGHT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8006fa0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fa4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006fa8:	214e      	movs	r1, #78	; 0x4e
 8006faa:	6818      	ldr	r0, [r3, #0]
 8006fac:	f001 f92f 	bl	800820e <_ZN3jlb5GraphixEc>
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fb6:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8006fba:	4a83      	ldr	r2, [pc, #524]	; (80071c8 <_ZN3jlb5GraphC1Ev+0x2420>)
 8006fbc:	6812      	ldr	r2, [r2, #0]
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	8019      	strh	r1, [r3, #0]
 8006fc2:	3302      	adds	r3, #2
 8006fc4:	0c12      	lsrs	r2, r2, #16
 8006fc6:	701a      	strb	r2, [r3, #0]
 8006fc8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fcc:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8006fd0:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fda:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8006fde:	2203      	movs	r2, #3
 8006fe0:	605a      	str	r2, [r3, #4]
 8006fe2:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f019 f9dd 	bl	80203a6 <_ZNSaIcEC1Ev>
 8006fec:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8006ff0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006ff4:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8006ff8:	f607 004c 	addw	r0, r7, #2124	; 0x84c
 8006ffc:	ca06      	ldmia	r2, {r1, r2}
 8006ffe:	f004 ff73 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007002:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8007006:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80071c4 <_ZN3jlb5GraphC1Ev+0x241c>
 800700a:	2201      	movs	r2, #1
 800700c:	214c      	movs	r1, #76	; 0x4c
 800700e:	4620      	mov	r0, r4
 8007010:	f7fd fe7b 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007014:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8007018:	4618      	mov	r0, r3
 800701a:	f004 fed3 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 800701e:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8007022:	4618      	mov	r0, r3
 8007024:	f019 f9c1 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('T', Direction::LEFT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8007028:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800702c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007030:	214e      	movs	r1, #78	; 0x4e
 8007032:	6818      	ldr	r0, [r3, #0]
 8007034:	f001 f8eb 	bl	800820e <_ZN3jlb5GraphixEc>
 8007038:	4604      	mov	r4, r0
 800703a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800703e:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8007042:	4a63      	ldr	r2, [pc, #396]	; (80071d0 <_ZN3jlb5GraphC1Ev+0x2428>)
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	4611      	mov	r1, r2
 8007048:	8019      	strh	r1, [r3, #0]
 800704a:	3302      	adds	r3, #2
 800704c:	0c12      	lsrs	r2, r2, #16
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007054:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8007058:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007062:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8007066:	2203      	movs	r2, #3
 8007068:	605a      	str	r2, [r3, #4]
 800706a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800706e:	4618      	mov	r0, r3
 8007070:	f019 f999 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007074:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8007078:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800707c:	f5a2 727d 	sub.w	r2, r2, #1012	; 0x3f4
 8007080:	f607 0068 	addw	r0, r7, #2152	; 0x868
 8007084:	ca06      	ldmia	r2, {r1, r2}
 8007086:	f004 ff2f 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800708a:	f607 0368 	addw	r3, r7, #2152	; 0x868
 800708e:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80071c4 <_ZN3jlb5GraphC1Ev+0x241c>
 8007092:	2200      	movs	r2, #0
 8007094:	2154      	movs	r1, #84	; 0x54
 8007096:	4620      	mov	r0, r4
 8007098:	f7fd fe37 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800709c:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80070a0:	4618      	mov	r0, r3
 80070a2:	f004 fe8f 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80070a6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80070aa:	4618      	mov	r0, r3
 80070ac:	f019 f97d 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('S', Direction::STRAIGHT, {'K', 'I', 'L'}, UNIT);
 80070b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070b4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80070b8:	214e      	movs	r1, #78	; 0x4e
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	f001 f8a7 	bl	800820e <_ZN3jlb5GraphixEc>
 80070c0:	4604      	mov	r4, r0
 80070c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070c6:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80070ca:	4a41      	ldr	r2, [pc, #260]	; (80071d0 <_ZN3jlb5GraphC1Ev+0x2428>)
 80070cc:	6812      	ldr	r2, [r2, #0]
 80070ce:	4611      	mov	r1, r2
 80070d0:	8019      	strh	r1, [r3, #0]
 80070d2:	3302      	adds	r3, #2
 80070d4:	0c12      	lsrs	r2, r2, #16
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070dc:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80070e0:	f607 0298 	addw	r2, r7, #2200	; 0x898
 80070e4:	601a      	str	r2, [r3, #0]
 80070e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070ea:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80070ee:	2203      	movs	r2, #3
 80070f0:	605a      	str	r2, [r3, #4]
 80070f2:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 80070f6:	4618      	mov	r0, r3
 80070f8:	f019 f955 	bl	80203a6 <_ZNSaIcEC1Ev>
 80070fc:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8007100:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007104:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8007108:	f607 0084 	addw	r0, r7, #2180	; 0x884
 800710c:	ca06      	ldmia	r2, {r1, r2}
 800710e:	f004 feeb 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007112:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8007116:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80071d4 <_ZN3jlb5GraphC1Ev+0x242c>
 800711a:	2202      	movs	r2, #2
 800711c:	2153      	movs	r1, #83	; 0x53
 800711e:	4620      	mov	r0, r4
 8007120:	f7fd fdf3 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007124:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8007128:	4618      	mov	r0, r3
 800712a:	f004 fe4b 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 800712e:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8007132:	4618      	mov	r0, r3
 8007134:	f019 f939 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('R', Direction::RIGHT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8007138:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800713c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007140:	214e      	movs	r1, #78	; 0x4e
 8007142:	6818      	ldr	r0, [r3, #0]
 8007144:	f001 f863 	bl	800820e <_ZN3jlb5GraphixEc>
 8007148:	4604      	mov	r4, r0
 800714a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800714e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8007152:	4a1f      	ldr	r2, [pc, #124]	; (80071d0 <_ZN3jlb5GraphC1Ev+0x2428>)
 8007154:	6812      	ldr	r2, [r2, #0]
 8007156:	4611      	mov	r1, r2
 8007158:	8019      	strh	r1, [r3, #0]
 800715a:	3302      	adds	r3, #2
 800715c:	0c12      	lsrs	r2, r2, #16
 800715e:	701a      	strb	r2, [r3, #0]
 8007160:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007164:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8007168:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007172:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8007176:	2203      	movs	r2, #3
 8007178:	605a      	str	r2, [r3, #4]
 800717a:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 800717e:	4618      	mov	r0, r3
 8007180:	f019 f911 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007184:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8007188:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800718c:	f5a2 726f 	sub.w	r2, r2, #956	; 0x3bc
 8007190:	f507 600a 	add.w	r0, r7, #2208	; 0x8a0
 8007194:	ca06      	ldmia	r2, {r1, r2}
 8007196:	f004 fea7 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800719a:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800719e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80071c4 <_ZN3jlb5GraphC1Ev+0x241c>
 80071a2:	2201      	movs	r2, #1
 80071a4:	2152      	movs	r1, #82	; 0x52
 80071a6:	4620      	mov	r0, r4
 80071a8:	f7fd fdaf 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80071ac:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80071b0:	4618      	mov	r0, r3
 80071b2:	f004 fe07 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80071b6:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80071ba:	4618      	mov	r0, r3
 80071bc:	e00c      	b.n	80071d8 <_ZN3jlb5GraphC1Ev+0x2430>
 80071be:	bf00      	nop
 80071c0:	08023e68 	.word	0x08023e68
 80071c4:	3f71463a 	.word	0x3f71463a
 80071c8:	08023e6c 	.word	0x08023e6c
 80071cc:	3f99999a 	.word	0x3f99999a
 80071d0:	08023e70 	.word	0x08023e70
 80071d4:	3f19999a 	.word	0x3f19999a
 80071d8:	f019 f8e7 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('L', Direction::LEFT, {'T', 'U', 'W'}, QUARTER_CIRCLE);
 80071dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071e0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80071e4:	214f      	movs	r1, #79	; 0x4f
 80071e6:	6818      	ldr	r0, [r3, #0]
 80071e8:	f001 f811 	bl	800820e <_ZN3jlb5GraphixEc>
 80071ec:	4604      	mov	r4, r0
 80071ee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071f2:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 80071f6:	4aeb      	ldr	r2, [pc, #940]	; (80075a4 <_ZN3jlb5GraphC1Ev+0x27fc>)
 80071f8:	6812      	ldr	r2, [r2, #0]
 80071fa:	4611      	mov	r1, r2
 80071fc:	8019      	strh	r1, [r3, #0]
 80071fe:	3302      	adds	r3, #2
 8007200:	0c12      	lsrs	r2, r2, #16
 8007202:	701a      	strb	r2, [r3, #0]
 8007204:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007208:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800720c:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007216:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800721a:	2203      	movs	r2, #3
 800721c:	605a      	str	r2, [r3, #4]
 800721e:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8007222:	4618      	mov	r0, r3
 8007224:	f019 f8bf 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007228:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 800722c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007230:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8007234:	f607 00bc 	addw	r0, r7, #2236	; 0x8bc
 8007238:	ca06      	ldmia	r2, {r1, r2}
 800723a:	f004 fe55 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800723e:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8007242:	ed9f 0adc 	vldr	s0, [pc, #880]	; 80075b4 <_ZN3jlb5GraphC1Ev+0x280c>
 8007246:	2200      	movs	r2, #0
 8007248:	214c      	movs	r1, #76	; 0x4c
 800724a:	4620      	mov	r0, r4
 800724c:	f7fd fd5d 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007250:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8007254:	4618      	mov	r0, r3
 8007256:	f004 fdb5 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 800725a:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 800725e:	4618      	mov	r0, r3
 8007260:	f019 f8a3 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('U', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8007264:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007268:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800726c:	214f      	movs	r1, #79	; 0x4f
 800726e:	6818      	ldr	r0, [r3, #0]
 8007270:	f000 ffcd 	bl	800820e <_ZN3jlb5GraphixEc>
 8007274:	4604      	mov	r4, r0
 8007276:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800727a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800727e:	224c      	movs	r2, #76	; 0x4c
 8007280:	701a      	strb	r2, [r3, #0]
 8007282:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007286:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800728a:	f607 02ec 	addw	r2, r7, #2284	; 0x8ec
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007294:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8007298:	2201      	movs	r2, #1
 800729a:	605a      	str	r2, [r3, #4]
 800729c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80072a0:	4618      	mov	r0, r3
 80072a2:	f019 f880 	bl	80203a6 <_ZNSaIcEC1Ev>
 80072a6:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80072aa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80072ae:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 80072b2:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
 80072b6:	ca06      	ldmia	r2, {r1, r2}
 80072b8:	f004 fe16 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80072bc:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80072c0:	ed9f 0abc 	vldr	s0, [pc, #752]	; 80075b4 <_ZN3jlb5GraphC1Ev+0x280c>
 80072c4:	2200      	movs	r2, #0
 80072c6:	2155      	movs	r1, #85	; 0x55
 80072c8:	4620      	mov	r0, r4
 80072ca:	f7fd fd1e 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80072ce:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80072d2:	4618      	mov	r0, r3
 80072d4:	f004 fd76 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80072d8:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80072dc:	4618      	mov	r0, r3
 80072de:	f019 f864 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('W', Direction::STRAIGHT, {'L'}, UNIT + QUARTER_CIRCLE);
 80072e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072e6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80072ea:	214f      	movs	r1, #79	; 0x4f
 80072ec:	6818      	ldr	r0, [r3, #0]
 80072ee:	f000 ff8e 	bl	800820e <_ZN3jlb5GraphixEc>
 80072f2:	4604      	mov	r4, r0
 80072f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072f8:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80072fc:	224c      	movs	r2, #76	; 0x4c
 80072fe:	701a      	strb	r2, [r3, #0]
 8007300:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007304:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8007308:	f607 1208 	addw	r2, r7, #2312	; 0x908
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007312:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8007316:	2201      	movs	r2, #1
 8007318:	605a      	str	r2, [r3, #4]
 800731a:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 800731e:	4618      	mov	r0, r3
 8007320:	f019 f841 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007324:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8007328:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800732c:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 8007330:	f607 00f4 	addw	r0, r7, #2292	; 0x8f4
 8007334:	ca06      	ldmia	r2, {r1, r2}
 8007336:	f004 fdd7 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800733a:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 800733e:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 80075a8 <_ZN3jlb5GraphC1Ev+0x2800>
 8007342:	2202      	movs	r2, #2
 8007344:	2157      	movs	r1, #87	; 0x57
 8007346:	4620      	mov	r0, r4
 8007348:	f7fd fcdf 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800734c:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8007350:	4618      	mov	r0, r3
 8007352:	f004 fd37 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007356:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 800735a:	4618      	mov	r0, r3
 800735c:	f019 f825 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('T', Direction::RIGHT, {'L'}, QUARTER_CIRCLE);
 8007360:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007364:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007368:	214f      	movs	r1, #79	; 0x4f
 800736a:	6818      	ldr	r0, [r3, #0]
 800736c:	f000 ff4f 	bl	800820e <_ZN3jlb5GraphixEc>
 8007370:	4604      	mov	r4, r0
 8007372:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007376:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800737a:	224c      	movs	r2, #76	; 0x4c
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007382:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8007386:	f607 1224 	addw	r2, r7, #2340	; 0x924
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007390:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8007394:	2201      	movs	r2, #1
 8007396:	605a      	str	r2, [r3, #4]
 8007398:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800739c:	4618      	mov	r0, r3
 800739e:	f019 f802 	bl	80203a6 <_ZNSaIcEC1Ev>
 80073a2:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80073a6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80073aa:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 80073ae:	f507 6011 	add.w	r0, r7, #2320	; 0x910
 80073b2:	ca06      	ldmia	r2, {r1, r2}
 80073b4:	f004 fd98 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80073b8:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80073bc:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80075b4 <_ZN3jlb5GraphC1Ev+0x280c>
 80073c0:	2201      	movs	r2, #1
 80073c2:	2154      	movs	r1, #84	; 0x54
 80073c4:	4620      	mov	r0, r4
 80073c6:	f7fd fca0 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80073ca:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80073ce:	4618      	mov	r0, r3
 80073d0:	f004 fcf8 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80073d4:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80073d8:	4618      	mov	r0, r3
 80073da:	f018 ffe6 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('M', Direction::LEFT, {'P'}, QUARTER_CIRCLE);
 80073de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073e2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80073e6:	2150      	movs	r1, #80	; 0x50
 80073e8:	6818      	ldr	r0, [r3, #0]
 80073ea:	f000 ff10 	bl	800820e <_ZN3jlb5GraphixEc>
 80073ee:	4604      	mov	r4, r0
 80073f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073f4:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80073f8:	2250      	movs	r2, #80	; 0x50
 80073fa:	701a      	strb	r2, [r3, #0]
 80073fc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007400:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8007404:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800740e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8007412:	2201      	movs	r2, #1
 8007414:	605a      	str	r2, [r3, #4]
 8007416:	f607 1344 	addw	r3, r7, #2372	; 0x944
 800741a:	4618      	mov	r0, r3
 800741c:	f018 ffc3 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007420:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8007424:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007428:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 800742c:	f607 102c 	addw	r0, r7, #2348	; 0x92c
 8007430:	ca06      	ldmia	r2, {r1, r2}
 8007432:	f004 fd59 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007436:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 800743a:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80075b4 <_ZN3jlb5GraphC1Ev+0x280c>
 800743e:	2200      	movs	r2, #0
 8007440:	214d      	movs	r1, #77	; 0x4d
 8007442:	4620      	mov	r0, r4
 8007444:	f7fd fc61 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007448:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 800744c:	4618      	mov	r0, r3
 800744e:	f004 fcb9 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007452:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8007456:	4618      	mov	r0, r3
 8007458:	f018 ffa7 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('Q', Direction::STRAIGHT, {'P'}, UNIT);
 800745c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007460:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007464:	2150      	movs	r1, #80	; 0x50
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	f000 fed1 	bl	800820e <_ZN3jlb5GraphixEc>
 800746c:	4604      	mov	r4, r0
 800746e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007472:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8007476:	2250      	movs	r2, #80	; 0x50
 8007478:	701a      	strb	r2, [r3, #0]
 800747a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800747e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8007482:	f607 125c 	addw	r2, r7, #2396	; 0x95c
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800748c:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8007490:	2201      	movs	r2, #1
 8007492:	605a      	str	r2, [r3, #4]
 8007494:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8007498:	4618      	mov	r0, r3
 800749a:	f018 ff84 	bl	80203a6 <_ZNSaIcEC1Ev>
 800749e:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80074a2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80074a6:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 80074aa:	f607 1048 	addw	r0, r7, #2376	; 0x948
 80074ae:	ca06      	ldmia	r2, {r1, r2}
 80074b0:	f004 fd1a 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80074b4:	f607 1348 	addw	r3, r7, #2376	; 0x948
 80074b8:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80075b0 <_ZN3jlb5GraphC1Ev+0x2808>
 80074bc:	2202      	movs	r2, #2
 80074be:	2151      	movs	r1, #81	; 0x51
 80074c0:	4620      	mov	r0, r4
 80074c2:	f7fd fc22 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80074c6:	f607 1348 	addw	r3, r7, #2376	; 0x948
 80074ca:	4618      	mov	r0, r3
 80074cc:	f004 fc7a 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80074d0:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80074d4:	4618      	mov	r0, r3
 80074d6:	f018 ff68 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('P', Direction::STRAIGHT, {'R'}, UNIT);
 80074da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074de:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80074e2:	2151      	movs	r1, #81	; 0x51
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	f000 fe92 	bl	800820e <_ZN3jlb5GraphixEc>
 80074ea:	4604      	mov	r4, r0
 80074ec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074f0:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80074f4:	2252      	movs	r2, #82	; 0x52
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074fc:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8007500:	f607 1278 	addw	r2, r7, #2424	; 0x978
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800750a:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800750e:	2201      	movs	r2, #1
 8007510:	605a      	str	r2, [r3, #4]
 8007512:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8007516:	4618      	mov	r0, r3
 8007518:	f018 ff45 	bl	80203a6 <_ZNSaIcEC1Ev>
 800751c:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8007520:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007524:	f5a2 723e 	sub.w	r2, r2, #760	; 0x2f8
 8007528:	f607 1064 	addw	r0, r7, #2404	; 0x964
 800752c:	ca06      	ldmia	r2, {r1, r2}
 800752e:	f004 fcdb 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007532:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8007536:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80075b0 <_ZN3jlb5GraphC1Ev+0x2808>
 800753a:	2202      	movs	r2, #2
 800753c:	2150      	movs	r1, #80	; 0x50
 800753e:	4620      	mov	r0, r4
 8007540:	f7fd fbe3 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007544:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8007548:	4618      	mov	r0, r3
 800754a:	f004 fc3b 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 800754e:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8007552:	4618      	mov	r0, r3
 8007554:	f018 ff29 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('M', Direction::STRAIGHT, {'V', 'X'}, UNIT);
 8007558:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800755c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007560:	2151      	movs	r1, #81	; 0x51
 8007562:	6818      	ldr	r0, [r3, #0]
 8007564:	f000 fe53 	bl	800820e <_ZN3jlb5GraphixEc>
 8007568:	4604      	mov	r4, r0
 800756a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800756e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8007572:	4a0e      	ldr	r2, [pc, #56]	; (80075ac <_ZN3jlb5GraphC1Ev+0x2804>)
 8007574:	8812      	ldrh	r2, [r2, #0]
 8007576:	801a      	strh	r2, [r3, #0]
 8007578:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800757c:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8007580:	f607 1294 	addw	r2, r7, #2452	; 0x994
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800758a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800758e:	2202      	movs	r2, #2
 8007590:	605a      	str	r2, [r3, #4]
 8007592:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8007596:	4618      	mov	r0, r3
 8007598:	f018 ff05 	bl	80203a6 <_ZNSaIcEC1Ev>
 800759c:	f607 1398 	addw	r3, r7, #2456	; 0x998
 80075a0:	e00c      	b.n	80075bc <_ZN3jlb5GraphC1Ev+0x2814>
 80075a2:	bf00      	nop
 80075a4:	08023e74 	.word	0x08023e74
 80075a8:	3fc56fea 	.word	0x3fc56fea
 80075ac:	08023e78 	.word	0x08023e78
 80075b0:	3f19999a 	.word	0x3f19999a
 80075b4:	3f71463a 	.word	0x3f71463a
 80075b8:	401c518f 	.word	0x401c518f
 80075bc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80075c0:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 80075c4:	f507 6018 	add.w	r0, r7, #2432	; 0x980
 80075c8:	ca06      	ldmia	r2, {r1, r2}
 80075ca:	f004 fc8d 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80075ce:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80075d2:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 80075b0 <_ZN3jlb5GraphC1Ev+0x2808>
 80075d6:	2202      	movs	r2, #2
 80075d8:	214d      	movs	r1, #77	; 0x4d
 80075da:	4620      	mov	r0, r4
 80075dc:	f7fd fb95 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80075e0:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80075e4:	4618      	mov	r0, r3
 80075e6:	f004 fbed 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80075ea:	f607 1398 	addw	r3, r7, #2456	; 0x998
 80075ee:	4618      	mov	r0, r3
 80075f0:	f018 fedb 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('R', Direction::STRAIGHT, {'P'}, UNIT);
 80075f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075f8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80075fc:	2151      	movs	r1, #81	; 0x51
 80075fe:	6818      	ldr	r0, [r3, #0]
 8007600:	f000 fe05 	bl	800820e <_ZN3jlb5GraphixEc>
 8007604:	4604      	mov	r4, r0
 8007606:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800760a:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800760e:	2250      	movs	r2, #80	; 0x50
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007616:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800761a:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007624:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8007628:	2201      	movs	r2, #1
 800762a:	605a      	str	r2, [r3, #4]
 800762c:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8007630:	4618      	mov	r0, r3
 8007632:	f018 feb8 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007636:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 800763a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800763e:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8007642:	f607 109c 	addw	r0, r7, #2460	; 0x99c
 8007646:	ca06      	ldmia	r2, {r1, r2}
 8007648:	f004 fc4e 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800764c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8007650:	ed1f 0a29 	vldr	s0, [pc, #-164]	; 80075b0 <_ZN3jlb5GraphC1Ev+0x2808>
 8007654:	2202      	movs	r2, #2
 8007656:	2152      	movs	r1, #82	; 0x52
 8007658:	4620      	mov	r0, r4
 800765a:	f7fd fb56 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800765e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8007662:	4618      	mov	r0, r3
 8007664:	f004 fbae 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007668:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 800766c:	4618      	mov	r0, r3
 800766e:	f018 fe9c 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('V', Direction::LEFT, {'M'}, QUARTER_CIRCLE);
 8007672:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007676:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800767a:	2151      	movs	r1, #81	; 0x51
 800767c:	6818      	ldr	r0, [r3, #0]
 800767e:	f000 fdc6 	bl	800820e <_ZN3jlb5GraphixEc>
 8007682:	4604      	mov	r4, r0
 8007684:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007688:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800768c:	224d      	movs	r2, #77	; 0x4d
 800768e:	701a      	strb	r2, [r3, #0]
 8007690:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007694:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8007698:	f607 12cc 	addw	r2, r7, #2508	; 0x9cc
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076a2:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80076a6:	2201      	movs	r2, #1
 80076a8:	605a      	str	r2, [r3, #4]
 80076aa:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80076ae:	4618      	mov	r0, r3
 80076b0:	f018 fe79 	bl	80203a6 <_ZNSaIcEC1Ev>
 80076b4:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80076b8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80076bc:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80076c0:	f607 10b8 	addw	r0, r7, #2488	; 0x9b8
 80076c4:	ca06      	ldmia	r2, {r1, r2}
 80076c6:	f004 fc0f 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80076ca:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80076ce:	ed1f 0a47 	vldr	s0, [pc, #-284]	; 80075b4 <_ZN3jlb5GraphC1Ev+0x280c>
 80076d2:	2200      	movs	r2, #0
 80076d4:	2156      	movs	r1, #86	; 0x56
 80076d6:	4620      	mov	r0, r4
 80076d8:	f7fd fb17 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80076dc:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80076e0:	4618      	mov	r0, r3
 80076e2:	f004 fb6f 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80076e6:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80076ea:	4618      	mov	r0, r3
 80076ec:	f018 fe5d 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('X', Direction::STRAIGHT, {'M'}, 2.5f * UNIT + QUARTER_CIRCLE);
 80076f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076f4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80076f8:	2151      	movs	r1, #81	; 0x51
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	f000 fd87 	bl	800820e <_ZN3jlb5GraphixEc>
 8007700:	4604      	mov	r4, r0
 8007702:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007706:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800770a:	224d      	movs	r2, #77	; 0x4d
 800770c:	701a      	strb	r2, [r3, #0]
 800770e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007712:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8007716:	f607 12e8 	addw	r2, r7, #2536	; 0x9e8
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007720:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8007724:	2201      	movs	r2, #1
 8007726:	605a      	str	r2, [r3, #4]
 8007728:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 800772c:	4618      	mov	r0, r3
 800772e:	f018 fe3a 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007732:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8007736:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800773a:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 800773e:	f607 10d4 	addw	r0, r7, #2516	; 0x9d4
 8007742:	ca06      	ldmia	r2, {r1, r2}
 8007744:	f004 fbd0 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007748:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 800774c:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 80075b8 <_ZN3jlb5GraphC1Ev+0x2810>
 8007750:	2202      	movs	r2, #2
 8007752:	2158      	movs	r1, #88	; 0x58
 8007754:	4620      	mov	r0, r4
 8007756:	f7fd fad8 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800775a:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 800775e:	4618      	mov	r0, r3
 8007760:	f004 fb30 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007764:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8007768:	4618      	mov	r0, r3
 800776a:	f018 fe1e 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('Q', Direction::STRAIGHT, {'N', 'S'}, UNIT);
 800776e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007772:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007776:	2152      	movs	r1, #82	; 0x52
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	f000 fd48 	bl	800820e <_ZN3jlb5GraphixEc>
 800777e:	4604      	mov	r4, r0
 8007780:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007784:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007788:	4ae6      	ldr	r2, [pc, #920]	; (8007b24 <_ZN3jlb5GraphC1Ev+0x2d7c>)
 800778a:	8812      	ldrh	r2, [r2, #0]
 800778c:	801a      	strh	r2, [r3, #0]
 800778e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007792:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007796:	f607 2204 	addw	r2, r7, #2564	; 0xa04
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077a0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80077a4:	2202      	movs	r2, #2
 80077a6:	605a      	str	r2, [r3, #4]
 80077a8:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80077ac:	4618      	mov	r0, r3
 80077ae:	f018 fdfa 	bl	80203a6 <_ZNSaIcEC1Ev>
 80077b2:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80077b6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80077ba:	f5a2 721b 	sub.w	r2, r2, #620	; 0x26c
 80077be:	f507 601f 	add.w	r0, r7, #2544	; 0x9f0
 80077c2:	ca06      	ldmia	r2, {r1, r2}
 80077c4:	f004 fb90 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80077c8:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80077cc:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8007b28 <_ZN3jlb5GraphC1Ev+0x2d80>
 80077d0:	2202      	movs	r2, #2
 80077d2:	2151      	movs	r1, #81	; 0x51
 80077d4:	4620      	mov	r0, r4
 80077d6:	f7fd fa98 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80077da:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80077de:	4618      	mov	r0, r3
 80077e0:	f004 faf0 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80077e4:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80077e8:	4618      	mov	r0, r3
 80077ea:	f018 fdde 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('M', Direction::RIGHT, {'N', 'S'}, QUARTER_CIRCLE);
 80077ee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077f2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80077f6:	2152      	movs	r1, #82	; 0x52
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	f000 fd08 	bl	800820e <_ZN3jlb5GraphixEc>
 80077fe:	4604      	mov	r4, r0
 8007800:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007804:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8007808:	4ac6      	ldr	r2, [pc, #792]	; (8007b24 <_ZN3jlb5GraphC1Ev+0x2d7c>)
 800780a:	8812      	ldrh	r2, [r2, #0]
 800780c:	801a      	strh	r2, [r3, #0]
 800780e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007812:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8007816:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007820:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8007824:	2202      	movs	r2, #2
 8007826:	605a      	str	r2, [r3, #4]
 8007828:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 800782c:	4618      	mov	r0, r3
 800782e:	f018 fdba 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007832:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8007836:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800783a:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 800783e:	f607 200c 	addw	r0, r7, #2572	; 0xa0c
 8007842:	ca06      	ldmia	r2, {r1, r2}
 8007844:	f004 fb50 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007848:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 800784c:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8007b34 <_ZN3jlb5GraphC1Ev+0x2d8c>
 8007850:	2201      	movs	r2, #1
 8007852:	214d      	movs	r1, #77	; 0x4d
 8007854:	4620      	mov	r0, r4
 8007856:	f7fd fa58 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800785a:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 800785e:	4618      	mov	r0, r3
 8007860:	f004 fab0 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007864:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8007868:	4618      	mov	r0, r3
 800786a:	f018 fd9e 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('N', Direction::LEFT, {'M', 'Q'}, QUARTER_CIRCLE);
 800786e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007872:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007876:	2152      	movs	r1, #82	; 0x52
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	f000 fcc8 	bl	800820e <_ZN3jlb5GraphixEc>
 800787e:	4604      	mov	r4, r0
 8007880:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007884:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8007888:	4aa8      	ldr	r2, [pc, #672]	; (8007b2c <_ZN3jlb5GraphC1Ev+0x2d84>)
 800788a:	8812      	ldrh	r2, [r2, #0]
 800788c:	801a      	strh	r2, [r3, #0]
 800788e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007892:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8007896:	f607 223c 	addw	r2, r7, #2620	; 0xa3c
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078a0:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80078a4:	2202      	movs	r2, #2
 80078a6:	605a      	str	r2, [r3, #4]
 80078a8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80078ac:	4618      	mov	r0, r3
 80078ae:	f018 fd7a 	bl	80203a6 <_ZNSaIcEC1Ev>
 80078b2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80078b6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80078ba:	f5a2 720d 	sub.w	r2, r2, #564	; 0x234
 80078be:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 80078c2:	ca06      	ldmia	r2, {r1, r2}
 80078c4:	f004 fb10 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80078c8:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80078cc:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8007b34 <_ZN3jlb5GraphC1Ev+0x2d8c>
 80078d0:	2200      	movs	r2, #0
 80078d2:	214e      	movs	r1, #78	; 0x4e
 80078d4:	4620      	mov	r0, r4
 80078d6:	f7fd fa18 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80078da:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80078de:	4618      	mov	r0, r3
 80078e0:	f004 fa70 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80078e4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80078e8:	4618      	mov	r0, r3
 80078ea:	f018 fd5e 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('S', Direction::STRAIGHT, {'M', 'Q'}, UNIT);
 80078ee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078f2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80078f6:	2152      	movs	r1, #82	; 0x52
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	f000 fc88 	bl	800820e <_ZN3jlb5GraphixEc>
 80078fe:	4604      	mov	r4, r0
 8007900:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007904:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8007908:	4a88      	ldr	r2, [pc, #544]	; (8007b2c <_ZN3jlb5GraphC1Ev+0x2d84>)
 800790a:	8812      	ldrh	r2, [r2, #0]
 800790c:	801a      	strh	r2, [r3, #0]
 800790e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007912:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8007916:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007920:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8007924:	2202      	movs	r2, #2
 8007926:	605a      	str	r2, [r3, #4]
 8007928:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 800792c:	4618      	mov	r0, r3
 800792e:	f018 fd3a 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007932:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8007936:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800793a:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800793e:	f607 2044 	addw	r0, r7, #2628	; 0xa44
 8007942:	ca06      	ldmia	r2, {r1, r2}
 8007944:	f004 fad0 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007948:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 800794c:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8007b28 <_ZN3jlb5GraphC1Ev+0x2d80>
 8007950:	2202      	movs	r2, #2
 8007952:	2153      	movs	r1, #83	; 0x53
 8007954:	4620      	mov	r0, r4
 8007956:	f7fd f9d8 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800795a:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 800795e:	4618      	mov	r0, r3
 8007960:	f004 fa30 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007964:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8007968:	4618      	mov	r0, r3
 800796a:	f018 fd1e 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('R', Direction::STRAIGHT, {'T'}, UNIT);
 800796e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007972:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007976:	2153      	movs	r1, #83	; 0x53
 8007978:	6818      	ldr	r0, [r3, #0]
 800797a:	f000 fc48 	bl	800820e <_ZN3jlb5GraphixEc>
 800797e:	4604      	mov	r4, r0
 8007980:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007984:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8007988:	2254      	movs	r2, #84	; 0x54
 800798a:	701a      	strb	r2, [r3, #0]
 800798c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007990:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007994:	f607 2274 	addw	r2, r7, #2676	; 0xa74
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800799e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079a2:	2201      	movs	r2, #1
 80079a4:	605a      	str	r2, [r3, #4]
 80079a6:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80079aa:	4618      	mov	r0, r3
 80079ac:	f018 fcfb 	bl	80203a6 <_ZNSaIcEC1Ev>
 80079b0:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80079b4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80079b8:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 80079bc:	f507 6026 	add.w	r0, r7, #2656	; 0xa60
 80079c0:	ca06      	ldmia	r2, {r1, r2}
 80079c2:	f004 fa91 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80079c6:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80079ca:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8007b28 <_ZN3jlb5GraphC1Ev+0x2d80>
 80079ce:	2202      	movs	r2, #2
 80079d0:	2152      	movs	r1, #82	; 0x52
 80079d2:	4620      	mov	r0, r4
 80079d4:	f7fd f999 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80079d8:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80079dc:	4618      	mov	r0, r3
 80079de:	f004 f9f1 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80079e2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80079e6:	4618      	mov	r0, r3
 80079e8:	f018 fcdf 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('N', Direction::STRAIGHT, {'V', 'W'}, UNIT);
 80079ec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079f0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80079f4:	2153      	movs	r1, #83	; 0x53
 80079f6:	6818      	ldr	r0, [r3, #0]
 80079f8:	f000 fc09 	bl	800820e <_ZN3jlb5GraphixEc>
 80079fc:	4604      	mov	r4, r0
 80079fe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a02:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007a06:	4a4a      	ldr	r2, [pc, #296]	; (8007b30 <_ZN3jlb5GraphC1Ev+0x2d88>)
 8007a08:	8812      	ldrh	r2, [r2, #0]
 8007a0a:	801a      	strh	r2, [r3, #0]
 8007a0c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a10:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007a14:	f507 6229 	add.w	r2, r7, #2704	; 0xa90
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a1e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007a22:	2202      	movs	r2, #2
 8007a24:	605a      	str	r2, [r3, #4]
 8007a26:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f018 fcbb 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007a30:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8007a34:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007a38:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 8007a3c:	f607 207c 	addw	r0, r7, #2684	; 0xa7c
 8007a40:	ca06      	ldmia	r2, {r1, r2}
 8007a42:	f004 fa51 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007a46:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 8007a4a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8007b28 <_ZN3jlb5GraphC1Ev+0x2d80>
 8007a4e:	2202      	movs	r2, #2
 8007a50:	214e      	movs	r1, #78	; 0x4e
 8007a52:	4620      	mov	r0, r4
 8007a54:	f7fd f959 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007a58:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f004 f9b1 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007a62:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8007a66:	4618      	mov	r0, r3
 8007a68:	f018 fc9f 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('T', Direction::STRAIGHT, {'R'}, UNIT);
 8007a6c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a70:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007a74:	2153      	movs	r1, #83	; 0x53
 8007a76:	6818      	ldr	r0, [r3, #0]
 8007a78:	f000 fbc9 	bl	800820e <_ZN3jlb5GraphixEc>
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a82:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007a86:	2252      	movs	r2, #82	; 0x52
 8007a88:	701a      	strb	r2, [r3, #0]
 8007a8a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a8e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007a92:	f607 22ac 	addw	r2, r7, #2732	; 0xaac
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a9c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	605a      	str	r2, [r3, #4]
 8007aa4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f018 fc7c 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007aae:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8007ab2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007ab6:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8007aba:	f607 2098 	addw	r0, r7, #2712	; 0xa98
 8007abe:	ca06      	ldmia	r2, {r1, r2}
 8007ac0:	f004 fa12 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007ac4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8007ac8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007b28 <_ZN3jlb5GraphC1Ev+0x2d80>
 8007acc:	2202      	movs	r2, #2
 8007ace:	2154      	movs	r1, #84	; 0x54
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f7fd f91a 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007ad6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8007ada:	4618      	mov	r0, r3
 8007adc:	f004 f972 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007ae0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f018 fc60 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('W', Direction::LEFT, {'N'}, QUARTER_CIRCLE);
 8007aea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007aee:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007af2:	2153      	movs	r1, #83	; 0x53
 8007af4:	6818      	ldr	r0, [r3, #0]
 8007af6:	f000 fb8a 	bl	800820e <_ZN3jlb5GraphixEc>
 8007afa:	4604      	mov	r4, r0
 8007afc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b00:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8007b04:	224e      	movs	r2, #78	; 0x4e
 8007b06:	701a      	strb	r2, [r3, #0]
 8007b08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b0c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007b10:	f607 22c8 	addw	r2, r7, #2760	; 0xac8
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b1a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007b1e:	2201      	movs	r2, #1
 8007b20:	605a      	str	r2, [r3, #4]
 8007b22:	e009      	b.n	8007b38 <_ZN3jlb5GraphC1Ev+0x2d90>
 8007b24:	08023e7c 	.word	0x08023e7c
 8007b28:	3f19999a 	.word	0x3f19999a
 8007b2c:	08023e80 	.word	0x08023e80
 8007b30:	08023e84 	.word	0x08023e84
 8007b34:	3f71463a 	.word	0x3f71463a
 8007b38:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f018 fc32 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007b42:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8007b46:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007b4a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8007b4e:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 8007b52:	ca06      	ldmia	r2, {r1, r2}
 8007b54:	f004 f9c8 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007b58:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 8007b5c:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 8007b34 <_ZN3jlb5GraphC1Ev+0x2d8c>
 8007b60:	2200      	movs	r2, #0
 8007b62:	2157      	movs	r1, #87	; 0x57
 8007b64:	4620      	mov	r0, r4
 8007b66:	f7fd f8d0 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007b6a:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f004 f928 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007b74:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f018 fc16 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('V', Direction::RIGHT, {'N'}, QUARTER_CIRCLE);
 8007b7e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b82:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007b86:	2153      	movs	r1, #83	; 0x53
 8007b88:	6818      	ldr	r0, [r3, #0]
 8007b8a:	f000 fb40 	bl	800820e <_ZN3jlb5GraphixEc>
 8007b8e:	4604      	mov	r4, r0
 8007b90:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b94:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007b98:	224e      	movs	r2, #78	; 0x4e
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ba0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007ba4:	f607 22e4 	addw	r2, r7, #2788	; 0xae4
 8007ba8:	601a      	str	r2, [r3, #0]
 8007baa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007bae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	605a      	str	r2, [r3, #4]
 8007bb6:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f018 fbf3 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007bc0:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8007bc4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007bc8:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 8007bcc:	f507 602d 	add.w	r0, r7, #2768	; 0xad0
 8007bd0:	ca06      	ldmia	r2, {r1, r2}
 8007bd2:	f004 f989 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007bd6:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8007bda:	ed1f 0a2a 	vldr	s0, [pc, #-168]	; 8007b34 <_ZN3jlb5GraphC1Ev+0x2d8c>
 8007bde:	2201      	movs	r2, #1
 8007be0:	2156      	movs	r1, #86	; 0x56
 8007be2:	4620      	mov	r0, r4
 8007be4:	f7fd f891 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007be8:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8007bec:	4618      	mov	r0, r3
 8007bee:	f004 f8e9 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007bf2:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f018 fbd7 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('S', Direction::STRAIGHT, {'O', 'U'}, UNIT);
 8007bfc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c00:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007c04:	2154      	movs	r1, #84	; 0x54
 8007c06:	6818      	ldr	r0, [r3, #0]
 8007c08:	f000 fb01 	bl	800820e <_ZN3jlb5GraphixEc>
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c12:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007c16:	4ae9      	ldr	r2, [pc, #932]	; (8007fbc <_ZN3jlb5GraphC1Ev+0x3214>)
 8007c18:	8812      	ldrh	r2, [r2, #0]
 8007c1a:	801a      	strh	r2, [r3, #0]
 8007c1c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c20:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007c24:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c2e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007c32:	2202      	movs	r2, #2
 8007c34:	605a      	str	r2, [r3, #4]
 8007c36:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f018 fbb3 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007c40:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8007c44:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007c48:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8007c4c:	f607 20ec 	addw	r0, r7, #2796	; 0xaec
 8007c50:	ca06      	ldmia	r2, {r1, r2}
 8007c52:	f004 f949 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007c56:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 8007c5a:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8007fc0 <_ZN3jlb5GraphC1Ev+0x3218>
 8007c5e:	2202      	movs	r2, #2
 8007c60:	2153      	movs	r1, #83	; 0x53
 8007c62:	4620      	mov	r0, r4
 8007c64:	f7fd f851 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007c68:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f004 f8a9 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007c72:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8007c76:	4618      	mov	r0, r3
 8007c78:	f018 fb97 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('N', Direction::RIGHT, {'O', 'U'}, QUARTER_CIRCLE);
 8007c7c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c80:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007c84:	2154      	movs	r1, #84	; 0x54
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	f000 fac1 	bl	800820e <_ZN3jlb5GraphixEc>
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c92:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007c96:	4ac9      	ldr	r2, [pc, #804]	; (8007fbc <_ZN3jlb5GraphC1Ev+0x3214>)
 8007c98:	8812      	ldrh	r2, [r2, #0]
 8007c9a:	801a      	strh	r2, [r3, #0]
 8007c9c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ca0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007ca4:	f607 321c 	addw	r2, r7, #2844	; 0xb1c
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007cae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	605a      	str	r2, [r3, #4]
 8007cb6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f018 fb73 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007cc0:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007cc4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007cc8:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8007ccc:	f607 3008 	addw	r0, r7, #2824	; 0xb08
 8007cd0:	ca06      	ldmia	r2, {r1, r2}
 8007cd2:	f004 f909 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007cd6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8007cda:	ed9f 0abd 	vldr	s0, [pc, #756]	; 8007fd0 <_ZN3jlb5GraphC1Ev+0x3228>
 8007cde:	2201      	movs	r2, #1
 8007ce0:	214e      	movs	r1, #78	; 0x4e
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f7fd f811 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007ce8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8007cec:	4618      	mov	r0, r3
 8007cee:	f004 f869 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007cf2:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f018 fb57 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('O', Direction::LEFT, {'N', 'S'}, QUARTER_CIRCLE);
 8007cfc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d00:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007d04:	2154      	movs	r1, #84	; 0x54
 8007d06:	6818      	ldr	r0, [r3, #0]
 8007d08:	f000 fa81 	bl	800820e <_ZN3jlb5GraphixEc>
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d16:	4aab      	ldr	r2, [pc, #684]	; (8007fc4 <_ZN3jlb5GraphC1Ev+0x321c>)
 8007d18:	8812      	ldrh	r2, [r2, #0]
 8007d1a:	801a      	strh	r2, [r3, #0]
 8007d1c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d20:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007d24:	f607 3238 	addw	r2, r7, #2872	; 0xb38
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d2e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007d32:	2202      	movs	r2, #2
 8007d34:	605a      	str	r2, [r3, #4]
 8007d36:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f018 fb33 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007d40:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8007d44:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007d48:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8007d4c:	f607 3024 	addw	r0, r7, #2852	; 0xb24
 8007d50:	ca06      	ldmia	r2, {r1, r2}
 8007d52:	f004 f8c9 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007d56:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 8007d5a:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8007fd0 <_ZN3jlb5GraphC1Ev+0x3228>
 8007d5e:	2200      	movs	r2, #0
 8007d60:	214f      	movs	r1, #79	; 0x4f
 8007d62:	4620      	mov	r0, r4
 8007d64:	f7fc ffd1 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007d68:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f004 f829 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007d72:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8007d76:	4618      	mov	r0, r3
 8007d78:	f018 fb17 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('U', Direction::STRAIGHT, {'N', 'S'}, 2.0f * UNIT);
 8007d7c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d80:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007d84:	2154      	movs	r1, #84	; 0x54
 8007d86:	6818      	ldr	r0, [r3, #0]
 8007d88:	f000 fa41 	bl	800820e <_ZN3jlb5GraphixEc>
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007d96:	4a8b      	ldr	r2, [pc, #556]	; (8007fc4 <_ZN3jlb5GraphC1Ev+0x321c>)
 8007d98:	8812      	ldrh	r2, [r2, #0]
 8007d9a:	801a      	strh	r2, [r3, #0]
 8007d9c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007da0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007da4:	f607 3254 	addw	r2, r7, #2900	; 0xb54
 8007da8:	601a      	str	r2, [r3, #0]
 8007daa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007dae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007db2:	2202      	movs	r2, #2
 8007db4:	605a      	str	r2, [r3, #4]
 8007db6:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f018 faf3 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007dc0:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8007dc4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007dc8:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8007dcc:	f507 6034 	add.w	r0, r7, #2880	; 0xb40
 8007dd0:	ca06      	ldmia	r2, {r1, r2}
 8007dd2:	f004 f889 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007dd6:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8007dda:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8007fcc <_ZN3jlb5GraphC1Ev+0x3224>
 8007dde:	2202      	movs	r2, #2
 8007de0:	2155      	movs	r1, #85	; 0x55
 8007de2:	4620      	mov	r0, r4
 8007de4:	f7fc ff91 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007de8:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8007dec:	4618      	mov	r0, r3
 8007dee:	f003 ffe9 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007df2:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8007df6:	4618      	mov	r0, r3
 8007df8:	f018 fad7 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('T', Direction::STRAIGHT, {'U'}, 2.0f * UNIT);
 8007dfc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e00:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007e04:	2155      	movs	r1, #85	; 0x55
 8007e06:	6818      	ldr	r0, [r3, #0]
 8007e08:	f000 fa01 	bl	800820e <_ZN3jlb5GraphixEc>
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	2355      	movs	r3, #85	; 0x55
 8007e10:	f887 3b70 	strb.w	r3, [r7, #2928]	; 0xb70
 8007e14:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e18:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007e1c:	f507 6237 	add.w	r2, r7, #2928	; 0xb70
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e26:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	605a      	str	r2, [r3, #4]
 8007e2e:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8007e32:	4618      	mov	r0, r3
 8007e34:	f018 fab7 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007e38:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8007e3c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007e40:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007e44:	f607 305c 	addw	r0, r7, #2908	; 0xb5c
 8007e48:	ca06      	ldmia	r2, {r1, r2}
 8007e4a:	f004 f84d 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007e4e:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8007e52:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8007fcc <_ZN3jlb5GraphC1Ev+0x3224>
 8007e56:	2202      	movs	r2, #2
 8007e58:	2154      	movs	r1, #84	; 0x54
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f7fc ff55 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007e60:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8007e64:	4618      	mov	r0, r3
 8007e66:	f003 ffad 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007e6a:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f018 fa9b 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('O', Direction::RIGHT, {'U'}, QUARTER_CIRCLE);
 8007e74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e78:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007e7c:	2155      	movs	r1, #85	; 0x55
 8007e7e:	6818      	ldr	r0, [r3, #0]
 8007e80:	f000 f9c5 	bl	800820e <_ZN3jlb5GraphixEc>
 8007e84:	4604      	mov	r4, r0
 8007e86:	2355      	movs	r3, #85	; 0x55
 8007e88:	f887 3b8c 	strb.w	r3, [r7, #2956]	; 0xb8c
 8007e8c:	f607 338c 	addw	r3, r7, #2956	; 0xb8c
 8007e90:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8007e94:	2301      	movs	r3, #1
 8007e96:	f8c7 3b88 	str.w	r3, [r7, #2952]	; 0xb88
 8007e9a:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f018 fa81 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007ea4:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007ea8:	f607 3078 	addw	r0, r7, #2936	; 0xb78
 8007eac:	f607 3284 	addw	r2, r7, #2948	; 0xb84
 8007eb0:	ca06      	ldmia	r2, {r1, r2}
 8007eb2:	f004 f819 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007eb6:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8007eba:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8007fd0 <_ZN3jlb5GraphC1Ev+0x3228>
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	214f      	movs	r1, #79	; 0x4f
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f7fc ff21 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007ec8:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f003 ff79 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007ed2:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f018 fa67 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('Q', Direction::RIGHT, {'S', 'W'}, QUARTER_CIRCLE);
 8007edc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ee0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007ee4:	2156      	movs	r1, #86	; 0x56
 8007ee6:	6818      	ldr	r0, [r3, #0]
 8007ee8:	f000 f991 	bl	800820e <_ZN3jlb5GraphixEc>
 8007eec:	4604      	mov	r4, r0
 8007eee:	4b36      	ldr	r3, [pc, #216]	; (8007fc8 <_ZN3jlb5GraphC1Ev+0x3220>)
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	f8a7 3ba8 	strh.w	r3, [r7, #2984]	; 0xba8
 8007ef6:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 8007efa:	f8c7 3ba0 	str.w	r3, [r7, #2976]	; 0xba0
 8007efe:	2302      	movs	r3, #2
 8007f00:	f8c7 3ba4 	str.w	r3, [r7, #2980]	; 0xba4
 8007f04:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f018 fa4c 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007f0e:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8007f12:	f607 3094 	addw	r0, r7, #2964	; 0xb94
 8007f16:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8007f1a:	ca06      	ldmia	r2, {r1, r2}
 8007f1c:	f003 ffe4 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007f20:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8007f24:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8007fd0 <_ZN3jlb5GraphC1Ev+0x3228>
 8007f28:	2201      	movs	r2, #1
 8007f2a:	2151      	movs	r1, #81	; 0x51
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f7fc feec 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007f32:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8007f36:	4618      	mov	r0, r3
 8007f38:	f003 ff44 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007f3c:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8007f40:	4618      	mov	r0, r3
 8007f42:	f018 fa32 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('S', Direction::LEFT, {'Q'}, QUARTER_CIRCLE);
 8007f46:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f4a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007f4e:	2156      	movs	r1, #86	; 0x56
 8007f50:	6818      	ldr	r0, [r3, #0]
 8007f52:	f000 f95c 	bl	800820e <_ZN3jlb5GraphixEc>
 8007f56:	4604      	mov	r4, r0
 8007f58:	2351      	movs	r3, #81	; 0x51
 8007f5a:	f887 3bc4 	strb.w	r3, [r7, #3012]	; 0xbc4
 8007f5e:	f607 33c4 	addw	r3, r7, #3012	; 0xbc4
 8007f62:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
 8007f66:	2301      	movs	r3, #1
 8007f68:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0
 8007f6c:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8007f70:	4618      	mov	r0, r3
 8007f72:	f018 fa18 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007f76:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8007f7a:	f507 603b 	add.w	r0, r7, #2992	; 0xbb0
 8007f7e:	f607 32bc 	addw	r2, r7, #3004	; 0xbbc
 8007f82:	ca06      	ldmia	r2, {r1, r2}
 8007f84:	f003 ffb0 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007f88:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8007f8c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007fd0 <_ZN3jlb5GraphC1Ev+0x3228>
 8007f90:	2200      	movs	r2, #0
 8007f92:	2153      	movs	r1, #83	; 0x53
 8007f94:	4620      	mov	r0, r4
 8007f96:	f7fc feb8 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007f9a:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f003 ff10 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8007fa4:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f018 f9fe 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('W', Direction::STRAIGHT, {'Q'}, 2.0f * UNIT);
 8007fae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007fb2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007fb6:	2156      	movs	r1, #86	; 0x56
 8007fb8:	6818      	ldr	r0, [r3, #0]
 8007fba:	e00b      	b.n	8007fd4 <_ZN3jlb5GraphC1Ev+0x322c>
 8007fbc:	08023e88 	.word	0x08023e88
 8007fc0:	3f19999a 	.word	0x3f19999a
 8007fc4:	08023e7c 	.word	0x08023e7c
 8007fc8:	08023e8c 	.word	0x08023e8c
 8007fcc:	3f99999a 	.word	0x3f99999a
 8007fd0:	3f71463a 	.word	0x3f71463a
 8007fd4:	f000 f91b 	bl	800820e <_ZN3jlb5GraphixEc>
 8007fd8:	4604      	mov	r4, r0
 8007fda:	2351      	movs	r3, #81	; 0x51
 8007fdc:	f887 3be0 	strb.w	r3, [r7, #3040]	; 0xbe0
 8007fe0:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8007fe4:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 8007fee:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f018 f9d7 	bl	80203a6 <_ZNSaIcEC1Ev>
 8007ff8:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8007ffc:	f607 30cc 	addw	r0, r7, #3020	; 0xbcc
 8008000:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 8008004:	ca06      	ldmia	r2, {r1, r2}
 8008006:	f003 ff6f 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800800a:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 800800e:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 8007fcc <_ZN3jlb5GraphC1Ev+0x3224>
 8008012:	2202      	movs	r2, #2
 8008014:	2157      	movs	r1, #87	; 0x57
 8008016:	4620      	mov	r0, r4
 8008018:	f7fc fe77 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800801c:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8008020:	4618      	mov	r0, r3
 8008022:	f003 fecf 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8008026:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 800802a:	4618      	mov	r0, r3
 800802c:	f018 f9bd 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('V', Direction::STRAIGHT, {'O'}, 2.0f * UNIT);
 8008030:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008034:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008038:	2157      	movs	r1, #87	; 0x57
 800803a:	6818      	ldr	r0, [r3, #0]
 800803c:	f000 f8e7 	bl	800820e <_ZN3jlb5GraphixEc>
 8008040:	4604      	mov	r4, r0
 8008042:	234f      	movs	r3, #79	; 0x4f
 8008044:	f887 3bfc 	strb.w	r3, [r7, #3068]	; 0xbfc
 8008048:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 800804c:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 8008050:	2301      	movs	r3, #1
 8008052:	f8c7 3bf8 	str.w	r3, [r7, #3064]	; 0xbf8
 8008056:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800805a:	4618      	mov	r0, r3
 800805c:	f018 f9a3 	bl	80203a6 <_ZNSaIcEC1Ev>
 8008060:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8008064:	f607 30e8 	addw	r0, r7, #3048	; 0xbe8
 8008068:	f607 32f4 	addw	r2, r7, #3060	; 0xbf4
 800806c:	ca06      	ldmia	r2, {r1, r2}
 800806e:	f003 ff3b 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008072:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 8008076:	ed1f 0a2b 	vldr	s0, [pc, #-172]	; 8007fcc <_ZN3jlb5GraphC1Ev+0x3224>
 800807a:	2202      	movs	r2, #2
 800807c:	2156      	movs	r1, #86	; 0x56
 800807e:	4620      	mov	r0, r4
 8008080:	f7fc fe43 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008084:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 8008088:	4618      	mov	r0, r3
 800808a:	f003 fe9b 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 800808e:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8008092:	4618      	mov	r0, r3
 8008094:	f018 f989 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('S', Direction::RIGHT, {'O'}, QUARTER_CIRCLE);
 8008098:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800809c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80080a0:	2157      	movs	r1, #87	; 0x57
 80080a2:	6818      	ldr	r0, [r3, #0]
 80080a4:	f000 f8b3 	bl	800820e <_ZN3jlb5GraphixEc>
 80080a8:	4604      	mov	r4, r0
 80080aa:	234f      	movs	r3, #79	; 0x4f
 80080ac:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
 80080b0:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 80080b4:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
 80080b8:	2301      	movs	r3, #1
 80080ba:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 80080be:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 80080c2:	4618      	mov	r0, r3
 80080c4:	f018 f96f 	bl	80203a6 <_ZNSaIcEC1Ev>
 80080c8:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 80080cc:	f607 4004 	addw	r0, r7, #3076	; 0xc04
 80080d0:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 80080d4:	ca06      	ldmia	r2, {r1, r2}
 80080d6:	f003 ff07 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80080da:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80080de:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 8007fd0 <_ZN3jlb5GraphC1Ev+0x3228>
 80080e2:	2201      	movs	r2, #1
 80080e4:	2153      	movs	r1, #83	; 0x53
 80080e6:	4620      	mov	r0, r4
 80080e8:	f7fc fe0f 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80080ec:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80080f0:	4618      	mov	r0, r3
 80080f2:	f003 fe67 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80080f6:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 80080fa:	4618      	mov	r0, r3
 80080fc:	f018 f955 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('O', Direction::STRAIGHT, {'S', 'V'}, UNIT + QUARTER_CIRCLE);
 8008100:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008104:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008108:	2157      	movs	r1, #87	; 0x57
 800810a:	6818      	ldr	r0, [r3, #0]
 800810c:	f000 f87f 	bl	800820e <_ZN3jlb5GraphixEc>
 8008110:	4604      	mov	r4, r0
 8008112:	4b35      	ldr	r3, [pc, #212]	; (80081e8 <_ZN3jlb5GraphC1Ev+0x3440>)
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	f8a7 3c34 	strh.w	r3, [r7, #3124]	; 0xc34
 800811a:	f607 4334 	addw	r3, r7, #3124	; 0xc34
 800811e:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8008122:	2302      	movs	r3, #2
 8008124:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30
 8008128:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800812c:	4618      	mov	r0, r3
 800812e:	f018 f93a 	bl	80203a6 <_ZNSaIcEC1Ev>
 8008132:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8008136:	f507 6042 	add.w	r0, r7, #3104	; 0xc20
 800813a:	f607 422c 	addw	r2, r7, #3116	; 0xc2c
 800813e:	ca06      	ldmia	r2, {r1, r2}
 8008140:	f003 fed2 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008144:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008148:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80081ec <_ZN3jlb5GraphC1Ev+0x3444>
 800814c:	2202      	movs	r2, #2
 800814e:	214f      	movs	r1, #79	; 0x4f
 8008150:	4620      	mov	r0, r4
 8008152:	f7fc fdda 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008156:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 800815a:	4618      	mov	r0, r3
 800815c:	f003 fe32 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8008160:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8008164:	4618      	mov	r0, r3
 8008166:	f018 f920 	bl	80203aa <_ZNSaIcED1Ev>
            this->operator[]('X').add_edge('Q', Direction::STRAIGHT, {'X'}, 2.5f * UNIT + QUARTER_CIRCLE);
 800816a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800816e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008172:	2158      	movs	r1, #88	; 0x58
 8008174:	6818      	ldr	r0, [r3, #0]
 8008176:	f000 f84a 	bl	800820e <_ZN3jlb5GraphixEc>
 800817a:	4604      	mov	r4, r0
 800817c:	2358      	movs	r3, #88	; 0x58
 800817e:	f887 3c50 	strb.w	r3, [r7, #3152]	; 0xc50
 8008182:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008186:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 800818a:	2301      	movs	r3, #1
 800818c:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
 8008190:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 8008194:	4618      	mov	r0, r3
 8008196:	f018 f906 	bl	80203a6 <_ZNSaIcEC1Ev>
 800819a:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 800819e:	f607 403c 	addw	r0, r7, #3132	; 0xc3c
 80081a2:	f607 4248 	addw	r2, r7, #3144	; 0xc48
 80081a6:	ca06      	ldmia	r2, {r1, r2}
 80081a8:	f003 fe9e 	bl	800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80081ac:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 80081b0:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80081f0 <_ZN3jlb5GraphC1Ev+0x3448>
 80081b4:	2202      	movs	r2, #2
 80081b6:	2151      	movs	r1, #81	; 0x51
 80081b8:	4620      	mov	r0, r4
 80081ba:	f7fc fda6 	bl	8004d0a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80081be:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 80081c2:	4618      	mov	r0, r3
 80081c4:	f003 fdfe 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 80081c8:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 80081cc:	4618      	mov	r0, r3
 80081ce:	f018 f8ec 	bl	80203aa <_ZNSaIcED1Ev>
        }
 80081d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80081d6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4618      	mov	r0, r3
 80081de:	f607 476c 	addw	r7, r7, #3180	; 0xc6c
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd90      	pop	{r4, r7, pc}
 80081e6:	bf00      	nop
 80081e8:	08023e90 	.word	0x08023e90
 80081ec:	3fc56fea 	.word	0x3fc56fea
 80081f0:	401c518f 	.word	0x401c518f

080081f4 <_ZN3jlb5GraphD1Ev>:

        ~Graph() {}
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4618      	mov	r0, r3
 8008200:	f003 fe46 	bl	800be90 <_ZNSt6vectorIN3jlb4NodeESaIS1_EED1Ev>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <_ZN3jlb5GraphixEc>:
        Node &operator[](char name)
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	460b      	mov	r3, r1
 8008218:	70fb      	strb	r3, [r7, #3]
        {
#ifdef SIMULATION
            if (nodes.empty()) throw std::runtime_error("Graph is empty");
            if (name < 'A' || name > 'X') throw std::runtime_error("Invalid node name");
#endif
            return nodes[static_cast<int>(name - 'A')];
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	78fb      	ldrb	r3, [r7, #3]
 800821e:	3b41      	subs	r3, #65	; 0x41
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f003 fe81 	bl	800bf2a <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>
 8008228:	4603      	mov	r3, r0
        }
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8008232:	b480      	push	{r7}
 8008234:	b083      	sub	sp, #12
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008240:	d205      	bcs.n	800824e <_ZSt16__deque_buf_sizej+0x1c>
 8008242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	fbb2 f3f3 	udiv	r3, r2, r3
 800824c:	e000      	b.n	8008250 <_ZSt16__deque_buf_sizej+0x1e>
 800824e:	2301      	movs	r3, #1
 8008250:	4618      	mov	r0, r3
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <_ZNSt5dequeIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4618      	mov	r0, r3
 8008268:	f003 fe7e 	bl	800bf68 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <_ZN3jlb8OdometryC1Efff>:
        float meas_ang_vel_z = 0.0f;
        float meas_lin_acc_x = 0.0f;
        float meas_lin_acc_y = 0.0f;
        float meas_lin_acc_z = 0.0f;

        Odometry(const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : x_t(x_t_), y_t(y_t_), theta_t(normalize_angle(theta_t_)) {}
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	ed87 0a02 	vstr	s0, [r7, #8]
 8008282:	edc7 0a01 	vstr	s1, [r7, #4]
 8008286:	ed87 1a00 	vstr	s2, [r7]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f04f 0200 	mov.w	r2, #0
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f04f 0200 	mov.w	r2, #0
 8008298:	605a      	str	r2, [r3, #4]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	609a      	str	r2, [r3, #8]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	60da      	str	r2, [r3, #12]
 80082a6:	ed97 0a00 	vldr	s0, [r7]
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 fa58 	bl	8008760 <_ZN3jlb8Odometry15normalize_angleEf>
 80082b0:	eef0 7a40 	vmov.f32	s15, s0
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	edc3 7a04 	vstr	s15, [r3, #16]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f04f 0200 	mov.w	r2, #0
 80082c0:	615a      	str	r2, [r3, #20]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f04f 0200 	mov.w	r2, #0
 80082c8:	619a      	str	r2, [r3, #24]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f04f 0200 	mov.w	r2, #0
 80082d0:	61da      	str	r2, [r3, #28]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f04f 0200 	mov.w	r2, #0
 80082d8:	621a      	str	r2, [r3, #32]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f04f 0200 	mov.w	r2, #0
 80082e0:	625a      	str	r2, [r3, #36]	; 0x24
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f04f 0200 	mov.w	r2, #0
 80082e8:	629a      	str	r2, [r3, #40]	; 0x28
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	631a      	str	r2, [r3, #48]	; 0x30
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3334      	adds	r3, #52	; 0x34
 80082fe:	4618      	mov	r0, r3
 8008300:	f7ff ffac 	bl	800825c <_ZNSt5dequeIfSaIfEEC1Ev>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	335c      	adds	r3, #92	; 0x5c
 8008308:	4618      	mov	r0, r3
 800830a:	f7ff ffa7 	bl	800825c <_ZNSt5dequeIfSaIfEEC1Ev>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <_ZN3jlb8OdometryD1Ev>:

        ~Odometry() {}
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	335c      	adds	r3, #92	; 0x5c
 800832c:	4618      	mov	r0, r3
 800832e:	f003 fe4e 	bl	800bfce <_ZNSt5dequeIfSaIfEED1Ev>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	3334      	adds	r3, #52	; 0x34
 8008336:	4618      	mov	r0, r3
 8008338:	f003 fe49 	bl	800bfce <_ZNSt5dequeIfSaIfEED1Ev>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <_ZN3jlb8Odometry12rpm_callbackEf>:

        void rpm_callback(const float wheel_rpm)
 8008348:	b580      	push	{r7, lr}
 800834a:	ed2d 8b02 	vpush	{d8}
 800834e:	b08c      	sub	sp, #48	; 0x30
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	ed87 0a00 	vstr	s0, [r7]
        {
            float meas_wheel_rpm = wheel_rpm;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	62fb      	str	r3, [r7, #44]	; 0x2c
            float velocity  = M_PI * jlb::WHEEL_DIAMETER * wheel_rpm / 60.0f;
 800835c:	6838      	ldr	r0, [r7, #0]
 800835e:	f7f8 f8e5 	bl	800052c <__aeabi_f2d>
 8008362:	a33d      	add	r3, pc, #244	; (adr r3, 8008458 <_ZN3jlb8Odometry12rpm_callbackEf+0x110>)
 8008364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008368:	f7f8 f938 	bl	80005dc <__aeabi_dmul>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4610      	mov	r0, r2
 8008372:	4619      	mov	r1, r3
 8008374:	f04f 0200 	mov.w	r2, #0
 8008378:	4b35      	ldr	r3, [pc, #212]	; (8008450 <_ZN3jlb8Odometry12rpm_callbackEf+0x108>)
 800837a:	f7f8 fa59 	bl	8000830 <__aeabi_ddiv>
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	4610      	mov	r0, r2
 8008384:	4619      	mov	r1, r3
 8008386:	f7f8 fbf9 	bl	8000b7c <__aeabi_d2f>
 800838a:	4603      	mov	r3, r0
 800838c:	60bb      	str	r3, [r7, #8]

            if (std::fabs(velocity) > jlb::MAX_VELOCITY) { return; }
 800838e:	edd7 7a02 	vldr	s15, [r7, #8]
 8008392:	eeb0 0a67 	vmov.f32	s0, s15
 8008396:	f7fc f801 	bl	800439c <_ZSt4fabsf>
 800839a:	eef0 7a40 	vmov.f32	s15, s0
 800839e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80083a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083aa:	bfcc      	ite	gt
 80083ac:	2301      	movgt	r3, #1
 80083ae:	2300      	movle	r3, #0
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d146      	bne.n	8008444 <_ZN3jlb8Odometry12rpm_callbackEf+0xfc>

            v_buffer_.push_back(velocity);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	3334      	adds	r3, #52	; 0x34
 80083ba:	f107 0208 	add.w	r2, r7, #8
 80083be:	4611      	mov	r1, r2
 80083c0:	4618      	mov	r0, r3
 80083c2:	f003 fe29 	bl	800c018 <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (v_buffer_.size() > jlb::VELOCITY_BUFFER_SIZE) { v_buffer_.pop_front(); }
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	3334      	adds	r3, #52	; 0x34
 80083ca:	4618      	mov	r0, r3
 80083cc:	f003 fe45 	bl	800c05a <_ZNKSt5dequeIfSaIfEE4sizeEv>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	bf8c      	ite	hi
 80083d6:	2301      	movhi	r3, #1
 80083d8:	2300      	movls	r3, #0
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d004      	beq.n	80083ea <_ZN3jlb8Odometry12rpm_callbackEf+0xa2>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3334      	adds	r3, #52	; 0x34
 80083e4:	4618      	mov	r0, r3
 80083e6:	f003 fe4a 	bl	800c07e <_ZNSt5dequeIfSaIfEE9pop_frontEv>

            vx_t = std::accumulate(v_buffer_.begin(), v_buffer_.end(), 0.0f) / v_buffer_.size();
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80083f0:	f107 030c 	add.w	r3, r7, #12
 80083f4:	4611      	mov	r1, r2
 80083f6:	4618      	mov	r0, r3
 80083f8:	f003 fe64 	bl	800c0c4 <_ZNSt5dequeIfSaIfEE5beginEv>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008402:	f107 031c 	add.w	r3, r7, #28
 8008406:	4611      	mov	r1, r2
 8008408:	4618      	mov	r0, r3
 800840a:	f003 fe6a 	bl	800c0e2 <_ZNSt5dequeIfSaIfEE3endEv>
 800840e:	f107 021c 	add.w	r2, r7, #28
 8008412:	f107 030c 	add.w	r3, r7, #12
 8008416:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8008454 <_ZN3jlb8Odometry12rpm_callbackEf+0x10c>
 800841a:	4611      	mov	r1, r2
 800841c:	4618      	mov	r0, r3
 800841e:	f003 fe7a 	bl	800c116 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 8008422:	eeb0 8a40 	vmov.f32	s16, s0
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	3334      	adds	r3, #52	; 0x34
 800842a:	4618      	mov	r0, r3
 800842c:	f003 fe15 	bl	800c05a <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8008430:	ee07 0a90 	vmov	s15, r0
 8008434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008438:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	edc3 7a00 	vstr	s15, [r3]
 8008442:	e000      	b.n	8008446 <_ZN3jlb8Odometry12rpm_callbackEf+0xfe>
            if (std::fabs(velocity) > jlb::MAX_VELOCITY) { return; }
 8008444:	bf00      	nop
        }
 8008446:	3730      	adds	r7, #48	; 0x30
 8008448:	46bd      	mov	sp, r7
 800844a:	ecbd 8b02 	vpop	{d8}
 800844e:	bd80      	pop	{r7, pc}
 8008450:	404e0000 	.word	0x404e0000
 8008454:	00000000 	.word	0x00000000
 8008458:	64af6f9d 	.word	0x64af6f9d
 800845c:	3fd51c8b 	.word	0x3fd51c8b

08008460 <_ZN3jlb8Odometry12imu_callbackEf>:

        void imu_callback(const float ang_vel_z)
 8008460:	b580      	push	{r7, lr}
 8008462:	ed2d 8b02 	vpush	{d8}
 8008466:	b08a      	sub	sp, #40	; 0x28
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	ed87 0a00 	vstr	s0, [r7]
        {
            meas_ang_vel_z = ang_vel_z;
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	625a      	str	r2, [r3, #36]	; 0x24

            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE) { return; }
 8008476:	edd7 7a00 	vldr	s15, [r7]
 800847a:	eeb0 0a67 	vmov.f32	s0, s15
 800847e:	f7fb ff8d 	bl	800439c <_ZSt4fabsf>
 8008482:	eef0 7a40 	vmov.f32	s15, s0
 8008486:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8008538 <_ZN3jlb8Odometry12imu_callbackEf+0xd8>
 800848a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800848e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008492:	bfcc      	ite	gt
 8008494:	2301      	movgt	r3, #1
 8008496:	2300      	movle	r3, #0
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d145      	bne.n	800852a <_ZN3jlb8Odometry12imu_callbackEf+0xca>

            w_buffer_.push_back(ang_vel_z);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	335c      	adds	r3, #92	; 0x5c
 80084a2:	463a      	mov	r2, r7
 80084a4:	4611      	mov	r1, r2
 80084a6:	4618      	mov	r0, r3
 80084a8:	f003 fdb6 	bl	800c018 <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (w_buffer_.size() > jlb::IMU_BUFFER_SIZE) { w_buffer_.pop_front(); }
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	335c      	adds	r3, #92	; 0x5c
 80084b0:	4618      	mov	r0, r3
 80084b2:	f003 fdd2 	bl	800c05a <_ZNKSt5dequeIfSaIfEE4sizeEv>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b0a      	cmp	r3, #10
 80084ba:	bf8c      	ite	hi
 80084bc:	2301      	movhi	r3, #1
 80084be:	2300      	movls	r3, #0
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d004      	beq.n	80084d0 <_ZN3jlb8Odometry12imu_callbackEf+0x70>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	335c      	adds	r3, #92	; 0x5c
 80084ca:	4618      	mov	r0, r3
 80084cc:	f003 fdd7 	bl	800c07e <_ZNSt5dequeIfSaIfEE9pop_frontEv>

            w_t = std::accumulate(w_buffer_.begin(), w_buffer_.end(), 0.0f) / w_buffer_.size();
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 80084d6:	f107 0308 	add.w	r3, r7, #8
 80084da:	4611      	mov	r1, r2
 80084dc:	4618      	mov	r0, r3
 80084de:	f003 fdf1 	bl	800c0c4 <_ZNSt5dequeIfSaIfEE5beginEv>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 80084e8:	f107 0318 	add.w	r3, r7, #24
 80084ec:	4611      	mov	r1, r2
 80084ee:	4618      	mov	r0, r3
 80084f0:	f003 fdf7 	bl	800c0e2 <_ZNSt5dequeIfSaIfEE3endEv>
 80084f4:	f107 0218 	add.w	r2, r7, #24
 80084f8:	f107 0308 	add.w	r3, r7, #8
 80084fc:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800853c <_ZN3jlb8Odometry12imu_callbackEf+0xdc>
 8008500:	4611      	mov	r1, r2
 8008502:	4618      	mov	r0, r3
 8008504:	f003 fe07 	bl	800c116 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 8008508:	eeb0 8a40 	vmov.f32	s16, s0
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	335c      	adds	r3, #92	; 0x5c
 8008510:	4618      	mov	r0, r3
 8008512:	f003 fda2 	bl	800c05a <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8008516:	ee07 0a90 	vmov	s15, r0
 800851a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800851e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	edc3 7a01 	vstr	s15, [r3, #4]
 8008528:	e000      	b.n	800852c <_ZN3jlb8Odometry12imu_callbackEf+0xcc>
            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE) { return; }
 800852a:	bf00      	nop
        }
 800852c:	3728      	adds	r7, #40	; 0x28
 800852e:	46bd      	mov	sp, r7
 8008530:	ecbd 8b02 	vpop	{d8}
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	4096cbe4 	.word	0x4096cbe4
 800853c:	00000000 	.word	0x00000000

08008540 <_ZN3jlb8Odometry11update_odomEv>:

        Odom update_odom()
 8008540:	b580      	push	{r7, lr}
 8008542:	ed2d 8b02 	vpush	{d8}
 8008546:	b08c      	sub	sp, #48	; 0x30
 8008548:	af00      	add	r7, sp, #0
 800854a:	6178      	str	r0, [r7, #20]
        {
#ifndef SIMULATION
            // TODO: add timestamp and dt
            float dt = 0.005f;
 800854c:	4b74      	ldr	r3, [pc, #464]	; (8008720 <_ZN3jlb8Odometry11update_odomEv+0x1e0>)
 800854e:	62fb      	str	r3, [r7, #44]	; 0x2c

            auto  update_timestamp = std::chrono::steady_clock::now();
            float dt               = std::chrono::duration_cast<std::chrono::milliseconds>(update_timestamp - odom_timestamp_).count() / 1000.0f;
#endif

            if (dt > 0.0f)
 8008550:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008554:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800855c:	f340 80b0 	ble.w	80086c0 <_ZN3jlb8Odometry11update_odomEv+0x180>
            {
                vx_t = std::fabs(vx_t) < 0.03 ? 0.0 : vx_t;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	edd3 7a00 	vldr	s15, [r3]
 8008566:	eeb0 0a67 	vmov.f32	s0, s15
 800856a:	f7fb ff17 	bl	800439c <_ZSt4fabsf>
 800856e:	ee10 3a10 	vmov	r3, s0
 8008572:	4618      	mov	r0, r3
 8008574:	f7f7 ffda 	bl	800052c <__aeabi_f2d>
 8008578:	a365      	add	r3, pc, #404	; (adr r3, 8008710 <_ZN3jlb8Odometry11update_odomEv+0x1d0>)
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f7f8 fa9f 	bl	8000ac0 <__aeabi_dcmplt>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <_ZN3jlb8Odometry11update_odomEv+0x4e>
 8008588:	f04f 0300 	mov.w	r3, #0
 800858c:	e001      	b.n	8008592 <_ZN3jlb8Odometry11update_odomEv+0x52>
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	6013      	str	r3, [r2, #0]
                w_t  = std::fabs(w_t) < 0.015 ? 0.0 : w_t;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	edd3 7a01 	vldr	s15, [r3, #4]
 800859c:	eeb0 0a67 	vmov.f32	s0, s15
 80085a0:	f7fb fefc 	bl	800439c <_ZSt4fabsf>
 80085a4:	ee10 3a10 	vmov	r3, s0
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7f7 ffbf 	bl	800052c <__aeabi_f2d>
 80085ae:	a35a      	add	r3, pc, #360	; (adr r3, 8008718 <_ZN3jlb8Odometry11update_odomEv+0x1d8>)
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	f7f8 fa84 	bl	8000ac0 <__aeabi_dcmplt>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <_ZN3jlb8Odometry11update_odomEv+0x84>
 80085be:	f04f 0300 	mov.w	r3, #0
 80085c2:	e001      	b.n	80085c8 <_ZN3jlb8Odometry11update_odomEv+0x88>
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	6053      	str	r3, [r2, #4]
                // float vy_t = WHEELBASE * w_t / 2.0f;
                float vy_t = 0.0f;
 80085cc:	f04f 0300 	mov.w	r3, #0
 80085d0:	62bb      	str	r3, [r7, #40]	; 0x28

                x_t += (vx_t * std::cos(theta_t) - vy_t * std::sin(theta_t)) * dt;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	ed93 8a00 	vldr	s16, [r3]
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	edd3 7a04 	vldr	s15, [r3, #16]
 80085de:	eeb0 0a67 	vmov.f32	s0, s15
 80085e2:	f7fb fecb 	bl	800437c <_ZSt3cosf>
 80085e6:	eef0 7a40 	vmov.f32	s15, s0
 80085ea:	ee28 8a27 	vmul.f32	s16, s16, s15
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80085f4:	eeb0 0a67 	vmov.f32	s0, s15
 80085f8:	f7fb fee0 	bl	80043bc <_ZSt3sinf>
 80085fc:	eeb0 7a40 	vmov.f32	s14, s0
 8008600:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008608:	ee38 7a67 	vsub.f32	s14, s16, s15
 800860c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008610:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	edd3 7a02 	vldr	s15, [r3, #8]
 800861a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	edc3 7a02 	vstr	s15, [r3, #8]
                y_t += (vx_t * std::sin(theta_t) + vy_t * std::cos(theta_t)) * dt;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	ed93 8a00 	vldr	s16, [r3]
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008630:	eeb0 0a67 	vmov.f32	s0, s15
 8008634:	f7fb fec2 	bl	80043bc <_ZSt3sinf>
 8008638:	eef0 7a40 	vmov.f32	s15, s0
 800863c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	edd3 7a04 	vldr	s15, [r3, #16]
 8008646:	eeb0 0a67 	vmov.f32	s0, s15
 800864a:	f7fb fe97 	bl	800437c <_ZSt3cosf>
 800864e:	eeb0 7a40 	vmov.f32	s14, s0
 8008652:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800865a:	ee38 7a27 	vadd.f32	s14, s16, s15
 800865e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008662:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	edd3 7a03 	vldr	s15, [r3, #12]
 800866c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	edc3 7a03 	vstr	s15, [r3, #12]
                theta_t = normalize_angle(theta_t + w_t * dt);
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	ed93 7a04 	vldr	s14, [r3, #16]
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	edd3 6a01 	vldr	s13, [r3, #4]
 8008682:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800868a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800868e:	eeb0 0a67 	vmov.f32	s0, s15
 8008692:	6978      	ldr	r0, [r7, #20]
 8008694:	f000 f864 	bl	8008760 <_ZN3jlb8Odometry15normalize_angleEf>
 8008698:	eef0 7a40 	vmov.f32	s15, s0
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	edc3 7a04 	vstr	s15, [r3, #16]

                distance_traveled_since_checkpoint += vx_t * dt;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	ed93 7a05 	vldr	s14, [r3, #20]
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	edd3 6a00 	vldr	s13, [r3]
 80086ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80086b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	edc3 7a05 	vstr	s15, [r3, #20]
            }
#ifdef SIMULATION
            odom_timestamp_ = update_timestamp > odom_timestamp_ ? update_timestamp : odom_timestamp_;
#endif
            return {vx_t, x_t, y_t, theta_t};
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	61bb      	str	r3, [r7, #24]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	61fb      	str	r3, [r7, #28]
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	623b      	str	r3, [r7, #32]
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
 80086d8:	69b8      	ldr	r0, [r7, #24]
 80086da:	69f9      	ldr	r1, [r7, #28]
 80086dc:	6a3a      	ldr	r2, [r7, #32]
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	ee06 0a10 	vmov	s12, r0
 80086e4:	ee06 1a90 	vmov	s13, r1
 80086e8:	ee07 2a10 	vmov	s14, r2
 80086ec:	ee07 3a90 	vmov	s15, r3
        }
 80086f0:	eeb0 0a46 	vmov.f32	s0, s12
 80086f4:	eef0 0a66 	vmov.f32	s1, s13
 80086f8:	eeb0 1a47 	vmov.f32	s2, s14
 80086fc:	eef0 1a67 	vmov.f32	s3, s15
 8008700:	3730      	adds	r7, #48	; 0x30
 8008702:	46bd      	mov	sp, r7
 8008704:	ecbd 8b02 	vpop	{d8}
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	f3af 8000 	nop.w
 8008710:	eb851eb8 	.word	0xeb851eb8
 8008714:	3f9eb851 	.word	0x3f9eb851
 8008718:	eb851eb8 	.word	0xeb851eb8
 800871c:	3f8eb851 	.word	0x3f8eb851
 8008720:	3ba3d70a 	.word	0x3ba3d70a

08008724 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    fmod(_Tp __x, _Up __y)
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	ed87 0a03 	vstr	s0, [r7, #12]
 800872e:	ed87 1b00 	vstr	d1, [r7]
      return fmod(__type(__x), __type(__y));
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f7f7 fefa 	bl	800052c <__aeabi_f2d>
 8008738:	4602      	mov	r2, r0
 800873a:	460b      	mov	r3, r1
 800873c:	ed97 1b00 	vldr	d1, [r7]
 8008740:	ec43 2b10 	vmov	d0, r2, r3
 8008744:	f017 fec8 	bl	80204d8 <fmod>
 8008748:	eeb0 7a40 	vmov.f32	s14, s0
 800874c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8008750:	eeb0 0a47 	vmov.f32	s0, s14
 8008754:	eef0 0a67 	vmov.f32	s1, s15
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
	...

08008760 <_ZN3jlb8Odometry15normalize_angleEf>:

        float normalize_angle(float angle)
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	ed87 0a00 	vstr	s0, [r7]
        {
            angle = std::fmod(angle, 2.0f * M_PI);
 800876c:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80087c8 <_ZN3jlb8Odometry15normalize_angleEf+0x68>
 8008770:	ed97 0a00 	vldr	s0, [r7]
 8008774:	f7ff ffd6 	bl	8008724 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8008778:	ec53 2b10 	vmov	r2, r3, d0
 800877c:	4610      	mov	r0, r2
 800877e:	4619      	mov	r1, r3
 8008780:	f7f8 f9fc 	bl	8000b7c <__aeabi_d2f>
 8008784:	4603      	mov	r3, r0
 8008786:	603b      	str	r3, [r7, #0]
            if (angle < 0.0f) { angle += 2.0f * M_PI; }
 8008788:	edd7 7a00 	vldr	s15, [r7]
 800878c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008794:	d50f      	bpl.n	80087b6 <_ZN3jlb8Odometry15normalize_angleEf+0x56>
 8008796:	6838      	ldr	r0, [r7, #0]
 8008798:	f7f7 fec8 	bl	800052c <__aeabi_f2d>
 800879c:	a30a      	add	r3, pc, #40	; (adr r3, 80087c8 <_ZN3jlb8Odometry15normalize_angleEf+0x68>)
 800879e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a2:	f7f7 fd65 	bl	8000270 <__adddf3>
 80087a6:	4602      	mov	r2, r0
 80087a8:	460b      	mov	r3, r1
 80087aa:	4610      	mov	r0, r2
 80087ac:	4619      	mov	r1, r3
 80087ae:	f7f8 f9e5 	bl	8000b7c <__aeabi_d2f>
 80087b2:	4603      	mov	r3, r0
 80087b4:	603b      	str	r3, [r7, #0]
            return angle;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	ee07 3a90 	vmov	s15, r3
        }
 80087bc:	eeb0 0a67 	vmov.f32	s0, s15
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	54442d18 	.word	0x54442d18
 80087cc:	401921fb 	.word	0x401921fb

080087d0 <_ZN3jlb8Odometry10correctionEff>:

        void correction([[maybe_unused]] float x_t_, [[maybe_unused]] float y_t_)
 80087d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087d4:	b094      	sub	sp, #80	; 0x50
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6178      	str	r0, [r7, #20]
 80087da:	ed87 0a04 	vstr	s0, [r7, #16]
 80087de:	edc7 0a03 	vstr	s1, [r7, #12]
        {
            x_t = x_t_ - (SENSOR_BASE / 2.0f * std::cos(theta_t));
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80087e8:	eeb0 0a67 	vmov.f32	s0, s15
 80087ec:	f7fb fdc6 	bl	800437c <_ZSt3cosf>
 80087f0:	eef0 7a40 	vmov.f32	s15, s0
 80087f4:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80087f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8008800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	edc3 7a02 	vstr	s15, [r3, #8]
            y_t = y_t_ - (SENSOR_BASE / 2.0f * std::sin(theta_t));
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008810:	eeb0 0a67 	vmov.f32	s0, s15
 8008814:	f7fb fdd2 	bl	80043bc <_ZSt3sinf>
 8008818:	eef0 7a40 	vmov.f32	s15, s0
 800881c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8008820:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008824:	ed97 7a03 	vldr	s14, [r7, #12]
 8008828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	edc3 7a03 	vstr	s15, [r3, #12]

            // clamp theta to certain values whichever is closer
            // the values are 0, 90, 180, 270, 360

            float theta_0   = std::fabs(theta_t);
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	edd3 7a04 	vldr	s15, [r3, #16]
 8008838:	eeb0 0a67 	vmov.f32	s0, s15
 800883c:	f7fb fdae 	bl	800439c <_ZSt4fabsf>
 8008840:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
            float theta_90  = std::fabs(theta_t - M_PI / 2.0f);
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	4618      	mov	r0, r3
 800884a:	f7f7 fe6f 	bl	800052c <__aeabi_f2d>
 800884e:	a396      	add	r3, pc, #600	; (adr r3, 8008aa8 <_ZN3jlb8Odometry10correctionEff+0x2d8>)
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	f7f7 fd0a 	bl	800026c <__aeabi_dsub>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	603a      	str	r2, [r7, #0]
 800885e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008862:	607b      	str	r3, [r7, #4]
 8008864:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008868:	f7f8 f988 	bl	8000b7c <__aeabi_d2f>
 800886c:	4603      	mov	r3, r0
 800886e:	64bb      	str	r3, [r7, #72]	; 0x48
            float theta_180 = std::fabs(theta_t - M_PI);
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	4618      	mov	r0, r3
 8008876:	f7f7 fe59 	bl	800052c <__aeabi_f2d>
 800887a:	a38d      	add	r3, pc, #564	; (adr r3, 8008ab0 <_ZN3jlb8Odometry10correctionEff+0x2e0>)
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	f7f7 fcf4 	bl	800026c <__aeabi_dsub>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4692      	mov	sl, r2
 800888a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800888e:	4650      	mov	r0, sl
 8008890:	4659      	mov	r1, fp
 8008892:	f7f8 f973 	bl	8000b7c <__aeabi_d2f>
 8008896:	4603      	mov	r3, r0
 8008898:	647b      	str	r3, [r7, #68]	; 0x44
            float theta_270 = std::fabs(theta_t - 3.0f * M_PI / 2.0f);
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	4618      	mov	r0, r3
 80088a0:	f7f7 fe44 	bl	800052c <__aeabi_f2d>
 80088a4:	a384      	add	r3, pc, #528	; (adr r3, 8008ab8 <_ZN3jlb8Odometry10correctionEff+0x2e8>)
 80088a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088aa:	f7f7 fcdf 	bl	800026c <__aeabi_dsub>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	4690      	mov	r8, r2
 80088b4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80088b8:	4640      	mov	r0, r8
 80088ba:	4649      	mov	r1, r9
 80088bc:	f7f8 f95e 	bl	8000b7c <__aeabi_d2f>
 80088c0:	4603      	mov	r3, r0
 80088c2:	643b      	str	r3, [r7, #64]	; 0x40
            float theta_360 = std::fabs(theta_t - 2.0f * M_PI);
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7f7 fe2f 	bl	800052c <__aeabi_f2d>
 80088ce:	a37c      	add	r3, pc, #496	; (adr r3, 8008ac0 <_ZN3jlb8Odometry10correctionEff+0x2f0>)
 80088d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d4:	f7f7 fcca 	bl	800026c <__aeabi_dsub>
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	4614      	mov	r4, r2
 80088de:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80088e2:	4620      	mov	r0, r4
 80088e4:	4629      	mov	r1, r5
 80088e6:	f7f8 f949 	bl	8000b7c <__aeabi_d2f>
 80088ea:	4603      	mov	r3, r0
 80088ec:	63fb      	str	r3, [r7, #60]	; 0x3c

            float min_theta = std::min({theta_0, theta_90, theta_180, theta_270, theta_360});
 80088ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f0:	627b      	str	r3, [r7, #36]	; 0x24
 80088f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80088f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088fc:	633b      	str	r3, [r7, #48]	; 0x30
 80088fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008900:	637b      	str	r3, [r7, #52]	; 0x34
 8008902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008906:	61fb      	str	r3, [r7, #28]
 8008908:	2305      	movs	r3, #5
 800890a:	623b      	str	r3, [r7, #32]
 800890c:	f107 031c 	add.w	r3, r7, #28
 8008910:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008914:	f003 fc31 	bl	800c17a <_ZSt3minIfET_St16initializer_listIS0_E>
 8008918:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

            if (min_theta == theta_0) { theta_t = (theta_t + 0.0f) / 2.0f; }
 800891c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008920:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8008924:	eeb4 7a67 	vcmp.f32	s14, s15
 8008928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800892c:	d10e      	bne.n	800894c <_ZN3jlb8Odometry10correctionEff+0x17c>
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	edd3 7a04 	vldr	s15, [r3, #16]
 8008934:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8008ac8 <_ZN3jlb8Odometry10correctionEff+0x2f8>
 8008938:	ee37 7a87 	vadd.f32	s14, s15, s14
 800893c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008940:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	edc3 7a04 	vstr	s15, [r3, #16]
 800894a:	e09a      	b.n	8008a82 <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_90) { theta_t = (theta_t + M_PI / 2.0f) / 2.0f; }
 800894c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008950:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8008954:	eeb4 7a67 	vcmp.f32	s14, s15
 8008958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800895c:	d11d      	bne.n	800899a <_ZN3jlb8Odometry10correctionEff+0x1ca>
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	4618      	mov	r0, r3
 8008964:	f7f7 fde2 	bl	800052c <__aeabi_f2d>
 8008968:	a34f      	add	r3, pc, #316	; (adr r3, 8008aa8 <_ZN3jlb8Odometry10correctionEff+0x2d8>)
 800896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896e:	f7f7 fc7f 	bl	8000270 <__adddf3>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	4610      	mov	r0, r2
 8008978:	4619      	mov	r1, r3
 800897a:	f04f 0200 	mov.w	r2, #0
 800897e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008982:	f7f7 ff55 	bl	8000830 <__aeabi_ddiv>
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	4610      	mov	r0, r2
 800898c:	4619      	mov	r1, r3
 800898e:	f7f8 f8f5 	bl	8000b7c <__aeabi_d2f>
 8008992:	4602      	mov	r2, r0
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	611a      	str	r2, [r3, #16]
 8008998:	e073      	b.n	8008a82 <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_180) { theta_t = (theta_t + M_PI) / 2.0f; }
 800899a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800899e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80089a2:	eeb4 7a67 	vcmp.f32	s14, s15
 80089a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089aa:	d11d      	bne.n	80089e8 <_ZN3jlb8Odometry10correctionEff+0x218>
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7f7 fdbb 	bl	800052c <__aeabi_f2d>
 80089b6:	a33e      	add	r3, pc, #248	; (adr r3, 8008ab0 <_ZN3jlb8Odometry10correctionEff+0x2e0>)
 80089b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089bc:	f7f7 fc58 	bl	8000270 <__adddf3>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	4610      	mov	r0, r2
 80089c6:	4619      	mov	r1, r3
 80089c8:	f04f 0200 	mov.w	r2, #0
 80089cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089d0:	f7f7 ff2e 	bl	8000830 <__aeabi_ddiv>
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	4610      	mov	r0, r2
 80089da:	4619      	mov	r1, r3
 80089dc:	f7f8 f8ce 	bl	8000b7c <__aeabi_d2f>
 80089e0:	4602      	mov	r2, r0
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	611a      	str	r2, [r3, #16]
 80089e6:	e04c      	b.n	8008a82 <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_270) { theta_t = (theta_t + 3.0f * M_PI / 2.0f) / 2.0f; }
 80089e8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80089ec:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80089f0:	eeb4 7a67 	vcmp.f32	s14, s15
 80089f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f8:	d11d      	bne.n	8008a36 <_ZN3jlb8Odometry10correctionEff+0x266>
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7f7 fd94 	bl	800052c <__aeabi_f2d>
 8008a04:	a32c      	add	r3, pc, #176	; (adr r3, 8008ab8 <_ZN3jlb8Odometry10correctionEff+0x2e8>)
 8008a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0a:	f7f7 fc31 	bl	8000270 <__adddf3>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	460b      	mov	r3, r1
 8008a12:	4610      	mov	r0, r2
 8008a14:	4619      	mov	r1, r3
 8008a16:	f04f 0200 	mov.w	r2, #0
 8008a1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a1e:	f7f7 ff07 	bl	8000830 <__aeabi_ddiv>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	4610      	mov	r0, r2
 8008a28:	4619      	mov	r1, r3
 8008a2a:	f7f8 f8a7 	bl	8000b7c <__aeabi_d2f>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	611a      	str	r2, [r3, #16]
 8008a34:	e025      	b.n	8008a82 <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_360) { theta_t = (theta_t + 2.0f * M_PI) / 2.0f; }
 8008a36:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008a3a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008a3e:	eeb4 7a67 	vcmp.f32	s14, s15
 8008a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a46:	d11c      	bne.n	8008a82 <_ZN3jlb8Odometry10correctionEff+0x2b2>
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7f7 fd6d 	bl	800052c <__aeabi_f2d>
 8008a52:	a31b      	add	r3, pc, #108	; (adr r3, 8008ac0 <_ZN3jlb8Odometry10correctionEff+0x2f0>)
 8008a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a58:	f7f7 fc0a 	bl	8000270 <__adddf3>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4610      	mov	r0, r2
 8008a62:	4619      	mov	r1, r3
 8008a64:	f04f 0200 	mov.w	r2, #0
 8008a68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a6c:	f7f7 fee0 	bl	8000830 <__aeabi_ddiv>
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	4610      	mov	r0, r2
 8008a76:	4619      	mov	r1, r3
 8008a78:	f7f8 f880 	bl	8000b7c <__aeabi_d2f>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	611a      	str	r2, [r3, #16]

            theta_t = normalize_angle(theta_t);
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	edd3 7a04 	vldr	s15, [r3, #16]
 8008a88:	eeb0 0a67 	vmov.f32	s0, s15
 8008a8c:	6978      	ldr	r0, [r7, #20]
 8008a8e:	f7ff fe67 	bl	8008760 <_ZN3jlb8Odometry15normalize_angleEf>
 8008a92:	eef0 7a40 	vmov.f32	s15, s0
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	edc3 7a04 	vstr	s15, [r3, #16]
        }
 8008a9c:	bf00      	nop
 8008a9e:	3750      	adds	r7, #80	; 0x50
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008aa6:	bf00      	nop
 8008aa8:	54442d18 	.word	0x54442d18
 8008aac:	3ff921fb 	.word	0x3ff921fb
 8008ab0:	54442d18 	.word	0x54442d18
 8008ab4:	400921fb 	.word	0x400921fb
 8008ab8:	7f3321d2 	.word	0x7f3321d2
 8008abc:	4012d97c 	.word	0x4012d97c
 8008ac0:	54442d18 	.word	0x54442d18
 8008ac4:	401921fb 	.word	0x401921fb
 8008ac8:	00000000 	.word	0x00000000

08008acc <_ZN3jlb14CompositeStateC1ENS_9FastStateE>:
        Mission        mission;
        LabyrinthState labyrinth_state;
        FastState      fast_state;
        float          reference_speed = 0.0f;

        CompositeState(FastState fast_state_) : mission{Mission::FAST}, labyrinth_state{LabyrinthState::START}, fast_state{fast_state_}, reference_speed{0.0f} {}
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	605a      	str	r2, [r3, #4]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	609a      	str	r2, [r3, #8]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f04f 0200 	mov.w	r2, #0
 8008aee:	60da      	str	r2, [r3, #12]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4618      	mov	r0, r3
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <_ZN3jlb14CompositeStateC1ENS_7MissionENS_14LabyrinthStateENS_9FastStateEf>:
        CompositeState(LabyrinthState labyrinth_state_) : mission{Mission::LABYRINTH}, labyrinth_state{labyrinth_state_}, fast_state{FastState::FOLLOW_SAFETY_CAR}, reference_speed{0.0f} {}
        CompositeState(Mission mission_, LabyrinthState labyrinth_state_, FastState fast_state_, float reference_speed_)
 8008afe:	b480      	push	{r7}
 8008b00:	b087      	sub	sp, #28
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6178      	str	r0, [r7, #20]
 8008b06:	6139      	str	r1, [r7, #16]
 8008b08:	60fa      	str	r2, [r7, #12]
 8008b0a:	60bb      	str	r3, [r7, #8]
 8008b0c:	ed87 0a01 	vstr	s0, [r7, #4]
            : mission{mission_}, labyrinth_state{labyrinth_state_}, fast_state{fast_state_}, reference_speed{reference_speed_}
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	605a      	str	r2, [r3, #4]
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	609a      	str	r2, [r3, #8]
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	60da      	str	r2, [r3, #12]
        {
        }
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	371c      	adds	r7, #28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <_ZN3jlb7ASStateC1ERNS_8OdometryERNS_10ControllerERNS_5GraphE>:
        bool    started_state_transition = false;

        [[maybe_unused]] char previous_node = 'U';
        [[maybe_unused]] char next_node     = 'U';

        ASState(Odometry& odometry_, Controller& controller_, Graph& graph_) : odometry{odometry_}, controller{controller_}, graph{graph_} {}
 8008b36:	b480      	push	{r7}
 8008b38:	b085      	sub	sp, #20
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	60f8      	str	r0, [r7, #12]
 8008b3e:	60b9      	str	r1, [r7, #8]
 8008b40:	607a      	str	r2, [r7, #4]
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	601a      	str	r2, [r3, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	605a      	str	r2, [r3, #4]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	609a      	str	r2, [r3, #8]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f04f 0200 	mov.w	r2, #0
 8008b5c:	60da      	str	r2, [r3, #12]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	741a      	strb	r2, [r3, #16]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	745a      	strb	r2, [r3, #17]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	749a      	strb	r2, [r3, #18]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	74da      	strb	r2, [r3, #19]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f04f 0200 	mov.w	r2, #0
 8008b7c:	615a      	str	r2, [r3, #20]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f04f 0200 	mov.w	r2, #0
 8008b84:	619a      	str	r2, [r3, #24]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	771a      	strb	r2, [r3, #28]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2255      	movs	r2, #85	; 0x55
 8008b90:	775a      	strb	r2, [r3, #29]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2255      	movs	r2, #85	; 0x55
 8008b96:	779a      	strb	r2, [r3, #30]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	621a      	str	r2, [r3, #32]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	625a      	str	r2, [r3, #36]	; 0x24
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	629a      	str	r2, [r3, #40]	; 0x28
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <_ZN3jlb7ASState10set_statesENS_14CompositeStateE>:

        void set_states(const CompositeState state_)
 8008bb8:	b084      	sub	sp, #16
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	f107 0014 	add.w	r0, r7, #20
 8008bc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        {
            mission         = state_.mission;
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	601a      	str	r2, [r3, #0]
            labyrinth_state = state_.labyrinth_state;
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	605a      	str	r2, [r3, #4]
            fast_state      = state_.fast_state;
 8008bd6:	69fa      	ldr	r2, [r7, #28]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	609a      	str	r2, [r3, #8]
        }
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	b004      	add	sp, #16
 8008be8:	4770      	bx	lr

08008bea <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <_ZN3jlb7ASState6updateEv>:

        CompositeState update()
 8008c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c02:	ed2d 8b02 	vpush	{d8}
 8008c06:	b08f      	sub	sp, #60	; 0x3c
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
        {
#ifndef SIMULATION
            // TODO: add timestamp
            float dt = 0.005f;
 8008c0e:	4bc4      	ldr	r3, [pc, #784]	; (8008f20 <_ZN3jlb7ASState6updateEv+0x320>)
 8008c10:	637b      	str	r3, [r7, #52]	; 0x34
            auto                   update_timestamp_ = std::chrono::steady_clock::now();
            [[maybe_unused]] float dt                = std::chrono::duration_cast<std::chrono::milliseconds>(update_timestamp_ - prev_update_timestamp_).count() / 1000.0f;
            prev_update_timestamp_                   = update_timestamp_;
#endif

            state_transition_time += dt;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	ed93 7a06 	vldr	s14, [r3, #24]
 8008c18:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	edc3 7a06 	vstr	s15, [r3, #24]
            state_time += dt;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	ed93 7a05 	vldr	s14, [r3, #20]
 8008c2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	edc3 7a05 	vstr	s15, [r3, #20]

            switch (mission)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d003      	beq.n	8008c4a <_ZN3jlb7ASState6updateEv+0x4a>
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	f000 816e 	beq.w	8008f24 <_ZN3jlb7ASState6updateEv+0x324>
                    break;
                }
                default:
                {
                    // this should never happen
                    break;
 8008c48:	e297      	b.n	800917a <_ZN3jlb7ASState6updateEv+0x57a>
                    bool at_decision_point = under_gate || at_cross_section;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	7c1b      	ldrb	r3, [r3, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d103      	bne.n	8008c5a <_ZN3jlb7ASState6updateEv+0x5a>
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	7c5b      	ldrb	r3, [r3, #17]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <_ZN3jlb7ASState6updateEv+0x5e>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e000      	b.n	8008c60 <_ZN3jlb7ASState6updateEv+0x60>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    if (!prev_at_decision_point && at_decision_point)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	7c9b      	ldrb	r3, [r3, #18]
 8008c68:	f083 0301 	eor.w	r3, r3, #1
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f000 814d 	beq.w	8008f0e <_ZN3jlb7ASState6updateEv+0x30e>
 8008c74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 8148 	beq.w	8008f0e <_ZN3jlb7ASState6updateEv+0x30e>
                        float inaccuracy = 0.25f;
 8008c7e:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8008c82:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if (std::sqrt(std::pow(graph[next_node].x - odometry.x_t, 2) + std::pow(graph[next_node].y - odometry.y_t, 2)) < inaccuracy)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	7f9b      	ldrb	r3, [r3, #30]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	4610      	mov	r0, r2
 8008c90:	f7ff fabd 	bl	800820e <_ZN3jlb5GraphixEc>
 8008c94:	4603      	mov	r3, r0
 8008c96:	ed93 7a01 	vldr	s14, [r3, #4]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8008ca2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ca6:	2002      	movs	r0, #2
 8008ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8008cac:	f7f9 fb74 	bl	8002398 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8008cb0:	ec55 4b10 	vmov	r4, r5, d0
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	7f9b      	ldrb	r3, [r3, #30]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	f7ff faa5 	bl	800820e <_ZN3jlb5GraphixEc>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	ed93 7a02 	vldr	s14, [r3, #8]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	edd3 7a03 	vldr	s15, [r3, #12]
 8008cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008cd6:	2002      	movs	r0, #2
 8008cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8008cdc:	f7f9 fb5c 	bl	8002398 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8008ce0:	ec53 2b10 	vmov	r2, r3, d0
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	f7f7 fac2 	bl	8000270 <__adddf3>
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	ec43 2b17 	vmov	d7, r2, r3
 8008cf4:	eeb0 0a47 	vmov.f32	s0, s14
 8008cf8:	eef0 0a67 	vmov.f32	s1, s15
 8008cfc:	f017 fc8a 	bl	8020614 <sqrt>
 8008d00:	ec55 4b10 	vmov	r4, r5, d0
 8008d04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d06:	f7f7 fc11 	bl	800052c <__aeabi_f2d>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	2101      	movs	r1, #1
 8008d10:	460e      	mov	r6, r1
 8008d12:	4620      	mov	r0, r4
 8008d14:	4629      	mov	r1, r5
 8008d16:	f7f7 fed3 	bl	8000ac0 <__aeabi_dcmplt>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <_ZN3jlb7ASState6updateEv+0x124>
 8008d20:	2300      	movs	r3, #0
 8008d22:	461e      	mov	r6, r3
 8008d24:	b2f3      	uxtb	r3, r6
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f000 80f1 	beq.w	8008f0e <_ZN3jlb7ASState6updateEv+0x30e>
                            auto at_node = next_node;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	7f9b      	ldrb	r3, [r3, #30]
 8008d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                unsigned long num_neighbors = graph[at_node].edges.size();
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d38:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff fa65 	bl	800820e <_ZN3jlb5GraphixEc>
 8008d44:	4603      	mov	r3, r0
 8008d46:	330c      	adds	r3, #12
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f003 fa33 	bl	800c1b4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8008d4e:	6278      	str	r0, [r7, #36]	; 0x24
                                auto          selected_edge = rand() % num_neighbors;
 8008d50:	f019 fbec 	bl	802252c <rand>
 8008d54:	4603      	mov	r3, r0
 8008d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d58:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d5e:	fb01 f202 	mul.w	r2, r1, r2
 8008d62:	1a9b      	subs	r3, r3, r2
 8008d64:	623b      	str	r3, [r7, #32]
                                if (graph[at_node].edges[selected_edge].node == 'P' || graph[at_node].edges[selected_edge].node == 'U' || graph[at_node].edges[selected_edge].node == 'X') { continue; }
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008d6e:	4611      	mov	r1, r2
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7ff fa4c 	bl	800820e <_ZN3jlb5GraphixEc>
 8008d76:	4603      	mov	r3, r0
 8008d78:	330c      	adds	r3, #12
 8008d7a:	6a39      	ldr	r1, [r7, #32]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f003 fa2f 	bl	800c1e0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8008d82:	4603      	mov	r3, r0
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b50      	cmp	r3, #80	; 0x50
 8008d88:	d023      	beq.n	8008dd2 <_ZN3jlb7ASState6updateEv+0x1d2>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008d92:	4611      	mov	r1, r2
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff fa3a 	bl	800820e <_ZN3jlb5GraphixEc>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	330c      	adds	r3, #12
 8008d9e:	6a39      	ldr	r1, [r7, #32]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f003 fa1d 	bl	800c1e0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8008da6:	4603      	mov	r3, r0
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b55      	cmp	r3, #85	; 0x55
 8008dac:	d011      	beq.n	8008dd2 <_ZN3jlb7ASState6updateEv+0x1d2>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008db6:	4611      	mov	r1, r2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7ff fa28 	bl	800820e <_ZN3jlb5GraphixEc>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	330c      	adds	r3, #12
 8008dc2:	6a39      	ldr	r1, [r7, #32]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f003 fa0b 	bl	800c1e0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	2b58      	cmp	r3, #88	; 0x58
 8008dd0:	d101      	bne.n	8008dd6 <_ZN3jlb7ASState6updateEv+0x1d6>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e000      	b.n	8008dd8 <_ZN3jlb7ASState6updateEv+0x1d8>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f040 8096 	bne.w	8008f0a <_ZN3jlb7ASState6updateEv+0x30a>
                                auto prev_nodes = graph[at_node].edges[selected_edge].prev_nodes;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008de6:	4611      	mov	r1, r2
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7ff fa10 	bl	800820e <_ZN3jlb5GraphixEc>
 8008dee:	4603      	mov	r3, r0
 8008df0:	330c      	adds	r3, #12
 8008df2:	6a39      	ldr	r1, [r7, #32]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f003 f9f3 	bl	800c1e0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	f103 0208 	add.w	r2, r3, #8
 8008e00:	f107 030c 	add.w	r3, r7, #12
 8008e04:	4611      	mov	r1, r2
 8008e06:	4618      	mov	r0, r3
 8008e08:	f002 ff9f 	bl	800bd4a <_ZNSt6vectorIcSaIcEEC1ERKS1_>
                                if (std::find(prev_nodes.begin(), prev_nodes.end(), previous_node) != prev_nodes.end())
 8008e0c:	f107 030c 	add.w	r3, r7, #12
 8008e10:	4618      	mov	r0, r3
 8008e12:	f003 f9f8 	bl	800c206 <_ZNSt6vectorIcSaIcEE5beginEv>
 8008e16:	4604      	mov	r4, r0
 8008e18:	f107 030c 	add.w	r3, r7, #12
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f003 fa02 	bl	800c226 <_ZNSt6vectorIcSaIcEE3endEv>
 8008e22:	4601      	mov	r1, r0
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	331d      	adds	r3, #29
 8008e28:	461a      	mov	r2, r3
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f003 fa0c 	bl	800c248 <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>
 8008e30:	4603      	mov	r3, r0
 8008e32:	61bb      	str	r3, [r7, #24]
 8008e34:	f107 030c 	add.w	r3, r7, #12
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f003 f9f4 	bl	800c226 <_ZNSt6vectorIcSaIcEE3endEv>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	61fb      	str	r3, [r7, #28]
 8008e42:	f107 021c 	add.w	r2, r7, #28
 8008e46:	f107 0318 	add.w	r3, r7, #24
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f003 fa0f 	bl	800c270 <_ZN9__gnu_cxxeqIPcS1_St6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>
 8008e52:	4603      	mov	r3, r0
 8008e54:	f083 0301 	eor.w	r3, r3, #1
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d04c      	beq.n	8008ef8 <_ZN3jlb7ASState6updateEv+0x2f8>
                                    next_node     = graph[at_node].edges[selected_edge].node;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e62:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008e66:	4611      	mov	r1, r2
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7ff f9d0 	bl	800820e <_ZN3jlb5GraphixEc>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	330c      	adds	r3, #12
 8008e72:	6a39      	ldr	r1, [r7, #32]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f003 f9b3 	bl	800c1e0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	781a      	ldrb	r2, [r3, #0]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	779a      	strb	r2, [r3, #30]
                                    previous_node = at_node;
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008e88:	775a      	strb	r2, [r3, #29]
                                    controller.set_direction(graph[at_node].edges[selected_edge].direction);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e92:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008e96:	4611      	mov	r1, r2
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7ff f9b8 	bl	800820e <_ZN3jlb5GraphixEc>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	330c      	adds	r3, #12
 8008ea2:	6a39      	ldr	r1, [r7, #32]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f003 f99b 	bl	800c1e0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	4619      	mov	r1, r3
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f7fb fea6 	bl	8004c02 <_ZN3jlb10Controller13set_directionENS_9DirectionE>
                                    odometry.correction(graph[previous_node].x, graph[previous_node].y);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	6a1c      	ldr	r4, [r3, #32]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	7f5b      	ldrb	r3, [r3, #29]
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	f7ff f9a2 	bl	800820e <_ZN3jlb5GraphixEc>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	ed93 8a01 	vldr	s16, [r3, #4]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	7f5b      	ldrb	r3, [r3, #29]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4610      	mov	r0, r2
 8008edc:	f7ff f997 	bl	800820e <_ZN3jlb5GraphixEc>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	edd3 7a02 	vldr	s15, [r3, #8]
 8008ee6:	eef0 0a67 	vmov.f32	s1, s15
 8008eea:	eeb0 0a48 	vmov.f32	s0, s16
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f7ff fc6e 	bl	80087d0 <_ZN3jlb8Odometry10correctionEff>
                                    break;
 8008ef4:	2400      	movs	r4, #0
 8008ef6:	e000      	b.n	8008efa <_ZN3jlb7ASState6updateEv+0x2fa>
 8008ef8:	2401      	movs	r4, #1
 8008efa:	f107 030c 	add.w	r3, r7, #12
 8008efe:	4618      	mov	r0, r3
 8008f00:	f002 ff60 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8008f04:	2c01      	cmp	r4, #1
 8008f06:	d102      	bne.n	8008f0e <_ZN3jlb7ASState6updateEv+0x30e>
 8008f08:	e714      	b.n	8008d34 <_ZN3jlb7ASState6updateEv+0x134>
                                if (graph[at_node].edges[selected_edge].node == 'P' || graph[at_node].edges[selected_edge].node == 'U' || graph[at_node].edges[selected_edge].node == 'X') { continue; }
 8008f0a:	bf00      	nop
                            }
 8008f0c:	e712      	b.n	8008d34 <_ZN3jlb7ASState6updateEv+0x134>
                    prev_at_decision_point = at_decision_point;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008f14:	749a      	strb	r2, [r3, #18]
                    reference_speed = LABYRINTH_SPEED;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008f1c:	60da      	str	r2, [r3, #12]
                    break;
 8008f1e:	e12c      	b.n	800917a <_ZN3jlb7ASState6updateEv+0x57a>
 8008f20:	3ba3d70a 	.word	0x3ba3d70a
                    switch (fast_state)
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	2b06      	cmp	r3, #6
 8008f2a:	f200 8124 	bhi.w	8009176 <_ZN3jlb7ASState6updateEv+0x576>
 8008f2e:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <_ZN3jlb7ASState6updateEv+0x334>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008f51 	.word	0x08008f51
 8008f38:	08008f5b 	.word	0x08008f5b
 8008f3c:	08008f65 	.word	0x08008f65
 8008f40:	08008f6f 	.word	0x08008f6f
 8008f44:	08008ff1 	.word	0x08008ff1
 8008f48:	08009073 	.word	0x08009073
 8008f4c:	080090f5 	.word	0x080090f5
                            reference_speed = FAST_SPEED_SAFETY_CAR;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008f56:	60da      	str	r2, [r3, #12]
                            break;
 8008f58:	e10e      	b.n	8009178 <_ZN3jlb7ASState6updateEv+0x578>
                            reference_speed = FAST_SPEED_OVERTAKE;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008f60:	60da      	str	r2, [r3, #12]
                            break;
 8008f62:	e109      	b.n	8009178 <_ZN3jlb7ASState6updateEv+0x578>
                            reference_speed = FAST_SPEED;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008f6a:	60da      	str	r2, [r3, #12]
                            break;
 8008f6c:	e104      	b.n	8009178 <_ZN3jlb7ASState6updateEv+0x578>
                            if (current_number_of_lines == 1u && !started_state_transition)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	7cdb      	ldrb	r3, [r3, #19]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d10e      	bne.n	8008f94 <_ZN3jlb7ASState6updateEv+0x394>
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	7f1b      	ldrb	r3, [r3, #28]
 8008f7a:	f083 0301 	eor.w	r3, r3, #1
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d007      	beq.n	8008f94 <_ZN3jlb7ASState6updateEv+0x394>
                                started_state_transition = true;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	2201      	movs	r2, #1
 8008f88:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	f04f 0200 	mov.w	r2, #0
 8008f90:	619a      	str	r2, [r3, #24]
 8008f92:	e00a      	b.n	8008faa <_ZN3jlb7ASState6updateEv+0x3aa>
                            else if (current_number_of_lines != 1u && started_state_transition) { started_state_transition = false; }
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	7cdb      	ldrb	r3, [r3, #19]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d006      	beq.n	8008faa <_ZN3jlb7ASState6updateEv+0x3aa>
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	7f1b      	ldrb	r3, [r3, #28]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <_ZN3jlb7ASState6updateEv+0x3aa>
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	7f1b      	ldrb	r3, [r3, #28]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d019      	beq.n	8008fe6 <_ZN3jlb7ASState6updateEv+0x3e6>
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	edd3 7a06 	vldr	s15, [r3, #24]
 8008fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc0:	dd11      	ble.n	8008fe6 <_ZN3jlb7ASState6updateEv+0x3e6>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	edd3 7a05 	vldr	s15, [r3, #20]
 8008fc8:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8008fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd4:	dd07      	ble.n	8008fe6 <_ZN3jlb7ASState6updateEv+0x3e6>
                                fast_state = FastState::OUT_ACCEL_ZONE;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2204      	movs	r2, #4
 8008fda:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	f04f 0200 	mov.w	r2, #0
 8008fe2:	615a      	str	r2, [r3, #20]
                                break;
 8008fe4:	e0c8      	b.n	8009178 <_ZN3jlb7ASState6updateEv+0x578>
                            reference_speed = FAST_SPEED;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008fec:	60da      	str	r2, [r3, #12]
                            break;
 8008fee:	e0c3      	b.n	8009178 <_ZN3jlb7ASState6updateEv+0x578>
                            if (current_number_of_lines == 3u && !started_state_transition)
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	7cdb      	ldrb	r3, [r3, #19]
 8008ff4:	2b03      	cmp	r3, #3
 8008ff6:	d10e      	bne.n	8009016 <_ZN3jlb7ASState6updateEv+0x416>
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	7f1b      	ldrb	r3, [r3, #28]
 8008ffc:	f083 0301 	eor.w	r3, r3, #1
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d007      	beq.n	8009016 <_ZN3jlb7ASState6updateEv+0x416>
                                started_state_transition = true;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2201      	movs	r2, #1
 800900a:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	f04f 0200 	mov.w	r2, #0
 8009012:	619a      	str	r2, [r3, #24]
 8009014:	e00a      	b.n	800902c <_ZN3jlb7ASState6updateEv+0x42c>
                            else if (current_number_of_lines != 3u && started_state_transition) { started_state_transition = false; }
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	7cdb      	ldrb	r3, [r3, #19]
 800901a:	2b03      	cmp	r3, #3
 800901c:	d006      	beq.n	800902c <_ZN3jlb7ASState6updateEv+0x42c>
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	7f1b      	ldrb	r3, [r3, #28]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d002      	beq.n	800902c <_ZN3jlb7ASState6updateEv+0x42c>
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2200      	movs	r2, #0
 800902a:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	7f1b      	ldrb	r3, [r3, #28]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d019      	beq.n	8009068 <_ZN3jlb7ASState6updateEv+0x468>
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	edd3 7a06 	vldr	s15, [r3, #24]
 800903a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800903e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009042:	dd11      	ble.n	8009068 <_ZN3jlb7ASState6updateEv+0x468>
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	edd3 7a05 	vldr	s15, [r3, #20]
 800904a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800904e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009056:	dd07      	ble.n	8009068 <_ZN3jlb7ASState6updateEv+0x468>
                                fast_state = FastState::IN_BRAKE_ZONE;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	2205      	movs	r2, #5
 800905c:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	f04f 0200 	mov.w	r2, #0
 8009064:	615a      	str	r2, [r3, #20]
                                break;
 8009066:	e087      	b.n	8009178 <_ZN3jlb7ASState6updateEv+0x578>
                            reference_speed = FAST_SPEED;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800906e:	60da      	str	r2, [r3, #12]
                            break;
 8009070:	e082      	b.n	8009178 <_ZN3jlb7ASState6updateEv+0x578>
                            if (current_number_of_lines == 1u && !started_state_transition)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	7cdb      	ldrb	r3, [r3, #19]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d10e      	bne.n	8009098 <_ZN3jlb7ASState6updateEv+0x498>
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	7f1b      	ldrb	r3, [r3, #28]
 800907e:	f083 0301 	eor.w	r3, r3, #1
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b00      	cmp	r3, #0
 8009086:	d007      	beq.n	8009098 <_ZN3jlb7ASState6updateEv+0x498>
                                started_state_transition = true;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	2201      	movs	r2, #1
 800908c:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	f04f 0200 	mov.w	r2, #0
 8009094:	619a      	str	r2, [r3, #24]
 8009096:	e00a      	b.n	80090ae <_ZN3jlb7ASState6updateEv+0x4ae>
                            else if (current_number_of_lines != 1u && started_state_transition) { started_state_transition = false; }
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	7cdb      	ldrb	r3, [r3, #19]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d006      	beq.n	80090ae <_ZN3jlb7ASState6updateEv+0x4ae>
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	7f1b      	ldrb	r3, [r3, #28]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d002      	beq.n	80090ae <_ZN3jlb7ASState6updateEv+0x4ae>
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2200      	movs	r2, #0
 80090ac:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	7f1b      	ldrb	r3, [r3, #28]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d019      	beq.n	80090ea <_ZN3jlb7ASState6updateEv+0x4ea>
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	edd3 7a06 	vldr	s15, [r3, #24]
 80090bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c4:	dd11      	ble.n	80090ea <_ZN3jlb7ASState6updateEv+0x4ea>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80090cc:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80090d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090d8:	dd07      	ble.n	80090ea <_ZN3jlb7ASState6updateEv+0x4ea>
                                fast_state = FastState::OUT_BRAKE_ZONE;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2206      	movs	r2, #6
 80090de:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	f04f 0200 	mov.w	r2, #0
 80090e6:	615a      	str	r2, [r3, #20]
                                break;
 80090e8:	e046      	b.n	8009178 <_ZN3jlb7ASState6updateEv+0x578>
                            reference_speed = FAST_SPEED_TURN;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80090f0:	60da      	str	r2, [r3, #12]
                            break;
 80090f2:	e041      	b.n	8009178 <_ZN3jlb7ASState6updateEv+0x578>
                            if (current_number_of_lines == 3u && !started_state_transition)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	7cdb      	ldrb	r3, [r3, #19]
 80090f8:	2b03      	cmp	r3, #3
 80090fa:	d10e      	bne.n	800911a <_ZN3jlb7ASState6updateEv+0x51a>
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	7f1b      	ldrb	r3, [r3, #28]
 8009100:	f083 0301 	eor.w	r3, r3, #1
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b00      	cmp	r3, #0
 8009108:	d007      	beq.n	800911a <_ZN3jlb7ASState6updateEv+0x51a>
                                started_state_transition = true;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	2201      	movs	r2, #1
 800910e:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	f04f 0200 	mov.w	r2, #0
 8009116:	619a      	str	r2, [r3, #24]
 8009118:	e00a      	b.n	8009130 <_ZN3jlb7ASState6updateEv+0x530>
                            else if (current_number_of_lines != 3u && started_state_transition) { started_state_transition = false; }
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	7cdb      	ldrb	r3, [r3, #19]
 800911e:	2b03      	cmp	r3, #3
 8009120:	d006      	beq.n	8009130 <_ZN3jlb7ASState6updateEv+0x530>
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	7f1b      	ldrb	r3, [r3, #28]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <_ZN3jlb7ASState6updateEv+0x530>
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2200      	movs	r2, #0
 800912e:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	7f1b      	ldrb	r3, [r3, #28]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d019      	beq.n	800916c <_ZN3jlb7ASState6updateEv+0x56c>
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	edd3 7a06 	vldr	s15, [r3, #24]
 800913e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009146:	dd11      	ble.n	800916c <_ZN3jlb7ASState6updateEv+0x56c>
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	edd3 7a05 	vldr	s15, [r3, #20]
 800914e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8009152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800915a:	dd07      	ble.n	800916c <_ZN3jlb7ASState6updateEv+0x56c>
                                fast_state = FastState::IN_ACCEL_ZONE;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	2203      	movs	r2, #3
 8009160:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	f04f 0200 	mov.w	r2, #0
 8009168:	615a      	str	r2, [r3, #20]
                                break;
 800916a:	e005      	b.n	8009178 <_ZN3jlb7ASState6updateEv+0x578>
                            reference_speed = FAST_SPEED_TURN;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009172:	60da      	str	r2, [r3, #12]
                            break;
 8009174:	e000      	b.n	8009178 <_ZN3jlb7ASState6updateEv+0x578>
                            break;
 8009176:	bf00      	nop
                    break;
 8009178:	bf00      	nop
                }
            }

            return CompositeState{mission, labyrinth_state, fast_state, reference_speed};
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	6819      	ldr	r1, [r3, #0]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	685a      	ldr	r2, [r3, #4]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	6898      	ldr	r0, [r3, #8]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	edd3 7a03 	vldr	s15, [r3, #12]
 800918c:	eeb0 0a67 	vmov.f32	s0, s15
 8009190:	4603      	mov	r3, r0
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7ff fcb3 	bl	8008afe <_ZN3jlb14CompositeStateC1ENS_7MissionENS_14LabyrinthStateENS_9FastStateEf>
        }
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	373c      	adds	r7, #60	; 0x3c
 800919c:	46bd      	mov	sp, r7
 800919e:	ecbd 8b02 	vpop	{d8}
 80091a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091a4 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
      struct _Vector_impl
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f017 f8fc 	bl	80203aa <_ZNSaIcED1Ev>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4618      	mov	r0, r3
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <_ZNSt12_Vector_baseIcSaIcEEC1Ev>:
      _Vector_base() = default;
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f003 f86a 	bl	800c2a0 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4618      	mov	r0, r3
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <_ZNSt6vectorIcSaIcEEC1Ev>:
      vector() = default;
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b082      	sub	sp, #8
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7ff ffeb 	bl	80091bc <_ZNSt12_Vector_baseIcSaIcEEC1Ev>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4618      	mov	r0, r3
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateERKNS_5GraphERK12Measurements>:

        std::vector<char> telemetry_data;

#ifndef SIMULATION
        // TODO: initialize UDPClient for STM32
        SignalSender(const Odometry &odometry_, const Controller &controller_, const ASState &as_state_, const Graph &graph_, const Measurements &measurements_)
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
 80091fc:	603b      	str	r3, [r7, #0]
            : odometry(odometry_), controller(controller_), as_state(as_state_), graph(graph_), measurements(measurements_)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	69ba      	ldr	r2, [r7, #24]
 800921a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	69fa      	ldr	r2, [r7, #28]
 8009222:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800922c:	4618      	mov	r0, r3
 800922e:	f7ff ffd2 	bl	80091d6 <_ZNSt6vectorIcSaIcEEC1Ev>
        {
        }
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <_ZN3jlb12SignalSenderD1Ev>:
            : odometry(odometry_), controller(controller_), as_state(as_state_), graph(graph_), measurements(measurements_) , client(SENDER_ADDRESS, SENDER_PORT)
        {
        }
#endif

        ~SignalSender() {}
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800924a:	4618      	mov	r0, r3
 800924c:	f002 fdba 	bl	800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4618      	mov	r0, r3
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <_ZN3jlb12SignalSender14send_telemetryEv>:

        void send_telemetry()
 800925a:	b590      	push	{r4, r7, lr}
 800925c:	b083      	sub	sp, #12
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
        {
            telemetry_data.clear();
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8009268:	4618      	mov	r0, r3
 800926a:	f003 f841 	bl	800c2f0 <_ZNSt6vectorIcSaIcEE5clearEv>

            measurements_1();
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f848 	bl	8009304 <_ZN3jlb12SignalSender14measurements_1Ev>
            measurements_2();
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fde2 	bl	8009e3e <_ZN3jlb12SignalSender14measurements_2Ev>
            measurements_3();
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f001 fcfe 	bl	800ac7c <_ZN3jlb12SignalSender14measurements_3Ev>
            measurements_4();
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f001 fd5e 	bl	800ad42 <_ZN3jlb12SignalSender14measurements_4Ev>
            measurements_5();
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f001 fdbe 	bl	800ae08 <_ZN3jlb12SignalSender14measurements_5Ev>
            odometry_1();
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f001 fe2a 	bl	800aee6 <_ZN3jlb12SignalSender10odometry_1Ev>
            odometry_2();
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f001 fe8a 	bl	800afac <_ZN3jlb12SignalSender10odometry_2Ev>
            logic_1();
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f001 fede 	bl	800b05a <_ZN3jlb12SignalSender7logic_1Ev>
            logic_2();
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f001 ff4a 	bl	800b138 <_ZN3jlb12SignalSender7logic_2Ev>
            logic3();
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f001 ffc1 	bl	800b22c <_ZN3jlb12SignalSender6logic3Ev>

            send(telemetry_data.data(), telemetry_data.size());
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80092b0:	4618      	mov	r0, r3
 80092b2:	f003 f82b 	bl	800c30c <_ZNSt6vectorIcSaIcEE4dataEv>
 80092b6:	4604      	mov	r4, r0
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80092be:	4618      	mov	r0, r3
 80092c0:	f003 f833 	bl	800c32a <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80092c4:	4603      	mov	r3, r0
 80092c6:	461a      	mov	r2, r3
 80092c8:	4621      	mov	r1, r4
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f804 	bl	80092d8 <_ZN3jlb12SignalSender4sendEPcj>
        }
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd90      	pop	{r4, r7, pc}

080092d8 <_ZN3jlb12SignalSender4sendEPcj>:
        // TODO: add UDPClient for STM32
#else
        UDPClient client;
#endif

        int send([[maybe_unused]] char *msg, [[maybe_unused]] size_t max_size)
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
        {
#ifndef SIMULATION
            HAL_UART_Transmit(&huart2, reinterpret_cast<uint8_t *>(msg), max_size, HAL_MAX_DELAY);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	f04f 33ff 	mov.w	r3, #4294967295
 80092ec:	68b9      	ldr	r1, [r7, #8]
 80092ee:	4804      	ldr	r0, [pc, #16]	; (8009300 <_ZN3jlb12SignalSender4sendEPcj+0x28>)
 80092f0:	f012 f906 	bl	801b500 <HAL_UART_Transmit>
            return 0;
 80092f4:	2300      	movs	r3, #0
#else
            return client.send(msg, max_size);
#endif
        }
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	2000091c 	.word	0x2000091c

08009304 <_ZN3jlb12SignalSender14measurements_1Ev>:

        void measurements_1()
 8009304:	b590      	push	{r4, r7, lr}
 8009306:	b089      	sub	sp, #36	; 0x24
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_1.line_sensor_1  = 0 == controller.selected_front ? controller.detection_front[0] + 2.0f : controller.detection_front[0];
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d113      	bne.n	8009340 <_ZN3jlb12SignalSender14measurements_1Ev+0x3c>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800931e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009322:	ee07 3a90 	vmov	s15, r3
 8009326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800932a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800932e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009336:	edc7 7a00 	vstr	s15, [r7]
 800933a:	783b      	ldrb	r3, [r7, #0]
 800933c:	b2db      	uxtb	r3, r3
 800933e:	e00e      	b.n	800935e <_ZN3jlb12SignalSender14measurements_1Ev+0x5a>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009346:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800934a:	ee07 3a90 	vmov	s15, r3
 800934e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009356:	edc7 7a00 	vstr	s15, [r7]
 800935a:	783b      	ldrb	r3, [r7, #0]
 800935c:	b2db      	uxtb	r3, r3
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	7013      	strb	r3, [r2, #0]
            jlb_rx.measurements_1.line_sensor_2  = 1 == controller.selected_front ? controller.detection_front[1] + 2.0f : controller.detection_front[1];
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d113      	bne.n	8009396 <_ZN3jlb12SignalSender14measurements_1Ev+0x92>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009378:	ee07 3a90 	vmov	s15, r3
 800937c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009380:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009384:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800938c:	edc7 7a00 	vstr	s15, [r7]
 8009390:	783b      	ldrb	r3, [r7, #0]
 8009392:	b2db      	uxtb	r3, r3
 8009394:	e00e      	b.n	80093b4 <_ZN3jlb12SignalSender14measurements_1Ev+0xb0>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800939c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80093a0:	ee07 3a90 	vmov	s15, r3
 80093a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ac:	edc7 7a00 	vstr	s15, [r7]
 80093b0:	783b      	ldrb	r3, [r7, #0]
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	7053      	strb	r3, [r2, #1]
            jlb_rx.measurements_1.line_sensor_3  = 2 == controller.selected_front ? controller.detection_front[2] + 2.0f : controller.detection_front[2];
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d113      	bne.n	80093ec <_ZN3jlb12SignalSender14measurements_1Ev+0xe8>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80093ca:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093d6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80093da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093e2:	edc7 7a00 	vstr	s15, [r7]
 80093e6:	783b      	ldrb	r3, [r7, #0]
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	e00e      	b.n	800940a <_ZN3jlb12SignalSender14measurements_1Ev+0x106>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80093f2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009402:	edc7 7a00 	vstr	s15, [r7]
 8009406:	783b      	ldrb	r3, [r7, #0]
 8009408:	b2db      	uxtb	r3, r3
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	7093      	strb	r3, [r2, #2]
            jlb_rx.measurements_1.line_sensor_4  = 3 == controller.selected_front ? controller.detection_front[3] + 2.0f : controller.detection_front[3];
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2b03      	cmp	r3, #3
 8009418:	d113      	bne.n	8009442 <_ZN3jlb12SignalSender14measurements_1Ev+0x13e>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009420:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8009424:	ee07 3a90 	vmov	s15, r3
 8009428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800942c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009430:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009438:	edc7 7a00 	vstr	s15, [r7]
 800943c:	783b      	ldrb	r3, [r7, #0]
 800943e:	b2db      	uxtb	r3, r3
 8009440:	e00e      	b.n	8009460 <_ZN3jlb12SignalSender14measurements_1Ev+0x15c>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009448:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800944c:	ee07 3a90 	vmov	s15, r3
 8009450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009458:	edc7 7a00 	vstr	s15, [r7]
 800945c:	783b      	ldrb	r3, [r7, #0]
 800945e:	b2db      	uxtb	r3, r3
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	70d3      	strb	r3, [r2, #3]
            jlb_rx.measurements_1.line_sensor_5  = 4 == controller.selected_front ? controller.detection_front[4] + 2.0f : controller.detection_front[4];
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b04      	cmp	r3, #4
 800946e:	d113      	bne.n	8009498 <_ZN3jlb12SignalSender14measurements_1Ev+0x194>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009476:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800947a:	ee07 3a90 	vmov	s15, r3
 800947e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009482:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009486:	ee77 7a87 	vadd.f32	s15, s15, s14
 800948a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800948e:	edc7 7a00 	vstr	s15, [r7]
 8009492:	783b      	ldrb	r3, [r7, #0]
 8009494:	b2db      	uxtb	r3, r3
 8009496:	e00e      	b.n	80094b6 <_ZN3jlb12SignalSender14measurements_1Ev+0x1b2>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800949e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ae:	edc7 7a00 	vstr	s15, [r7]
 80094b2:	783b      	ldrb	r3, [r7, #0]
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	7113      	strb	r3, [r2, #4]
            jlb_rx.measurements_1.line_sensor_6  = 5 == controller.selected_front ? controller.detection_front[5] + 2.0f : controller.detection_front[5];
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b05      	cmp	r3, #5
 80094c4:	d113      	bne.n	80094ee <_ZN3jlb12SignalSender14measurements_1Ev+0x1ea>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80094cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80094d0:	ee07 3a90 	vmov	s15, r3
 80094d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80094dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80094e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094e4:	edc7 7a00 	vstr	s15, [r7]
 80094e8:	783b      	ldrb	r3, [r7, #0]
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	e00e      	b.n	800950c <_ZN3jlb12SignalSender14measurements_1Ev+0x208>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80094f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80094f8:	ee07 3a90 	vmov	s15, r3
 80094fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009504:	edc7 7a00 	vstr	s15, [r7]
 8009508:	783b      	ldrb	r3, [r7, #0]
 800950a:	b2db      	uxtb	r3, r3
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	7153      	strb	r3, [r2, #5]
            jlb_rx.measurements_1.line_sensor_7  = 6 == controller.selected_front ? controller.detection_front[6] + 2.0f : controller.detection_front[6];
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b06      	cmp	r3, #6
 800951a:	d113      	bne.n	8009544 <_ZN3jlb12SignalSender14measurements_1Ev+0x240>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009522:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009526:	ee07 3a90 	vmov	s15, r3
 800952a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800952e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009532:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800953a:	edc7 7a00 	vstr	s15, [r7]
 800953e:	783b      	ldrb	r3, [r7, #0]
 8009540:	b2db      	uxtb	r3, r3
 8009542:	e00e      	b.n	8009562 <_ZN3jlb12SignalSender14measurements_1Ev+0x25e>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800954a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800954e:	ee07 3a90 	vmov	s15, r3
 8009552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800955a:	edc7 7a00 	vstr	s15, [r7]
 800955e:	783b      	ldrb	r3, [r7, #0]
 8009560:	b2db      	uxtb	r3, r3
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	7193      	strb	r3, [r2, #6]
            jlb_rx.measurements_1.line_sensor_8  = 7 == controller.selected_front ? controller.detection_front[7] + 2.0f : controller.detection_front[7];
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b07      	cmp	r3, #7
 8009570:	d113      	bne.n	800959a <_ZN3jlb12SignalSender14measurements_1Ev+0x296>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009578:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800957c:	ee07 3a90 	vmov	s15, r3
 8009580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009584:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009588:	ee77 7a87 	vadd.f32	s15, s15, s14
 800958c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009590:	edc7 7a00 	vstr	s15, [r7]
 8009594:	783b      	ldrb	r3, [r7, #0]
 8009596:	b2db      	uxtb	r3, r3
 8009598:	e00e      	b.n	80095b8 <_ZN3jlb12SignalSender14measurements_1Ev+0x2b4>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80095a0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80095a4:	ee07 3a90 	vmov	s15, r3
 80095a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095b0:	edc7 7a00 	vstr	s15, [r7]
 80095b4:	783b      	ldrb	r3, [r7, #0]
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	71d3      	strb	r3, [r2, #7]
            jlb_rx.measurements_1.line_sensor_9  = 8 == controller.selected_front ? controller.detection_front[8] + 2.0f : controller.detection_front[8];
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b08      	cmp	r3, #8
 80095c6:	d113      	bne.n	80095f0 <_ZN3jlb12SignalSender14measurements_1Ev+0x2ec>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80095ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095d2:	ee07 3a90 	vmov	s15, r3
 80095d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095da:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80095de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095e6:	edc7 7a00 	vstr	s15, [r7]
 80095ea:	783b      	ldrb	r3, [r7, #0]
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	e00e      	b.n	800960e <_ZN3jlb12SignalSender14measurements_1Ev+0x30a>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80095f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095fa:	ee07 3a90 	vmov	s15, r3
 80095fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009606:	edc7 7a00 	vstr	s15, [r7]
 800960a:	783b      	ldrb	r3, [r7, #0]
 800960c:	b2db      	uxtb	r3, r3
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	7213      	strb	r3, [r2, #8]
            jlb_rx.measurements_1.line_sensor_10 = 9 == controller.selected_front ? controller.detection_front[9] + 2.0f : controller.detection_front[9];
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b09      	cmp	r3, #9
 800961c:	d113      	bne.n	8009646 <_ZN3jlb12SignalSender14measurements_1Ev+0x342>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009628:	ee07 3a90 	vmov	s15, r3
 800962c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009630:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009634:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800963c:	edc7 7a00 	vstr	s15, [r7]
 8009640:	783b      	ldrb	r3, [r7, #0]
 8009642:	b2db      	uxtb	r3, r3
 8009644:	e00e      	b.n	8009664 <_ZN3jlb12SignalSender14measurements_1Ev+0x360>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800964c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009650:	ee07 3a90 	vmov	s15, r3
 8009654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800965c:	edc7 7a00 	vstr	s15, [r7]
 8009660:	783b      	ldrb	r3, [r7, #0]
 8009662:	b2db      	uxtb	r3, r3
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	7253      	strb	r3, [r2, #9]
            jlb_rx.measurements_1.line_sensor_11 = 10 == controller.selected_front ? controller.detection_front[10] + 2.0f : controller.detection_front[10];
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b0a      	cmp	r3, #10
 8009672:	d113      	bne.n	800969c <_ZN3jlb12SignalSender14measurements_1Ev+0x398>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800967a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800967e:	ee07 3a90 	vmov	s15, r3
 8009682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009686:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800968a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800968e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009692:	edc7 7a00 	vstr	s15, [r7]
 8009696:	783b      	ldrb	r3, [r7, #0]
 8009698:	b2db      	uxtb	r3, r3
 800969a:	e00e      	b.n	80096ba <_ZN3jlb12SignalSender14measurements_1Ev+0x3b6>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80096a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096a6:	ee07 3a90 	vmov	s15, r3
 80096aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096b2:	edc7 7a00 	vstr	s15, [r7]
 80096b6:	783b      	ldrb	r3, [r7, #0]
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	7293      	strb	r3, [r2, #10]
            jlb_rx.measurements_1.line_sensor_12 = 11 == controller.selected_front ? controller.detection_front[11] + 2.0f : controller.detection_front[11];
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b0b      	cmp	r3, #11
 80096c8:	d113      	bne.n	80096f2 <_ZN3jlb12SignalSender14measurements_1Ev+0x3ee>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80096d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80096d4:	ee07 3a90 	vmov	s15, r3
 80096d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80096e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80096e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096e8:	edc7 7a00 	vstr	s15, [r7]
 80096ec:	783b      	ldrb	r3, [r7, #0]
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	e00e      	b.n	8009710 <_ZN3jlb12SignalSender14measurements_1Ev+0x40c>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80096f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80096fc:	ee07 3a90 	vmov	s15, r3
 8009700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009708:	edc7 7a00 	vstr	s15, [r7]
 800970c:	783b      	ldrb	r3, [r7, #0]
 800970e:	b2db      	uxtb	r3, r3
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	72d3      	strb	r3, [r2, #11]
            jlb_rx.measurements_1.line_sensor_13 = 12 == controller.selected_front ? controller.detection_front[12] + 2.0f : controller.detection_front[12];
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b0c      	cmp	r3, #12
 800971e:	d113      	bne.n	8009748 <_ZN3jlb12SignalSender14measurements_1Ev+0x444>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800972a:	ee07 3a90 	vmov	s15, r3
 800972e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009732:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009736:	ee77 7a87 	vadd.f32	s15, s15, s14
 800973a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800973e:	edc7 7a00 	vstr	s15, [r7]
 8009742:	783b      	ldrb	r3, [r7, #0]
 8009744:	b2db      	uxtb	r3, r3
 8009746:	e00e      	b.n	8009766 <_ZN3jlb12SignalSender14measurements_1Ev+0x462>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800974e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009752:	ee07 3a90 	vmov	s15, r3
 8009756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800975e:	edc7 7a00 	vstr	s15, [r7]
 8009762:	783b      	ldrb	r3, [r7, #0]
 8009764:	b2db      	uxtb	r3, r3
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	7313      	strb	r3, [r2, #12]
            jlb_rx.measurements_1.line_sensor_14 = 13 == controller.selected_front ? controller.detection_front[13] + 2.0f : controller.detection_front[13];
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2b0d      	cmp	r3, #13
 8009774:	d113      	bne.n	800979e <_ZN3jlb12SignalSender14measurements_1Ev+0x49a>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800977c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009780:	ee07 3a90 	vmov	s15, r3
 8009784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009788:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800978c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009794:	edc7 7a00 	vstr	s15, [r7]
 8009798:	783b      	ldrb	r3, [r7, #0]
 800979a:	b2db      	uxtb	r3, r3
 800979c:	e00e      	b.n	80097bc <_ZN3jlb12SignalSender14measurements_1Ev+0x4b8>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80097a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097a8:	ee07 3a90 	vmov	s15, r3
 80097ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097b4:	edc7 7a00 	vstr	s15, [r7]
 80097b8:	783b      	ldrb	r3, [r7, #0]
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	7353      	strb	r3, [r2, #13]
            jlb_rx.measurements_1.line_sensor_15 = 14 == controller.selected_front ? controller.detection_front[14] + 2.0f : controller.detection_front[14];
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b0e      	cmp	r3, #14
 80097ca:	d113      	bne.n	80097f4 <_ZN3jlb12SignalSender14measurements_1Ev+0x4f0>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80097d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097d6:	ee07 3a90 	vmov	s15, r3
 80097da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097de:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80097e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80097e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ea:	edc7 7a00 	vstr	s15, [r7]
 80097ee:	783b      	ldrb	r3, [r7, #0]
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	e00e      	b.n	8009812 <_ZN3jlb12SignalSender14measurements_1Ev+0x50e>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80097fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097fe:	ee07 3a90 	vmov	s15, r3
 8009802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800980a:	edc7 7a00 	vstr	s15, [r7]
 800980e:	783b      	ldrb	r3, [r7, #0]
 8009810:	b2db      	uxtb	r3, r3
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	7393      	strb	r3, [r2, #14]
            jlb_rx.measurements_1.line_sensor_16 = 15 == controller.selected_front ? controller.detection_front[15] + 2.0f : controller.detection_front[15];
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b0f      	cmp	r3, #15
 8009820:	d113      	bne.n	800984a <_ZN3jlb12SignalSender14measurements_1Ev+0x546>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009828:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800982c:	ee07 3a90 	vmov	s15, r3
 8009830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009834:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009838:	ee77 7a87 	vadd.f32	s15, s15, s14
 800983c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009840:	edc7 7a00 	vstr	s15, [r7]
 8009844:	783b      	ldrb	r3, [r7, #0]
 8009846:	b2db      	uxtb	r3, r3
 8009848:	e00e      	b.n	8009868 <_ZN3jlb12SignalSender14measurements_1Ev+0x564>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009850:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009854:	ee07 3a90 	vmov	s15, r3
 8009858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800985c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009860:	edc7 7a00 	vstr	s15, [r7]
 8009864:	783b      	ldrb	r3, [r7, #0]
 8009866:	b2db      	uxtb	r3, r3
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	73d3      	strb	r3, [r2, #15]
#ifndef SIMULATION
            jlb_rx.measurements_1.line_sensor_17 = 16 == controller.selected_front ? controller.detection_front[16] + 2.0f : controller.detection_front[16];
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b10      	cmp	r3, #16
 8009876:	d113      	bne.n	80098a0 <_ZN3jlb12SignalSender14measurements_1Ev+0x59c>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800987e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009882:	ee07 3a90 	vmov	s15, r3
 8009886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800988a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800988e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009896:	edc7 7a00 	vstr	s15, [r7]
 800989a:	783b      	ldrb	r3, [r7, #0]
 800989c:	b2db      	uxtb	r3, r3
 800989e:	e00e      	b.n	80098be <_ZN3jlb12SignalSender14measurements_1Ev+0x5ba>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80098a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098aa:	ee07 3a90 	vmov	s15, r3
 80098ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098b6:	edc7 7a00 	vstr	s15, [r7]
 80098ba:	783b      	ldrb	r3, [r7, #0]
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	7413      	strb	r3, [r2, #16]
            jlb_rx.measurements_1.line_sensor_18 = 17 == controller.selected_front ? controller.detection_front[17] + 2.0f : controller.detection_front[17];
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2b11      	cmp	r3, #17
 80098cc:	d113      	bne.n	80098f6 <_ZN3jlb12SignalSender14measurements_1Ev+0x5f2>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80098d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098d8:	ee07 3a90 	vmov	s15, r3
 80098dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80098e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098ec:	edc7 7a00 	vstr	s15, [r7]
 80098f0:	783b      	ldrb	r3, [r7, #0]
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	e00e      	b.n	8009914 <_ZN3jlb12SignalSender14measurements_1Ev+0x610>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80098fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009900:	ee07 3a90 	vmov	s15, r3
 8009904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800990c:	edc7 7a00 	vstr	s15, [r7]
 8009910:	783b      	ldrb	r3, [r7, #0]
 8009912:	b2db      	uxtb	r3, r3
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	7453      	strb	r3, [r2, #17]
            jlb_rx.measurements_1.line_sensor_19 = 18 == controller.selected_front ? controller.detection_front[18] + 2.0f : controller.detection_front[18];
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b12      	cmp	r3, #18
 8009922:	d113      	bne.n	800994c <_ZN3jlb12SignalSender14measurements_1Ev+0x648>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800992a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800992e:	ee07 3a90 	vmov	s15, r3
 8009932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009936:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800993a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800993e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009942:	edc7 7a00 	vstr	s15, [r7]
 8009946:	783b      	ldrb	r3, [r7, #0]
 8009948:	b2db      	uxtb	r3, r3
 800994a:	e00e      	b.n	800996a <_ZN3jlb12SignalSender14measurements_1Ev+0x666>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009952:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009956:	ee07 3a90 	vmov	s15, r3
 800995a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009962:	edc7 7a00 	vstr	s15, [r7]
 8009966:	783b      	ldrb	r3, [r7, #0]
 8009968:	b2db      	uxtb	r3, r3
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	7493      	strb	r3, [r2, #18]
            jlb_rx.measurements_1.line_sensor_20 = 19 == controller.selected_front ? controller.detection_front[19] + 2.0f : controller.detection_front[19];
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b13      	cmp	r3, #19
 8009978:	d113      	bne.n	80099a2 <_ZN3jlb12SignalSender14measurements_1Ev+0x69e>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009980:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009984:	ee07 3a90 	vmov	s15, r3
 8009988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800998c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009990:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009998:	edc7 7a00 	vstr	s15, [r7]
 800999c:	783b      	ldrb	r3, [r7, #0]
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	e00e      	b.n	80099c0 <_ZN3jlb12SignalSender14measurements_1Ev+0x6bc>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80099a8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80099ac:	ee07 3a90 	vmov	s15, r3
 80099b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099b8:	edc7 7a00 	vstr	s15, [r7]
 80099bc:	783b      	ldrb	r3, [r7, #0]
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	74d3      	strb	r3, [r2, #19]
            jlb_rx.measurements_1.line_sensor_21 = 20 == controller.selected_front ? controller.detection_front[20] + 2.0f : controller.detection_front[20];
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b14      	cmp	r3, #20
 80099ce:	d113      	bne.n	80099f8 <_ZN3jlb12SignalSender14measurements_1Ev+0x6f4>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80099d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80099da:	ee07 3a90 	vmov	s15, r3
 80099de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80099e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ee:	edc7 7a00 	vstr	s15, [r7]
 80099f2:	783b      	ldrb	r3, [r7, #0]
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	e00e      	b.n	8009a16 <_ZN3jlb12SignalSender14measurements_1Ev+0x712>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80099fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009a02:	ee07 3a90 	vmov	s15, r3
 8009a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a0e:	edc7 7a00 	vstr	s15, [r7]
 8009a12:	783b      	ldrb	r3, [r7, #0]
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	7513      	strb	r3, [r2, #20]
            jlb_rx.measurements_1.line_sensor_22 = 21 == controller.selected_front ? controller.detection_front[21] + 2.0f : controller.detection_front[21];
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b15      	cmp	r3, #21
 8009a24:	d113      	bne.n	8009a4e <_ZN3jlb12SignalSender14measurements_1Ev+0x74a>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009a2c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009a30:	ee07 3a90 	vmov	s15, r3
 8009a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a38:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009a3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a44:	edc7 7a00 	vstr	s15, [r7]
 8009a48:	783b      	ldrb	r3, [r7, #0]
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	e00e      	b.n	8009a6c <_ZN3jlb12SignalSender14measurements_1Ev+0x768>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009a54:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009a58:	ee07 3a90 	vmov	s15, r3
 8009a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a64:	edc7 7a00 	vstr	s15, [r7]
 8009a68:	783b      	ldrb	r3, [r7, #0]
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	7553      	strb	r3, [r2, #21]
            jlb_rx.measurements_1.line_sensor_23 = 22 == controller.selected_front ? controller.detection_front[22] + 2.0f : controller.detection_front[22];
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b16      	cmp	r3, #22
 8009a7a:	d113      	bne.n	8009aa4 <_ZN3jlb12SignalSender14measurements_1Ev+0x7a0>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009a82:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8009a86:	ee07 3a90 	vmov	s15, r3
 8009a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a8e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009a92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a9a:	edc7 7a00 	vstr	s15, [r7]
 8009a9e:	783b      	ldrb	r3, [r7, #0]
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	e00e      	b.n	8009ac2 <_ZN3jlb12SignalSender14measurements_1Ev+0x7be>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009aaa:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aba:	edc7 7a00 	vstr	s15, [r7]
 8009abe:	783b      	ldrb	r3, [r7, #0]
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	7593      	strb	r3, [r2, #22]
            jlb_rx.measurements_1.line_sensor_24 = 23 == controller.selected_front ? controller.detection_front[23] + 2.0f : controller.detection_front[23];
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b17      	cmp	r3, #23
 8009ad0:	d113      	bne.n	8009afa <_ZN3jlb12SignalSender14measurements_1Ev+0x7f6>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009ad8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8009adc:	ee07 3a90 	vmov	s15, r3
 8009ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ae4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009af0:	edc7 7a00 	vstr	s15, [r7]
 8009af4:	783b      	ldrb	r3, [r7, #0]
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	e00e      	b.n	8009b18 <_ZN3jlb12SignalSender14measurements_1Ev+0x814>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009b00:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8009b04:	ee07 3a90 	vmov	s15, r3
 8009b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b10:	edc7 7a00 	vstr	s15, [r7]
 8009b14:	783b      	ldrb	r3, [r7, #0]
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	75d3      	strb	r3, [r2, #23]
            jlb_rx.measurements_1.line_sensor_25 = 24 == controller.selected_front ? controller.detection_front[24] + 2.0f : controller.detection_front[24];
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b18      	cmp	r3, #24
 8009b26:	d113      	bne.n	8009b50 <_ZN3jlb12SignalSender14measurements_1Ev+0x84c>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009b2e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b3a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009b3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b46:	edc7 7a00 	vstr	s15, [r7]
 8009b4a:	783b      	ldrb	r3, [r7, #0]
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	e00e      	b.n	8009b6e <_ZN3jlb12SignalSender14measurements_1Ev+0x86a>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009b56:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009b5a:	ee07 3a90 	vmov	s15, r3
 8009b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b66:	edc7 7a00 	vstr	s15, [r7]
 8009b6a:	783b      	ldrb	r3, [r7, #0]
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	7613      	strb	r3, [r2, #24]
            jlb_rx.measurements_1.line_sensor_26 = 25 == controller.selected_front ? controller.detection_front[25] + 2.0f : controller.detection_front[25];
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b19      	cmp	r3, #25
 8009b7c:	d113      	bne.n	8009ba6 <_ZN3jlb12SignalSender14measurements_1Ev+0x8a2>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009b84:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009b88:	ee07 3a90 	vmov	s15, r3
 8009b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b90:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009b94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b9c:	edc7 7a00 	vstr	s15, [r7]
 8009ba0:	783b      	ldrb	r3, [r7, #0]
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	e00e      	b.n	8009bc4 <_ZN3jlb12SignalSender14measurements_1Ev+0x8c0>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009bac:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009bb0:	ee07 3a90 	vmov	s15, r3
 8009bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bbc:	edc7 7a00 	vstr	s15, [r7]
 8009bc0:	783b      	ldrb	r3, [r7, #0]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	7653      	strb	r3, [r2, #25]
            jlb_rx.measurements_1.line_sensor_27 = 26 == controller.selected_front ? controller.detection_front[26] + 2.0f : controller.detection_front[26];
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b1a      	cmp	r3, #26
 8009bd2:	d113      	bne.n	8009bfc <_ZN3jlb12SignalSender14measurements_1Ev+0x8f8>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009bda:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009bde:	ee07 3a90 	vmov	s15, r3
 8009be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009be6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009bea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bf2:	edc7 7a00 	vstr	s15, [r7]
 8009bf6:	783b      	ldrb	r3, [r7, #0]
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	e00e      	b.n	8009c1a <_ZN3jlb12SignalSender14measurements_1Ev+0x916>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009c02:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c12:	edc7 7a00 	vstr	s15, [r7]
 8009c16:	783b      	ldrb	r3, [r7, #0]
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	7693      	strb	r3, [r2, #26]
            jlb_rx.measurements_1.line_sensor_28 = 27 == controller.selected_front ? controller.detection_front[27] + 2.0f : controller.detection_front[27];
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b1b      	cmp	r3, #27
 8009c28:	d113      	bne.n	8009c52 <_ZN3jlb12SignalSender14measurements_1Ev+0x94e>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009c30:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8009c34:	ee07 3a90 	vmov	s15, r3
 8009c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c3c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c48:	edc7 7a00 	vstr	s15, [r7]
 8009c4c:	783b      	ldrb	r3, [r7, #0]
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	e00e      	b.n	8009c70 <_ZN3jlb12SignalSender14measurements_1Ev+0x96c>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009c58:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8009c5c:	ee07 3a90 	vmov	s15, r3
 8009c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c68:	edc7 7a00 	vstr	s15, [r7]
 8009c6c:	783b      	ldrb	r3, [r7, #0]
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	76d3      	strb	r3, [r2, #27]
            jlb_rx.measurements_1.line_sensor_29 = 28 == controller.selected_front ? controller.detection_front[28] + 2.0f : controller.detection_front[28];
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b1c      	cmp	r3, #28
 8009c7e:	d113      	bne.n	8009ca8 <_ZN3jlb12SignalSender14measurements_1Ev+0x9a4>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009c86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c8a:	ee07 3a90 	vmov	s15, r3
 8009c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009c96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c9e:	edc7 7a00 	vstr	s15, [r7]
 8009ca2:	783b      	ldrb	r3, [r7, #0]
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	e00e      	b.n	8009cc6 <_ZN3jlb12SignalSender14measurements_1Ev+0x9c2>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009cae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cbe:	edc7 7a00 	vstr	s15, [r7]
 8009cc2:	783b      	ldrb	r3, [r7, #0]
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	7713      	strb	r3, [r2, #28]
            jlb_rx.measurements_1.line_sensor_30 = 29 == controller.selected_front ? controller.detection_front[29] + 2.0f : controller.detection_front[29];
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b1d      	cmp	r3, #29
 8009cd4:	d113      	bne.n	8009cfe <_ZN3jlb12SignalSender14measurements_1Ev+0x9fa>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ce0:	ee07 3a90 	vmov	s15, r3
 8009ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ce8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009cec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cf4:	edc7 7a00 	vstr	s15, [r7]
 8009cf8:	783b      	ldrb	r3, [r7, #0]
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	e00e      	b.n	8009d1c <_ZN3jlb12SignalSender14measurements_1Ev+0xa18>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d08:	ee07 3a90 	vmov	s15, r3
 8009d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d14:	edc7 7a00 	vstr	s15, [r7]
 8009d18:	783b      	ldrb	r3, [r7, #0]
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	7753      	strb	r3, [r2, #29]
            jlb_rx.measurements_1.line_sensor_31 = 30 == controller.selected_front ? controller.detection_front[30] + 2.0f : controller.detection_front[30];
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b1e      	cmp	r3, #30
 8009d2a:	d113      	bne.n	8009d54 <_ZN3jlb12SignalSender14measurements_1Ev+0xa50>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d32:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009d36:	ee07 3a90 	vmov	s15, r3
 8009d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d3e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009d42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d4a:	edc7 7a00 	vstr	s15, [r7]
 8009d4e:	783b      	ldrb	r3, [r7, #0]
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	e00e      	b.n	8009d72 <_ZN3jlb12SignalSender14measurements_1Ev+0xa6e>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d5a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009d5e:	ee07 3a90 	vmov	s15, r3
 8009d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d6a:	edc7 7a00 	vstr	s15, [r7]
 8009d6e:	783b      	ldrb	r3, [r7, #0]
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	7793      	strb	r3, [r2, #30]
            jlb_rx.measurements_1.line_sensor_32 = 31 == controller.selected_front ? controller.detection_front[31] + 2.0f : controller.detection_front[31];
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b1f      	cmp	r3, #31
 8009d80:	d113      	bne.n	8009daa <_ZN3jlb12SignalSender14measurements_1Ev+0xaa6>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d88:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8009d8c:	ee07 3a90 	vmov	s15, r3
 8009d90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d94:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009d98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009da0:	edc7 7a00 	vstr	s15, [r7]
 8009da4:	783b      	ldrb	r3, [r7, #0]
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	e00e      	b.n	8009dc8 <_ZN3jlb12SignalSender14measurements_1Ev+0xac4>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009db0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8009db4:	ee07 3a90 	vmov	s15, r3
 8009db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dc0:	edc7 7a00 	vstr	s15, [r7]
 8009dc4:	783b      	ldrb	r3, [r7, #0]
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	77d3      	strb	r3, [r2, #31]
#endif

            char    data[measurements_1_DLC + 2] = {0};
 8009dcc:	2300      	movs	r3, #0
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	f107 0310 	add.w	r3, r7, #16
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	601a      	str	r2, [r3, #0]
 8009dd8:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_1_IDE;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_1_DLC;
 8009dde:	2308      	movs	r3, #8
 8009de0:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_1_CANID;
 8009de2:	2301      	movs	r3, #1
 8009de4:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_1_DLC;
 8009de6:	2308      	movs	r3, #8
 8009de8:	737b      	strb	r3, [r7, #13]
            Pack_measurements_1_jlb(&jlb_rx.measurements_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f107 010c 	add.w	r1, r7, #12
 8009df0:	3102      	adds	r1, #2
 8009df2:	f107 030b 	add.w	r3, r7, #11
 8009df6:	f107 020a 	add.w	r2, r7, #10
 8009dfa:	f7f7 f89f 	bl	8000f3c <Pack_measurements_1_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_1_DLC + 2);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f002 fa0b 	bl	800c226 <_ZNSt6vectorIcSaIcEE3endEv>
 8009e10:	4603      	mov	r3, r0
 8009e12:	61fb      	str	r3, [r7, #28]
 8009e14:	f107 021c 	add.w	r2, r7, #28
 8009e18:	f107 0318 	add.w	r3, r7, #24
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f002 fa92 	bl	800c348 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 8009e24:	f107 030c 	add.w	r3, r7, #12
 8009e28:	330a      	adds	r3, #10
 8009e2a:	f107 020c 	add.w	r2, r7, #12
 8009e2e:	69b9      	ldr	r1, [r7, #24]
 8009e30:	4620      	mov	r0, r4
 8009e32:	f002 fa9a 	bl	800c36a <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 8009e36:	bf00      	nop
 8009e38:	3724      	adds	r7, #36	; 0x24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd90      	pop	{r4, r7, pc}

08009e3e <_ZN3jlb12SignalSender14measurements_2Ev>:

        void measurements_2()
 8009e3e:	b590      	push	{r4, r7, lr}
 8009e40:	b089      	sub	sp, #36	; 0x24
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_2.line_sensor_1  = 0 == controller.selected_rear ? controller.detection_rear[0] + 2.0f : controller.detection_rear[0];
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d113      	bne.n	8009e7a <_ZN3jlb12SignalSender14measurements_2Ev+0x3c>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009e58:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009e5c:	ee07 3a90 	vmov	s15, r3
 8009e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e64:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009e68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e70:	edc7 7a00 	vstr	s15, [r7]
 8009e74:	783b      	ldrb	r3, [r7, #0]
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	e00e      	b.n	8009e98 <_ZN3jlb12SignalSender14measurements_2Ev+0x5a>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009e80:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009e84:	ee07 3a90 	vmov	s15, r3
 8009e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e90:	edc7 7a00 	vstr	s15, [r7]
 8009e94:	783b      	ldrb	r3, [r7, #0]
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	f882 3020 	strb.w	r3, [r2, #32]
            jlb_rx.measurements_2.line_sensor_2  = 1 == controller.selected_rear ? controller.detection_rear[1] + 2.0f : controller.detection_rear[1];
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d113      	bne.n	8009ed2 <_ZN3jlb12SignalSender14measurements_2Ev+0x94>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009eb0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009eb4:	ee07 3a90 	vmov	s15, r3
 8009eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ebc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009ec0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ec8:	edc7 7a00 	vstr	s15, [r7]
 8009ecc:	783b      	ldrb	r3, [r7, #0]
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	e00e      	b.n	8009ef0 <_ZN3jlb12SignalSender14measurements_2Ev+0xb2>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009ed8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009edc:	ee07 3a90 	vmov	s15, r3
 8009ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ee8:	edc7 7a00 	vstr	s15, [r7]
 8009eec:	783b      	ldrb	r3, [r7, #0]
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
            jlb_rx.measurements_2.line_sensor_3  = 2 == controller.selected_rear ? controller.detection_rear[2] + 2.0f : controller.detection_rear[2];
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d113      	bne.n	8009f2a <_ZN3jlb12SignalSender14measurements_2Ev+0xec>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f08:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009f0c:	ee07 3a90 	vmov	s15, r3
 8009f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f14:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009f18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f20:	edc7 7a00 	vstr	s15, [r7]
 8009f24:	783b      	ldrb	r3, [r7, #0]
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	e00e      	b.n	8009f48 <_ZN3jlb12SignalSender14measurements_2Ev+0x10a>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f30:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009f34:	ee07 3a90 	vmov	s15, r3
 8009f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f40:	edc7 7a00 	vstr	s15, [r7]
 8009f44:	783b      	ldrb	r3, [r7, #0]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            jlb_rx.measurements_2.line_sensor_4  = 3 == controller.selected_rear ? controller.detection_rear[3] + 2.0f : controller.detection_rear[3];
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d113      	bne.n	8009f82 <_ZN3jlb12SignalSender14measurements_2Ev+0x144>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f60:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8009f64:	ee07 3a90 	vmov	s15, r3
 8009f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009f70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f78:	edc7 7a00 	vstr	s15, [r7]
 8009f7c:	783b      	ldrb	r3, [r7, #0]
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	e00e      	b.n	8009fa0 <_ZN3jlb12SignalSender14measurements_2Ev+0x162>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f88:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8009f8c:	ee07 3a90 	vmov	s15, r3
 8009f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f98:	edc7 7a00 	vstr	s15, [r7]
 8009f9c:	783b      	ldrb	r3, [r7, #0]
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
            jlb_rx.measurements_2.line_sensor_5  = 4 == controller.selected_rear ? controller.detection_rear[4] + 2.0f : controller.detection_rear[4];
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	d113      	bne.n	8009fda <_ZN3jlb12SignalSender14measurements_2Ev+0x19c>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009fb8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009fbc:	ee07 3a90 	vmov	s15, r3
 8009fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fc4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009fc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fd0:	edc7 7a00 	vstr	s15, [r7]
 8009fd4:	783b      	ldrb	r3, [r7, #0]
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	e00e      	b.n	8009ff8 <_ZN3jlb12SignalSender14measurements_2Ev+0x1ba>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009fe0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009fe4:	ee07 3a90 	vmov	s15, r3
 8009fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ff0:	edc7 7a00 	vstr	s15, [r7]
 8009ff4:	783b      	ldrb	r3, [r7, #0]
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            jlb_rx.measurements_2.line_sensor_6  = 5 == controller.selected_rear ? controller.detection_rear[5] + 2.0f : controller.detection_rear[5];
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	2b05      	cmp	r3, #5
 800a008:	d113      	bne.n	800a032 <_ZN3jlb12SignalSender14measurements_2Ev+0x1f4>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a010:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a014:	ee07 3a90 	vmov	s15, r3
 800a018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a01c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a020:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a028:	edc7 7a00 	vstr	s15, [r7]
 800a02c:	783b      	ldrb	r3, [r7, #0]
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	e00e      	b.n	800a050 <_ZN3jlb12SignalSender14measurements_2Ev+0x212>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a038:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a03c:	ee07 3a90 	vmov	s15, r3
 800a040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a048:	edc7 7a00 	vstr	s15, [r7]
 800a04c:	783b      	ldrb	r3, [r7, #0]
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
            jlb_rx.measurements_2.line_sensor_7  = 6 == controller.selected_rear ? controller.detection_rear[6] + 2.0f : controller.detection_rear[6];
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	2b06      	cmp	r3, #6
 800a060:	d113      	bne.n	800a08a <_ZN3jlb12SignalSender14measurements_2Ev+0x24c>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a068:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800a06c:	ee07 3a90 	vmov	s15, r3
 800a070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a074:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a078:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a07c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a080:	edc7 7a00 	vstr	s15, [r7]
 800a084:	783b      	ldrb	r3, [r7, #0]
 800a086:	b2db      	uxtb	r3, r3
 800a088:	e00e      	b.n	800a0a8 <_ZN3jlb12SignalSender14measurements_2Ev+0x26a>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a090:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800a094:	ee07 3a90 	vmov	s15, r3
 800a098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0a0:	edc7 7a00 	vstr	s15, [r7]
 800a0a4:	783b      	ldrb	r3, [r7, #0]
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
            jlb_rx.measurements_2.line_sensor_8  = 7 == controller.selected_rear ? controller.detection_rear[7] + 2.0f : controller.detection_rear[7];
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	2b07      	cmp	r3, #7
 800a0b8:	d113      	bne.n	800a0e2 <_ZN3jlb12SignalSender14measurements_2Ev+0x2a4>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a0c0:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800a0c4:	ee07 3a90 	vmov	s15, r3
 800a0c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a0d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a0d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0d8:	edc7 7a00 	vstr	s15, [r7]
 800a0dc:	783b      	ldrb	r3, [r7, #0]
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	e00e      	b.n	800a100 <_ZN3jlb12SignalSender14measurements_2Ev+0x2c2>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a0e8:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800a0ec:	ee07 3a90 	vmov	s15, r3
 800a0f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0f8:	edc7 7a00 	vstr	s15, [r7]
 800a0fc:	783b      	ldrb	r3, [r7, #0]
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
            jlb_rx.measurements_2.line_sensor_9  = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	2b08      	cmp	r3, #8
 800a110:	d113      	bne.n	800a13a <_ZN3jlb12SignalSender14measurements_2Ev+0x2fc>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a118:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a11c:	ee07 3a90 	vmov	s15, r3
 800a120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a124:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a128:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a12c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a130:	edc7 7a00 	vstr	s15, [r7]
 800a134:	783b      	ldrb	r3, [r7, #0]
 800a136:	b2db      	uxtb	r3, r3
 800a138:	e00e      	b.n	800a158 <_ZN3jlb12SignalSender14measurements_2Ev+0x31a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a140:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a144:	ee07 3a90 	vmov	s15, r3
 800a148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a14c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a150:	edc7 7a00 	vstr	s15, [r7]
 800a154:	783b      	ldrb	r3, [r7, #0]
 800a156:	b2db      	uxtb	r3, r3
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	2b09      	cmp	r3, #9
 800a168:	d113      	bne.n	800a192 <_ZN3jlb12SignalSender14measurements_2Ev+0x354>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a170:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a174:	ee07 3a90 	vmov	s15, r3
 800a178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a17c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a180:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a188:	edc7 7a00 	vstr	s15, [r7]
 800a18c:	783b      	ldrb	r3, [r7, #0]
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	e00e      	b.n	800a1b0 <_ZN3jlb12SignalSender14measurements_2Ev+0x372>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a198:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a19c:	ee07 3a90 	vmov	s15, r3
 800a1a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1a8:	edc7 7a00 	vstr	s15, [r7]
 800a1ac:	783b      	ldrb	r3, [r7, #0]
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
            jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	2b0a      	cmp	r3, #10
 800a1c0:	d113      	bne.n	800a1ea <_ZN3jlb12SignalSender14measurements_2Ev+0x3ac>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a1c8:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800a1cc:	ee07 3a90 	vmov	s15, r3
 800a1d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1d4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a1d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1e0:	edc7 7a00 	vstr	s15, [r7]
 800a1e4:	783b      	ldrb	r3, [r7, #0]
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	e00e      	b.n	800a208 <_ZN3jlb12SignalSender14measurements_2Ev+0x3ca>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a1f0:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800a1f4:	ee07 3a90 	vmov	s15, r3
 800a1f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a200:	edc7 7a00 	vstr	s15, [r7]
 800a204:	783b      	ldrb	r3, [r7, #0]
 800a206:	b2db      	uxtb	r3, r3
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	2b0b      	cmp	r3, #11
 800a218:	d113      	bne.n	800a242 <_ZN3jlb12SignalSender14measurements_2Ev+0x404>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a220:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800a224:	ee07 3a90 	vmov	s15, r3
 800a228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a22c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a230:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a238:	edc7 7a00 	vstr	s15, [r7]
 800a23c:	783b      	ldrb	r3, [r7, #0]
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	e00e      	b.n	800a260 <_ZN3jlb12SignalSender14measurements_2Ev+0x422>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a248:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800a24c:	ee07 3a90 	vmov	s15, r3
 800a250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a258:	edc7 7a00 	vstr	s15, [r7]
 800a25c:	783b      	ldrb	r3, [r7, #0]
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	2b0c      	cmp	r3, #12
 800a270:	d113      	bne.n	800a29a <_ZN3jlb12SignalSender14measurements_2Ev+0x45c>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a278:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a27c:	ee07 3a90 	vmov	s15, r3
 800a280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a284:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a288:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a28c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a290:	edc7 7a00 	vstr	s15, [r7]
 800a294:	783b      	ldrb	r3, [r7, #0]
 800a296:	b2db      	uxtb	r3, r3
 800a298:	e00e      	b.n	800a2b8 <_ZN3jlb12SignalSender14measurements_2Ev+0x47a>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a2a0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a2a4:	ee07 3a90 	vmov	s15, r3
 800a2a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2b0:	edc7 7a00 	vstr	s15, [r7]
 800a2b4:	783b      	ldrb	r3, [r7, #0]
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
            jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	2b0d      	cmp	r3, #13
 800a2c8:	d113      	bne.n	800a2f2 <_ZN3jlb12SignalSender14measurements_2Ev+0x4b4>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a2d0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a2d4:	ee07 3a90 	vmov	s15, r3
 800a2d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a2e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2e8:	edc7 7a00 	vstr	s15, [r7]
 800a2ec:	783b      	ldrb	r3, [r7, #0]
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	e00e      	b.n	800a310 <_ZN3jlb12SignalSender14measurements_2Ev+0x4d2>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a2f8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a2fc:	ee07 3a90 	vmov	s15, r3
 800a300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a308:	edc7 7a00 	vstr	s15, [r7]
 800a30c:	783b      	ldrb	r3, [r7, #0]
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
            jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	2b0e      	cmp	r3, #14
 800a320:	d113      	bne.n	800a34a <_ZN3jlb12SignalSender14measurements_2Ev+0x50c>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a328:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a32c:	ee07 3a90 	vmov	s15, r3
 800a330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a334:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a338:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a33c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a340:	edc7 7a00 	vstr	s15, [r7]
 800a344:	783b      	ldrb	r3, [r7, #0]
 800a346:	b2db      	uxtb	r3, r3
 800a348:	e00e      	b.n	800a368 <_ZN3jlb12SignalSender14measurements_2Ev+0x52a>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a350:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a354:	ee07 3a90 	vmov	s15, r3
 800a358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a35c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a360:	edc7 7a00 	vstr	s15, [r7]
 800a364:	783b      	ldrb	r3, [r7, #0]
 800a366:	b2db      	uxtb	r3, r3
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
            jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	2b0f      	cmp	r3, #15
 800a378:	d113      	bne.n	800a3a2 <_ZN3jlb12SignalSender14measurements_2Ev+0x564>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a380:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800a384:	ee07 3a90 	vmov	s15, r3
 800a388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a38c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a390:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a398:	edc7 7a00 	vstr	s15, [r7]
 800a39c:	783b      	ldrb	r3, [r7, #0]
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	e00e      	b.n	800a3c0 <_ZN3jlb12SignalSender14measurements_2Ev+0x582>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a3a8:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800a3ac:	ee07 3a90 	vmov	s15, r3
 800a3b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3b8:	edc7 7a00 	vstr	s15, [r7]
 800a3bc:	783b      	ldrb	r3, [r7, #0]
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
#ifndef SIMULATION
            jlb_rx.measurements_2.line_sensor_9  = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	2b08      	cmp	r3, #8
 800a3d0:	d113      	bne.n	800a3fa <_ZN3jlb12SignalSender14measurements_2Ev+0x5bc>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a3d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a3dc:	ee07 3a90 	vmov	s15, r3
 800a3e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3e4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a3e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3f0:	edc7 7a00 	vstr	s15, [r7]
 800a3f4:	783b      	ldrb	r3, [r7, #0]
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	e00e      	b.n	800a418 <_ZN3jlb12SignalSender14measurements_2Ev+0x5da>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a400:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a404:	ee07 3a90 	vmov	s15, r3
 800a408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a40c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a410:	edc7 7a00 	vstr	s15, [r7]
 800a414:	783b      	ldrb	r3, [r7, #0]
 800a416:	b2db      	uxtb	r3, r3
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	2b09      	cmp	r3, #9
 800a428:	d113      	bne.n	800a452 <_ZN3jlb12SignalSender14measurements_2Ev+0x614>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a430:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a434:	ee07 3a90 	vmov	s15, r3
 800a438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a43c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a440:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a448:	edc7 7a00 	vstr	s15, [r7]
 800a44c:	783b      	ldrb	r3, [r7, #0]
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	e00e      	b.n	800a470 <_ZN3jlb12SignalSender14measurements_2Ev+0x632>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a458:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a45c:	ee07 3a90 	vmov	s15, r3
 800a460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a468:	edc7 7a00 	vstr	s15, [r7]
 800a46c:	783b      	ldrb	r3, [r7, #0]
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
            jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	2b0a      	cmp	r3, #10
 800a480:	d113      	bne.n	800a4aa <_ZN3jlb12SignalSender14measurements_2Ev+0x66c>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a488:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800a48c:	ee07 3a90 	vmov	s15, r3
 800a490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a494:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a498:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a49c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4a0:	edc7 7a00 	vstr	s15, [r7]
 800a4a4:	783b      	ldrb	r3, [r7, #0]
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	e00e      	b.n	800a4c8 <_ZN3jlb12SignalSender14measurements_2Ev+0x68a>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a4b0:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800a4b4:	ee07 3a90 	vmov	s15, r3
 800a4b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4c0:	edc7 7a00 	vstr	s15, [r7]
 800a4c4:	783b      	ldrb	r3, [r7, #0]
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	2b0b      	cmp	r3, #11
 800a4d8:	d113      	bne.n	800a502 <_ZN3jlb12SignalSender14measurements_2Ev+0x6c4>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a4e0:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800a4e4:	ee07 3a90 	vmov	s15, r3
 800a4e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4ec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a4f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4f8:	edc7 7a00 	vstr	s15, [r7]
 800a4fc:	783b      	ldrb	r3, [r7, #0]
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	e00e      	b.n	800a520 <_ZN3jlb12SignalSender14measurements_2Ev+0x6e2>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a508:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800a50c:	ee07 3a90 	vmov	s15, r3
 800a510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a518:	edc7 7a00 	vstr	s15, [r7]
 800a51c:	783b      	ldrb	r3, [r7, #0]
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	2b0c      	cmp	r3, #12
 800a530:	d113      	bne.n	800a55a <_ZN3jlb12SignalSender14measurements_2Ev+0x71c>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a538:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a53c:	ee07 3a90 	vmov	s15, r3
 800a540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a544:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a548:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a54c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a550:	edc7 7a00 	vstr	s15, [r7]
 800a554:	783b      	ldrb	r3, [r7, #0]
 800a556:	b2db      	uxtb	r3, r3
 800a558:	e00e      	b.n	800a578 <_ZN3jlb12SignalSender14measurements_2Ev+0x73a>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a560:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a564:	ee07 3a90 	vmov	s15, r3
 800a568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a56c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a570:	edc7 7a00 	vstr	s15, [r7]
 800a574:	783b      	ldrb	r3, [r7, #0]
 800a576:	b2db      	uxtb	r3, r3
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
            jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	2b0d      	cmp	r3, #13
 800a588:	d113      	bne.n	800a5b2 <_ZN3jlb12SignalSender14measurements_2Ev+0x774>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a590:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a594:	ee07 3a90 	vmov	s15, r3
 800a598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a59c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a5a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5a8:	edc7 7a00 	vstr	s15, [r7]
 800a5ac:	783b      	ldrb	r3, [r7, #0]
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	e00e      	b.n	800a5d0 <_ZN3jlb12SignalSender14measurements_2Ev+0x792>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a5b8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a5bc:	ee07 3a90 	vmov	s15, r3
 800a5c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5c8:	edc7 7a00 	vstr	s15, [r7]
 800a5cc:	783b      	ldrb	r3, [r7, #0]
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
            jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	2b0e      	cmp	r3, #14
 800a5e0:	d113      	bne.n	800a60a <_ZN3jlb12SignalSender14measurements_2Ev+0x7cc>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a5e8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a5ec:	ee07 3a90 	vmov	s15, r3
 800a5f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5f4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a5f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a600:	edc7 7a00 	vstr	s15, [r7]
 800a604:	783b      	ldrb	r3, [r7, #0]
 800a606:	b2db      	uxtb	r3, r3
 800a608:	e00e      	b.n	800a628 <_ZN3jlb12SignalSender14measurements_2Ev+0x7ea>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a610:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a614:	ee07 3a90 	vmov	s15, r3
 800a618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a61c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a620:	edc7 7a00 	vstr	s15, [r7]
 800a624:	783b      	ldrb	r3, [r7, #0]
 800a626:	b2db      	uxtb	r3, r3
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
            jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	2b0f      	cmp	r3, #15
 800a638:	d113      	bne.n	800a662 <_ZN3jlb12SignalSender14measurements_2Ev+0x824>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a640:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800a644:	ee07 3a90 	vmov	s15, r3
 800a648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a64c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a650:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a658:	edc7 7a00 	vstr	s15, [r7]
 800a65c:	783b      	ldrb	r3, [r7, #0]
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	e00e      	b.n	800a680 <_ZN3jlb12SignalSender14measurements_2Ev+0x842>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a668:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800a66c:	ee07 3a90 	vmov	s15, r3
 800a670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a678:	edc7 7a00 	vstr	s15, [r7]
 800a67c:	783b      	ldrb	r3, [r7, #0]
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
            jlb_rx.measurements_2.line_sensor_17 = 16 == controller.selected_rear ? controller.detection_rear[16] + 2.0f : controller.detection_rear[16];
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	2b10      	cmp	r3, #16
 800a690:	d113      	bne.n	800a6ba <_ZN3jlb12SignalSender14measurements_2Ev+0x87c>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a698:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a69c:	ee07 3a90 	vmov	s15, r3
 800a6a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6a4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a6a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6b0:	edc7 7a00 	vstr	s15, [r7]
 800a6b4:	783b      	ldrb	r3, [r7, #0]
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	e00e      	b.n	800a6d8 <_ZN3jlb12SignalSender14measurements_2Ev+0x89a>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a6c0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a6c4:	ee07 3a90 	vmov	s15, r3
 800a6c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6d0:	edc7 7a00 	vstr	s15, [r7]
 800a6d4:	783b      	ldrb	r3, [r7, #0]
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
            jlb_rx.measurements_2.line_sensor_18 = 17 == controller.selected_rear ? controller.detection_rear[17] + 2.0f : controller.detection_rear[17];
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	2b11      	cmp	r3, #17
 800a6e8:	d113      	bne.n	800a712 <_ZN3jlb12SignalSender14measurements_2Ev+0x8d4>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a6f0:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800a6f4:	ee07 3a90 	vmov	s15, r3
 800a6f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6fc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a700:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a708:	edc7 7a00 	vstr	s15, [r7]
 800a70c:	783b      	ldrb	r3, [r7, #0]
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	e00e      	b.n	800a730 <_ZN3jlb12SignalSender14measurements_2Ev+0x8f2>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a718:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800a71c:	ee07 3a90 	vmov	s15, r3
 800a720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a728:	edc7 7a00 	vstr	s15, [r7]
 800a72c:	783b      	ldrb	r3, [r7, #0]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
            jlb_rx.measurements_2.line_sensor_19 = 18 == controller.selected_rear ? controller.detection_rear[18] + 2.0f : controller.detection_rear[18];
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	2b12      	cmp	r3, #18
 800a740:	d113      	bne.n	800a76a <_ZN3jlb12SignalSender14measurements_2Ev+0x92c>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a748:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800a74c:	ee07 3a90 	vmov	s15, r3
 800a750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a754:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a758:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a75c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a760:	edc7 7a00 	vstr	s15, [r7]
 800a764:	783b      	ldrb	r3, [r7, #0]
 800a766:	b2db      	uxtb	r3, r3
 800a768:	e00e      	b.n	800a788 <_ZN3jlb12SignalSender14measurements_2Ev+0x94a>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a770:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800a774:	ee07 3a90 	vmov	s15, r3
 800a778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a77c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a780:	edc7 7a00 	vstr	s15, [r7]
 800a784:	783b      	ldrb	r3, [r7, #0]
 800a786:	b2db      	uxtb	r3, r3
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
            jlb_rx.measurements_2.line_sensor_20 = 19 == controller.selected_rear ? controller.detection_rear[19] + 2.0f : controller.detection_rear[19];
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	2b13      	cmp	r3, #19
 800a798:	d113      	bne.n	800a7c2 <_ZN3jlb12SignalSender14measurements_2Ev+0x984>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a7a0:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800a7a4:	ee07 3a90 	vmov	s15, r3
 800a7a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7ac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a7b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a7b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7b8:	edc7 7a00 	vstr	s15, [r7]
 800a7bc:	783b      	ldrb	r3, [r7, #0]
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	e00e      	b.n	800a7e0 <_ZN3jlb12SignalSender14measurements_2Ev+0x9a2>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a7c8:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800a7cc:	ee07 3a90 	vmov	s15, r3
 800a7d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7d8:	edc7 7a00 	vstr	s15, [r7]
 800a7dc:	783b      	ldrb	r3, [r7, #0]
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
            jlb_rx.measurements_2.line_sensor_21 = 20 == controller.selected_rear ? controller.detection_rear[20] + 2.0f : controller.detection_rear[20];
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	2b14      	cmp	r3, #20
 800a7f0:	d113      	bne.n	800a81a <_ZN3jlb12SignalSender14measurements_2Ev+0x9dc>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a7f8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800a7fc:	ee07 3a90 	vmov	s15, r3
 800a800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a804:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a808:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a80c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a810:	edc7 7a00 	vstr	s15, [r7]
 800a814:	783b      	ldrb	r3, [r7, #0]
 800a816:	b2db      	uxtb	r3, r3
 800a818:	e00e      	b.n	800a838 <_ZN3jlb12SignalSender14measurements_2Ev+0x9fa>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a820:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800a824:	ee07 3a90 	vmov	s15, r3
 800a828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a82c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a830:	edc7 7a00 	vstr	s15, [r7]
 800a834:	783b      	ldrb	r3, [r7, #0]
 800a836:	b2db      	uxtb	r3, r3
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
            jlb_rx.measurements_2.line_sensor_22 = 21 == controller.selected_rear ? controller.detection_rear[21] + 2.0f : controller.detection_rear[21];
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	2b15      	cmp	r3, #21
 800a848:	d113      	bne.n	800a872 <_ZN3jlb12SignalSender14measurements_2Ev+0xa34>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a850:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800a854:	ee07 3a90 	vmov	s15, r3
 800a858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a85c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a860:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a868:	edc7 7a00 	vstr	s15, [r7]
 800a86c:	783b      	ldrb	r3, [r7, #0]
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	e00e      	b.n	800a890 <_ZN3jlb12SignalSender14measurements_2Ev+0xa52>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a878:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800a87c:	ee07 3a90 	vmov	s15, r3
 800a880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a888:	edc7 7a00 	vstr	s15, [r7]
 800a88c:	783b      	ldrb	r3, [r7, #0]
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
            jlb_rx.measurements_2.line_sensor_23 = 22 == controller.selected_rear ? controller.detection_rear[22] + 2.0f : controller.detection_rear[22];
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	2b16      	cmp	r3, #22
 800a8a0:	d113      	bne.n	800a8ca <_ZN3jlb12SignalSender14measurements_2Ev+0xa8c>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a8a8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800a8ac:	ee07 3a90 	vmov	s15, r3
 800a8b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8b4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a8b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8c0:	edc7 7a00 	vstr	s15, [r7]
 800a8c4:	783b      	ldrb	r3, [r7, #0]
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	e00e      	b.n	800a8e8 <_ZN3jlb12SignalSender14measurements_2Ev+0xaaa>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a8d0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800a8d4:	ee07 3a90 	vmov	s15, r3
 800a8d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8e0:	edc7 7a00 	vstr	s15, [r7]
 800a8e4:	783b      	ldrb	r3, [r7, #0]
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
            jlb_rx.measurements_2.line_sensor_24 = 23 == controller.selected_rear ? controller.detection_rear[23] + 2.0f : controller.detection_rear[23];
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	2b17      	cmp	r3, #23
 800a8f8:	d113      	bne.n	800a922 <_ZN3jlb12SignalSender14measurements_2Ev+0xae4>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a900:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800a904:	ee07 3a90 	vmov	s15, r3
 800a908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a90c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a910:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a918:	edc7 7a00 	vstr	s15, [r7]
 800a91c:	783b      	ldrb	r3, [r7, #0]
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	e00e      	b.n	800a940 <_ZN3jlb12SignalSender14measurements_2Ev+0xb02>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a928:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800a92c:	ee07 3a90 	vmov	s15, r3
 800a930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a938:	edc7 7a00 	vstr	s15, [r7]
 800a93c:	783b      	ldrb	r3, [r7, #0]
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
            jlb_rx.measurements_2.line_sensor_25 = 24 == controller.selected_rear ? controller.detection_rear[24] + 2.0f : controller.detection_rear[24];
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	2b18      	cmp	r3, #24
 800a950:	d113      	bne.n	800a97a <_ZN3jlb12SignalSender14measurements_2Ev+0xb3c>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a958:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800a95c:	ee07 3a90 	vmov	s15, r3
 800a960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a964:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a968:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a96c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a970:	edc7 7a00 	vstr	s15, [r7]
 800a974:	783b      	ldrb	r3, [r7, #0]
 800a976:	b2db      	uxtb	r3, r3
 800a978:	e00e      	b.n	800a998 <_ZN3jlb12SignalSender14measurements_2Ev+0xb5a>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a980:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800a984:	ee07 3a90 	vmov	s15, r3
 800a988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a98c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a990:	edc7 7a00 	vstr	s15, [r7]
 800a994:	783b      	ldrb	r3, [r7, #0]
 800a996:	b2db      	uxtb	r3, r3
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            jlb_rx.measurements_2.line_sensor_26 = 25 == controller.selected_rear ? controller.detection_rear[25] + 2.0f : controller.detection_rear[25];
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	2b19      	cmp	r3, #25
 800a9a8:	d113      	bne.n	800a9d2 <_ZN3jlb12SignalSender14measurements_2Ev+0xb94>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a9b0:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800a9b4:	ee07 3a90 	vmov	s15, r3
 800a9b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a9c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a9c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9c8:	edc7 7a00 	vstr	s15, [r7]
 800a9cc:	783b      	ldrb	r3, [r7, #0]
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	e00e      	b.n	800a9f0 <_ZN3jlb12SignalSender14measurements_2Ev+0xbb2>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a9d8:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800a9dc:	ee07 3a90 	vmov	s15, r3
 800a9e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9e8:	edc7 7a00 	vstr	s15, [r7]
 800a9ec:	783b      	ldrb	r3, [r7, #0]
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
            jlb_rx.measurements_2.line_sensor_27 = 26 == controller.selected_rear ? controller.detection_rear[26] + 2.0f : controller.detection_rear[26];
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	2b1a      	cmp	r3, #26
 800aa00:	d113      	bne.n	800aa2a <_ZN3jlb12SignalSender14measurements_2Ev+0xbec>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa08:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800aa0c:	ee07 3a90 	vmov	s15, r3
 800aa10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa14:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aa18:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa20:	edc7 7a00 	vstr	s15, [r7]
 800aa24:	783b      	ldrb	r3, [r7, #0]
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	e00e      	b.n	800aa48 <_ZN3jlb12SignalSender14measurements_2Ev+0xc0a>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa30:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800aa34:	ee07 3a90 	vmov	s15, r3
 800aa38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa40:	edc7 7a00 	vstr	s15, [r7]
 800aa44:	783b      	ldrb	r3, [r7, #0]
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
            jlb_rx.measurements_2.line_sensor_28 = 27 == controller.selected_rear ? controller.detection_rear[27] + 2.0f : controller.detection_rear[27];
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	2b1b      	cmp	r3, #27
 800aa58:	d113      	bne.n	800aa82 <_ZN3jlb12SignalSender14measurements_2Ev+0xc44>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa60:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800aa64:	ee07 3a90 	vmov	s15, r3
 800aa68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aa70:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa78:	edc7 7a00 	vstr	s15, [r7]
 800aa7c:	783b      	ldrb	r3, [r7, #0]
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	e00e      	b.n	800aaa0 <_ZN3jlb12SignalSender14measurements_2Ev+0xc62>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa88:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800aa8c:	ee07 3a90 	vmov	s15, r3
 800aa90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa98:	edc7 7a00 	vstr	s15, [r7]
 800aa9c:	783b      	ldrb	r3, [r7, #0]
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	f882 303b 	strb.w	r3, [r2, #59]	; 0x3b
            jlb_rx.measurements_2.line_sensor_29 = 28 == controller.selected_rear ? controller.detection_rear[28] + 2.0f : controller.detection_rear[28];
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	2b1c      	cmp	r3, #28
 800aab0:	d113      	bne.n	800aada <_ZN3jlb12SignalSender14measurements_2Ev+0xc9c>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aab8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800aabc:	ee07 3a90 	vmov	s15, r3
 800aac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aac4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aac8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aacc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aad0:	edc7 7a00 	vstr	s15, [r7]
 800aad4:	783b      	ldrb	r3, [r7, #0]
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	e00e      	b.n	800aaf8 <_ZN3jlb12SignalSender14measurements_2Ev+0xcba>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aae0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800aae4:	ee07 3a90 	vmov	s15, r3
 800aae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaf0:	edc7 7a00 	vstr	s15, [r7]
 800aaf4:	783b      	ldrb	r3, [r7, #0]
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
            jlb_rx.measurements_2.line_sensor_30 = 29 == controller.selected_rear ? controller.detection_rear[29] + 2.0f : controller.detection_rear[29];
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	2b1d      	cmp	r3, #29
 800ab08:	d113      	bne.n	800ab32 <_ZN3jlb12SignalSender14measurements_2Ev+0xcf4>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab10:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800ab14:	ee07 3a90 	vmov	s15, r3
 800ab18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab1c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ab20:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab28:	edc7 7a00 	vstr	s15, [r7]
 800ab2c:	783b      	ldrb	r3, [r7, #0]
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	e00e      	b.n	800ab50 <_ZN3jlb12SignalSender14measurements_2Ev+0xd12>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab38:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800ab3c:	ee07 3a90 	vmov	s15, r3
 800ab40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab48:	edc7 7a00 	vstr	s15, [r7]
 800ab4c:	783b      	ldrb	r3, [r7, #0]
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
            jlb_rx.measurements_2.line_sensor_31 = 30 == controller.selected_rear ? controller.detection_rear[30] + 2.0f : controller.detection_rear[30];
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	2b1e      	cmp	r3, #30
 800ab60:	d113      	bne.n	800ab8a <_ZN3jlb12SignalSender14measurements_2Ev+0xd4c>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab68:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800ab6c:	ee07 3a90 	vmov	s15, r3
 800ab70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab74:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ab78:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab80:	edc7 7a00 	vstr	s15, [r7]
 800ab84:	783b      	ldrb	r3, [r7, #0]
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	e00e      	b.n	800aba8 <_ZN3jlb12SignalSender14measurements_2Ev+0xd6a>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab90:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800ab94:	ee07 3a90 	vmov	s15, r3
 800ab98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aba0:	edc7 7a00 	vstr	s15, [r7]
 800aba4:	783b      	ldrb	r3, [r7, #0]
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
            jlb_rx.measurements_2.line_sensor_32 = 31 == controller.selected_rear ? controller.detection_rear[31] + 2.0f : controller.detection_rear[31];
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	2b1f      	cmp	r3, #31
 800abb8:	d113      	bne.n	800abe2 <_ZN3jlb12SignalSender14measurements_2Ev+0xda4>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800abc0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800abc4:	ee07 3a90 	vmov	s15, r3
 800abc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abcc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800abd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abd8:	edc7 7a00 	vstr	s15, [r7]
 800abdc:	783b      	ldrb	r3, [r7, #0]
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	e00e      	b.n	800ac00 <_ZN3jlb12SignalSender14measurements_2Ev+0xdc2>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800abe8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800abec:	ee07 3a90 	vmov	s15, r3
 800abf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abf8:	edc7 7a00 	vstr	s15, [r7]
 800abfc:	783b      	ldrb	r3, [r7, #0]
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
#endif

            char    data[measurements_2_DLC + 2] = {0};
 800ac06:	2300      	movs	r3, #0
 800ac08:	60fb      	str	r3, [r7, #12]
 800ac0a:	f107 0310 	add.w	r3, r7, #16
 800ac0e:	2200      	movs	r2, #0
 800ac10:	601a      	str	r2, [r3, #0]
 800ac12:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_2_IDE;
 800ac14:	2300      	movs	r3, #0
 800ac16:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_2_DLC;
 800ac18:	2308      	movs	r3, #8
 800ac1a:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_2_CANID;
 800ac1c:	2302      	movs	r3, #2
 800ac1e:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_2_DLC;
 800ac20:	2308      	movs	r3, #8
 800ac22:	737b      	strb	r3, [r7, #13]
            Pack_measurements_2_jlb(&jlb_rx.measurements_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f103 0020 	add.w	r0, r3, #32
 800ac2a:	f107 010c 	add.w	r1, r7, #12
 800ac2e:	3102      	adds	r1, #2
 800ac30:	f107 030b 	add.w	r3, r7, #11
 800ac34:	f107 020a 	add.w	r2, r7, #10
 800ac38:	f7f6 fac8 	bl	80011cc <Pack_measurements_2_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_2_DLC + 2);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f001 faec 	bl	800c226 <_ZNSt6vectorIcSaIcEE3endEv>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	61fb      	str	r3, [r7, #28]
 800ac52:	f107 021c 	add.w	r2, r7, #28
 800ac56:	f107 0318 	add.w	r3, r7, #24
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f001 fb73 	bl	800c348 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800ac62:	f107 030c 	add.w	r3, r7, #12
 800ac66:	330a      	adds	r3, #10
 800ac68:	f107 020c 	add.w	r2, r7, #12
 800ac6c:	69b9      	ldr	r1, [r7, #24]
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f001 fb7b 	bl	800c36a <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800ac74:	bf00      	nop
 800ac76:	3724      	adds	r7, #36	; 0x24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd90      	pop	{r4, r7, pc}

0800ac7c <_ZN3jlb12SignalSender14measurements_3Ev>:

        void measurements_3()
 800ac7c:	b590      	push	{r4, r7, lr}
 800ac7e:	b089      	sub	sp, #36	; 0x24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_3.angular_velocity_x_phys = odometry.meas_ang_vel_x;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800ac8a:	69db      	ldr	r3, [r3, #28]
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7f5 fc4d 	bl	800052c <__aeabi_f2d>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	6879      	ldr	r1, [r7, #4]
 800ac98:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
            jlb_rx.measurements_3.angular_velocity_y_phys = odometry.meas_ang_vel_y;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800aca2:	6a1b      	ldr	r3, [r3, #32]
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7f5 fc41 	bl	800052c <__aeabi_f2d>
 800acaa:	4602      	mov	r2, r0
 800acac:	460b      	mov	r3, r1
 800acae:	6879      	ldr	r1, [r7, #4]
 800acb0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
            jlb_rx.measurements_3.angular_velocity_z_phys = odometry.meas_ang_vel_z;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7f5 fc35 	bl	800052c <__aeabi_f2d>
 800acc2:	4602      	mov	r2, r0
 800acc4:	460b      	mov	r3, r1
 800acc6:	6879      	ldr	r1, [r7, #4]
 800acc8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

            char    data[measurements_2_DLC + 2] = {0};
 800accc:	2300      	movs	r3, #0
 800acce:	60fb      	str	r3, [r7, #12]
 800acd0:	f107 0310 	add.w	r3, r7, #16
 800acd4:	2200      	movs	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]
 800acd8:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_3_IDE;
 800acda:	2300      	movs	r3, #0
 800acdc:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_3_DLC;
 800acde:	2308      	movs	r3, #8
 800ace0:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_3_CANID;
 800ace2:	2303      	movs	r3, #3
 800ace4:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_3_DLC;
 800ace6:	2308      	movs	r3, #8
 800ace8:	737b      	strb	r3, [r7, #13]
            Pack_measurements_3_jlb(&jlb_rx.measurements_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800acf0:	f107 010c 	add.w	r1, r7, #12
 800acf4:	3102      	adds	r1, #2
 800acf6:	f107 030b 	add.w	r3, r7, #11
 800acfa:	f107 020a 	add.w	r2, r7, #10
 800acfe:	f7f6 fbaf 	bl	8001460 <Pack_measurements_3_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_3_DLC + 2);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f001 fa89 	bl	800c226 <_ZNSt6vectorIcSaIcEE3endEv>
 800ad14:	4603      	mov	r3, r0
 800ad16:	61fb      	str	r3, [r7, #28]
 800ad18:	f107 021c 	add.w	r2, r7, #28
 800ad1c:	f107 0318 	add.w	r3, r7, #24
 800ad20:	4611      	mov	r1, r2
 800ad22:	4618      	mov	r0, r3
 800ad24:	f001 fb10 	bl	800c348 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800ad28:	f107 030c 	add.w	r3, r7, #12
 800ad2c:	330a      	adds	r3, #10
 800ad2e:	f107 020c 	add.w	r2, r7, #12
 800ad32:	69b9      	ldr	r1, [r7, #24]
 800ad34:	4620      	mov	r0, r4
 800ad36:	f001 fb18 	bl	800c36a <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800ad3a:	bf00      	nop
 800ad3c:	3724      	adds	r7, #36	; 0x24
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd90      	pop	{r4, r7, pc}

0800ad42 <_ZN3jlb12SignalSender14measurements_4Ev>:

        void measurements_4()
 800ad42:	b590      	push	{r4, r7, lr}
 800ad44:	b089      	sub	sp, #36	; 0x24
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_4.linear_acceleration_x_phys = odometry.meas_lin_acc_x;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800ad50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7f5 fbea 	bl	800052c <__aeabi_f2d>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	6879      	ldr	r1, [r7, #4]
 800ad5e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
            jlb_rx.measurements_4.linear_acceleration_y_phys = odometry.meas_lin_acc_y;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800ad68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7f5 fbde 	bl	800052c <__aeabi_f2d>
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	6879      	ldr	r1, [r7, #4]
 800ad76:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
            jlb_rx.measurements_4.linear_acceleration_z_phys = odometry.meas_lin_acc_z;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800ad80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7f5 fbd2 	bl	800052c <__aeabi_f2d>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	6879      	ldr	r1, [r7, #4]
 800ad8e:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

            char    data[measurements_3_DLC + 2] = {0};
 800ad92:	2300      	movs	r3, #0
 800ad94:	60fb      	str	r3, [r7, #12]
 800ad96:	f107 0310 	add.w	r3, r7, #16
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	601a      	str	r2, [r3, #0]
 800ad9e:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_4_IDE;
 800ada0:	2300      	movs	r3, #0
 800ada2:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_4_DLC;
 800ada4:	2308      	movs	r3, #8
 800ada6:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_4_CANID;
 800ada8:	2304      	movs	r3, #4
 800adaa:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_4_DLC;
 800adac:	2308      	movs	r3, #8
 800adae:	737b      	strb	r3, [r7, #13]
            Pack_measurements_4_jlb(&jlb_rx.measurements_4, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800adb6:	f107 010c 	add.w	r1, r7, #12
 800adba:	3102      	adds	r1, #2
 800adbc:	f107 030b 	add.w	r3, r7, #11
 800adc0:	f107 020a 	add.w	r2, r7, #10
 800adc4:	f7f6 fc0c 	bl	80015e0 <Pack_measurements_4_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_4_DLC + 2);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800add4:	4618      	mov	r0, r3
 800add6:	f001 fa26 	bl	800c226 <_ZNSt6vectorIcSaIcEE3endEv>
 800adda:	4603      	mov	r3, r0
 800addc:	61fb      	str	r3, [r7, #28]
 800adde:	f107 021c 	add.w	r2, r7, #28
 800ade2:	f107 0318 	add.w	r3, r7, #24
 800ade6:	4611      	mov	r1, r2
 800ade8:	4618      	mov	r0, r3
 800adea:	f001 faad 	bl	800c348 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800adee:	f107 030c 	add.w	r3, r7, #12
 800adf2:	330a      	adds	r3, #10
 800adf4:	f107 020c 	add.w	r2, r7, #12
 800adf8:	69b9      	ldr	r1, [r7, #24]
 800adfa:	4620      	mov	r0, r4
 800adfc:	f001 fab5 	bl	800c36a <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800ae00:	bf00      	nop
 800ae02:	3724      	adds	r7, #36	; 0x24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd90      	pop	{r4, r7, pc}

0800ae08 <_ZN3jlb12SignalSender14measurements_5Ev>:

        void measurements_5()
 800ae08:	b590      	push	{r4, r7, lr}
 800ae0a:	b089      	sub	sp, #36	; 0x24
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_5.duty_cycle_phys    = measurements.duty_cycle;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7f5 fb87 	bl	800052c <__aeabi_f2d>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	6879      	ldr	r1, [r7, #4]
 800ae24:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
            jlb_rx.measurements_5.motor_current_phys = measurements.motor_current;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7f5 fb7b 	bl	800052c <__aeabi_f2d>
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	6879      	ldr	r1, [r7, #4]
 800ae3c:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
            jlb_rx.measurements_5.object_range_phys  = measurements.object_range;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7f5 fb6f 	bl	800052c <__aeabi_f2d>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	6879      	ldr	r1, [r7, #4]
 800ae54:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
            jlb_rx.measurements_5.wheel_rpm_phys     = measurements.wheel_rpm;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7f5 fb63 	bl	800052c <__aeabi_f2d>
 800ae66:	4602      	mov	r2, r0
 800ae68:	460b      	mov	r3, r1
 800ae6a:	6879      	ldr	r1, [r7, #4]
 800ae6c:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8

            char    data[measurements_4_DLC + 2] = {0};
 800ae70:	2300      	movs	r3, #0
 800ae72:	60fb      	str	r3, [r7, #12]
 800ae74:	f107 0310 	add.w	r3, r7, #16
 800ae78:	2200      	movs	r2, #0
 800ae7a:	601a      	str	r2, [r3, #0]
 800ae7c:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_5_IDE;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_5_DLC;
 800ae82:	2308      	movs	r3, #8
 800ae84:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_5_CANID;
 800ae86:	2305      	movs	r3, #5
 800ae88:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_5_DLC;
 800ae8a:	2308      	movs	r3, #8
 800ae8c:	737b      	strb	r3, [r7, #13]
            Pack_measurements_5_jlb(&jlb_rx.measurements_5, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800ae94:	f107 010c 	add.w	r1, r7, #12
 800ae98:	3102      	adds	r1, #2
 800ae9a:	f107 030b 	add.w	r3, r7, #11
 800ae9e:	f107 020a 	add.w	r2, r7, #10
 800aea2:	f7f6 fc5d 	bl	8001760 <Pack_measurements_5_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_5_DLC + 2);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f001 f9b7 	bl	800c226 <_ZNSt6vectorIcSaIcEE3endEv>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	61fb      	str	r3, [r7, #28]
 800aebc:	f107 021c 	add.w	r2, r7, #28
 800aec0:	f107 0318 	add.w	r3, r7, #24
 800aec4:	4611      	mov	r1, r2
 800aec6:	4618      	mov	r0, r3
 800aec8:	f001 fa3e 	bl	800c348 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800aecc:	f107 030c 	add.w	r3, r7, #12
 800aed0:	330a      	adds	r3, #10
 800aed2:	f107 020c 	add.w	r2, r7, #12
 800aed6:	69b9      	ldr	r1, [r7, #24]
 800aed8:	4620      	mov	r0, r4
 800aeda:	f001 fa46 	bl	800c36a <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800aede:	bf00      	nop
 800aee0:	3724      	adds	r7, #36	; 0x24
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd90      	pop	{r4, r7, pc}

0800aee6 <_ZN3jlb12SignalSender10odometry_1Ev>:

        void odometry_1()
 800aee6:	b590      	push	{r4, r7, lr}
 800aee8:	b089      	sub	sp, #36	; 0x24
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.odometry_1.position_x_phys  = odometry.x_t;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7f5 fb18 	bl	800052c <__aeabi_f2d>
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	6879      	ldr	r1, [r7, #4]
 800af02:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
            jlb_rx.odometry_1.position_y_phys  = odometry.y_t;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	4618      	mov	r0, r3
 800af10:	f7f5 fb0c 	bl	800052c <__aeabi_f2d>
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	6879      	ldr	r1, [r7, #4]
 800af1a:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
            jlb_rx.odometry_1.orientation_phys = odometry.theta_t;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	4618      	mov	r0, r3
 800af28:	f7f5 fb00 	bl	800052c <__aeabi_f2d>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	6879      	ldr	r1, [r7, #4]
 800af32:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8

            char    data[odometry_1_DLC + 2] = {0};
 800af36:	2300      	movs	r3, #0
 800af38:	60fb      	str	r3, [r7, #12]
 800af3a:	f107 0310 	add.w	r3, r7, #16
 800af3e:	2200      	movs	r2, #0
 800af40:	601a      	str	r2, [r3, #0]
 800af42:	809a      	strh	r2, [r3, #4]
            uint8_t ide                      = odometry_1_IDE;
 800af44:	2300      	movs	r3, #0
 800af46:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                      = odometry_1_DLC;
 800af48:	2308      	movs	r3, #8
 800af4a:	72bb      	strb	r3, [r7, #10]
            data[0]                          = odometry_1_CANID;
 800af4c:	2311      	movs	r3, #17
 800af4e:	733b      	strb	r3, [r7, #12]
            data[1]                          = odometry_1_DLC;
 800af50:	2308      	movs	r3, #8
 800af52:	737b      	strb	r3, [r7, #13]
            Pack_odometry_1_jlb(&jlb_rx.odometry_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 800af5a:	f107 010c 	add.w	r1, r7, #12
 800af5e:	3102      	adds	r1, #2
 800af60:	f107 030b 	add.w	r3, r7, #11
 800af64:	f107 020a 	add.w	r2, r7, #10
 800af68:	f7f6 fcde 	bl	8001928 <Pack_odometry_1_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + odometry_1_DLC + 2);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800af78:	4618      	mov	r0, r3
 800af7a:	f001 f954 	bl	800c226 <_ZNSt6vectorIcSaIcEE3endEv>
 800af7e:	4603      	mov	r3, r0
 800af80:	61fb      	str	r3, [r7, #28]
 800af82:	f107 021c 	add.w	r2, r7, #28
 800af86:	f107 0318 	add.w	r3, r7, #24
 800af8a:	4611      	mov	r1, r2
 800af8c:	4618      	mov	r0, r3
 800af8e:	f001 f9db 	bl	800c348 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800af92:	f107 030c 	add.w	r3, r7, #12
 800af96:	330a      	adds	r3, #10
 800af98:	f107 020c 	add.w	r2, r7, #12
 800af9c:	69b9      	ldr	r1, [r7, #24]
 800af9e:	4620      	mov	r0, r4
 800afa0:	f001 f9e3 	bl	800c36a <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800afa4:	bf00      	nop
 800afa6:	3724      	adds	r7, #36	; 0x24
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd90      	pop	{r4, r7, pc}

0800afac <_ZN3jlb12SignalSender10odometry_2Ev>:

        void odometry_2()
 800afac:	b590      	push	{r4, r7, lr}
 800afae:	b089      	sub	sp, #36	; 0x24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.odometry_2.linear_velocity_x_phys  = odometry.vx_t;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7f5 fab5 	bl	800052c <__aeabi_f2d>
 800afc2:	4602      	mov	r2, r0
 800afc4:	460b      	mov	r3, r1
 800afc6:	6879      	ldr	r1, [r7, #4]
 800afc8:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128
            jlb_rx.odometry_2.angular_velocity_z_phys = odometry.w_t;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7f5 faa9 	bl	800052c <__aeabi_f2d>
 800afda:	4602      	mov	r2, r0
 800afdc:	460b      	mov	r3, r1
 800afde:	6879      	ldr	r1, [r7, #4]
 800afe0:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118

            char    data[odometry_2_DLC + 2] = {0};
 800afe4:	2300      	movs	r3, #0
 800afe6:	60fb      	str	r3, [r7, #12]
 800afe8:	f107 0310 	add.w	r3, r7, #16
 800afec:	2200      	movs	r2, #0
 800afee:	601a      	str	r2, [r3, #0]
 800aff0:	809a      	strh	r2, [r3, #4]
            uint8_t ide                      = odometry_2_IDE;
 800aff2:	2300      	movs	r3, #0
 800aff4:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                      = odometry_2_DLC;
 800aff6:	2308      	movs	r3, #8
 800aff8:	72bb      	strb	r3, [r7, #10]
            data[0]                          = odometry_2_CANID;
 800affa:	2312      	movs	r3, #18
 800affc:	733b      	strb	r3, [r7, #12]
            data[1]                          = odometry_2_DLC;
 800affe:	2308      	movs	r3, #8
 800b000:	737b      	strb	r3, [r7, #13]
            Pack_odometry_2_jlb(&jlb_rx.odometry_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f503 7088 	add.w	r0, r3, #272	; 0x110
 800b008:	f107 010c 	add.w	r1, r7, #12
 800b00c:	3102      	adds	r1, #2
 800b00e:	f107 030b 	add.w	r3, r7, #11
 800b012:	f107 020a 	add.w	r2, r7, #10
 800b016:	f7f6 fd4f 	bl	8001ab8 <Pack_odometry_2_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + odometry_2_DLC + 2);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b026:	4618      	mov	r0, r3
 800b028:	f001 f8fd 	bl	800c226 <_ZNSt6vectorIcSaIcEE3endEv>
 800b02c:	4603      	mov	r3, r0
 800b02e:	61fb      	str	r3, [r7, #28]
 800b030:	f107 021c 	add.w	r2, r7, #28
 800b034:	f107 0318 	add.w	r3, r7, #24
 800b038:	4611      	mov	r1, r2
 800b03a:	4618      	mov	r0, r3
 800b03c:	f001 f984 	bl	800c348 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b040:	f107 030c 	add.w	r3, r7, #12
 800b044:	330a      	adds	r3, #10
 800b046:	f107 020c 	add.w	r2, r7, #12
 800b04a:	69b9      	ldr	r1, [r7, #24]
 800b04c:	4620      	mov	r0, r4
 800b04e:	f001 f98c 	bl	800c36a <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b052:	bf00      	nop
 800b054:	3724      	adds	r7, #36	; 0x24
 800b056:	46bd      	mov	sp, r7
 800b058:	bd90      	pop	{r4, r7, pc}

0800b05a <_ZN3jlb12SignalSender7logic_1Ev>:

        void logic_1()
 800b05a:	b590      	push	{r4, r7, lr}
 800b05c:	b089      	sub	sp, #36	; 0x24
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.logic_1.target_angle_phys      = controller.target_angle;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b068:	699b      	ldr	r3, [r3, #24]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7f5 fa5e 	bl	800052c <__aeabi_f2d>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	6879      	ldr	r1, [r7, #4]
 800b076:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
            jlb_rx.logic_1.target_speed_phys      = controller.target_speed;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b080:	69db      	ldr	r3, [r3, #28]
 800b082:	4618      	mov	r0, r3
 800b084:	f7f5 fa52 	bl	800052c <__aeabi_f2d>
 800b088:	4602      	mov	r2, r0
 800b08a:	460b      	mov	r3, r1
 800b08c:	6879      	ldr	r1, [r7, #4]
 800b08e:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
            jlb_rx.logic_1.cross_track_error_phys = controller.cross_track_error;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b098:	6a1b      	ldr	r3, [r3, #32]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7f5 fa46 	bl	800052c <__aeabi_f2d>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	6879      	ldr	r1, [r7, #4]
 800b0a6:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
            jlb_rx.logic_1.heading_error_phys     = controller.heading_error;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7f5 fa3a 	bl	800052c <__aeabi_f2d>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	6879      	ldr	r1, [r7, #4]
 800b0be:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168

            char    data[logic_1_DLC + 2] = {0};
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	60fb      	str	r3, [r7, #12]
 800b0c6:	f107 0310 	add.w	r3, r7, #16
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	809a      	strh	r2, [r3, #4]
            uint8_t ide                   = logic_1_IDE;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                   = logic_1_DLC;
 800b0d4:	2308      	movs	r3, #8
 800b0d6:	72bb      	strb	r3, [r7, #10]
            data[0]                       = logic_1_CANID;
 800b0d8:	2321      	movs	r3, #33	; 0x21
 800b0da:	733b      	strb	r3, [r7, #12]
            data[1]                       = logic_1_DLC;
 800b0dc:	2308      	movs	r3, #8
 800b0de:	737b      	strb	r3, [r7, #13]
            Pack_logic_1_jlb(&jlb_rx.logic_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f503 7098 	add.w	r0, r3, #304	; 0x130
 800b0e6:	f107 010c 	add.w	r1, r7, #12
 800b0ea:	3102      	adds	r1, #2
 800b0ec:	f107 030b 	add.w	r3, r7, #11
 800b0f0:	f107 020a 	add.w	r2, r7, #10
 800b0f4:	f7f6 fd74 	bl	8001be0 <Pack_logic_1_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + logic_1_DLC + 2);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b104:	4618      	mov	r0, r3
 800b106:	f001 f88e 	bl	800c226 <_ZNSt6vectorIcSaIcEE3endEv>
 800b10a:	4603      	mov	r3, r0
 800b10c:	61fb      	str	r3, [r7, #28]
 800b10e:	f107 021c 	add.w	r2, r7, #28
 800b112:	f107 0318 	add.w	r3, r7, #24
 800b116:	4611      	mov	r1, r2
 800b118:	4618      	mov	r0, r3
 800b11a:	f001 f915 	bl	800c348 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b11e:	f107 030c 	add.w	r3, r7, #12
 800b122:	330a      	adds	r3, #10
 800b124:	f107 020c 	add.w	r2, r7, #12
 800b128:	69b9      	ldr	r1, [r7, #24]
 800b12a:	4620      	mov	r0, r4
 800b12c:	f001 f91d 	bl	800c36a <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b130:	bf00      	nop
 800b132:	3724      	adds	r7, #36	; 0x24
 800b134:	46bd      	mov	sp, r7
 800b136:	bd90      	pop	{r4, r7, pc}

0800b138 <_ZN3jlb12SignalSender7logic_2Ev>:

        void logic_2()
 800b138:	b590      	push	{r4, r7, lr}
 800b13a:	b089      	sub	sp, #36	; 0x24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.logic_2.distance_traveled_phys = odometry.distance_traveled_since_checkpoint;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b146:	695b      	ldr	r3, [r3, #20]
 800b148:	4618      	mov	r0, r3
 800b14a:	f7f5 f9ef 	bl	800052c <__aeabi_f2d>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	6879      	ldr	r1, [r7, #4]
 800b154:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
            jlb_rx.logic_2.labyrinth_state        = static_cast<uint8_t>(as_state.labyrinth_state);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	b2da      	uxtb	r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
            jlb_rx.logic_2.fast_state             = static_cast<uint8_t>(as_state.fast_state);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	b2da      	uxtb	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
            jlb_rx.logic_2.next_node              = as_state.next_node;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b17e:	7f9a      	ldrb	r2, [r3, #30]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
            jlb_rx.logic_2.previous_node          = as_state.previous_node;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b18c:	7f5a      	ldrb	r2, [r3, #29]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
            jlb_rx.logic_2.direction              = static_cast<uint8_t>(controller.direction);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b19a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b19e:	b2da      	uxtb	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
            jlb_rx.logic_2.mission                = static_cast<uint8_t>(as_state.mission);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171

            char    data[logic_2_DLC + 2] = {0};
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	60fb      	str	r3, [r7, #12]
 800b1ba:	f107 0310 	add.w	r3, r7, #16
 800b1be:	2200      	movs	r2, #0
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	809a      	strh	r2, [r3, #4]
            uint8_t ide                   = logic_2_IDE;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                   = logic_2_DLC;
 800b1c8:	2308      	movs	r3, #8
 800b1ca:	72bb      	strb	r3, [r7, #10]
            data[0]                       = logic_2_CANID;
 800b1cc:	2322      	movs	r3, #34	; 0x22
 800b1ce:	733b      	strb	r3, [r7, #12]
            data[1]                       = logic_2_DLC;
 800b1d0:	2308      	movs	r3, #8
 800b1d2:	737b      	strb	r3, [r7, #13]
            Pack_logic_2_jlb(&jlb_rx.logic_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f503 70b8 	add.w	r0, r3, #368	; 0x170
 800b1da:	f107 010c 	add.w	r1, r7, #12
 800b1de:	3102      	adds	r1, #2
 800b1e0:	f107 030b 	add.w	r3, r7, #11
 800b1e4:	f107 020a 	add.w	r2, r7, #10
 800b1e8:	f7f6 fdfe 	bl	8001de8 <Pack_logic_2_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + logic_2_DLC + 2);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f001 f814 	bl	800c226 <_ZNSt6vectorIcSaIcEE3endEv>
 800b1fe:	4603      	mov	r3, r0
 800b200:	61fb      	str	r3, [r7, #28]
 800b202:	f107 021c 	add.w	r2, r7, #28
 800b206:	f107 0318 	add.w	r3, r7, #24
 800b20a:	4611      	mov	r1, r2
 800b20c:	4618      	mov	r0, r3
 800b20e:	f001 f89b 	bl	800c348 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b212:	f107 030c 	add.w	r3, r7, #12
 800b216:	330a      	adds	r3, #10
 800b218:	f107 020c 	add.w	r2, r7, #12
 800b21c:	69b9      	ldr	r1, [r7, #24]
 800b21e:	4620      	mov	r0, r4
 800b220:	f001 f8a3 	bl	800c36a <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b224:	bf00      	nop
 800b226:	3724      	adds	r7, #36	; 0x24
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd90      	pop	{r4, r7, pc}

0800b22c <_ZN3jlb12SignalSender6logic3Ev>:

        void logic3()
 800b22c:	b590      	push	{r4, r7, lr}
 800b22e:	b089      	sub	sp, #36	; 0x24
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.logic_3.ang_error_norm_phys      = controller.ang_error_norm;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7f5 f975 	bl	800052c <__aeabi_f2d>
 800b242:	4602      	mov	r2, r0
 800b244:	460b      	mov	r3, r1
 800b246:	6879      	ldr	r1, [r7, #4]
 800b248:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
            jlb_rx.logic_3.dist_error_norm_phys     = controller.dist_error_norm;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b254:	4618      	mov	r0, r3
 800b256:	f7f5 f969 	bl	800052c <__aeabi_f2d>
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	6879      	ldr	r1, [r7, #4]
 800b260:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
            jlb_rx.logic_3.line_position_rear_phys  = controller.line_position_rear;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7f5 f95d 	bl	800052c <__aeabi_f2d>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	6879      	ldr	r1, [r7, #4]
 800b278:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
            jlb_rx.logic_3.line_position_front_phys = controller.line_position_front;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	4618      	mov	r0, r3
 800b286:	f7f5 f951 	bl	800052c <__aeabi_f2d>
 800b28a:	4602      	mov	r2, r0
 800b28c:	460b      	mov	r3, r1
 800b28e:	6879      	ldr	r1, [r7, #4]
 800b290:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
            jlb_rx.logic_3.at_cross_section         = as_state.at_cross_section;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b29a:	7c5b      	ldrb	r3, [r3, #17]
 800b29c:	461a      	mov	r2, r3
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
            jlb_rx.logic_3.under_gate               = as_state.under_gate;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b2aa:	7c1b      	ldrb	r3, [r3, #16]
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1

            char    data[logic_3_DLC + 2] = {0};
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	60fb      	str	r3, [r7, #12]
 800b2b8:	f107 0310 	add.w	r3, r7, #16
 800b2bc:	2200      	movs	r2, #0
 800b2be:	601a      	str	r2, [r3, #0]
 800b2c0:	809a      	strh	r2, [r3, #4]
            uint8_t ide                   = logic_3_IDE;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                   = logic_3_DLC;
 800b2c6:	2308      	movs	r3, #8
 800b2c8:	72bb      	strb	r3, [r7, #10]
            data[0]                       = logic_3_CANID;
 800b2ca:	2323      	movs	r3, #35	; 0x23
 800b2cc:	733b      	strb	r3, [r7, #12]
            data[1]                       = logic_3_DLC;
 800b2ce:	2308      	movs	r3, #8
 800b2d0:	737b      	strb	r3, [r7, #13]
            Pack_logic_3_jlb(&jlb_rx.logic_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f503 70c0 	add.w	r0, r3, #384	; 0x180
 800b2d8:	f107 010c 	add.w	r1, r7, #12
 800b2dc:	3102      	adds	r1, #2
 800b2de:	f107 030b 	add.w	r3, r7, #11
 800b2e2:	f107 020a 	add.w	r2, r7, #10
 800b2e6:	f7f6 fe07 	bl	8001ef8 <Pack_logic_3_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + logic_3_DLC + 2);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 ff95 	bl	800c226 <_ZNSt6vectorIcSaIcEE3endEv>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	61fb      	str	r3, [r7, #28]
 800b300:	f107 021c 	add.w	r2, r7, #28
 800b304:	f107 0318 	add.w	r3, r7, #24
 800b308:	4611      	mov	r1, r2
 800b30a:	4618      	mov	r0, r3
 800b30c:	f001 f81c 	bl	800c348 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b310:	f107 030c 	add.w	r3, r7, #12
 800b314:	330a      	adds	r3, #10
 800b316:	f107 020c 	add.w	r2, r7, #12
 800b31a:	69b9      	ldr	r1, [r7, #24]
 800b31c:	4620      	mov	r0, r4
 800b31e:	f001 f824 	bl	800c36a <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b322:	bf00      	nop
 800b324:	3724      	adds	r7, #36	; 0x24
 800b326:	46bd      	mov	sp, r7
 800b328:	bd90      	pop	{r4, r7, pc}

0800b32a <_ZN3jlb5LogicC1ENS_9DirectionEfff>:
namespace jlb
{
    class Logic
    {
    public:
        Logic(Direction direction_ = Direction::STRAIGHT, const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : odometry(x_t_, y_t_, theta_t_), controller(direction_) {}
 800b32a:	b5b0      	push	{r4, r5, r7, lr}
 800b32c:	b088      	sub	sp, #32
 800b32e:	af02      	add	r7, sp, #8
 800b330:	6178      	str	r0, [r7, #20]
 800b332:	6139      	str	r1, [r7, #16]
 800b334:	ed87 0a03 	vstr	s0, [r7, #12]
 800b338:	edc7 0a02 	vstr	s1, [r7, #8]
 800b33c:	ed87 1a01 	vstr	s2, [r7, #4]
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	ed97 1a01 	vldr	s2, [r7, #4]
 800b346:	edd7 0a02 	vldr	s1, [r7, #8]
 800b34a:	ed97 0a03 	vldr	s0, [r7, #12]
 800b34e:	4618      	mov	r0, r3
 800b350:	f7fc ff91 	bl	8008276 <_ZN3jlb8OdometryC1Efff>
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	3388      	adds	r3, #136	; 0x88
 800b358:	6939      	ldr	r1, [r7, #16]
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7f9 f83e 	bl	80043dc <_ZN3jlb10ControllerC1ENS_9DirectionE>
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b366:	4618      	mov	r0, r3
 800b368:	f7f9 fd1e 	bl	8004da8 <_ZN3jlb5GraphC1Ev>
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 800b372:	6979      	ldr	r1, [r7, #20]
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b380:	f7fd fbd9 	bl	8008b36 <_ZN3jlb7ASStateC1ERNS_8OdometryERNS_10ControllerERNS_5GraphE>
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	f503 70e8 	add.w	r0, r3, #464	; 0x1d0
 800b38a:	6979      	ldr	r1, [r7, #20]
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	f103 0488 	add.w	r4, r3, #136	; 0x88
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	f503 75d0 	add.w	r5, r3, #416	; 0x1a0
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b39e:	697a      	ldr	r2, [r7, #20]
 800b3a0:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 800b3a4:	9201      	str	r2, [sp, #4]
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	462b      	mov	r3, r5
 800b3aa:	4622      	mov	r2, r4
 800b3ac:	f7fd ff20 	bl	80091f0 <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateERKNS_5GraphERK12Measurements>
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3718      	adds	r7, #24
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bdb0      	pop	{r4, r5, r7, pc}

0800b3ba <_ZN3jlb5Logic6updateEv>:

        ControlSignal update()
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b090      	sub	sp, #64	; 0x40
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	60f8      	str	r0, [r7, #12]
        {
            auto [vx, x, y, theta] = odometry.update_odom();
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7fd f8bb 	bl	8008540 <_ZN3jlb8Odometry11update_odomEv>
 800b3ca:	eeb0 6a40 	vmov.f32	s12, s0
 800b3ce:	eef0 6a60 	vmov.f32	s13, s1
 800b3d2:	eeb0 7a41 	vmov.f32	s14, s2
 800b3d6:	eef0 7a61 	vmov.f32	s15, s3
 800b3da:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 800b3de:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800b3e2:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800b3e6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            controller.set_current_velocity(vx);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	3388      	adds	r3, #136	; 0x88
            auto [vx, x, y, theta] = odometry.update_odom();
 800b3ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
            controller.set_current_velocity(vx);
 800b3f2:	eeb0 0a67 	vmov.f32	s0, s15
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7f9 fbf3 	bl	8004be2 <_ZN3jlb10Controller20set_current_velocityEf>

            auto [mission, labyrinth_state, fast_state, reference_speed] = as_state.update();
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 800b402:	f107 0318 	add.w	r3, r7, #24
 800b406:	4611      	mov	r1, r2
 800b408:	4618      	mov	r0, r3
 800b40a:	f7fd fbf9 	bl	8008c00 <_ZN3jlb7ASState6updateEv>
            controller.set_reference_speed(reference_speed);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	3388      	adds	r3, #136	; 0x88
            auto [mission, labyrinth_state, fast_state, reference_speed] = as_state.update();
 800b412:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
            controller.set_reference_speed(reference_speed);
 800b416:	eeb0 0a67 	vmov.f32	s0, s15
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7f9 fc06 	bl	8004c2c <_ZN3jlb10Controller19set_reference_speedEf>

            auto [target_angle, target_speed] = controller.update();
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	3388      	adds	r3, #136	; 0x88
 800b424:	4618      	mov	r0, r3
 800b426:	f7f9 fb61 	bl	8004aec <_ZN3jlb10Controller6updateEv>
 800b42a:	eeb0 7a40 	vmov.f32	s14, s0
 800b42e:	eef0 7a60 	vmov.f32	s15, s1
 800b432:	ed87 7a04 	vstr	s14, [r7, #16]
 800b436:	edc7 7a05 	vstr	s15, [r7, #20]
 800b43a:	693b      	ldr	r3, [r7, #16]
            return ControlSignal{target_angle, target_speed};
 800b43c:	63bb      	str	r3, [r7, #56]	; 0x38
            auto [target_angle, target_speed] = controller.update();
 800b43e:	697b      	ldr	r3, [r7, #20]
            return ControlSignal{target_angle, target_speed};
 800b440:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b446:	ee07 2a10 	vmov	s14, r2
 800b44a:	ee07 3a90 	vmov	s15, r3
        }
 800b44e:	eeb0 0a47 	vmov.f32	s0, s14
 800b452:	eef0 0a67 	vmov.f32	s1, s15
 800b456:	3740      	adds	r7, #64	; 0x40
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <_ZN3jlb5Logic19set_detection_frontEPbSt6vectorIfSaIfEE>:

        void set_detection_front(bool *detection_front_, std::vector<float> line_positions_front_)
 800b45c:	b590      	push	{r4, r7, lr}
 800b45e:	b089      	sub	sp, #36	; 0x24
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
        {
            as_state.current_number_of_lines = static_cast<uint8_t>(line_positions_front_.size());
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f7f8 f94d 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800b46e:	4603      	mov	r3, r0
 800b470:	b2da      	uxtb	r2, r3
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
            controller.set_detection_front(detection_front_, line_positions_front_);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f103 0488 	add.w	r4, r3, #136	; 0x88
 800b47e:	f107 0314 	add.w	r3, r7, #20
 800b482:	6879      	ldr	r1, [r7, #4]
 800b484:	4618      	mov	r0, r3
 800b486:	f000 faa3 	bl	800b9d0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800b48a:	f107 0314 	add.w	r3, r7, #20
 800b48e:	461a      	mov	r2, r3
 800b490:	68b9      	ldr	r1, [r7, #8]
 800b492:	4620      	mov	r0, r4
 800b494:	f7f9 fb5f 	bl	8004b56 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>
 800b498:	f107 0314 	add.w	r3, r7, #20
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7f7 fe95 	bl	80031cc <_ZNSt6vectorIfSaIfEED1Ev>
        }
 800b4a2:	bf00      	nop
 800b4a4:	3724      	adds	r7, #36	; 0x24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd90      	pop	{r4, r7, pc}

0800b4aa <_ZN3jlb5Logic18set_detection_rearEPbSt6vectorIfSaIfEE>:
        void set_detection_rear(bool *detection_rear_, std::vector<float> line_positions_rear_) { controller.set_detection_rear(detection_rear_, line_positions_rear_); }
 800b4aa:	b590      	push	{r4, r7, lr}
 800b4ac:	b089      	sub	sp, #36	; 0x24
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	60f8      	str	r0, [r7, #12]
 800b4b2:	60b9      	str	r1, [r7, #8]
 800b4b4:	607a      	str	r2, [r7, #4]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f103 0488 	add.w	r4, r3, #136	; 0x88
 800b4bc:	f107 0314 	add.w	r3, r7, #20
 800b4c0:	6879      	ldr	r1, [r7, #4]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f000 fa84 	bl	800b9d0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800b4c8:	f107 0314 	add.w	r3, r7, #20
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	68b9      	ldr	r1, [r7, #8]
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f7f9 fb63 	bl	8004b9c <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>
 800b4d6:	f107 0314 	add.w	r3, r7, #20
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7f7 fe76 	bl	80031cc <_ZNSt6vectorIfSaIfEED1Ev>
 800b4e0:	bf00      	nop
 800b4e2:	3724      	adds	r7, #36	; 0x24
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd90      	pop	{r4, r7, pc}

0800b4e8 <_ZN3jlb5Logic12imu_callbackEf>:
        void set_under_gate(const bool under_gate_) { as_state.under_gate = under_gate_; }
        void set_at_cross_section(const bool at_cross_section_) { as_state.at_cross_section = at_cross_section_; }
        void imu_callback(const float yaw_rate_) { odometry.imu_callback(yaw_rate_); }
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	ed87 0a00 	vstr	s0, [r7]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	ed97 0a00 	vldr	s0, [r7]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7fc ffb0 	bl	8008460 <_ZN3jlb8Odometry12imu_callbackEf>
 800b500:	bf00      	nop
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <_ZN3jlb5Logic12rpm_callbackEf>:
        void rpm_callback(const float motor_rpm_) { odometry.rpm_callback(motor_rpm_); }
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	ed87 0a00 	vstr	s0, [r7]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	ed97 0a00 	vldr	s0, [r7]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fc ff14 	bl	8008348 <_ZN3jlb8Odometry12rpm_callbackEf>
 800b520:	bf00      	nop
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <_ZN3jlb5Logic16set_object_rangeEf>:
        void set_object_range(const float object_range_) { controller.set_object_range(object_range_); }
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	ed87 0a00 	vstr	s0, [r7]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3388      	adds	r3, #136	; 0x88
 800b538:	ed97 0a00 	vldr	s0, [r7]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7f9 fafb 	bl	8004b38 <_ZN3jlb10Controller16set_object_rangeEf>
 800b542:	bf00      	nop
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <_ZN3jlb5Logic10set_statesENS_14CompositeStateE>:
        void set_states(const CompositeState state_) { as_state.set_states(state_); }
 800b54a:	b084      	sub	sp, #16
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af02      	add	r7, sp, #8
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	f107 0014 	add.w	r0, r7, #20
 800b558:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 800b562:	6a3b      	ldr	r3, [r7, #32]
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	f107 0314 	add.w	r3, r7, #20
 800b56a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b56c:	f7fd fb24 	bl	8008bb8 <_ZN3jlb7ASState10set_statesENS_14CompositeStateE>
 800b570:	bf00      	nop
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b57a:	b004      	add	sp, #16
 800b57c:	4770      	bx	lr

0800b57e <_ZN3jlb5Logic14send_telemetryEv>:
        void send_telemetry() { signal_sender.send_telemetry(); }
 800b57e:	b580      	push	{r7, lr}
 800b580:	b082      	sub	sp, #8
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fd fe64 	bl	800925a <_ZN3jlb12SignalSender14send_telemetryEv>
 800b592:	bf00      	nop
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <_ZN3jlb5Logic16set_measurementsERK12Measurements>:
        void set_measurements(const Measurements &measurements_) { measurements = measurements_; }
 800b59a:	b490      	push	{r4, r7}
 800b59c:	b082      	sub	sp, #8
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	6039      	str	r1, [r7, #0]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	f503 74c8 	add.w	r4, r3, #400	; 0x190
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b5b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b5b4:	bf00      	nop
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bc90      	pop	{r4, r7}
 800b5bc:	4770      	bx	lr

0800b5be <_ZN3jlb5Logic12get_odometryEv>:
        Odom get_odometry() { return {odometry.vx_t, odometry.x_t, odometry.y_t, odometry.theta_t}; }
 800b5be:	b480      	push	{r7}
 800b5c0:	b08b      	sub	sp, #44	; 0x2c
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6178      	str	r0, [r7, #20]
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	61bb      	str	r3, [r7, #24]
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	61fb      	str	r3, [r7, #28]
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	623b      	str	r3, [r7, #32]
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b5de:	69b8      	ldr	r0, [r7, #24]
 800b5e0:	69f9      	ldr	r1, [r7, #28]
 800b5e2:	6a3a      	ldr	r2, [r7, #32]
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e6:	ee06 0a10 	vmov	s12, r0
 800b5ea:	ee06 1a90 	vmov	s13, r1
 800b5ee:	ee07 2a10 	vmov	s14, r2
 800b5f2:	ee07 3a90 	vmov	s15, r3
 800b5f6:	eeb0 0a46 	vmov.f32	s0, s12
 800b5fa:	eef0 0a66 	vmov.f32	s1, s13
 800b5fe:	eeb0 1a47 	vmov.f32	s2, s14
 800b602:	eef0 1a67 	vmov.f32	s3, s15
 800b606:	372c      	adds	r7, #44	; 0x2c
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <_Z19RegistrateUserTasksv>:
{ .name = "LoggerTask", .stack_size = 128 * 5, .priority = (osPriority_t) osPriorityHigh };



void RegistrateUserTasks()
{
 800b610:	b580      	push	{r7, lr}
 800b612:	af00      	add	r7, sp, #0
	adcTaskHandle = osThreadNew(ADCTask, NULL, &adcTask_attributes);
 800b614:	4a10      	ldr	r2, [pc, #64]	; (800b658 <_Z19RegistrateUserTasksv+0x48>)
 800b616:	2100      	movs	r1, #0
 800b618:	4810      	ldr	r0, [pc, #64]	; (800b65c <_Z19RegistrateUserTasksv+0x4c>)
 800b61a:	f012 facd 	bl	801dbb8 <osThreadNew>
 800b61e:	4603      	mov	r3, r0
 800b620:	4a0f      	ldr	r2, [pc, #60]	; (800b660 <_Z19RegistrateUserTasksv+0x50>)
 800b622:	6013      	str	r3, [r2, #0]
	mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 800b624:	4a0f      	ldr	r2, [pc, #60]	; (800b664 <_Z19RegistrateUserTasksv+0x54>)
 800b626:	2100      	movs	r1, #0
 800b628:	480f      	ldr	r0, [pc, #60]	; (800b668 <_Z19RegistrateUserTasksv+0x58>)
 800b62a:	f012 fac5 	bl	801dbb8 <osThreadNew>
 800b62e:	4603      	mov	r3, r0
 800b630:	4a0e      	ldr	r2, [pc, #56]	; (800b66c <_Z19RegistrateUserTasksv+0x5c>)
 800b632:	6013      	str	r3, [r2, #0]
	encoderTaskHandle = osThreadNew(Encoder_Task, NULL, &encoderTask_attributes);
 800b634:	4a0e      	ldr	r2, [pc, #56]	; (800b670 <_Z19RegistrateUserTasksv+0x60>)
 800b636:	2100      	movs	r1, #0
 800b638:	480e      	ldr	r0, [pc, #56]	; (800b674 <_Z19RegistrateUserTasksv+0x64>)
 800b63a:	f012 fabd 	bl	801dbb8 <osThreadNew>
 800b63e:	4603      	mov	r3, r0
 800b640:	4a0d      	ldr	r2, [pc, #52]	; (800b678 <_Z19RegistrateUserTasksv+0x68>)
 800b642:	6013      	str	r3, [r2, #0]
	loggerTaskHandle = osThreadNew(LoggerTask, NULL, &loggerTask_attributes);
 800b644:	4a0d      	ldr	r2, [pc, #52]	; (800b67c <_Z19RegistrateUserTasksv+0x6c>)
 800b646:	2100      	movs	r1, #0
 800b648:	480d      	ldr	r0, [pc, #52]	; (800b680 <_Z19RegistrateUserTasksv+0x70>)
 800b64a:	f012 fab5 	bl	801dbb8 <osThreadNew>
 800b64e:	4603      	mov	r3, r0
 800b650:	4a0c      	ldr	r2, [pc, #48]	; (800b684 <_Z19RegistrateUserTasksv+0x74>)
 800b652:	6013      	str	r3, [r2, #0]

}
 800b654:	bf00      	nop
 800b656:	bd80      	pop	{r7, pc}
 800b658:	08023f8c 	.word	0x08023f8c
 800b65c:	0800b689 	.word	0x0800b689
 800b660:	200006c0 	.word	0x200006c0
 800b664:	08023fb0 	.word	0x08023fb0
 800b668:	0800b6b9 	.word	0x0800b6b9
 800b66c:	200006c4 	.word	0x200006c4
 800b670:	08023fd4 	.word	0x08023fd4
 800b674:	080024d5 	.word	0x080024d5
 800b678:	200006c8 	.word	0x200006c8
 800b67c:	08023ff8 	.word	0x08023ff8
 800b680:	0800b8bd 	.word	0x0800b8bd
 800b684:	200006cc 	.word	0x200006cc

0800b688 <_Z7ADCTaskPv>:

void ADCTask(void *argument)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 800b690:	f013 fc04 	bl	801ee9c <xTaskGetTickCount>
 800b694:	4603      	mov	r3, r0
 800b696:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 800b698:	2208      	movs	r2, #8
 800b69a:	4905      	ldr	r1, [pc, #20]	; (800b6b0 <_Z7ADCTaskPv+0x28>)
 800b69c:	4805      	ldr	r0, [pc, #20]	; (800b6b4 <_Z7ADCTaskPv+0x2c>)
 800b69e:	f008 fadb 	bl	8013c58 <HAL_ADC_Start_DMA>
		vTaskDelayUntil(&xLastWakeTime, 5u);
 800b6a2:	f107 030c 	add.w	r3, r7, #12
 800b6a6:	2105      	movs	r1, #5
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f013 f9a7 	bl	801e9fc <vTaskDelayUntil>
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 800b6ae:	e7f3      	b.n	800b698 <_Z7ADCTaskPv+0x10>
 800b6b0:	20000124 	.word	0x20000124
 800b6b4:	200006d0 	.word	0x200006d0

0800b6b8 <_Z8MainTaskPv>:
	}
}

void MainTask(void * argument)
{
 800b6b8:	b590      	push	{r4, r7, lr}
 800b6ba:	b099      	sub	sp, #100	; 0x64
 800b6bc:	af02      	add	r7, sp, #8
 800b6be:	6078      	str	r0, [r7, #4]
	static uint8_t direction = 1u;
	logic.set_states({jlb::FastState::OUT_ACCEL_ZONE});
 800b6c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b6c4:	2104      	movs	r1, #4
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fd fa00 	bl	8008acc <_ZN3jlb14CompositeStateC1ENS_9FastStateE>
 800b6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b6d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6d6:	4868      	ldr	r0, [pc, #416]	; (800b878 <_Z8MainTaskPv+0x1c0>)
 800b6d8:	f7ff ff37 	bl	800b54a <_ZN3jlb5Logic10set_statesENS_14CompositeStateE>
	for (;;)
	{
		lv_battery_voltage = adc_values.lv_batt_voltage_raw / 4096.0f * 3.3f * LV_BATERY_VOLTAGE_DIVIDER * 1.04447;
 800b6dc:	4b67      	ldr	r3, [pc, #412]	; (800b87c <_Z8MainTaskPv+0x1c4>)
 800b6de:	899b      	ldrh	r3, [r3, #12]
 800b6e0:	ee07 3a90 	vmov	s15, r3
 800b6e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b6e8:	eddf 6a65 	vldr	s13, [pc, #404]	; 800b880 <_Z8MainTaskPv+0x1c8>
 800b6ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6f0:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800b884 <_Z8MainTaskPv+0x1cc>
 800b6f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6f8:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800b888 <_Z8MainTaskPv+0x1d0>
 800b6fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b700:	ee16 0a90 	vmov	r0, s13
 800b704:	f7f4 ff12 	bl	800052c <__aeabi_f2d>
 800b708:	a359      	add	r3, pc, #356	; (adr r3, 800b870 <_Z8MainTaskPv+0x1b8>)
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	f7f4 ff65 	bl	80005dc <__aeabi_dmul>
 800b712:	4602      	mov	r2, r0
 800b714:	460b      	mov	r3, r1
 800b716:	4610      	mov	r0, r2
 800b718:	4619      	mov	r1, r3
 800b71a:	f7f5 fa2f 	bl	8000b7c <__aeabi_d2f>
 800b71e:	4603      	mov	r3, r0
 800b720:	4a5a      	ldr	r2, [pc, #360]	; (800b88c <_Z8MainTaskPv+0x1d4>)
 800b722:	6013      	str	r3, [r2, #0]
		LineSensorTask();
 800b724:	f7f7 fa0c 	bl	8002b40 <_Z14LineSensorTaskv>
		IMU_Task();
 800b728:	f7f6 ff96 	bl	8002658 <_Z8IMU_Taskv>
		DistanceSensorTask();
 800b72c:	f7f6 fd00 	bl	8002130 <_Z18DistanceSensorTaskv>
		wheel_rpm = CalculateRPM();
 800b730:	f7f6 ff22 	bl	8002578 <_Z12CalculateRPMv>
 800b734:	eef0 7a40 	vmov.f32	s15, s0
 800b738:	4b55      	ldr	r3, [pc, #340]	; (800b890 <_Z8MainTaskPv+0x1d8>)
 800b73a:	edc3 7a00 	vstr	s15, [r3]
		{
			motorcontrol.target_velocity = 0.0f;
		}
#else

		logic.imu_callback(imu.yaw);
 800b73e:	4b55      	ldr	r3, [pc, #340]	; (800b894 <_Z8MainTaskPv+0x1dc>)
 800b740:	edd3 7a03 	vldr	s15, [r3, #12]
 800b744:	eeb0 0a67 	vmov.f32	s0, s15
 800b748:	484b      	ldr	r0, [pc, #300]	; (800b878 <_Z8MainTaskPv+0x1c0>)
 800b74a:	f7ff fecd 	bl	800b4e8 <_ZN3jlb5Logic12imu_callbackEf>
		logic.rpm_callback(wheel_rpm);
 800b74e:	4b50      	ldr	r3, [pc, #320]	; (800b890 <_Z8MainTaskPv+0x1d8>)
 800b750:	edd3 7a00 	vldr	s15, [r3]
 800b754:	eeb0 0a67 	vmov.f32	s0, s15
 800b758:	4847      	ldr	r0, [pc, #284]	; (800b878 <_Z8MainTaskPv+0x1c0>)
 800b75a:	f7ff fed5 	bl	800b508 <_ZN3jlb5Logic12rpm_callbackEf>

		std::reverse(std::begin(ls_data.front_detection), std::end(ls_data.front_detection));
 800b75e:	484e      	ldr	r0, [pc, #312]	; (800b898 <_Z8MainTaskPv+0x1e0>)
 800b760:	f000 f8f3 	bl	800b94a <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 800b764:	4604      	mov	r4, r0
 800b766:	484c      	ldr	r0, [pc, #304]	; (800b898 <_Z8MainTaskPv+0x1e0>)
 800b768:	f000 f8fa 	bl	800b960 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 800b76c:	4603      	mov	r3, r0
 800b76e:	4619      	mov	r1, r3
 800b770:	4620      	mov	r0, r4
 800b772:	f000 fe32 	bl	800c3da <_ZSt7reverseIPbEvT_S1_>
		//std::reverse(std::begin(ls_data.rear_detection), std::end(ls_data.rear_detection));
		logic.set_detection_front( ls_data.front_detection, ls_data.front);
 800b776:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b77a:	4948      	ldr	r1, [pc, #288]	; (800b89c <_Z8MainTaskPv+0x1e4>)
 800b77c:	4618      	mov	r0, r3
 800b77e:	f000 f927 	bl	800b9d0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800b782:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b786:	461a      	mov	r2, r3
 800b788:	4943      	ldr	r1, [pc, #268]	; (800b898 <_Z8MainTaskPv+0x1e0>)
 800b78a:	483b      	ldr	r0, [pc, #236]	; (800b878 <_Z8MainTaskPv+0x1c0>)
 800b78c:	f7ff fe66 	bl	800b45c <_ZN3jlb5Logic19set_detection_frontEPbSt6vectorIfSaIfEE>
 800b790:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b794:	4618      	mov	r0, r3
 800b796:	f7f7 fd19 	bl	80031cc <_ZNSt6vectorIfSaIfEED1Ev>
		logic.set_detection_rear(ls_data.rear_detection, ls_data.rear);
 800b79a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b79e:	4940      	ldr	r1, [pc, #256]	; (800b8a0 <_Z8MainTaskPv+0x1e8>)
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f000 f915 	bl	800b9d0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800b7a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	493d      	ldr	r1, [pc, #244]	; (800b8a4 <_Z8MainTaskPv+0x1ec>)
 800b7ae:	4832      	ldr	r0, [pc, #200]	; (800b878 <_Z8MainTaskPv+0x1c0>)
 800b7b0:	f7ff fe7b 	bl	800b4aa <_ZN3jlb5Logic18set_detection_rearEPbSt6vectorIfSaIfEE>
 800b7b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7f7 fd07 	bl	80031cc <_ZNSt6vectorIfSaIfEED1Ev>
		logic.set_object_range(distance_sensor.distance);
 800b7be:	4b3a      	ldr	r3, [pc, #232]	; (800b8a8 <_Z8MainTaskPv+0x1f0>)
 800b7c0:	edd3 7a08 	vldr	s15, [r3, #32]
 800b7c4:	eeb0 0a67 	vmov.f32	s0, s15
 800b7c8:	482b      	ldr	r0, [pc, #172]	; (800b878 <_Z8MainTaskPv+0x1c0>)
 800b7ca:	f7ff fead 	bl	800b528 <_ZN3jlb5Logic16set_object_rangeEf>
		Measurements meas;
		meas.duty_cycle = motorcontrol.duty_cycle;
 800b7ce:	4b37      	ldr	r3, [pc, #220]	; (800b8ac <_Z8MainTaskPv+0x1f4>)
 800b7d0:	691b      	ldr	r3, [r3, #16]
 800b7d2:	623b      	str	r3, [r7, #32]
		meas.motor_current = motorcontrol.motor_current;
 800b7d4:	4b35      	ldr	r3, [pc, #212]	; (800b8ac <_Z8MainTaskPv+0x1f4>)
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	627b      	str	r3, [r7, #36]	; 0x24
		meas.object_range = distance_sensor.distance;
 800b7da:	4b33      	ldr	r3, [pc, #204]	; (800b8a8 <_Z8MainTaskPv+0x1f0>)
 800b7dc:	6a1b      	ldr	r3, [r3, #32]
 800b7de:	62bb      	str	r3, [r7, #40]	; 0x28
		meas.wheel_rpm = wheel_rpm;
 800b7e0:	4b2b      	ldr	r3, [pc, #172]	; (800b890 <_Z8MainTaskPv+0x1d8>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		logic.set_measurements(meas);
 800b7e6:	f107 0320 	add.w	r3, r7, #32
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	4822      	ldr	r0, [pc, #136]	; (800b878 <_Z8MainTaskPv+0x1c0>)
 800b7ee:	f7ff fed4 	bl	800b59a <_ZN3jlb5Logic16set_measurementsERK12Measurements>
		auto [target_angle, target_speed] = logic.update();
 800b7f2:	4821      	ldr	r0, [pc, #132]	; (800b878 <_Z8MainTaskPv+0x1c0>)
 800b7f4:	f7ff fde1 	bl	800b3ba <_ZN3jlb5Logic6updateEv>
 800b7f8:	eeb0 7a40 	vmov.f32	s14, s0
 800b7fc:	eef0 7a60 	vmov.f32	s15, s1
 800b800:	ed87 7a06 	vstr	s14, [r7, #24]
 800b804:	edc7 7a07 	vstr	s15, [r7, #28]
		auto [vx_t, x_t, y_t, theta_t] = logic.get_odometry();
 800b808:	481b      	ldr	r0, [pc, #108]	; (800b878 <_Z8MainTaskPv+0x1c0>)
 800b80a:	f7ff fed8 	bl	800b5be <_ZN3jlb5Logic12get_odometryEv>
 800b80e:	eeb0 6a40 	vmov.f32	s12, s0
 800b812:	eef0 6a60 	vmov.f32	s13, s1
 800b816:	eeb0 7a41 	vmov.f32	s14, s2
 800b81a:	eef0 7a61 	vmov.f32	s15, s3
 800b81e:	ed87 6a02 	vstr	s12, [r7, #8]
 800b822:	edc7 6a03 	vstr	s13, [r7, #12]
 800b826:	ed87 7a04 	vstr	s14, [r7, #16]
 800b82a:	edc7 7a05 	vstr	s15, [r7, #20]
 800b82e:	68bb      	ldr	r3, [r7, #8]
		motorcontrol.actual_velocity = vx_t;
 800b830:	4a1e      	ldr	r2, [pc, #120]	; (800b8ac <_Z8MainTaskPv+0x1f4>)
 800b832:	6093      	str	r3, [r2, #8]
		auto [target_angle, target_speed] = logic.update();
 800b834:	69fb      	ldr	r3, [r7, #28]
		motorcontrol.target_velocity = target_speed;
 800b836:	4a1d      	ldr	r2, [pc, #116]	; (800b8ac <_Z8MainTaskPv+0x1f4>)
 800b838:	60d3      	str	r3, [r2, #12]
		MotorControlTask();
 800b83a:	f7f8 fad1 	bl	8003de0 <_Z16MotorControlTaskv>
		auto [target_angle, target_speed] = logic.update();
 800b83e:	edd7 7a06 	vldr	s15, [r7, #24]
		SetSteeringAngle(target_angle * -180.0f / 3.14f);
 800b842:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800b8b0 <_Z8MainTaskPv+0x1f8>
 800b846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b84a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800b8b4 <_Z8MainTaskPv+0x1fc>
 800b84e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b852:	eeb0 0a47 	vmov.f32	s0, s14
 800b856:	f7f8 fcc5 	bl	80041e4 <_Z16SetSteeringAnglef>
		logic.send_telemetry();
 800b85a:	4807      	ldr	r0, [pc, #28]	; (800b878 <_Z8MainTaskPv+0x1c0>)
 800b85c:	f7ff fe8f 	bl	800b57e <_ZN3jlb5Logic14send_telemetryEv>

#endif
		vTaskSuspend(static_cast<TaskHandle_t>(mainTaskHandle));
 800b860:	4b15      	ldr	r3, [pc, #84]	; (800b8b8 <_Z8MainTaskPv+0x200>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4618      	mov	r0, r3
 800b866:	f013 f94b 	bl	801eb00 <vTaskSuspend>
	}
 800b86a:	e737      	b.n	800b6dc <_Z8MainTaskPv+0x24>
 800b86c:	f3af 8000 	nop.w
 800b870:	2cba732e 	.word	0x2cba732e
 800b874:	3ff0b626 	.word	0x3ff0b626
 800b878:	20000308 	.word	0x20000308
 800b87c:	20000144 	.word	0x20000144
 800b880:	45800000 	.word	0x45800000
 800b884:	40533333 	.word	0x40533333
 800b888:	3e7df3b6 	.word	0x3e7df3b6
 800b88c:	20000300 	.word	0x20000300
 800b890:	20000304 	.word	0x20000304
 800b894:	200001a0 	.word	0x200001a0
 800b898:	20000238 	.word	0x20000238
 800b89c:	20000280 	.word	0x20000280
 800b8a0:	2000028c 	.word	0x2000028c
 800b8a4:	20000258 	.word	0x20000258
 800b8a8:	20000154 	.word	0x20000154
 800b8ac:	20000298 	.word	0x20000298
 800b8b0:	c3340000 	.word	0xc3340000
 800b8b4:	4048f5c3 	.word	0x4048f5c3
 800b8b8:	200006c4 	.word	0x200006c4

0800b8bc <_Z10LoggerTaskPv>:
}

void LoggerTask(void *argument)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 800b8c4:	f013 faea 	bl	801ee9c <xTaskGetTickCount>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		vTaskDelayUntil(&xLastWakeTime, 50u);
 800b8cc:	f107 030c 	add.w	r3, r7, #12
 800b8d0:	2132      	movs	r1, #50	; 0x32
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f013 f892 	bl	801e9fc <vTaskDelayUntil>
 800b8d8:	e7f8      	b.n	800b8cc <_Z10LoggerTaskPv+0x10>

0800b8da <_ZSt4copyIPKcPcET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800b8da:	b590      	push	{r4, r7, lr}
 800b8dc:	b085      	sub	sp, #20
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	60f8      	str	r0, [r7, #12]
 800b8e2:	60b9      	str	r1, [r7, #8]
 800b8e4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f000 fd8a 	bl	800c400 <_ZSt12__miter_baseIPKcET_S2_>
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	68b8      	ldr	r0, [r7, #8]
 800b8f0:	f000 fd86 	bl	800c400 <_ZSt12__miter_baseIPKcET_S2_>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f000 fd8b 	bl	800c416 <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 800b900:	4603      	mov	r3, r0
    }
 800b902:	4618      	mov	r0, r3
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	bd90      	pop	{r4, r7, pc}

0800b90a <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 800b90a:	b590      	push	{r4, r7, lr}
 800b90c:	b083      	sub	sp, #12
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
 800b912:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 800b914:	f7f8 fcfc 	bl	8004310 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 800b918:	4622      	mov	r2, r4
 800b91a:	6839      	ldr	r1, [r7, #0]
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fdbf 	bl	800c4a0 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800b922:	bf00      	nop
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	bd90      	pop	{r4, r7, pc}

0800b92a <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800b92a:	b480      	push	{r7}
 800b92c:	b083      	sub	sp, #12
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4413      	add	r3, r2
      }
 800b93e:	4618      	mov	r0, r3
 800b940:	370c      	adds	r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr

0800b94a <_ZSt5beginIbLj32EEPT_RAT0__S0_>:
   *  @brief  Return an iterator pointing to the first element of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 800b94a:	b480      	push	{r7}
 800b94c:	b083      	sub	sp, #12
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
    { return __arr; }
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4618      	mov	r0, r3
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <_ZSt3endIbLj32EEPT_RAT0__S0_>:
   *          of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	3320      	adds	r3, #32
 800b96c:	4618      	mov	r0, r3
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 800b984:	461a      	mov	r2, r3
 800b986:	68b9      	ldr	r1, [r7, #8]
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f000 fdb9 	bl	800c500 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE_ET_S4_S4_T0_>
 800b98e:	4602      	mov	r2, r0
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	4293      	cmp	r3, r2
 800b994:	bf0c      	ite	eq
 800b996:	2301      	moveq	r3, #1
 800b998:	2300      	movne	r3, #0
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	4618      	mov	r0, r3
 800b99e:	3710      	adds	r7, #16
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE0_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	68b9      	ldr	r1, [r7, #8]
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f000 fdb6 	bl	800c526 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE0_ET_S4_S4_T0_>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	bf0c      	ite	eq
 800b9c2:	2301      	moveq	r3, #1
 800b9c4:	2300      	movne	r3, #0
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 800b9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800b9da:	687c      	ldr	r4, [r7, #4]
 800b9dc:	6838      	ldr	r0, [r7, #0]
 800b9de:	f7f7 fe93 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7f7 ff39 	bl	800385e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	f107 030c 	add.w	r3, r7, #12
 800b9f2:	4611      	mov	r1, r2
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f000 fda9 	bl	800c54c <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 800b9fa:	f107 030c 	add.w	r3, r7, #12
 800b9fe:	461a      	mov	r2, r3
 800ba00:	4629      	mov	r1, r5
 800ba02:	4620      	mov	r0, r4
 800ba04:	f000 fdb0 	bl	800c568 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 800ba08:	f107 030c 	add.w	r3, r7, #12
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7f7 fbb9 	bl	8003184 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800ba12:	6838      	ldr	r0, [r7, #0]
 800ba14:	f000 fdbc 	bl	800c590 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800ba18:	4605      	mov	r5, r0
 800ba1a:	6838      	ldr	r0, [r7, #0]
 800ba1c:	f000 fdc8 	bl	800c5b0 <_ZNKSt6vectorIfSaIfEE3endEv>
 800ba20:	4606      	mov	r6, r0
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7f7 fc50 	bl	80032ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800ba2e:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800ba30:	4622      	mov	r2, r4
 800ba32:	4631      	mov	r1, r6
 800ba34:	4628      	mov	r0, r5
 800ba36:	f000 fdcc 	bl	800c5d2 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 800ba3a:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	605a      	str	r2, [r3, #4]
      }
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4618      	mov	r0, r3
 800ba44:	3714      	adds	r7, #20
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba4a <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 800ba4a:	b480      	push	{r7}
 800ba4c:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800ba4e:	2300      	movs	r3, #0
 800ba50:	4618      	mov	r0, r3
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800ba5a:	b480      	push	{r7}
 800ba5c:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800ba5e:	2301      	movs	r3, #1
 800ba60:	4618      	mov	r0, r3
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <_ZSteqRKSaIfES1_>:
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800ba6a:	b480      	push	{r7}
 800ba6c:	b083      	sub	sp, #12
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	6039      	str	r1, [r7, #0]
      { return true; }
 800ba74:	2301      	movs	r3, #1
 800ba76:	4618      	mov	r0, r3
 800ba78:	370c      	adds	r7, #12
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr

0800ba82 <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800ba82:	b590      	push	{r4, r7, lr}
 800ba84:	b085      	sub	sp, #20
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	60f8      	str	r0, [r7, #12]
 800ba8a:	60b9      	str	r1, [r7, #8]
 800ba8c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	f000 fe0d 	bl	800c6ae <_ZSt12__miter_baseIPfET_S1_>
 800ba94:	4604      	mov	r4, r0
 800ba96:	68b8      	ldr	r0, [r7, #8]
 800ba98:	f000 fe09 	bl	800c6ae <_ZSt12__miter_baseIPfET_S1_>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	4619      	mov	r1, r3
 800baa2:	4620      	mov	r0, r4
 800baa4:	f000 fe0e 	bl	800c6c4 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 800baa8:	4603      	mov	r3, r0
    }
 800baaa:	4618      	mov	r0, r3
 800baac:	3714      	adds	r7, #20
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd90      	pop	{r4, r7, pc}

0800bab2 <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 800bab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bab4:	b085      	sub	sp, #20
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
 800baba:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 800babc:	683a      	ldr	r2, [r7, #0]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	f000 80e9 	beq.w	800bc98 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e6>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800bac6:	f7ff ffc0 	bl	800ba4a <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d046      	beq.n	800bb5e <_ZNSt6vectorIfSaIfEEaSERKS1_+0xac>
	      if (!_Alloc_traits::_S_always_equal()
 800bad0:	f7ff ffc3 	bl	800ba5a <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>
 800bad4:	4603      	mov	r3, r0
 800bad6:	f083 0301 	eor.w	r3, r3, #1
 800bada:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 800badc:	2b00      	cmp	r3, #0
 800bade:	d015      	beq.n	800bb0c <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7f7 fbf3 	bl	80032ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800bae8:	4604      	mov	r4, r0
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	4618      	mov	r0, r3
 800baee:	f7f7 feb6 	bl	800385e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800baf2:	4603      	mov	r3, r0
 800baf4:	4619      	mov	r1, r3
 800baf6:	4620      	mov	r0, r4
 800baf8:	f7ff ffb7 	bl	800ba6a <_ZSteqRKSaIfES1_>
 800bafc:	4603      	mov	r3, r0
 800bafe:	f083 0301 	eor.w	r3, r3, #1
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d001      	beq.n	800bb0c <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 800bb08:	2301      	movs	r3, #1
 800bb0a:	e000      	b.n	800bb0e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5c>
 800bb0c:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d017      	beq.n	800bb42 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x90>
		  this->clear();
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7f7 fb75 	bl	8003202 <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	f7f7 fbbc 	bl	80032a8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7f7 fbc2 	bl	80032ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800bb4a:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7f7 fe85 	bl	800385e <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800bb54:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800bb56:	4619      	mov	r1, r3
 800bb58:	4620      	mov	r0, r4
 800bb5a:	f000 fd4b 	bl	800c5f4 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	  const size_type __xlen = __x.size();
 800bb5e:	6838      	ldr	r0, [r7, #0]
 800bb60:	f7f7 fdd2 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800bb64:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fd4f 	bl	800c60a <_ZNKSt6vectorIfSaIfEE8capacityEv>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	4293      	cmp	r3, r2
 800bb72:	bf8c      	ite	hi
 800bb74:	2301      	movhi	r3, #1
 800bb76:	2300      	movls	r3, #0
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d032      	beq.n	800bbe4 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x132>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 800bb7e:	6838      	ldr	r0, [r7, #0]
 800bb80:	f000 fd06 	bl	800c590 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800bb84:	4604      	mov	r4, r0
 800bb86:	6838      	ldr	r0, [r7, #0]
 800bb88:	f000 fd12 	bl	800c5b0 <_ZNKSt6vectorIfSaIfEE3endEv>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	4622      	mov	r2, r4
 800bb90:	68f9      	ldr	r1, [r7, #12]
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 fd49 	bl	800c62a <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 800bb98:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681c      	ldr	r4, [r3, #0]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7f7 fb92 	bl	80032ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800bbaa:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bbac:	461a      	mov	r2, r3
 800bbae:	4629      	mov	r1, r5
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f7f7 fb97 	bl	80032e4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	1ad3      	subs	r3, r2, r3
 800bbc6:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800bbc8:	461a      	mov	r2, r3
 800bbca:	f7f7 fb6d 	bl	80032a8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	441a      	add	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	609a      	str	r2, [r3, #8]
 800bbe2:	e052      	b.n	800bc8a <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	  else if (size() >= __xlen)
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7f7 fd8f 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800bbea:	4602      	mov	r2, r0
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	bf94      	ite	ls
 800bbf2:	2301      	movls	r3, #1
 800bbf4:	2300      	movhi	r3, #0
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d020      	beq.n	800bc3e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18c>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800bbfc:	6838      	ldr	r0, [r7, #0]
 800bbfe:	f000 fcc7 	bl	800c590 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800bc02:	4604      	mov	r4, r0
 800bc04:	6838      	ldr	r0, [r7, #0]
 800bc06:	f000 fcd3 	bl	800c5b0 <_ZNKSt6vectorIfSaIfEE3endEv>
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f7f7 fcef 	bl	80035f0 <_ZNSt6vectorIfSaIfEE5beginEv>
 800bc12:	4603      	mov	r3, r0
 800bc14:	461a      	mov	r2, r3
 800bc16:	4629      	mov	r1, r5
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f000 fd22 	bl	800c662 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 800bc1e:	4604      	mov	r4, r0
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7f7 fbb5 	bl	8003390 <_ZNSt6vectorIfSaIfEE3endEv>
 800bc26:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7f7 fb4f 	bl	80032ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800bc30:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800bc32:	461a      	mov	r2, r3
 800bc34:	4629      	mov	r1, r5
 800bc36:	4620      	mov	r0, r4
 800bc38:	f000 fd2b 	bl	800c692 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 800bc3c:	e025      	b.n	800bc8a <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	681d      	ldr	r5, [r3, #0]
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	681c      	ldr	r4, [r3, #0]
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7f7 fd5e 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	18e1      	adds	r1, r4, r3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	461a      	mov	r2, r3
 800bc58:	4628      	mov	r0, r5
 800bc5a:	f7ff ff12 	bl	800ba82 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	681c      	ldr	r4, [r3, #0]
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f7f7 fd50 	bl	8003708 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7f7 fb28 	bl	80032ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800bc7e:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800bc80:	4632      	mov	r2, r6
 800bc82:	4629      	mov	r1, r5
 800bc84:	4620      	mov	r0, r4
 800bc86:	f000 fd40 	bl	800c70a <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	441a      	add	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	605a      	str	r2, [r3, #4]
      return *this;
 800bc98:	687b      	ldr	r3, [r7, #4]
    }
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bca2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b082      	sub	sp, #8
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 fd3e 	bl	800c72c <_ZNSaIN3jlb4EdgeEEC1Ev>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f000 fd46 	bl	800c744 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3708      	adds	r7, #8
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}

0800bcc2 <_ZNSaIN3jlb4EdgeEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800bcc2:	b480      	push	{r7}
 800bcc4:	b083      	sub	sp, #12
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4618      	mov	r0, r3
 800bcce:	370c      	adds	r7, #12
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	689a      	ldr	r2, [r3, #8]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	1ad3      	subs	r3, r2, r3
 800bcee:	10db      	asrs	r3, r3, #3
 800bcf0:	4a07      	ldr	r2, [pc, #28]	; (800bd10 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev+0x38>)
 800bcf2:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 fd37 	bl	800c76c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      }
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7f8 ffa3 	bl	8004c4c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	aaaaaaab 	.word	0xaaaaaaab

0800bd14 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800bd14:	b5b0      	push	{r4, r5, r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681c      	ldr	r4, [r3, #0]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 fd33 	bl	800c792 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800bd2c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bd2e:	461a      	mov	r2, r3
 800bd30:	4629      	mov	r1, r5
 800bd32:	4620      	mov	r0, r4
 800bd34:	f000 fd38 	bl	800c7a8 <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>
      }
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7ff ffcc 	bl	800bcd8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4618      	mov	r0, r3
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bdb0      	pop	{r4, r5, r7, pc}

0800bd4a <_ZNSt6vectorIcSaIcEEC1ERKS1_>:
      vector(const vector& __x)
 800bd4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd4c:	b085      	sub	sp, #20
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
 800bd52:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800bd54:	687c      	ldr	r4, [r7, #4]
 800bd56:	6838      	ldr	r0, [r7, #0]
 800bd58:	f000 fae7 	bl	800c32a <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f000 fd3d 	bl	800c7e0 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800bd66:	4602      	mov	r2, r0
 800bd68:	f107 030c 	add.w	r3, r7, #12
 800bd6c:	4611      	mov	r1, r2
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f000 fd28 	bl	800c7c4 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 800bd74:	f107 030c 	add.w	r3, r7, #12
 800bd78:	461a      	mov	r2, r3
 800bd7a:	4629      	mov	r1, r5
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f000 fd3a 	bl	800c7f6 <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>
 800bd82:	f107 030c 	add.w	r3, r7, #12
 800bd86:	4618      	mov	r0, r3
 800bd88:	f014 fb0f 	bl	80203aa <_ZNSaIcED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800bd8c:	6838      	ldr	r0, [r7, #0]
 800bd8e:	f000 fd46 	bl	800c81e <_ZNKSt6vectorIcSaIcEE5beginEv>
 800bd92:	4605      	mov	r5, r0
 800bd94:	6838      	ldr	r0, [r7, #0]
 800bd96:	f000 fd52 	bl	800c83e <_ZNKSt6vectorIcSaIcEE3endEv>
 800bd9a:	4606      	mov	r6, r0
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4618      	mov	r0, r3
 800bda4:	f000 fd5c 	bl	800c860 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800bda8:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800bdaa:	4622      	mov	r2, r4
 800bdac:	4631      	mov	r1, r6
 800bdae:	4628      	mov	r0, r5
 800bdb0:	f000 fd61 	bl	800c876 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>
 800bdb4:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	605a      	str	r2, [r3, #4]
      }
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3714      	adds	r7, #20
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bdc4 <_ZNSt6vectorIcSaIcEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800bdc4:	b5b0      	push	{r4, r5, r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681c      	ldr	r4, [r3, #0]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f000 fd42 	bl	800c860 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800bddc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bdde:	461a      	mov	r2, r3
 800bde0:	4629      	mov	r1, r5
 800bde2:	4620      	mov	r0, r4
 800bde4:	f000 fd58 	bl	800c898 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      }
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4618      	mov	r0, r3
 800bdec:	f000 fa68 	bl	800c2c0 <_ZNSt12_Vector_baseIcSaIcEED1Ev>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3708      	adds	r7, #8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bdb0      	pop	{r4, r5, r7, pc}

0800bdfa <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b082      	sub	sp, #8
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
 800be02:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800be04:	6838      	ldr	r0, [r7, #0]
 800be06:	f000 fd55 	bl	800c8b4 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 800be0a:	4603      	mov	r3, r0
 800be0c:	4619      	mov	r1, r3
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 fd5b 	bl	800c8ca <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800be14:	bf00      	nop
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fd83 	bl	800c930 <_ZNSaIN3jlb4NodeEEC1Ev>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f000 fd8b 	bl	800c948 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4618      	mov	r0, r3
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <_ZNSaIN3jlb4NodeEED1Ev>:
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4618      	mov	r0, r3
 800be48:	370c      	adds	r7, #12
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr
	...

0800be54 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	689a      	ldr	r2, [r3, #8]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	1ad3      	subs	r3, r2, r3
 800be6a:	10db      	asrs	r3, r3, #3
 800be6c:	4a07      	ldr	r2, [pc, #28]	; (800be8c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev+0x38>)
 800be6e:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800be72:	461a      	mov	r2, r3
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 fd7b 	bl	800c970 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      }
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7f8 ff6d 	bl	8004d5c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implD1Ev>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4618      	mov	r0, r3
 800be86:	3708      	adds	r7, #8
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	aaaaaaab 	.word	0xaaaaaaab

0800be90 <_ZNSt6vectorIN3jlb4NodeESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800be90:	b5b0      	push	{r4, r5, r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681c      	ldr	r4, [r3, #0]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f000 fd77 	bl	800c996 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800bea8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800beaa:	461a      	mov	r2, r3
 800beac:	4629      	mov	r1, r5
 800beae:	4620      	mov	r0, r4
 800beb0:	f000 fd7c 	bl	800c9ac <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      }
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7ff ffcc 	bl	800be54 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4618      	mov	r0, r3
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bdb0      	pop	{r4, r5, r7, pc}

0800bec6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b082      	sub	sp, #8
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
 800bece:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800bed0:	6838      	ldr	r0, [r7, #0]
 800bed2:	f000 fd79 	bl	800c9c8 <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>
 800bed6:	4603      	mov	r3, r0
 800bed8:	4619      	mov	r1, r3
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fd7f 	bl	800c9de <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800bee0:	bf00      	nop
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>:
      vector(initializer_list<value_type> __l,
 800bee8:	b5b0      	push	{r4, r5, r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	1d38      	adds	r0, r7, #4
 800bef2:	e880 0006 	stmia.w	r0, {r1, r2}
 800bef6:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6839      	ldr	r1, [r7, #0]
 800befc:	4618      	mov	r0, r3
 800befe:	f000 fda1 	bl	800ca44 <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 800bf02:	1d3b      	adds	r3, r7, #4
 800bf04:	4618      	mov	r0, r3
 800bf06:	f000 fdac 	bl	800ca62 <_ZNKSt16initializer_listIcE5beginEv>
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	1d3b      	adds	r3, r7, #4
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f000 fdb3 	bl	800ca7a <_ZNKSt16initializer_listIcE3endEv>
 800bf14:	4602      	mov	r2, r0
 800bf16:	462b      	mov	r3, r5
 800bf18:	4621      	mov	r1, r4
 800bf1a:	68f8      	ldr	r0, [r7, #12]
 800bf1c:	f000 fdd2 	bl	800cac4 <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>
      }
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	4618      	mov	r0, r3
 800bf24:	3718      	adds	r7, #24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bdb0      	pop	{r4, r5, r7, pc}

0800bf2a <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800bf2a:	b480      	push	{r7}
 800bf2c:	b083      	sub	sp, #12
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6819      	ldr	r1, [r3, #0]
 800bf38:	683a      	ldr	r2, [r7, #0]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	005b      	lsls	r3, r3, #1
 800bf3e:	4413      	add	r3, r2
 800bf40:	00db      	lsls	r3, r3, #3
 800bf42:	440b      	add	r3, r1
      }
 800bf44:	4618      	mov	r0, r3
 800bf46:	370c      	adds	r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implD1Ev>:
      struct _Deque_impl
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f7f7 f913 	bl	8003184 <_ZNSaIfED1Ev>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4618      	mov	r0, r3
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>:
      _Deque_base()
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 fdde 	bl	800cb34 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800bf78:	2100      	movs	r1, #0
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fdea 	bl	800cb54 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4618      	mov	r0, r3
 800bf84:	3708      	adds	r7, #8
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <_ZNSt11_Deque_baseIfSaIfEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b082      	sub	sp, #8
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d010      	beq.n	800bfbc <_ZNSt11_Deque_baseIfSaIfEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 fe37 	bl	800cc1a <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6819      	ldr	r1, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 fe49 	bl	800cc4e <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>
    }
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7ff ffc6 	bl	800bf50 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implD1Ev>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <_ZNSt5dequeIfSaIfEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b08a      	sub	sp, #40	; 0x28
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800bfd6:	f107 0308 	add.w	r3, r7, #8
 800bfda:	6879      	ldr	r1, [r7, #4]
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f000 f871 	bl	800c0c4 <_ZNSt5dequeIfSaIfEE5beginEv>
 800bfe2:	f107 0318 	add.w	r3, r7, #24
 800bfe6:	6879      	ldr	r1, [r7, #4]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f000 f87a 	bl	800c0e2 <_ZNSt5dequeIfSaIfEE3endEv>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4618      	mov	r0, r3
 800bff2:	f000 fe48 	bl	800cc86 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800bff6:	4603      	mov	r3, r0
 800bff8:	f107 0218 	add.w	r2, r7, #24
 800bffc:	f107 0108 	add.w	r1, r7, #8
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 fe4b 	bl	800cc9c <_ZNSt5dequeIfSaIfEE15_M_destroy_dataESt15_Deque_iteratorIfRfPfES5_RKS0_>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4618      	mov	r0, r3
 800c00a:	f7ff ffbe 	bl	800bf8a <_ZNSt11_Deque_baseIfSaIfEED1Ev>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4618      	mov	r0, r3
 800c012:	3728      	adds	r7, #40	; 0x28
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <_ZNSt5dequeIfSaIfEE9push_backERKf>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish._M_cur
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a1b      	ldr	r3, [r3, #32]
 800c02a:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d00c      	beq.n	800c04a <_ZNSt5dequeIfSaIfEE9push_backERKf+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	699b      	ldr	r3, [r3, #24]
 800c036:	683a      	ldr	r2, [r7, #0]
 800c038:	4619      	mov	r1, r3
 800c03a:	f7f7 f997 	bl	800336c <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	699b      	ldr	r3, [r3, #24]
 800c042:	1d1a      	adds	r2, r3, #4
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	619a      	str	r2, [r3, #24]
	  }
	else
	  _M_push_back_aux(__x);
      }
 800c048:	e003      	b.n	800c052 <_ZNSt5dequeIfSaIfEE9push_backERKf+0x3a>
	  _M_push_back_aux(__x);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fe33 	bl	800ccb8 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>
      }
 800c052:	bf00      	nop
 800c054:	3708      	adds	r7, #8
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <_ZNKSt5dequeIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b082      	sub	sp, #8
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f103 0218 	add.w	r2, r3, #24
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	3308      	adds	r3, #8
 800c06c:	4619      	mov	r1, r3
 800c06e:	4610      	mov	r0, r2
 800c070:	f000 fe66 	bl	800cd40 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>
 800c074:	4603      	mov	r3, r0
 800c076:	4618      	mov	r0, r3
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <_ZNSt5dequeIfSaIfEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 800c07e:	b580      	push	{r7, lr}
 800c080:	b082      	sub	sp, #8
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	691b      	ldr	r3, [r3, #16]
 800c08e:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 800c090:	429a      	cmp	r2, r3
 800c092:	d010      	beq.n	800c0b6 <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x38>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	4618      	mov	r0, r3
 800c098:	f000 fdf5 	bl	800cc86 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c09c:	4602      	mov	r2, r0
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	4610      	mov	r0, r2
 800c0a6:	f000 fe6f 	bl	800cd88 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	1d1a      	adds	r2, r3, #4
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 800c0b4:	e002      	b.n	800c0bc <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fe72 	bl	800cda0 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>
      }
 800c0bc:	bf00      	nop
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <_ZNSt5dequeIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	3308      	adds	r3, #8
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 fe8b 	bl	800cdf0 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <_ZNSt5dequeIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b082      	sub	sp, #8
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
 800c0ea:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	3318      	adds	r3, #24
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fe7c 	bl	800cdf0 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4618      	mov	r0, r3
 800c10c:	370c      	adds	r7, #12
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr

0800c116 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>:
   *  @return  The final sum.
   */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
 800c116:	b580      	push	{r7, lr}
 800c118:	ed2d 8b02 	vpush	{d8}
 800c11c:	b084      	sub	sp, #16
 800c11e:	af00      	add	r7, sp, #0
 800c120:	60f8      	str	r0, [r7, #12]
 800c122:	60b9      	str	r1, [r7, #8]
 800c124:	ed87 0a01 	vstr	s0, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      for (; __first != __last; ++__first)
 800c128:	68b9      	ldr	r1, [r7, #8]
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f000 fe7c 	bl	800ce28 <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>
 800c130:	4603      	mov	r3, r0
 800c132:	f083 0301 	eor.w	r3, r3, #1
 800c136:	b2db      	uxtb	r3, r3
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d014      	beq.n	800c166 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x50>
	__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;
 800c13c:	1d3b      	adds	r3, r7, #4
 800c13e:	4618      	mov	r0, r3
 800c140:	f7ff ffde 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c144:	4603      	mov	r3, r0
 800c146:	ed93 8a00 	vldr	s16, [r3]
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f000 fe9f 	bl	800ce8e <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>
 800c150:	4603      	mov	r3, r0
 800c152:	edd3 7a00 	vldr	s15, [r3]
 800c156:	ee78 7a27 	vadd.f32	s15, s16, s15
 800c15a:	edc7 7a01 	vstr	s15, [r7, #4]
      for (; __first != __last; ++__first)
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f000 fe76 	bl	800ce50 <_ZNSt15_Deque_iteratorIfRfPfEppEv>
 800c164:	e7e0      	b.n	800c128 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x12>
      return __init;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	ee07 3a90 	vmov	s15, r3
    }
 800c16c:	eeb0 0a67 	vmov.f32	s0, s15
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	ecbd 8b02 	vpop	{d8}
 800c178:	bd80      	pop	{r7, pc}

0800c17a <_ZSt3minIfET_St16initializer_listIS0_E>:
    min(initializer_list<_Tp> __l)
 800c17a:	b590      	push	{r4, r7, lr}
 800c17c:	b083      	sub	sp, #12
 800c17e:	af00      	add	r7, sp, #0
 800c180:	463b      	mov	r3, r7
 800c182:	e883 0003 	stmia.w	r3, {r0, r1}
    { return *std::min_element(__l.begin(), __l.end()); }
 800c186:	463b      	mov	r3, r7
 800c188:	4618      	mov	r0, r3
 800c18a:	f000 fe8c 	bl	800cea6 <_ZNKSt16initializer_listIfE5beginEv>
 800c18e:	4604      	mov	r4, r0
 800c190:	463b      	mov	r3, r7
 800c192:	4618      	mov	r0, r3
 800c194:	f000 fe93 	bl	800cebe <_ZNKSt16initializer_listIfE3endEv>
 800c198:	4603      	mov	r3, r0
 800c19a:	4619      	mov	r1, r3
 800c19c:	4620      	mov	r0, r4
 800c19e:	f000 fea0 	bl	800cee2 <_ZSt11min_elementIPKfET_S2_S2_>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	ee07 3a90 	vmov	s15, r3
 800c1aa:	eeb0 0a67 	vmov.f32	s0, s15
 800c1ae:	370c      	adds	r7, #12
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd90      	pop	{r4, r7, pc}

0800c1b4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	685a      	ldr	r2, [r3, #4]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	1ad3      	subs	r3, r2, r3
 800c1c6:	10db      	asrs	r3, r3, #3
 800c1c8:	4a04      	ldr	r2, [pc, #16]	; (800c1dc <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv+0x28>)
 800c1ca:	fb02 f303 	mul.w	r3, r2, r3
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	370c      	adds	r7, #12
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr
 800c1da:	bf00      	nop
 800c1dc:	aaaaaaab 	.word	0xaaaaaaab

0800c1e0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6819      	ldr	r1, [r3, #0]
 800c1ee:	683a      	ldr	r2, [r7, #0]
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	005b      	lsls	r3, r3, #1
 800c1f4:	4413      	add	r3, r2
 800c1f6:	00db      	lsls	r3, r3, #3
 800c1f8:	440b      	add	r3, r1
      }
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <_ZNSt6vectorIcSaIcEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800c206:	b580      	push	{r7, lr}
 800c208:	b084      	sub	sp, #16
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	f107 030c 	add.w	r3, r7, #12
 800c214:	4611      	mov	r1, r2
 800c216:	4618      	mov	r0, r3
 800c218:	f000 fe74 	bl	800cf04 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	4618      	mov	r0, r3
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <_ZNSt6vectorIcSaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c226:	b580      	push	{r7, lr}
 800c228:	b084      	sub	sp, #16
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	1d1a      	adds	r2, r3, #4
 800c232:	f107 030c 	add.w	r3, r7, #12
 800c236:	4611      	mov	r1, r2
 800c238:	4618      	mov	r0, r3
 800c23a:	f000 fe63 	bl	800cf04 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>:
    find(_InputIterator __first, _InputIterator __last,
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 fe65 	bl	800cf24 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 800c25a:	4603      	mov	r3, r0
 800c25c:	461a      	mov	r2, r3
 800c25e:	68b9      	ldr	r1, [r7, #8]
 800c260:	68f8      	ldr	r0, [r7, #12]
 800c262:	f000 fe6e 	bl	800cf42 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>
 800c266:	4603      	mov	r3, r0
    }
 800c268:	4618      	mov	r0, r3
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <_ZN9__gnu_cxxeqIPcS1_St6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800c270:	b590      	push	{r4, r7, lr}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f7fc fcb5 	bl	8008bea <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800c280:	4603      	mov	r3, r0
 800c282:	681c      	ldr	r4, [r3, #0]
 800c284:	6838      	ldr	r0, [r7, #0]
 800c286:	f7fc fcb0 	bl	8008bea <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800c28a:	4603      	mov	r3, r0
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	429c      	cmp	r4, r3
 800c290:	bf0c      	ite	eq
 800c292:	2301      	moveq	r3, #1
 800c294:	2300      	movne	r3, #0
 800c296:	b2db      	uxtb	r3, r3
 800c298:	4618      	mov	r0, r3
 800c29a:	370c      	adds	r7, #12
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd90      	pop	{r4, r7, pc}

0800c2a0 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f014 f87c 	bl	80203a6 <_ZNSaIcEC1Ev>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f000 fe5c 	bl	800cf6e <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <_ZNSt12_Vector_baseIcSaIcEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	689a      	ldr	r2, [r3, #8]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fe5c 	bl	800cf96 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      }
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fc ff5f 	bl	80091a4 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <_ZNSt6vectorIcSaIcEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fe5c 	bl	800cfbc <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc>
 800c304:	bf00      	nop
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <_ZNSt6vectorIcSaIcEE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4619      	mov	r1, r3
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 fe6e 	bl	800cffc <_ZNKSt6vectorIcSaIcEE11_M_data_ptrIcEEPT_S4_>
 800c320:	4603      	mov	r3, r0
 800c322:	4618      	mov	r0, r3
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c32a:	b480      	push	{r7}
 800c32c:	b083      	sub	sp, #12
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	685a      	ldr	r2, [r3, #4]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	1ad3      	subs	r3, r2, r3
 800c33c:	4618      	mov	r0, r3
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800c352:	6838      	ldr	r0, [r7, #0]
 800c354:	f7fc fc49 	bl	8008bea <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800c358:	4603      	mov	r3, r0
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	601a      	str	r2, [r3, #0]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4618      	mov	r0, r3
 800c364:	3708      	adds	r7, #8
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>:
	insert(const_iterator __position, _InputIterator __first,
 800c36a:	b590      	push	{r4, r7, lr}
 800c36c:	b08b      	sub	sp, #44	; 0x2c
 800c36e:	af02      	add	r7, sp, #8
 800c370:	60f8      	str	r0, [r7, #12]
 800c372:	60b9      	str	r1, [r7, #8]
 800c374:	607a      	str	r2, [r7, #4]
 800c376:	603b      	str	r3, [r7, #0]
	  difference_type __offset = __position - cbegin();
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f000 fe4b 	bl	800d014 <_ZNKSt6vectorIcSaIcEE6cbeginEv>
 800c37e:	4603      	mov	r3, r0
 800c380:	613b      	str	r3, [r7, #16]
 800c382:	f107 0210 	add.w	r2, r7, #16
 800c386:	f107 0308 	add.w	r3, r7, #8
 800c38a:	4611      	mov	r1, r2
 800c38c:	4618      	mov	r0, r3
 800c38e:	f000 fe51 	bl	800d034 <_ZN9__gnu_cxxmiIPKcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800c392:	61f8      	str	r0, [r7, #28]
	  _M_insert_dispatch(begin() + __offset,
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f7ff ff36 	bl	800c206 <_ZNSt6vectorIcSaIcEE5beginEv>
 800c39a:	4603      	mov	r3, r0
 800c39c:	617b      	str	r3, [r7, #20]
 800c39e:	f107 0314 	add.w	r3, r7, #20
 800c3a2:	69f9      	ldr	r1, [r7, #28]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f000 fe59 	bl	800d05c <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 800c3aa:	4601      	mov	r1, r0
 800c3ac:	f88d 4000 	strb.w	r4, [sp]
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f000 fe68 	bl	800d08a <_ZNSt6vectorIcSaIcEE18_M_insert_dispatchIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St12__false_type>
	  return begin() + __offset;
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f7ff ff23 	bl	800c206 <_ZNSt6vectorIcSaIcEE5beginEv>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	61bb      	str	r3, [r7, #24]
 800c3c4:	f107 0318 	add.w	r3, r7, #24
 800c3c8:	69f9      	ldr	r1, [r7, #28]
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f000 fe46 	bl	800d05c <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 800c3d0:	4603      	mov	r3, r0
	}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3724      	adds	r7, #36	; 0x24
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd90      	pop	{r4, r7, pc}

0800c3da <_ZSt7reverseIPbEvT_S1_>:
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
 800c3da:	b5b0      	push	{r4, r5, r7, lr}
 800c3dc:	b082      	sub	sp, #8
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
 800c3e2:	6039      	str	r1, [r7, #0]
      std::__reverse(__first, __last, std::__iterator_category(__first));
 800c3e4:	687c      	ldr	r4, [r7, #4]
 800c3e6:	1d3b      	adds	r3, r7, #4
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 fe66 	bl	800d0ba <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800c3ee:	462a      	mov	r2, r5
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f000 fe6b 	bl	800d0ce <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag>
    }
 800c3f8:	bf00      	nop
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bdb0      	pop	{r4, r5, r7, pc}

0800c400 <_ZSt12__miter_baseIPKcET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800c400:	b480      	push	{r7}
 800c402:	b083      	sub	sp, #12
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
    { return __it; }
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4618      	mov	r0, r3
 800c40c:	370c      	adds	r7, #12
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800c416:	b5b0      	push	{r4, r5, r7, lr}
 800c418:	b084      	sub	sp, #16
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	60b9      	str	r1, [r7, #8]
 800c420:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f000 fe73 	bl	800d10e <_ZSt12__niter_baseIPKcET_S2_>
 800c428:	4604      	mov	r4, r0
 800c42a:	68b8      	ldr	r0, [r7, #8]
 800c42c:	f000 fe6f 	bl	800d10e <_ZSt12__niter_baseIPKcET_S2_>
 800c430:	4605      	mov	r5, r0
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4618      	mov	r0, r3
 800c436:	f000 fe75 	bl	800d124 <_ZSt12__niter_baseIPcET_S1_>
 800c43a:	4603      	mov	r3, r0
 800c43c:	461a      	mov	r2, r3
 800c43e:	4629      	mov	r1, r5
 800c440:	4620      	mov	r0, r4
 800c442:	f000 fe86 	bl	800d152 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 800c446:	4602      	mov	r2, r0
 800c448:	1d3b      	adds	r3, r7, #4
 800c44a:	4611      	mov	r1, r2
 800c44c:	4618      	mov	r0, r3
 800c44e:	f000 fe74 	bl	800d13a <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 800c452:	4603      	mov	r3, r0
    }
 800c454:	4618      	mov	r0, r3
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bdb0      	pop	{r4, r5, r7, pc}

0800c45c <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800c464:	4618      	mov	r0, r3
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <_ZN9__gnu_cxxeqIPfS1_St6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800c470:	b590      	push	{r4, r7, lr}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f7f7 f905 	bl	800368a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800c480:	4603      	mov	r3, r0
 800c482:	681c      	ldr	r4, [r3, #0]
 800c484:	6838      	ldr	r0, [r7, #0]
 800c486:	f7f7 f900 	bl	800368a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800c48a:	4603      	mov	r3, r0
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	429c      	cmp	r4, r3
 800c490:	bf0c      	ite	eq
 800c492:	2301      	moveq	r3, #1
 800c494:	2300      	movne	r3, #0
 800c496:	b2db      	uxtb	r3, r3
 800c498:	4618      	mov	r0, r3
 800c49a:	370c      	adds	r7, #12
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd90      	pop	{r4, r7, pc}

0800c4a0 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800c4a0:	b5b0      	push	{r4, r5, r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800c4ac:	f107 0208 	add.w	r2, r7, #8
 800c4b0:	f107 030c 	add.w	r3, r7, #12
 800c4b4:	4611      	mov	r1, r2
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7ff ffda 	bl	800c470 <_ZN9__gnu_cxxeqIPfS1_St6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	f083 0301 	eor.w	r3, r3, #1
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d017      	beq.n	800c4f8 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x58>
				std::__lg(__last - __first) * 2,
 800c4c8:	f107 020c 	add.w	r2, r7, #12
 800c4cc:	f107 0308 	add.w	r3, r7, #8
 800c4d0:	4611      	mov	r1, r2
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7f7 f89c 	bl	8003610 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7f7 ff2b 	bl	8004336 <_ZSt4__lgi>
 800c4e0:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800c4e2:	005a      	lsls	r2, r3, #1
 800c4e4:	462b      	mov	r3, r5
 800c4e6:	68b9      	ldr	r1, [r7, #8]
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f000 fe42 	bl	800d172 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800c4ee:	4622      	mov	r2, r4
 800c4f0:	68b9      	ldr	r1, [r7, #8]
 800c4f2:	68f8      	ldr	r0, [r7, #12]
 800c4f4:	f000 fe74 	bl	800d1e0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800c4f8:	bf00      	nop
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bdb0      	pop	{r4, r5, r7, pc}

0800c500 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 800c500:	b590      	push	{r4, r7, lr}
 800c502:	b085      	sub	sp, #20
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 800c50c:	4618      	mov	r0, r3
 800c50e:	f000 fe9f 	bl	800d250 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_10_Iter_predIT_EES6_>
 800c512:	4622      	mov	r2, r4
 800c514:	68b9      	ldr	r1, [r7, #8]
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f000 fead 	bl	800d276 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_>
 800c51c:	4603      	mov	r3, r0
    }
 800c51e:	4618      	mov	r0, r3
 800c520:	3714      	adds	r7, #20
 800c522:	46bd      	mov	sp, r7
 800c524:	bd90      	pop	{r4, r7, pc}

0800c526 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE0_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 800c526:	b590      	push	{r4, r7, lr}
 800c528:	b085      	sub	sp, #20
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	60f8      	str	r0, [r7, #12]
 800c52e:	60b9      	str	r1, [r7, #8]
 800c530:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 800c532:	4618      	mov	r0, r3
 800c534:	f000 feb9 	bl	800d2aa <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_10_Iter_predIT_EES6_>
 800c538:	4622      	mov	r2, r4
 800c53a:	68b9      	ldr	r1, [r7, #8]
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f000 fec7 	bl	800d2d0 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_>
 800c542:	4603      	mov	r3, r0
    }
 800c544:	4618      	mov	r0, r3
 800c546:	3714      	adds	r7, #20
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd90      	pop	{r4, r7, pc}

0800c54c <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6839      	ldr	r1, [r7, #0]
 800c55a:	4618      	mov	r0, r3
 800c55c:	f000 fed2 	bl	800d304 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6879      	ldr	r1, [r7, #4]
 800c578:	4618      	mov	r0, r3
 800c57a:	f000 fed0 	bl	800d31e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800c57e:	68b9      	ldr	r1, [r7, #8]
 800c580:	68f8      	ldr	r0, [r7, #12]
 800c582:	f000 fede 	bl	800d342 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	4618      	mov	r0, r3
 800c58a:	3710      	adds	r7, #16
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	f107 030c 	add.w	r3, r7, #12
 800c59e:	4611      	mov	r1, r2
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f000 fee9 	bl	800d378 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	1d1a      	adds	r2, r3, #4
 800c5bc:	f107 030c 	add.w	r3, r7, #12
 800c5c0:	4611      	mov	r1, r2
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f000 fed8 	bl	800d378 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b084      	sub	sp, #16
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	60f8      	str	r0, [r7, #12]
 800c5da:	60b9      	str	r1, [r7, #8]
 800c5dc:	607a      	str	r2, [r7, #4]
 800c5de:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	68b9      	ldr	r1, [r7, #8]
 800c5e4:	68f8      	ldr	r0, [r7, #12]
 800c5e6:	f000 fed7 	bl	800d398 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
    }
 800c5fe:	bf00      	nop
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr

0800c60a <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800c60a:	b480      	push	{r7}
 800c60c:	b083      	sub	sp, #12
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	1ad3      	subs	r3, r2, r3
 800c61c:	109b      	asrs	r3, r3, #2
 800c61e:	4618      	mov	r0, r3
 800c620:	370c      	adds	r7, #12
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr

0800c62a <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b086      	sub	sp, #24
 800c62e:	af00      	add	r7, sp, #0
 800c630:	60f8      	str	r0, [r7, #12]
 800c632:	60b9      	str	r1, [r7, #8]
 800c634:	607a      	str	r2, [r7, #4]
 800c636:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	68b9      	ldr	r1, [r7, #8]
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7f6 fffc 	bl	800363a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800c642:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	4618      	mov	r0, r3
 800c648:	f7f6 fe41 	bl	80032ce <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c64c:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800c64e:	697a      	ldr	r2, [r7, #20]
 800c650:	6839      	ldr	r1, [r7, #0]
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f7ff ffbd 	bl	800c5d2 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 800c658:	697b      	ldr	r3, [r7, #20]
	}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3718      	adds	r7, #24
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 800c662:	b590      	push	{r4, r7, lr}
 800c664:	b085      	sub	sp, #20
 800c666:	af00      	add	r7, sp, #0
 800c668:	60f8      	str	r0, [r7, #12]
 800c66a:	60b9      	str	r1, [r7, #8]
 800c66c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800c66e:	68f8      	ldr	r0, [r7, #12]
 800c670:	f000 fea4 	bl	800d3bc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800c674:	4604      	mov	r4, r0
 800c676:	68b8      	ldr	r0, [r7, #8]
 800c678:	f000 fea0 	bl	800d3bc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800c67c:	4603      	mov	r3, r0
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	4619      	mov	r1, r3
 800c682:	4620      	mov	r0, r4
 800c684:	f000 fea5 	bl	800d3d2 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 800c688:	4603      	mov	r3, r0
    }
 800c68a:	4618      	mov	r0, r3
 800c68c:	3714      	adds	r7, #20
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd90      	pop	{r4, r7, pc}

0800c692 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c692:	b580      	push	{r7, lr}
 800c694:	b084      	sub	sp, #16
 800c696:	af00      	add	r7, sp, #0
 800c698:	60f8      	str	r0, [r7, #12]
 800c69a:	60b9      	str	r1, [r7, #8]
 800c69c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c69e:	68b9      	ldr	r1, [r7, #8]
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f000 feb7 	bl	800d414 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 800c6a6:	bf00      	nop
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 800c6ae:	b480      	push	{r7}
 800c6b0:	b083      	sub	sp, #12
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
    { return __it; }
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800c6c4:	b5b0      	push	{r4, r5, r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800c6d0:	68f8      	ldr	r0, [r7, #12]
 800c6d2:	f7f7 f91f 	bl	8003914 <_ZSt12__niter_baseIPfET_S1_>
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	68b8      	ldr	r0, [r7, #8]
 800c6da:	f7f7 f91b 	bl	8003914 <_ZSt12__niter_baseIPfET_S1_>
 800c6de:	4605      	mov	r5, r0
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7f7 f916 	bl	8003914 <_ZSt12__niter_baseIPfET_S1_>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f000 fea6 	bl	800d440 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	1d3b      	adds	r3, r7, #4
 800c6f8:	4611      	mov	r1, r2
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f000 feb0 	bl	800d460 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 800c700:	4603      	mov	r3, r0
    }
 800c702:	4618      	mov	r0, r3
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bdb0      	pop	{r4, r5, r7, pc}

0800c70a <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b084      	sub	sp, #16
 800c70e:	af00      	add	r7, sp, #0
 800c710:	60f8      	str	r0, [r7, #12]
 800c712:	60b9      	str	r1, [r7, #8]
 800c714:	607a      	str	r2, [r7, #4]
 800c716:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	68b9      	ldr	r1, [r7, #8]
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f000 feab 	bl	800d478 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 800c722:	4603      	mov	r3, r0
 800c724:	4618      	mov	r0, r3
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <_ZNSaIN3jlb4EdgeEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 feb1 	bl	800d49c <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	4618      	mov	r0, r3
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	601a      	str	r2, [r3, #0]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	605a      	str	r2, [r3, #4]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2200      	movs	r2, #0
 800c75c:	609a      	str	r2, [r3, #8]
	{ }
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4618      	mov	r0, r3
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	607a      	str	r2, [r7, #4]
	if (__p)
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d005      	beq.n	800c78a <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	68b9      	ldr	r1, [r7, #8]
 800c784:	4618      	mov	r0, r3
 800c786:	f000 fe94 	bl	800d4b2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>
      }
 800c78a:	bf00      	nop
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c792:	b480      	push	{r7}
 800c794:	b083      	sub	sp, #12
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	4618      	mov	r0, r3
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c7b4:	68b9      	ldr	r1, [r7, #8]
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	f000 fe9a 	bl	800d4f0 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>
    }
 800c7bc:	bf00      	nop
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6839      	ldr	r1, [r7, #0]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f000 fea2 	bl	800d51c <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	3708      	adds	r7, #8
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	370c      	adds	r7, #12
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f4:	4770      	bx	lr

0800c7f6 <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b084      	sub	sp, #16
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	60f8      	str	r0, [r7, #12]
 800c7fe:	60b9      	str	r1, [r7, #8]
 800c800:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	6879      	ldr	r1, [r7, #4]
 800c806:	4618      	mov	r0, r3
 800c808:	f000 fe95 	bl	800d536 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800c80c:	68b9      	ldr	r1, [r7, #8]
 800c80e:	68f8      	ldr	r0, [r7, #12]
 800c810:	f000 fea3 	bl	800d55a <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	4618      	mov	r0, r3
 800c818:	3710      	adds	r7, #16
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}

0800c81e <_ZNKSt6vectorIcSaIcEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800c81e:	b580      	push	{r7, lr}
 800c820:	b084      	sub	sp, #16
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	f107 030c 	add.w	r3, r7, #12
 800c82c:	4611      	mov	r1, r2
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 fead 	bl	800d58e <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	4618      	mov	r0, r3
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <_ZNKSt6vectorIcSaIcEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800c83e:	b580      	push	{r7, lr}
 800c840:	b084      	sub	sp, #16
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	1d1a      	adds	r2, r3, #4
 800c84a:	f107 030c 	add.w	r3, r7, #12
 800c84e:	4611      	mov	r1, r2
 800c850:	4618      	mov	r0, r3
 800c852:	f000 fe9c 	bl	800d58e <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	4618      	mov	r0, r3
 800c85a:	3710      	adds	r7, #16
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4618      	mov	r0, r3
 800c86c:	370c      	adds	r7, #12
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr

0800c876 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800c876:	b580      	push	{r7, lr}
 800c878:	b084      	sub	sp, #16
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	60f8      	str	r0, [r7, #12]
 800c87e:	60b9      	str	r1, [r7, #8]
 800c880:	607a      	str	r2, [r7, #4]
 800c882:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	68b9      	ldr	r1, [r7, #8]
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	f000 fe90 	bl	800d5ae <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 800c88e:	4603      	mov	r3, r0
 800c890:	4618      	mov	r0, r3
 800c892:	3710      	adds	r7, #16
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c8a4:	68b9      	ldr	r1, [r7, #8]
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	f000 fe93 	bl	800d5d2 <_ZSt8_DestroyIPcEvT_S1_>
    }
 800c8ac:	bf00      	nop
 800c8ae:	3710      	adds	r7, #16
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	370c      	adds	r7, #12
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800c8ca:	b5b0      	push	{r4, r5, r7, lr}
 800c8cc:	b082      	sub	sp, #8
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685a      	ldr	r2, [r3, #4]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d012      	beq.n	800c906 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800c8e0:	687c      	ldr	r4, [r7, #4]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	685d      	ldr	r5, [r3, #4]
 800c8e6:	6838      	ldr	r0, [r7, #0]
 800c8e8:	f000 fe89 	bl	800d5fe <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	f000 fee5 	bl	800d6c2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	f103 0218 	add.w	r2, r3, #24
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	605a      	str	r2, [r3, #4]
 800c904:	e00c      	b.n	800c920 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 feed 	bl	800d6e6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800c90c:	4604      	mov	r4, r0
 800c90e:	6838      	ldr	r0, [r7, #0]
 800c910:	f000 fe75 	bl	800d5fe <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c914:	4603      	mov	r3, r0
 800c916:	461a      	mov	r2, r3
 800c918:	4621      	mov	r1, r4
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fef4 	bl	800d708 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 ff7b 	bl	800d81c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>
 800c926:	4603      	mov	r3, r0
      }
 800c928:	4618      	mov	r0, r3
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bdb0      	pop	{r4, r5, r7, pc}

0800c930 <_ZNSaIN3jlb4NodeEEC1Ev>:
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 ff8a 	bl	800d852 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4618      	mov	r0, r3
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c948:	b480      	push	{r7}
 800c94a:	b083      	sub	sp, #12
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	601a      	str	r2, [r3, #0]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2200      	movs	r2, #0
 800c95a:	605a      	str	r2, [r3, #4]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	609a      	str	r2, [r3, #8]
	{ }
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4618      	mov	r0, r3
 800c966:	370c      	adds	r7, #12
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr

0800c970 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	607a      	str	r2, [r7, #4]
	if (__p)
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d005      	beq.n	800c98e <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	68b9      	ldr	r1, [r7, #8]
 800c988:	4618      	mov	r0, r3
 800c98a:	f000 ff6d 	bl	800d868 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>
      }
 800c98e:	bf00      	nop
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c996:	b480      	push	{r7}
 800c998:	b083      	sub	sp, #12
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	370c      	adds	r7, #12
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr

0800c9ac <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c9b8:	68b9      	ldr	r1, [r7, #8]
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	f000 ff73 	bl	800d8a6 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>
    }
 800c9c0:	bf00      	nop
 800c9c2:	3710      	adds	r7, #16
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	370c      	adds	r7, #12
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr

0800c9de <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800c9de:	b5b0      	push	{r4, r5, r7, lr}
 800c9e0:	b082      	sub	sp, #8
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
 800c9e6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	685a      	ldr	r2, [r3, #4]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d012      	beq.n	800ca1a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800c9f4:	687c      	ldr	r4, [r7, #4]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	685d      	ldr	r5, [r3, #4]
 800c9fa:	6838      	ldr	r0, [r7, #0]
 800c9fc:	f000 ff69 	bl	800d8d2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800ca00:	4603      	mov	r3, r0
 800ca02:	461a      	mov	r2, r3
 800ca04:	4629      	mov	r1, r5
 800ca06:	4620      	mov	r0, r4
 800ca08:	f000 ffa5 	bl	800d956 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	f103 0218 	add.w	r2, r3, #24
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	605a      	str	r2, [r3, #4]
 800ca18:	e00c      	b.n	800ca34 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f000 ffad 	bl	800d97a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 800ca20:	4604      	mov	r4, r0
 800ca22:	6838      	ldr	r0, [r7, #0]
 800ca24:	f000 ff55 	bl	800d8d2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 ffb4 	bl	800d99c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f001 f845 	bl	800dac4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>
 800ca3a:	4603      	mov	r3, r0
      }
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3708      	adds	r7, #8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bdb0      	pop	{r4, r5, r7, pc}

0800ca44 <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f000 fd6f 	bl	800d536 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3708      	adds	r7, #8
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <_ZNKSt16initializer_listIcE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800ca62:	b480      	push	{r7}
 800ca64:	b083      	sub	sp, #12
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	370c      	adds	r7, #12
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr

0800ca7a <_ZNKSt16initializer_listIcE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800ca7a:	b590      	push	{r4, r7, lr}
 800ca7c:	b083      	sub	sp, #12
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f7ff ffed 	bl	800ca62 <_ZNKSt16initializer_listIcE5beginEv>
 800ca88:	4604      	mov	r4, r0
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f001 f835 	bl	800dafa <_ZNKSt16initializer_listIcE4sizeEv>
 800ca90:	4603      	mov	r3, r0
 800ca92:	4423      	add	r3, r4
 800ca94:	4618      	mov	r0, r3
 800ca96:	370c      	adds	r7, #12
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd90      	pop	{r4, r7, pc}

0800ca9c <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800ca9c:	b5b0      	push	{r4, r5, r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800caa6:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800caa8:	1d3b      	adds	r3, r7, #4
 800caaa:	4618      	mov	r0, r3
 800caac:	f001 f831 	bl	800db12 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800cab0:	462a      	mov	r2, r5
 800cab2:	6839      	ldr	r1, [r7, #0]
 800cab4:	4620      	mov	r0, r4
 800cab6:	f001 f836 	bl	800db26 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800caba:	4603      	mov	r3, r0
    }
 800cabc:	4618      	mov	r0, r3
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bdb0      	pop	{r4, r5, r7, pc}

0800cac4 <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800cac4:	b590      	push	{r4, r7, lr}
 800cac6:	b087      	sub	sp, #28
 800cac8:	af00      	add	r7, sp, #0
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	607a      	str	r2, [r7, #4]
 800cad0:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800cad2:	6879      	ldr	r1, [r7, #4]
 800cad4:	68b8      	ldr	r0, [r7, #8]
 800cad6:	f7ff ffe1 	bl	800ca9c <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800cada:	4603      	mov	r3, r0
 800cadc:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800cade:	68fc      	ldr	r4, [r7, #12]
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7ff febc 	bl	800c860 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800cae8:	4603      	mov	r3, r0
 800caea:	4619      	mov	r1, r3
 800caec:	6978      	ldr	r0, [r7, #20]
 800caee:	f001 f829 	bl	800db44 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>
 800caf2:	4603      	mov	r3, r0
 800caf4:	4619      	mov	r1, r3
 800caf6:	4620      	mov	r0, r4
 800caf8:	f001 f84c 	bl	800db94 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800cafc:	4602      	mov	r2, r0
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	441a      	add	r2, r3
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7ff fea3 	bl	800c860 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800cb1a:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800cb1c:	4622      	mov	r2, r4
 800cb1e:	6879      	ldr	r1, [r7, #4]
 800cb20:	68b8      	ldr	r0, [r7, #8]
 800cb22:	f001 f84b 	bl	800dbbc <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>
 800cb26:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	605a      	str	r2, [r3, #4]
	}
 800cb2c:	bf00      	nop
 800cb2e:	371c      	adds	r7, #28
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd90      	pop	{r4, r7, pc}

0800cb34 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f7f6 fb93 	bl	8003268 <_ZNSaIfEC1Ev>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f001 f84a 	bl	800dbde <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>
	{ }
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 800cb54:	b590      	push	{r4, r7, lr}
 800cb56:	b089      	sub	sp, #36	; 0x24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800cb5e:	2004      	movs	r0, #4
 800cb60:	f7fb fb67 	bl	8008232 <_ZSt16__deque_buf_sizej>
 800cb64:	4602      	mov	r2, r0
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800cb70:	2308      	movs	r3, #8
 800cb72:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	3302      	adds	r3, #2
 800cb78:	613b      	str	r3, [r7, #16]
 800cb7a:	f107 0210 	add.w	r2, r7, #16
 800cb7e:	f107 030c 	add.w	r3, r7, #12
 800cb82:	4611      	mov	r1, r2
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7f6 fdcf 	bl	8003728 <_ZSt3maxIjERKT_S2_S2_>
 800cb8a:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	4619      	mov	r1, r3
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f001 f839 	bl	800dc10 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6859      	ldr	r1, [r3, #4]
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	1acb      	subs	r3, r1, r3
 800cbb0:	085b      	lsrs	r3, r3, #1
 800cbb2:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800cbb4:	4413      	add	r3, r2
 800cbb6:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	69ba      	ldr	r2, [r7, #24]
 800cbbe:	4413      	add	r3, r2
 800cbc0:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800cbc2:	697a      	ldr	r2, [r7, #20]
 800cbc4:	69b9      	ldr	r1, [r7, #24]
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f001 f83f 	bl	800dc4a <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	3308      	adds	r3, #8
 800cbd0:	69b9      	ldr	r1, [r7, #24]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f001 f853 	bl	800dc7e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f103 0218 	add.w	r2, r3, #24
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	3b04      	subs	r3, #4
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	f001 f84a 	bl	800dc7e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	68da      	ldr	r2, [r3, #12]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800cbf6:	2004      	movs	r0, #4
 800cbf8:	f7fb fb1b 	bl	8008232 <_ZSt16__deque_buf_sizej>
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc04:	fb01 f202 	mul.w	r2, r1, r2
 800cc08:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	619a      	str	r2, [r3, #24]
    }
 800cc12:	bf00      	nop
 800cc14:	3724      	adds	r7, #36	; 0x24
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd90      	pop	{r4, r7, pc}

0800cc1a <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b086      	sub	sp, #24
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	60f8      	str	r0, [r7, #12]
 800cc22:	60b9      	str	r1, [r7, #8]
 800cc24:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	617b      	str	r3, [r7, #20]
 800cc2a:	697a      	ldr	r2, [r7, #20]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d209      	bcs.n	800cc46 <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_+0x2c>
	_M_deallocate_node(*__n);
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4619      	mov	r1, r3
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	f001 f839 	bl	800dcb0 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	3304      	adds	r3, #4
 800cc42:	617b      	str	r3, [r7, #20]
 800cc44:	e7f1      	b.n	800cc2a <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_+0x10>
    }
 800cc46:	bf00      	nop
 800cc48:	3718      	adds	r7, #24
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800cc4e:	b580      	push	{r7, lr}
 800cc50:	b086      	sub	sp, #24
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	60f8      	str	r0, [r7, #12]
 800cc56:	60b9      	str	r1, [r7, #8]
 800cc58:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800cc5a:	f107 0314 	add.w	r3, r7, #20
 800cc5e:	68f9      	ldr	r1, [r7, #12]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f001 f838 	bl	800dcd6 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800cc66:	f107 0314 	add.w	r3, r7, #20
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	68b9      	ldr	r1, [r7, #8]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f001 f84d 	bl	800dd0e <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800cc74:	f107 0314 	add.w	r3, r7, #20
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f001 f83d 	bl	800dcf8 <_ZNSaIPfED1Ev>
      }
 800cc7e:	bf00      	nop
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800cc86:	b480      	push	{r7}
 800cc88:	b083      	sub	sp, #12
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	4618      	mov	r0, r3
 800cc92:	370c      	adds	r7, #12
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr

0800cc9c <_ZNSt5dequeIfSaIfEE15_M_destroy_dataESt15_Deque_iteratorIfRfPfES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800cc9c:	b480      	push	{r7}
 800cc9e:	b08d      	sub	sp, #52	; 0x34
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	607a      	str	r2, [r7, #4]
 800cca8:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 800ccaa:	bf00      	nop
 800ccac:	3734      	adds	r7, #52	; 0x34
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
	...

0800ccb8 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 800ccb8:	b5b0      	push	{r4, r5, r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7ff f9c9 	bl	800c05a <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800ccc8:	4604      	mov	r4, r0
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f001 f83e 	bl	800dd4c <_ZNKSt5dequeIfSaIfEE8max_sizeEv>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	429c      	cmp	r4, r3
 800ccd4:	bf0c      	ite	eq
 800ccd6:	2301      	moveq	r3, #1
 800ccd8:	2300      	movne	r3, #0
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d002      	beq.n	800cce6 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x2e>
	  __throw_length_error(
 800cce0:	4816      	ldr	r0, [pc, #88]	; (800cd3c <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x84>)
 800cce2:	f013 fb66 	bl	80203b2 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 800cce6:	2101      	movs	r1, #1
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f001 f840 	bl	800dd6e <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf4:	1d1c      	adds	r4, r3, #4
 800ccf6:	4610      	mov	r0, r2
 800ccf8:	f001 f854 	bl	800dda4 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 800cd00:	687c      	ldr	r4, [r7, #4]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	699d      	ldr	r5, [r3, #24]
 800cd06:	6838      	ldr	r0, [r7, #0]
 800cd08:	f7f6 fc10 	bl	800352c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	461a      	mov	r2, r3
 800cd10:	4629      	mov	r1, r5
 800cd12:	4620      	mov	r0, r4
 800cd14:	f7f6 fb2a 	bl	800336c <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f103 0218 	add.w	r2, r3, #24
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd22:	3304      	adds	r3, #4
 800cd24:	4619      	mov	r1, r3
 800cd26:	4610      	mov	r0, r2
 800cd28:	f000 ffa9 	bl	800dc7e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	69da      	ldr	r2, [r3, #28]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 800cd34:	bf00      	nop
 800cd36:	3708      	adds	r7, #8
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bdb0      	pop	{r4, r5, r7, pc}
 800cd3c:	08023ec0 	.word	0x08023ec0

0800cd40 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 800cd4a:	f001 f83d 	bl	800ddc8 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	68da      	ldr	r2, [r3, #12]
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	1ad3      	subs	r3, r2, r3
 800cd5c:	109b      	asrs	r3, r3, #2
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	fb01 f303 	mul.w	r3, r1, r3
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	6811      	ldr	r1, [r2, #0]
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	6852      	ldr	r2, [r2, #4]
 800cd6c:	1a8a      	subs	r2, r1, r2
 800cd6e:	1092      	asrs	r2, r2, #2
 800cd70:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 800cd72:	683a      	ldr	r2, [r7, #0]
 800cd74:	6891      	ldr	r1, [r2, #8]
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	6812      	ldr	r2, [r2, #0]
 800cd7a:	1a8a      	subs	r2, r1, r2
 800cd7c:	1092      	asrs	r2, r2, #2
 800cd7e:	4413      	add	r3, r2
      }
 800cd80:	4618      	mov	r0, r3
 800cd82:	3708      	adds	r7, #8
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800cd92:	6838      	ldr	r0, [r7, #0]
 800cd94:	f7f6 fd0e 	bl	80037b4 <_ZSt10destroy_atIfEvPT_>
	}
 800cd98:	bf00      	nop
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7ff ff6b 	bl	800cc86 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	4610      	mov	r0, r2
 800cdba:	f7ff ffe5 	bl	800cd88 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	4610      	mov	r0, r2
 800cdc8:	f000 ff72 	bl	800dcb0 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f103 0208 	add.w	r2, r3, #8
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	695b      	ldr	r3, [r3, #20]
 800cdd6:	3304      	adds	r3, #4
 800cdd8:	4619      	mov	r1, r3
 800cdda:	4610      	mov	r0, r2
 800cddc:	f000 ff4f 	bl	800dc7e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	68da      	ldr	r2, [r3, #12]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	609a      	str	r2, [r3, #8]
    }
 800cde8:	bf00      	nop
 800cdea:	3708      	adds	r7, #8
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 800cdf0:	b480      	push	{r7}
 800cdf2:	b083      	sub	sp, #12
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	605a      	str	r2, [r3, #4]
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	689a      	ldr	r2, [r3, #8]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	609a      	str	r2, [r3, #8]
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	68da      	ldr	r2, [r3, #12]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	60da      	str	r2, [r3, #12]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	370c      	adds	r7, #12
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	bf0c      	ite	eq
 800ce3e:	2301      	moveq	r3, #1
 800ce40:	2300      	movne	r3, #0
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	4618      	mov	r0, r3
 800ce46:	370c      	adds	r7, #12
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <_ZNSt15_Deque_iteratorIfRfPfEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
	++_M_cur;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	1d1a      	adds	r2, r3, #4
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	689b      	ldr	r3, [r3, #8]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d10a      	bne.n	800ce84 <_ZNSt15_Deque_iteratorIfRfPfEppEv+0x34>
	    _M_set_node(_M_node + 1);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	3304      	adds	r3, #4
 800ce74:	4619      	mov	r1, r3
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 ff01 	bl	800dc7e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    _M_cur = _M_first;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	685a      	ldr	r2, [r3, #4]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	601a      	str	r2, [r3, #0]
	return *this;
 800ce84:	687b      	ldr	r3, [r7, #4]
      }
 800ce86:	4618      	mov	r0, r3
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}

0800ce8e <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ce8e:	b480      	push	{r7}
 800ce90:	b083      	sub	sp, #12
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	370c      	adds	r7, #12
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr

0800cea6 <_ZNKSt16initializer_listIfE5beginEv>:
      begin() const noexcept { return _M_array; }
 800cea6:	b480      	push	{r7}
 800cea8:	b083      	sub	sp, #12
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	370c      	adds	r7, #12
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr

0800cebe <_ZNKSt16initializer_listIfE3endEv>:
      end() const noexcept { return begin() + size(); }
 800cebe:	b590      	push	{r4, r7, lr}
 800cec0:	b083      	sub	sp, #12
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	6078      	str	r0, [r7, #4]
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7ff ffed 	bl	800cea6 <_ZNKSt16initializer_listIfE5beginEv>
 800cecc:	4604      	mov	r4, r0
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 ff82 	bl	800ddd8 <_ZNKSt16initializer_listIfE4sizeEv>
 800ced4:	4603      	mov	r3, r0
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	4423      	add	r3, r4
 800ceda:	4618      	mov	r0, r3
 800cedc:	370c      	adds	r7, #12
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd90      	pop	{r4, r7, pc}

0800cee2 <_ZSt11min_elementIPKfET_S2_S2_>:
   *  @return  Iterator referencing the first instance of the smallest value.
  */
  template<typename _ForwardIterator>
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
 800cee2:	b590      	push	{r4, r7, lr}
 800cee4:	b083      	sub	sp, #12
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
 800ceea:	6039      	str	r1, [r7, #0]
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      return _GLIBCXX_STD_A::__min_element(__first, __last,
				__gnu_cxx::__ops::__iter_less_iter());
 800ceec:	f7f7 fa10 	bl	8004310 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__min_element(__first, __last,
 800cef0:	4622      	mov	r2, r4
 800cef2:	6839      	ldr	r1, [r7, #0]
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f000 ff95 	bl	800de24 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>
 800cefa:	4603      	mov	r3, r0
    }
 800cefc:	4618      	mov	r0, r3
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd90      	pop	{r4, r7, pc}

0800cf04 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	601a      	str	r2, [r3, #0]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 800cf2c:	f107 030c 	add.w	r3, r7, #12
 800cf30:	6879      	ldr	r1, [r7, #4]
 800cf32:	4618      	mov	r0, r3
 800cf34:	f000 ffa1 	bl	800de7a <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3710      	adds	r7, #16
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}

0800cf42 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>:
    }

  template<typename _Iterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 800cf42:	b590      	push	{r4, r7, lr}
 800cf44:	b085      	sub	sp, #20
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	60f8      	str	r0, [r7, #12]
 800cf4a:	60b9      	str	r1, [r7, #8]
 800cf4c:	607a      	str	r2, [r7, #4]
    {
      return __find_if(__first, __last, __pred,
		       std::__iterator_category(__first));
 800cf4e:	f107 030c 	add.w	r3, r7, #12
 800cf52:	4618      	mov	r0, r3
 800cf54:	f000 ffa0 	bl	800de98 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return __find_if(__first, __last, __pred,
 800cf58:	4623      	mov	r3, r4
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	68b9      	ldr	r1, [r7, #8]
 800cf5e:	68f8      	ldr	r0, [r7, #12]
 800cf60:	f000 ffeb 	bl	800df3a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>
 800cf64:	4603      	mov	r3, r0
    }
 800cf66:	4618      	mov	r0, r3
 800cf68:	3714      	adds	r7, #20
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd90      	pop	{r4, r7, pc}

0800cf6e <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800cf6e:	b480      	push	{r7}
 800cf70:	b083      	sub	sp, #12
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	601a      	str	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	605a      	str	r2, [r3, #4]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2200      	movs	r2, #0
 800cf86:	609a      	str	r2, [r3, #8]
	{ }
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	370c      	adds	r7, #12
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr

0800cf96 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>:
      _M_deallocate(pointer __p, size_t __n)
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b084      	sub	sp, #16
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	60f8      	str	r0, [r7, #12]
 800cf9e:	60b9      	str	r1, [r7, #8]
 800cfa0:	607a      	str	r2, [r7, #4]
	if (__p)
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d005      	beq.n	800cfb4 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	68b9      	ldr	r1, [r7, #8]
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f001 f85c 	bl	800e06c <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 800cfb4:	bf00      	nop
 800cfb6:	3710      	adds	r7, #16
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800cfbc:	b590      	push	{r4, r7, lr}
 800cfbe:	b085      	sub	sp, #20
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	685a      	ldr	r2, [r3, #4]
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	1ad3      	subs	r3, r2, r3
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d00e      	beq.n	800cff4 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc+0x38>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7ff fc3f 	bl	800c860 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800cfe2:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	4621      	mov	r1, r4
 800cfe8:	6838      	ldr	r0, [r7, #0]
 800cfea:	f7ff fc55 	bl	800c898 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	683a      	ldr	r2, [r7, #0]
 800cff2:	605a      	str	r2, [r3, #4]
      }
 800cff4:	bf00      	nop
 800cff6:	3714      	adds	r7, #20
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd90      	pop	{r4, r7, pc}

0800cffc <_ZNKSt6vectorIcSaIcEE11_M_data_ptrIcEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	4618      	mov	r0, r3
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <_ZNKSt6vectorIcSaIcEE6cbeginEv>:
      cbegin() const noexcept
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	f107 030c 	add.w	r3, r7, #12
 800d022:	4611      	mov	r1, r2
 800d024:	4618      	mov	r0, r3
 800d026:	f000 fab2 	bl	800d58e <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	4618      	mov	r0, r3
 800d02e:	3710      	adds	r7, #16
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <_ZN9__gnu_cxxmiIPKcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800d034:	b590      	push	{r4, r7, lr}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f001 f833 	bl	800e0aa <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800d044:	4603      	mov	r3, r0
 800d046:	681c      	ldr	r4, [r3, #0]
 800d048:	6838      	ldr	r0, [r7, #0]
 800d04a:	f001 f82e 	bl	800e0aa <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800d04e:	4603      	mov	r3, r0
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	1ae3      	subs	r3, r4, r3
 800d054:	4618      	mov	r0, r3
 800d056:	370c      	adds	r7, #12
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd90      	pop	{r4, r7, pc}

0800d05c <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	4413      	add	r3, r2
 800d06e:	60fb      	str	r3, [r7, #12]
 800d070:	f107 020c 	add.w	r2, r7, #12
 800d074:	f107 0308 	add.w	r3, r7, #8
 800d078:	4611      	mov	r1, r2
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7ff ff42 	bl	800cf04 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	4618      	mov	r0, r3
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <_ZNSt6vectorIcSaIcEE18_M_insert_dispatchIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St12__false_type>:
	_M_insert_dispatch(iterator __pos, _InputIterator __first,
 800d08a:	b5b0      	push	{r4, r5, r7, lr}
 800d08c:	b088      	sub	sp, #32
 800d08e:	af02      	add	r7, sp, #8
 800d090:	60f8      	str	r0, [r7, #12]
 800d092:	60b9      	str	r1, [r7, #8]
 800d094:	607a      	str	r2, [r7, #4]
 800d096:	603b      	str	r3, [r7, #0]
	  _M_range_insert(__pos, __first, __last,
 800d098:	687c      	ldr	r4, [r7, #4]
			  std::__iterator_category(__first));
 800d09a:	1d3b      	adds	r3, r7, #4
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7ff f9dd 	bl	800c45c <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
	  _M_range_insert(__pos, __first, __last,
 800d0a2:	f88d 5000 	strb.w	r5, [sp]
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	4622      	mov	r2, r4
 800d0aa:	68b9      	ldr	r1, [r7, #8]
 800d0ac:	68f8      	ldr	r0, [r7, #12]
 800d0ae:	f001 f84b 	bl	800e148 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>
	}
 800d0b2:	bf00      	nop
 800d0b4:	3718      	adds	r7, #24
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bdb0      	pop	{r4, r5, r7, pc}

0800d0ba <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 800d0ba:	b480      	push	{r7}
 800d0bc:	b083      	sub	sp, #12
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	370c      	adds	r7, #12
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr

0800d0ce <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag>:
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b084      	sub	sp, #16
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	60f8      	str	r0, [r7, #12]
 800d0d6:	60b9      	str	r1, [r7, #8]
 800d0d8:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800d0da:	68fa      	ldr	r2, [r7, #12]
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d011      	beq.n	800d106 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x38>
      --__last;
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	3b01      	subs	r3, #1
 800d0e6:	60bb      	str	r3, [r7, #8]
      while (__first < __last)
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d20b      	bcs.n	800d108 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x3a>
	  std::iter_swap(__first, __last);
 800d0f0:	68b9      	ldr	r1, [r7, #8]
 800d0f2:	68f8      	ldr	r0, [r7, #12]
 800d0f4:	f001 f930 	bl	800e358 <_ZSt9iter_swapIPbS0_EvT_T0_>
	  ++__first;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	60fb      	str	r3, [r7, #12]
	  --__last;
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	3b01      	subs	r3, #1
 800d102:	60bb      	str	r3, [r7, #8]
      while (__first < __last)
 800d104:	e7f0      	b.n	800d0e8 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x1a>
	return;
 800d106:	bf00      	nop
    }
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <_ZSt12__niter_baseIPKcET_S2_>:
    __niter_base(_Iterator __it)
 800d10e:	b480      	push	{r7}
 800d110:	b083      	sub	sp, #12
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	4618      	mov	r0, r3
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	4618      	mov	r0, r3
 800d130:	370c      	adds	r7, #12
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr

0800d13a <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800d13a:	b480      	push	{r7}
 800d13c:	b083      	sub	sp, #12
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
 800d142:	6039      	str	r1, [r7, #0]
    { return __res; }
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	4618      	mov	r0, r3
 800d148:	370c      	adds	r7, #12
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr

0800d152 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800d152:	b580      	push	{r7, lr}
 800d154:	b084      	sub	sp, #16
 800d156:	af00      	add	r7, sp, #0
 800d158:	60f8      	str	r0, [r7, #12]
 800d15a:	60b9      	str	r1, [r7, #8]
 800d15c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	68b9      	ldr	r1, [r7, #8]
 800d162:	68f8      	ldr	r0, [r7, #12]
 800d164:	f001 f905 	bl	800e372 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>
 800d168:	4603      	mov	r3, r0
 800d16a:	4618      	mov	r0, r3
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800d172:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d174:	b087      	sub	sp, #28
 800d176:	af00      	add	r7, sp, #0
 800d178:	60f8      	str	r0, [r7, #12]
 800d17a:	60b9      	str	r1, [r7, #8]
 800d17c:	607a      	str	r2, [r7, #4]
 800d17e:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800d180:	f107 020c 	add.w	r2, r7, #12
 800d184:	f107 0308 	add.w	r3, r7, #8
 800d188:	4611      	mov	r1, r2
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7f6 fa40 	bl	8003610 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800d190:	4603      	mov	r3, r0
 800d192:	2b10      	cmp	r3, #16
 800d194:	bfcc      	ite	gt
 800d196:	2301      	movgt	r3, #1
 800d198:	2300      	movle	r3, #0
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d01c      	beq.n	800d1da <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  if (__depth_limit == 0)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d106      	bne.n	800d1b4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x42>
	      std::__partial_sort(__first, __last, __last, __comp);
 800d1a6:	4633      	mov	r3, r6
 800d1a8:	68ba      	ldr	r2, [r7, #8]
 800d1aa:	68b9      	ldr	r1, [r7, #8]
 800d1ac:	68f8      	ldr	r0, [r7, #12]
 800d1ae:	f001 f91b 	bl	800e3e8 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 800d1b2:	e012      	b.n	800d1da <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	3b01      	subs	r3, #1
 800d1b8:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800d1ba:	462a      	mov	r2, r5
 800d1bc:	68b9      	ldr	r1, [r7, #8]
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f001 f929 	bl	800e416 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800d1c8:	4623      	mov	r3, r4
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	68b9      	ldr	r1, [r7, #8]
 800d1ce:	6978      	ldr	r0, [r7, #20]
 800d1d0:	f7ff ffcf 	bl	800d172 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800d1d8:	e7d2      	b.n	800d180 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0xe>
    }
 800d1da:	371c      	adds	r7, #28
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d1e0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800d1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1e2:	b085      	sub	sp, #20
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800d1ec:	f107 020c 	add.w	r2, r7, #12
 800d1f0:	f107 0308 	add.w	r3, r7, #8
 800d1f4:	4611      	mov	r1, r2
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7f6 fa0a 	bl	8003610 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b10      	cmp	r3, #16
 800d200:	bfcc      	ite	gt
 800d202:	2301      	movgt	r3, #1
 800d204:	2300      	movle	r3, #0
 800d206:	b2db      	uxtb	r3, r3
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d018      	beq.n	800d23e <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800d20c:	f107 030c 	add.w	r3, r7, #12
 800d210:	2110      	movs	r1, #16
 800d212:	4618      	mov	r0, r3
 800d214:	f001 f93f 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d218:	4603      	mov	r3, r0
 800d21a:	4632      	mov	r2, r6
 800d21c:	4619      	mov	r1, r3
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f001 f9aa 	bl	800e578 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800d224:	f107 030c 	add.w	r3, r7, #12
 800d228:	2110      	movs	r1, #16
 800d22a:	4618      	mov	r0, r3
 800d22c:	f001 f933 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d230:	4603      	mov	r3, r0
 800d232:	462a      	mov	r2, r5
 800d234:	68b9      	ldr	r1, [r7, #8]
 800d236:	4618      	mov	r0, r3
 800d238:	f001 fa06 	bl	800e648 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800d23c:	e004      	b.n	800d248 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800d23e:	4622      	mov	r2, r4
 800d240:	68b9      	ldr	r1, [r7, #8]
 800d242:	68f8      	ldr	r0, [r7, #12]
 800d244:	f001 f998 	bl	800e578 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800d248:	bf00      	nop
 800d24a:	3714      	adds	r7, #20
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d250 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_10_Iter_predIT_EES6_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 800d250:	b5b0      	push	{r4, r5, r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800d258:	1d3b      	adds	r3, r7, #4
 800d25a:	4618      	mov	r0, r3
 800d25c:	f001 fa1b 	bl	800e696 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800d260:	f107 030c 	add.w	r3, r7, #12
 800d264:	4629      	mov	r1, r5
 800d266:	4618      	mov	r0, r3
 800d268:	f001 fa20 	bl	800e6ac <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>
 800d26c:	bf00      	nop
 800d26e:	4620      	mov	r0, r4
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	bdb0      	pop	{r4, r5, r7, pc}

0800d276 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 800d276:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d278:	b085      	sub	sp, #20
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	60f8      	str	r0, [r7, #12]
 800d27e:	60b9      	str	r1, [r7, #8]
 800d280:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800d282:	68fc      	ldr	r4, [r7, #12]
 800d284:	7938      	ldrb	r0, [r7, #4]
 800d286:	f001 fa1f 	bl	800e6c8 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 800d28a:	f107 030c 	add.w	r3, r7, #12
 800d28e:	4618      	mov	r0, r3
 800d290:	f7ff ff13 	bl	800d0ba <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 800d294:	4633      	mov	r3, r6
 800d296:	462a      	mov	r2, r5
 800d298:	68b9      	ldr	r1, [r7, #8]
 800d29a:	4620      	mov	r0, r4
 800d29c:	f001 fa3b 	bl	800e716 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>
 800d2a0:	4603      	mov	r3, r0
    }
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3714      	adds	r7, #20
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d2aa <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_10_Iter_predIT_EES6_>:
    __pred_iter(_Predicate __pred)
 800d2aa:	b5b0      	push	{r4, r5, r7, lr}
 800d2ac:	b084      	sub	sp, #16
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800d2b2:	1d3b      	adds	r3, r7, #4
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f001 faad 	bl	800e814 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 800d2ba:	f107 030c 	add.w	r3, r7, #12
 800d2be:	4629      	mov	r1, r5
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f001 fab2 	bl	800e82a <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>
 800d2c6:	bf00      	nop
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	3710      	adds	r7, #16
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bdb0      	pop	{r4, r5, r7, pc}

0800d2d0 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 800d2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2d2:	b085      	sub	sp, #20
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800d2dc:	68fc      	ldr	r4, [r7, #12]
 800d2de:	7938      	ldrb	r0, [r7, #4]
 800d2e0:	f001 fab1 	bl	800e846 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 800d2e4:	f107 030c 	add.w	r3, r7, #12
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7ff fee6 	bl	800d0ba <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 800d2ee:	4633      	mov	r3, r6
 800d2f0:	462a      	mov	r2, r5
 800d2f2:	68b9      	ldr	r1, [r7, #8]
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f001 facd 	bl	800e894 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>
 800d2fa:	4603      	mov	r3, r0
    }
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3714      	adds	r7, #20
 800d300:	46bd      	mov	sp, r7
 800d302:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d304 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800d30e:	6839      	ldr	r1, [r7, #0]
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f001 fb3e 	bl	800e992 <_ZNSaIfEC1ERKS_>
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	3708      	adds	r7, #8
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}

0800d31e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800d31e:	b580      	push	{r7, lr}
 800d320:	b082      	sub	sp, #8
 800d322:	af00      	add	r7, sp, #0
 800d324:	6078      	str	r0, [r7, #4]
 800d326:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800d328:	6839      	ldr	r1, [r7, #0]
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f001 fb31 	bl	800e992 <_ZNSaIfEC1ERKS_>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4618      	mov	r0, r3
 800d334:	f7f5 ffa4 	bl	8003280 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	4618      	mov	r0, r3
 800d33c:	3708      	adds	r7, #8
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}

0800d342 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800d342:	b580      	push	{r7, lr}
 800d344:	b082      	sub	sp, #8
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
 800d34a:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800d34c:	6839      	ldr	r1, [r7, #0]
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f7f6 f973 	bl	800363a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800d354:	4602      	mov	r2, r0
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	441a      	add	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	609a      	str	r2, [r3, #8]
      }
 800d370:	bf00      	nop
 800d372:	3708      	adds	r7, #8
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	4618      	mov	r0, r3
 800d38e:	370c      	adds	r7, #12
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800d398:	b580      	push	{r7, lr}
 800d39a:	b086      	sub	sp, #24
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	68b9      	ldr	r1, [r7, #8]
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f001 fafe 	bl	800e9ae <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 800d3b2:	4603      	mov	r3, r0
    }
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3718      	adds	r7, #24
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	370c      	adds	r7, #12
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr

0800d3d2 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800d3d2:	b5b0      	push	{r4, r5, r7, lr}
 800d3d4:	b084      	sub	sp, #16
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	60f8      	str	r0, [r7, #12]
 800d3da:	60b9      	str	r1, [r7, #8]
 800d3dc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800d3de:	68f8      	ldr	r0, [r7, #12]
 800d3e0:	f001 faf5 	bl	800e9ce <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	68b8      	ldr	r0, [r7, #8]
 800d3e8:	f001 faf1 	bl	800e9ce <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800d3ec:	4605      	mov	r5, r0
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f001 fafb 	bl	800e9ea <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	4629      	mov	r1, r5
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	f001 fb03 	bl	800ea06 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 800d400:	4603      	mov	r3, r0
 800d402:	4619      	mov	r1, r3
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f001 fb0e 	bl	800ea26 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 800d40a:	4603      	mov	r3, r0
    }
 800d40c:	4618      	mov	r0, r3
 800d40e:	3710      	adds	r7, #16
 800d410:	46bd      	mov	sp, r7
 800d412:	bdb0      	pop	{r4, r5, r7, pc}

0800d414 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800d41e:	f7f5 fa0b 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 800d422:	4603      	mov	r3, r0
 800d424:	2b00      	cmp	r3, #0
 800d426:	d004      	beq.n	800d432 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800d428:	6839      	ldr	r1, [r7, #0]
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f001 fb12 	bl	800ea54 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
 800d430:	e003      	b.n	800d43a <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x26>
	__destroy(__first, __last);
 800d432:	6839      	ldr	r1, [r7, #0]
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f001 fb33 	bl	800eaa0 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	68b9      	ldr	r1, [r7, #8]
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f001 fb30 	bl	800eab6 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 800d456:	4603      	mov	r3, r0
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
    { return __res; }
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	4618      	mov	r0, r3
 800d46e:	370c      	adds	r7, #12
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800d478:	b580      	push	{r7, lr}
 800d47a:	b086      	sub	sp, #24
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800d484:	2301      	movs	r3, #1
 800d486:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	68b9      	ldr	r1, [r7, #8]
 800d48c:	68f8      	ldr	r0, [r7, #12]
 800d48e:	f001 fb2f 	bl	800eaf0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 800d492:	4603      	mov	r3, r0
    }
 800d494:	4618      	mov	r0, r3
 800d496:	3718      	adds	r7, #24
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	370c      	adds	r7, #12
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr

0800d4b2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b088      	sub	sp, #32
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	60f8      	str	r0, [r7, #12]
 800d4ba:	60b9      	str	r1, [r7, #8]
 800d4bc:	607a      	str	r2, [r7, #4]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	61fb      	str	r3, [r7, #28]
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	61bb      	str	r3, [r7, #24]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800d4ca:	f7f5 f9b5 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d003      	beq.n	800d4dc <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800d4d4:	69b8      	ldr	r0, [r7, #24]
 800d4d6:	f012 ff51 	bl	802037c <_ZdlPv>
	    return;
 800d4da:	e005      	b.n	800d4e8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800d4dc:	697a      	ldr	r2, [r7, #20]
 800d4de:	69b9      	ldr	r1, [r7, #24]
 800d4e0:	69f8      	ldr	r0, [r7, #28]
 800d4e2:	f002 fb12 	bl	800fb0a <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800d4e6:	bf00      	nop
 800d4e8:	bf00      	nop
 800d4ea:	3720      	adds	r7, #32
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800d4fa:	f7f5 f99d 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d004      	beq.n	800d50e <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800d504:	6839      	ldr	r1, [r7, #0]
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f001 fb02 	bl	800eb10 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
 800d50c:	e003      	b.n	800d516 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x26>
	__destroy(__first, __last);
 800d50e:	6839      	ldr	r1, [r7, #0]
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f001 fafd 	bl	800eb10 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
    }
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800d526:	6839      	ldr	r1, [r7, #0]
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f012 ff3d 	bl	80203a8 <_ZNSaIcEC1ERKS_>
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	3708      	adds	r7, #8
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}

0800d536 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800d536:	b580      	push	{r7, lr}
 800d538:	b082      	sub	sp, #8
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
 800d53e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800d540:	6839      	ldr	r1, [r7, #0]
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f012 ff30 	bl	80203a8 <_ZNSaIcEC1ERKS_>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7ff fd0f 	bl	800cf6e <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4618      	mov	r0, r3
 800d554:	3708      	adds	r7, #8
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}

0800d55a <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800d55a:	b580      	push	{r7, lr}
 800d55c:	b082      	sub	sp, #8
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
 800d562:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800d564:	6839      	ldr	r1, [r7, #0]
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 fb14 	bl	800db94 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800d56c:	4602      	mov	r2, r0
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681a      	ldr	r2, [r3, #0]
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	441a      	add	r2, r3
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	609a      	str	r2, [r3, #8]
      }
 800d586:	bf00      	nop
 800d588:	3708      	adds	r7, #8
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}

0800d58e <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d58e:	b480      	push	{r7}
 800d590:	b083      	sub	sp, #12
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
 800d596:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	601a      	str	r2, [r3, #0]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	370c      	adds	r7, #12
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr

0800d5ae <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b086      	sub	sp, #24
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	60f8      	str	r0, [r7, #12]
 800d5b6:	60b9      	str	r1, [r7, #8]
 800d5b8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	68b9      	ldr	r1, [r7, #8]
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	f001 fabc 	bl	800eb40 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>
 800d5c8:	4603      	mov	r3, r0
    }
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3718      	adds	r7, #24
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <_ZSt8_DestroyIPcEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b082      	sub	sp, #8
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
 800d5da:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800d5dc:	f7f5 f92c 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d004      	beq.n	800d5f0 <_ZSt8_DestroyIPcEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800d5e6:	6839      	ldr	r1, [r7, #0]
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f001 fab9 	bl	800eb60 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>
 800d5ee:	e003      	b.n	800d5f8 <_ZSt8_DestroyIPcEvT_S1_+0x26>
	__destroy(__first, __last);
 800d5f0:	6839      	ldr	r1, [r7, #0]
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f001 facc 	bl	800eb90 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>
    }
 800d5f8:	3708      	adds	r7, #8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d5fe:	b480      	push	{r7}
 800d600:	b083      	sub	sp, #12
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	4618      	mov	r0, r3
 800d60a:	370c      	adds	r7, #12
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr

0800d614 <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	683a      	ldr	r2, [r7, #0]
 800d622:	4611      	mov	r1, r2
 800d624:	4618      	mov	r0, r3
 800d626:	f001 fabe 	bl	800eba6 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	4618      	mov	r0, r3
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <_ZNSt6vectorIcSaIcEEC1EOS1_>:
      vector(vector&&) noexcept = default;
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	683a      	ldr	r2, [r7, #0]
 800d642:	4611      	mov	r1, r2
 800d644:	4618      	mov	r0, r3
 800d646:	f7ff ffe5 	bl	800d614 <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4618      	mov	r0, r3
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <_ZN3jlb4EdgeC1EOS0_>:
    struct Edge
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	781a      	ldrb	r2, [r3, #0]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	701a      	strb	r2, [r3, #0]
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	685a      	ldr	r2, [r3, #4]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	605a      	str	r2, [r3, #4]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f103 0208 	add.w	r2, r3, #8
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	3308      	adds	r3, #8
 800d678:	4619      	mov	r1, r3
 800d67a:	4610      	mov	r0, r2
 800d67c:	f7ff ffda 	bl	800d634 <_ZNSt6vectorIcSaIcEEC1EOS1_>
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	695a      	ldr	r2, [r3, #20]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	615a      	str	r2, [r3, #20]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	4618      	mov	r0, r3
 800d68c:	3708      	adds	r7, #8
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800d692:	b5b0      	push	{r4, r5, r7, lr}
 800d694:	b082      	sub	sp, #8
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
 800d69a:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800d69c:	6838      	ldr	r0, [r7, #0]
 800d69e:	f7ff ffae 	bl	800d5fe <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d6a2:	4605      	mov	r5, r0
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	2018      	movs	r0, #24
 800d6aa:	f7f5 f8cd 	bl	8002848 <_ZnwjPv>
 800d6ae:	4604      	mov	r4, r0
 800d6b0:	4629      	mov	r1, r5
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	f7ff ffce 	bl	800d654 <_ZN3jlb4EdgeC1EOS0_>
 800d6b8:	4623      	mov	r3, r4
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3708      	adds	r7, #8
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bdb0      	pop	{r4, r5, r7, pc}

0800d6c2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800d6c2:	b580      	push	{r7, lr}
 800d6c4:	b084      	sub	sp, #16
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	60f8      	str	r0, [r7, #12]
 800d6ca:	60b9      	str	r1, [r7, #8]
 800d6cc:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7ff ff95 	bl	800d5fe <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	68b8      	ldr	r0, [r7, #8]
 800d6da:	f7ff ffda 	bl	800d692 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800d6de:	bf00      	nop
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}

0800d6e6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b084      	sub	sp, #16
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	1d1a      	adds	r2, r3, #4
 800d6f2:	f107 030c 	add.w	r3, r7, #12
 800d6f6:	4611      	mov	r1, r2
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f001 fa6f 	bl	800ebdc <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	4618      	mov	r0, r3
 800d702:	3710      	adds	r7, #16
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800d708:	b5b0      	push	{r4, r5, r7, lr}
 800d70a:	b08c      	sub	sp, #48	; 0x30
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800d714:	4a3f      	ldr	r2, [pc, #252]	; (800d814 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x10c>)
 800d716:	2101      	movs	r1, #1
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	f001 fa6f 	bl	800ebfc <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>
 800d71e:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f001 faac 	bl	800ec8a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800d732:	4603      	mov	r3, r0
 800d734:	617b      	str	r3, [r7, #20]
 800d736:	f107 0214 	add.w	r2, r7, #20
 800d73a:	f107 0308 	add.w	r3, r7, #8
 800d73e:	4611      	mov	r1, r2
 800d740:	4618      	mov	r0, r3
 800d742:	f001 fab3 	bl	800ecac <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800d746:	4603      	mov	r3, r0
 800d748:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d74e:	4618      	mov	r0, r3
 800d750:	f001 fac6 	bl	800ece0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 800d754:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800d756:	69fb      	ldr	r3, [r7, #28]
 800d758:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800d75a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800d75c:	6a3a      	ldr	r2, [r7, #32]
 800d75e:	4613      	mov	r3, r2
 800d760:	005b      	lsls	r3, r3, #1
 800d762:	4413      	add	r3, r2
 800d764:	00db      	lsls	r3, r3, #3
 800d766:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	189d      	adds	r5, r3, r2
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f7ff ff46 	bl	800d5fe <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d772:	4603      	mov	r3, r0
 800d774:	461a      	mov	r2, r3
 800d776:	4629      	mov	r1, r5
 800d778:	4620      	mov	r0, r4
 800d77a:	f7ff ffa2 	bl	800d6c2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800d77e:	2300      	movs	r3, #0
 800d780:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d782:	f107 0308 	add.w	r3, r7, #8
 800d786:	4618      	mov	r0, r3
 800d788:	f001 fad2 	bl	800ed30 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800d78c:	4603      	mov	r3, r0
 800d78e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	4618      	mov	r0, r3
 800d794:	f7fe fffd 	bl	800c792 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800d798:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d79a:	69fa      	ldr	r2, [r7, #28]
 800d79c:	4621      	mov	r1, r4
 800d79e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7a0:	f001 fab2 	bl	800ed08 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800d7a4:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	3318      	adds	r3, #24
 800d7aa:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d7ac:	f107 0308 	add.w	r3, r7, #8
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f001 fabd 	bl	800ed30 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7fe ffe8 	bl	800c792 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800d7c2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d7c4:	69ba      	ldr	r2, [r7, #24]
 800d7c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	f001 fa9d 	bl	800ed08 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800d7ce:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800d7d0:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	689a      	ldr	r2, [r3, #8]
 800d7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d8:	1ad3      	subs	r3, r2, r3
 800d7da:	10db      	asrs	r3, r3, #3
 800d7dc:	4a0e      	ldr	r2, [pc, #56]	; (800d818 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 800d7de:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7e6:	f7fe ffc1 	bl	800c76c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	69fa      	ldr	r2, [r7, #28]
 800d7ee:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	69ba      	ldr	r2, [r7, #24]
 800d7f4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800d7f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	005b      	lsls	r3, r3, #1
 800d7fc:	4413      	add	r3, r2
 800d7fe:	00db      	lsls	r3, r3, #3
 800d800:	461a      	mov	r2, r3
 800d802:	69fb      	ldr	r3, [r7, #28]
 800d804:	441a      	add	r2, r3
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	609a      	str	r2, [r3, #8]
    }
 800d80a:	bf00      	nop
 800d80c:	3730      	adds	r7, #48	; 0x30
 800d80e:	46bd      	mov	sp, r7
 800d810:	bdb0      	pop	{r4, r5, r7, pc}
 800d812:	bf00      	nop
 800d814:	08023ef0 	.word	0x08023ef0
 800d818:	aaaaaaab 	.word	0xaaaaaaab

0800d81c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f7ff ff5e 	bl	800d6e6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800d82a:	4603      	mov	r3, r0
 800d82c:	60fb      	str	r3, [r7, #12]
 800d82e:	f107 030c 	add.w	r3, r7, #12
 800d832:	2101      	movs	r1, #1
 800d834:	4618      	mov	r0, r3
 800d836:	f001 fa92 	bl	800ed5e <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>
 800d83a:	4603      	mov	r3, r0
 800d83c:	60bb      	str	r3, [r7, #8]
 800d83e:	f107 0308 	add.w	r3, r7, #8
 800d842:	4618      	mov	r0, r3
 800d844:	f001 faa7 	bl	800ed96 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 800d848:	4603      	mov	r3, r0
      }
 800d84a:	4618      	mov	r0, r3
 800d84c:	3710      	adds	r7, #16
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}

0800d852 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>:
 800d852:	b480      	push	{r7}
 800d854:	b083      	sub	sp, #12
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4618      	mov	r0, r3
 800d85e:	370c      	adds	r7, #12
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr

0800d868 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d868:	b580      	push	{r7, lr}
 800d86a:	b088      	sub	sp, #32
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	60f8      	str	r0, [r7, #12]
 800d870:	60b9      	str	r1, [r7, #8]
 800d872:	607a      	str	r2, [r7, #4]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	61fb      	str	r3, [r7, #28]
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	61bb      	str	r3, [r7, #24]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800d880:	f7f4 ffda 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 800d884:	4603      	mov	r3, r0
 800d886:	2b00      	cmp	r3, #0
 800d888:	d003      	beq.n	800d892 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800d88a:	69b8      	ldr	r0, [r7, #24]
 800d88c:	f012 fd76 	bl	802037c <_ZdlPv>
	    return;
 800d890:	e005      	b.n	800d89e <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800d892:	697a      	ldr	r2, [r7, #20]
 800d894:	69b9      	ldr	r1, [r7, #24]
 800d896:	69f8      	ldr	r0, [r7, #28]
 800d898:	f002 fa01 	bl	800fc9e <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800d89c:	bf00      	nop
 800d89e:	bf00      	nop
 800d8a0:	3720      	adds	r7, #32
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b082      	sub	sp, #8
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
 800d8ae:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800d8b0:	f7f4 ffc2 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d004      	beq.n	800d8c4 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800d8ba:	6839      	ldr	r1, [r7, #0]
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f001 fa76 	bl	800edae <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
 800d8c2:	e003      	b.n	800d8cc <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x26>
	__destroy(__first, __last);
 800d8c4:	6839      	ldr	r1, [r7, #0]
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f001 fa71 	bl	800edae <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
    }
 800d8cc:	3708      	adds	r7, #8
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d8d2:	b480      	push	{r7}
 800d8d4:	b083      	sub	sp, #12
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <_ZN3jlb4NodeC1ERKS0_>:
    class Node
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	781a      	ldrb	r2, [r3, #0]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	701a      	strb	r2, [r3, #0]
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	685a      	ldr	r2, [r3, #4]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	605a      	str	r2, [r3, #4]
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	689a      	ldr	r2, [r3, #8]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	609a      	str	r2, [r3, #8]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f103 020c 	add.w	r2, r3, #12
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	330c      	adds	r3, #12
 800d914:	4619      	mov	r1, r3
 800d916:	4610      	mov	r0, r2
 800d918:	f001 fa61 	bl	800edde <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	4618      	mov	r0, r3
 800d920:	3708      	adds	r7, #8
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800d926:	b5b0      	push	{r4, r5, r7, lr}
 800d928:	b082      	sub	sp, #8
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
 800d92e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800d930:	6838      	ldr	r0, [r7, #0]
 800d932:	f7ff ffce 	bl	800d8d2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d936:	4605      	mov	r5, r0
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4619      	mov	r1, r3
 800d93c:	2018      	movs	r0, #24
 800d93e:	f7f4 ff83 	bl	8002848 <_ZnwjPv>
 800d942:	4604      	mov	r4, r0
 800d944:	4629      	mov	r1, r5
 800d946:	4620      	mov	r0, r4
 800d948:	f7ff ffce 	bl	800d8e8 <_ZN3jlb4NodeC1ERKS0_>
 800d94c:	4623      	mov	r3, r4
 800d94e:	4618      	mov	r0, r3
 800d950:	3708      	adds	r7, #8
 800d952:	46bd      	mov	sp, r7
 800d954:	bdb0      	pop	{r4, r5, r7, pc}

0800d956 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800d956:	b580      	push	{r7, lr}
 800d958:	b084      	sub	sp, #16
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	60f8      	str	r0, [r7, #12]
 800d95e:	60b9      	str	r1, [r7, #8]
 800d960:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f7ff ffb5 	bl	800d8d2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d968:	4603      	mov	r3, r0
 800d96a:	4619      	mov	r1, r3
 800d96c:	68b8      	ldr	r0, [r7, #8]
 800d96e:	f7ff ffda 	bl	800d926 <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800d972:	bf00      	nop
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}

0800d97a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800d97a:	b580      	push	{r7, lr}
 800d97c:	b084      	sub	sp, #16
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	1d1a      	adds	r2, r3, #4
 800d986:	f107 030c 	add.w	r3, r7, #12
 800d98a:	4611      	mov	r1, r2
 800d98c:	4618      	mov	r0, r3
 800d98e:	f001 fa63 	bl	800ee58 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	4618      	mov	r0, r3
 800d996:	3710      	adds	r7, #16
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800d99c:	b5b0      	push	{r4, r5, r7, lr}
 800d99e:	b08c      	sub	sp, #48	; 0x30
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800d9a8:	4a44      	ldr	r2, [pc, #272]	; (800dabc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x120>)
 800d9aa:	2101      	movs	r1, #1
 800d9ac:	68f8      	ldr	r0, [r7, #12]
 800d9ae:	f001 fa63 	bl	800ee78 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>
 800d9b2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800d9c0:	68f8      	ldr	r0, [r7, #12]
 800d9c2:	f001 faa0 	bl	800ef06 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	617b      	str	r3, [r7, #20]
 800d9ca:	f107 0214 	add.w	r2, r7, #20
 800d9ce:	f107 0308 	add.w	r3, r7, #8
 800d9d2:	4611      	mov	r1, r2
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f001 faa7 	bl	800ef28 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f001 faba 	bl	800ef5c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>
 800d9e8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800d9ee:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800d9f0:	6a3a      	ldr	r2, [r7, #32]
 800d9f2:	4613      	mov	r3, r2
 800d9f4:	005b      	lsls	r3, r3, #1
 800d9f6:	4413      	add	r3, r2
 800d9f8:	00db      	lsls	r3, r3, #3
 800d9fa:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800d9fc:	69fb      	ldr	r3, [r7, #28]
 800d9fe:	189d      	adds	r5, r3, r2
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f7ff ff66 	bl	800d8d2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800da06:	4603      	mov	r3, r0
 800da08:	461a      	mov	r2, r3
 800da0a:	4629      	mov	r1, r5
 800da0c:	4620      	mov	r0, r4
 800da0e:	f7ff ffa2 	bl	800d956 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800da12:	2300      	movs	r3, #0
 800da14:	61bb      	str	r3, [r7, #24]
		(__old_start, __position.base(),
 800da16:	f107 0308 	add.w	r3, r7, #8
 800da1a:	4618      	mov	r0, r3
 800da1c:	f001 fab2 	bl	800ef84 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800da20:	4603      	mov	r3, r0
 800da22:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	4618      	mov	r0, r3
 800da28:	f7fe ffb5 	bl	800c996 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800da2c:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800da2e:	69fa      	ldr	r2, [r7, #28]
 800da30:	4621      	mov	r1, r4
 800da32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da34:	f001 fab1 	bl	800ef9a <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800da38:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	3318      	adds	r3, #24
 800da3e:	61bb      	str	r3, [r7, #24]
		(__position.base(), __old_finish,
 800da40:	f107 0308 	add.w	r3, r7, #8
 800da44:	4618      	mov	r0, r3
 800da46:	f001 fa9d 	bl	800ef84 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800da4a:	4603      	mov	r3, r0
 800da4c:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	4618      	mov	r0, r3
 800da52:	f7fe ffa0 	bl	800c996 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800da56:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800da58:	69ba      	ldr	r2, [r7, #24]
 800da5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da5c:	4620      	mov	r0, r4
 800da5e:	f001 fa9c 	bl	800ef9a <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800da62:	61b8      	str	r0, [r7, #24]
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	4618      	mov	r0, r3
 800da68:	f7fe ff95 	bl	800c996 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800da6c:	4603      	mov	r3, r0
 800da6e:	461a      	mov	r2, r3
 800da70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da74:	f7fe ff9a 	bl	800c9ac <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 800da78:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	689a      	ldr	r2, [r3, #8]
 800da7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da80:	1ad3      	subs	r3, r2, r3
 800da82:	10db      	asrs	r3, r3, #3
 800da84:	4a0e      	ldr	r2, [pc, #56]	; (800dac0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x124>)
 800da86:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800da8a:	461a      	mov	r2, r3
 800da8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da8e:	f7fe ff6f 	bl	800c970 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	69fa      	ldr	r2, [r7, #28]
 800da96:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	69ba      	ldr	r2, [r7, #24]
 800da9c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800da9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daa0:	4613      	mov	r3, r2
 800daa2:	005b      	lsls	r3, r3, #1
 800daa4:	4413      	add	r3, r2
 800daa6:	00db      	lsls	r3, r3, #3
 800daa8:	461a      	mov	r2, r3
 800daaa:	69fb      	ldr	r3, [r7, #28]
 800daac:	441a      	add	r2, r3
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	609a      	str	r2, [r3, #8]
    }
 800dab2:	bf00      	nop
 800dab4:	3730      	adds	r7, #48	; 0x30
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bdb0      	pop	{r4, r5, r7, pc}
 800daba:	bf00      	nop
 800dabc:	08023ef0 	.word	0x08023ef0
 800dac0:	aaaaaaab 	.word	0xaaaaaaab

0800dac4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f7ff ff54 	bl	800d97a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 800dad2:	4603      	mov	r3, r0
 800dad4:	60fb      	str	r3, [r7, #12]
 800dad6:	f107 030c 	add.w	r3, r7, #12
 800dada:	2101      	movs	r1, #1
 800dadc:	4618      	mov	r0, r3
 800dade:	f001 fa75 	bl	800efcc <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>
 800dae2:	4603      	mov	r3, r0
 800dae4:	60bb      	str	r3, [r7, #8]
 800dae6:	f107 0308 	add.w	r3, r7, #8
 800daea:	4618      	mov	r0, r3
 800daec:	f001 fa8a 	bl	800f004 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>
 800daf0:	4603      	mov	r3, r0
      }
 800daf2:	4618      	mov	r0, r3
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}

0800dafa <_ZNKSt16initializer_listIcE4sizeEv>:
      size() const noexcept { return _M_len; }
 800dafa:	b480      	push	{r7}
 800dafc:	b083      	sub	sp, #12
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	4618      	mov	r0, r3
 800db08:	370c      	adds	r7, #12
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr

0800db12 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800db12:	b480      	push	{r7}
 800db14:	b083      	sub	sp, #12
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800db1a:	4618      	mov	r0, r3
 800db1c:	370c      	adds	r7, #12
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr

0800db26 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800db26:	b480      	push	{r7}
 800db28:	b085      	sub	sp, #20
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	60f8      	str	r0, [r7, #12]
 800db2e:	60b9      	str	r1, [r7, #8]
 800db30:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800db32:	68ba      	ldr	r2, [r7, #8]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	1ad3      	subs	r3, r2, r3
    }
 800db38:	4618      	mov	r0, r3
 800db3a:	3714      	adds	r7, #20
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr

0800db44 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800db44:	b590      	push	{r4, r7, lr}
 800db46:	b085      	sub	sp, #20
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800db4e:	f107 030c 	add.w	r3, r7, #12
 800db52:	6839      	ldr	r1, [r7, #0]
 800db54:	4618      	mov	r0, r3
 800db56:	f012 fc27 	bl	80203a8 <_ZNSaIcEC1ERKS_>
 800db5a:	f107 030c 	add.w	r3, r7, #12
 800db5e:	4618      	mov	r0, r3
 800db60:	f001 fa68 	bl	800f034 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 800db64:	4602      	mov	r2, r0
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	4293      	cmp	r3, r2
 800db6a:	bf8c      	ite	hi
 800db6c:	2301      	movhi	r3, #1
 800db6e:	2300      	movls	r3, #0
 800db70:	b2dc      	uxtb	r4, r3
 800db72:	f107 030c 	add.w	r3, r7, #12
 800db76:	4618      	mov	r0, r3
 800db78:	f012 fc17 	bl	80203aa <_ZNSaIcED1Ev>
 800db7c:	2c00      	cmp	r4, #0
 800db7e:	d002      	beq.n	800db86 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 800db80:	4803      	ldr	r0, [pc, #12]	; (800db90 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x4c>)
 800db82:	f012 fc16 	bl	80203b2 <_ZSt20__throw_length_errorPKc>
	return __n;
 800db86:	687b      	ldr	r3, [r7, #4]
      }
 800db88:	4618      	mov	r0, r3
 800db8a:	3714      	adds	r7, #20
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd90      	pop	{r4, r7, pc}
 800db90:	08023f0c 	.word	0x08023f0c

0800db94 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d006      	beq.n	800dbb2 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x1e>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6839      	ldr	r1, [r7, #0]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f000 fbff 	bl	800e3ac <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	e000      	b.n	800dbb4 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x20>
 800dbb2:	2300      	movs	r3, #0
      }
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3708      	adds	r7, #8
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b084      	sub	sp, #16
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	607a      	str	r2, [r7, #4]
 800dbc8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	68b9      	ldr	r1, [r7, #8]
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f001 fa4a 	bl	800f068 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3710      	adds	r7, #16
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}

0800dbde <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 800dbde:	b580      	push	{r7, lr}
 800dbe0:	b082      	sub	sp, #8
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	601a      	str	r2, [r3, #0]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	605a      	str	r2, [r3, #4]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	3308      	adds	r3, #8
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f001 fa48 	bl	800f08c <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	3318      	adds	r3, #24
 800dc00:	4618      	mov	r0, r3
 800dc02:	f001 fa43 	bl	800f08c <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
	{ }
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800dc10:	b590      	push	{r4, r7, lr}
 800dc12:	b085      	sub	sp, #20
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800dc1a:	f107 030c 	add.w	r3, r7, #12
 800dc1e:	6879      	ldr	r1, [r7, #4]
 800dc20:	4618      	mov	r0, r3
 800dc22:	f000 f858 	bl	800dcd6 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800dc26:	f107 030c 	add.w	r3, r7, #12
 800dc2a:	6839      	ldr	r1, [r7, #0]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f001 fa44 	bl	800f0ba <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>
 800dc32:	4604      	mov	r4, r0
 800dc34:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800dc36:	f107 030c 	add.w	r3, r7, #12
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f000 f85c 	bl	800dcf8 <_ZNSaIPfED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800dc40:	4623      	mov	r3, r4
      }
 800dc42:	4618      	mov	r0, r3
 800dc44:	3714      	adds	r7, #20
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd90      	pop	{r4, r7, pc}

0800dc4a <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 800dc4a:	b580      	push	{r7, lr}
 800dc4c:	b086      	sub	sp, #24
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	60f8      	str	r0, [r7, #12]
 800dc52:	60b9      	str	r1, [r7, #8]
 800dc54:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	617b      	str	r3, [r7, #20]
 800dc5a:	697a      	ldr	r2, [r7, #20]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d209      	bcs.n	800dc76 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	f000 f89e 	bl	800dda4 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	3304      	adds	r3, #4
 800dc72:	617b      	str	r3, [r7, #20]
 800dc74:	e7f1      	b.n	800dc5a <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x10>
    }
 800dc76:	bf00      	nop
 800dc78:	3718      	adds	r7, #24
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 800dc7e:	b590      	push	{r4, r7, lr}
 800dc80:	b083      	sub	sp, #12
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
 800dc86:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	683a      	ldr	r2, [r7, #0]
 800dc8c:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	685c      	ldr	r4, [r3, #4]
 800dc9a:	f000 f895 	bl	800ddc8 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	18e2      	adds	r2, r4, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	609a      	str	r2, [r3, #8]
      }
 800dca8:	bf00      	nop
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd90      	pop	{r4, r7, pc}

0800dcb0 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800dcb0:	b590      	push	{r4, r7, lr}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800dcba:	687c      	ldr	r4, [r7, #4]
 800dcbc:	2004      	movs	r0, #4
 800dcbe:	f7fa fab8 	bl	8008232 <_ZSt16__deque_buf_sizej>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	6839      	ldr	r1, [r7, #0]
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f7f5 fbfa 	bl	80034c2 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 800dcce:	bf00      	nop
 800dcd0:	370c      	adds	r7, #12
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd90      	pop	{r4, r7, pc}

0800dcd6 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b082      	sub	sp, #8
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
 800dcde:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800dce0:	6838      	ldr	r0, [r7, #0]
 800dce2:	f001 fa0a 	bl	800f0fa <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800dce6:	4603      	mov	r3, r0
 800dce8:	4619      	mov	r1, r3
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f001 fa10 	bl	800f110 <_ZNSaIPfEC1IfEERKSaIT_E>
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	3708      	adds	r7, #8
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <_ZNSaIPfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	4618      	mov	r0, r3
 800dd04:	370c      	adds	r7, #12
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr

0800dd0e <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b088      	sub	sp, #32
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	60f8      	str	r0, [r7, #12]
 800dd16:	60b9      	str	r1, [r7, #8]
 800dd18:	607a      	str	r2, [r7, #4]
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	61fb      	str	r3, [r7, #28]
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	61bb      	str	r3, [r7, #24]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800dd26:	f7f4 fd87 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d003      	beq.n	800dd38 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 800dd30:	69b8      	ldr	r0, [r7, #24]
 800dd32:	f012 fb23 	bl	802037c <_ZdlPv>
	    return;
 800dd36:	e005      	b.n	800dd44 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800dd38:	697a      	ldr	r2, [r7, #20]
 800dd3a:	69b9      	ldr	r1, [r7, #24]
 800dd3c:	69f8      	ldr	r0, [r7, #28]
 800dd3e:	f002 f8c2 	bl	800fec6 <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 800dd42:	bf00      	nop
 800dd44:	bf00      	nop
 800dd46:	3720      	adds	r7, #32
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <_ZNKSt5dequeIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	4618      	mov	r0, r3
 800dd58:	f001 f9cf 	bl	800f0fa <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f001 f9e3 	bl	800f12a <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>
 800dd64:	4603      	mov	r3, r0
 800dd66:	4618      	mov	r0, r3
 800dd68:	3708      	adds	r7, #8
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b082      	sub	sp, #8
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
 800dd76:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	1c5a      	adds	r2, r3, #1
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800dd80:	6879      	ldr	r1, [r7, #4]
 800dd82:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800dd84:	6879      	ldr	r1, [r7, #4]
 800dd86:	6809      	ldr	r1, [r1, #0]
 800dd88:	1a41      	subs	r1, r0, r1
 800dd8a:	1089      	asrs	r1, r1, #2
 800dd8c:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d904      	bls.n	800dd9c <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 800dd92:	2200      	movs	r2, #0
 800dd94:	6839      	ldr	r1, [r7, #0]
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f001 fa11 	bl	800f1be <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>
      }
 800dd9c:	bf00      	nop
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800dda4:	b590      	push	{r4, r7, lr}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800ddac:	687c      	ldr	r4, [r7, #4]
 800ddae:	2004      	movs	r0, #4
 800ddb0:	f7fa fa3f 	bl	8008232 <_ZSt16__deque_buf_sizej>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f7f5 fcc9 	bl	8003750 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 800ddbe:	4603      	mov	r3, r0
      }
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd90      	pop	{r4, r7, pc}

0800ddc8 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800ddcc:	2004      	movs	r0, #4
 800ddce:	f7fa fa30 	bl	8008232 <_ZSt16__deque_buf_sizej>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <_ZNKSt16initializer_listIfE4sizeEv>:
 800ddd8:	b480      	push	{r7}
 800ddda:	b083      	sub	sp, #12
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	4618      	mov	r0, r3
 800dde6:	370c      	adds	r7, #12
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr

0800ddf0 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKfS4_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800ddf0:	b480      	push	{r7}
 800ddf2:	b085      	sub	sp, #20
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	ed93 7a00 	vldr	s14, [r3]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	edd3 7a00 	vldr	s15, [r3]
 800de08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de10:	bf4c      	ite	mi
 800de12:	2301      	movmi	r3, #1
 800de14:	2300      	movpl	r3, #0
 800de16:	b2db      	uxtb	r3, r3
 800de18:	4618      	mov	r0, r3
 800de1a:	3714      	adds	r7, #20
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>:
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	429a      	cmp	r2, r3
 800de36:	d101      	bne.n	800de3c <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x18>
	return __first;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	e01a      	b.n	800de72 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x4e>
      _ForwardIterator __result = __first;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	3304      	adds	r3, #4
 800de44:	60fb      	str	r3, [r7, #12]
 800de46:	68fa      	ldr	r2, [r7, #12]
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	bf14      	ite	ne
 800de4e:	2301      	movne	r3, #1
 800de50:	2300      	moveq	r3, #0
 800de52:	b2db      	uxtb	r3, r3
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00b      	beq.n	800de70 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x4c>
	if (__comp(__first, __result))
 800de58:	1d3b      	adds	r3, r7, #4
 800de5a:	697a      	ldr	r2, [r7, #20]
 800de5c:	68f9      	ldr	r1, [r7, #12]
 800de5e:	4618      	mov	r0, r3
 800de60:	f7ff ffc6 	bl	800ddf0 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKfS4_EEbT_T0_>
 800de64:	4603      	mov	r3, r0
 800de66:	2b00      	cmp	r3, #0
 800de68:	d0ea      	beq.n	800de40 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x1c>
	  __result = __first;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800de6e:	e7e7      	b.n	800de40 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x1c>
      return __result;
 800de70:	697b      	ldr	r3, [r7, #20]
    }
 800de72:	4618      	mov	r0, r3
 800de74:	3718      	adds	r7, #24
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 800de7a:	b480      	push	{r7}
 800de7c:	b083      	sub	sp, #12
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
 800de82:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	683a      	ldr	r2, [r7, #0]
 800de88:	601a      	str	r2, [r3, #0]
      { }
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	4618      	mov	r0, r3
 800de8e:	370c      	adds	r7, #12
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
    __iterator_category(const _Iter&)
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800dea0:	4618      	mov	r0, r3
 800dea2:	370c      	adds	r7, #12
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800deac:	b590      	push	{r4, r7, lr}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f7fa fe97 	bl	8008bea <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800debc:	4603      	mov	r3, r0
 800debe:	681c      	ldr	r4, [r3, #0]
 800dec0:	6838      	ldr	r0, [r7, #0]
 800dec2:	f7fa fe92 	bl	8008bea <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800dec6:	4603      	mov	r3, r0
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	1ae3      	subs	r3, r4, r3
 800decc:	4618      	mov	r0, r3
 800dece:	370c      	adds	r7, #12
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd90      	pop	{r4, r7, pc}

0800ded4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4618      	mov	r0, r3
 800dee2:	370c      	adds	r7, #12
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr

0800deec <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>:
	operator()(_Iterator __it)
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 800def6:	463b      	mov	r3, r7
 800def8:	4618      	mov	r0, r3
 800defa:	f7ff ffeb 	bl	800ded4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>
 800defe:	4603      	mov	r3, r0
 800df00:	781a      	ldrb	r2, [r3, #0]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	429a      	cmp	r2, r3
 800df0a:	bf0c      	ite	eq
 800df0c:	2301      	moveq	r3, #1
 800df0e:	2300      	movne	r3, #0
 800df10:	b2db      	uxtb	r3, r3
 800df12:	4618      	mov	r0, r3
 800df14:	3708      	adds	r7, #8
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800df1a:	b480      	push	{r7}
 800df1c:	b083      	sub	sp, #12
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
	++_M_current;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	1c5a      	adds	r2, r3, #1
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	601a      	str	r2, [r3, #0]
	return *this;
 800df2c:	687b      	ldr	r3, [r7, #4]
      }
 800df2e:	4618      	mov	r0, r3
 800df30:	370c      	adds	r7, #12
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr

0800df3a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800df3a:	b580      	push	{r7, lr}
 800df3c:	b086      	sub	sp, #24
 800df3e:	af00      	add	r7, sp, #0
 800df40:	60f8      	str	r0, [r7, #12]
 800df42:	60b9      	str	r1, [r7, #8]
 800df44:	607a      	str	r2, [r7, #4]
 800df46:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800df48:	f107 020c 	add.w	r2, r7, #12
 800df4c:	f107 0308 	add.w	r3, r7, #8
 800df50:	4611      	mov	r1, r2
 800df52:	4618      	mov	r0, r3
 800df54:	f7ff ffaa 	bl	800deac <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800df58:	4603      	mov	r3, r0
 800df5a:	109b      	asrs	r3, r3, #2
 800df5c:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	2b00      	cmp	r3, #0
 800df62:	dd3f      	ble.n	800dfe4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xaa>
	  if (__pred(__first))
 800df64:	1d3b      	adds	r3, r7, #4
 800df66:	68f9      	ldr	r1, [r7, #12]
 800df68:	4618      	mov	r0, r3
 800df6a:	f7ff ffbf 	bl	800deec <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800df6e:	4603      	mov	r3, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d001      	beq.n	800df78 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x3e>
	    return __first;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	e075      	b.n	800e064 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800df78:	f107 030c 	add.w	r3, r7, #12
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7ff ffcc 	bl	800df1a <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800df82:	1d3b      	adds	r3, r7, #4
 800df84:	68f9      	ldr	r1, [r7, #12]
 800df86:	4618      	mov	r0, r3
 800df88:	f7ff ffb0 	bl	800deec <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800df8c:	4603      	mov	r3, r0
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d001      	beq.n	800df96 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x5c>
	    return __first;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	e066      	b.n	800e064 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800df96:	f107 030c 	add.w	r3, r7, #12
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7ff ffbd 	bl	800df1a <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800dfa0:	1d3b      	adds	r3, r7, #4
 800dfa2:	68f9      	ldr	r1, [r7, #12]
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7ff ffa1 	bl	800deec <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d001      	beq.n	800dfb4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x7a>
	    return __first;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	e057      	b.n	800e064 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800dfb4:	f107 030c 	add.w	r3, r7, #12
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7ff ffae 	bl	800df1a <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800dfbe:	1d3b      	adds	r3, r7, #4
 800dfc0:	68f9      	ldr	r1, [r7, #12]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7ff ff92 	bl	800deec <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d001      	beq.n	800dfd2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x98>
	    return __first;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	e048      	b.n	800e064 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800dfd2:	f107 030c 	add.w	r3, r7, #12
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7ff ff9f 	bl	800df1a <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
      for (; __trip_count > 0; --__trip_count)
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	3b01      	subs	r3, #1
 800dfe0:	617b      	str	r3, [r7, #20]
 800dfe2:	e7bc      	b.n	800df5e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x24>
      switch (__last - __first)
 800dfe4:	f107 020c 	add.w	r2, r7, #12
 800dfe8:	f107 0308 	add.w	r3, r7, #8
 800dfec:	4611      	mov	r1, r2
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7ff ff5c 	bl	800deac <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b03      	cmp	r3, #3
 800dff8:	d006      	beq.n	800e008 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xce>
 800dffa:	2b03      	cmp	r3, #3
 800dffc:	dc31      	bgt.n	800e062 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d020      	beq.n	800e044 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x10a>
 800e002:	2b02      	cmp	r3, #2
 800e004:	d00f      	beq.n	800e026 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xec>
 800e006:	e02c      	b.n	800e062 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 800e008:	1d3b      	adds	r3, r7, #4
 800e00a:	68f9      	ldr	r1, [r7, #12]
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7ff ff6d 	bl	800deec <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800e012:	4603      	mov	r3, r0
 800e014:	2b00      	cmp	r3, #0
 800e016:	d001      	beq.n	800e01c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	e023      	b.n	800e064 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800e01c:	f107 030c 	add.w	r3, r7, #12
 800e020:	4618      	mov	r0, r3
 800e022:	f7ff ff7a 	bl	800df1a <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800e026:	1d3b      	adds	r3, r7, #4
 800e028:	68f9      	ldr	r1, [r7, #12]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7ff ff5e 	bl	800deec <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d001      	beq.n	800e03a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	e014      	b.n	800e064 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800e03a:	f107 030c 	add.w	r3, r7, #12
 800e03e:	4618      	mov	r0, r3
 800e040:	f7ff ff6b 	bl	800df1a <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800e044:	1d3b      	adds	r3, r7, #4
 800e046:	68f9      	ldr	r1, [r7, #12]
 800e048:	4618      	mov	r0, r3
 800e04a:	f7ff ff4f 	bl	800deec <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d001      	beq.n	800e058 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	e005      	b.n	800e064 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800e058:	f107 030c 	add.w	r3, r7, #12
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7ff ff5c 	bl	800df1a <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  return __last;
 800e062:	68bb      	ldr	r3, [r7, #8]
    }
 800e064:	4618      	mov	r0, r3
 800e066:	3718      	adds	r7, #24
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b088      	sub	sp, #32
 800e070:	af00      	add	r7, sp, #0
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	60b9      	str	r1, [r7, #8]
 800e076:	607a      	str	r2, [r7, #4]
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	61fb      	str	r3, [r7, #28]
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	61bb      	str	r3, [r7, #24]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800e084:	f7f4 fbd8 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 800e088:	4603      	mov	r3, r0
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d003      	beq.n	800e096 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x2a>
	    ::operator delete(__p);
 800e08e:	69b8      	ldr	r0, [r7, #24]
 800e090:	f012 f974 	bl	802037c <_ZdlPv>
	    return;
 800e094:	e005      	b.n	800e0a2 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800e096:	697a      	ldr	r2, [r7, #20]
 800e098:	69b9      	ldr	r1, [r7, #24]
 800e09a:	69f8      	ldr	r0, [r7, #28]
 800e09c:	f001 ff73 	bl	800ff86 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
      { __a.deallocate(__p, __n); }
 800e0a0:	bf00      	nop
 800e0a2:	bf00      	nop
 800e0a4:	3720      	adds	r7, #32
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800e0aa:	b480      	push	{r7}
 800e0ac:	b083      	sub	sp, #12
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	370c      	adds	r7, #12
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr

0800e0c0 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 800e0c0:	b5b0      	push	{r4, r5, r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800e0ca:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800e0cc:	1d3b      	adds	r3, r7, #4
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fe f9c4 	bl	800c45c <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 800e0d4:	462a      	mov	r2, r5
 800e0d6:	6839      	ldr	r1, [r7, #0]
 800e0d8:	4620      	mov	r0, r4
 800e0da:	f001 f90a 	bl	800f2f2 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800e0de:	4603      	mov	r3, r0
    }
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bdb0      	pop	{r4, r5, r7, pc}

0800e0e8 <_ZSt13move_backwardIPcS0_ET0_T_S2_S1_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800e0e8:	b590      	push	{r4, r7, lr}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800e0f4:	68f8      	ldr	r0, [r7, #12]
 800e0f6:	f001 f924 	bl	800f342 <_ZSt12__miter_baseIPcET_S1_>
 800e0fa:	4604      	mov	r4, r0
 800e0fc:	68b8      	ldr	r0, [r7, #8]
 800e0fe:	f001 f920 	bl	800f342 <_ZSt12__miter_baseIPcET_S1_>
 800e102:	4603      	mov	r3, r0
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	4619      	mov	r1, r3
 800e108:	4620      	mov	r0, r4
 800e10a:	f001 f925 	bl	800f358 <_ZSt22__copy_move_backward_aILb1EPcS0_ET1_T0_S2_S1_>
 800e10e:	4603      	mov	r3, r0
    }
 800e110:	4618      	mov	r0, r3
 800e112:	3714      	adds	r7, #20
 800e114:	46bd      	mov	sp, r7
 800e116:	bd90      	pop	{r4, r7, pc}

0800e118 <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 800e118:	b590      	push	{r4, r7, lr}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800e124:	68f8      	ldr	r0, [r7, #12]
 800e126:	f001 f90c 	bl	800f342 <_ZSt12__miter_baseIPcET_S1_>
 800e12a:	4604      	mov	r4, r0
 800e12c:	68b8      	ldr	r0, [r7, #8]
 800e12e:	f001 f908 	bl	800f342 <_ZSt12__miter_baseIPcET_S1_>
 800e132:	4603      	mov	r3, r0
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	4619      	mov	r1, r3
 800e138:	4620      	mov	r0, r4
 800e13a:	f001 f930 	bl	800f39e <_ZSt13__copy_move_aILb0EPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET1_T0_S8_S7_>
 800e13e:	4603      	mov	r3, r0
    }
 800e140:	4618      	mov	r0, r3
 800e142:	3714      	adds	r7, #20
 800e144:	46bd      	mov	sp, r7
 800e146:	bd90      	pop	{r4, r7, pc}

0800e148 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 800e148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e14a:	b08d      	sub	sp, #52	; 0x34
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	60b9      	str	r1, [r7, #8]
 800e152:	607a      	str	r2, [r7, #4]
 800e154:	603b      	str	r3, [r7, #0]
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	f000 80f6 	beq.w	800e34c <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
	  {
	    const size_type __n = std::distance(__first, __last);
 800e160:	6839      	ldr	r1, [r7, #0]
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7ff ffac 	bl	800e0c0 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800e168:	4603      	mov	r3, r0
 800e16a:	62fb      	str	r3, [r7, #44]	; 0x2c
	    if (size_type(this->_M_impl._M_end_of_storage
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_finish) >= __n)
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	1ad3      	subs	r3, r2, r3
	    if (size_type(this->_M_impl._M_end_of_storage
 800e176:	461a      	mov	r2, r3
 800e178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17a:	4293      	cmp	r3, r2
 800e17c:	f200 8081 	bhi.w	800e282 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x13a>
	      {
		const size_type __elems_after = end() - __position;
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f7fe f850 	bl	800c226 <_ZNSt6vectorIcSaIcEE3endEv>
 800e186:	4603      	mov	r3, r0
 800e188:	617b      	str	r3, [r7, #20]
 800e18a:	f107 0208 	add.w	r2, r7, #8
 800e18e:	f107 0314 	add.w	r3, r7, #20
 800e192:	4611      	mov	r1, r2
 800e194:	4618      	mov	r0, r3
 800e196:	f7ff fe89 	bl	800deac <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800e19a:	4603      	mov	r3, r0
 800e19c:	61fb      	str	r3, [r7, #28]
		pointer __old_finish(this->_M_impl._M_finish);
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	61bb      	str	r3, [r7, #24]
		if (__elems_after > __n)
 800e1a4:	69fa      	ldr	r2, [r7, #28]
 800e1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d92d      	bls.n	800e208 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xc0>
		  {
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	685a      	ldr	r2, [r3, #4]
 800e1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b2:	425b      	negs	r3, r3
 800e1b4:	18d4      	adds	r4, r2, r3
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	685d      	ldr	r5, [r3, #4]
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	685e      	ldr	r6, [r3, #4]
						this->_M_impl._M_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7fe fb4d 	bl	800c860 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800e1c6:	4603      	mov	r3, r0
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 800e1c8:	4632      	mov	r2, r6
 800e1ca:	4629      	mov	r1, r5
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	f001 f89f 	bl	800f310 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
		    this->_M_impl._M_finish += __n;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	685a      	ldr	r2, [r3, #4]
 800e1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d8:	441a      	add	r2, r3
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	605a      	str	r2, [r3, #4]
		    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
		    _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 800e1de:	f107 0308 	add.w	r3, r7, #8
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fa fd01 	bl	8008bea <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	6818      	ldr	r0, [r3, #0]
 800e1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ee:	425b      	negs	r3, r3
 800e1f0:	69ba      	ldr	r2, [r7, #24]
 800e1f2:	4413      	add	r3, r2
 800e1f4:	69ba      	ldr	r2, [r7, #24]
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	f7ff ff76 	bl	800e0e8 <_ZSt13move_backwardIPcS0_ET0_T_S2_S1_>
					    __old_finish - __n, __old_finish);
		    std::copy(__first, __last, __position);
 800e1fc:	68ba      	ldr	r2, [r7, #8]
 800e1fe:	6839      	ldr	r1, [r7, #0]
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f7ff ff89 	bl	800e118 <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
	      }
	  }
      }
 800e206:	e0a1      	b.n	800e34c <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
		    _ForwardIterator __mid = __first;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	613b      	str	r3, [r7, #16]
		    std::advance(__mid, __elems_after);
 800e20c:	f107 0310 	add.w	r3, r7, #16
 800e210:	69f9      	ldr	r1, [r7, #28]
 800e212:	4618      	mov	r0, r3
 800e214:	f001 f8e4 	bl	800f3e0 <_ZSt7advanceIPcjEvRT_T0_>
		    std::__uninitialized_copy_a(__mid, __last,
 800e218:	693c      	ldr	r4, [r7, #16]
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	685d      	ldr	r5, [r3, #4]
						_M_get_Tp_allocator());
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	4618      	mov	r0, r3
 800e222:	f7fe fb1d 	bl	800c860 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800e226:	4603      	mov	r3, r0
		    std::__uninitialized_copy_a(__mid, __last,
 800e228:	462a      	mov	r2, r5
 800e22a:	6839      	ldr	r1, [r7, #0]
 800e22c:	4620      	mov	r0, r4
 800e22e:	f001 f8ea 	bl	800f406 <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>
		    this->_M_impl._M_finish += __n - __elems_after;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	685a      	ldr	r2, [r3, #4]
 800e236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	1acb      	subs	r3, r1, r3
 800e23c:	441a      	add	r2, r3
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	605a      	str	r2, [r3, #4]
		    std::__uninitialized_move_a(__position.base(),
 800e242:	f107 0308 	add.w	r3, r7, #8
 800e246:	4618      	mov	r0, r3
 800e248:	f7fa fccf 	bl	8008bea <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800e24c:	4603      	mov	r3, r0
 800e24e:	681c      	ldr	r4, [r3, #0]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	685d      	ldr	r5, [r3, #4]
						_M_get_Tp_allocator());
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	4618      	mov	r0, r3
 800e258:	f7fe fb02 	bl	800c860 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800e25c:	4603      	mov	r3, r0
		    std::__uninitialized_move_a(__position.base(),
 800e25e:	462a      	mov	r2, r5
 800e260:	69b9      	ldr	r1, [r7, #24]
 800e262:	4620      	mov	r0, r4
 800e264:	f001 f854 	bl	800f310 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
		    this->_M_impl._M_finish += __elems_after;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	685a      	ldr	r2, [r3, #4]
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	441a      	add	r2, r3
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	605a      	str	r2, [r3, #4]
		    std::copy(__first, __mid, __position);
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	68ba      	ldr	r2, [r7, #8]
 800e278:	4619      	mov	r1, r3
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7ff ff4c 	bl	800e118 <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>
      }
 800e280:	e064      	b.n	800e34c <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
		  _M_check_len(__n, "vector::_M_range_insert");
 800e282:	4a34      	ldr	r2, [pc, #208]	; (800e354 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x20c>)
 800e284:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e286:	68f8      	ldr	r0, [r7, #12]
 800e288:	f001 f8ce 	bl	800f428 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>
 800e28c:	62b8      	str	r0, [r7, #40]	; 0x28
		pointer __new_start(this->_M_allocate(__len));
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e292:	4618      	mov	r0, r3
 800e294:	f7ff fc7e 	bl	800db94 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800e298:	6278      	str	r0, [r7, #36]	; 0x24
		pointer __new_finish(__new_start);
 800e29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29c:	623b      	str	r3, [r7, #32]
		      (this->_M_impl._M_start, __position.base(),
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681c      	ldr	r4, [r3, #0]
 800e2a2:	f107 0308 	add.w	r3, r7, #8
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7fa fc9f 	bl	8008bea <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	681d      	ldr	r5, [r3, #0]
		       __new_start, _M_get_Tp_allocator());
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fe fad4 	bl	800c860 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800e2b8:	4603      	mov	r3, r0
		      (this->_M_impl._M_start, __position.base(),
 800e2ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2bc:	4629      	mov	r1, r5
 800e2be:	4620      	mov	r0, r4
 800e2c0:	f001 f8f9 	bl	800f4b6 <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 800e2c4:	6238      	str	r0, [r7, #32]
						    _M_get_Tp_allocator());
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7fe fac9 	bl	800c860 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800e2ce:	4603      	mov	r3, r0
		      = std::__uninitialized_copy_a(__first, __last,
 800e2d0:	6a3a      	ldr	r2, [r7, #32]
 800e2d2:	6839      	ldr	r1, [r7, #0]
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f001 f896 	bl	800f406 <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>
 800e2da:	6238      	str	r0, [r7, #32]
		      (__position.base(), this->_M_impl._M_finish,
 800e2dc:	f107 0308 	add.w	r3, r7, #8
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7fa fc82 	bl	8008bea <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	681c      	ldr	r4, [r3, #0]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	685d      	ldr	r5, [r3, #4]
		       __new_finish, _M_get_Tp_allocator());
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7fe fab5 	bl	800c860 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800e2f6:	4603      	mov	r3, r0
		      (__position.base(), this->_M_impl._M_finish,
 800e2f8:	6a3a      	ldr	r2, [r7, #32]
 800e2fa:	4629      	mov	r1, r5
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	f001 f8da 	bl	800f4b6 <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 800e302:	6238      	str	r0, [r7, #32]
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681c      	ldr	r4, [r3, #0]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	685d      	ldr	r5, [r3, #4]
			      _M_get_Tp_allocator());
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fe faa6 	bl	800c860 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800e314:	4603      	mov	r3, r0
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e316:	461a      	mov	r2, r3
 800e318:	4629      	mov	r1, r5
 800e31a:	4620      	mov	r0, r4
 800e31c:	f7fe fabc 	bl	800c898 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
		_M_deallocate(this->_M_impl._M_start,
 800e320:	68f8      	ldr	r0, [r7, #12]
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6819      	ldr	r1, [r3, #0]
			      this->_M_impl._M_end_of_storage
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	689a      	ldr	r2, [r3, #8]
			      - this->_M_impl._M_start);
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	1ad3      	subs	r3, r2, r3
		_M_deallocate(this->_M_impl._M_start,
 800e330:	461a      	mov	r2, r3
 800e332:	f7fe fe30 	bl	800cf96 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
		this->_M_impl._M_start = __new_start;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e33a:	601a      	str	r2, [r3, #0]
		this->_M_impl._M_finish = __new_finish;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	6a3a      	ldr	r2, [r7, #32]
 800e340:	605a      	str	r2, [r3, #4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 800e342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e346:	441a      	add	r2, r3
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	609a      	str	r2, [r3, #8]
      }
 800e34c:	bf00      	nop
 800e34e:	3734      	adds	r7, #52	; 0x34
 800e350:	46bd      	mov	sp, r7
 800e352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e354:	08023f40 	.word	0x08023f40

0800e358 <_ZSt9iter_swapIPbS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800e362:	6839      	ldr	r1, [r7, #0]
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f001 f8bf 	bl	800f4e8 <_ZSt4swapIbENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 800e36a:	bf00      	nop
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800e372:	b580      	push	{r7, lr}
 800e374:	b084      	sub	sp, #16
 800e376:	af00      	add	r7, sp, #0
 800e378:	60f8      	str	r0, [r7, #12]
 800e37a:	60b9      	str	r1, [r7, #8]
 800e37c:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800e37e:	f7f4 fa5b 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 800e382:	4603      	mov	r3, r0
 800e384:	2b00      	cmp	r3, #0
 800e386:	d006      	beq.n	800e396 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	68b9      	ldr	r1, [r7, #8]
 800e38c:	68f8      	ldr	r0, [r7, #12]
 800e38e:	f001 f8ca 	bl	800f526 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>
 800e392:	4603      	mov	r3, r0
 800e394:	e006      	b.n	800e3a4 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	68b9      	ldr	r1, [r7, #8]
 800e39a:	68f8      	ldr	r0, [r7, #12]
 800e39c:	f001 f8e5 	bl	800f56a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	bf00      	nop
    }
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3710      	adds	r7, #16
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	60fb      	str	r3, [r7, #12]
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800e3be:	f7f4 fa3b 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d004      	beq.n	800e3d2 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x26>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e3c8:	68b8      	ldr	r0, [r7, #8]
 800e3ca:	f011 ffdb 	bl	8020384 <_Znwj>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	e006      	b.n	800e3e0 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x34>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	68b9      	ldr	r1, [r7, #8]
 800e3d6:	68f8      	ldr	r0, [r7, #12]
 800e3d8:	f001 fe9a 	bl	8010110 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	bf00      	nop
      { return __a.allocate(__n); }
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3710      	adds	r7, #16
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800e3e8:	b590      	push	{r4, r7, lr}
 800e3ea:	b085      	sub	sp, #20
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	607a      	str	r2, [r7, #4]
 800e3f4:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800e3f6:	4623      	mov	r3, r4
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	68b9      	ldr	r1, [r7, #8]
 800e3fc:	68f8      	ldr	r0, [r7, #12]
 800e3fe:	f001 f911 	bl	800f624 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800e402:	463b      	mov	r3, r7
 800e404:	461a      	mov	r2, r3
 800e406:	68b9      	ldr	r1, [r7, #8]
 800e408:	68f8      	ldr	r0, [r7, #12]
 800e40a:	f001 f958 	bl	800f6be <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 800e40e:	bf00      	nop
 800e410:	3714      	adds	r7, #20
 800e412:	46bd      	mov	sp, r7
 800e414:	bd90      	pop	{r4, r7, pc}

0800e416 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800e416:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e418:	b089      	sub	sp, #36	; 0x24
 800e41a:	af02      	add	r7, sp, #8
 800e41c:	60f8      	str	r0, [r7, #12]
 800e41e:	60b9      	str	r1, [r7, #8]
 800e420:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800e422:	f107 020c 	add.w	r2, r7, #12
 800e426:	f107 0308 	add.w	r3, r7, #8
 800e42a:	4611      	mov	r1, r2
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7f5 f8ef 	bl	8003610 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800e432:	4603      	mov	r3, r0
 800e434:	0fda      	lsrs	r2, r3, #31
 800e436:	4413      	add	r3, r2
 800e438:	105b      	asrs	r3, r3, #1
 800e43a:	461a      	mov	r2, r3
 800e43c:	f107 030c 	add.w	r3, r7, #12
 800e440:	4611      	mov	r1, r2
 800e442:	4618      	mov	r0, r3
 800e444:	f000 f827 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800e448:	4603      	mov	r3, r0
 800e44a:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800e44c:	f107 030c 	add.w	r3, r7, #12
 800e450:	2101      	movs	r1, #1
 800e452:	4618      	mov	r0, r3
 800e454:	f000 f81f 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800e458:	4604      	mov	r4, r0
 800e45a:	f107 0308 	add.w	r3, r7, #8
 800e45e:	2101      	movs	r1, #1
 800e460:	4618      	mov	r0, r3
 800e462:	f001 f952 	bl	800f70a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 800e466:	4603      	mov	r3, r0
 800e468:	f88d 5000 	strb.w	r5, [sp]
 800e46c:	697a      	ldr	r2, [r7, #20]
 800e46e:	4621      	mov	r1, r4
 800e470:	68f8      	ldr	r0, [r7, #12]
 800e472:	f001 f963 	bl	800f73c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800e476:	f107 030c 	add.w	r3, r7, #12
 800e47a:	2101      	movs	r1, #1
 800e47c:	4618      	mov	r0, r3
 800e47e:	f000 f80a 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800e482:	4633      	mov	r3, r6
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	68b9      	ldr	r1, [r7, #8]
 800e488:	f001 f9ad 	bl	800f7e6 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 800e48c:	4603      	mov	r3, r0
    }
 800e48e:	4618      	mov	r0, r3
 800e490:	371c      	adds	r7, #28
 800e492:	46bd      	mov	sp, r7
 800e494:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800e496:	b580      	push	{r7, lr}
 800e498:	b084      	sub	sp, #16
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
 800e49e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	009b      	lsls	r3, r3, #2
 800e4a8:	4413      	add	r3, r2
 800e4aa:	60fb      	str	r3, [r7, #12]
 800e4ac:	f107 020c 	add.w	r2, r7, #12
 800e4b0:	f107 0308 	add.w	r3, r7, #8
 800e4b4:	4611      	mov	r1, r2
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7f5 f843 	bl	8003542 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3710      	adds	r7, #16
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}

0800e4c6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e4c6:	b480      	push	{r7}
 800e4c8:	b083      	sub	sp, #12
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	1d1a      	adds	r2, r3, #4
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	601a      	str	r2, [r3, #0]
	return *this;
 800e4d8:	687b      	ldr	r3, [r7, #4]
      }
 800e4da:	4618      	mov	r0, r3
 800e4dc:	370c      	adds	r7, #12
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr

0800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e4e6:	b480      	push	{r7}
 800e4e8:	b083      	sub	sp, #12
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	370c      	adds	r7, #12
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr

0800e4fe <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800e4fe:	b580      	push	{r7, lr}
 800e500:	ed2d 8b02 	vpush	{d8}
 800e504:	b084      	sub	sp, #16
 800e506:	af00      	add	r7, sp, #0
 800e508:	60f8      	str	r0, [r7, #12]
 800e50a:	60b9      	str	r1, [r7, #8]
 800e50c:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800e50e:	f107 0308 	add.w	r3, r7, #8
 800e512:	4618      	mov	r0, r3
 800e514:	f7ff ffe7 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800e518:	4603      	mov	r3, r0
 800e51a:	ed93 8a00 	vldr	s16, [r3]
 800e51e:	1d3b      	adds	r3, r7, #4
 800e520:	4618      	mov	r0, r3
 800e522:	f7ff ffe0 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800e526:	4603      	mov	r3, r0
 800e528:	edd3 7a00 	vldr	s15, [r3]
 800e52c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e534:	bf4c      	ite	mi
 800e536:	2301      	movmi	r3, #1
 800e538:	2300      	movpl	r3, #0
 800e53a:	b2db      	uxtb	r3, r3
 800e53c:	4618      	mov	r0, r3
 800e53e:	3710      	adds	r7, #16
 800e540:	46bd      	mov	sp, r7
 800e542:	ecbd 8b02 	vpop	{d8}
 800e546:	bd80      	pop	{r7, pc}

0800e548 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800e548:	b590      	push	{r4, r7, lr}
 800e54a:	b085      	sub	sp, #20
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	60f8      	str	r0, [r7, #12]
 800e550:	60b9      	str	r1, [r7, #8]
 800e552:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800e554:	68f8      	ldr	r0, [r7, #12]
 800e556:	f001 f999 	bl	800f88c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 800e55a:	4604      	mov	r4, r0
 800e55c:	68b8      	ldr	r0, [r7, #8]
 800e55e:	f001 f995 	bl	800f88c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 800e562:	4603      	mov	r3, r0
 800e564:	687a      	ldr	r2, [r7, #4]
 800e566:	4619      	mov	r1, r3
 800e568:	4620      	mov	r0, r4
 800e56a:	f001 f99a 	bl	800f8a2 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 800e56e:	4603      	mov	r3, r0
    }
 800e570:	4618      	mov	r0, r3
 800e572:	3714      	adds	r7, #20
 800e574:	46bd      	mov	sp, r7
 800e576:	bd90      	pop	{r4, r7, pc}

0800e578 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800e578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e57a:	b087      	sub	sp, #28
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	60f8      	str	r0, [r7, #12]
 800e580:	60b9      	str	r1, [r7, #8]
 800e582:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800e584:	f107 0208 	add.w	r2, r7, #8
 800e588:	f107 030c 	add.w	r3, r7, #12
 800e58c:	4611      	mov	r1, r2
 800e58e:	4618      	mov	r0, r3
 800e590:	f7fd ff6e 	bl	800c470 <_ZN9__gnu_cxxeqIPfS1_St6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d152      	bne.n	800e640 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xc8>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800e59a:	f107 030c 	add.w	r3, r7, #12
 800e59e:	2101      	movs	r1, #1
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7ff ff78 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	617b      	str	r3, [r7, #20]
 800e5aa:	f107 0208 	add.w	r2, r7, #8
 800e5ae:	f107 0314 	add.w	r3, r7, #20
 800e5b2:	4611      	mov	r1, r2
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f7fd ff5b 	bl	800c470 <_ZN9__gnu_cxxeqIPfS1_St6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	f083 0301 	eor.w	r3, r3, #1
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d03d      	beq.n	800e642 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xca>
	  if (__comp(__i, __first))
 800e5c6:	1d3b      	adds	r3, r7, #4
 800e5c8:	68fa      	ldr	r2, [r7, #12]
 800e5ca:	6979      	ldr	r1, [r7, #20]
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7ff ff96 	bl	800e4fe <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d026      	beq.n	800e626 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xae>
		__val = _GLIBCXX_MOVE(*__i);
 800e5d8:	f107 0314 	add.w	r3, r7, #20
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f7ff ff82 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7fd fd8b 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800e5f0:	f107 0314 	add.w	r3, r7, #20
 800e5f4:	2101      	movs	r1, #1
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7ff ff4d 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	461a      	mov	r2, r3
 800e600:	6979      	ldr	r1, [r7, #20]
 800e602:	68f8      	ldr	r0, [r7, #12]
 800e604:	f7ff ffa0 	bl	800e548 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 800e608:	f107 0310 	add.w	r3, r7, #16
 800e60c:	4618      	mov	r0, r3
 800e60e:	f7fd fd77 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e612:	4603      	mov	r3, r0
 800e614:	681c      	ldr	r4, [r3, #0]
 800e616:	f107 030c 	add.w	r3, r7, #12
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7ff ff63 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800e620:	4603      	mov	r3, r0
 800e622:	601c      	str	r4, [r3, #0]
 800e624:	e006      	b.n	800e634 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xbc>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800e626:	4630      	mov	r0, r6
 800e628:	f7f5 fe7a 	bl	8004320 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 800e62c:	4629      	mov	r1, r5
 800e62e:	6978      	ldr	r0, [r7, #20]
 800e630:	f001 f978 	bl	800f924 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800e634:	f107 0314 	add.w	r3, r7, #20
 800e638:	4618      	mov	r0, r3
 800e63a:	f7ff ff44 	bl	800e4c6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800e63e:	e7b4      	b.n	800e5aa <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x32>
      if (__first == __last) return;
 800e640:	bf00      	nop
    }
 800e642:	371c      	adds	r7, #28
 800e644:	46bd      	mov	sp, r7
 800e646:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e648 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800e648:	b5b0      	push	{r4, r5, r7, lr}
 800e64a:	b086      	sub	sp, #24
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	617b      	str	r3, [r7, #20]
 800e658:	f107 0208 	add.w	r2, r7, #8
 800e65c:	f107 0314 	add.w	r3, r7, #20
 800e660:	4611      	mov	r1, r2
 800e662:	4618      	mov	r0, r3
 800e664:	f7fd ff04 	bl	800c470 <_ZN9__gnu_cxxeqIPfS1_St6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>
 800e668:	4603      	mov	r3, r0
 800e66a:	f083 0301 	eor.w	r3, r3, #1
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	2b00      	cmp	r3, #0
 800e672:	d00c      	beq.n	800e68e <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x46>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800e674:	4628      	mov	r0, r5
 800e676:	f7f5 fe53 	bl	8004320 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 800e67a:	4621      	mov	r1, r4
 800e67c:	6978      	ldr	r0, [r7, #20]
 800e67e:	f001 f951 	bl	800f924 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800e682:	f107 0314 	add.w	r3, r7, #20
 800e686:	4618      	mov	r0, r3
 800e688:	f7ff ff1d 	bl	800e4c6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800e68c:	e7e4      	b.n	800e658 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x10>
    }
 800e68e:	bf00      	nop
 800e690:	3718      	adds	r7, #24
 800e692:	46bd      	mov	sp, r7
 800e694:	bdb0      	pop	{r4, r5, r7, pc}

0800e696 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800e696:	b480      	push	{r7}
 800e698:	b083      	sub	sp, #12
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	370c      	adds	r7, #12
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr

0800e6ac <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
 800e6b4:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800e6b6:	463b      	mov	r3, r7
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7ff ffec 	bl	800e696 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3708      	adds	r7, #8
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
 800e6c8:	b5b0      	push	{r4, r5, r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800e6d0:	1d3b      	adds	r3, r7, #4
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7ff ffdf 	bl	800e696 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800e6d8:	f107 030c 	add.w	r3, r7, #12
 800e6dc:	4629      	mov	r1, r5
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f001 f96b 	bl	800f9ba <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>
 800e6e4:	bf00      	nop
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	3710      	adds	r7, #16
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bdb0      	pop	{r4, r5, r7, pc}

0800e6ee <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>:
	operator()(_Iterator __it)
 800e6ee:	b580      	push	{r7, lr}
 800e6f0:	b082      	sub	sp, #8
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	6078      	str	r0, [r7, #4]
 800e6f6:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	4619      	mov	r1, r3
 800e700:	4610      	mov	r0, r2
 800e702:	f7f6 f869 	bl	80047d8 <_ZZN3jlb10Controller15lateral_controlEfENKUlbE_clEb>
 800e706:	4603      	mov	r3, r0
 800e708:	f083 0301 	eor.w	r3, r3, #1
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	4618      	mov	r0, r3
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}

0800e716 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e716:	b580      	push	{r7, lr}
 800e718:	b086      	sub	sp, #24
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	60f8      	str	r0, [r7, #12]
 800e71e:	60b9      	str	r1, [r7, #8]
 800e720:	713a      	strb	r2, [r7, #4]
 800e722:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800e724:	68ba      	ldr	r2, [r7, #8]
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	1ad3      	subs	r3, r2, r3
 800e72a:	109b      	asrs	r3, r3, #2
 800e72c:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	2b00      	cmp	r3, #0
 800e732:	dd37      	ble.n	800e7a4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x8e>
	  if (__pred(__first))
 800e734:	1d3b      	adds	r3, r7, #4
 800e736:	68f9      	ldr	r1, [r7, #12]
 800e738:	4618      	mov	r0, r3
 800e73a:	f7ff ffd8 	bl	800e6ee <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800e73e:	4603      	mov	r3, r0
 800e740:	2b00      	cmp	r3, #0
 800e742:	d001      	beq.n	800e748 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x32>
	    return __first;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	e061      	b.n	800e80c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	3301      	adds	r3, #1
 800e74c:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e74e:	1d3b      	adds	r3, r7, #4
 800e750:	68f9      	ldr	r1, [r7, #12]
 800e752:	4618      	mov	r0, r3
 800e754:	f7ff ffcb 	bl	800e6ee <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800e758:	4603      	mov	r3, r0
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d001      	beq.n	800e762 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x4c>
	    return __first;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	e054      	b.n	800e80c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	3301      	adds	r3, #1
 800e766:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e768:	1d3b      	adds	r3, r7, #4
 800e76a:	68f9      	ldr	r1, [r7, #12]
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7ff ffbe 	bl	800e6ee <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800e772:	4603      	mov	r3, r0
 800e774:	2b00      	cmp	r3, #0
 800e776:	d001      	beq.n	800e77c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x66>
	    return __first;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	e047      	b.n	800e80c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	3301      	adds	r3, #1
 800e780:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e782:	1d3b      	adds	r3, r7, #4
 800e784:	68f9      	ldr	r1, [r7, #12]
 800e786:	4618      	mov	r0, r3
 800e788:	f7ff ffb1 	bl	800e6ee <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d001      	beq.n	800e796 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x80>
	    return __first;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	e03a      	b.n	800e80c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	3301      	adds	r3, #1
 800e79a:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	617b      	str	r3, [r7, #20]
 800e7a2:	e7c4      	b.n	800e72e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x18>
      switch (__last - __first)
 800e7a4:	68ba      	ldr	r2, [r7, #8]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	1ad3      	subs	r3, r2, r3
 800e7aa:	2b03      	cmp	r3, #3
 800e7ac:	d006      	beq.n	800e7bc <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 800e7ae:	2b03      	cmp	r3, #3
 800e7b0:	dc2b      	bgt.n	800e80a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d01c      	beq.n	800e7f0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 800e7b6:	2b02      	cmp	r3, #2
 800e7b8:	d00d      	beq.n	800e7d6 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 800e7ba:	e026      	b.n	800e80a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 800e7bc:	1d3b      	adds	r3, r7, #4
 800e7be:	68f9      	ldr	r1, [r7, #12]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7ff ff94 	bl	800e6ee <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d001      	beq.n	800e7d0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	e01d      	b.n	800e80c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e7d6:	1d3b      	adds	r3, r7, #4
 800e7d8:	68f9      	ldr	r1, [r7, #12]
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7ff ff87 	bl	800e6ee <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d001      	beq.n	800e7ea <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	e010      	b.n	800e80c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e7f0:	1d3b      	adds	r3, r7, #4
 800e7f2:	68f9      	ldr	r1, [r7, #12]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7ff ff7a 	bl	800e6ee <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d001      	beq.n	800e804 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	e003      	b.n	800e80c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	3301      	adds	r3, #1
 800e808:	60fb      	str	r3, [r7, #12]
	  return __last;
 800e80a:	68bb      	ldr	r3, [r7, #8]
    }
 800e80c:	4618      	mov	r0, r3
 800e80e:	3718      	adds	r7, #24
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800e814:	b480      	push	{r7}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	4618      	mov	r0, r3
 800e820:	370c      	adds	r7, #12
 800e822:	46bd      	mov	sp, r7
 800e824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e828:	4770      	bx	lr

0800e82a <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 800e82a:	b580      	push	{r7, lr}
 800e82c:	b082      	sub	sp, #8
 800e82e:	af00      	add	r7, sp, #0
 800e830:	6078      	str	r0, [r7, #4]
 800e832:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800e834:	463b      	mov	r3, r7
 800e836:	4618      	mov	r0, r3
 800e838:	f7ff ffec 	bl	800e814 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4618      	mov	r0, r3
 800e840:	3708      	adds	r7, #8
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}

0800e846 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    __negate(_Iter_pred<_Predicate> __pred)
 800e846:	b5b0      	push	{r4, r5, r7, lr}
 800e848:	b084      	sub	sp, #16
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800e84e:	1d3b      	adds	r3, r7, #4
 800e850:	4618      	mov	r0, r3
 800e852:	f7ff ffdf 	bl	800e814 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 800e856:	f107 030c 	add.w	r3, r7, #12
 800e85a:	4629      	mov	r1, r5
 800e85c:	4618      	mov	r0, r3
 800e85e:	f001 f8ba 	bl	800f9d6 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>
 800e862:	bf00      	nop
 800e864:	4620      	mov	r0, r4
 800e866:	3710      	adds	r7, #16
 800e868:	46bd      	mov	sp, r7
 800e86a:	bdb0      	pop	{r4, r5, r7, pc}

0800e86c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>:
	operator()(_Iterator __it)
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	4619      	mov	r1, r3
 800e87e:	4610      	mov	r0, r2
 800e880:	f7f5 ffb7 	bl	80047f2 <_ZZN3jlb10Controller15lateral_controlEfENKUlbE0_clEb>
 800e884:	4603      	mov	r3, r0
 800e886:	f083 0301 	eor.w	r3, r3, #1
 800e88a:	b2db      	uxtb	r3, r3
 800e88c:	4618      	mov	r0, r3
 800e88e:	3708      	adds	r7, #8
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	713a      	strb	r2, [r7, #4]
 800e8a0:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800e8a2:	68ba      	ldr	r2, [r7, #8]
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	1ad3      	subs	r3, r2, r3
 800e8a8:	109b      	asrs	r3, r3, #2
 800e8aa:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	dd37      	ble.n	800e922 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x8e>
	  if (__pred(__first))
 800e8b2:	1d3b      	adds	r3, r7, #4
 800e8b4:	68f9      	ldr	r1, [r7, #12]
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7ff ffd8 	bl	800e86c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d001      	beq.n	800e8c6 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x32>
	    return __first;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	e061      	b.n	800e98a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e8cc:	1d3b      	adds	r3, r7, #4
 800e8ce:	68f9      	ldr	r1, [r7, #12]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7ff ffcb 	bl	800e86c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d001      	beq.n	800e8e0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x4c>
	    return __first;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	e054      	b.n	800e98a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e8e6:	1d3b      	adds	r3, r7, #4
 800e8e8:	68f9      	ldr	r1, [r7, #12]
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7ff ffbe 	bl	800e86c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d001      	beq.n	800e8fa <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x66>
	    return __first;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	e047      	b.n	800e98a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	3301      	adds	r3, #1
 800e8fe:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e900:	1d3b      	adds	r3, r7, #4
 800e902:	68f9      	ldr	r1, [r7, #12]
 800e904:	4618      	mov	r0, r3
 800e906:	f7ff ffb1 	bl	800e86c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d001      	beq.n	800e914 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x80>
	    return __first;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	e03a      	b.n	800e98a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	3301      	adds	r3, #1
 800e918:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	3b01      	subs	r3, #1
 800e91e:	617b      	str	r3, [r7, #20]
 800e920:	e7c4      	b.n	800e8ac <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x18>
      switch (__last - __first)
 800e922:	68ba      	ldr	r2, [r7, #8]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	1ad3      	subs	r3, r2, r3
 800e928:	2b03      	cmp	r3, #3
 800e92a:	d006      	beq.n	800e93a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 800e92c:	2b03      	cmp	r3, #3
 800e92e:	dc2b      	bgt.n	800e988 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 800e930:	2b01      	cmp	r3, #1
 800e932:	d01c      	beq.n	800e96e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 800e934:	2b02      	cmp	r3, #2
 800e936:	d00d      	beq.n	800e954 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 800e938:	e026      	b.n	800e988 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 800e93a:	1d3b      	adds	r3, r7, #4
 800e93c:	68f9      	ldr	r1, [r7, #12]
 800e93e:	4618      	mov	r0, r3
 800e940:	f7ff ff94 	bl	800e86c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800e944:	4603      	mov	r3, r0
 800e946:	2b00      	cmp	r3, #0
 800e948:	d001      	beq.n	800e94e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	e01d      	b.n	800e98a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	3301      	adds	r3, #1
 800e952:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e954:	1d3b      	adds	r3, r7, #4
 800e956:	68f9      	ldr	r1, [r7, #12]
 800e958:	4618      	mov	r0, r3
 800e95a:	f7ff ff87 	bl	800e86c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800e95e:	4603      	mov	r3, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	d001      	beq.n	800e968 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	e010      	b.n	800e98a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	3301      	adds	r3, #1
 800e96c:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e96e:	1d3b      	adds	r3, r7, #4
 800e970:	68f9      	ldr	r1, [r7, #12]
 800e972:	4618      	mov	r0, r3
 800e974:	f7ff ff7a 	bl	800e86c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d001      	beq.n	800e982 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	e003      	b.n	800e98a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	3301      	adds	r3, #1
 800e986:	60fb      	str	r3, [r7, #12]
	  return __last;
 800e988:	68bb      	ldr	r3, [r7, #8]
    }
 800e98a:	4618      	mov	r0, r3
 800e98c:	3718      	adds	r7, #24
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}

0800e992 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800e992:	b580      	push	{r7, lr}
 800e994:	b082      	sub	sp, #8
 800e996:	af00      	add	r7, sp, #0
 800e998:	6078      	str	r0, [r7, #4]
 800e99a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800e99c:	6839      	ldr	r1, [r7, #0]
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f001 f827 	bl	800f9f2 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3708      	adds	r7, #8
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}

0800e9ae <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800e9ae:	b580      	push	{r7, lr}
 800e9b0:	b084      	sub	sp, #16
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	60f8      	str	r0, [r7, #12]
 800e9b6:	60b9      	str	r1, [r7, #8]
 800e9b8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	68b9      	ldr	r1, [r7, #8]
 800e9be:	68f8      	ldr	r0, [r7, #12]
 800e9c0:	f001 f823 	bl	800fa0a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3710      	adds	r7, #16
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800e9ce:	b580      	push	{r7, lr}
 800e9d0:	b082      	sub	sp, #8
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 800e9d6:	1d3b      	adds	r3, r7, #4
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f001 f82e 	bl	800fa3a <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}

0800e9ea <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800e9ea:	b580      	push	{r7, lr}
 800e9ec:	b082      	sub	sp, #8
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800e9f2:	1d3b      	adds	r3, r7, #4
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7f4 fe48 	bl	800368a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b084      	sub	sp, #16
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	60f8      	str	r0, [r7, #12]
 800ea0e:	60b9      	str	r1, [r7, #8]
 800ea10:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	68b9      	ldr	r1, [r7, #8]
 800ea16:	68f8      	ldr	r0, [r7, #12]
 800ea18:	f001 f81a 	bl	800fa50 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3710      	adds	r7, #16
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}

0800ea26 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 800ea26:	b580      	push	{r7, lr}
 800ea28:	b082      	sub	sp, #8
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]
 800ea2e:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7ff ffda 	bl	800e9ea <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800ea36:	4602      	mov	r2, r0
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	1a9b      	subs	r3, r3, r2
 800ea3c:	109b      	asrs	r3, r3, #2
 800ea3e:	461a      	mov	r2, r3
 800ea40:	1d3b      	adds	r3, r7, #4
 800ea42:	4611      	mov	r1, r2
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7ff fd26 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3708      	adds	r7, #8
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800ea5e:	463a      	mov	r2, r7
 800ea60:	1d3b      	adds	r3, r7, #4
 800ea62:	4611      	mov	r1, r2
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fd fd03 	bl	800c470 <_ZN9__gnu_cxxeqIPfS1_St6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	f083 0301 	eor.w	r3, r3, #1
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d010      	beq.n	800ea98 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0x44>
	    std::_Destroy(std::__addressof(*__first));
 800ea76:	1d3b      	adds	r3, r7, #4
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7ff fd34 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7f4 feb0 	bl	80037e6 <_ZSt11__addressofIfEPT_RS0_>
 800ea86:	4603      	mov	r3, r0
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7f4 feb7 	bl	80037fc <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 800ea8e:	1d3b      	adds	r3, r7, #4
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7ff fd18 	bl	800e4c6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800ea96:	e7e2      	b.n	800ea5e <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0xa>
	}
 800ea98:	bf00      	nop
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
 800eaaa:	bf00      	nop
 800eaac:	370c      	adds	r7, #12
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr

0800eab6 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800eab6:	b580      	push	{r7, lr}
 800eab8:	b084      	sub	sp, #16
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	60f8      	str	r0, [r7, #12]
 800eabe:	60b9      	str	r1, [r7, #8]
 800eac0:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800eac2:	f7f3 feb9 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 800eac6:	4603      	mov	r3, r0
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d006      	beq.n	800eada <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	68b9      	ldr	r1, [r7, #8]
 800ead0:	68f8      	ldr	r0, [r7, #12]
 800ead2:	f000 ffda 	bl	800fa8a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>
 800ead6:	4603      	mov	r3, r0
 800ead8:	e006      	b.n	800eae8 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	68b9      	ldr	r1, [r7, #8]
 800eade:	68f8      	ldr	r0, [r7, #12]
 800eae0:	f000 fff6 	bl	800fad0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800eae4:	4603      	mov	r3, r0
 800eae6:	bf00      	nop
    }
 800eae8:	4618      	mov	r0, r3
 800eaea:	3710      	adds	r7, #16
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	68b9      	ldr	r1, [r7, #8]
 800eb00:	68f8      	ldr	r0, [r7, #12]
 800eb02:	f7fc ffbe 	bl	800ba82 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 800eb06:	4603      	mov	r3, r0
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3710      	adds	r7, #16
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d00a      	beq.n	800eb38 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f001 f803 	bl	800fb2e <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f001 f80a 	bl	800fb44 <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>
	  for (; __first != __last; ++__first)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	3318      	adds	r3, #24
 800eb34:	607b      	str	r3, [r7, #4]
 800eb36:	e7f0      	b.n	800eb1a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0xa>
	}
 800eb38:	bf00      	nop
 800eb3a:	3708      	adds	r7, #8
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b084      	sub	sp, #16
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800eb4c:	687a      	ldr	r2, [r7, #4]
 800eb4e:	68b9      	ldr	r1, [r7, #8]
 800eb50:	68f8      	ldr	r0, [r7, #12]
 800eb52:	f001 f802 	bl	800fb5a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 800eb56:	4603      	mov	r3, r0
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3710      	adds	r7, #16
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b082      	sub	sp, #8
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d00a      	beq.n	800eb88 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f000 fd13 	bl	800f59e <_ZSt11__addressofIcEPT_RS0_>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f001 f805 	bl	800fb8a <_ZSt8_DestroyIcEvPT_>
	  for (; __first != __last; ++__first)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	3301      	adds	r3, #1
 800eb84:	607b      	str	r3, [r7, #4]
 800eb86:	e7f0      	b.n	800eb6a <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0xa>
	}
 800eb88:	bf00      	nop
 800eb8a:	3708      	adds	r7, #8
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800eb90:	b480      	push	{r7}
 800eb92:	b083      	sub	sp, #12
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	6039      	str	r1, [r7, #0]
 800eb9a:	bf00      	nop
 800eb9c:	370c      	adds	r7, #12
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba4:	4770      	bx	lr

0800eba6 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 800eba6:	b590      	push	{r4, r7, lr}
 800eba8:	b083      	sub	sp, #12
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
 800ebae:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 800ebb0:	6838      	ldr	r0, [r7, #0]
 800ebb2:	f000 fff5 	bl	800fba0 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	4619      	mov	r1, r3
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f011 fbf4 	bl	80203a8 <_ZNSaIcEC1ERKS_>
 800ebc0:	687c      	ldr	r4, [r7, #4]
 800ebc2:	6838      	ldr	r0, [r7, #0]
 800ebc4:	f000 ffec 	bl	800fba0 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	4619      	mov	r1, r3
 800ebcc:	4620      	mov	r0, r4
 800ebce:	f000 fff2 	bl	800fbb6 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>
	{ }
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	370c      	adds	r7, #12
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd90      	pop	{r4, r7, pc}

0800ebdc <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	601a      	str	r2, [r3, #0]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	370c      	adds	r7, #12
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800ebfc:	b590      	push	{r4, r7, lr}
 800ebfe:	b087      	sub	sp, #28
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800ec08:	68f8      	ldr	r0, [r7, #12]
 800ec0a:	f000 fff7 	bl	800fbfc <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800ec0e:	4604      	mov	r4, r0
 800ec10:	68f8      	ldr	r0, [r7, #12]
 800ec12:	f7fd facf 	bl	800c1b4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800ec16:	4603      	mov	r3, r0
 800ec18:	1ae2      	subs	r2, r4, r3
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	bf34      	ite	cc
 800ec20:	2301      	movcc	r3, #1
 800ec22:	2300      	movcs	r3, #0
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d002      	beq.n	800ec30 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f011 fbc1 	bl	80203b2 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800ec30:	68f8      	ldr	r0, [r7, #12]
 800ec32:	f7fd fabf 	bl	800c1b4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800ec36:	4604      	mov	r4, r0
 800ec38:	68f8      	ldr	r0, [r7, #12]
 800ec3a:	f7fd fabb 	bl	800c1b4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	613b      	str	r3, [r7, #16]
 800ec42:	f107 0208 	add.w	r2, r7, #8
 800ec46:	f107 0310 	add.w	r3, r7, #16
 800ec4a:	4611      	mov	r1, r2
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7f4 fd6b 	bl	8003728 <_ZSt3maxIjERKT_S2_S2_>
 800ec52:	4603      	mov	r3, r0
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4423      	add	r3, r4
 800ec58:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ec5a:	68f8      	ldr	r0, [r7, #12]
 800ec5c:	f7fd faaa 	bl	800c1b4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800ec60:	4602      	mov	r2, r0
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d306      	bcc.n	800ec76 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800ec68:	68f8      	ldr	r0, [r7, #12]
 800ec6a:	f000 ffc7 	bl	800fbfc <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d904      	bls.n	800ec80 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x84>
 800ec76:	68f8      	ldr	r0, [r7, #12]
 800ec78:	f000 ffc0 	bl	800fbfc <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	e000      	b.n	800ec82 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800ec80:	697b      	ldr	r3, [r7, #20]
      }
 800ec82:	4618      	mov	r0, r3
 800ec84:	371c      	adds	r7, #28
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd90      	pop	{r4, r7, pc}

0800ec8a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	b084      	sub	sp, #16
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800ec92:	687a      	ldr	r2, [r7, #4]
 800ec94:	f107 030c 	add.w	r3, r7, #12
 800ec98:	4611      	mov	r1, r2
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7ff ff9e 	bl	800ebdc <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	4618      	mov	r0, r3
 800eca4:	3710      	adds	r7, #16
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
	...

0800ecac <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ecac:	b590      	push	{r4, r7, lr}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 f83a 	bl	800ed30 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	681c      	ldr	r4, [r3, #0]
 800ecc0:	6838      	ldr	r0, [r7, #0]
 800ecc2:	f000 f835 	bl	800ed30 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	1ae3      	subs	r3, r4, r3
 800eccc:	10db      	asrs	r3, r3, #3
 800ecce:	4a03      	ldr	r2, [pc, #12]	; (800ecdc <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 800ecd0:	fb02 f303 	mul.w	r3, r2, r3
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	370c      	adds	r7, #12
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd90      	pop	{r4, r7, pc}
 800ecdc:	aaaaaaab 	.word	0xaaaaaaab

0800ece0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d006      	beq.n	800ecfe <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x1e>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6839      	ldr	r1, [r7, #0]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f000 ff92 	bl	800fc1e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	e000      	b.n	800ed00 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x20>
 800ecfe:	2300      	movs	r3, #0
      }
 800ed00:	4618      	mov	r0, r3
 800ed02:	3708      	adds	r7, #8
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800ed08:	b590      	push	{r4, r7, lr}
 800ed0a:	b087      	sub	sp, #28
 800ed0c:	af02      	add	r7, sp, #8
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	607a      	str	r2, [r7, #4]
 800ed14:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800ed16:	f88d 4000 	strb.w	r4, [sp]
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	68b9      	ldr	r1, [r7, #8]
 800ed20:	68f8      	ldr	r0, [r7, #12]
 800ed22:	f000 ff9f 	bl	800fc64 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800ed26:	4603      	mov	r3, r0
      }
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3714      	adds	r7, #20
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd90      	pop	{r4, r7, pc}

0800ed30 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800ed30:	b480      	push	{r7}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	370c      	adds	r7, #12
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr

0800ed46 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800ed46:	b580      	push	{r7, lr}
 800ed48:	b082      	sub	sp, #8
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	6078      	str	r0, [r7, #4]
 800ed4e:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800ed50:	6838      	ldr	r0, [r7, #0]
 800ed52:	f000 ff99 	bl	800fc88 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
	}
 800ed56:	bf00      	nop
 800ed58:	3708      	adds	r7, #8
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b084      	sub	sp, #16
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
 800ed66:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6819      	ldr	r1, [r3, #0]
 800ed6c:	683a      	ldr	r2, [r7, #0]
 800ed6e:	4613      	mov	r3, r2
 800ed70:	005b      	lsls	r3, r3, #1
 800ed72:	4413      	add	r3, r2
 800ed74:	00db      	lsls	r3, r3, #3
 800ed76:	425b      	negs	r3, r3
 800ed78:	440b      	add	r3, r1
 800ed7a:	60fb      	str	r3, [r7, #12]
 800ed7c:	f107 020c 	add.w	r2, r7, #12
 800ed80:	f107 0308 	add.w	r3, r7, #8
 800ed84:	4611      	mov	r1, r2
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7ff ff28 	bl	800ebdc <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ed96:	b480      	push	{r7}
 800ed98:	b083      	sub	sp, #12
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	4618      	mov	r0, r3
 800eda4:	370c      	adds	r7, #12
 800eda6:	46bd      	mov	sp, r7
 800eda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edac:	4770      	bx	lr

0800edae <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800edae:	b580      	push	{r7, lr}
 800edb0:	b082      	sub	sp, #8
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
 800edb6:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d00a      	beq.n	800edd6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f000 ff7e 	bl	800fcc2 <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 800edc6:	4603      	mov	r3, r0
 800edc8:	4618      	mov	r0, r3
 800edca:	f000 ff85 	bl	800fcd8 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>
	  for (; __first != __last; ++__first)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	3318      	adds	r3, #24
 800edd2:	607b      	str	r3, [r7, #4]
 800edd4:	e7f0      	b.n	800edb8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0xa>
	}
 800edd6:	bf00      	nop
 800edd8:	3708      	adds	r7, #8
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}

0800edde <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 800edde:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ede0:	b085      	sub	sp, #20
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
 800ede6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800ede8:	687c      	ldr	r4, [r7, #4]
 800edea:	6838      	ldr	r0, [r7, #0]
 800edec:	f7fd f9e2 	bl	800c1b4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800edf0:	4605      	mov	r5, r0
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	4618      	mov	r0, r3
 800edf6:	f000 ff88 	bl	800fd0a <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800edfa:	4602      	mov	r2, r0
 800edfc:	f107 030c 	add.w	r3, r7, #12
 800ee00:	4611      	mov	r1, r2
 800ee02:	4618      	mov	r0, r3
 800ee04:	f000 ff73 	bl	800fcee <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>
 800ee08:	f107 030c 	add.w	r3, r7, #12
 800ee0c:	461a      	mov	r2, r3
 800ee0e:	4629      	mov	r1, r5
 800ee10:	4620      	mov	r0, r4
 800ee12:	f000 ff85 	bl	800fd20 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>
 800ee16:	f107 030c 	add.w	r3, r7, #12
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fc ff51 	bl	800bcc2 <_ZNSaIN3jlb4EdgeEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800ee20:	6838      	ldr	r0, [r7, #0]
 800ee22:	f000 ff91 	bl	800fd48 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800ee26:	4605      	mov	r5, r0
 800ee28:	6838      	ldr	r0, [r7, #0]
 800ee2a:	f000 ff9d 	bl	800fd68 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800ee2e:	4606      	mov	r6, r0
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fd fcab 	bl	800c792 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800ee3c:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800ee3e:	4622      	mov	r2, r4
 800ee40:	4631      	mov	r1, r6
 800ee42:	4628      	mov	r0, r5
 800ee44:	f000 ffa1 	bl	800fd8a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 800ee48:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	605a      	str	r2, [r3, #4]
      }
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	4618      	mov	r0, r3
 800ee52:	3714      	adds	r7, #20
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ee58 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800ee58:	b480      	push	{r7}
 800ee5a:	b083      	sub	sp, #12
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	601a      	str	r2, [r3, #0]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	370c      	adds	r7, #12
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr

0800ee78 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800ee78:	b590      	push	{r4, r7, lr}
 800ee7a:	b087      	sub	sp, #28
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	f000 ff91 	bl	800fdac <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800ee8a:	4604      	mov	r4, r0
 800ee8c:	68f8      	ldr	r0, [r7, #12]
 800ee8e:	f000 ff9f 	bl	800fdd0 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800ee92:	4603      	mov	r3, r0
 800ee94:	1ae2      	subs	r2, r4, r3
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	bf34      	ite	cc
 800ee9c:	2301      	movcc	r3, #1
 800ee9e:	2300      	movcs	r3, #0
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d002      	beq.n	800eeac <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f011 fa83 	bl	80203b2 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800eeac:	68f8      	ldr	r0, [r7, #12]
 800eeae:	f000 ff8f 	bl	800fdd0 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800eeb2:	4604      	mov	r4, r0
 800eeb4:	68f8      	ldr	r0, [r7, #12]
 800eeb6:	f000 ff8b 	bl	800fdd0 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800eeba:	4603      	mov	r3, r0
 800eebc:	613b      	str	r3, [r7, #16]
 800eebe:	f107 0208 	add.w	r2, r7, #8
 800eec2:	f107 0310 	add.w	r3, r7, #16
 800eec6:	4611      	mov	r1, r2
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7f4 fc2d 	bl	8003728 <_ZSt3maxIjERKT_S2_S2_>
 800eece:	4603      	mov	r3, r0
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4423      	add	r3, r4
 800eed4:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	f000 ff7a 	bl	800fdd0 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800eedc:	4602      	mov	r2, r0
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d306      	bcc.n	800eef2 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800eee4:	68f8      	ldr	r0, [r7, #12]
 800eee6:	f000 ff61 	bl	800fdac <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800eeea:	4602      	mov	r2, r0
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d904      	bls.n	800eefc <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x84>
 800eef2:	68f8      	ldr	r0, [r7, #12]
 800eef4:	f000 ff5a 	bl	800fdac <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800eef8:	4603      	mov	r3, r0
 800eefa:	e000      	b.n	800eefe <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800eefc:	697b      	ldr	r3, [r7, #20]
      }
 800eefe:	4618      	mov	r0, r3
 800ef00:	371c      	adds	r7, #28
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd90      	pop	{r4, r7, pc}

0800ef06 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ef06:	b580      	push	{r7, lr}
 800ef08:	b084      	sub	sp, #16
 800ef0a:	af00      	add	r7, sp, #0
 800ef0c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800ef0e:	687a      	ldr	r2, [r7, #4]
 800ef10:	f107 030c 	add.w	r3, r7, #12
 800ef14:	4611      	mov	r1, r2
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7ff ff9e 	bl	800ee58 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3710      	adds	r7, #16
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
	...

0800ef28 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ef28:	b590      	push	{r4, r7, lr}
 800ef2a:	b083      	sub	sp, #12
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f000 f826 	bl	800ef84 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	681c      	ldr	r4, [r3, #0]
 800ef3c:	6838      	ldr	r0, [r7, #0]
 800ef3e:	f000 f821 	bl	800ef84 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800ef42:	4603      	mov	r3, r0
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	1ae3      	subs	r3, r4, r3
 800ef48:	10db      	asrs	r3, r3, #3
 800ef4a:	4a03      	ldr	r2, [pc, #12]	; (800ef58 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 800ef4c:	fb02 f303 	mul.w	r3, r2, r3
 800ef50:	4618      	mov	r0, r3
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd90      	pop	{r4, r7, pc}
 800ef58:	aaaaaaab 	.word	0xaaaaaaab

0800ef5c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d006      	beq.n	800ef7a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x1e>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6839      	ldr	r1, [r7, #0]
 800ef70:	4618      	mov	r0, r3
 800ef72:	f000 ff43 	bl	800fdfc <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>
 800ef76:	4603      	mov	r3, r0
 800ef78:	e000      	b.n	800ef7c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x20>
 800ef7a:	2300      	movs	r3, #0
      }
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3708      	adds	r7, #8
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800ef84:	b480      	push	{r7}
 800ef86:	b083      	sub	sp, #12
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	4618      	mov	r0, r3
 800ef90:	370c      	adds	r7, #12
 800ef92:	46bd      	mov	sp, r7
 800ef94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef98:	4770      	bx	lr

0800ef9a <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800ef9a:	b590      	push	{r4, r7, lr}
 800ef9c:	b085      	sub	sp, #20
 800ef9e:	af00      	add	r7, sp, #0
 800efa0:	60f8      	str	r0, [r7, #12]
 800efa2:	60b9      	str	r1, [r7, #8]
 800efa4:	607a      	str	r2, [r7, #4]
 800efa6:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800efa8:	68f8      	ldr	r0, [r7, #12]
 800efaa:	f000 ff4a 	bl	800fe42 <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800efae:	4604      	mov	r4, r0
 800efb0:	68b8      	ldr	r0, [r7, #8]
 800efb2:	f000 ff46 	bl	800fe42 <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800efb6:	4601      	mov	r1, r0
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	4620      	mov	r0, r4
 800efbe:	f000 ff4b 	bl	800fe58 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>
 800efc2:	4603      	mov	r3, r0
    }
 800efc4:	4618      	mov	r0, r3
 800efc6:	3714      	adds	r7, #20
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd90      	pop	{r4, r7, pc}

0800efcc <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6819      	ldr	r1, [r3, #0]
 800efda:	683a      	ldr	r2, [r7, #0]
 800efdc:	4613      	mov	r3, r2
 800efde:	005b      	lsls	r3, r3, #1
 800efe0:	4413      	add	r3, r2
 800efe2:	00db      	lsls	r3, r3, #3
 800efe4:	425b      	negs	r3, r3
 800efe6:	440b      	add	r3, r1
 800efe8:	60fb      	str	r3, [r7, #12]
 800efea:	f107 020c 	add.w	r2, r7, #12
 800efee:	f107 0308 	add.w	r3, r7, #8
 800eff2:	4611      	mov	r1, r2
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7ff ff2f 	bl	800ee58 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	4618      	mov	r0, r3
 800effe:	3710      	adds	r7, #16
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800f004:	b480      	push	{r7}
 800f006:	b083      	sub	sp, #12
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4618      	mov	r0, r3
 800f012:	370c      	adds	r7, #12
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr

0800f01c <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800f024:	f04f 33ff 	mov.w	r3, #4294967295
      }
 800f028:	4618      	mov	r0, r3
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800f034:	b580      	push	{r7, lr}
 800f036:	b084      	sub	sp, #16
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800f03c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f040:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f7ff ffea 	bl	800f01c <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 800f048:	4603      	mov	r3, r0
 800f04a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800f04c:	f107 0208 	add.w	r2, r7, #8
 800f050:	f107 030c 	add.w	r3, r7, #12
 800f054:	4611      	mov	r1, r2
 800f056:	4618      	mov	r0, r3
 800f058:	f7f4 fc29 	bl	80038ae <_ZSt3minIjERKT_S2_S2_>
 800f05c:	4603      	mov	r3, r0
 800f05e:	681b      	ldr	r3, [r3, #0]
      }
 800f060:	4618      	mov	r0, r3
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800f068:	b580      	push	{r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800f074:	2301      	movs	r3, #1
 800f076:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800f078:	687a      	ldr	r2, [r7, #4]
 800f07a:	68b9      	ldr	r1, [r7, #8]
 800f07c:	68f8      	ldr	r0, [r7, #12]
 800f07e:	f000 ff07 	bl	800fe90 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>
 800f082:	4603      	mov	r3, r0
    }
 800f084:	4618      	mov	r0, r3
 800f086:	3718      	adds	r7, #24
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}

0800f08c <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800f08c:	b480      	push	{r7}
 800f08e:	b083      	sub	sp, #12
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	601a      	str	r2, [r3, #0]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2200      	movs	r2, #0
 800f09e:	605a      	str	r2, [r3, #4]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	609a      	str	r2, [r3, #8]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	60da      	str	r2, [r3, #12]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	370c      	adds	r7, #12
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b8:	4770      	bx	lr

0800f0ba <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800f0ba:	b580      	push	{r7, lr}
 800f0bc:	b084      	sub	sp, #16
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	6078      	str	r0, [r7, #4]
 800f0c2:	6039      	str	r1, [r7, #0]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	60fb      	str	r3, [r7, #12]
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800f0cc:	f7f3 fbb4 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d006      	beq.n	800f0e4 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	009b      	lsls	r3, r3, #2
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f011 f952 	bl	8020384 <_Znwj>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	e006      	b.n	800f0f2 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	68b9      	ldr	r1, [r7, #8]
 800f0e8:	68f8      	ldr	r0, [r7, #12]
 800f0ea:	f001 fa56 	bl	801059a <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	bf00      	nop
      { return __a.allocate(__n); }
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3710      	adds	r7, #16
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}

0800f0fa <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800f0fa:	b480      	push	{r7}
 800f0fc:	b083      	sub	sp, #12
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	4618      	mov	r0, r3
 800f106:	370c      	adds	r7, #12
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr

0800f110 <_ZNSaIPfEC1IfEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f000 fec8 	bl	800feb0 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	4618      	mov	r0, r3
 800f124:	3708      	adds	r7, #8
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}

0800f12a <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b084      	sub	sp, #16
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 800f132:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f136:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f7f4 fb6a 	bl	8003812 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 800f13e:	4603      	mov	r3, r0
 800f140:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800f142:	f107 0208 	add.w	r2, r7, #8
 800f146:	f107 030c 	add.w	r3, r7, #12
 800f14a:	4611      	mov	r1, r2
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7f4 fbae 	bl	80038ae <_ZSt3minIjERKT_S2_S2_>
 800f152:	4603      	mov	r3, r0
 800f154:	681b      	ldr	r3, [r3, #0]
      }
 800f156:	4618      	mov	r0, r3
 800f158:	3710      	adds	r7, #16
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <_ZSt4copyIPPfS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 800f15e:	b590      	push	{r4, r7, lr}
 800f160:	b085      	sub	sp, #20
 800f162:	af00      	add	r7, sp, #0
 800f164:	60f8      	str	r0, [r7, #12]
 800f166:	60b9      	str	r1, [r7, #8]
 800f168:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800f16a:	68f8      	ldr	r0, [r7, #12]
 800f16c:	f000 feba 	bl	800fee4 <_ZSt12__miter_baseIPPfET_S2_>
 800f170:	4604      	mov	r4, r0
 800f172:	68b8      	ldr	r0, [r7, #8]
 800f174:	f000 feb6 	bl	800fee4 <_ZSt12__miter_baseIPPfET_S2_>
 800f178:	4603      	mov	r3, r0
 800f17a:	687a      	ldr	r2, [r7, #4]
 800f17c:	4619      	mov	r1, r3
 800f17e:	4620      	mov	r0, r4
 800f180:	f000 febb 	bl	800fefa <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>
 800f184:	4603      	mov	r3, r0
    }
 800f186:	4618      	mov	r0, r3
 800f188:	3714      	adds	r7, #20
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd90      	pop	{r4, r7, pc}

0800f18e <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800f18e:	b590      	push	{r4, r7, lr}
 800f190:	b085      	sub	sp, #20
 800f192:	af00      	add	r7, sp, #0
 800f194:	60f8      	str	r0, [r7, #12]
 800f196:	60b9      	str	r1, [r7, #8]
 800f198:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800f19a:	68f8      	ldr	r0, [r7, #12]
 800f19c:	f000 fea2 	bl	800fee4 <_ZSt12__miter_baseIPPfET_S2_>
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	68b8      	ldr	r0, [r7, #8]
 800f1a4:	f000 fe9e 	bl	800fee4 <_ZSt12__miter_baseIPPfET_S2_>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	687a      	ldr	r2, [r7, #4]
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f000 fec6 	bl	800ff40 <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>
 800f1b4:	4603      	mov	r3, r0
    }
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3714      	adds	r7, #20
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd90      	pop	{r4, r7, pc}

0800f1be <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800f1be:	b590      	push	{r4, r7, lr}
 800f1c0:	b08b      	sub	sp, #44	; 0x2c
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	60f8      	str	r0, [r7, #12]
 800f1c6:	60b9      	str	r1, [r7, #8]
 800f1c8:	4613      	mov	r3, r2
 800f1ca:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	695b      	ldr	r3, [r3, #20]
 800f1d4:	1ad3      	subs	r3, r2, r3
 800f1d6:	109b      	asrs	r3, r3, #2
 800f1d8:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800f1da:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	6a3a      	ldr	r2, [r7, #32]
 800f1e0:	4413      	add	r3, r2
 800f1e2:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	685a      	ldr	r2, [r3, #4]
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	005b      	lsls	r3, r3, #1
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d92d      	bls.n	800f24c <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681a      	ldr	r2, [r3, #0]
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	1acb      	subs	r3, r1, r3
 800f1fc:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800f1fe:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800f200:	79fb      	ldrb	r3, [r7, #7]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d002      	beq.n	800f20c <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x4e>
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	e000      	b.n	800f20e <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x50>
 800f20c:	2300      	movs	r3, #0
 800f20e:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800f210:	4413      	add	r3, r2
 800f212:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	695b      	ldr	r3, [r3, #20]
 800f218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d209      	bcs.n	800f232 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800f226:	3304      	adds	r3, #4
 800f228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f22a:	4619      	mov	r1, r3
 800f22c:	f7ff ff97 	bl	800f15e <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
 800f230:	e048      	b.n	800f2c4 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800f23a:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800f23c:	6a3b      	ldr	r3, [r7, #32]
 800f23e:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800f240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f242:	4413      	add	r3, r2
 800f244:	461a      	mov	r2, r3
 800f246:	f7ff ffa2 	bl	800f18e <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>
 800f24a:	e03b      	b.n	800f2c4 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	3304      	adds	r3, #4
 800f254:	f107 0208 	add.w	r2, r7, #8
 800f258:	4611      	mov	r1, r2
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7f4 fa64 	bl	8003728 <_ZSt3maxIjERKT_S2_S2_>
 800f260:	4603      	mov	r3, r0
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 800f266:	3302      	adds	r3, #2
 800f268:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	69b9      	ldr	r1, [r7, #24]
 800f26e:	4618      	mov	r0, r3
 800f270:	f7fe fcce 	bl	800dc10 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 800f274:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800f276:	69ba      	ldr	r2, [r7, #24]
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	1ad3      	subs	r3, r2, r3
 800f27c:	085b      	lsrs	r3, r3, #1
 800f27e:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800f280:	79fb      	ldrb	r3, [r7, #7]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d002      	beq.n	800f28c <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xce>
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	009b      	lsls	r3, r3, #2
 800f28a:	e000      	b.n	800f28e <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xd0>
 800f28c:	2300      	movs	r3, #0
 800f28e:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800f290:	697a      	ldr	r2, [r7, #20]
 800f292:	4413      	add	r3, r2
 800f294:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800f29e:	3304      	adds	r3, #4
 800f2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	f7ff ff5b 	bl	800f15e <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	6819      	ldr	r1, [r3, #0]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	f7fd fccb 	bl	800cc4e <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>

	  this->_M_impl._M_map = __new_map;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	697a      	ldr	r2, [r7, #20]
 800f2bc:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	69ba      	ldr	r2, [r7, #24]
 800f2c2:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	3308      	adds	r3, #8
 800f2c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7fe fcd7 	bl	800dc7e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f103 0018 	add.w	r0, r3, #24
 800f2d6:	6a3b      	ldr	r3, [r7, #32]
 800f2d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	009b      	lsls	r3, r3, #2
 800f2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2e2:	4413      	add	r3, r2
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	f7fe fcca 	bl	800dc7e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
    }
 800f2ea:	bf00      	nop
 800f2ec:	372c      	adds	r7, #44	; 0x2c
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd90      	pop	{r4, r7, pc}

0800f2f2 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f2f2:	b480      	push	{r7}
 800f2f4:	b085      	sub	sp, #20
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	60f8      	str	r0, [r7, #12]
 800f2fa:	60b9      	str	r1, [r7, #8]
 800f2fc:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800f2fe:	68ba      	ldr	r2, [r7, #8]
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	1ad3      	subs	r3, r2, r3
    }
 800f304:	4618      	mov	r0, r3
 800f306:	3714      	adds	r7, #20
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 800f310:	b590      	push	{r4, r7, lr}
 800f312:	b085      	sub	sp, #20
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	60b9      	str	r1, [r7, #8]
 800f31a:	607a      	str	r2, [r7, #4]
 800f31c:	603b      	str	r3, [r7, #0]
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 800f31e:	68f8      	ldr	r0, [r7, #12]
 800f320:	f000 fe3e 	bl	800ffa0 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>
 800f324:	4604      	mov	r4, r0
 800f326:	68b8      	ldr	r0, [r7, #8]
 800f328:	f000 fe3a 	bl	800ffa0 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>
 800f32c:	4601      	mov	r1, r0
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	687a      	ldr	r2, [r7, #4]
 800f332:	4620      	mov	r0, r4
 800f334:	f000 fe49 	bl	800ffca <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>
 800f338:	4603      	mov	r3, r0
    }
 800f33a:	4618      	mov	r0, r3
 800f33c:	3714      	adds	r7, #20
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd90      	pop	{r4, r7, pc}

0800f342 <_ZSt12__miter_baseIPcET_S1_>:
    __miter_base(_Iterator __it)
 800f342:	b480      	push	{r7}
 800f344:	b083      	sub	sp, #12
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	4618      	mov	r0, r3
 800f34e:	370c      	adds	r7, #12
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr

0800f358 <_ZSt22__copy_move_backward_aILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800f358:	b5b0      	push	{r4, r5, r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	f7fd fedd 	bl	800d124 <_ZSt12__niter_baseIPcET_S1_>
 800f36a:	4604      	mov	r4, r0
 800f36c:	68b8      	ldr	r0, [r7, #8]
 800f36e:	f7fd fed9 	bl	800d124 <_ZSt12__niter_baseIPcET_S1_>
 800f372:	4605      	mov	r5, r0
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	4618      	mov	r0, r3
 800f378:	f7fd fed4 	bl	800d124 <_ZSt12__niter_baseIPcET_S1_>
 800f37c:	4603      	mov	r3, r0
 800f37e:	461a      	mov	r2, r3
 800f380:	4629      	mov	r1, r5
 800f382:	4620      	mov	r0, r4
 800f384:	f000 fe32 	bl	800ffec <_ZSt23__copy_move_backward_a1ILb1EPcS0_ET1_T0_S2_S1_>
 800f388:	4602      	mov	r2, r0
 800f38a:	1d3b      	adds	r3, r7, #4
 800f38c:	4611      	mov	r1, r2
 800f38e:	4618      	mov	r0, r3
 800f390:	f7fd fed3 	bl	800d13a <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 800f394:	4603      	mov	r3, r0
    }
 800f396:	4618      	mov	r0, r3
 800f398:	3710      	adds	r7, #16
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bdb0      	pop	{r4, r5, r7, pc}

0800f39e <_ZSt13__copy_move_aILb0EPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800f39e:	b5b0      	push	{r4, r5, r7, lr}
 800f3a0:	b084      	sub	sp, #16
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	60f8      	str	r0, [r7, #12]
 800f3a6:	60b9      	str	r1, [r7, #8]
 800f3a8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	f7fd feba 	bl	800d124 <_ZSt12__niter_baseIPcET_S1_>
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	68b8      	ldr	r0, [r7, #8]
 800f3b4:	f7fd feb6 	bl	800d124 <_ZSt12__niter_baseIPcET_S1_>
 800f3b8:	4605      	mov	r5, r0
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f000 fe26 	bl	801000c <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	4629      	mov	r1, r5
 800f3c6:	4620      	mov	r0, r4
 800f3c8:	f000 fe2e 	bl	8010028 <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f000 fe39 	bl	8010048 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES2_ET_S7_T0_>
 800f3d6:	4603      	mov	r3, r0
    }
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3710      	adds	r7, #16
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bdb0      	pop	{r4, r5, r7, pc}

0800f3e0 <_ZSt7advanceIPcjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 800f3e0:	b590      	push	{r4, r7, lr}
 800f3e2:	b085      	sub	sp, #20
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f7fd f834 	bl	800c45c <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800f3f4:	4622      	mov	r2, r4
 800f3f6:	68f9      	ldr	r1, [r7, #12]
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f000 fe3a 	bl	8010072 <_ZSt9__advanceIPciEvRT_T0_St26random_access_iterator_tag>
    }
 800f3fe:	bf00      	nop
 800f400:	3714      	adds	r7, #20
 800f402:	46bd      	mov	sp, r7
 800f404:	bd90      	pop	{r4, r7, pc}

0800f406 <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800f406:	b580      	push	{r7, lr}
 800f408:	b084      	sub	sp, #16
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	60f8      	str	r0, [r7, #12]
 800f40e:	60b9      	str	r1, [r7, #8]
 800f410:	607a      	str	r2, [r7, #4]
 800f412:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800f414:	687a      	ldr	r2, [r7, #4]
 800f416:	68b9      	ldr	r1, [r7, #8]
 800f418:	68f8      	ldr	r0, [r7, #12]
 800f41a:	f000 fe3c 	bl	8010096 <_ZSt18uninitialized_copyIPcS0_ET0_T_S2_S1_>
 800f41e:	4603      	mov	r3, r0
 800f420:	4618      	mov	r0, r3
 800f422:	3710      	adds	r7, #16
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800f428:	b590      	push	{r4, r7, lr}
 800f42a:	b087      	sub	sp, #28
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800f434:	68f8      	ldr	r0, [r7, #12]
 800f436:	f000 fe40 	bl	80100ba <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 800f43a:	4604      	mov	r4, r0
 800f43c:	68f8      	ldr	r0, [r7, #12]
 800f43e:	f7fc ff74 	bl	800c32a <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800f442:	4603      	mov	r3, r0
 800f444:	1ae2      	subs	r2, r4, r3
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	429a      	cmp	r2, r3
 800f44a:	bf34      	ite	cc
 800f44c:	2301      	movcc	r3, #1
 800f44e:	2300      	movcs	r3, #0
 800f450:	b2db      	uxtb	r3, r3
 800f452:	2b00      	cmp	r3, #0
 800f454:	d002      	beq.n	800f45c <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f010 ffab 	bl	80203b2 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f7fc ff64 	bl	800c32a <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800f462:	4604      	mov	r4, r0
 800f464:	68f8      	ldr	r0, [r7, #12]
 800f466:	f7fc ff60 	bl	800c32a <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800f46a:	4603      	mov	r3, r0
 800f46c:	613b      	str	r3, [r7, #16]
 800f46e:	f107 0208 	add.w	r2, r7, #8
 800f472:	f107 0310 	add.w	r3, r7, #16
 800f476:	4611      	mov	r1, r2
 800f478:	4618      	mov	r0, r3
 800f47a:	f7f4 f955 	bl	8003728 <_ZSt3maxIjERKT_S2_S2_>
 800f47e:	4603      	mov	r3, r0
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	4423      	add	r3, r4
 800f484:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f486:	68f8      	ldr	r0, [r7, #12]
 800f488:	f7fc ff4f 	bl	800c32a <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800f48c:	4602      	mov	r2, r0
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	4293      	cmp	r3, r2
 800f492:	d306      	bcc.n	800f4a2 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x7a>
 800f494:	68f8      	ldr	r0, [r7, #12]
 800f496:	f000 fe10 	bl	80100ba <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 800f49a:	4602      	mov	r2, r0
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d904      	bls.n	800f4ac <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x84>
 800f4a2:	68f8      	ldr	r0, [r7, #12]
 800f4a4:	f000 fe09 	bl	80100ba <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	e000      	b.n	800f4ae <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x86>
 800f4ac:	697b      	ldr	r3, [r7, #20]
      }
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	371c      	adds	r7, #28
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd90      	pop	{r4, r7, pc}

0800f4b6 <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800f4b6:	b590      	push	{r4, r7, lr}
 800f4b8:	b085      	sub	sp, #20
 800f4ba:	af00      	add	r7, sp, #0
 800f4bc:	60f8      	str	r0, [r7, #12]
 800f4be:	60b9      	str	r1, [r7, #8]
 800f4c0:	607a      	str	r2, [r7, #4]
 800f4c2:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800f4c4:	68f8      	ldr	r0, [r7, #12]
 800f4c6:	f000 fe09 	bl	80100dc <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	68b8      	ldr	r0, [r7, #8]
 800f4ce:	f000 fe05 	bl	80100dc <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>
 800f4d2:	4601      	mov	r1, r0
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	687a      	ldr	r2, [r7, #4]
 800f4d8:	4620      	mov	r0, r4
 800f4da:	f000 fd76 	bl	800ffca <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>
 800f4de:	4603      	mov	r3, r0
    }
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3714      	adds	r7, #20
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd90      	pop	{r4, r7, pc}

0800f4e8 <_ZSt4swapIbENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b084      	sub	sp, #16
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f000 fe01 	bl	80100fa <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	73fb      	strb	r3, [r7, #15]
      __a = _GLIBCXX_MOVE(__b);
 800f4fe:	6838      	ldr	r0, [r7, #0]
 800f500:	f000 fdfb 	bl	80100fa <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800f504:	4603      	mov	r3, r0
 800f506:	781a      	ldrb	r2, [r3, #0]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	701a      	strb	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800f50c:	f107 030f 	add.w	r3, r7, #15
 800f510:	4618      	mov	r0, r3
 800f512:	f000 fdf2 	bl	80100fa <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800f516:	4603      	mov	r3, r0
 800f518:	781a      	ldrb	r2, [r3, #0]
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	701a      	strb	r2, [r3, #0]
    }
 800f51e:	bf00      	nop
 800f520:	3710      	adds	r7, #16
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}

0800f526 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800f526:	b480      	push	{r7}
 800f528:	b087      	sub	sp, #28
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	60f8      	str	r0, [r7, #12]
 800f52e:	60b9      	str	r1, [r7, #8]
 800f530:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800f532:	68ba      	ldr	r2, [r7, #8]
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	1ad3      	subs	r3, r2, r3
 800f538:	617b      	str	r3, [r7, #20]
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	dd0d      	ble.n	800f55c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x36>
	      *__result = *__first;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	781a      	ldrb	r2, [r3, #0]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	701a      	strb	r2, [r3, #0]
	      ++__first;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	3301      	adds	r3, #1
 800f54c:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	3301      	adds	r3, #1
 800f552:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	3b01      	subs	r3, #1
 800f558:	617b      	str	r3, [r7, #20]
 800f55a:	e7ee      	b.n	800f53a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x14>
	  return __result;
 800f55c:	687b      	ldr	r3, [r7, #4]
	}
 800f55e:	4618      	mov	r0, r3
 800f560:	371c      	adds	r7, #28
 800f562:	46bd      	mov	sp, r7
 800f564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f568:	4770      	bx	lr

0800f56a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800f56a:	b580      	push	{r7, lr}
 800f56c:	b086      	sub	sp, #24
 800f56e:	af00      	add	r7, sp, #0
 800f570:	60f8      	str	r0, [r7, #12]
 800f572:	60b9      	str	r1, [r7, #8]
 800f574:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800f576:	68ba      	ldr	r2, [r7, #8]
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	1ad3      	subs	r3, r2, r3
 800f57c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d005      	beq.n	800f590 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	461a      	mov	r2, r3
 800f588:	68f9      	ldr	r1, [r7, #12]
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f012 fecb 	bl	8022326 <memmove>
	  return __result + _Num;
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	4413      	add	r3, r2
	}
 800f596:	4618      	mov	r0, r3
 800f598:	3718      	adds	r7, #24
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}

0800f59e <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800f59e:	b480      	push	{r7}
 800f5a0:	b083      	sub	sp, #12
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	370c      	adds	r7, #12
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr

0800f5b4 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>:
	    return noexcept(*__t < *__u) && noexcept(*__u < *__t);
	}

      template<typename _Tp, typename _Up>
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 800f5b4:	b480      	push	{r7}
 800f5b6:	b085      	sub	sp, #20
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	607a      	str	r2, [r7, #4]
	  { __t < __u } -> __boolean_testable;
	  { __u < __t } -> __boolean_testable;
	}
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d009      	beq.n	800f5e0 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2c>
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d201      	bcs.n	800f5dc <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x28>
 800f5d8:	23ff      	movs	r3, #255	; 0xff
 800f5da:	e002      	b.n	800f5e2 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 800f5dc:	2301      	movs	r3, #1
 800f5de:	e000      	b.n	800f5e2 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 800f5e0:	2300      	movs	r3, #0
	      else if (__u < __t)
		return weak_ordering::greater;
	      else
		return weak_ordering::equivalent;
	    }
	}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3714      	adds	r7, #20
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ec:	4770      	bx	lr
	...

0800f5f0 <_ZN9__gnu_cxxssIPfS1_St6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT0_EEcl7declvalIRT_EEEERKNS_17__normal_iteratorIS8_T1_EERKNSB_IS6_SC_EE>:
    operator<=>(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800f5f0:	b590      	push	{r4, r7, lr}
 800f5f2:	b083      	sub	sp, #12
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	6039      	str	r1, [r7, #0]
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f7f4 f845 	bl	800368a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800f600:	4604      	mov	r4, r0
 800f602:	6838      	ldr	r0, [r7, #0]
 800f604:	f7f4 f841 	bl	800368a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800f608:	4603      	mov	r3, r0
 800f60a:	461a      	mov	r2, r3
 800f60c:	4621      	mov	r1, r4
 800f60e:	4804      	ldr	r0, [pc, #16]	; (800f620 <_ZN9__gnu_cxxssIPfS1_St6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT0_EEcl7declvalIRT_EEEERKNS_17__normal_iteratorIS8_T1_EERKNSB_IS6_SC_EE+0x30>)
 800f610:	f7ff ffd0 	bl	800f5b4 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>
 800f614:	4603      	mov	r3, r0
 800f616:	4618      	mov	r0, r3
 800f618:	370c      	adds	r7, #12
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd90      	pop	{r4, r7, pc}
 800f61e:	bf00      	nop
 800f620:	08023f88 	.word	0x08023f88

0800f624 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800f624:	b590      	push	{r4, r7, lr}
 800f626:	b087      	sub	sp, #28
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	607a      	str	r2, [r7, #4]
 800f630:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800f632:	463b      	mov	r3, r7
 800f634:	461a      	mov	r2, r3
 800f636:	68b9      	ldr	r1, [r7, #8]
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	f000 fd86 	bl	801014a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	613b      	str	r3, [r7, #16]
 800f642:	1d3a      	adds	r2, r7, #4
 800f644:	f107 0310 	add.w	r3, r7, #16
 800f648:	4611      	mov	r1, r2
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7ff ffd0 	bl	800f5f0 <_ZN9__gnu_cxxssIPfS1_St6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT0_EEcl7declvalIRT_EEEERKNS_17__normal_iteratorIS8_T1_EERKNSB_IS6_SC_EE>
 800f650:	4604      	mov	r4, r0
 800f652:	f107 0314 	add.w	r3, r7, #20
 800f656:	2100      	movs	r1, #0
 800f658:	4618      	mov	r0, r3
 800f65a:	f7f4 fe3d 	bl	80042d8 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 800f65e:	7d39      	ldrb	r1, [r7, #20]
 800f660:	4620      	mov	r0, r4
 800f662:	f7f4 fe45 	bl	80042f0 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 800f666:	4603      	mov	r3, r0
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d014      	beq.n	800f696 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x72>
	if (__comp(__i, __first))
 800f66c:	463b      	mov	r3, r7
 800f66e:	68fa      	ldr	r2, [r7, #12]
 800f670:	6939      	ldr	r1, [r7, #16]
 800f672:	4618      	mov	r0, r3
 800f674:	f7fe ff43 	bl	800e4fe <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d005      	beq.n	800f68a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x66>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800f67e:	463b      	mov	r3, r7
 800f680:	693a      	ldr	r2, [r7, #16]
 800f682:	68b9      	ldr	r1, [r7, #8]
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	f000 fdb6 	bl	80101f6 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800f68a:	f107 0310 	add.w	r3, r7, #16
 800f68e:	4618      	mov	r0, r3
 800f690:	f7fe ff19 	bl	800e4c6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800f694:	e7d5      	b.n	800f642 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x1e>
    }
 800f696:	bf00      	nop
 800f698:	371c      	adds	r7, #28
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd90      	pop	{r4, r7, pc}

0800f69e <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800f69e:	b480      	push	{r7}
 800f6a0:	b083      	sub	sp, #12
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
	--_M_current;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	1f1a      	subs	r2, r3, #4
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	601a      	str	r2, [r3, #0]
	return *this;
 800f6b0:	687b      	ldr	r3, [r7, #4]
      }
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	370c      	adds	r7, #12
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr

0800f6be <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f6be:	b580      	push	{r7, lr}
 800f6c0:	b084      	sub	sp, #16
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	60f8      	str	r0, [r7, #12]
 800f6c6:	60b9      	str	r1, [r7, #8]
 800f6c8:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 800f6ca:	f107 020c 	add.w	r2, r7, #12
 800f6ce:	f107 0308 	add.w	r3, r7, #8
 800f6d2:	4611      	mov	r1, r2
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7f3 ff9b 	bl	8003610 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	2b01      	cmp	r3, #1
 800f6de:	bfcc      	ite	gt
 800f6e0:	2301      	movgt	r3, #1
 800f6e2:	2300      	movle	r3, #0
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d00b      	beq.n	800f702 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x44>
	{
	  --__last;
 800f6ea:	f107 0308 	add.w	r3, r7, #8
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7ff ffd5 	bl	800f69e <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	68ba      	ldr	r2, [r7, #8]
 800f6f8:	68b9      	ldr	r1, [r7, #8]
 800f6fa:	68f8      	ldr	r0, [r7, #12]
 800f6fc:	f000 fd7b 	bl	80101f6 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 800f700:	e7e3      	b.n	800f6ca <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xc>
	}
    }
 800f702:	bf00      	nop
 800f704:	3710      	adds	r7, #16
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}

0800f70a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800f70a:	b580      	push	{r7, lr}
 800f70c:	b084      	sub	sp, #16
 800f70e:	af00      	add	r7, sp, #0
 800f710:	6078      	str	r0, [r7, #4]
 800f712:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681a      	ldr	r2, [r3, #0]
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	425b      	negs	r3, r3
 800f71e:	4413      	add	r3, r2
 800f720:	60fb      	str	r3, [r7, #12]
 800f722:	f107 020c 	add.w	r2, r7, #12
 800f726:	f107 0308 	add.w	r3, r7, #8
 800f72a:	4611      	mov	r1, r2
 800f72c:	4618      	mov	r0, r3
 800f72e:	f7f3 ff08 	bl	8003542 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	4618      	mov	r0, r3
 800f736:	3710      	adds	r7, #16
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b084      	sub	sp, #16
 800f740:	af00      	add	r7, sp, #0
 800f742:	60f8      	str	r0, [r7, #12]
 800f744:	60b9      	str	r1, [r7, #8]
 800f746:	607a      	str	r2, [r7, #4]
 800f748:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800f74a:	687a      	ldr	r2, [r7, #4]
 800f74c:	68b9      	ldr	r1, [r7, #8]
 800f74e:	f107 0018 	add.w	r0, r7, #24
 800f752:	f7fe fed4 	bl	800e4fe <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f756:	4603      	mov	r3, r0
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d020      	beq.n	800f79e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 800f75c:	683a      	ldr	r2, [r7, #0]
 800f75e:	6879      	ldr	r1, [r7, #4]
 800f760:	f107 0018 	add.w	r0, r7, #24
 800f764:	f7fe fecb 	bl	800e4fe <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f768:	4603      	mov	r3, r0
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d004      	beq.n	800f778 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800f76e:	6879      	ldr	r1, [r7, #4]
 800f770:	68f8      	ldr	r0, [r7, #12]
 800f772:	f000 fd80 	bl	8010276 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800f776:	e032      	b.n	800f7de <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 800f778:	683a      	ldr	r2, [r7, #0]
 800f77a:	68b9      	ldr	r1, [r7, #8]
 800f77c:	f107 0018 	add.w	r0, r7, #24
 800f780:	f7fe febd 	bl	800e4fe <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f784:	4603      	mov	r3, r0
 800f786:	2b00      	cmp	r3, #0
 800f788:	d004      	beq.n	800f794 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 800f78a:	6839      	ldr	r1, [r7, #0]
 800f78c:	68f8      	ldr	r0, [r7, #12]
 800f78e:	f000 fd72 	bl	8010276 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800f792:	e024      	b.n	800f7de <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800f794:	68b9      	ldr	r1, [r7, #8]
 800f796:	68f8      	ldr	r0, [r7, #12]
 800f798:	f000 fd6d 	bl	8010276 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800f79c:	e01f      	b.n	800f7de <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 800f79e:	683a      	ldr	r2, [r7, #0]
 800f7a0:	68b9      	ldr	r1, [r7, #8]
 800f7a2:	f107 0018 	add.w	r0, r7, #24
 800f7a6:	f7fe feaa 	bl	800e4fe <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d004      	beq.n	800f7ba <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 800f7b0:	68b9      	ldr	r1, [r7, #8]
 800f7b2:	68f8      	ldr	r0, [r7, #12]
 800f7b4:	f000 fd5f 	bl	8010276 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800f7b8:	e011      	b.n	800f7de <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 800f7ba:	683a      	ldr	r2, [r7, #0]
 800f7bc:	6879      	ldr	r1, [r7, #4]
 800f7be:	f107 0018 	add.w	r0, r7, #24
 800f7c2:	f7fe fe9c 	bl	800e4fe <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d004      	beq.n	800f7d6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 800f7cc:	6839      	ldr	r1, [r7, #0]
 800f7ce:	68f8      	ldr	r0, [r7, #12]
 800f7d0:	f000 fd51 	bl	8010276 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800f7d4:	e003      	b.n	800f7de <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 800f7d6:	6879      	ldr	r1, [r7, #4]
 800f7d8:	68f8      	ldr	r0, [r7, #12]
 800f7da:	f000 fd4c 	bl	8010276 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800f7de:	bf00      	nop
 800f7e0:	3710      	adds	r7, #16
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800f7e6:	b590      	push	{r4, r7, lr}
 800f7e8:	b087      	sub	sp, #28
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	60f8      	str	r0, [r7, #12]
 800f7ee:	60b9      	str	r1, [r7, #8]
 800f7f0:	607a      	str	r2, [r7, #4]
 800f7f2:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800f7f4:	463b      	mov	r3, r7
 800f7f6:	687a      	ldr	r2, [r7, #4]
 800f7f8:	68f9      	ldr	r1, [r7, #12]
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7fe fe7f 	bl	800e4fe <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d005      	beq.n	800f812 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x2c>
	    ++__first;
 800f806:	f107 030c 	add.w	r3, r7, #12
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7fe fe5b 	bl	800e4c6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 800f810:	e7f0      	b.n	800f7f4 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0xe>
	  --__last;
 800f812:	f107 0308 	add.w	r3, r7, #8
 800f816:	4618      	mov	r0, r3
 800f818:	f7ff ff41 	bl	800f69e <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 800f81c:	463b      	mov	r3, r7
 800f81e:	68ba      	ldr	r2, [r7, #8]
 800f820:	6879      	ldr	r1, [r7, #4]
 800f822:	4618      	mov	r0, r3
 800f824:	f7fe fe6b 	bl	800e4fe <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f828:	4603      	mov	r3, r0
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d005      	beq.n	800f83a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x54>
	    --__last;
 800f82e:	f107 0308 	add.w	r3, r7, #8
 800f832:	4618      	mov	r0, r3
 800f834:	f7ff ff33 	bl	800f69e <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 800f838:	e7f0      	b.n	800f81c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x36>
	  if (!(__first < __last))
 800f83a:	f107 0208 	add.w	r2, r7, #8
 800f83e:	f107 030c 	add.w	r3, r7, #12
 800f842:	4611      	mov	r1, r2
 800f844:	4618      	mov	r0, r3
 800f846:	f7ff fed3 	bl	800f5f0 <_ZN9__gnu_cxxssIPfS1_St6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT0_EEcl7declvalIRT_EEEERKNS_17__normal_iteratorIS8_T1_EERKNSB_IS6_SC_EE>
 800f84a:	4604      	mov	r4, r0
 800f84c:	f107 0314 	add.w	r3, r7, #20
 800f850:	2100      	movs	r1, #0
 800f852:	4618      	mov	r0, r3
 800f854:	f7f4 fd40 	bl	80042d8 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 800f858:	7d39      	ldrb	r1, [r7, #20]
 800f85a:	4620      	mov	r0, r4
 800f85c:	f7f4 fd48 	bl	80042f0 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 800f860:	4603      	mov	r3, r0
 800f862:	f083 0301 	eor.w	r3, r3, #1
 800f866:	b2db      	uxtb	r3, r3
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d001      	beq.n	800f870 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x8a>
	    return __first;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	e009      	b.n	800f884 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x9e>
	  std::iter_swap(__first, __last);
 800f870:	68b9      	ldr	r1, [r7, #8]
 800f872:	68f8      	ldr	r0, [r7, #12]
 800f874:	f000 fcff 	bl	8010276 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	  ++__first;
 800f878:	f107 030c 	add.w	r3, r7, #12
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7fe fe22 	bl	800e4c6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 800f882:	e7b7      	b.n	800f7f4 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0xe>
    }
 800f884:	4618      	mov	r0, r3
 800f886:	371c      	adds	r7, #28
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd90      	pop	{r4, r7, pc}

0800f88c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>:
    __miter_base(_Iterator __it)
 800f88c:	b480      	push	{r7}
 800f88e:	b083      	sub	sp, #12
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4618      	mov	r0, r3
 800f898:	370c      	adds	r7, #12
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr

0800f8a2 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800f8a2:	b5b0      	push	{r4, r5, r7, lr}
 800f8a4:	b084      	sub	sp, #16
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	60f8      	str	r0, [r7, #12]
 800f8aa:	60b9      	str	r1, [r7, #8]
 800f8ac:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f8ae:	68f8      	ldr	r0, [r7, #12]
 800f8b0:	f7ff f89b 	bl	800e9ea <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800f8b4:	4604      	mov	r4, r0
 800f8b6:	68b8      	ldr	r0, [r7, #8]
 800f8b8:	f7ff f897 	bl	800e9ea <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800f8bc:	4605      	mov	r5, r0
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f7ff f893 	bl	800e9ea <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	4629      	mov	r1, r5
 800f8ca:	4620      	mov	r0, r4
 800f8cc:	f000 fcea 	bl	80102a4 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7ff f8a6 	bl	800ea26 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 800f8da:	4603      	mov	r3, r0
    }
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bdb0      	pop	{r4, r5, r7, pc}

0800f8e4 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	ed2d 8b02 	vpush	{d8}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	ed93 8a00 	vldr	s16, [r3]
 800f8fa:	1d3b      	adds	r3, r7, #4
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7fe fdf2 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f902:	4603      	mov	r3, r0
 800f904:	edd3 7a00 	vldr	s15, [r3]
 800f908:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f910:	bf4c      	ite	mi
 800f912:	2301      	movmi	r3, #1
 800f914:	2300      	movpl	r3, #0
 800f916:	b2db      	uxtb	r3, r3
 800f918:	4618      	mov	r0, r3
 800f91a:	3710      	adds	r7, #16
 800f91c:	46bd      	mov	sp, r7
 800f91e:	ecbd 8b02 	vpop	{d8}
 800f922:	bd80      	pop	{r7, pc}

0800f924 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800f924:	b590      	push	{r4, r7, lr}
 800f926:	b085      	sub	sp, #20
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800f92e:	1d3b      	adds	r3, r7, #4
 800f930:	4618      	mov	r0, r3
 800f932:	f7fe fdd8 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f936:	4603      	mov	r3, r0
 800f938:	4618      	mov	r0, r3
 800f93a:	f7fc fbe1 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f93e:	4603      	mov	r3, r0
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	60bb      	str	r3, [r7, #8]
      --__next;
 800f948:	f107 0308 	add.w	r3, r7, #8
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7ff fea6 	bl	800f69e <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 800f952:	f107 010c 	add.w	r1, r7, #12
 800f956:	463b      	mov	r3, r7
 800f958:	68ba      	ldr	r2, [r7, #8]
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7ff ffc2 	bl	800f8e4 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	d018      	beq.n	800f998 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x74>
	  *__last = _GLIBCXX_MOVE(*__next);
 800f966:	f107 0308 	add.w	r3, r7, #8
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7fe fdbb 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f970:	4603      	mov	r3, r0
 800f972:	4618      	mov	r0, r3
 800f974:	f7fc fbc4 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f978:	4603      	mov	r3, r0
 800f97a:	681c      	ldr	r4, [r3, #0]
 800f97c:	1d3b      	adds	r3, r7, #4
 800f97e:	4618      	mov	r0, r3
 800f980:	f7fe fdb1 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f984:	4603      	mov	r3, r0
 800f986:	601c      	str	r4, [r3, #0]
	  __last = __next;
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	607b      	str	r3, [r7, #4]
	  --__next;
 800f98c:	f107 0308 	add.w	r3, r7, #8
 800f990:	4618      	mov	r0, r3
 800f992:	f7ff fe84 	bl	800f69e <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 800f996:	e7dc      	b.n	800f952 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x2e>
      *__last = _GLIBCXX_MOVE(__val);
 800f998:	f107 030c 	add.w	r3, r7, #12
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7fc fbaf 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	681c      	ldr	r4, [r3, #0]
 800f9a6:	1d3b      	adds	r3, r7, #4
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7fe fd9c 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	601c      	str	r4, [r3, #0]
    }
 800f9b2:	bf00      	nop
 800f9b4:	3714      	adds	r7, #20
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd90      	pop	{r4, r7, pc}

0800f9ba <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b082      	sub	sp, #8
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
 800f9c2:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800f9c4:	463b      	mov	r3, r7
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7fe fe65 	bl	800e696 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3708      	adds	r7, #8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}

0800f9d6 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 800f9d6:	b580      	push	{r7, lr}
 800f9d8:	b082      	sub	sp, #8
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
 800f9de:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800f9e0:	463b      	mov	r3, r7
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7fe ff16 	bl	800e814 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3708      	adds	r7, #8
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}

0800f9f2 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800f9f2:	b480      	push	{r7}
 800f9f4:	b083      	sub	sp, #12
 800f9f6:	af00      	add	r7, sp, #0
 800f9f8:	6078      	str	r0, [r7, #4]
 800f9fa:	6039      	str	r1, [r7, #0]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	4618      	mov	r0, r3
 800fa00:	370c      	adds	r7, #12
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr

0800fa0a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800fa0a:	b590      	push	{r4, r7, lr}
 800fa0c:	b085      	sub	sp, #20
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	60f8      	str	r0, [r7, #12]
 800fa12:	60b9      	str	r1, [r7, #8]
 800fa14:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800fa16:	68f8      	ldr	r0, [r7, #12]
 800fa18:	f7fd fcd0 	bl	800d3bc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800fa1c:	4604      	mov	r4, r0
 800fa1e:	68b8      	ldr	r0, [r7, #8]
 800fa20:	f7fd fccc 	bl	800d3bc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800fa24:	4603      	mov	r3, r0
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	4619      	mov	r1, r3
 800fa2a:	4620      	mov	r0, r4
 800fa2c:	f000 fc4a 	bl	80102c4 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 800fa30:	4603      	mov	r3, r0
    }
 800fa32:	4618      	mov	r0, r3
 800fa34:	3714      	adds	r7, #20
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd90      	pop	{r4, r7, pc}

0800fa3a <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800fa3a:	b480      	push	{r7}
 800fa3c:	b083      	sub	sp, #12
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	4618      	mov	r0, r3
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr

0800fa50 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b084      	sub	sp, #16
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	60f8      	str	r0, [r7, #12]
 800fa58:	60b9      	str	r1, [r7, #8]
 800fa5a:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800fa5c:	f7f2 feec 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 800fa60:	4603      	mov	r3, r0
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d006      	beq.n	800fa74 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	68b9      	ldr	r1, [r7, #8]
 800fa6a:	68f8      	ldr	r0, [r7, #12]
 800fa6c:	f000 fc4d 	bl	801030a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 800fa70:	4603      	mov	r3, r0
 800fa72:	e006      	b.n	800fa82 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	68b9      	ldr	r1, [r7, #8]
 800fa78:	68f8      	ldr	r0, [r7, #12]
 800fa7a:	f000 f829 	bl	800fad0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	bf00      	nop
    }
 800fa82:	4618      	mov	r0, r3
 800fa84:	3710      	adds	r7, #16
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}

0800fa8a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800fa8a:	b480      	push	{r7}
 800fa8c:	b087      	sub	sp, #28
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	60f8      	str	r0, [r7, #12]
 800fa92:	60b9      	str	r1, [r7, #8]
 800fa94:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800fa96:	68ba      	ldr	r2, [r7, #8]
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	1ad3      	subs	r3, r2, r3
 800fa9c:	109b      	asrs	r3, r3, #2
 800fa9e:	617b      	str	r3, [r7, #20]
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	dd0d      	ble.n	800fac2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x38>
	      *__result = *__first;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	601a      	str	r2, [r3, #0]
	      ++__first;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	3304      	adds	r3, #4
 800fab2:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	3304      	adds	r3, #4
 800fab8:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	3b01      	subs	r3, #1
 800fabe:	617b      	str	r3, [r7, #20]
 800fac0:	e7ee      	b.n	800faa0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x16>
	  return __result;
 800fac2:	687b      	ldr	r3, [r7, #4]
	}
 800fac4:	4618      	mov	r0, r3
 800fac6:	371c      	adds	r7, #28
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr

0800fad0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b086      	sub	sp, #24
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	60f8      	str	r0, [r7, #12]
 800fad8:	60b9      	str	r1, [r7, #8]
 800fada:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800fadc:	68ba      	ldr	r2, [r7, #8]
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	1ad3      	subs	r3, r2, r3
 800fae2:	109b      	asrs	r3, r3, #2
 800fae4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d006      	beq.n	800fafa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	009b      	lsls	r3, r3, #2
 800faf0:	461a      	mov	r2, r3
 800faf2:	68f9      	ldr	r1, [r7, #12]
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f012 fc16 	bl	8022326 <memmove>
	  return __result + _Num;
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	009b      	lsls	r3, r3, #2
 800fafe:	687a      	ldr	r2, [r7, #4]
 800fb00:	4413      	add	r3, r2
	}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3718      	adds	r7, #24
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}

0800fb0a <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b084      	sub	sp, #16
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	60f8      	str	r0, [r7, #12]
 800fb12:	60b9      	str	r1, [r7, #8]
 800fb14:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	4613      	mov	r3, r2
 800fb1a:	005b      	lsls	r3, r3, #1
 800fb1c:	4413      	add	r3, r2
 800fb1e:	00db      	lsls	r3, r3, #3
 800fb20:	4619      	mov	r1, r3
 800fb22:	68b8      	ldr	r0, [r7, #8]
 800fb24:	f010 fc2c 	bl	8020380 <_ZdlPvj>
      }
 800fb28:	3710      	adds	r7, #16
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}

0800fb2e <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800fb2e:	b480      	push	{r7}
 800fb30:	b083      	sub	sp, #12
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	370c      	adds	r7, #12
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr

0800fb44 <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>:
    _Destroy(_Tp* __pointer)
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f000 f89b 	bl	800fc88 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
    }
 800fb52:	bf00      	nop
 800fb54:	3708      	adds	r7, #8
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}

0800fb5a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800fb5a:	b590      	push	{r4, r7, lr}
 800fb5c:	b085      	sub	sp, #20
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	60f8      	str	r0, [r7, #12]
 800fb62:	60b9      	str	r1, [r7, #8]
 800fb64:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800fb66:	68f8      	ldr	r0, [r7, #12]
 800fb68:	f000 fbf2 	bl	8010350 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 800fb6c:	4604      	mov	r4, r0
 800fb6e:	68b8      	ldr	r0, [r7, #8]
 800fb70:	f000 fbee 	bl	8010350 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 800fb74:	4603      	mov	r3, r0
 800fb76:	687a      	ldr	r2, [r7, #4]
 800fb78:	4619      	mov	r1, r3
 800fb7a:	4620      	mov	r0, r4
 800fb7c:	f000 fbf3 	bl	8010366 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>
 800fb80:	4603      	mov	r3, r0
    }
 800fb82:	4618      	mov	r0, r3
 800fb84:	3714      	adds	r7, #20
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd90      	pop	{r4, r7, pc}

0800fb8a <_ZSt8_DestroyIcEvPT_>:
    _Destroy(_Tp* __pointer)
 800fb8a:	b580      	push	{r7, lr}
 800fb8c:	b082      	sub	sp, #8
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 fc0a 	bl	80103ac <_ZSt10destroy_atIcEvPT_>
    }
 800fb98:	bf00      	nop
 800fb9a:	3708      	adds	r7, #8
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800fba0:	b480      	push	{r7}
 800fba2:	b083      	sub	sp, #12
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	4618      	mov	r0, r3
 800fbac:	370c      	adds	r7, #12
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr

0800fbb6 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 800fbb6:	b480      	push	{r7}
 800fbb8:	b083      	sub	sp, #12
 800fbba:	af00      	add	r7, sp, #0
 800fbbc:	6078      	str	r0, [r7, #4]
 800fbbe:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	681a      	ldr	r2, [r3, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	601a      	str	r2, [r3, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	685a      	ldr	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	605a      	str	r2, [r3, #4]
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	689a      	ldr	r2, [r3, #8]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	609a      	str	r2, [r3, #8]
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	689a      	ldr	r2, [r3, #8]
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	605a      	str	r2, [r3, #4]
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	685a      	ldr	r2, [r3, #4]
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	601a      	str	r2, [r3, #0]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	370c      	adds	r7, #12
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfa:	4770      	bx	lr

0800fbfc <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b082      	sub	sp, #8
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	4618      	mov	r0, r3
 800fc08:	f000 f87f 	bl	800fd0a <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f000 fbe4 	bl	80103dc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>
 800fc14:	4603      	mov	r3, r0
 800fc16:	4618      	mov	r0, r3
 800fc18:	3708      	adds	r7, #8
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}

0800fc1e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800fc1e:	b580      	push	{r7, lr}
 800fc20:	b084      	sub	sp, #16
 800fc22:	af00      	add	r7, sp, #0
 800fc24:	6078      	str	r0, [r7, #4]
 800fc26:	6039      	str	r1, [r7, #0]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	60fb      	str	r3, [r7, #12]
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800fc30:	f7f2 fe02 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d009      	beq.n	800fc4e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800fc3a:	68ba      	ldr	r2, [r7, #8]
 800fc3c:	4613      	mov	r3, r2
 800fc3e:	005b      	lsls	r3, r3, #1
 800fc40:	4413      	add	r3, r2
 800fc42:	00db      	lsls	r3, r3, #3
 800fc44:	4618      	mov	r0, r3
 800fc46:	f010 fb9d 	bl	8020384 <_Znwj>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	e006      	b.n	800fc5c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800fc4e:	2200      	movs	r2, #0
 800fc50:	68b9      	ldr	r1, [r7, #8]
 800fc52:	68f8      	ldr	r0, [r7, #12]
 800fc54:	f000 fe6e 	bl	8010934 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	bf00      	nop
      { return __a.allocate(__n); }
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3710      	adds	r7, #16
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}

0800fc64 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b084      	sub	sp, #16
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	60f8      	str	r0, [r7, #12]
 800fc6c:	60b9      	str	r1, [r7, #8]
 800fc6e:	607a      	str	r2, [r7, #4]
 800fc70:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	687a      	ldr	r2, [r7, #4]
 800fc76:	68b9      	ldr	r1, [r7, #8]
 800fc78:	68f8      	ldr	r0, [r7, #12]
 800fc7a:	f000 fbcb 	bl	8010414 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800fc7e:	4603      	mov	r3, r0
      }
 800fc80:	4618      	mov	r0, r3
 800fc82:	3710      	adds	r7, #16
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}

0800fc88 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>:
    destroy_at(_Tp* __location)
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f7f5 f82c 	bl	8004cee <_ZN3jlb4EdgeD1Ev>
    }
 800fc96:	bf00      	nop
 800fc98:	3708      	adds	r7, #8
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}

0800fc9e <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800fc9e:	b580      	push	{r7, lr}
 800fca0:	b084      	sub	sp, #16
 800fca2:	af00      	add	r7, sp, #0
 800fca4:	60f8      	str	r0, [r7, #12]
 800fca6:	60b9      	str	r1, [r7, #8]
 800fca8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800fcaa:	687a      	ldr	r2, [r7, #4]
 800fcac:	4613      	mov	r3, r2
 800fcae:	005b      	lsls	r3, r3, #1
 800fcb0:	4413      	add	r3, r2
 800fcb2:	00db      	lsls	r3, r3, #3
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	68b8      	ldr	r0, [r7, #8]
 800fcb8:	f010 fb62 	bl	8020380 <_ZdlPvj>
      }
 800fcbc:	3710      	adds	r7, #16
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800fcc2:	b480      	push	{r7}
 800fcc4:	b083      	sub	sp, #12
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	4618      	mov	r0, r3
 800fcce:	370c      	adds	r7, #12
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr

0800fcd8 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>:
    _Destroy(_Tp* __pointer)
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f000 f8ca 	bl	800fe7a <_ZSt10destroy_atIN3jlb4NodeEEvPT_>
    }
 800fce6:	bf00      	nop
 800fce8:	3708      	adds	r7, #8
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}

0800fcee <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800fcee:	b580      	push	{r7, lr}
 800fcf0:	b082      	sub	sp, #8
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	6078      	str	r0, [r7, #4]
 800fcf6:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6839      	ldr	r1, [r7, #0]
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f000 fba6 	bl	801044e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800fd0a:	b480      	push	{r7}
 800fd0c:	b083      	sub	sp, #12
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	4618      	mov	r0, r3
 800fd16:	370c      	adds	r7, #12
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr

0800fd20 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	60f8      	str	r0, [r7, #12]
 800fd28:	60b9      	str	r1, [r7, #8]
 800fd2a:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	6879      	ldr	r1, [r7, #4]
 800fd30:	4618      	mov	r0, r3
 800fd32:	f000 fb99 	bl	8010468 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800fd36:	68b9      	ldr	r1, [r7, #8]
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f000 fba7 	bl	801048c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	4618      	mov	r0, r3
 800fd42:	3710      	adds	r7, #16
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b084      	sub	sp, #16
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	f107 030c 	add.w	r3, r7, #12
 800fd56:	4611      	mov	r1, r2
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f000 fbb5 	bl	80104c8 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	4618      	mov	r0, r3
 800fd62:	3710      	adds	r7, #16
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b084      	sub	sp, #16
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	1d1a      	adds	r2, r3, #4
 800fd74:	f107 030c 	add.w	r3, r7, #12
 800fd78:	4611      	mov	r1, r2
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f000 fba4 	bl	80104c8 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	4618      	mov	r0, r3
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}

0800fd8a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b084      	sub	sp, #16
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	60f8      	str	r0, [r7, #12]
 800fd92:	60b9      	str	r1, [r7, #8]
 800fd94:	607a      	str	r2, [r7, #4]
 800fd96:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	68b9      	ldr	r1, [r7, #8]
 800fd9c:	68f8      	ldr	r0, [r7, #12]
 800fd9e:	f000 fba3 	bl	80104e8 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800fda2:	4603      	mov	r3, r0
 800fda4:	4618      	mov	r0, r3
 800fda6:	3710      	adds	r7, #16
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f000 fbd2 	bl	8010560 <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f000 fbb2 	bl	8010528 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3708      	adds	r7, #8
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
	...

0800fdd0 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	685a      	ldr	r2, [r3, #4]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	1ad3      	subs	r3, r2, r3
 800fde2:	10db      	asrs	r3, r3, #3
 800fde4:	4a04      	ldr	r2, [pc, #16]	; (800fdf8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv+0x28>)
 800fde6:	fb02 f303 	mul.w	r3, r2, r3
 800fdea:	4618      	mov	r0, r3
 800fdec:	370c      	adds	r7, #12
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf4:	4770      	bx	lr
 800fdf6:	bf00      	nop
 800fdf8:	aaaaaaab 	.word	0xaaaaaaab

0800fdfc <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	60fb      	str	r3, [r7, #12]
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800fe0e:	f7f2 fd13 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d009      	beq.n	800fe2c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800fe18:	68ba      	ldr	r2, [r7, #8]
 800fe1a:	4613      	mov	r3, r2
 800fe1c:	005b      	lsls	r3, r3, #1
 800fe1e:	4413      	add	r3, r2
 800fe20:	00db      	lsls	r3, r3, #3
 800fe22:	4618      	mov	r0, r3
 800fe24:	f010 faae 	bl	8020384 <_Znwj>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	e006      	b.n	800fe3a <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	68b9      	ldr	r1, [r7, #8]
 800fe30:	68f8      	ldr	r0, [r7, #12]
 800fe32:	f000 fe2e 	bl	8010a92 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>
 800fe36:	4603      	mov	r3, r0
 800fe38:	bf00      	nop
      { return __a.allocate(__n); }
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3710      	adds	r7, #16
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}

0800fe42 <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800fe42:	b480      	push	{r7}
 800fe44:	b083      	sub	sp, #12
 800fe46:	af00      	add	r7, sp, #0
 800fe48:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	370c      	adds	r7, #12
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr

0800fe58 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	60f8      	str	r0, [r7, #12]
 800fe60:	60b9      	str	r1, [r7, #8]
 800fe62:	607a      	str	r2, [r7, #4]
 800fe64:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800fe66:	687a      	ldr	r2, [r7, #4]
 800fe68:	68b9      	ldr	r1, [r7, #8]
 800fe6a:	68f8      	ldr	r0, [r7, #12]
 800fe6c:	f000 fb83 	bl	8010576 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>
 800fe70:	4603      	mov	r3, r0
 800fe72:	4618      	mov	r0, r3
 800fe74:	3710      	adds	r7, #16
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}

0800fe7a <_ZSt10destroy_atIN3jlb4NodeEEvPT_>:
    destroy_at(_Tp* __location)
 800fe7a:	b580      	push	{r7, lr}
 800fe7c:	b082      	sub	sp, #8
 800fe7e:	af00      	add	r7, sp, #0
 800fe80:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f7f4 ff25 	bl	8004cd2 <_ZN3jlb4NodeD1Ev>
    }
 800fe88:	bf00      	nop
 800fe8a:	3708      	adds	r7, #8
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800fe9c:	687a      	ldr	r2, [r7, #4]
 800fe9e:	68b9      	ldr	r1, [r7, #8]
 800fea0:	68f8      	ldr	r0, [r7, #12]
 800fea2:	f7fb fd1a 	bl	800b8da <_ZSt4copyIPKcPcET0_T_S4_S3_>
 800fea6:	4603      	mov	r3, r0
 800fea8:	4618      	mov	r0, r3
 800feaa:	3710      	adds	r7, #16
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800feb0:	b480      	push	{r7}
 800feb2:	b083      	sub	sp, #12
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	4618      	mov	r0, r3
 800febc:	370c      	adds	r7, #12
 800febe:	46bd      	mov	sp, r7
 800fec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec4:	4770      	bx	lr

0800fec6 <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 800fec6:	b580      	push	{r7, lr}
 800fec8:	b084      	sub	sp, #16
 800feca:	af00      	add	r7, sp, #0
 800fecc:	60f8      	str	r0, [r7, #12]
 800fece:	60b9      	str	r1, [r7, #8]
 800fed0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	009b      	lsls	r3, r3, #2
 800fed6:	4619      	mov	r1, r3
 800fed8:	68b8      	ldr	r0, [r7, #8]
 800feda:	f010 fa51 	bl	8020380 <_ZdlPvj>
      }
 800fede:	3710      	adds	r7, #16
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <_ZSt12__miter_baseIPPfET_S2_>:
    __miter_base(_Iterator __it)
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
    { return __it; }
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	4618      	mov	r0, r3
 800fef0:	370c      	adds	r7, #12
 800fef2:	46bd      	mov	sp, r7
 800fef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef8:	4770      	bx	lr

0800fefa <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800fefa:	b5b0      	push	{r4, r5, r7, lr}
 800fefc:	b084      	sub	sp, #16
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	60f8      	str	r0, [r7, #12]
 800ff02:	60b9      	str	r1, [r7, #8]
 800ff04:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800ff06:	68f8      	ldr	r0, [r7, #12]
 800ff08:	f000 fb66 	bl	80105d8 <_ZSt12__niter_baseIPPfET_S2_>
 800ff0c:	4604      	mov	r4, r0
 800ff0e:	68b8      	ldr	r0, [r7, #8]
 800ff10:	f000 fb62 	bl	80105d8 <_ZSt12__niter_baseIPPfET_S2_>
 800ff14:	4605      	mov	r5, r0
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f000 fb5d 	bl	80105d8 <_ZSt12__niter_baseIPPfET_S2_>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	461a      	mov	r2, r3
 800ff22:	4629      	mov	r1, r5
 800ff24:	4620      	mov	r0, r4
 800ff26:	f000 fb62 	bl	80105ee <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 800ff2a:	4602      	mov	r2, r0
 800ff2c:	1d3b      	adds	r3, r7, #4
 800ff2e:	4611      	mov	r1, r2
 800ff30:	4618      	mov	r0, r3
 800ff32:	f000 fb6c 	bl	801060e <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 800ff36:	4603      	mov	r3, r0
    }
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3710      	adds	r7, #16
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bdb0      	pop	{r4, r5, r7, pc}

0800ff40 <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800ff40:	b5b0      	push	{r4, r5, r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	60f8      	str	r0, [r7, #12]
 800ff48:	60b9      	str	r1, [r7, #8]
 800ff4a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800ff4c:	68f8      	ldr	r0, [r7, #12]
 800ff4e:	f000 fb43 	bl	80105d8 <_ZSt12__niter_baseIPPfET_S2_>
 800ff52:	4604      	mov	r4, r0
 800ff54:	68b8      	ldr	r0, [r7, #8]
 800ff56:	f000 fb3f 	bl	80105d8 <_ZSt12__niter_baseIPPfET_S2_>
 800ff5a:	4605      	mov	r5, r0
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f000 fb3a 	bl	80105d8 <_ZSt12__niter_baseIPPfET_S2_>
 800ff64:	4603      	mov	r3, r0
 800ff66:	461a      	mov	r2, r3
 800ff68:	4629      	mov	r1, r5
 800ff6a:	4620      	mov	r0, r4
 800ff6c:	f000 fb5b 	bl	8010626 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 800ff70:	4602      	mov	r2, r0
 800ff72:	1d3b      	adds	r3, r7, #4
 800ff74:	4611      	mov	r1, r2
 800ff76:	4618      	mov	r0, r3
 800ff78:	f000 fb49 	bl	801060e <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 800ff7c:	4603      	mov	r3, r0
    }
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bdb0      	pop	{r4, r5, r7, pc}

0800ff86 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t)
 800ff86:	b580      	push	{r7, lr}
 800ff88:	b084      	sub	sp, #16
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	60f8      	str	r0, [r7, #12]
 800ff8e:	60b9      	str	r1, [r7, #8]
 800ff90:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ff92:	6879      	ldr	r1, [r7, #4]
 800ff94:	68b8      	ldr	r0, [r7, #8]
 800ff96:	f010 f9f3 	bl	8020380 <_ZdlPvj>
      }
 800ff9a:	3710      	adds	r7, #16
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>:
    make_move_iterator(_Iterator __i)
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
    { return move_iterator<_Iterator>(std::move(__i)); }
 800ffa8:	1d3b      	adds	r3, r7, #4
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f000 fb4b 	bl	8010646 <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	681a      	ldr	r2, [r3, #0]
 800ffb4:	f107 030c 	add.w	r3, r7, #12
 800ffb8:	4611      	mov	r1, r2
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f000 fb4e 	bl	801065c <_ZNSt13move_iteratorIPcEC1ES0_>
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3710      	adds	r7, #16
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}

0800ffca <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800ffca:	b580      	push	{r7, lr}
 800ffcc:	b084      	sub	sp, #16
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	60f8      	str	r0, [r7, #12]
 800ffd2:	60b9      	str	r1, [r7, #8]
 800ffd4:	607a      	str	r2, [r7, #4]
 800ffd6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800ffd8:	687a      	ldr	r2, [r7, #4]
 800ffda:	68b9      	ldr	r1, [r7, #8]
 800ffdc:	68f8      	ldr	r0, [r7, #12]
 800ffde:	f000 fb4f 	bl	8010680 <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3710      	adds	r7, #16
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}

0800ffec <_ZSt23__copy_move_backward_a1ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	60f8      	str	r0, [r7, #12]
 800fff4:	60b9      	str	r1, [r7, #8]
 800fff6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800fff8:	687a      	ldr	r2, [r7, #4]
 800fffa:	68b9      	ldr	r1, [r7, #8]
 800fffc:	68f8      	ldr	r0, [r7, #12]
 800fffe:	f000 fb51 	bl	80106a4 <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_>
 8010002:	4603      	mov	r3, r0
 8010004:	4618      	mov	r0, r3
 8010006:	3710      	adds	r7, #16
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8010014:	1d3b      	adds	r3, r7, #4
 8010016:	4618      	mov	r0, r3
 8010018:	f7f8 fde7 	bl	8008bea <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 801001c:	4603      	mov	r3, r0
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4618      	mov	r0, r3
 8010022:	3708      	adds	r7, #8
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}

08010028 <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8010028:	b580      	push	{r7, lr}
 801002a:	b084      	sub	sp, #16
 801002c:	af00      	add	r7, sp, #0
 801002e:	60f8      	str	r0, [r7, #12]
 8010030:	60b9      	str	r1, [r7, #8]
 8010032:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8010034:	687a      	ldr	r2, [r7, #4]
 8010036:	68b9      	ldr	r1, [r7, #8]
 8010038:	68f8      	ldr	r0, [r7, #12]
 801003a:	f000 fb50 	bl	80106de <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_>
 801003e:	4603      	mov	r3, r0
 8010040:	4618      	mov	r0, r3
 8010042:	3710      	adds	r7, #16
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f7ff ffda 	bl	801000c <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8010058:	4602      	mov	r2, r0
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	1a9a      	subs	r2, r3, r2
 801005e:	1d3b      	adds	r3, r7, #4
 8010060:	4611      	mov	r1, r2
 8010062:	4618      	mov	r0, r3
 8010064:	f7fc fffa 	bl	800d05c <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 8010068:	4603      	mov	r3, r0
 801006a:	4618      	mov	r0, r3
 801006c:	3708      	adds	r7, #8
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}

08010072 <_ZSt9__advanceIPciEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8010072:	b480      	push	{r7}
 8010074:	b085      	sub	sp, #20
 8010076:	af00      	add	r7, sp, #0
 8010078:	60f8      	str	r0, [r7, #12]
 801007a:	60b9      	str	r1, [r7, #8]
 801007c:	713a      	strb	r2, [r7, #4]
	__i += __n;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	681a      	ldr	r2, [r3, #0]
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	441a      	add	r2, r3
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	601a      	str	r2, [r3, #0]
    }
 801008a:	bf00      	nop
 801008c:	3714      	adds	r7, #20
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr

08010096 <_ZSt18uninitialized_copyIPcS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8010096:	b580      	push	{r7, lr}
 8010098:	b086      	sub	sp, #24
 801009a:	af00      	add	r7, sp, #0
 801009c:	60f8      	str	r0, [r7, #12]
 801009e:	60b9      	str	r1, [r7, #8]
 80100a0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80100a2:	2301      	movs	r3, #1
 80100a4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80100a6:	687a      	ldr	r2, [r7, #4]
 80100a8:	68b9      	ldr	r1, [r7, #8]
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	f000 fb34 	bl	8010718 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPcS2_EET0_T_S4_S3_>
 80100b0:	4603      	mov	r3, r0
    }
 80100b2:	4618      	mov	r0, r3
 80100b4:	3718      	adds	r7, #24
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}

080100ba <_ZNKSt6vectorIcSaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80100ba:	b580      	push	{r7, lr}
 80100bc:	b082      	sub	sp, #8
 80100be:	af00      	add	r7, sp, #0
 80100c0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	4618      	mov	r0, r3
 80100c6:	f7fc fb8b 	bl	800c7e0 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80100ca:	4603      	mov	r3, r0
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7fe ffb1 	bl	800f034 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 80100d2:	4603      	mov	r3, r0
 80100d4:	4618      	mov	r0, r3
 80100d6:	3708      	adds	r7, #8
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}

080100dc <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80100dc:	b580      	push	{r7, lr}
 80100de:	b084      	sub	sp, #16
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80100e4:	f107 030c 	add.w	r3, r7, #12
 80100e8:	6879      	ldr	r1, [r7, #4]
 80100ea:	4618      	mov	r0, r3
 80100ec:	f000 fab6 	bl	801065c <_ZNSt13move_iteratorIPcEC1ES0_>
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	4618      	mov	r0, r3
 80100f4:	3710      	adds	r7, #16
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}

080100fa <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 80100fa:	b480      	push	{r7}
 80100fc:	b083      	sub	sp, #12
 80100fe:	af00      	add	r7, sp, #0
 8010100:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	4618      	mov	r0, r3
 8010106:	370c      	adds	r7, #12
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr

08010110 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8010110:	b580      	push	{r7, lr}
 8010112:	b084      	sub	sp, #16
 8010114:	af00      	add	r7, sp, #0
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	60b9      	str	r1, [r7, #8]
 801011a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801011c:	68f8      	ldr	r0, [r7, #12]
 801011e:	f000 fb0b 	bl	8010738 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 8010122:	4602      	mov	r2, r0
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	4293      	cmp	r3, r2
 8010128:	bf8c      	ite	hi
 801012a:	2301      	movhi	r3, #1
 801012c:	2300      	movls	r3, #0
 801012e:	b2db      	uxtb	r3, r3
 8010130:	2b00      	cmp	r3, #0
 8010132:	d001      	beq.n	8010138 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8010134:	f010 f93a 	bl	80203ac <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010138:	68b8      	ldr	r0, [r7, #8]
 801013a:	f010 f923 	bl	8020384 <_Znwj>
 801013e:	4603      	mov	r3, r0
 8010140:	bf00      	nop
      }
 8010142:	4618      	mov	r0, r3
 8010144:	3710      	adds	r7, #16
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}

0801014a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 801014a:	b590      	push	{r4, r7, lr}
 801014c:	b089      	sub	sp, #36	; 0x24
 801014e:	af00      	add	r7, sp, #0
 8010150:	60f8      	str	r0, [r7, #12]
 8010152:	60b9      	str	r1, [r7, #8]
 8010154:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8010156:	f107 020c 	add.w	r2, r7, #12
 801015a:	f107 0308 	add.w	r3, r7, #8
 801015e:	4611      	mov	r1, r2
 8010160:	4618      	mov	r0, r3
 8010162:	f7f3 fa55 	bl	8003610 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8010166:	4603      	mov	r3, r0
 8010168:	2b01      	cmp	r3, #1
 801016a:	bfd4      	ite	le
 801016c:	2301      	movle	r3, #1
 801016e:	2300      	movgt	r3, #0
 8010170:	b2db      	uxtb	r3, r3
 8010172:	2b00      	cmp	r3, #0
 8010174:	d139      	bne.n	80101ea <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 8010176:	f107 020c 	add.w	r2, r7, #12
 801017a:	f107 0308 	add.w	r3, r7, #8
 801017e:	4611      	mov	r1, r2
 8010180:	4618      	mov	r0, r3
 8010182:	f7f3 fa45 	bl	8003610 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8010186:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 8010188:	69bb      	ldr	r3, [r7, #24]
 801018a:	3b02      	subs	r3, #2
 801018c:	0fda      	lsrs	r2, r3, #31
 801018e:	4413      	add	r3, r2
 8010190:	105b      	asrs	r3, r3, #1
 8010192:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 8010194:	f107 030c 	add.w	r3, r7, #12
 8010198:	69f9      	ldr	r1, [r7, #28]
 801019a:	4618      	mov	r0, r3
 801019c:	f7fe f97b 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80101a0:	4603      	mov	r3, r0
 80101a2:	617b      	str	r3, [r7, #20]
 80101a4:	f107 0314 	add.w	r3, r7, #20
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7fe f99c 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80101ae:	4603      	mov	r3, r0
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7fb ffa5 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80101b6:	4603      	mov	r3, r0
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80101bc:	f107 0310 	add.w	r3, r7, #16
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fb ff9d 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80101c6:	4603      	mov	r3, r0
 80101c8:	edd3 7a00 	vldr	s15, [r3]
 80101cc:	4623      	mov	r3, r4
 80101ce:	eeb0 0a67 	vmov.f32	s0, s15
 80101d2:	69ba      	ldr	r2, [r7, #24]
 80101d4:	69f9      	ldr	r1, [r7, #28]
 80101d6:	68f8      	ldr	r0, [r7, #12]
 80101d8:	f000 faba 	bl	8010750 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 80101dc:	69fb      	ldr	r3, [r7, #28]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d005      	beq.n	80101ee <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa4>
	  __parent--;
 80101e2:	69fb      	ldr	r3, [r7, #28]
 80101e4:	3b01      	subs	r3, #1
 80101e6:	61fb      	str	r3, [r7, #28]
      while (true)
 80101e8:	e7d4      	b.n	8010194 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4a>
	return;
 80101ea:	bf00      	nop
 80101ec:	e000      	b.n	80101f0 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	    return;
 80101ee:	bf00      	nop
    }
 80101f0:	3724      	adds	r7, #36	; 0x24
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd90      	pop	{r4, r7, pc}

080101f6 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80101f6:	b5b0      	push	{r4, r5, r7, lr}
 80101f8:	b086      	sub	sp, #24
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	60f8      	str	r0, [r7, #12]
 80101fe:	60b9      	str	r1, [r7, #8]
 8010200:	607a      	str	r2, [r7, #4]
 8010202:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8010204:	1d3b      	adds	r3, r7, #4
 8010206:	4618      	mov	r0, r3
 8010208:	f7fe f96d 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801020c:	4603      	mov	r3, r0
 801020e:	4618      	mov	r0, r3
 8010210:	f7fb ff76 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010214:	4603      	mov	r3, r0
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 801021a:	f107 030c 	add.w	r3, r7, #12
 801021e:	4618      	mov	r0, r3
 8010220:	f7fe f961 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010224:	4603      	mov	r3, r0
 8010226:	4618      	mov	r0, r3
 8010228:	f7fb ff6a 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801022c:	4603      	mov	r3, r0
 801022e:	681c      	ldr	r4, [r3, #0]
 8010230:	1d3b      	adds	r3, r7, #4
 8010232:	4618      	mov	r0, r3
 8010234:	f7fe f957 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010238:	4603      	mov	r3, r0
 801023a:	601c      	str	r4, [r3, #0]
			 _DistanceType(__last - __first),
 801023c:	f107 020c 	add.w	r2, r7, #12
 8010240:	f107 0308 	add.w	r3, r7, #8
 8010244:	4611      	mov	r1, r2
 8010246:	4618      	mov	r0, r3
 8010248:	f7f3 f9e2 	bl	8003610 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 801024c:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 801024e:	f107 0314 	add.w	r3, r7, #20
 8010252:	4618      	mov	r0, r3
 8010254:	f7fb ff54 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010258:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 801025a:	edd3 7a00 	vldr	s15, [r3]
 801025e:	462b      	mov	r3, r5
 8010260:	eeb0 0a67 	vmov.f32	s0, s15
 8010264:	4622      	mov	r2, r4
 8010266:	2100      	movs	r1, #0
 8010268:	68f8      	ldr	r0, [r7, #12]
 801026a:	f000 fa71 	bl	8010750 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 801026e:	bf00      	nop
 8010270:	3718      	adds	r7, #24
 8010272:	46bd      	mov	sp, r7
 8010274:	bdb0      	pop	{r4, r5, r7, pc}

08010276 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8010276:	b590      	push	{r4, r7, lr}
 8010278:	b083      	sub	sp, #12
 801027a:	af00      	add	r7, sp, #0
 801027c:	6078      	str	r0, [r7, #4]
 801027e:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8010280:	1d3b      	adds	r3, r7, #4
 8010282:	4618      	mov	r0, r3
 8010284:	f7fe f92f 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010288:	4604      	mov	r4, r0
 801028a:	463b      	mov	r3, r7
 801028c:	4618      	mov	r0, r3
 801028e:	f7fe f92a 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010292:	4603      	mov	r3, r0
 8010294:	4619      	mov	r1, r3
 8010296:	4620      	mov	r0, r4
 8010298:	f000 fb02 	bl	80108a0 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 801029c:	bf00      	nop
 801029e:	370c      	adds	r7, #12
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd90      	pop	{r4, r7, pc}

080102a4 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b084      	sub	sp, #16
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	60f8      	str	r0, [r7, #12]
 80102ac:	60b9      	str	r1, [r7, #8]
 80102ae:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80102b0:	687a      	ldr	r2, [r7, #4]
 80102b2:	68b9      	ldr	r1, [r7, #8]
 80102b4:	68f8      	ldr	r0, [r7, #12]
 80102b6:	f000 fb12 	bl	80108de <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 80102ba:	4603      	mov	r3, r0
 80102bc:	4618      	mov	r0, r3
 80102be:	3710      	adds	r7, #16
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80102c4:	b5b0      	push	{r4, r5, r7, lr}
 80102c6:	b084      	sub	sp, #16
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	60f8      	str	r0, [r7, #12]
 80102cc:	60b9      	str	r1, [r7, #8]
 80102ce:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80102d0:	68f8      	ldr	r0, [r7, #12]
 80102d2:	f7fe fb7c 	bl	800e9ce <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80102d6:	4604      	mov	r4, r0
 80102d8:	68b8      	ldr	r0, [r7, #8]
 80102da:	f7fe fb78 	bl	800e9ce <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80102de:	4605      	mov	r5, r0
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7f3 fb16 	bl	8003914 <_ZSt12__niter_baseIPfET_S1_>
 80102e8:	4603      	mov	r3, r0
 80102ea:	461a      	mov	r2, r3
 80102ec:	4629      	mov	r1, r5
 80102ee:	4620      	mov	r0, r4
 80102f0:	f7fe fb89 	bl	800ea06 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 80102f4:	4602      	mov	r2, r0
 80102f6:	1d3b      	adds	r3, r7, #4
 80102f8:	4611      	mov	r1, r2
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7fd f8b0 	bl	800d460 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8010300:	4603      	mov	r3, r0
    }
 8010302:	4618      	mov	r0, r3
 8010304:	3710      	adds	r7, #16
 8010306:	46bd      	mov	sp, r7
 8010308:	bdb0      	pop	{r4, r5, r7, pc}

0801030a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 801030a:	b480      	push	{r7}
 801030c:	b087      	sub	sp, #28
 801030e:	af00      	add	r7, sp, #0
 8010310:	60f8      	str	r0, [r7, #12]
 8010312:	60b9      	str	r1, [r7, #8]
 8010314:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010316:	68ba      	ldr	r2, [r7, #8]
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	1ad3      	subs	r3, r2, r3
 801031c:	109b      	asrs	r3, r3, #2
 801031e:	617b      	str	r3, [r7, #20]
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	2b00      	cmp	r3, #0
 8010324:	dd0d      	ble.n	8010342 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x38>
	      *__result = *__first;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	681a      	ldr	r2, [r3, #0]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	601a      	str	r2, [r3, #0]
	      ++__first;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	3304      	adds	r3, #4
 8010332:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	3304      	adds	r3, #4
 8010338:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	3b01      	subs	r3, #1
 801033e:	617b      	str	r3, [r7, #20]
 8010340:	e7ee      	b.n	8010320 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x16>
	  return __result;
 8010342:	687b      	ldr	r3, [r7, #4]
	}
 8010344:	4618      	mov	r0, r3
 8010346:	371c      	adds	r7, #28
 8010348:	46bd      	mov	sp, r7
 801034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034e:	4770      	bx	lr

08010350 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8010350:	b480      	push	{r7}
 8010352:	b083      	sub	sp, #12
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
    { return __it; }
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	4618      	mov	r0, r3
 801035c:	370c      	adds	r7, #12
 801035e:	46bd      	mov	sp, r7
 8010360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010364:	4770      	bx	lr

08010366 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8010366:	b5b0      	push	{r4, r5, r7, lr}
 8010368:	b084      	sub	sp, #16
 801036a:	af00      	add	r7, sp, #0
 801036c:	60f8      	str	r0, [r7, #12]
 801036e:	60b9      	str	r1, [r7, #8]
 8010370:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8010372:	68f8      	ldr	r0, [r7, #12]
 8010374:	f000 fad0 	bl	8010918 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8010378:	4604      	mov	r4, r0
 801037a:	68b8      	ldr	r0, [r7, #8]
 801037c:	f000 facc 	bl	8010918 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8010380:	4605      	mov	r5, r0
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	4618      	mov	r0, r3
 8010386:	f7fc fecd 	bl	800d124 <_ZSt12__niter_baseIPcET_S1_>
 801038a:	4603      	mov	r3, r0
 801038c:	461a      	mov	r2, r3
 801038e:	4629      	mov	r1, r5
 8010390:	4620      	mov	r0, r4
 8010392:	f7fc fede 	bl	800d152 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 8010396:	4602      	mov	r2, r0
 8010398:	1d3b      	adds	r3, r7, #4
 801039a:	4611      	mov	r1, r2
 801039c:	4618      	mov	r0, r3
 801039e:	f7fc fecc 	bl	800d13a <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 80103a2:	4603      	mov	r3, r0
    }
 80103a4:	4618      	mov	r0, r3
 80103a6:	3710      	adds	r7, #16
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bdb0      	pop	{r4, r5, r7, pc}

080103ac <_ZSt10destroy_atIcEvPT_>:
    destroy_at(_Tp* __location)
 80103ac:	b480      	push	{r7}
 80103ae:	b083      	sub	sp, #12
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
    }
 80103b4:	bf00      	nop
 80103b6:	370c      	adds	r7, #12
 80103b8:	46bd      	mov	sp, r7
 80103ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103be:	4770      	bx	lr

080103c0 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80103c0:	b480      	push	{r7}
 80103c2:	b083      	sub	sp, #12
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80103c8:	4b03      	ldr	r3, [pc, #12]	; (80103d8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_+0x18>)
      }
 80103ca:	4618      	mov	r0, r3
 80103cc:	370c      	adds	r7, #12
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr
 80103d6:	bf00      	nop
 80103d8:	0aaaaaaa 	.word	0x0aaaaaaa

080103dc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80103e4:	4b0a      	ldr	r3, [pc, #40]	; (8010410 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 80103e6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f7ff ffe9 	bl	80103c0 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>
 80103ee:	4603      	mov	r3, r0
 80103f0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80103f2:	f107 0208 	add.w	r2, r7, #8
 80103f6:	f107 030c 	add.w	r3, r7, #12
 80103fa:	4611      	mov	r1, r2
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7f3 fa56 	bl	80038ae <_ZSt3minIjERKT_S2_S2_>
 8010402:	4603      	mov	r3, r0
 8010404:	681b      	ldr	r3, [r3, #0]
      }
 8010406:	4618      	mov	r0, r3
 8010408:	3710      	adds	r7, #16
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	05555555 	.word	0x05555555

08010414 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8010414:	b5b0      	push	{r4, r5, r7, lr}
 8010416:	b084      	sub	sp, #16
 8010418:	af00      	add	r7, sp, #0
 801041a:	60f8      	str	r0, [r7, #12]
 801041c:	60b9      	str	r1, [r7, #8]
 801041e:	607a      	str	r2, [r7, #4]
 8010420:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8010422:	68f8      	ldr	r0, [r7, #12]
 8010424:	f000 faa8 	bl	8010978 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8010428:	4604      	mov	r4, r0
 801042a:	68b8      	ldr	r0, [r7, #8]
 801042c:	f000 faa4 	bl	8010978 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8010430:	4605      	mov	r5, r0
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f000 faa0 	bl	8010978 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8010438:	4602      	mov	r2, r0
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	4629      	mov	r1, r5
 801043e:	4620      	mov	r0, r4
 8010440:	f000 faa5 	bl	801098e <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8010444:	4603      	mov	r3, r0
    }
 8010446:	4618      	mov	r0, r3
 8010448:	3710      	adds	r7, #16
 801044a:	46bd      	mov	sp, r7
 801044c:	bdb0      	pop	{r4, r5, r7, pc}

0801044e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 801044e:	b580      	push	{r7, lr}
 8010450:	b082      	sub	sp, #8
 8010452:	af00      	add	r7, sp, #0
 8010454:	6078      	str	r0, [r7, #4]
 8010456:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8010458:	6839      	ldr	r1, [r7, #0]
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f000 fabd 	bl	80109da <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	3708      	adds	r7, #8
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}

08010468 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8010468:	b580      	push	{r7, lr}
 801046a:	b082      	sub	sp, #8
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8010472:	6839      	ldr	r1, [r7, #0]
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f000 fab0 	bl	80109da <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	4618      	mov	r0, r3
 801047e:	f7fc f961 	bl	800c744 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	4618      	mov	r0, r3
 8010486:	3708      	adds	r7, #8
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8010496:	6839      	ldr	r1, [r7, #0]
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f7fe fc21 	bl	800ece0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 801049e:	4602      	mov	r2, r0
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681a      	ldr	r2, [r3, #0]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6819      	ldr	r1, [r3, #0]
 80104b0:	683a      	ldr	r2, [r7, #0]
 80104b2:	4613      	mov	r3, r2
 80104b4:	005b      	lsls	r3, r3, #1
 80104b6:	4413      	add	r3, r2
 80104b8:	00db      	lsls	r3, r3, #3
 80104ba:	18ca      	adds	r2, r1, r3
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	609a      	str	r2, [r3, #8]
      }
 80104c0:	bf00      	nop
 80104c2:	3708      	adds	r7, #8
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}

080104c8 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80104c8:	b480      	push	{r7}
 80104ca:	b083      	sub	sp, #12
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	681a      	ldr	r2, [r3, #0]
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	601a      	str	r2, [r3, #0]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	4618      	mov	r0, r3
 80104de:	370c      	adds	r7, #12
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b086      	sub	sp, #24
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	60f8      	str	r0, [r7, #12]
 80104f0:	60b9      	str	r1, [r7, #8]
 80104f2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80104f4:	2301      	movs	r3, #1
 80104f6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	68b9      	ldr	r1, [r7, #8]
 80104fc:	68f8      	ldr	r0, [r7, #12]
 80104fe:	f000 fa96 	bl	8010a2e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 8010502:	4603      	mov	r3, r0
    }
 8010504:	4618      	mov	r0, r3
 8010506:	3718      	adds	r7, #24
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801050c:	b480      	push	{r7}
 801050e:	b083      	sub	sp, #12
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8010514:	4b03      	ldr	r3, [pc, #12]	; (8010524 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_+0x18>)
      }
 8010516:	4618      	mov	r0, r3
 8010518:	370c      	adds	r7, #12
 801051a:	46bd      	mov	sp, r7
 801051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010520:	4770      	bx	lr
 8010522:	bf00      	nop
 8010524:	0aaaaaaa 	.word	0x0aaaaaaa

08010528 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8010528:	b580      	push	{r7, lr}
 801052a:	b084      	sub	sp, #16
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8010530:	4b0a      	ldr	r3, [pc, #40]	; (801055c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 8010532:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f7ff ffe9 	bl	801050c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>
 801053a:	4603      	mov	r3, r0
 801053c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801053e:	f107 0208 	add.w	r2, r7, #8
 8010542:	f107 030c 	add.w	r3, r7, #12
 8010546:	4611      	mov	r1, r2
 8010548:	4618      	mov	r0, r3
 801054a:	f7f3 f9b0 	bl	80038ae <_ZSt3minIjERKT_S2_S2_>
 801054e:	4603      	mov	r3, r0
 8010550:	681b      	ldr	r3, [r3, #0]
      }
 8010552:	4618      	mov	r0, r3
 8010554:	3710      	adds	r7, #16
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop
 801055c:	05555555 	.word	0x05555555

08010560 <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8010560:	b480      	push	{r7}
 8010562:	b083      	sub	sp, #12
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	4618      	mov	r0, r3
 801056c:	370c      	adds	r7, #12
 801056e:	46bd      	mov	sp, r7
 8010570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010574:	4770      	bx	lr

08010576 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8010576:	b580      	push	{r7, lr}
 8010578:	b086      	sub	sp, #24
 801057a:	af00      	add	r7, sp, #0
 801057c:	60f8      	str	r0, [r7, #12]
 801057e:	60b9      	str	r1, [r7, #8]
 8010580:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8010582:	2301      	movs	r3, #1
 8010584:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	68b9      	ldr	r1, [r7, #8]
 801058a:	68f8      	ldr	r0, [r7, #12]
 801058c:	f000 faa3 	bl	8010ad6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>
 8010590:	4603      	mov	r3, r0
    }
 8010592:	4618      	mov	r0, r3
 8010594:	3718      	adds	r7, #24
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}

0801059a <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801059a:	b580      	push	{r7, lr}
 801059c:	b084      	sub	sp, #16
 801059e:	af00      	add	r7, sp, #0
 80105a0:	60f8      	str	r0, [r7, #12]
 80105a2:	60b9      	str	r1, [r7, #8]
 80105a4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80105a6:	68f8      	ldr	r0, [r7, #12]
 80105a8:	f000 fab5 	bl	8010b16 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>
 80105ac:	4602      	mov	r2, r0
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	4293      	cmp	r3, r2
 80105b2:	bf8c      	ite	hi
 80105b4:	2301      	movhi	r3, #1
 80105b6:	2300      	movls	r3, #0
 80105b8:	b2db      	uxtb	r3, r3
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d001      	beq.n	80105c2 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80105be:	f00f fef5 	bl	80203ac <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	009b      	lsls	r3, r3, #2
 80105c6:	4618      	mov	r0, r3
 80105c8:	f00f fedc 	bl	8020384 <_Znwj>
 80105cc:	4603      	mov	r3, r0
 80105ce:	bf00      	nop
      }
 80105d0:	4618      	mov	r0, r3
 80105d2:	3710      	adds	r7, #16
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <_ZSt12__niter_baseIPPfET_S2_>:
    __niter_base(_Iterator __it)
 80105d8:	b480      	push	{r7}
 80105da:	b083      	sub	sp, #12
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
    { return __it; }
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	4618      	mov	r0, r3
 80105e4:	370c      	adds	r7, #12
 80105e6:	46bd      	mov	sp, r7
 80105e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ec:	4770      	bx	lr

080105ee <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80105ee:	b580      	push	{r7, lr}
 80105f0:	b084      	sub	sp, #16
 80105f2:	af00      	add	r7, sp, #0
 80105f4:	60f8      	str	r0, [r7, #12]
 80105f6:	60b9      	str	r1, [r7, #8]
 80105f8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	68b9      	ldr	r1, [r7, #8]
 80105fe:	68f8      	ldr	r0, [r7, #12]
 8010600:	f000 fa95 	bl	8010b2e <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 8010604:	4603      	mov	r3, r0
 8010606:	4618      	mov	r0, r3
 8010608:	3710      	adds	r7, #16
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}

0801060e <_ZSt12__niter_wrapIPPfET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 801060e:	b480      	push	{r7}
 8010610:	b083      	sub	sp, #12
 8010612:	af00      	add	r7, sp, #0
 8010614:	6078      	str	r0, [r7, #4]
 8010616:	6039      	str	r1, [r7, #0]
    { return __res; }
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	4618      	mov	r0, r3
 801061c:	370c      	adds	r7, #12
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr

08010626 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8010626:	b580      	push	{r7, lr}
 8010628:	b084      	sub	sp, #16
 801062a:	af00      	add	r7, sp, #0
 801062c:	60f8      	str	r0, [r7, #12]
 801062e:	60b9      	str	r1, [r7, #8]
 8010630:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	68b9      	ldr	r1, [r7, #8]
 8010636:	68f8      	ldr	r0, [r7, #12]
 8010638:	f000 fa96 	bl	8010b68 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 801063c:	4603      	mov	r3, r0
 801063e:	4618      	mov	r0, r3
 8010640:	3710      	adds	r7, #16
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}

08010646 <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8010646:	b480      	push	{r7}
 8010648:	b083      	sub	sp, #12
 801064a:	af00      	add	r7, sp, #0
 801064c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	4618      	mov	r0, r3
 8010652:	370c      	adds	r7, #12
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr

0801065c <_ZNSt13move_iteratorIPcEC1ES0_>:
      move_iterator(iterator_type __i)
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8010666:	463b      	mov	r3, r7
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff ffec 	bl	8010646 <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>
 801066e:	4603      	mov	r3, r0
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	601a      	str	r2, [r3, #0]
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4618      	mov	r0, r3
 801067a:	3708      	adds	r7, #8
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}

08010680 <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8010680:	b580      	push	{r7, lr}
 8010682:	b086      	sub	sp, #24
 8010684:	af00      	add	r7, sp, #0
 8010686:	60f8      	str	r0, [r7, #12]
 8010688:	60b9      	str	r1, [r7, #8]
 801068a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 801068c:	2301      	movs	r3, #1
 801068e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8010690:	687a      	ldr	r2, [r7, #4]
 8010692:	68b9      	ldr	r1, [r7, #8]
 8010694:	68f8      	ldr	r0, [r7, #12]
 8010696:	f000 fa84 	bl	8010ba2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>
 801069a:	4603      	mov	r3, r0
    }
 801069c:	4618      	mov	r0, r3
 801069e:	3718      	adds	r7, #24
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b084      	sub	sp, #16
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	60f8      	str	r0, [r7, #12]
 80106ac:	60b9      	str	r1, [r7, #8]
 80106ae:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80106b0:	f7f2 f8c2 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 80106b4:	4603      	mov	r3, r0
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d006      	beq.n	80106c8 <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 80106ba:	687a      	ldr	r2, [r7, #4]
 80106bc:	68b9      	ldr	r1, [r7, #8]
 80106be:	68f8      	ldr	r0, [r7, #12]
 80106c0:	f000 fa7f 	bl	8010bc2 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_>
 80106c4:	4603      	mov	r3, r0
 80106c6:	e006      	b.n	80106d6 <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 80106c8:	687a      	ldr	r2, [r7, #4]
 80106ca:	68b9      	ldr	r1, [r7, #8]
 80106cc:	68f8      	ldr	r0, [r7, #12]
 80106ce:	f000 fa9b 	bl	8010c08 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>
 80106d2:	4603      	mov	r3, r0
								 __result);
 80106d4:	bf00      	nop
    }
 80106d6:	4618      	mov	r0, r3
 80106d8:	3710      	adds	r7, #16
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}

080106de <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80106de:	b580      	push	{r7, lr}
 80106e0:	b084      	sub	sp, #16
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	60f8      	str	r0, [r7, #12]
 80106e6:	60b9      	str	r1, [r7, #8]
 80106e8:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80106ea:	f7f2 f8a5 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 80106ee:	4603      	mov	r3, r0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d006      	beq.n	8010702 <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 80106f4:	687a      	ldr	r2, [r7, #4]
 80106f6:	68b9      	ldr	r1, [r7, #8]
 80106f8:	68f8      	ldr	r0, [r7, #12]
 80106fa:	f000 faa3 	bl	8010c44 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>
 80106fe:	4603      	mov	r3, r0
 8010700:	e006      	b.n	8010710 <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8010702:	687a      	ldr	r2, [r7, #4]
 8010704:	68b9      	ldr	r1, [r7, #8]
 8010706:	68f8      	ldr	r0, [r7, #12]
 8010708:	f7fe ff2f 	bl	800f56a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 801070c:	4603      	mov	r3, r0
 801070e:	bf00      	nop
    }
 8010710:	4618      	mov	r0, r3
 8010712:	3710      	adds	r7, #16
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPcS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	60b9      	str	r1, [r7, #8]
 8010722:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	68b9      	ldr	r1, [r7, #8]
 8010728:	68f8      	ldr	r0, [r7, #12]
 801072a:	f000 faad 	bl	8010c88 <_ZSt4copyIPcS0_ET0_T_S2_S1_>
 801072e:	4603      	mov	r3, r0
 8010730:	4618      	mov	r0, r3
 8010732:	3710      	adds	r7, #16
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8010738:	b480      	push	{r7}
 801073a:	b083      	sub	sp, #12
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010740:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 8010744:	4618      	mov	r0, r3
 8010746:	370c      	adds	r7, #12
 8010748:	46bd      	mov	sp, r7
 801074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074e:	4770      	bx	lr

08010750 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8010750:	b590      	push	{r4, r7, lr}
 8010752:	b08f      	sub	sp, #60	; 0x3c
 8010754:	af00      	add	r7, sp, #0
 8010756:	6178      	str	r0, [r7, #20]
 8010758:	6139      	str	r1, [r7, #16]
 801075a:	60fa      	str	r2, [r7, #12]
 801075c:	ed87 0a02 	vstr	s0, [r7, #8]
 8010760:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	3b01      	subs	r3, #1
 801076e:	0fda      	lsrs	r2, r3, #31
 8010770:	4413      	add	r3, r2
 8010772:	105b      	asrs	r3, r3, #1
 8010774:	461a      	mov	r2, r3
 8010776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010778:	4293      	cmp	r3, r2
 801077a:	da43      	bge.n	8010804 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xb4>
	  __secondChild = 2 * (__secondChild + 1);
 801077c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801077e:	3301      	adds	r3, #1
 8010780:	005b      	lsls	r3, r3, #1
 8010782:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 8010784:	f107 0314 	add.w	r3, r7, #20
 8010788:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801078a:	4618      	mov	r0, r3
 801078c:	f7fd fe83 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8010790:	4604      	mov	r4, r0
 8010792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010794:	1e5a      	subs	r2, r3, #1
 8010796:	f107 0314 	add.w	r3, r7, #20
 801079a:	4611      	mov	r1, r2
 801079c:	4618      	mov	r0, r3
 801079e:	f7fd fe7a 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80107a2:	4602      	mov	r2, r0
 80107a4:	1d3b      	adds	r3, r7, #4
 80107a6:	4621      	mov	r1, r4
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7fd fea8 	bl	800e4fe <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 80107ae:	4603      	mov	r3, r0
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d002      	beq.n	80107ba <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x6a>
	    __secondChild--;
 80107b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107b6:	3b01      	subs	r3, #1
 80107b8:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 80107ba:	f107 0314 	add.w	r3, r7, #20
 80107be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7fd fe68 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80107c6:	4603      	mov	r3, r0
 80107c8:	623b      	str	r3, [r7, #32]
 80107ca:	f107 0320 	add.w	r3, r7, #32
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7fd fe89 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80107d4:	4603      	mov	r3, r0
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7fb fc92 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80107dc:	4603      	mov	r3, r0
 80107de:	681c      	ldr	r4, [r3, #0]
 80107e0:	f107 0314 	add.w	r3, r7, #20
 80107e4:	6939      	ldr	r1, [r7, #16]
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7fd fe55 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80107ec:	4603      	mov	r3, r0
 80107ee:	627b      	str	r3, [r7, #36]	; 0x24
 80107f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80107f4:	4618      	mov	r0, r3
 80107f6:	f7fd fe76 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80107fa:	4603      	mov	r3, r0
 80107fc:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild;
 80107fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010800:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 8010802:	e7b2      	b.n	801076a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x1a>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	f003 0301 	and.w	r3, r3, #1
 801080a:	2b00      	cmp	r3, #0
 801080c:	d133      	bne.n	8010876 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	3b02      	subs	r3, #2
 8010812:	0fda      	lsrs	r2, r3, #31
 8010814:	4413      	add	r3, r2
 8010816:	105b      	asrs	r3, r3, #1
 8010818:	461a      	mov	r2, r3
 801081a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801081c:	4293      	cmp	r3, r2
 801081e:	d12a      	bne.n	8010876 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 8010820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010822:	3301      	adds	r3, #1
 8010824:	005b      	lsls	r3, r3, #1
 8010826:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8010828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801082a:	1e5a      	subs	r2, r3, #1
 801082c:	f107 0314 	add.w	r3, r7, #20
 8010830:	4611      	mov	r1, r2
 8010832:	4618      	mov	r0, r3
 8010834:	f7fd fe2f 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8010838:	4603      	mov	r3, r0
 801083a:	62bb      	str	r3, [r7, #40]	; 0x28
 801083c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010840:	4618      	mov	r0, r3
 8010842:	f7fd fe50 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010846:	4603      	mov	r3, r0
 8010848:	4618      	mov	r0, r3
 801084a:	f7fb fc59 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801084e:	4603      	mov	r3, r0
 8010850:	681c      	ldr	r4, [r3, #0]
 8010852:	f107 0314 	add.w	r3, r7, #20
 8010856:	6939      	ldr	r1, [r7, #16]
 8010858:	4618      	mov	r0, r3
 801085a:	f7fd fe1c 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 801085e:	4603      	mov	r3, r0
 8010860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010866:	4618      	mov	r0, r3
 8010868:	f7fd fe3d 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801086c:	4603      	mov	r3, r0
 801086e:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild - 1;
 8010870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010872:	3b01      	subs	r3, #1
 8010874:	613b      	str	r3, [r7, #16]
		       _GLIBCXX_MOVE(__value), __cmp);
 8010876:	f107 0308 	add.w	r3, r7, #8
 801087a:	4618      	mov	r0, r3
 801087c:	f7fb fc40 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010880:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8010882:	edd3 7a00 	vldr	s15, [r3]
 8010886:	f107 031c 	add.w	r3, r7, #28
 801088a:	eeb0 0a67 	vmov.f32	s0, s15
 801088e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010890:	6939      	ldr	r1, [r7, #16]
 8010892:	6978      	ldr	r0, [r7, #20]
 8010894:	f000 fa2d 	bl	8010cf2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 8010898:	bf00      	nop
 801089a:	373c      	adds	r7, #60	; 0x3c
 801089c:	46bd      	mov	sp, r7
 801089e:	bd90      	pop	{r4, r7, pc}

080108a0 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b084      	sub	sp, #16
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f7fb fc28 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80108b0:	4603      	mov	r3, r0
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80108b6:	6838      	ldr	r0, [r7, #0]
 80108b8:	f7fb fc22 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80108bc:	4603      	mov	r3, r0
 80108be:	681a      	ldr	r2, [r3, #0]
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80108c4:	f107 030c 	add.w	r3, r7, #12
 80108c8:	4618      	mov	r0, r3
 80108ca:	f7fb fc19 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80108ce:	4603      	mov	r3, r0
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	601a      	str	r2, [r3, #0]
    }
 80108d6:	bf00      	nop
 80108d8:	3710      	adds	r7, #16
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}

080108de <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80108de:	b580      	push	{r7, lr}
 80108e0:	b084      	sub	sp, #16
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	60f8      	str	r0, [r7, #12]
 80108e6:	60b9      	str	r1, [r7, #8]
 80108e8:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80108ea:	f7f1 ffa5 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 80108ee:	4603      	mov	r3, r0
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d006      	beq.n	8010902 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 80108f4:	687a      	ldr	r2, [r7, #4]
 80108f6:	68b9      	ldr	r1, [r7, #8]
 80108f8:	68f8      	ldr	r0, [r7, #12]
 80108fa:	f000 fa67 	bl	8010dcc <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>
 80108fe:	4603      	mov	r3, r0
 8010900:	e006      	b.n	8010910 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 8010902:	687a      	ldr	r2, [r7, #4]
 8010904:	68b9      	ldr	r1, [r7, #8]
 8010906:	68f8      	ldr	r0, [r7, #12]
 8010908:	f000 fa84 	bl	8010e14 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 801090c:	4603      	mov	r3, r0
								 __result);
 801090e:	bf00      	nop
    }
 8010910:	4618      	mov	r0, r3
 8010912:	3710      	adds	r7, #16
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8010920:	1d3b      	adds	r3, r7, #4
 8010922:	4618      	mov	r0, r3
 8010924:	f7fd fbc1 	bl	800e0aa <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 8010928:	4603      	mov	r3, r0
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	4618      	mov	r0, r3
 801092e:	3708      	adds	r7, #8
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}

08010934 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8010934:	b580      	push	{r7, lr}
 8010936:	b084      	sub	sp, #16
 8010938:	af00      	add	r7, sp, #0
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	60b9      	str	r1, [r7, #8]
 801093e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8010940:	68f8      	ldr	r0, [r7, #12]
 8010942:	f000 fa89 	bl	8010e58 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>
 8010946:	4602      	mov	r2, r0
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	4293      	cmp	r3, r2
 801094c:	bf8c      	ite	hi
 801094e:	2301      	movhi	r3, #1
 8010950:	2300      	movls	r3, #0
 8010952:	b2db      	uxtb	r3, r3
 8010954:	2b00      	cmp	r3, #0
 8010956:	d001      	beq.n	801095c <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8010958:	f00f fd28 	bl	80203ac <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801095c:	68ba      	ldr	r2, [r7, #8]
 801095e:	4613      	mov	r3, r2
 8010960:	005b      	lsls	r3, r3, #1
 8010962:	4413      	add	r3, r2
 8010964:	00db      	lsls	r3, r3, #3
 8010966:	4618      	mov	r0, r3
 8010968:	f00f fd0c 	bl	8020384 <_Znwj>
 801096c:	4603      	mov	r3, r0
 801096e:	bf00      	nop
      }
 8010970:	4618      	mov	r0, r3
 8010972:	3710      	adds	r7, #16
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>:
    __niter_base(_Iterator __it)
 8010978:	b480      	push	{r7}
 801097a:	b083      	sub	sp, #12
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	4618      	mov	r0, r3
 8010984:	370c      	adds	r7, #12
 8010986:	46bd      	mov	sp, r7
 8010988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098c:	4770      	bx	lr

0801098e <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 801098e:	b590      	push	{r4, r7, lr}
 8010990:	b087      	sub	sp, #28
 8010992:	af00      	add	r7, sp, #0
 8010994:	60f8      	str	r0, [r7, #12]
 8010996:	60b9      	str	r1, [r7, #8]
 8010998:	607a      	str	r2, [r7, #4]
 801099a:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80109a0:	68fa      	ldr	r2, [r7, #12]
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d013      	beq.n	80109d0 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 80109a8:	6978      	ldr	r0, [r7, #20]
 80109aa:	f7ff f8c0 	bl	800fb2e <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 80109ae:	4604      	mov	r4, r0
 80109b0:	68f8      	ldr	r0, [r7, #12]
 80109b2:	f7ff f8bc 	bl	800fb2e <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 80109b6:	4603      	mov	r3, r0
 80109b8:	683a      	ldr	r2, [r7, #0]
 80109ba:	4619      	mov	r1, r3
 80109bc:	4620      	mov	r0, r4
 80109be:	f000 fa59 	bl	8010e74 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	3318      	adds	r3, #24
 80109c6:	60fb      	str	r3, [r7, #12]
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	3318      	adds	r3, #24
 80109cc:	617b      	str	r3, [r7, #20]
 80109ce:	e7e7      	b.n	80109a0 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x12>
      return __cur;
 80109d0:	697b      	ldr	r3, [r7, #20]
    }
 80109d2:	4618      	mov	r0, r3
 80109d4:	371c      	adds	r7, #28
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd90      	pop	{r4, r7, pc}

080109da <_ZNSaIN3jlb4EdgeEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80109da:	b580      	push	{r7, lr}
 80109dc:	b082      	sub	sp, #8
 80109de:	af00      	add	r7, sp, #0
 80109e0:	6078      	str	r0, [r7, #4]
 80109e2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80109e4:	6839      	ldr	r1, [r7, #0]
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f000 fa5f 	bl	8010eaa <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	4618      	mov	r0, r3
 80109f0:	3708      	adds	r7, #8
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}

080109f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80109f6:	b480      	push	{r7}
 80109f8:	b083      	sub	sp, #12
 80109fa:	af00      	add	r7, sp, #0
 80109fc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	4618      	mov	r0, r3
 8010a02:	370c      	adds	r7, #12
 8010a04:	46bd      	mov	sp, r7
 8010a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0a:	4770      	bx	lr

08010a0c <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8010a0c:	b480      	push	{r7}
 8010a0e:	b083      	sub	sp, #12
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
	++_M_current;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	f103 0218 	add.w	r2, r3, #24
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	601a      	str	r2, [r3, #0]
	return *this;
 8010a20:	687b      	ldr	r3, [r7, #4]
      }
 8010a22:	4618      	mov	r0, r3
 8010a24:	370c      	adds	r7, #12
 8010a26:	46bd      	mov	sp, r7
 8010a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2c:	4770      	bx	lr

08010a2e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8010a2e:	b590      	push	{r4, r7, lr}
 8010a30:	b087      	sub	sp, #28
 8010a32:	af00      	add	r7, sp, #0
 8010a34:	60f8      	str	r0, [r7, #12]
 8010a36:	60b9      	str	r1, [r7, #8]
 8010a38:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8010a3e:	f107 0208 	add.w	r2, r7, #8
 8010a42:	f107 030c 	add.w	r3, r7, #12
 8010a46:	4611      	mov	r1, r2
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f000 fa3a 	bl	8010ec2 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeES4_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	f083 0301 	eor.w	r3, r3, #1
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d016      	beq.n	8010a88 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x5a>
		std::_Construct(std::__addressof(*__cur), *__first);
 8010a5a:	6978      	ldr	r0, [r7, #20]
 8010a5c:	f7ff f867 	bl	800fb2e <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8010a60:	4604      	mov	r4, r0
 8010a62:	f107 030c 	add.w	r3, r7, #12
 8010a66:	4618      	mov	r0, r3
 8010a68:	f000 fa43 	bl	8010ef2 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	4619      	mov	r1, r3
 8010a70:	4620      	mov	r0, r4
 8010a72:	f000 fa69 	bl	8010f48 <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8010a76:	f107 030c 	add.w	r3, r7, #12
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	f7ff ffc6 	bl	8010a0c <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	3318      	adds	r3, #24
 8010a84:	617b      	str	r3, [r7, #20]
 8010a86:	e7da      	b.n	8010a3e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x10>
	      return __cur;
 8010a88:	697b      	ldr	r3, [r7, #20]
	}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	371c      	adds	r7, #28
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd90      	pop	{r4, r7, pc}

08010a92 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8010a92:	b580      	push	{r7, lr}
 8010a94:	b084      	sub	sp, #16
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	60f8      	str	r0, [r7, #12]
 8010a9a:	60b9      	str	r1, [r7, #8]
 8010a9c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8010a9e:	68f8      	ldr	r0, [r7, #12]
 8010aa0:	f000 fa6a 	bl	8010f78 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>
 8010aa4:	4602      	mov	r2, r0
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	bf8c      	ite	hi
 8010aac:	2301      	movhi	r3, #1
 8010aae:	2300      	movls	r3, #0
 8010ab0:	b2db      	uxtb	r3, r3
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d001      	beq.n	8010aba <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8010ab6:	f00f fc79 	bl	80203ac <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010aba:	68ba      	ldr	r2, [r7, #8]
 8010abc:	4613      	mov	r3, r2
 8010abe:	005b      	lsls	r3, r3, #1
 8010ac0:	4413      	add	r3, r2
 8010ac2:	00db      	lsls	r3, r3, #3
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f00f fc5d 	bl	8020384 <_Znwj>
 8010aca:	4603      	mov	r3, r0
 8010acc:	bf00      	nop
      }
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3710      	adds	r7, #16
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}

08010ad6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8010ad6:	b580      	push	{r7, lr}
 8010ad8:	b086      	sub	sp, #24
 8010ada:	af00      	add	r7, sp, #0
 8010adc:	60f8      	str	r0, [r7, #12]
 8010ade:	60b9      	str	r1, [r7, #8]
 8010ae0:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8010ae6:	68fa      	ldr	r2, [r7, #12]
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d00e      	beq.n	8010b0c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 8010aee:	6978      	ldr	r0, [r7, #20]
 8010af0:	f7ff f8e7 	bl	800fcc2 <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 8010af4:	4603      	mov	r3, r0
 8010af6:	68f9      	ldr	r1, [r7, #12]
 8010af8:	4618      	mov	r0, r3
 8010afa:	f000 fa4b 	bl	8010f94 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	3318      	adds	r3, #24
 8010b02:	60fb      	str	r3, [r7, #12]
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	3318      	adds	r3, #24
 8010b08:	617b      	str	r3, [r7, #20]
 8010b0a:	e7ec      	b.n	8010ae6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x10>
	      return __cur;
 8010b0c:	697b      	ldr	r3, [r7, #20]
	}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3718      	adds	r7, #24
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}

08010b16 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8010b16:	b480      	push	{r7}
 8010b18:	b083      	sub	sp, #12
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010b1e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8010b22:	4618      	mov	r0, r3
 8010b24:	370c      	adds	r7, #12
 8010b26:	46bd      	mov	sp, r7
 8010b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2c:	4770      	bx	lr

08010b2e <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	b084      	sub	sp, #16
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	60f8      	str	r0, [r7, #12]
 8010b36:	60b9      	str	r1, [r7, #8]
 8010b38:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8010b3a:	f7f1 fe7d 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d006      	beq.n	8010b52 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_m(__first, __last, __result);
 8010b44:	687a      	ldr	r2, [r7, #4]
 8010b46:	68b9      	ldr	r1, [r7, #8]
 8010b48:	68f8      	ldr	r0, [r7, #12]
 8010b4a:	f000 fa3a 	bl	8010fc2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	e006      	b.n	8010b60 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8010b52:	687a      	ldr	r2, [r7, #4]
 8010b54:	68b9      	ldr	r1, [r7, #8]
 8010b56:	68f8      	ldr	r0, [r7, #12]
 8010b58:	f000 fa56 	bl	8011008 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	bf00      	nop
    }
 8010b60:	4618      	mov	r0, r3
 8010b62:	3710      	adds	r7, #16
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}

08010b68 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b084      	sub	sp, #16
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	60f8      	str	r0, [r7, #12]
 8010b70:	60b9      	str	r1, [r7, #8]
 8010b72:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8010b74:	f7f1 fe60 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d006      	beq.n	8010b8c <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_move_b(__first, __last, __result);
 8010b7e:	687a      	ldr	r2, [r7, #4]
 8010b80:	68b9      	ldr	r1, [r7, #8]
 8010b82:	68f8      	ldr	r0, [r7, #12]
 8010b84:	f000 fa5d 	bl	8011042 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	e006      	b.n	8010b9a <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
				       _Category>::__copy_move_b(__first,
 8010b8c:	687a      	ldr	r2, [r7, #4]
 8010b8e:	68b9      	ldr	r1, [r7, #8]
 8010b90:	68f8      	ldr	r0, [r7, #12]
 8010b92:	f000 fa79 	bl	8011088 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>
 8010b96:	4603      	mov	r3, r0
								 __result);
 8010b98:	bf00      	nop
    }
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3710      	adds	r7, #16
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}

08010ba2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8010ba2:	b580      	push	{r7, lr}
 8010ba4:	b084      	sub	sp, #16
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	60f8      	str	r0, [r7, #12]
 8010baa:	60b9      	str	r1, [r7, #8]
 8010bac:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	68b9      	ldr	r1, [r7, #8]
 8010bb2:	68f8      	ldr	r0, [r7, #12]
 8010bb4:	f000 fa8a 	bl	80110cc <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3710      	adds	r7, #16
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}

08010bc2 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8010bc2:	b580      	push	{r7, lr}
 8010bc4:	b086      	sub	sp, #24
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	60f8      	str	r0, [r7, #12]
 8010bca:	60b9      	str	r1, [r7, #8]
 8010bcc:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 8010bce:	68ba      	ldr	r2, [r7, #8]
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	1ad3      	subs	r3, r2, r3
 8010bd4:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	dd10      	ble.n	8010bfe <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_+0x3c>
	    *--__result = std::move(*--__last);
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	3b01      	subs	r3, #1
 8010be0:	60bb      	str	r3, [r7, #8]
 8010be2:	68b8      	ldr	r0, [r7, #8]
 8010be4:	f000 fa8a 	bl	80110fc <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 8010be8:	4603      	mov	r3, r0
 8010bea:	781a      	ldrb	r2, [r3, #0]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	3b01      	subs	r3, #1
 8010bf0:	607b      	str	r3, [r7, #4]
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	701a      	strb	r2, [r3, #0]
	  for (; __n > 0; --__n)
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	3b01      	subs	r3, #1
 8010bfa:	617b      	str	r3, [r7, #20]
 8010bfc:	e7eb      	b.n	8010bd6 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_+0x14>
	  return __result;
 8010bfe:	687b      	ldr	r3, [r7, #4]
	}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3718      	adds	r7, #24
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b086      	sub	sp, #24
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	60b9      	str	r1, [r7, #8]
 8010c12:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8010c14:	68ba      	ldr	r2, [r7, #8]
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	1ad3      	subs	r3, r2, r3
 8010c1a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d008      	beq.n	8010c34 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	425b      	negs	r3, r3
 8010c26:	687a      	ldr	r2, [r7, #4]
 8010c28:	4413      	add	r3, r2
 8010c2a:	697a      	ldr	r2, [r7, #20]
 8010c2c:	68f9      	ldr	r1, [r7, #12]
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f011 fb79 	bl	8022326 <memmove>
	  return __result - _Num;
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	425b      	negs	r3, r3
 8010c38:	687a      	ldr	r2, [r7, #4]
 8010c3a:	4413      	add	r3, r2
	}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3718      	adds	r7, #24
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}

08010c44 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8010c44:	b480      	push	{r7}
 8010c46:	b087      	sub	sp, #28
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	60f8      	str	r0, [r7, #12]
 8010c4c:	60b9      	str	r1, [r7, #8]
 8010c4e:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010c50:	68ba      	ldr	r2, [r7, #8]
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	1ad3      	subs	r3, r2, r3
 8010c56:	617b      	str	r3, [r7, #20]
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	dd0d      	ble.n	8010c7a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x36>
	      *__result = *__first;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	781a      	ldrb	r2, [r3, #0]
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	3301      	adds	r3, #1
 8010c6a:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	3301      	adds	r3, #1
 8010c70:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	3b01      	subs	r3, #1
 8010c76:	617b      	str	r3, [r7, #20]
 8010c78:	e7ee      	b.n	8010c58 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x14>
	  return __result;
 8010c7a:	687b      	ldr	r3, [r7, #4]
	}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	371c      	adds	r7, #28
 8010c80:	46bd      	mov	sp, r7
 8010c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c86:	4770      	bx	lr

08010c88 <_ZSt4copyIPcS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8010c88:	b590      	push	{r4, r7, lr}
 8010c8a:	b085      	sub	sp, #20
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	60f8      	str	r0, [r7, #12]
 8010c90:	60b9      	str	r1, [r7, #8]
 8010c92:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8010c94:	68f8      	ldr	r0, [r7, #12]
 8010c96:	f7fe fb54 	bl	800f342 <_ZSt12__miter_baseIPcET_S1_>
 8010c9a:	4604      	mov	r4, r0
 8010c9c:	68b8      	ldr	r0, [r7, #8]
 8010c9e:	f7fe fb50 	bl	800f342 <_ZSt12__miter_baseIPcET_S1_>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	687a      	ldr	r2, [r7, #4]
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	4620      	mov	r0, r4
 8010caa:	f000 fa32 	bl	8011112 <_ZSt13__copy_move_aILb0EPcS0_ET1_T0_S2_S1_>
 8010cae:	4603      	mov	r3, r0
    }
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3714      	adds	r7, #20
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd90      	pop	{r4, r7, pc}

08010cb8 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b084      	sub	sp, #16
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	60f8      	str	r0, [r7, #12]
 8010cc0:	60b9      	str	r1, [r7, #8]
 8010cc2:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 8010cc4:	f107 0308 	add.w	r3, r7, #8
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7fd fc0c 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	ed93 7a00 	vldr	s14, [r3]
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	edd3 7a00 	vldr	s15, [r3]
 8010cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce2:	bf4c      	ite	mi
 8010ce4:	2301      	movmi	r3, #1
 8010ce6:	2300      	movpl	r3, #0
 8010ce8:	b2db      	uxtb	r3, r3
 8010cea:	4618      	mov	r0, r3
 8010cec:	3710      	adds	r7, #16
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8010cf2:	b590      	push	{r4, r7, lr}
 8010cf4:	b08b      	sub	sp, #44	; 0x2c
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6178      	str	r0, [r7, #20]
 8010cfa:	6139      	str	r1, [r7, #16]
 8010cfc:	60fa      	str	r2, [r7, #12]
 8010cfe:	ed87 0a02 	vstr	s0, [r7, #8]
 8010d02:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	3b01      	subs	r3, #1
 8010d08:	0fda      	lsrs	r2, r3, #31
 8010d0a:	4413      	add	r3, r2
 8010d0c:	105b      	asrs	r3, r3, #1
 8010d0e:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8010d10:	693a      	ldr	r2, [r7, #16]
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	429a      	cmp	r2, r3
 8010d16:	dd11      	ble.n	8010d3c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x4a>
 8010d18:	f107 0314 	add.w	r3, r7, #20
 8010d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7fd fbb9 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8010d24:	4601      	mov	r1, r0
 8010d26:	f107 0308 	add.w	r3, r7, #8
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f7ff ffc3 	bl	8010cb8 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>
 8010d32:	4603      	mov	r3, r0
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d001      	beq.n	8010d3c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x4a>
 8010d38:	2301      	movs	r3, #1
 8010d3a:	e000      	b.n	8010d3e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x4c>
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d02a      	beq.n	8010d98 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa6>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8010d42:	f107 0314 	add.w	r3, r7, #20
 8010d46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f7fd fba4 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	61bb      	str	r3, [r7, #24]
 8010d52:	f107 0318 	add.w	r3, r7, #24
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7fd fbc5 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fb f9ce 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010d64:	4603      	mov	r3, r0
 8010d66:	681c      	ldr	r4, [r3, #0]
 8010d68:	f107 0314 	add.w	r3, r7, #20
 8010d6c:	6939      	ldr	r1, [r7, #16]
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fd fb91 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8010d74:	4603      	mov	r3, r0
 8010d76:	61fb      	str	r3, [r7, #28]
 8010d78:	f107 031c 	add.w	r3, r7, #28
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7fd fbb2 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010d82:	4603      	mov	r3, r0
 8010d84:	601c      	str	r4, [r3, #0]
	  __holeIndex = __parent;
 8010d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d88:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	3b01      	subs	r3, #1
 8010d8e:	0fda      	lsrs	r2, r3, #31
 8010d90:	4413      	add	r3, r2
 8010d92:	105b      	asrs	r3, r3, #1
 8010d94:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8010d96:	e7bb      	b.n	8010d10 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x1e>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8010d98:	f107 0308 	add.w	r3, r7, #8
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7fb f9af 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010da2:	4603      	mov	r3, r0
 8010da4:	681c      	ldr	r4, [r3, #0]
 8010da6:	f107 0314 	add.w	r3, r7, #20
 8010daa:	6939      	ldr	r1, [r7, #16]
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7fd fb72 	bl	800e496 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8010db2:	4603      	mov	r3, r0
 8010db4:	623b      	str	r3, [r7, #32]
 8010db6:	f107 0320 	add.w	r3, r7, #32
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7fd fb93 	bl	800e4e6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	601c      	str	r4, [r3, #0]
    }
 8010dc4:	bf00      	nop
 8010dc6:	372c      	adds	r7, #44	; 0x2c
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd90      	pop	{r4, r7, pc}

08010dcc <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b086      	sub	sp, #24
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	60f8      	str	r0, [r7, #12]
 8010dd4:	60b9      	str	r1, [r7, #8]
 8010dd6:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 8010dd8:	68ba      	ldr	r2, [r7, #8]
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	1ad3      	subs	r3, r2, r3
 8010dde:	109b      	asrs	r3, r3, #2
 8010de0:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	dd10      	ble.n	8010e0a <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x3e>
	    *--__result = std::move(*--__last);
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	3b04      	subs	r3, #4
 8010dec:	60bb      	str	r3, [r7, #8]
 8010dee:	68b8      	ldr	r0, [r7, #8]
 8010df0:	f7fb f986 	bl	800c100 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010df4:	4603      	mov	r3, r0
 8010df6:	681a      	ldr	r2, [r3, #0]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	3b04      	subs	r3, #4
 8010dfc:	607b      	str	r3, [r7, #4]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	3b01      	subs	r3, #1
 8010e06:	617b      	str	r3, [r7, #20]
 8010e08:	e7eb      	b.n	8010de2 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x16>
	  return __result;
 8010e0a:	687b      	ldr	r3, [r7, #4]
	}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3718      	adds	r7, #24
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}

08010e14 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b086      	sub	sp, #24
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	60f8      	str	r0, [r7, #12]
 8010e1c:	60b9      	str	r1, [r7, #8]
 8010e1e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8010e20:	68ba      	ldr	r2, [r7, #8]
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	1ad3      	subs	r3, r2, r3
 8010e26:	109b      	asrs	r3, r3, #2
 8010e28:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d00a      	beq.n	8010e46 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	009b      	lsls	r3, r3, #2
 8010e34:	425b      	negs	r3, r3
 8010e36:	687a      	ldr	r2, [r7, #4]
 8010e38:	18d0      	adds	r0, r2, r3
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	009b      	lsls	r3, r3, #2
 8010e3e:	461a      	mov	r2, r3
 8010e40:	68f9      	ldr	r1, [r7, #12]
 8010e42:	f011 fa70 	bl	8022326 <memmove>
	  return __result - _Num;
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	009b      	lsls	r3, r3, #2
 8010e4a:	425b      	negs	r3, r3
 8010e4c:	687a      	ldr	r2, [r7, #4]
 8010e4e:	4413      	add	r3, r2
	}
 8010e50:	4618      	mov	r0, r3
 8010e52:	3718      	adds	r7, #24
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}

08010e58 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8010e58:	b480      	push	{r7}
 8010e5a:	b083      	sub	sp, #12
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010e60:	4b03      	ldr	r3, [pc, #12]	; (8010e70 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv+0x18>)
      }
 8010e62:	4618      	mov	r0, r3
 8010e64:	370c      	adds	r7, #12
 8010e66:	46bd      	mov	sp, r7
 8010e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6c:	4770      	bx	lr
 8010e6e:	bf00      	nop
 8010e70:	05555555 	.word	0x05555555

08010e74 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b084      	sub	sp, #16
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	60f8      	str	r0, [r7, #12]
 8010e7c:	60b9      	str	r1, [r7, #8]
 8010e7e:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8010e80:	68b8      	ldr	r0, [r7, #8]
 8010e82:	f7fb fd17 	bl	800c8b4 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 8010e86:	4603      	mov	r3, r0
 8010e88:	461a      	mov	r2, r3
 8010e8a:	68f9      	ldr	r1, [r7, #12]
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f7fc fc18 	bl	800d6c2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8010e92:	68b8      	ldr	r0, [r7, #8]
 8010e94:	f7fe fe4b 	bl	800fb2e <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f7fd ff52 	bl	800ed46 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>
    }
 8010ea2:	bf00      	nop
 8010ea4:	3710      	adds	r7, #16
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}

08010eaa <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8010eaa:	b480      	push	{r7}
 8010eac:	b083      	sub	sp, #12
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	6078      	str	r0, [r7, #4]
 8010eb2:	6039      	str	r1, [r7, #0]
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	370c      	adds	r7, #12
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec0:	4770      	bx	lr

08010ec2 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeES4_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8010ec2:	b590      	push	{r4, r7, lr}
 8010ec4:	b083      	sub	sp, #12
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	6078      	str	r0, [r7, #4]
 8010eca:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f7ff fd92 	bl	80109f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	681c      	ldr	r4, [r3, #0]
 8010ed6:	6838      	ldr	r0, [r7, #0]
 8010ed8:	f7ff fd8d 	bl	80109f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8010edc:	4603      	mov	r3, r0
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	429c      	cmp	r4, r3
 8010ee2:	bf0c      	ite	eq
 8010ee4:	2301      	moveq	r3, #1
 8010ee6:	2300      	movne	r3, #0
 8010ee8:	b2db      	uxtb	r3, r3
 8010eea:	4618      	mov	r0, r3
 8010eec:	370c      	adds	r7, #12
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd90      	pop	{r4, r7, pc}

08010ef2 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8010ef2:	b480      	push	{r7}
 8010ef4:	b083      	sub	sp, #12
 8010ef6:	af00      	add	r7, sp, #0
 8010ef8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	4618      	mov	r0, r3
 8010f00:	370c      	adds	r7, #12
 8010f02:	46bd      	mov	sp, r7
 8010f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f08:	4770      	bx	lr

08010f0a <_ZN3jlb4EdgeC1ERKS0_>:
    struct Edge
 8010f0a:	b580      	push	{r7, lr}
 8010f0c:	b082      	sub	sp, #8
 8010f0e:	af00      	add	r7, sp, #0
 8010f10:	6078      	str	r0, [r7, #4]
 8010f12:	6039      	str	r1, [r7, #0]
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	781a      	ldrb	r2, [r3, #0]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	701a      	strb	r2, [r3, #0]
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	685a      	ldr	r2, [r3, #4]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	605a      	str	r2, [r3, #4]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f103 0208 	add.w	r2, r3, #8
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	3308      	adds	r3, #8
 8010f2e:	4619      	mov	r1, r3
 8010f30:	4610      	mov	r0, r2
 8010f32:	f7fa ff0a 	bl	800bd4a <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	695a      	ldr	r2, [r3, #20]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	615a      	str	r2, [r3, #20]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	4618      	mov	r0, r3
 8010f42:	3708      	adds	r7, #8
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}

08010f48 <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8010f48:	b590      	push	{r4, r7, lr}
 8010f4a:	b083      	sub	sp, #12
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8010f52:	6838      	ldr	r0, [r7, #0]
 8010f54:	f000 f900 	bl	8011158 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010f58:	4604      	mov	r4, r0
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	2018      	movs	r0, #24
 8010f60:	f7f1 fc72 	bl	8002848 <_ZnwjPv>
 8010f64:	4603      	mov	r3, r0
 8010f66:	4621      	mov	r1, r4
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7ff ffce 	bl	8010f0a <_ZN3jlb4EdgeC1ERKS0_>
 8010f6e:	bf00      	nop
 8010f70:	370c      	adds	r7, #12
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd90      	pop	{r4, r7, pc}
	...

08010f78 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8010f78:	b480      	push	{r7}
 8010f7a:	b083      	sub	sp, #12
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010f80:	4b03      	ldr	r3, [pc, #12]	; (8010f90 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv+0x18>)
      }
 8010f82:	4618      	mov	r0, r3
 8010f84:	370c      	adds	r7, #12
 8010f86:	46bd      	mov	sp, r7
 8010f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop
 8010f90:	05555555 	.word	0x05555555

08010f94 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8010f94:	b590      	push	{r4, r7, lr}
 8010f96:	b083      	sub	sp, #12
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8010f9e:	6838      	ldr	r0, [r7, #0]
 8010fa0:	f000 f8e5 	bl	801116e <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010fa4:	4604      	mov	r4, r0
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	4619      	mov	r1, r3
 8010faa:	2018      	movs	r0, #24
 8010fac:	f7f1 fc4c 	bl	8002848 <_ZnwjPv>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	4621      	mov	r1, r4
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f7fc fc97 	bl	800d8e8 <_ZN3jlb4NodeC1ERKS0_>
 8010fba:	bf00      	nop
 8010fbc:	370c      	adds	r7, #12
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd90      	pop	{r4, r7, pc}

08010fc2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8010fc2:	b480      	push	{r7}
 8010fc4:	b087      	sub	sp, #28
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	60f8      	str	r0, [r7, #12]
 8010fca:	60b9      	str	r1, [r7, #8]
 8010fcc:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010fce:	68ba      	ldr	r2, [r7, #8]
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	1ad3      	subs	r3, r2, r3
 8010fd4:	109b      	asrs	r3, r3, #2
 8010fd6:	617b      	str	r3, [r7, #20]
 8010fd8:	697b      	ldr	r3, [r7, #20]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	dd0d      	ble.n	8010ffa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x38>
	      *__result = *__first;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	681a      	ldr	r2, [r3, #0]
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	601a      	str	r2, [r3, #0]
	      ++__first;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	3304      	adds	r3, #4
 8010fea:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	3304      	adds	r3, #4
 8010ff0:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010ff2:	697b      	ldr	r3, [r7, #20]
 8010ff4:	3b01      	subs	r3, #1
 8010ff6:	617b      	str	r3, [r7, #20]
 8010ff8:	e7ee      	b.n	8010fd8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x16>
	  return __result;
 8010ffa:	687b      	ldr	r3, [r7, #4]
	}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	371c      	adds	r7, #28
 8011000:	46bd      	mov	sp, r7
 8011002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011006:	4770      	bx	lr

08011008 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011008:	b580      	push	{r7, lr}
 801100a:	b086      	sub	sp, #24
 801100c:	af00      	add	r7, sp, #0
 801100e:	60f8      	str	r0, [r7, #12]
 8011010:	60b9      	str	r1, [r7, #8]
 8011012:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011014:	68ba      	ldr	r2, [r7, #8]
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	1ad3      	subs	r3, r2, r3
 801101a:	109b      	asrs	r3, r3, #2
 801101c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d006      	beq.n	8011032 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	009b      	lsls	r3, r3, #2
 8011028:	461a      	mov	r2, r3
 801102a:	68f9      	ldr	r1, [r7, #12]
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f011 f97a 	bl	8022326 <memmove>
	  return __result + _Num;
 8011032:	697b      	ldr	r3, [r7, #20]
 8011034:	009b      	lsls	r3, r3, #2
 8011036:	687a      	ldr	r2, [r7, #4]
 8011038:	4413      	add	r3, r2
	}
 801103a:	4618      	mov	r0, r3
 801103c:	3718      	adds	r7, #24
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}

08011042 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8011042:	b480      	push	{r7}
 8011044:	b087      	sub	sp, #28
 8011046:	af00      	add	r7, sp, #0
 8011048:	60f8      	str	r0, [r7, #12]
 801104a:	60b9      	str	r1, [r7, #8]
 801104c:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 801104e:	68ba      	ldr	r2, [r7, #8]
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	1ad3      	subs	r3, r2, r3
 8011054:	109b      	asrs	r3, r3, #2
 8011056:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	2b00      	cmp	r3, #0
 801105c:	dd0d      	ble.n	801107a <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x38>
	    *--__result = *--__last;
 801105e:	68bb      	ldr	r3, [r7, #8]
 8011060:	3b04      	subs	r3, #4
 8011062:	60bb      	str	r3, [r7, #8]
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	681a      	ldr	r2, [r3, #0]
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	3b04      	subs	r3, #4
 801106c:	607b      	str	r3, [r7, #4]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	3b01      	subs	r3, #1
 8011076:	617b      	str	r3, [r7, #20]
 8011078:	e7ee      	b.n	8011058 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x16>
	  return __result;
 801107a:	687b      	ldr	r3, [r7, #4]
	}
 801107c:	4618      	mov	r0, r3
 801107e:	371c      	adds	r7, #28
 8011080:	46bd      	mov	sp, r7
 8011082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011086:	4770      	bx	lr

08011088 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011088:	b580      	push	{r7, lr}
 801108a:	b086      	sub	sp, #24
 801108c:	af00      	add	r7, sp, #0
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011094:	68ba      	ldr	r2, [r7, #8]
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	1ad3      	subs	r3, r2, r3
 801109a:	109b      	asrs	r3, r3, #2
 801109c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d00a      	beq.n	80110ba <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80110a4:	697b      	ldr	r3, [r7, #20]
 80110a6:	009b      	lsls	r3, r3, #2
 80110a8:	425b      	negs	r3, r3
 80110aa:	687a      	ldr	r2, [r7, #4]
 80110ac:	18d0      	adds	r0, r2, r3
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	009b      	lsls	r3, r3, #2
 80110b2:	461a      	mov	r2, r3
 80110b4:	68f9      	ldr	r1, [r7, #12]
 80110b6:	f011 f936 	bl	8022326 <memmove>
	  return __result - _Num;
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	009b      	lsls	r3, r3, #2
 80110be:	425b      	negs	r3, r3
 80110c0:	687a      	ldr	r2, [r7, #4]
 80110c2:	4413      	add	r3, r2
	}
 80110c4:	4618      	mov	r0, r3
 80110c6:	3718      	adds	r7, #24
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}

080110cc <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80110cc:	b590      	push	{r4, r7, lr}
 80110ce:	b085      	sub	sp, #20
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	60f8      	str	r0, [r7, #12]
 80110d4:	60b9      	str	r1, [r7, #8]
 80110d6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80110d8:	68f8      	ldr	r0, [r7, #12]
 80110da:	f000 f853 	bl	8011184 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80110de:	4604      	mov	r4, r0
 80110e0:	68b8      	ldr	r0, [r7, #8]
 80110e2:	f000 f84f 	bl	8011184 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80110e6:	4603      	mov	r3, r0
 80110e8:	687a      	ldr	r2, [r7, #4]
 80110ea:	4619      	mov	r1, r3
 80110ec:	4620      	mov	r0, r4
 80110ee:	f000 f85b 	bl	80111a8 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>
 80110f2:	4603      	mov	r3, r0
    }
 80110f4:	4618      	mov	r0, r3
 80110f6:	3714      	adds	r7, #20
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd90      	pop	{r4, r7, pc}

080110fc <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 80110fc:	b480      	push	{r7}
 80110fe:	b083      	sub	sp, #12
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	4618      	mov	r0, r3
 8011108:	370c      	adds	r7, #12
 801110a:	46bd      	mov	sp, r7
 801110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011110:	4770      	bx	lr

08011112 <_ZSt13__copy_move_aILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8011112:	b5b0      	push	{r4, r5, r7, lr}
 8011114:	b084      	sub	sp, #16
 8011116:	af00      	add	r7, sp, #0
 8011118:	60f8      	str	r0, [r7, #12]
 801111a:	60b9      	str	r1, [r7, #8]
 801111c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801111e:	68f8      	ldr	r0, [r7, #12]
 8011120:	f7fc f800 	bl	800d124 <_ZSt12__niter_baseIPcET_S1_>
 8011124:	4604      	mov	r4, r0
 8011126:	68b8      	ldr	r0, [r7, #8]
 8011128:	f7fb fffc 	bl	800d124 <_ZSt12__niter_baseIPcET_S1_>
 801112c:	4605      	mov	r5, r0
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	4618      	mov	r0, r3
 8011132:	f7fb fff7 	bl	800d124 <_ZSt12__niter_baseIPcET_S1_>
 8011136:	4603      	mov	r3, r0
 8011138:	461a      	mov	r2, r3
 801113a:	4629      	mov	r1, r5
 801113c:	4620      	mov	r0, r4
 801113e:	f7fe ff73 	bl	8010028 <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>
 8011142:	4602      	mov	r2, r0
 8011144:	1d3b      	adds	r3, r7, #4
 8011146:	4611      	mov	r1, r2
 8011148:	4618      	mov	r0, r3
 801114a:	f7fb fff6 	bl	800d13a <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 801114e:	4603      	mov	r3, r0
    }
 8011150:	4618      	mov	r0, r3
 8011152:	3710      	adds	r7, #16
 8011154:	46bd      	mov	sp, r7
 8011156:	bdb0      	pop	{r4, r5, r7, pc}

08011158 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011158:	b480      	push	{r7}
 801115a:	b083      	sub	sp, #12
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	4618      	mov	r0, r3
 8011164:	370c      	adds	r7, #12
 8011166:	46bd      	mov	sp, r7
 8011168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116c:	4770      	bx	lr

0801116e <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801116e:	b480      	push	{r7}
 8011170:	b083      	sub	sp, #12
 8011172:	af00      	add	r7, sp, #0
 8011174:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	4618      	mov	r0, r3
 801117a:	370c      	adds	r7, #12
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr

08011184 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8011184:	b580      	push	{r7, lr}
 8011186:	b082      	sub	sp, #8
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 801118c:	1d3b      	adds	r3, r7, #4
 801118e:	4618      	mov	r0, r3
 8011190:	f000 f82d 	bl	80111ee <_ZNKRSt13move_iteratorIPcE4baseEv>
 8011194:	4603      	mov	r3, r0
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	4618      	mov	r0, r3
 801119a:	f7fe f8d2 	bl	800f342 <_ZSt12__miter_baseIPcET_S1_>
 801119e:	4603      	mov	r3, r0
 80111a0:	4618      	mov	r0, r3
 80111a2:	3708      	adds	r7, #8
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}

080111a8 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80111a8:	b5b0      	push	{r4, r5, r7, lr}
 80111aa:	b084      	sub	sp, #16
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	60b9      	str	r1, [r7, #8]
 80111b2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80111b4:	68f8      	ldr	r0, [r7, #12]
 80111b6:	f7fb ffb5 	bl	800d124 <_ZSt12__niter_baseIPcET_S1_>
 80111ba:	4604      	mov	r4, r0
 80111bc:	68b8      	ldr	r0, [r7, #8]
 80111be:	f7fb ffb1 	bl	800d124 <_ZSt12__niter_baseIPcET_S1_>
 80111c2:	4605      	mov	r5, r0
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7fb ffac 	bl	800d124 <_ZSt12__niter_baseIPcET_S1_>
 80111cc:	4603      	mov	r3, r0
 80111ce:	461a      	mov	r2, r3
 80111d0:	4629      	mov	r1, r5
 80111d2:	4620      	mov	r0, r4
 80111d4:	f000 f816 	bl	8011204 <_ZSt14__copy_move_a1ILb1EPcS0_ET1_T0_S2_S1_>
 80111d8:	4602      	mov	r2, r0
 80111da:	1d3b      	adds	r3, r7, #4
 80111dc:	4611      	mov	r1, r2
 80111de:	4618      	mov	r0, r3
 80111e0:	f7fb ffab 	bl	800d13a <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 80111e4:	4603      	mov	r3, r0
    }
 80111e6:	4618      	mov	r0, r3
 80111e8:	3710      	adds	r7, #16
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bdb0      	pop	{r4, r5, r7, pc}

080111ee <_ZNKRSt13move_iteratorIPcE4baseEv>:
      base() const & noexcept
 80111ee:	b480      	push	{r7}
 80111f0:	b083      	sub	sp, #12
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	4618      	mov	r0, r3
 80111fa:	370c      	adds	r7, #12
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr

08011204 <_ZSt14__copy_move_a1ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8011204:	b580      	push	{r7, lr}
 8011206:	b084      	sub	sp, #16
 8011208:	af00      	add	r7, sp, #0
 801120a:	60f8      	str	r0, [r7, #12]
 801120c:	60b9      	str	r1, [r7, #8]
 801120e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8011210:	687a      	ldr	r2, [r7, #4]
 8011212:	68b9      	ldr	r1, [r7, #8]
 8011214:	68f8      	ldr	r0, [r7, #12]
 8011216:	f000 f805 	bl	8011224 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>
 801121a:	4603      	mov	r3, r0
 801121c:	4618      	mov	r0, r3
 801121e:	3710      	adds	r7, #16
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
 801122a:	60f8      	str	r0, [r7, #12]
 801122c:	60b9      	str	r1, [r7, #8]
 801122e:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8011230:	f7f1 fb02 	bl	8002838 <_ZSt21is_constant_evaluatedv>
 8011234:	4603      	mov	r3, r0
 8011236:	2b00      	cmp	r3, #0
 8011238:	d006      	beq.n	8011248 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 801123a:	687a      	ldr	r2, [r7, #4]
 801123c:	68b9      	ldr	r1, [r7, #8]
 801123e:	68f8      	ldr	r0, [r7, #12]
 8011240:	f000 f80d 	bl	801125e <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>
 8011244:	4603      	mov	r3, r0
 8011246:	e006      	b.n	8011256 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8011248:	687a      	ldr	r2, [r7, #4]
 801124a:	68b9      	ldr	r1, [r7, #8]
 801124c:	68f8      	ldr	r0, [r7, #12]
 801124e:	f000 f829 	bl	80112a4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 8011252:	4603      	mov	r3, r0
 8011254:	bf00      	nop
    }
 8011256:	4618      	mov	r0, r3
 8011258:	3710      	adds	r7, #16
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}

0801125e <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 801125e:	b580      	push	{r7, lr}
 8011260:	b086      	sub	sp, #24
 8011262:	af00      	add	r7, sp, #0
 8011264:	60f8      	str	r0, [r7, #12]
 8011266:	60b9      	str	r1, [r7, #8]
 8011268:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801126a:	68ba      	ldr	r2, [r7, #8]
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	1ad3      	subs	r3, r2, r3
 8011270:	617b      	str	r3, [r7, #20]
 8011272:	697b      	ldr	r3, [r7, #20]
 8011274:	2b00      	cmp	r3, #0
 8011276:	dd10      	ble.n	801129a <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x3c>
	      *__result = std::move(*__first);
 8011278:	68f8      	ldr	r0, [r7, #12]
 801127a:	f7ff ff3f 	bl	80110fc <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 801127e:	4603      	mov	r3, r0
 8011280:	781a      	ldrb	r2, [r3, #0]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	3301      	adds	r3, #1
 801128a:	60fb      	str	r3, [r7, #12]
	      ++__result;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	3301      	adds	r3, #1
 8011290:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	3b01      	subs	r3, #1
 8011296:	617b      	str	r3, [r7, #20]
 8011298:	e7eb      	b.n	8011272 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x14>
	  return __result;
 801129a:	687b      	ldr	r3, [r7, #4]
	}
 801129c:	4618      	mov	r0, r3
 801129e:	3718      	adds	r7, #24
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}

080112a4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b086      	sub	sp, #24
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	60f8      	str	r0, [r7, #12]
 80112ac:	60b9      	str	r1, [r7, #8]
 80112ae:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80112b0:	68ba      	ldr	r2, [r7, #8]
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	1ad3      	subs	r3, r2, r3
 80112b6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d005      	beq.n	80112ca <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	461a      	mov	r2, r3
 80112c2:	68f9      	ldr	r1, [r7, #12]
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f011 f82e 	bl	8022326 <memmove>
	  return __result + _Num;
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	687a      	ldr	r2, [r7, #4]
 80112ce:	4413      	add	r3, r2
	}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3718      	adds	r7, #24
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <_ZN3jlb5LogicD1Ev>:
    class Logic
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7f7 ffa8 	bl	800923c <_ZN3jlb12SignalSenderD1Ev>
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7f6 ff7e 	bl	80081f4 <_ZN3jlb5GraphD1Ev>
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	3388      	adds	r3, #136	; 0x88
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7f3 f907 	bl	8004510 <_ZN3jlb10ControllerD1Ev>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	4618      	mov	r0, r3
 8011306:	f7f7 f80b 	bl	8008320 <_ZN3jlb8OdometryD1Ev>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	4618      	mov	r0, r3
 801130e:	3708      	adds	r7, #8
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}

08011314 <_Z41__static_initialization_and_destruction_0ii>:
	}

}
 8011314:	b580      	push	{r7, lr}
 8011316:	b082      	sub	sp, #8
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	6039      	str	r1, [r7, #0]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2b01      	cmp	r3, #1
 8011322:	d10e      	bne.n	8011342 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801132a:	4293      	cmp	r3, r2
 801132c:	d109      	bne.n	8011342 <_Z41__static_initialization_and_destruction_0ii+0x2e>
jlb::Logic logic;
 801132e:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8011360 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8011332:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8011360 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8011336:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8011360 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 801133a:	2102      	movs	r1, #2
 801133c:	4809      	ldr	r0, [pc, #36]	; (8011364 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801133e:	f7f9 fff4 	bl	800b32a <_ZN3jlb5LogicC1ENS_9DirectionEfff>
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d107      	bne.n	8011358 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801134e:	4293      	cmp	r3, r2
 8011350:	d102      	bne.n	8011358 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8011352:	4804      	ldr	r0, [pc, #16]	; (8011364 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8011354:	f7ff ffc0 	bl	80112d8 <_ZN3jlb5LogicD1Ev>
}
 8011358:	bf00      	nop
 801135a:	3708      	adds	r7, #8
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}
 8011360:	00000000 	.word	0x00000000
 8011364:	20000308 	.word	0x20000308

08011368 <_GLOBAL__sub_I_motor_battery_voltage>:
 8011368:	b580      	push	{r7, lr}
 801136a:	af00      	add	r7, sp, #0
 801136c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011370:	2001      	movs	r0, #1
 8011372:	f7ff ffcf 	bl	8011314 <_Z41__static_initialization_and_destruction_0ii>
 8011376:	bd80      	pop	{r7, pc}

08011378 <_GLOBAL__sub_D_motor_battery_voltage>:
 8011378:	b580      	push	{r7, lr}
 801137a:	af00      	add	r7, sp, #0
 801137c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011380:	2000      	movs	r0, #0
 8011382:	f7ff ffc7 	bl	8011314 <_Z41__static_initialization_and_destruction_0ii>
 8011386:	bd80      	pop	{r7, pc}

08011388 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8011388:	b480      	push	{r7}
 801138a:	b085      	sub	sp, #20
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8011390:	4b08      	ldr	r3, [pc, #32]	; (80113b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8011392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011394:	4907      	ldr	r1, [pc, #28]	; (80113b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	4313      	orrs	r3, r2
 801139a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801139c:	4b05      	ldr	r3, [pc, #20]	; (80113b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 801139e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	4013      	ands	r3, r2
 80113a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80113a6:	68fb      	ldr	r3, [r7, #12]
}
 80113a8:	bf00      	nop
 80113aa:	3714      	adds	r7, #20
 80113ac:	46bd      	mov	sp, r7
 80113ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b2:	4770      	bx	lr
 80113b4:	40021000 	.word	0x40021000

080113b8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80113b8:	b480      	push	{r7}
 80113ba:	b085      	sub	sp, #20
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80113c0:	4b08      	ldr	r3, [pc, #32]	; (80113e4 <LL_APB1_GRP2_EnableClock+0x2c>)
 80113c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80113c4:	4907      	ldr	r1, [pc, #28]	; (80113e4 <LL_APB1_GRP2_EnableClock+0x2c>)
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	4313      	orrs	r3, r2
 80113ca:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80113cc:	4b05      	ldr	r3, [pc, #20]	; (80113e4 <LL_APB1_GRP2_EnableClock+0x2c>)
 80113ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	4013      	ands	r3, r2
 80113d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80113d6:	68fb      	ldr	r3, [r7, #12]
}
 80113d8:	bf00      	nop
 80113da:	3714      	adds	r7, #20
 80113dc:	46bd      	mov	sp, r7
 80113de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e2:	4770      	bx	lr
 80113e4:	40021000 	.word	0x40021000

080113e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80113ec:	f002 f8a3 	bl	8013536 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80113f0:	f000 f862 	bl	80114b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80113f4:	f000 ffba 	bl	801236c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80113f8:	f000 ff8e 	bl	8012318 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 80113fc:	f000 fa62 	bl	80118c4 <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 8011400:	f000 fb82 	bl	8011b08 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 8011404:	f000 ff24 	bl	8012250 <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 8011408:	f000 ff58 	bl	80122bc <_ZL15MX_USB_PCD_Initv>
  MX_UART4_Init();
 801140c:	f000 fabc 	bl	8011988 <_ZL13MX_UART4_Initv>
  MX_SPI1_Init();
 8011410:	f000 fbce 	bl	8011bb0 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8011414:	f000 fc0e 	bl	8011c34 <_ZL12MX_SPI2_Initv>
  MX_SPI3_Init();
 8011418:	f000 fc4e 	bl	8011cb8 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 801141c:	f000 fc8e 	bl	8011d3c <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8011420:	f000 fd2e 	bl	8011e80 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8011424:	f000 fb10 	bl	8011a48 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8011428:	f000 f8b6 	bl	8011598 <_ZL12MX_ADC1_Initv>
  MX_TIM5_Init();
 801142c:	f000 fd88 	bl	8011f40 <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 8011430:	f000 f9dc 	bl	80117ec <_ZL12MX_I2C1_Initv>
  MX_ICACHE_Init();
 8011434:	f000 fa28 	bl	8011888 <_ZL14MX_ICACHE_Initv>
  MX_TIM6_Init();
 8011438:	f000 fe22 	bl	8012080 <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 801143c:	f000 fe60 	bl	8012100 <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */
	Radio_Init();
 8011440:	f7f2 fe62 	bl	8004108 <_Z10Radio_Initv>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8011444:	2100      	movs	r1, #0
 8011446:	4814      	ldr	r0, [pc, #80]	; (8011498 <main+0xb0>)
 8011448:	f008 f98c 	bl	8019764 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 801144c:	2100      	movs	r1, #0
 801144e:	4813      	ldr	r0, [pc, #76]	; (801149c <main+0xb4>)
 8011450:	f008 f988 	bl	8019764 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8011454:	210c      	movs	r1, #12
 8011456:	4811      	ldr	r0, [pc, #68]	; (801149c <main+0xb4>)
 8011458:	f008 f984 	bl	8019764 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 801145c:	213c      	movs	r1, #60	; 0x3c
 801145e:	4810      	ldr	r0, [pc, #64]	; (80114a0 <main+0xb8>)
 8011460:	f008 fcd8 	bl	8019e14 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim6);
 8011464:	480f      	ldr	r0, [pc, #60]	; (80114a4 <main+0xbc>)
 8011466:	f008 f84d 	bl	8019504 <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 801146a:	2108      	movs	r1, #8
 801146c:	480e      	ldr	r0, [pc, #56]	; (80114a8 <main+0xc0>)
 801146e:	f008 fae1 	bl	8019a34 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8011472:	210c      	movs	r1, #12
 8011474:	480c      	ldr	r0, [pc, #48]	; (80114a8 <main+0xc0>)
 8011476:	f008 fadd 	bl	8019a34 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 801147a:	f00c fb53 	bl	801db24 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 801147e:	4a0b      	ldr	r2, [pc, #44]	; (80114ac <main+0xc4>)
 8011480:	2100      	movs	r1, #0
 8011482:	480b      	ldr	r0, [pc, #44]	; (80114b0 <main+0xc8>)
 8011484:	f00c fb98 	bl	801dbb8 <osThreadNew>
 8011488:	4603      	mov	r3, r0
 801148a:	4a0a      	ldr	r2, [pc, #40]	; (80114b4 <main+0xcc>)
 801148c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  RegistrateUserTasks();
 801148e:	f7fa f8bf 	bl	800b610 <_Z19RegistrateUserTasksv>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8011492:	f00c fb6b 	bl	801db6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8011496:	e7fe      	b.n	8011496 <main+0xae>
 8011498:	20000c34 	.word	0x20000c34
 801149c:	20000b9c 	.word	0x20000b9c
 80114a0:	20000b50 	.word	0x20000b50
 80114a4:	20000be8 	.word	0x20000be8
 80114a8:	20000b04 	.word	0x20000b04
 80114ac:	0802401c 	.word	0x0802401c
 80114b0:	080125d1 	.word	0x080125d1
 80114b4:	20000f74 	.word	0x20000f74

080114b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b098      	sub	sp, #96	; 0x60
 80114bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80114be:	f107 0318 	add.w	r3, r7, #24
 80114c2:	2248      	movs	r2, #72	; 0x48
 80114c4:	2100      	movs	r1, #0
 80114c6:	4618      	mov	r0, r3
 80114c8:	f010 ff47 	bl	802235a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80114cc:	1d3b      	adds	r3, r7, #4
 80114ce:	2200      	movs	r2, #0
 80114d0:	601a      	str	r2, [r3, #0]
 80114d2:	605a      	str	r2, [r3, #4]
 80114d4:	609a      	str	r2, [r3, #8]
 80114d6:	60da      	str	r2, [r3, #12]
 80114d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80114da:	2000      	movs	r0, #0
 80114dc:	f005 f9de 	bl	801689c <HAL_PWREx_ControlVoltageScaling>
 80114e0:	4603      	mov	r3, r0
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	bf14      	ite	ne
 80114e6:	2301      	movne	r3, #1
 80114e8:	2300      	moveq	r3, #0
 80114ea:	b2db      	uxtb	r3, r3
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d001      	beq.n	80114f4 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 80114f0:	f001 f88d 	bl	801260e <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80114f4:	f005 f9b4 	bl	8016860 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80114f8:	4b26      	ldr	r3, [pc, #152]	; (8011594 <_Z18SystemClock_Configv+0xdc>)
 80114fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114fe:	4a25      	ldr	r2, [pc, #148]	; (8011594 <_Z18SystemClock_Configv+0xdc>)
 8011500:	f023 0318 	bic.w	r3, r3, #24
 8011504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8011508:	2334      	movs	r3, #52	; 0x34
 801150a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 801150c:	2381      	movs	r3, #129	; 0x81
 801150e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8011510:	2301      	movs	r3, #1
 8011512:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8011514:	2301      	movs	r3, #1
 8011516:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8011518:	2300      	movs	r3, #0
 801151a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 801151c:	2360      	movs	r3, #96	; 0x60
 801151e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011520:	2302      	movs	r3, #2
 8011522:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8011524:	2301      	movs	r3, #1
 8011526:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8011528:	2301      	movs	r3, #1
 801152a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 801152c:	2337      	movs	r3, #55	; 0x37
 801152e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8011530:	2307      	movs	r3, #7
 8011532:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8011534:	2302      	movs	r3, #2
 8011536:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8011538:	2302      	movs	r3, #2
 801153a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801153c:	f107 0318 	add.w	r3, r7, #24
 8011540:	4618      	mov	r0, r3
 8011542:	f005 fa3b 	bl	80169bc <HAL_RCC_OscConfig>
 8011546:	4603      	mov	r3, r0
 8011548:	2b00      	cmp	r3, #0
 801154a:	bf14      	ite	ne
 801154c:	2301      	movne	r3, #1
 801154e:	2300      	moveq	r3, #0
 8011550:	b2db      	uxtb	r3, r3
 8011552:	2b00      	cmp	r3, #0
 8011554:	d001      	beq.n	801155a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8011556:	f001 f85a 	bl	801260e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801155a:	230f      	movs	r3, #15
 801155c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801155e:	2303      	movs	r3, #3
 8011560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8011562:	2300      	movs	r3, #0
 8011564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8011566:	2300      	movs	r3, #0
 8011568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801156a:	2300      	movs	r3, #0
 801156c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801156e:	1d3b      	adds	r3, r7, #4
 8011570:	2105      	movs	r1, #5
 8011572:	4618      	mov	r0, r3
 8011574:	f005 fef8 	bl	8017368 <HAL_RCC_ClockConfig>
 8011578:	4603      	mov	r3, r0
 801157a:	2b00      	cmp	r3, #0
 801157c:	bf14      	ite	ne
 801157e:	2301      	movne	r3, #1
 8011580:	2300      	moveq	r3, #0
 8011582:	b2db      	uxtb	r3, r3
 8011584:	2b00      	cmp	r3, #0
 8011586:	d001      	beq.n	801158c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8011588:	f001 f841 	bl	801260e <Error_Handler>
  }
}
 801158c:	bf00      	nop
 801158e:	3760      	adds	r7, #96	; 0x60
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}
 8011594:	40021000 	.word	0x40021000

08011598 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b08a      	sub	sp, #40	; 0x28
 801159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 801159e:	f107 031c 	add.w	r3, r7, #28
 80115a2:	2200      	movs	r2, #0
 80115a4:	601a      	str	r2, [r3, #0]
 80115a6:	605a      	str	r2, [r3, #4]
 80115a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80115aa:	1d3b      	adds	r3, r7, #4
 80115ac:	2200      	movs	r2, #0
 80115ae:	601a      	str	r2, [r3, #0]
 80115b0:	605a      	str	r2, [r3, #4]
 80115b2:	609a      	str	r2, [r3, #8]
 80115b4:	60da      	str	r2, [r3, #12]
 80115b6:	611a      	str	r2, [r3, #16]
 80115b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80115ba:	4b82      	ldr	r3, [pc, #520]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 80115bc:	4a82      	ldr	r2, [pc, #520]	; (80117c8 <_ZL12MX_ADC1_Initv+0x230>)
 80115be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80115c0:	4b80      	ldr	r3, [pc, #512]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 80115c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80115c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80115c8:	4b7e      	ldr	r3, [pc, #504]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 80115ca:	2200      	movs	r2, #0
 80115cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80115ce:	4b7d      	ldr	r3, [pc, #500]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 80115d0:	2200      	movs	r2, #0
 80115d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80115d4:	4b7b      	ldr	r3, [pc, #492]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 80115d6:	2201      	movs	r2, #1
 80115d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80115da:	4b7a      	ldr	r3, [pc, #488]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 80115dc:	2208      	movs	r2, #8
 80115de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 80115e0:	4b78      	ldr	r3, [pc, #480]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 80115e2:	2201      	movs	r2, #1
 80115e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80115e6:	4b77      	ldr	r3, [pc, #476]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 80115e8:	2200      	movs	r2, #0
 80115ea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 80115ec:	4b75      	ldr	r3, [pc, #468]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 80115ee:	2208      	movs	r2, #8
 80115f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80115f2:	4b74      	ldr	r3, [pc, #464]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 80115f4:	2200      	movs	r2, #0
 80115f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80115fa:	4b72      	ldr	r3, [pc, #456]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 80115fc:	2200      	movs	r2, #0
 80115fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8011600:	4b70      	ldr	r3, [pc, #448]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 8011602:	2200      	movs	r2, #0
 8011604:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8011606:	4b6f      	ldr	r3, [pc, #444]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 8011608:	2201      	movs	r2, #1
 801160a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 801160e:	4b6d      	ldr	r3, [pc, #436]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 8011610:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011614:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8011616:	4b6b      	ldr	r3, [pc, #428]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 8011618:	2201      	movs	r2, #1
 801161a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 801161e:	4b69      	ldr	r3, [pc, #420]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 8011620:	2214      	movs	r2, #20
 8011622:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8011624:	4b67      	ldr	r3, [pc, #412]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 8011626:	22c0      	movs	r2, #192	; 0xc0
 8011628:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 801162a:	4b66      	ldr	r3, [pc, #408]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 801162c:	2200      	movs	r2, #0
 801162e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8011630:	4b64      	ldr	r3, [pc, #400]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 8011632:	2201      	movs	r2, #1
 8011634:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8011636:	4863      	ldr	r0, [pc, #396]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 8011638:	f002 f9c2 	bl	80139c0 <HAL_ADC_Init>
 801163c:	4603      	mov	r3, r0
 801163e:	2b00      	cmp	r3, #0
 8011640:	bf14      	ite	ne
 8011642:	2301      	movne	r3, #1
 8011644:	2300      	moveq	r3, #0
 8011646:	b2db      	uxtb	r3, r3
 8011648:	2b00      	cmp	r3, #0
 801164a:	d001      	beq.n	8011650 <_ZL12MX_ADC1_Initv+0xb8>
  {
    Error_Handler();
 801164c:	f000 ffdf 	bl	801260e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8011650:	2300      	movs	r3, #0
 8011652:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8011654:	f107 031c 	add.w	r3, r7, #28
 8011658:	4619      	mov	r1, r3
 801165a:	485a      	ldr	r0, [pc, #360]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 801165c:	f003 fb44 	bl	8014ce8 <HAL_ADCEx_MultiModeConfigChannel>
 8011660:	4603      	mov	r3, r0
 8011662:	2b00      	cmp	r3, #0
 8011664:	bf14      	ite	ne
 8011666:	2301      	movne	r3, #1
 8011668:	2300      	moveq	r3, #0
 801166a:	b2db      	uxtb	r3, r3
 801166c:	2b00      	cmp	r3, #0
 801166e:	d001      	beq.n	8011674 <_ZL12MX_ADC1_Initv+0xdc>
  {
    Error_Handler();
 8011670:	f000 ffcd 	bl	801260e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8011674:	4b55      	ldr	r3, [pc, #340]	; (80117cc <_ZL12MX_ADC1_Initv+0x234>)
 8011676:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8011678:	2306      	movs	r3, #6
 801167a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 801167c:	2301      	movs	r3, #1
 801167e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8011680:	237f      	movs	r3, #127	; 0x7f
 8011682:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8011684:	2304      	movs	r3, #4
 8011686:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8011688:	2300      	movs	r3, #0
 801168a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801168c:	1d3b      	adds	r3, r7, #4
 801168e:	4619      	mov	r1, r3
 8011690:	484c      	ldr	r0, [pc, #304]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 8011692:	f002 fdcd 	bl	8014230 <HAL_ADC_ConfigChannel>
 8011696:	4603      	mov	r3, r0
 8011698:	2b00      	cmp	r3, #0
 801169a:	bf14      	ite	ne
 801169c:	2301      	movne	r3, #1
 801169e:	2300      	moveq	r3, #0
 80116a0:	b2db      	uxtb	r3, r3
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d001      	beq.n	80116aa <_ZL12MX_ADC1_Initv+0x112>
  {
    Error_Handler();
 80116a6:	f000 ffb2 	bl	801260e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80116aa:	4b49      	ldr	r3, [pc, #292]	; (80117d0 <_ZL12MX_ADC1_Initv+0x238>)
 80116ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80116ae:	230c      	movs	r3, #12
 80116b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80116b2:	1d3b      	adds	r3, r7, #4
 80116b4:	4619      	mov	r1, r3
 80116b6:	4843      	ldr	r0, [pc, #268]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 80116b8:	f002 fdba 	bl	8014230 <HAL_ADC_ConfigChannel>
 80116bc:	4603      	mov	r3, r0
 80116be:	2b00      	cmp	r3, #0
 80116c0:	bf14      	ite	ne
 80116c2:	2301      	movne	r3, #1
 80116c4:	2300      	moveq	r3, #0
 80116c6:	b2db      	uxtb	r3, r3
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d001      	beq.n	80116d0 <_ZL12MX_ADC1_Initv+0x138>
  {
    Error_Handler();
 80116cc:	f000 ff9f 	bl	801260e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80116d0:	4b40      	ldr	r3, [pc, #256]	; (80117d4 <_ZL12MX_ADC1_Initv+0x23c>)
 80116d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80116d4:	2312      	movs	r3, #18
 80116d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80116d8:	1d3b      	adds	r3, r7, #4
 80116da:	4619      	mov	r1, r3
 80116dc:	4839      	ldr	r0, [pc, #228]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 80116de:	f002 fda7 	bl	8014230 <HAL_ADC_ConfigChannel>
 80116e2:	4603      	mov	r3, r0
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	bf14      	ite	ne
 80116e8:	2301      	movne	r3, #1
 80116ea:	2300      	moveq	r3, #0
 80116ec:	b2db      	uxtb	r3, r3
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d001      	beq.n	80116f6 <_ZL12MX_ADC1_Initv+0x15e>
  {
    Error_Handler();
 80116f2:	f000 ff8c 	bl	801260e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80116f6:	4b38      	ldr	r3, [pc, #224]	; (80117d8 <_ZL12MX_ADC1_Initv+0x240>)
 80116f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80116fa:	2318      	movs	r3, #24
 80116fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80116fe:	1d3b      	adds	r3, r7, #4
 8011700:	4619      	mov	r1, r3
 8011702:	4830      	ldr	r0, [pc, #192]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 8011704:	f002 fd94 	bl	8014230 <HAL_ADC_ConfigChannel>
 8011708:	4603      	mov	r3, r0
 801170a:	2b00      	cmp	r3, #0
 801170c:	bf14      	ite	ne
 801170e:	2301      	movne	r3, #1
 8011710:	2300      	moveq	r3, #0
 8011712:	b2db      	uxtb	r3, r3
 8011714:	2b00      	cmp	r3, #0
 8011716:	d001      	beq.n	801171c <_ZL12MX_ADC1_Initv+0x184>
  {
    Error_Handler();
 8011718:	f000 ff79 	bl	801260e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 801171c:	4b2f      	ldr	r3, [pc, #188]	; (80117dc <_ZL12MX_ADC1_Initv+0x244>)
 801171e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8011720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011724:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011726:	1d3b      	adds	r3, r7, #4
 8011728:	4619      	mov	r1, r3
 801172a:	4826      	ldr	r0, [pc, #152]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 801172c:	f002 fd80 	bl	8014230 <HAL_ADC_ConfigChannel>
 8011730:	4603      	mov	r3, r0
 8011732:	2b00      	cmp	r3, #0
 8011734:	bf14      	ite	ne
 8011736:	2301      	movne	r3, #1
 8011738:	2300      	moveq	r3, #0
 801173a:	b2db      	uxtb	r3, r3
 801173c:	2b00      	cmp	r3, #0
 801173e:	d001      	beq.n	8011744 <_ZL12MX_ADC1_Initv+0x1ac>
  {
    Error_Handler();
 8011740:	f000 ff65 	bl	801260e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8011744:	4b26      	ldr	r3, [pc, #152]	; (80117e0 <_ZL12MX_ADC1_Initv+0x248>)
 8011746:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8011748:	f44f 7383 	mov.w	r3, #262	; 0x106
 801174c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801174e:	1d3b      	adds	r3, r7, #4
 8011750:	4619      	mov	r1, r3
 8011752:	481c      	ldr	r0, [pc, #112]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 8011754:	f002 fd6c 	bl	8014230 <HAL_ADC_ConfigChannel>
 8011758:	4603      	mov	r3, r0
 801175a:	2b00      	cmp	r3, #0
 801175c:	bf14      	ite	ne
 801175e:	2301      	movne	r3, #1
 8011760:	2300      	moveq	r3, #0
 8011762:	b2db      	uxtb	r3, r3
 8011764:	2b00      	cmp	r3, #0
 8011766:	d001      	beq.n	801176c <_ZL12MX_ADC1_Initv+0x1d4>
  {
    Error_Handler();
 8011768:	f000 ff51 	bl	801260e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 801176c:	4b1d      	ldr	r3, [pc, #116]	; (80117e4 <_ZL12MX_ADC1_Initv+0x24c>)
 801176e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8011770:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8011774:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011776:	1d3b      	adds	r3, r7, #4
 8011778:	4619      	mov	r1, r3
 801177a:	4812      	ldr	r0, [pc, #72]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 801177c:	f002 fd58 	bl	8014230 <HAL_ADC_ConfigChannel>
 8011780:	4603      	mov	r3, r0
 8011782:	2b00      	cmp	r3, #0
 8011784:	bf14      	ite	ne
 8011786:	2301      	movne	r3, #1
 8011788:	2300      	moveq	r3, #0
 801178a:	b2db      	uxtb	r3, r3
 801178c:	2b00      	cmp	r3, #0
 801178e:	d001      	beq.n	8011794 <_ZL12MX_ADC1_Initv+0x1fc>
  {
    Error_Handler();
 8011790:	f000 ff3d 	bl	801260e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8011794:	4b14      	ldr	r3, [pc, #80]	; (80117e8 <_ZL12MX_ADC1_Initv+0x250>)
 8011796:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8011798:	f44f 7389 	mov.w	r3, #274	; 0x112
 801179c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801179e:	1d3b      	adds	r3, r7, #4
 80117a0:	4619      	mov	r1, r3
 80117a2:	4808      	ldr	r0, [pc, #32]	; (80117c4 <_ZL12MX_ADC1_Initv+0x22c>)
 80117a4:	f002 fd44 	bl	8014230 <HAL_ADC_ConfigChannel>
 80117a8:	4603      	mov	r3, r0
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	bf14      	ite	ne
 80117ae:	2301      	movne	r3, #1
 80117b0:	2300      	moveq	r3, #0
 80117b2:	b2db      	uxtb	r3, r3
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d001      	beq.n	80117bc <_ZL12MX_ADC1_Initv+0x224>
  {
    Error_Handler();
 80117b8:	f000 ff29 	bl	801260e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80117bc:	bf00      	nop
 80117be:	3728      	adds	r7, #40	; 0x28
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}
 80117c4:	200006d0 	.word	0x200006d0
 80117c8:	42028000 	.word	0x42028000
 80117cc:	04300002 	.word	0x04300002
 80117d0:	08600004 	.word	0x08600004
 80117d4:	0c900008 	.word	0x0c900008
 80117d8:	1d500080 	.word	0x1d500080
 80117dc:	21800100 	.word	0x21800100
 80117e0:	25b00200 	.word	0x25b00200
 80117e4:	32601000 	.word	0x32601000
 80117e8:	43210000 	.word	0x43210000

080117ec <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80117f0:	4b22      	ldr	r3, [pc, #136]	; (801187c <_ZL12MX_I2C1_Initv+0x90>)
 80117f2:	4a23      	ldr	r2, [pc, #140]	; (8011880 <_ZL12MX_I2C1_Initv+0x94>)
 80117f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60514452;
 80117f6:	4b21      	ldr	r3, [pc, #132]	; (801187c <_ZL12MX_I2C1_Initv+0x90>)
 80117f8:	4a22      	ldr	r2, [pc, #136]	; (8011884 <_ZL12MX_I2C1_Initv+0x98>)
 80117fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80117fc:	4b1f      	ldr	r3, [pc, #124]	; (801187c <_ZL12MX_I2C1_Initv+0x90>)
 80117fe:	2200      	movs	r2, #0
 8011800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011802:	4b1e      	ldr	r3, [pc, #120]	; (801187c <_ZL12MX_I2C1_Initv+0x90>)
 8011804:	2201      	movs	r2, #1
 8011806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011808:	4b1c      	ldr	r3, [pc, #112]	; (801187c <_ZL12MX_I2C1_Initv+0x90>)
 801180a:	2200      	movs	r2, #0
 801180c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801180e:	4b1b      	ldr	r3, [pc, #108]	; (801187c <_ZL12MX_I2C1_Initv+0x90>)
 8011810:	2200      	movs	r2, #0
 8011812:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8011814:	4b19      	ldr	r3, [pc, #100]	; (801187c <_ZL12MX_I2C1_Initv+0x90>)
 8011816:	2200      	movs	r2, #0
 8011818:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801181a:	4b18      	ldr	r3, [pc, #96]	; (801187c <_ZL12MX_I2C1_Initv+0x90>)
 801181c:	2200      	movs	r2, #0
 801181e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011820:	4b16      	ldr	r3, [pc, #88]	; (801187c <_ZL12MX_I2C1_Initv+0x90>)
 8011822:	2200      	movs	r2, #0
 8011824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8011826:	4815      	ldr	r0, [pc, #84]	; (801187c <_ZL12MX_I2C1_Initv+0x90>)
 8011828:	f004 f942 	bl	8015ab0 <HAL_I2C_Init>
 801182c:	4603      	mov	r3, r0
 801182e:	2b00      	cmp	r3, #0
 8011830:	bf14      	ite	ne
 8011832:	2301      	movne	r3, #1
 8011834:	2300      	moveq	r3, #0
 8011836:	b2db      	uxtb	r3, r3
 8011838:	2b00      	cmp	r3, #0
 801183a:	d001      	beq.n	8011840 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 801183c:	f000 fee7 	bl	801260e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8011840:	2100      	movs	r1, #0
 8011842:	480e      	ldr	r0, [pc, #56]	; (801187c <_ZL12MX_I2C1_Initv+0x90>)
 8011844:	f004 fe40 	bl	80164c8 <HAL_I2CEx_ConfigAnalogFilter>
 8011848:	4603      	mov	r3, r0
 801184a:	2b00      	cmp	r3, #0
 801184c:	bf14      	ite	ne
 801184e:	2301      	movne	r3, #1
 8011850:	2300      	moveq	r3, #0
 8011852:	b2db      	uxtb	r3, r3
 8011854:	2b00      	cmp	r3, #0
 8011856:	d001      	beq.n	801185c <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8011858:	f000 fed9 	bl	801260e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 801185c:	2100      	movs	r1, #0
 801185e:	4807      	ldr	r0, [pc, #28]	; (801187c <_ZL12MX_I2C1_Initv+0x90>)
 8011860:	f004 fe7d 	bl	801655e <HAL_I2CEx_ConfigDigitalFilter>
 8011864:	4603      	mov	r3, r0
 8011866:	2b00      	cmp	r3, #0
 8011868:	bf14      	ite	ne
 801186a:	2301      	movne	r3, #1
 801186c:	2300      	moveq	r3, #0
 801186e:	b2db      	uxtb	r3, r3
 8011870:	2b00      	cmp	r3, #0
 8011872:	d001      	beq.n	8011878 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8011874:	f000 fecb 	bl	801260e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8011878:	bf00      	nop
 801187a:	bd80      	pop	{r7, pc}
 801187c:	200007a0 	.word	0x200007a0
 8011880:	40005400 	.word	0x40005400
 8011884:	60514452 	.word	0x60514452

08011888 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 801188c:	2000      	movs	r0, #0
 801188e:	f004 feb3 	bl	80165f8 <HAL_ICACHE_ConfigAssociativityMode>
 8011892:	4603      	mov	r3, r0
 8011894:	2b00      	cmp	r3, #0
 8011896:	bf14      	ite	ne
 8011898:	2301      	movne	r3, #1
 801189a:	2300      	moveq	r3, #0
 801189c:	b2db      	uxtb	r3, r3
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d001      	beq.n	80118a6 <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 80118a2:	f000 feb4 	bl	801260e <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80118a6:	f004 fec7 	bl	8016638 <HAL_ICACHE_Enable>
 80118aa:	4603      	mov	r3, r0
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	bf14      	ite	ne
 80118b0:	2301      	movne	r3, #1
 80118b2:	2300      	moveq	r3, #0
 80118b4:	b2db      	uxtb	r3, r3
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d001      	beq.n	80118be <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 80118ba:	f000 fea8 	bl	801260e <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80118be:	bf00      	nop
 80118c0:	bd80      	pop	{r7, pc}
	...

080118c4 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80118c8:	4b2c      	ldr	r3, [pc, #176]	; (801197c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80118ca:	4a2d      	ldr	r2, [pc, #180]	; (8011980 <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 80118cc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80118ce:	4b2b      	ldr	r3, [pc, #172]	; (801197c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80118d0:	4a2c      	ldr	r2, [pc, #176]	; (8011984 <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 80118d2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80118d4:	4b29      	ldr	r3, [pc, #164]	; (801197c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80118d6:	2200      	movs	r2, #0
 80118d8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80118da:	4b28      	ldr	r3, [pc, #160]	; (801197c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80118dc:	2200      	movs	r2, #0
 80118de:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80118e0:	4b26      	ldr	r3, [pc, #152]	; (801197c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80118e2:	2200      	movs	r2, #0
 80118e4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80118e6:	4b25      	ldr	r3, [pc, #148]	; (801197c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80118e8:	220c      	movs	r2, #12
 80118ea:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80118ec:	4b23      	ldr	r3, [pc, #140]	; (801197c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80118ee:	2200      	movs	r2, #0
 80118f0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80118f2:	4b22      	ldr	r3, [pc, #136]	; (801197c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80118f4:	2200      	movs	r2, #0
 80118f6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80118f8:	4b20      	ldr	r3, [pc, #128]	; (801197c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80118fa:	2200      	movs	r2, #0
 80118fc:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80118fe:	4b1f      	ldr	r3, [pc, #124]	; (801197c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8011900:	2200      	movs	r2, #0
 8011902:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8011904:	4b1d      	ldr	r3, [pc, #116]	; (801197c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8011906:	2200      	movs	r2, #0
 8011908:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 801190a:	481c      	ldr	r0, [pc, #112]	; (801197c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801190c:	f009 fda8 	bl	801b460 <HAL_UART_Init>
 8011910:	4603      	mov	r3, r0
 8011912:	2b00      	cmp	r3, #0
 8011914:	bf14      	ite	ne
 8011916:	2301      	movne	r3, #1
 8011918:	2300      	moveq	r3, #0
 801191a:	b2db      	uxtb	r3, r3
 801191c:	2b00      	cmp	r3, #0
 801191e:	d001      	beq.n	8011924 <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 8011920:	f000 fe75 	bl	801260e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011924:	2100      	movs	r1, #0
 8011926:	4815      	ldr	r0, [pc, #84]	; (801197c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8011928:	f00b fdf9 	bl	801d51e <HAL_UARTEx_SetTxFifoThreshold>
 801192c:	4603      	mov	r3, r0
 801192e:	2b00      	cmp	r3, #0
 8011930:	bf14      	ite	ne
 8011932:	2301      	movne	r3, #1
 8011934:	2300      	moveq	r3, #0
 8011936:	b2db      	uxtb	r3, r3
 8011938:	2b00      	cmp	r3, #0
 801193a:	d001      	beq.n	8011940 <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 801193c:	f000 fe67 	bl	801260e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011940:	2100      	movs	r1, #0
 8011942:	480e      	ldr	r0, [pc, #56]	; (801197c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8011944:	f00b fe29 	bl	801d59a <HAL_UARTEx_SetRxFifoThreshold>
 8011948:	4603      	mov	r3, r0
 801194a:	2b00      	cmp	r3, #0
 801194c:	bf14      	ite	ne
 801194e:	2301      	movne	r3, #1
 8011950:	2300      	moveq	r3, #0
 8011952:	b2db      	uxtb	r3, r3
 8011954:	2b00      	cmp	r3, #0
 8011956:	d001      	beq.n	801195c <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 8011958:	f000 fe59 	bl	801260e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 801195c:	4807      	ldr	r0, [pc, #28]	; (801197c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801195e:	f00b fda5 	bl	801d4ac <HAL_UARTEx_DisableFifoMode>
 8011962:	4603      	mov	r3, r0
 8011964:	2b00      	cmp	r3, #0
 8011966:	bf14      	ite	ne
 8011968:	2301      	movne	r3, #1
 801196a:	2300      	moveq	r3, #0
 801196c:	b2db      	uxtb	r3, r3
 801196e:	2b00      	cmp	r3, #0
 8011970:	d001      	beq.n	8011976 <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 8011972:	f000 fe4c 	bl	801260e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8011976:	bf00      	nop
 8011978:	bd80      	pop	{r7, pc}
 801197a:	bf00      	nop
 801197c:	200007f4 	.word	0x200007f4
 8011980:	40008000 	.word	0x40008000
 8011984:	00033324 	.word	0x00033324

08011988 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 801198c:	4b2c      	ldr	r3, [pc, #176]	; (8011a40 <_ZL13MX_UART4_Initv+0xb8>)
 801198e:	4a2d      	ldr	r2, [pc, #180]	; (8011a44 <_ZL13MX_UART4_Initv+0xbc>)
 8011990:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8011992:	4b2b      	ldr	r3, [pc, #172]	; (8011a40 <_ZL13MX_UART4_Initv+0xb8>)
 8011994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011998:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 801199a:	4b29      	ldr	r3, [pc, #164]	; (8011a40 <_ZL13MX_UART4_Initv+0xb8>)
 801199c:	2200      	movs	r2, #0
 801199e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80119a0:	4b27      	ldr	r3, [pc, #156]	; (8011a40 <_ZL13MX_UART4_Initv+0xb8>)
 80119a2:	2200      	movs	r2, #0
 80119a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80119a6:	4b26      	ldr	r3, [pc, #152]	; (8011a40 <_ZL13MX_UART4_Initv+0xb8>)
 80119a8:	2200      	movs	r2, #0
 80119aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 80119ac:	4b24      	ldr	r3, [pc, #144]	; (8011a40 <_ZL13MX_UART4_Initv+0xb8>)
 80119ae:	2204      	movs	r2, #4
 80119b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80119b2:	4b23      	ldr	r3, [pc, #140]	; (8011a40 <_ZL13MX_UART4_Initv+0xb8>)
 80119b4:	2200      	movs	r2, #0
 80119b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80119b8:	4b21      	ldr	r3, [pc, #132]	; (8011a40 <_ZL13MX_UART4_Initv+0xb8>)
 80119ba:	2200      	movs	r2, #0
 80119bc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80119be:	4b20      	ldr	r3, [pc, #128]	; (8011a40 <_ZL13MX_UART4_Initv+0xb8>)
 80119c0:	2200      	movs	r2, #0
 80119c2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80119c4:	4b1e      	ldr	r3, [pc, #120]	; (8011a40 <_ZL13MX_UART4_Initv+0xb8>)
 80119c6:	2200      	movs	r2, #0
 80119c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80119ca:	4b1d      	ldr	r3, [pc, #116]	; (8011a40 <_ZL13MX_UART4_Initv+0xb8>)
 80119cc:	2200      	movs	r2, #0
 80119ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80119d0:	481b      	ldr	r0, [pc, #108]	; (8011a40 <_ZL13MX_UART4_Initv+0xb8>)
 80119d2:	f009 fd45 	bl	801b460 <HAL_UART_Init>
 80119d6:	4603      	mov	r3, r0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	bf14      	ite	ne
 80119dc:	2301      	movne	r3, #1
 80119de:	2300      	moveq	r3, #0
 80119e0:	b2db      	uxtb	r3, r3
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d001      	beq.n	80119ea <_ZL13MX_UART4_Initv+0x62>
  {
    Error_Handler();
 80119e6:	f000 fe12 	bl	801260e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80119ea:	2100      	movs	r1, #0
 80119ec:	4814      	ldr	r0, [pc, #80]	; (8011a40 <_ZL13MX_UART4_Initv+0xb8>)
 80119ee:	f00b fd96 	bl	801d51e <HAL_UARTEx_SetTxFifoThreshold>
 80119f2:	4603      	mov	r3, r0
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	bf14      	ite	ne
 80119f8:	2301      	movne	r3, #1
 80119fa:	2300      	moveq	r3, #0
 80119fc:	b2db      	uxtb	r3, r3
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d001      	beq.n	8011a06 <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 8011a02:	f000 fe04 	bl	801260e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011a06:	2100      	movs	r1, #0
 8011a08:	480d      	ldr	r0, [pc, #52]	; (8011a40 <_ZL13MX_UART4_Initv+0xb8>)
 8011a0a:	f00b fdc6 	bl	801d59a <HAL_UARTEx_SetRxFifoThreshold>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	bf14      	ite	ne
 8011a14:	2301      	movne	r3, #1
 8011a16:	2300      	moveq	r3, #0
 8011a18:	b2db      	uxtb	r3, r3
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d001      	beq.n	8011a22 <_ZL13MX_UART4_Initv+0x9a>
  {
    Error_Handler();
 8011a1e:	f000 fdf6 	bl	801260e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8011a22:	4807      	ldr	r0, [pc, #28]	; (8011a40 <_ZL13MX_UART4_Initv+0xb8>)
 8011a24:	f00b fd42 	bl	801d4ac <HAL_UARTEx_DisableFifoMode>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	bf14      	ite	ne
 8011a2e:	2301      	movne	r3, #1
 8011a30:	2300      	moveq	r3, #0
 8011a32:	b2db      	uxtb	r3, r3
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d001      	beq.n	8011a3c <_ZL13MX_UART4_Initv+0xb4>
  {
    Error_Handler();
 8011a38:	f000 fde9 	bl	801260e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8011a3c:	bf00      	nop
 8011a3e:	bd80      	pop	{r7, pc}
 8011a40:	20000888 	.word	0x20000888
 8011a44:	40004c00 	.word	0x40004c00

08011a48 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8011a4c:	4b2c      	ldr	r3, [pc, #176]	; (8011b00 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a4e:	4a2d      	ldr	r2, [pc, #180]	; (8011b04 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8011a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8011a52:	4b2b      	ldr	r3, [pc, #172]	; (8011b00 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8011a5a:	4b29      	ldr	r3, [pc, #164]	; (8011b00 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8011a60:	4b27      	ldr	r3, [pc, #156]	; (8011b00 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a62:	2200      	movs	r2, #0
 8011a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8011a66:	4b26      	ldr	r3, [pc, #152]	; (8011b00 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a68:	2200      	movs	r2, #0
 8011a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8011a6c:	4b24      	ldr	r3, [pc, #144]	; (8011b00 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a6e:	2208      	movs	r2, #8
 8011a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011a72:	4b23      	ldr	r3, [pc, #140]	; (8011b00 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a74:	2200      	movs	r2, #0
 8011a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8011a78:	4b21      	ldr	r3, [pc, #132]	; (8011b00 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011a7e:	4b20      	ldr	r3, [pc, #128]	; (8011b00 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a80:	2200      	movs	r2, #0
 8011a82:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8011a84:	4b1e      	ldr	r3, [pc, #120]	; (8011b00 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a86:	2200      	movs	r2, #0
 8011a88:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011a8a:	4b1d      	ldr	r3, [pc, #116]	; (8011b00 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8011a90:	481b      	ldr	r0, [pc, #108]	; (8011b00 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a92:	f009 fce5 	bl	801b460 <HAL_UART_Init>
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	bf14      	ite	ne
 8011a9c:	2301      	movne	r3, #1
 8011a9e:	2300      	moveq	r3, #0
 8011aa0:	b2db      	uxtb	r3, r3
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d001      	beq.n	8011aaa <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8011aa6:	f000 fdb2 	bl	801260e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011aaa:	2100      	movs	r1, #0
 8011aac:	4814      	ldr	r0, [pc, #80]	; (8011b00 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011aae:	f00b fd36 	bl	801d51e <HAL_UARTEx_SetTxFifoThreshold>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	bf14      	ite	ne
 8011ab8:	2301      	movne	r3, #1
 8011aba:	2300      	moveq	r3, #0
 8011abc:	b2db      	uxtb	r3, r3
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d001      	beq.n	8011ac6 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8011ac2:	f000 fda4 	bl	801260e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011ac6:	2100      	movs	r1, #0
 8011ac8:	480d      	ldr	r0, [pc, #52]	; (8011b00 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011aca:	f00b fd66 	bl	801d59a <HAL_UARTEx_SetRxFifoThreshold>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	bf14      	ite	ne
 8011ad4:	2301      	movne	r3, #1
 8011ad6:	2300      	moveq	r3, #0
 8011ad8:	b2db      	uxtb	r3, r3
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d001      	beq.n	8011ae2 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8011ade:	f000 fd96 	bl	801260e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8011ae2:	4807      	ldr	r0, [pc, #28]	; (8011b00 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011ae4:	f00b fce2 	bl	801d4ac <HAL_UARTEx_DisableFifoMode>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	bf14      	ite	ne
 8011aee:	2301      	movne	r3, #1
 8011af0:	2300      	moveq	r3, #0
 8011af2:	b2db      	uxtb	r3, r3
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d001      	beq.n	8011afc <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8011af8:	f000 fd89 	bl	801260e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8011afc:	bf00      	nop
 8011afe:	bd80      	pop	{r7, pc}
 8011b00:	2000091c 	.word	0x2000091c
 8011b04:	40004400 	.word	0x40004400

08011b08 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b086      	sub	sp, #24
 8011b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8011b0e:	463b      	mov	r3, r7
 8011b10:	2200      	movs	r2, #0
 8011b12:	601a      	str	r2, [r3, #0]
 8011b14:	605a      	str	r2, [r3, #4]
 8011b16:	609a      	str	r2, [r3, #8]
 8011b18:	60da      	str	r2, [r3, #12]
 8011b1a:	611a      	str	r2, [r3, #16]
 8011b1c:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8011b1e:	4b22      	ldr	r3, [pc, #136]	; (8011ba8 <_ZL11MX_RTC_Initv+0xa0>)
 8011b20:	4a22      	ldr	r2, [pc, #136]	; (8011bac <_ZL11MX_RTC_Initv+0xa4>)
 8011b22:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8011b24:	4b20      	ldr	r3, [pc, #128]	; (8011ba8 <_ZL11MX_RTC_Initv+0xa0>)
 8011b26:	2200      	movs	r2, #0
 8011b28:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8011b2a:	4b1f      	ldr	r3, [pc, #124]	; (8011ba8 <_ZL11MX_RTC_Initv+0xa0>)
 8011b2c:	227f      	movs	r2, #127	; 0x7f
 8011b2e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8011b30:	4b1d      	ldr	r3, [pc, #116]	; (8011ba8 <_ZL11MX_RTC_Initv+0xa0>)
 8011b32:	22ff      	movs	r2, #255	; 0xff
 8011b34:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8011b36:	4b1c      	ldr	r3, [pc, #112]	; (8011ba8 <_ZL11MX_RTC_Initv+0xa0>)
 8011b38:	2200      	movs	r2, #0
 8011b3a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8011b3c:	4b1a      	ldr	r3, [pc, #104]	; (8011ba8 <_ZL11MX_RTC_Initv+0xa0>)
 8011b3e:	2200      	movs	r2, #0
 8011b40:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8011b42:	4b19      	ldr	r3, [pc, #100]	; (8011ba8 <_ZL11MX_RTC_Initv+0xa0>)
 8011b44:	2200      	movs	r2, #0
 8011b46:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8011b48:	4b17      	ldr	r3, [pc, #92]	; (8011ba8 <_ZL11MX_RTC_Initv+0xa0>)
 8011b4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011b4e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8011b50:	4b15      	ldr	r3, [pc, #84]	; (8011ba8 <_ZL11MX_RTC_Initv+0xa0>)
 8011b52:	2200      	movs	r2, #0
 8011b54:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8011b56:	4814      	ldr	r0, [pc, #80]	; (8011ba8 <_ZL11MX_RTC_Initv+0xa0>)
 8011b58:	f006 fc32 	bl	80183c0 <HAL_RTC_Init>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	bf14      	ite	ne
 8011b62:	2301      	movne	r3, #1
 8011b64:	2300      	moveq	r3, #0
 8011b66:	b2db      	uxtb	r3, r3
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d001      	beq.n	8011b70 <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 8011b6c:	f000 fd4f 	bl	801260e <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8011b70:	2300      	movs	r3, #0
 8011b72:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8011b74:	2300      	movs	r3, #0
 8011b76:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8011b80:	463b      	mov	r3, r7
 8011b82:	4619      	mov	r1, r3
 8011b84:	4808      	ldr	r0, [pc, #32]	; (8011ba8 <_ZL11MX_RTC_Initv+0xa0>)
 8011b86:	f006 fd29 	bl	80185dc <HAL_RTCEx_PrivilegeModeSet>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	bf14      	ite	ne
 8011b90:	2301      	movne	r3, #1
 8011b92:	2300      	moveq	r3, #0
 8011b94:	b2db      	uxtb	r3, r3
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d001      	beq.n	8011b9e <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 8011b9a:	f000 fd38 	bl	801260e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8011b9e:	bf00      	nop
 8011ba0:	3718      	adds	r7, #24
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
 8011ba6:	bf00      	nop
 8011ba8:	200009b0 	.word	0x200009b0
 8011bac:	40002800 	.word	0x40002800

08011bb0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8011bb4:	4b1d      	ldr	r3, [pc, #116]	; (8011c2c <_ZL12MX_SPI1_Initv+0x7c>)
 8011bb6:	4a1e      	ldr	r2, [pc, #120]	; (8011c30 <_ZL12MX_SPI1_Initv+0x80>)
 8011bb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8011bba:	4b1c      	ldr	r3, [pc, #112]	; (8011c2c <_ZL12MX_SPI1_Initv+0x7c>)
 8011bbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011bc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8011bc2:	4b1a      	ldr	r3, [pc, #104]	; (8011c2c <_ZL12MX_SPI1_Initv+0x7c>)
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8011bc8:	4b18      	ldr	r3, [pc, #96]	; (8011c2c <_ZL12MX_SPI1_Initv+0x7c>)
 8011bca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8011bce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011bd0:	4b16      	ldr	r3, [pc, #88]	; (8011c2c <_ZL12MX_SPI1_Initv+0x7c>)
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011bd6:	4b15      	ldr	r3, [pc, #84]	; (8011c2c <_ZL12MX_SPI1_Initv+0x7c>)
 8011bd8:	2200      	movs	r2, #0
 8011bda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8011bdc:	4b13      	ldr	r3, [pc, #76]	; (8011c2c <_ZL12MX_SPI1_Initv+0x7c>)
 8011bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011be2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8011be4:	4b11      	ldr	r3, [pc, #68]	; (8011c2c <_ZL12MX_SPI1_Initv+0x7c>)
 8011be6:	2228      	movs	r2, #40	; 0x28
 8011be8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011bea:	4b10      	ldr	r3, [pc, #64]	; (8011c2c <_ZL12MX_SPI1_Initv+0x7c>)
 8011bec:	2200      	movs	r2, #0
 8011bee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8011bf0:	4b0e      	ldr	r3, [pc, #56]	; (8011c2c <_ZL12MX_SPI1_Initv+0x7c>)
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011bf6:	4b0d      	ldr	r3, [pc, #52]	; (8011c2c <_ZL12MX_SPI1_Initv+0x7c>)
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8011bfc:	4b0b      	ldr	r3, [pc, #44]	; (8011c2c <_ZL12MX_SPI1_Initv+0x7c>)
 8011bfe:	2207      	movs	r2, #7
 8011c00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8011c02:	4b0a      	ldr	r3, [pc, #40]	; (8011c2c <_ZL12MX_SPI1_Initv+0x7c>)
 8011c04:	2200      	movs	r2, #0
 8011c06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011c08:	4b08      	ldr	r3, [pc, #32]	; (8011c2c <_ZL12MX_SPI1_Initv+0x7c>)
 8011c0a:	2208      	movs	r2, #8
 8011c0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8011c0e:	4807      	ldr	r0, [pc, #28]	; (8011c2c <_ZL12MX_SPI1_Initv+0x7c>)
 8011c10:	f006 fd10 	bl	8018634 <HAL_SPI_Init>
 8011c14:	4603      	mov	r3, r0
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	bf14      	ite	ne
 8011c1a:	2301      	movne	r3, #1
 8011c1c:	2300      	moveq	r3, #0
 8011c1e:	b2db      	uxtb	r3, r3
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d001      	beq.n	8011c28 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8011c24:	f000 fcf3 	bl	801260e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8011c28:	bf00      	nop
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	200009d8 	.word	0x200009d8
 8011c30:	40013000 	.word	0x40013000

08011c34 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8011c38:	4b1d      	ldr	r3, [pc, #116]	; (8011cb0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c3a:	4a1e      	ldr	r2, [pc, #120]	; (8011cb4 <_ZL12MX_SPI2_Initv+0x80>)
 8011c3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8011c3e:	4b1c      	ldr	r3, [pc, #112]	; (8011cb0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011c44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8011c46:	4b1a      	ldr	r3, [pc, #104]	; (8011cb0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c48:	2200      	movs	r2, #0
 8011c4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8011c4c:	4b18      	ldr	r3, [pc, #96]	; (8011cb0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8011c52:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011c54:	4b16      	ldr	r3, [pc, #88]	; (8011cb0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c56:	2200      	movs	r2, #0
 8011c58:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011c5a:	4b15      	ldr	r3, [pc, #84]	; (8011cb0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8011c60:	4b13      	ldr	r3, [pc, #76]	; (8011cb0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c66:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8011c68:	4b11      	ldr	r3, [pc, #68]	; (8011cb0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c6a:	2218      	movs	r2, #24
 8011c6c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8011c6e:	4b10      	ldr	r3, [pc, #64]	; (8011cb0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c70:	2280      	movs	r2, #128	; 0x80
 8011c72:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8011c74:	4b0e      	ldr	r3, [pc, #56]	; (8011cb0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c76:	2200      	movs	r2, #0
 8011c78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011c7a:	4b0d      	ldr	r3, [pc, #52]	; (8011cb0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8011c80:	4b0b      	ldr	r3, [pc, #44]	; (8011cb0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c82:	2207      	movs	r2, #7
 8011c84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8011c86:	4b0a      	ldr	r3, [pc, #40]	; (8011cb0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c88:	2200      	movs	r2, #0
 8011c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011c8c:	4b08      	ldr	r3, [pc, #32]	; (8011cb0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c8e:	2208      	movs	r2, #8
 8011c90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8011c92:	4807      	ldr	r0, [pc, #28]	; (8011cb0 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c94:	f006 fcce 	bl	8018634 <HAL_SPI_Init>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	bf14      	ite	ne
 8011c9e:	2301      	movne	r3, #1
 8011ca0:	2300      	moveq	r3, #0
 8011ca2:	b2db      	uxtb	r3, r3
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d001      	beq.n	8011cac <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8011ca8:	f000 fcb1 	bl	801260e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8011cac:	bf00      	nop
 8011cae:	bd80      	pop	{r7, pc}
 8011cb0:	20000a3c 	.word	0x20000a3c
 8011cb4:	40003800 	.word	0x40003800

08011cb8 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8011cbc:	4b1d      	ldr	r3, [pc, #116]	; (8011d34 <_ZL12MX_SPI3_Initv+0x7c>)
 8011cbe:	4a1e      	ldr	r2, [pc, #120]	; (8011d38 <_ZL12MX_SPI3_Initv+0x80>)
 8011cc0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8011cc2:	4b1c      	ldr	r3, [pc, #112]	; (8011d34 <_ZL12MX_SPI3_Initv+0x7c>)
 8011cc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011cc8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8011cca:	4b1a      	ldr	r3, [pc, #104]	; (8011d34 <_ZL12MX_SPI3_Initv+0x7c>)
 8011ccc:	2200      	movs	r2, #0
 8011cce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8011cd0:	4b18      	ldr	r3, [pc, #96]	; (8011d34 <_ZL12MX_SPI3_Initv+0x7c>)
 8011cd2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8011cd6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011cd8:	4b16      	ldr	r3, [pc, #88]	; (8011d34 <_ZL12MX_SPI3_Initv+0x7c>)
 8011cda:	2200      	movs	r2, #0
 8011cdc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011cde:	4b15      	ldr	r3, [pc, #84]	; (8011d34 <_ZL12MX_SPI3_Initv+0x7c>)
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8011ce4:	4b13      	ldr	r3, [pc, #76]	; (8011d34 <_ZL12MX_SPI3_Initv+0x7c>)
 8011ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011cea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8011cec:	4b11      	ldr	r3, [pc, #68]	; (8011d34 <_ZL12MX_SPI3_Initv+0x7c>)
 8011cee:	2218      	movs	r2, #24
 8011cf0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011cf2:	4b10      	ldr	r3, [pc, #64]	; (8011d34 <_ZL12MX_SPI3_Initv+0x7c>)
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8011cf8:	4b0e      	ldr	r3, [pc, #56]	; (8011d34 <_ZL12MX_SPI3_Initv+0x7c>)
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011cfe:	4b0d      	ldr	r3, [pc, #52]	; (8011d34 <_ZL12MX_SPI3_Initv+0x7c>)
 8011d00:	2200      	movs	r2, #0
 8011d02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8011d04:	4b0b      	ldr	r3, [pc, #44]	; (8011d34 <_ZL12MX_SPI3_Initv+0x7c>)
 8011d06:	2207      	movs	r2, #7
 8011d08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8011d0a:	4b0a      	ldr	r3, [pc, #40]	; (8011d34 <_ZL12MX_SPI3_Initv+0x7c>)
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011d10:	4b08      	ldr	r3, [pc, #32]	; (8011d34 <_ZL12MX_SPI3_Initv+0x7c>)
 8011d12:	2208      	movs	r2, #8
 8011d14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8011d16:	4807      	ldr	r0, [pc, #28]	; (8011d34 <_ZL12MX_SPI3_Initv+0x7c>)
 8011d18:	f006 fc8c 	bl	8018634 <HAL_SPI_Init>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	bf14      	ite	ne
 8011d22:	2301      	movne	r3, #1
 8011d24:	2300      	moveq	r3, #0
 8011d26:	b2db      	uxtb	r3, r3
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d001      	beq.n	8011d30 <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 8011d2c:	f000 fc6f 	bl	801260e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8011d30:	bf00      	nop
 8011d32:	bd80      	pop	{r7, pc}
 8011d34:	20000aa0 	.word	0x20000aa0
 8011d38:	40003c00 	.word	0x40003c00

08011d3c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b08c      	sub	sp, #48	; 0x30
 8011d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011d42:	f107 0320 	add.w	r3, r7, #32
 8011d46:	2200      	movs	r2, #0
 8011d48:	601a      	str	r2, [r3, #0]
 8011d4a:	605a      	str	r2, [r3, #4]
 8011d4c:	609a      	str	r2, [r3, #8]
 8011d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011d50:	f107 0314 	add.w	r3, r7, #20
 8011d54:	2200      	movs	r2, #0
 8011d56:	601a      	str	r2, [r3, #0]
 8011d58:	605a      	str	r2, [r3, #4]
 8011d5a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8011d5c:	1d3b      	adds	r3, r7, #4
 8011d5e:	2200      	movs	r2, #0
 8011d60:	601a      	str	r2, [r3, #0]
 8011d62:	605a      	str	r2, [r3, #4]
 8011d64:	609a      	str	r2, [r3, #8]
 8011d66:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8011d68:	4b43      	ldr	r3, [pc, #268]	; (8011e78 <_ZL12MX_TIM1_Initv+0x13c>)
 8011d6a:	4a44      	ldr	r2, [pc, #272]	; (8011e7c <_ZL12MX_TIM1_Initv+0x140>)
 8011d6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 110;
 8011d6e:	4b42      	ldr	r3, [pc, #264]	; (8011e78 <_ZL12MX_TIM1_Initv+0x13c>)
 8011d70:	226e      	movs	r2, #110	; 0x6e
 8011d72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011d74:	4b40      	ldr	r3, [pc, #256]	; (8011e78 <_ZL12MX_TIM1_Initv+0x13c>)
 8011d76:	2200      	movs	r2, #0
 8011d78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8011d7a:	4b3f      	ldr	r3, [pc, #252]	; (8011e78 <_ZL12MX_TIM1_Initv+0x13c>)
 8011d7c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011d80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011d82:	4b3d      	ldr	r3, [pc, #244]	; (8011e78 <_ZL12MX_TIM1_Initv+0x13c>)
 8011d84:	2200      	movs	r2, #0
 8011d86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8011d88:	4b3b      	ldr	r3, [pc, #236]	; (8011e78 <_ZL12MX_TIM1_Initv+0x13c>)
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8011d8e:	4b3a      	ldr	r3, [pc, #232]	; (8011e78 <_ZL12MX_TIM1_Initv+0x13c>)
 8011d90:	2280      	movs	r2, #128	; 0x80
 8011d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8011d94:	4838      	ldr	r0, [pc, #224]	; (8011e78 <_ZL12MX_TIM1_Initv+0x13c>)
 8011d96:	f007 fb5d 	bl	8019454 <HAL_TIM_Base_Init>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	bf14      	ite	ne
 8011da0:	2301      	movne	r3, #1
 8011da2:	2300      	moveq	r3, #0
 8011da4:	b2db      	uxtb	r3, r3
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d001      	beq.n	8011dae <_ZL12MX_TIM1_Initv+0x72>
  {
    Error_Handler();
 8011daa:	f000 fc30 	bl	801260e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011db2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8011db4:	f107 0320 	add.w	r3, r7, #32
 8011db8:	4619      	mov	r1, r3
 8011dba:	482f      	ldr	r0, [pc, #188]	; (8011e78 <_ZL12MX_TIM1_Initv+0x13c>)
 8011dbc:	f008 fb88 	bl	801a4d0 <HAL_TIM_ConfigClockSource>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	bf14      	ite	ne
 8011dc6:	2301      	movne	r3, #1
 8011dc8:	2300      	moveq	r3, #0
 8011dca:	b2db      	uxtb	r3, r3
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d001      	beq.n	8011dd4 <_ZL12MX_TIM1_Initv+0x98>
  {
    Error_Handler();
 8011dd0:	f000 fc1d 	bl	801260e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8011dd4:	4828      	ldr	r0, [pc, #160]	; (8011e78 <_ZL12MX_TIM1_Initv+0x13c>)
 8011dd6:	f007 fdcb 	bl	8019970 <HAL_TIM_IC_Init>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	bf14      	ite	ne
 8011de0:	2301      	movne	r3, #1
 8011de2:	2300      	moveq	r3, #0
 8011de4:	b2db      	uxtb	r3, r3
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d001      	beq.n	8011dee <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 8011dea:	f000 fc10 	bl	801260e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011dee:	2300      	movs	r3, #0
 8011df0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8011df2:	2300      	movs	r3, #0
 8011df4:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011df6:	2300      	movs	r3, #0
 8011df8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8011dfa:	f107 0314 	add.w	r3, r7, #20
 8011dfe:	4619      	mov	r1, r3
 8011e00:	481d      	ldr	r0, [pc, #116]	; (8011e78 <_ZL12MX_TIM1_Initv+0x13c>)
 8011e02:	f009 f9e7 	bl	801b1d4 <HAL_TIMEx_MasterConfigSynchronization>
 8011e06:	4603      	mov	r3, r0
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	bf14      	ite	ne
 8011e0c:	2301      	movne	r3, #1
 8011e0e:	2300      	moveq	r3, #0
 8011e10:	b2db      	uxtb	r3, r3
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d001      	beq.n	8011e1a <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 8011e16:	f000 fbfa 	bl	801260e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8011e1e:	2301      	movs	r3, #1
 8011e20:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8011e22:	2300      	movs	r3, #0
 8011e24:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8011e26:	2300      	movs	r3, #0
 8011e28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8011e2a:	1d3b      	adds	r3, r7, #4
 8011e2c:	2208      	movs	r2, #8
 8011e2e:	4619      	mov	r1, r3
 8011e30:	4811      	ldr	r0, [pc, #68]	; (8011e78 <_ZL12MX_TIM1_Initv+0x13c>)
 8011e32:	f008 f99c 	bl	801a16e <HAL_TIM_IC_ConfigChannel>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	bf14      	ite	ne
 8011e3c:	2301      	movne	r3, #1
 8011e3e:	2300      	moveq	r3, #0
 8011e40:	b2db      	uxtb	r3, r3
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d001      	beq.n	8011e4a <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 8011e46:	f000 fbe2 	bl	801260e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8011e4a:	2302      	movs	r3, #2
 8011e4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8011e4e:	1d3b      	adds	r3, r7, #4
 8011e50:	220c      	movs	r2, #12
 8011e52:	4619      	mov	r1, r3
 8011e54:	4808      	ldr	r0, [pc, #32]	; (8011e78 <_ZL12MX_TIM1_Initv+0x13c>)
 8011e56:	f008 f98a 	bl	801a16e <HAL_TIM_IC_ConfigChannel>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	bf14      	ite	ne
 8011e60:	2301      	movne	r3, #1
 8011e62:	2300      	moveq	r3, #0
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d001      	beq.n	8011e6e <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 8011e6a:	f000 fbd0 	bl	801260e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8011e6e:	bf00      	nop
 8011e70:	3730      	adds	r7, #48	; 0x30
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}
 8011e76:	bf00      	nop
 8011e78:	20000b04 	.word	0x20000b04
 8011e7c:	40012c00 	.word	0x40012c00

08011e80 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b08c      	sub	sp, #48	; 0x30
 8011e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8011e86:	f107 030c 	add.w	r3, r7, #12
 8011e8a:	2224      	movs	r2, #36	; 0x24
 8011e8c:	2100      	movs	r1, #0
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f010 fa63 	bl	802235a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011e94:	463b      	mov	r3, r7
 8011e96:	2200      	movs	r2, #0
 8011e98:	601a      	str	r2, [r3, #0]
 8011e9a:	605a      	str	r2, [r3, #4]
 8011e9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8011e9e:	4b26      	ldr	r3, [pc, #152]	; (8011f38 <_ZL12MX_TIM3_Initv+0xb8>)
 8011ea0:	4a26      	ldr	r2, [pc, #152]	; (8011f3c <_ZL12MX_TIM3_Initv+0xbc>)
 8011ea2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8011ea4:	4b24      	ldr	r3, [pc, #144]	; (8011f38 <_ZL12MX_TIM3_Initv+0xb8>)
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011eaa:	4b23      	ldr	r3, [pc, #140]	; (8011f38 <_ZL12MX_TIM3_Initv+0xb8>)
 8011eac:	2200      	movs	r2, #0
 8011eae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8011eb0:	4b21      	ldr	r3, [pc, #132]	; (8011f38 <_ZL12MX_TIM3_Initv+0xb8>)
 8011eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011eb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011eb8:	4b1f      	ldr	r3, [pc, #124]	; (8011f38 <_ZL12MX_TIM3_Initv+0xb8>)
 8011eba:	2200      	movs	r2, #0
 8011ebc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011ebe:	4b1e      	ldr	r3, [pc, #120]	; (8011f38 <_ZL12MX_TIM3_Initv+0xb8>)
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8011ec4:	2303      	movs	r3, #3
 8011ec6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8011ecc:	2301      	movs	r3, #1
 8011ece:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8011edc:	2301      	movs	r3, #1
 8011ede:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8011ee8:	f107 030c 	add.w	r3, r7, #12
 8011eec:	4619      	mov	r1, r3
 8011eee:	4812      	ldr	r0, [pc, #72]	; (8011f38 <_ZL12MX_TIM3_Initv+0xb8>)
 8011ef0:	f007 feea 	bl	8019cc8 <HAL_TIM_Encoder_Init>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	bf14      	ite	ne
 8011efa:	2301      	movne	r3, #1
 8011efc:	2300      	moveq	r3, #0
 8011efe:	b2db      	uxtb	r3, r3
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d001      	beq.n	8011f08 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8011f04:	f000 fb83 	bl	801260e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8011f10:	463b      	mov	r3, r7
 8011f12:	4619      	mov	r1, r3
 8011f14:	4808      	ldr	r0, [pc, #32]	; (8011f38 <_ZL12MX_TIM3_Initv+0xb8>)
 8011f16:	f009 f95d 	bl	801b1d4 <HAL_TIMEx_MasterConfigSynchronization>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	bf14      	ite	ne
 8011f20:	2301      	movne	r3, #1
 8011f22:	2300      	moveq	r3, #0
 8011f24:	b2db      	uxtb	r3, r3
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d001      	beq.n	8011f2e <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8011f2a:	f000 fb70 	bl	801260e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8011f2e:	bf00      	nop
 8011f30:	3730      	adds	r7, #48	; 0x30
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}
 8011f36:	bf00      	nop
 8011f38:	20000b50 	.word	0x20000b50
 8011f3c:	40000400 	.word	0x40000400

08011f40 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b08e      	sub	sp, #56	; 0x38
 8011f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	601a      	str	r2, [r3, #0]
 8011f4e:	605a      	str	r2, [r3, #4]
 8011f50:	609a      	str	r2, [r3, #8]
 8011f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011f54:	f107 031c 	add.w	r3, r7, #28
 8011f58:	2200      	movs	r2, #0
 8011f5a:	601a      	str	r2, [r3, #0]
 8011f5c:	605a      	str	r2, [r3, #4]
 8011f5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011f60:	463b      	mov	r3, r7
 8011f62:	2200      	movs	r2, #0
 8011f64:	601a      	str	r2, [r3, #0]
 8011f66:	605a      	str	r2, [r3, #4]
 8011f68:	609a      	str	r2, [r3, #8]
 8011f6a:	60da      	str	r2, [r3, #12]
 8011f6c:	611a      	str	r2, [r3, #16]
 8011f6e:	615a      	str	r2, [r3, #20]
 8011f70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8011f72:	4b41      	ldr	r3, [pc, #260]	; (8012078 <_ZL12MX_TIM5_Initv+0x138>)
 8011f74:	4a41      	ldr	r2, [pc, #260]	; (801207c <_ZL12MX_TIM5_Initv+0x13c>)
 8011f76:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8011f78:	4b3f      	ldr	r3, [pc, #252]	; (8012078 <_ZL12MX_TIM5_Initv+0x138>)
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8011f7e:	4b3e      	ldr	r3, [pc, #248]	; (8012078 <_ZL12MX_TIM5_Initv+0x138>)
 8011f80:	2220      	movs	r2, #32
 8011f82:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1834;
 8011f84:	4b3c      	ldr	r3, [pc, #240]	; (8012078 <_ZL12MX_TIM5_Initv+0x138>)
 8011f86:	f240 722a 	movw	r2, #1834	; 0x72a
 8011f8a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011f8c:	4b3a      	ldr	r3, [pc, #232]	; (8012078 <_ZL12MX_TIM5_Initv+0x138>)
 8011f8e:	2200      	movs	r2, #0
 8011f90:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8011f92:	4b39      	ldr	r3, [pc, #228]	; (8012078 <_ZL12MX_TIM5_Initv+0x138>)
 8011f94:	2280      	movs	r2, #128	; 0x80
 8011f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8011f98:	4837      	ldr	r0, [pc, #220]	; (8012078 <_ZL12MX_TIM5_Initv+0x138>)
 8011f9a:	f007 fa5b 	bl	8019454 <HAL_TIM_Base_Init>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	bf14      	ite	ne
 8011fa4:	2301      	movne	r3, #1
 8011fa6:	2300      	moveq	r3, #0
 8011fa8:	b2db      	uxtb	r3, r3
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d001      	beq.n	8011fb2 <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 8011fae:	f000 fb2e 	bl	801260e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8011fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	482e      	ldr	r0, [pc, #184]	; (8012078 <_ZL12MX_TIM5_Initv+0x138>)
 8011fc0:	f008 fa86 	bl	801a4d0 <HAL_TIM_ConfigClockSource>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	bf14      	ite	ne
 8011fca:	2301      	movne	r3, #1
 8011fcc:	2300      	moveq	r3, #0
 8011fce:	b2db      	uxtb	r3, r3
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d001      	beq.n	8011fd8 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 8011fd4:	f000 fb1b 	bl	801260e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8011fd8:	4827      	ldr	r0, [pc, #156]	; (8012078 <_ZL12MX_TIM5_Initv+0x138>)
 8011fda:	f007 fb6b 	bl	80196b4 <HAL_TIM_PWM_Init>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	bf14      	ite	ne
 8011fe4:	2301      	movne	r3, #1
 8011fe6:	2300      	moveq	r3, #0
 8011fe8:	b2db      	uxtb	r3, r3
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d001      	beq.n	8011ff2 <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 8011fee:	f000 fb0e 	bl	801260e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8011ffa:	f107 031c 	add.w	r3, r7, #28
 8011ffe:	4619      	mov	r1, r3
 8012000:	481d      	ldr	r0, [pc, #116]	; (8012078 <_ZL12MX_TIM5_Initv+0x138>)
 8012002:	f009 f8e7 	bl	801b1d4 <HAL_TIMEx_MasterConfigSynchronization>
 8012006:	4603      	mov	r3, r0
 8012008:	2b00      	cmp	r3, #0
 801200a:	bf14      	ite	ne
 801200c:	2301      	movne	r3, #1
 801200e:	2300      	moveq	r3, #0
 8012010:	b2db      	uxtb	r3, r3
 8012012:	2b00      	cmp	r3, #0
 8012014:	d001      	beq.n	801201a <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8012016:	f000 fafa 	bl	801260e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801201a:	2360      	movs	r3, #96	; 0x60
 801201c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 801201e:	2300      	movs	r3, #0
 8012020:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012022:	2300      	movs	r3, #0
 8012024:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012026:	2300      	movs	r3, #0
 8012028:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801202a:	463b      	mov	r3, r7
 801202c:	2200      	movs	r2, #0
 801202e:	4619      	mov	r1, r3
 8012030:	4811      	ldr	r0, [pc, #68]	; (8012078 <_ZL12MX_TIM5_Initv+0x138>)
 8012032:	f008 f939 	bl	801a2a8 <HAL_TIM_PWM_ConfigChannel>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	bf14      	ite	ne
 801203c:	2301      	movne	r3, #1
 801203e:	2300      	moveq	r3, #0
 8012040:	b2db      	uxtb	r3, r3
 8012042:	2b00      	cmp	r3, #0
 8012044:	d001      	beq.n	801204a <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 8012046:	f000 fae2 	bl	801260e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 801204a:	463b      	mov	r3, r7
 801204c:	220c      	movs	r2, #12
 801204e:	4619      	mov	r1, r3
 8012050:	4809      	ldr	r0, [pc, #36]	; (8012078 <_ZL12MX_TIM5_Initv+0x138>)
 8012052:	f008 f929 	bl	801a2a8 <HAL_TIM_PWM_ConfigChannel>
 8012056:	4603      	mov	r3, r0
 8012058:	2b00      	cmp	r3, #0
 801205a:	bf14      	ite	ne
 801205c:	2301      	movne	r3, #1
 801205e:	2300      	moveq	r3, #0
 8012060:	b2db      	uxtb	r3, r3
 8012062:	2b00      	cmp	r3, #0
 8012064:	d001      	beq.n	801206a <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 8012066:	f000 fad2 	bl	801260e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 801206a:	4803      	ldr	r0, [pc, #12]	; (8012078 <_ZL12MX_TIM5_Initv+0x138>)
 801206c:	f000 ff2c 	bl	8012ec8 <HAL_TIM_MspPostInit>

}
 8012070:	bf00      	nop
 8012072:	3738      	adds	r7, #56	; 0x38
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}
 8012078:	20000b9c 	.word	0x20000b9c
 801207c:	40000c00 	.word	0x40000c00

08012080 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b084      	sub	sp, #16
 8012084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012086:	1d3b      	adds	r3, r7, #4
 8012088:	2200      	movs	r2, #0
 801208a:	601a      	str	r2, [r3, #0]
 801208c:	605a      	str	r2, [r3, #4]
 801208e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8012090:	4b19      	ldr	r3, [pc, #100]	; (80120f8 <_ZL12MX_TIM6_Initv+0x78>)
 8012092:	4a1a      	ldr	r2, [pc, #104]	; (80120fc <_ZL12MX_TIM6_Initv+0x7c>)
 8012094:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 110;
 8012096:	4b18      	ldr	r3, [pc, #96]	; (80120f8 <_ZL12MX_TIM6_Initv+0x78>)
 8012098:	226e      	movs	r2, #110	; 0x6e
 801209a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801209c:	4b16      	ldr	r3, [pc, #88]	; (80120f8 <_ZL12MX_TIM6_Initv+0x78>)
 801209e:	2200      	movs	r2, #0
 80120a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80120a2:	4b15      	ldr	r3, [pc, #84]	; (80120f8 <_ZL12MX_TIM6_Initv+0x78>)
 80120a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120a8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80120aa:	4b13      	ldr	r3, [pc, #76]	; (80120f8 <_ZL12MX_TIM6_Initv+0x78>)
 80120ac:	2200      	movs	r2, #0
 80120ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80120b0:	4811      	ldr	r0, [pc, #68]	; (80120f8 <_ZL12MX_TIM6_Initv+0x78>)
 80120b2:	f007 f9cf 	bl	8019454 <HAL_TIM_Base_Init>
 80120b6:	4603      	mov	r3, r0
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	bf14      	ite	ne
 80120bc:	2301      	movne	r3, #1
 80120be:	2300      	moveq	r3, #0
 80120c0:	b2db      	uxtb	r3, r3
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d001      	beq.n	80120ca <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 80120c6:	f000 faa2 	bl	801260e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80120ca:	2300      	movs	r3, #0
 80120cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80120ce:	2300      	movs	r3, #0
 80120d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80120d2:	1d3b      	adds	r3, r7, #4
 80120d4:	4619      	mov	r1, r3
 80120d6:	4808      	ldr	r0, [pc, #32]	; (80120f8 <_ZL12MX_TIM6_Initv+0x78>)
 80120d8:	f009 f87c 	bl	801b1d4 <HAL_TIMEx_MasterConfigSynchronization>
 80120dc:	4603      	mov	r3, r0
 80120de:	2b00      	cmp	r3, #0
 80120e0:	bf14      	ite	ne
 80120e2:	2301      	movne	r3, #1
 80120e4:	2300      	moveq	r3, #0
 80120e6:	b2db      	uxtb	r3, r3
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d001      	beq.n	80120f0 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 80120ec:	f000 fa8f 	bl	801260e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80120f0:	bf00      	nop
 80120f2:	3710      	adds	r7, #16
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}
 80120f8:	20000be8 	.word	0x20000be8
 80120fc:	40001000 	.word	0x40001000

08012100 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b098      	sub	sp, #96	; 0x60
 8012104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012106:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801210a:	2200      	movs	r2, #0
 801210c:	601a      	str	r2, [r3, #0]
 801210e:	605a      	str	r2, [r3, #4]
 8012110:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012112:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012116:	2200      	movs	r2, #0
 8012118:	601a      	str	r2, [r3, #0]
 801211a:	605a      	str	r2, [r3, #4]
 801211c:	609a      	str	r2, [r3, #8]
 801211e:	60da      	str	r2, [r3, #12]
 8012120:	611a      	str	r2, [r3, #16]
 8012122:	615a      	str	r2, [r3, #20]
 8012124:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8012126:	1d3b      	adds	r3, r7, #4
 8012128:	2234      	movs	r2, #52	; 0x34
 801212a:	2100      	movs	r1, #0
 801212c:	4618      	mov	r0, r3
 801212e:	f010 f914 	bl	802235a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8012132:	4b45      	ldr	r3, [pc, #276]	; (8012248 <_ZL12MX_TIM8_Initv+0x148>)
 8012134:	4a45      	ldr	r2, [pc, #276]	; (801224c <_ZL12MX_TIM8_Initv+0x14c>)
 8012136:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 110;
 8012138:	4b43      	ldr	r3, [pc, #268]	; (8012248 <_ZL12MX_TIM8_Initv+0x148>)
 801213a:	226e      	movs	r2, #110	; 0x6e
 801213c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 801213e:	4b42      	ldr	r3, [pc, #264]	; (8012248 <_ZL12MX_TIM8_Initv+0x148>)
 8012140:	2200      	movs	r2, #0
 8012142:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = PWM_PERIOD;
 8012144:	4b40      	ldr	r3, [pc, #256]	; (8012248 <_ZL12MX_TIM8_Initv+0x148>)
 8012146:	f242 7210 	movw	r2, #10000	; 0x2710
 801214a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801214c:	4b3e      	ldr	r3, [pc, #248]	; (8012248 <_ZL12MX_TIM8_Initv+0x148>)
 801214e:	2200      	movs	r2, #0
 8012150:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8012152:	4b3d      	ldr	r3, [pc, #244]	; (8012248 <_ZL12MX_TIM8_Initv+0x148>)
 8012154:	2200      	movs	r2, #0
 8012156:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012158:	4b3b      	ldr	r3, [pc, #236]	; (8012248 <_ZL12MX_TIM8_Initv+0x148>)
 801215a:	2200      	movs	r2, #0
 801215c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 801215e:	483a      	ldr	r0, [pc, #232]	; (8012248 <_ZL12MX_TIM8_Initv+0x148>)
 8012160:	f007 faa8 	bl	80196b4 <HAL_TIM_PWM_Init>
 8012164:	4603      	mov	r3, r0
 8012166:	2b00      	cmp	r3, #0
 8012168:	bf14      	ite	ne
 801216a:	2301      	movne	r3, #1
 801216c:	2300      	moveq	r3, #0
 801216e:	b2db      	uxtb	r3, r3
 8012170:	2b00      	cmp	r3, #0
 8012172:	d001      	beq.n	8012178 <_ZL12MX_TIM8_Initv+0x78>
  {
    Error_Handler();
 8012174:	f000 fa4b 	bl	801260e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012178:	2300      	movs	r3, #0
 801217a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801217c:	2300      	movs	r3, #0
 801217e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012180:	2300      	movs	r3, #0
 8012182:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8012184:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012188:	4619      	mov	r1, r3
 801218a:	482f      	ldr	r0, [pc, #188]	; (8012248 <_ZL12MX_TIM8_Initv+0x148>)
 801218c:	f009 f822 	bl	801b1d4 <HAL_TIMEx_MasterConfigSynchronization>
 8012190:	4603      	mov	r3, r0
 8012192:	2b00      	cmp	r3, #0
 8012194:	bf14      	ite	ne
 8012196:	2301      	movne	r3, #1
 8012198:	2300      	moveq	r3, #0
 801219a:	b2db      	uxtb	r3, r3
 801219c:	2b00      	cmp	r3, #0
 801219e:	d001      	beq.n	80121a4 <_ZL12MX_TIM8_Initv+0xa4>
  {
    Error_Handler();
 80121a0:	f000 fa35 	bl	801260e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80121a4:	2360      	movs	r3, #96	; 0x60
 80121a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80121a8:	2300      	movs	r3, #0
 80121aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80121ac:	2300      	movs	r3, #0
 80121ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80121b0:	2300      	movs	r3, #0
 80121b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80121b4:	2300      	movs	r3, #0
 80121b6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80121b8:	2300      	movs	r3, #0
 80121ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80121bc:	2300      	movs	r3, #0
 80121be:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80121c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80121c4:	2200      	movs	r2, #0
 80121c6:	4619      	mov	r1, r3
 80121c8:	481f      	ldr	r0, [pc, #124]	; (8012248 <_ZL12MX_TIM8_Initv+0x148>)
 80121ca:	f008 f86d 	bl	801a2a8 <HAL_TIM_PWM_ConfigChannel>
 80121ce:	4603      	mov	r3, r0
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	bf14      	ite	ne
 80121d4:	2301      	movne	r3, #1
 80121d6:	2300      	moveq	r3, #0
 80121d8:	b2db      	uxtb	r3, r3
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d001      	beq.n	80121e2 <_ZL12MX_TIM8_Initv+0xe2>
  {
    Error_Handler();
 80121de:	f000 fa16 	bl	801260e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80121e2:	2300      	movs	r3, #0
 80121e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80121e6:	2300      	movs	r3, #0
 80121e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80121ea:	2300      	movs	r3, #0
 80121ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80121ee:	2300      	movs	r3, #0
 80121f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80121f2:	2300      	movs	r3, #0
 80121f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80121f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80121fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80121fc:	2300      	movs	r3, #0
 80121fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8012200:	2300      	movs	r3, #0
 8012202:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8012204:	2300      	movs	r3, #0
 8012206:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8012208:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801220c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 801220e:	2300      	movs	r3, #0
 8012210:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8012212:	2300      	movs	r3, #0
 8012214:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8012216:	2300      	movs	r3, #0
 8012218:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 801221a:	1d3b      	adds	r3, r7, #4
 801221c:	4619      	mov	r1, r3
 801221e:	480a      	ldr	r0, [pc, #40]	; (8012248 <_ZL12MX_TIM8_Initv+0x148>)
 8012220:	f009 f860 	bl	801b2e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8012224:	4603      	mov	r3, r0
 8012226:	2b00      	cmp	r3, #0
 8012228:	bf14      	ite	ne
 801222a:	2301      	movne	r3, #1
 801222c:	2300      	moveq	r3, #0
 801222e:	b2db      	uxtb	r3, r3
 8012230:	2b00      	cmp	r3, #0
 8012232:	d001      	beq.n	8012238 <_ZL12MX_TIM8_Initv+0x138>
  {
    Error_Handler();
 8012234:	f000 f9eb 	bl	801260e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8012238:	4803      	ldr	r0, [pc, #12]	; (8012248 <_ZL12MX_TIM8_Initv+0x148>)
 801223a:	f000 fe45 	bl	8012ec8 <HAL_TIM_MspPostInit>

}
 801223e:	bf00      	nop
 8012240:	3760      	adds	r7, #96	; 0x60
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
 8012246:	bf00      	nop
 8012248:	20000c34 	.word	0x20000c34
 801224c:	40013400 	.word	0x40013400

08012250 <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b086      	sub	sp, #24
 8012254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012256:	463b      	mov	r3, r7
 8012258:	2200      	movs	r2, #0
 801225a:	601a      	str	r2, [r3, #0]
 801225c:	605a      	str	r2, [r3, #4]
 801225e:	609a      	str	r2, [r3, #8]
 8012260:	60da      	str	r2, [r3, #12]
 8012262:	611a      	str	r2, [r3, #16]
 8012264:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8012266:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801226a:	f7ff f8a5 	bl	80113b8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 801226e:	2002      	movs	r0, #2
 8012270:	f7ff f88a 	bl	8011388 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8012274:	2001      	movs	r0, #1
 8012276:	f7ff f887 	bl	8011388 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 801227a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801227e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8012280:	2303      	movs	r3, #3
 8012282:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8012284:	2300      	movs	r3, #0
 8012286:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012288:	463b      	mov	r3, r7
 801228a:	4619      	mov	r1, r3
 801228c:	4809      	ldr	r0, [pc, #36]	; (80122b4 <_ZL13MX_UCPD1_Initv+0x64>)
 801228e:	f00b fb5c 	bl	801d94a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8012292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012296:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8012298:	2303      	movs	r3, #3
 801229a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 801229c:	2300      	movs	r3, #0
 801229e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80122a0:	463b      	mov	r3, r7
 80122a2:	4619      	mov	r1, r3
 80122a4:	4804      	ldr	r0, [pc, #16]	; (80122b8 <_ZL13MX_UCPD1_Initv+0x68>)
 80122a6:	f00b fb50 	bl	801d94a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80122aa:	bf00      	nop
 80122ac:	3718      	adds	r7, #24
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
 80122b2:	bf00      	nop
 80122b4:	42020400 	.word	0x42020400
 80122b8:	42020000 	.word	0x42020000

080122bc <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80122c0:	4b13      	ldr	r3, [pc, #76]	; (8012310 <_ZL15MX_USB_PCD_Initv+0x54>)
 80122c2:	4a14      	ldr	r2, [pc, #80]	; (8012314 <_ZL15MX_USB_PCD_Initv+0x58>)
 80122c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80122c6:	4b12      	ldr	r3, [pc, #72]	; (8012310 <_ZL15MX_USB_PCD_Initv+0x54>)
 80122c8:	2208      	movs	r2, #8
 80122ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80122cc:	4b10      	ldr	r3, [pc, #64]	; (8012310 <_ZL15MX_USB_PCD_Initv+0x54>)
 80122ce:	2202      	movs	r2, #2
 80122d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80122d2:	4b0f      	ldr	r3, [pc, #60]	; (8012310 <_ZL15MX_USB_PCD_Initv+0x54>)
 80122d4:	2202      	movs	r2, #2
 80122d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80122d8:	4b0d      	ldr	r3, [pc, #52]	; (8012310 <_ZL15MX_USB_PCD_Initv+0x54>)
 80122da:	2200      	movs	r2, #0
 80122dc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80122de:	4b0c      	ldr	r3, [pc, #48]	; (8012310 <_ZL15MX_USB_PCD_Initv+0x54>)
 80122e0:	2200      	movs	r2, #0
 80122e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80122e4:	4b0a      	ldr	r3, [pc, #40]	; (8012310 <_ZL15MX_USB_PCD_Initv+0x54>)
 80122e6:	2200      	movs	r2, #0
 80122e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80122ea:	4b09      	ldr	r3, [pc, #36]	; (8012310 <_ZL15MX_USB_PCD_Initv+0x54>)
 80122ec:	2200      	movs	r2, #0
 80122ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80122f0:	4807      	ldr	r0, [pc, #28]	; (8012310 <_ZL15MX_USB_PCD_Initv+0x54>)
 80122f2:	f004 f9b1 	bl	8016658 <HAL_PCD_Init>
 80122f6:	4603      	mov	r3, r0
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	bf14      	ite	ne
 80122fc:	2301      	movne	r3, #1
 80122fe:	2300      	moveq	r3, #0
 8012300:	b2db      	uxtb	r3, r3
 8012302:	2b00      	cmp	r3, #0
 8012304:	d001      	beq.n	801230a <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8012306:	f000 f982 	bl	801260e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 801230a:	bf00      	nop
 801230c:	bd80      	pop	{r7, pc}
 801230e:	bf00      	nop
 8012310:	20000c80 	.word	0x20000c80
 8012314:	4000d400 	.word	0x4000d400

08012318 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 801231e:	4b12      	ldr	r3, [pc, #72]	; (8012368 <_ZL11MX_DMA_Initv+0x50>)
 8012320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012322:	4a11      	ldr	r2, [pc, #68]	; (8012368 <_ZL11MX_DMA_Initv+0x50>)
 8012324:	f043 0304 	orr.w	r3, r3, #4
 8012328:	6493      	str	r3, [r2, #72]	; 0x48
 801232a:	4b0f      	ldr	r3, [pc, #60]	; (8012368 <_ZL11MX_DMA_Initv+0x50>)
 801232c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801232e:	f003 0304 	and.w	r3, r3, #4
 8012332:	607b      	str	r3, [r7, #4]
 8012334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8012336:	4b0c      	ldr	r3, [pc, #48]	; (8012368 <_ZL11MX_DMA_Initv+0x50>)
 8012338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801233a:	4a0b      	ldr	r2, [pc, #44]	; (8012368 <_ZL11MX_DMA_Initv+0x50>)
 801233c:	f043 0301 	orr.w	r3, r3, #1
 8012340:	6493      	str	r3, [r2, #72]	; 0x48
 8012342:	4b09      	ldr	r3, [pc, #36]	; (8012368 <_ZL11MX_DMA_Initv+0x50>)
 8012344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012346:	f003 0301 	and.w	r3, r3, #1
 801234a:	603b      	str	r3, [r7, #0]
 801234c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 801234e:	2200      	movs	r2, #0
 8012350:	2105      	movs	r1, #5
 8012352:	201d      	movs	r0, #29
 8012354:	f002 fe24 	bl	8014fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8012358:	201d      	movs	r0, #29
 801235a:	f002 fe3b 	bl	8014fd4 <HAL_NVIC_EnableIRQ>

}
 801235e:	bf00      	nop
 8012360:	3708      	adds	r7, #8
 8012362:	46bd      	mov	sp, r7
 8012364:	bd80      	pop	{r7, pc}
 8012366:	bf00      	nop
 8012368:	40021000 	.word	0x40021000

0801236c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b08c      	sub	sp, #48	; 0x30
 8012370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012372:	f107 031c 	add.w	r3, r7, #28
 8012376:	2200      	movs	r2, #0
 8012378:	601a      	str	r2, [r3, #0]
 801237a:	605a      	str	r2, [r3, #4]
 801237c:	609a      	str	r2, [r3, #8]
 801237e:	60da      	str	r2, [r3, #12]
 8012380:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012382:	4b8b      	ldr	r3, [pc, #556]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 8012384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012386:	4a8a      	ldr	r2, [pc, #552]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 8012388:	f043 0310 	orr.w	r3, r3, #16
 801238c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801238e:	4b88      	ldr	r3, [pc, #544]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 8012390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012392:	f003 0310 	and.w	r3, r3, #16
 8012396:	61bb      	str	r3, [r7, #24]
 8012398:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801239a:	4b85      	ldr	r3, [pc, #532]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 801239c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801239e:	4a84      	ldr	r2, [pc, #528]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 80123a0:	f043 0304 	orr.w	r3, r3, #4
 80123a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80123a6:	4b82      	ldr	r3, [pc, #520]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 80123a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123aa:	f003 0304 	and.w	r3, r3, #4
 80123ae:	617b      	str	r3, [r7, #20]
 80123b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80123b2:	4b7f      	ldr	r3, [pc, #508]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 80123b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123b6:	4a7e      	ldr	r2, [pc, #504]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 80123b8:	f043 0320 	orr.w	r3, r3, #32
 80123bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80123be:	4b7c      	ldr	r3, [pc, #496]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 80123c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123c2:	f003 0320 	and.w	r3, r3, #32
 80123c6:	613b      	str	r3, [r7, #16]
 80123c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80123ca:	4b79      	ldr	r3, [pc, #484]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 80123cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123ce:	4a78      	ldr	r2, [pc, #480]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 80123d0:	f043 0301 	orr.w	r3, r3, #1
 80123d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80123d6:	4b76      	ldr	r3, [pc, #472]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 80123d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123da:	f003 0301 	and.w	r3, r3, #1
 80123de:	60fb      	str	r3, [r7, #12]
 80123e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80123e2:	4b73      	ldr	r3, [pc, #460]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 80123e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123e6:	4a72      	ldr	r2, [pc, #456]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 80123e8:	f043 0302 	orr.w	r3, r3, #2
 80123ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80123ee:	4b70      	ldr	r3, [pc, #448]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 80123f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123f2:	f003 0302 	and.w	r3, r3, #2
 80123f6:	60bb      	str	r3, [r7, #8]
 80123f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80123fa:	4b6d      	ldr	r3, [pc, #436]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 80123fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123fe:	4a6c      	ldr	r2, [pc, #432]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 8012400:	f043 0308 	orr.w	r3, r3, #8
 8012404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012406:	4b6a      	ldr	r3, [pc, #424]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 8012408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801240a:	f003 0308 	and.w	r3, r3, #8
 801240e:	607b      	str	r3, [r7, #4]
 8012410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012412:	4b67      	ldr	r3, [pc, #412]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 8012414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012416:	4a66      	ldr	r2, [pc, #408]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 8012418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801241c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801241e:	4b64      	ldr	r3, [pc, #400]	; (80125b0 <_ZL12MX_GPIO_Initv+0x244>)
 8012420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012426:	603b      	str	r3, [r7, #0]
 8012428:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 801242a:	f004 fa93 	bl	8016954 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DRIVE_ENABLE_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 801242e:	2200      	movs	r2, #0
 8012430:	f24e 0108 	movw	r1, #57352	; 0xe008
 8012434:	485f      	ldr	r0, [pc, #380]	; (80125b4 <_ZL12MX_GPIO_Initv+0x248>)
 8012436:	f003 fb09 	bl	8015a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 801243a:	2200      	movs	r2, #0
 801243c:	21a4      	movs	r1, #164	; 0xa4
 801243e:	485e      	ldr	r0, [pc, #376]	; (80125b8 <_ZL12MX_GPIO_Initv+0x24c>)
 8012440:	f003 fb04 	bl	8015a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8012444:	2200      	movs	r2, #0
 8012446:	f64f 7187 	movw	r1, #65415	; 0xff87
 801244a:	485c      	ldr	r0, [pc, #368]	; (80125bc <_ZL12MX_GPIO_Initv+0x250>)
 801244c:	f003 fafe 	bl	8015a4c <HAL_GPIO_WritePin>
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8012450:	2200      	movs	r2, #0
 8012452:	2180      	movs	r1, #128	; 0x80
 8012454:	485a      	ldr	r0, [pc, #360]	; (80125c0 <_ZL12MX_GPIO_Initv+0x254>)
 8012456:	f003 faf9 	bl	8015a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 801245a:	2200      	movs	r2, #0
 801245c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012460:	4858      	ldr	r0, [pc, #352]	; (80125c4 <_ZL12MX_GPIO_Initv+0x258>)
 8012462:	f003 faf3 	bl	8015a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 8012466:	2200      	movs	r2, #0
 8012468:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 801246c:	4856      	ldr	r0, [pc, #344]	; (80125c8 <_ZL12MX_GPIO_Initv+0x25c>)
 801246e:	f003 faed 	bl	8015a4c <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DRIVE_ENABLE_Pin */
  GPIO_InitStruct.Pin = DRIVE_ENABLE_Pin;
 8012472:	2308      	movs	r3, #8
 8012474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012476:	2301      	movs	r3, #1
 8012478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801247a:	2302      	movs	r3, #2
 801247c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801247e:	2303      	movs	r3, #3
 8012480:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8012482:	f107 031c 	add.w	r3, r7, #28
 8012486:	4619      	mov	r1, r3
 8012488:	484a      	ldr	r0, [pc, #296]	; (80125b4 <_ZL12MX_GPIO_Initv+0x248>)
 801248a:	f003 f95f 	bl	801574c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FB_Pin REMOTE_GAS_Pin REMOTE_STEER_Pin */
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 801248e:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8012492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012494:	2300      	movs	r3, #0
 8012496:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012498:	2300      	movs	r3, #0
 801249a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801249c:	f107 031c 	add.w	r3, r7, #28
 80124a0:	4619      	mov	r1, r3
 80124a2:	4844      	ldr	r0, [pc, #272]	; (80125b4 <_ZL12MX_GPIO_Initv+0x248>)
 80124a4:	f003 f952 	bl	801574c <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_CS_Pin UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 80124a8:	23a4      	movs	r3, #164	; 0xa4
 80124aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80124ac:	2301      	movs	r3, #1
 80124ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124b0:	2300      	movs	r3, #0
 80124b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124b4:	2300      	movs	r3, #0
 80124b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80124b8:	f107 031c 	add.w	r3, r7, #28
 80124bc:	4619      	mov	r1, r3
 80124be:	483e      	ldr	r0, [pc, #248]	; (80125b8 <_ZL12MX_GPIO_Initv+0x24c>)
 80124c0:	f003 f944 	bl	801574c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin MOT_BATT_L_Pin LV_BATT_L_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 80124c4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80124c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80124ca:	2301      	movs	r3, #1
 80124cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124ce:	2300      	movs	r3, #0
 80124d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124d2:	2300      	movs	r3, #0
 80124d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80124d6:	f107 031c 	add.w	r3, r7, #28
 80124da:	4619      	mov	r1, r3
 80124dc:	4835      	ldr	r0, [pc, #212]	; (80125b4 <_ZL12MX_GPIO_Initv+0x248>)
 80124de:	f003 f935 	bl	801574c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin ROTARY1_Pin ROTARY2_Pin ROTARY3_Pin
                           ROTARY4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 80124e2:	f643 6301 	movw	r3, #15873	; 0x3e01
 80124e6:	61fb      	str	r3, [r7, #28]
                          |ROTARY4_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80124e8:	2300      	movs	r3, #0
 80124ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124ec:	2300      	movs	r3, #0
 80124ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80124f0:	f107 031c 	add.w	r3, r7, #28
 80124f4:	4619      	mov	r1, r3
 80124f6:	4835      	ldr	r0, [pc, #212]	; (80125cc <_ZL12MX_GPIO_Initv+0x260>)
 80124f8:	f003 f928 	bl	801574c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80124fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8012502:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8012506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012508:	2300      	movs	r3, #0
 801250a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 801250c:	f107 031c 	add.w	r3, r7, #28
 8012510:	4619      	mov	r1, r3
 8012512:	4829      	ldr	r0, [pc, #164]	; (80125b8 <_ZL12MX_GPIO_Initv+0x24c>)
 8012514:	f003 f91a 	bl	801574c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCF1_CS_Pin ADCF2_CS_Pin ADCF3_CS_Pin ADCF4_CS_Pin
                           ADCR1_CS_Pin ADCR2_CS_Pin ADCR3_CS_Pin ADCR4_CS_Pin
                           INFRA_LE_F_Pin LED_LE_F_Pin INFRA_OE_F_Pin LED_OE_F_Pin */
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8012518:	f64f 7387 	movw	r3, #65415	; 0xff87
 801251c:	61fb      	str	r3, [r7, #28]
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801251e:	2301      	movs	r3, #1
 8012520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012522:	2300      	movs	r3, #0
 8012524:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012526:	2300      	movs	r3, #0
 8012528:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801252a:	f107 031c 	add.w	r3, r7, #28
 801252e:	4619      	mov	r1, r3
 8012530:	4822      	ldr	r0, [pc, #136]	; (80125bc <_ZL12MX_GPIO_Initv+0x250>)
 8012532:	f003 f90b 	bl	801574c <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin SET_BUTTON_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 8012536:	2370      	movs	r3, #112	; 0x70
 8012538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801253a:	2300      	movs	r3, #0
 801253c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801253e:	2300      	movs	r3, #0
 8012540:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012542:	f107 031c 	add.w	r3, r7, #28
 8012546:	4619      	mov	r1, r3
 8012548:	481f      	ldr	r0, [pc, #124]	; (80125c8 <_ZL12MX_GPIO_Initv+0x25c>)
 801254a:	f003 f8ff 	bl	801574c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 801254e:	2380      	movs	r3, #128	; 0x80
 8012550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012552:	2301      	movs	r3, #1
 8012554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012556:	2300      	movs	r3, #0
 8012558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801255a:	2300      	movs	r3, #0
 801255c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 801255e:	f107 031c 	add.w	r3, r7, #28
 8012562:	4619      	mov	r1, r3
 8012564:	4816      	ldr	r0, [pc, #88]	; (80125c0 <_ZL12MX_GPIO_Initv+0x254>)
 8012566:	f003 f8f1 	bl	801574c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 801256a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801256e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012570:	2301      	movs	r3, #1
 8012572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012574:	2300      	movs	r3, #0
 8012576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012578:	2300      	movs	r3, #0
 801257a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 801257c:	f107 031c 	add.w	r3, r7, #28
 8012580:	4619      	mov	r1, r3
 8012582:	4810      	ldr	r0, [pc, #64]	; (80125c4 <_ZL12MX_GPIO_Initv+0x258>)
 8012584:	f003 f8e2 	bl	801574c <HAL_GPIO_Init>

  /*Configure GPIO pins : INFRA_LE_R_Pin LED_LE_R_Pin INFRA_OE_R_Pin LED_OE_R_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 8012588:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 801258c:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801258e:	2301      	movs	r3, #1
 8012590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012592:	2300      	movs	r3, #0
 8012594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012596:	2300      	movs	r3, #0
 8012598:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801259a:	f107 031c 	add.w	r3, r7, #28
 801259e:	4619      	mov	r1, r3
 80125a0:	4809      	ldr	r0, [pc, #36]	; (80125c8 <_ZL12MX_GPIO_Initv+0x25c>)
 80125a2:	f003 f8d3 	bl	801574c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80125a6:	bf00      	nop
 80125a8:	3730      	adds	r7, #48	; 0x30
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	bf00      	nop
 80125b0:	40021000 	.word	0x40021000
 80125b4:	42021400 	.word	0x42021400
 80125b8:	42020400 	.word	0x42020400
 80125bc:	42020c00 	.word	0x42020c00
 80125c0:	42020800 	.word	0x42020800
 80125c4:	42020000 	.word	0x42020000
 80125c8:	42021800 	.word	0x42021800
 80125cc:	42021000 	.word	0x42021000

080125d0 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b082      	sub	sp, #8
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80125d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80125dc:	4803      	ldr	r0, [pc, #12]	; (80125ec <_Z16StartDefaultTaskPv+0x1c>)
 80125de:	f003 fa4d 	bl	8015a7c <HAL_GPIO_TogglePin>
	  vTaskDelay(100);
 80125e2:	2064      	movs	r0, #100	; 0x64
 80125e4:	f00c fa68 	bl	801eab8 <vTaskDelay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80125e8:	e7f6      	b.n	80125d8 <_Z16StartDefaultTaskPv+0x8>
 80125ea:	bf00      	nop
 80125ec:	42020000 	.word	0x42020000

080125f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b082      	sub	sp, #8
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012600:	d101      	bne.n	8012606 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8012602:	f000 ffb3 	bl	801356c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8012606:	bf00      	nop
 8012608:	3708      	adds	r7, #8
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}

0801260e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801260e:	b480      	push	{r7}
 8012610:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8012612:	b672      	cpsid	i
}
 8012614:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8012616:	e7fe      	b.n	8012616 <Error_Handler+0x8>

08012618 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b082      	sub	sp, #8
 801261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801261e:	4b11      	ldr	r3, [pc, #68]	; (8012664 <HAL_MspInit+0x4c>)
 8012620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012622:	4a10      	ldr	r2, [pc, #64]	; (8012664 <HAL_MspInit+0x4c>)
 8012624:	f043 0301 	orr.w	r3, r3, #1
 8012628:	6613      	str	r3, [r2, #96]	; 0x60
 801262a:	4b0e      	ldr	r3, [pc, #56]	; (8012664 <HAL_MspInit+0x4c>)
 801262c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801262e:	f003 0301 	and.w	r3, r3, #1
 8012632:	607b      	str	r3, [r7, #4]
 8012634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012636:	4b0b      	ldr	r3, [pc, #44]	; (8012664 <HAL_MspInit+0x4c>)
 8012638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801263a:	4a0a      	ldr	r2, [pc, #40]	; (8012664 <HAL_MspInit+0x4c>)
 801263c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012640:	6593      	str	r3, [r2, #88]	; 0x58
 8012642:	4b08      	ldr	r3, [pc, #32]	; (8012664 <HAL_MspInit+0x4c>)
 8012644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801264a:	603b      	str	r3, [r7, #0]
 801264c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 801264e:	2200      	movs	r2, #0
 8012650:	2107      	movs	r1, #7
 8012652:	f06f 0001 	mvn.w	r0, #1
 8012656:	f002 fca3 	bl	8014fa0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801265a:	bf00      	nop
 801265c:	3708      	adds	r7, #8
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}
 8012662:	bf00      	nop
 8012664:	40021000 	.word	0x40021000

08012668 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b08c      	sub	sp, #48	; 0x30
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012670:	f107 031c 	add.w	r3, r7, #28
 8012674:	2200      	movs	r2, #0
 8012676:	601a      	str	r2, [r3, #0]
 8012678:	605a      	str	r2, [r3, #4]
 801267a:	609a      	str	r2, [r3, #8]
 801267c:	60da      	str	r2, [r3, #12]
 801267e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	4a4b      	ldr	r2, [pc, #300]	; (80127b4 <HAL_ADC_MspInit+0x14c>)
 8012686:	4293      	cmp	r3, r2
 8012688:	f040 8090 	bne.w	80127ac <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 801268c:	4b4a      	ldr	r3, [pc, #296]	; (80127b8 <HAL_ADC_MspInit+0x150>)
 801268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012690:	4a49      	ldr	r2, [pc, #292]	; (80127b8 <HAL_ADC_MspInit+0x150>)
 8012692:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012696:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012698:	4b47      	ldr	r3, [pc, #284]	; (80127b8 <HAL_ADC_MspInit+0x150>)
 801269a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801269c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80126a0:	61bb      	str	r3, [r7, #24]
 80126a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80126a4:	4b44      	ldr	r3, [pc, #272]	; (80127b8 <HAL_ADC_MspInit+0x150>)
 80126a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126a8:	4a43      	ldr	r2, [pc, #268]	; (80127b8 <HAL_ADC_MspInit+0x150>)
 80126aa:	f043 0304 	orr.w	r3, r3, #4
 80126ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80126b0:	4b41      	ldr	r3, [pc, #260]	; (80127b8 <HAL_ADC_MspInit+0x150>)
 80126b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126b4:	f003 0304 	and.w	r3, r3, #4
 80126b8:	617b      	str	r3, [r7, #20]
 80126ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80126bc:	4b3e      	ldr	r3, [pc, #248]	; (80127b8 <HAL_ADC_MspInit+0x150>)
 80126be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126c0:	4a3d      	ldr	r2, [pc, #244]	; (80127b8 <HAL_ADC_MspInit+0x150>)
 80126c2:	f043 0301 	orr.w	r3, r3, #1
 80126c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80126c8:	4b3b      	ldr	r3, [pc, #236]	; (80127b8 <HAL_ADC_MspInit+0x150>)
 80126ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126cc:	f003 0301 	and.w	r3, r3, #1
 80126d0:	613b      	str	r3, [r7, #16]
 80126d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80126d4:	4b38      	ldr	r3, [pc, #224]	; (80127b8 <HAL_ADC_MspInit+0x150>)
 80126d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126d8:	4a37      	ldr	r2, [pc, #220]	; (80127b8 <HAL_ADC_MspInit+0x150>)
 80126da:	f043 0302 	orr.w	r3, r3, #2
 80126de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80126e0:	4b35      	ldr	r3, [pc, #212]	; (80127b8 <HAL_ADC_MspInit+0x150>)
 80126e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126e4:	f003 0302 	and.w	r3, r3, #2
 80126e8:	60fb      	str	r3, [r7, #12]
 80126ea:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 80126ec:	230f      	movs	r3, #15
 80126ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80126f0:	2303      	movs	r3, #3
 80126f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80126f4:	2300      	movs	r3, #0
 80126f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80126f8:	f107 031c 	add.w	r3, r7, #28
 80126fc:	4619      	mov	r1, r3
 80126fe:	482f      	ldr	r0, [pc, #188]	; (80127bc <HAL_ADC_MspInit+0x154>)
 8012700:	f003 f824 	bl	801574c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 8012704:	239c      	movs	r3, #156	; 0x9c
 8012706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012708:	2303      	movs	r3, #3
 801270a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801270c:	2300      	movs	r3, #0
 801270e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012710:	f107 031c 	add.w	r3, r7, #28
 8012714:	4619      	mov	r1, r3
 8012716:	482a      	ldr	r0, [pc, #168]	; (80127c0 <HAL_ADC_MspInit+0x158>)
 8012718:	f003 f818 	bl	801574c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHBB0_Pin|DISTANCE4_ADC_Pin;
 801271c:	2303      	movs	r3, #3
 801271e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012720:	2303      	movs	r3, #3
 8012722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012724:	2300      	movs	r3, #0
 8012726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012728:	f107 031c 	add.w	r3, r7, #28
 801272c:	4619      	mov	r1, r3
 801272e:	4825      	ldr	r0, [pc, #148]	; (80127c4 <HAL_ADC_MspInit+0x15c>)
 8012730:	f003 f80c 	bl	801574c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8012734:	4b24      	ldr	r3, [pc, #144]	; (80127c8 <HAL_ADC_MspInit+0x160>)
 8012736:	4a25      	ldr	r2, [pc, #148]	; (80127cc <HAL_ADC_MspInit+0x164>)
 8012738:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 801273a:	4b23      	ldr	r3, [pc, #140]	; (80127c8 <HAL_ADC_MspInit+0x160>)
 801273c:	2205      	movs	r2, #5
 801273e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012740:	4b21      	ldr	r3, [pc, #132]	; (80127c8 <HAL_ADC_MspInit+0x160>)
 8012742:	2200      	movs	r2, #0
 8012744:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8012746:	4b20      	ldr	r3, [pc, #128]	; (80127c8 <HAL_ADC_MspInit+0x160>)
 8012748:	2200      	movs	r2, #0
 801274a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 801274c:	4b1e      	ldr	r3, [pc, #120]	; (80127c8 <HAL_ADC_MspInit+0x160>)
 801274e:	2280      	movs	r2, #128	; 0x80
 8012750:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8012752:	4b1d      	ldr	r3, [pc, #116]	; (80127c8 <HAL_ADC_MspInit+0x160>)
 8012754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012758:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801275a:	4b1b      	ldr	r3, [pc, #108]	; (80127c8 <HAL_ADC_MspInit+0x160>)
 801275c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012760:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8012762:	4b19      	ldr	r3, [pc, #100]	; (80127c8 <HAL_ADC_MspInit+0x160>)
 8012764:	2200      	movs	r2, #0
 8012766:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8012768:	4b17      	ldr	r3, [pc, #92]	; (80127c8 <HAL_ADC_MspInit+0x160>)
 801276a:	2200      	movs	r2, #0
 801276c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 801276e:	4816      	ldr	r0, [pc, #88]	; (80127c8 <HAL_ADC_MspInit+0x160>)
 8012770:	f002 fc3e 	bl	8014ff0 <HAL_DMA_Init>
 8012774:	4603      	mov	r3, r0
 8012776:	2b00      	cmp	r3, #0
 8012778:	d001      	beq.n	801277e <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 801277a:	f7ff ff48 	bl	801260e <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 801277e:	2110      	movs	r1, #16
 8012780:	4811      	ldr	r0, [pc, #68]	; (80127c8 <HAL_ADC_MspInit+0x160>)
 8012782:	f002 ff13 	bl	80155ac <HAL_DMA_ConfigChannelAttributes>
 8012786:	4603      	mov	r3, r0
 8012788:	2b00      	cmp	r3, #0
 801278a:	d001      	beq.n	8012790 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 801278c:	f7ff ff3f 	bl	801260e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	4a0d      	ldr	r2, [pc, #52]	; (80127c8 <HAL_ADC_MspInit+0x160>)
 8012794:	651a      	str	r2, [r3, #80]	; 0x50
 8012796:	4a0c      	ldr	r2, [pc, #48]	; (80127c8 <HAL_ADC_MspInit+0x160>)
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 801279c:	2200      	movs	r2, #0
 801279e:	2105      	movs	r1, #5
 80127a0:	2025      	movs	r0, #37	; 0x25
 80127a2:	f002 fbfd 	bl	8014fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80127a6:	2025      	movs	r0, #37	; 0x25
 80127a8:	f002 fc14 	bl	8014fd4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80127ac:	bf00      	nop
 80127ae:	3730      	adds	r7, #48	; 0x30
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}
 80127b4:	42028000 	.word	0x42028000
 80127b8:	40021000 	.word	0x40021000
 80127bc:	42020800 	.word	0x42020800
 80127c0:	42020000 	.word	0x42020000
 80127c4:	42020400 	.word	0x42020400
 80127c8:	20000738 	.word	0x20000738
 80127cc:	40020008 	.word	0x40020008

080127d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b0ae      	sub	sp, #184	; 0xb8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80127d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80127dc:	2200      	movs	r2, #0
 80127de:	601a      	str	r2, [r3, #0]
 80127e0:	605a      	str	r2, [r3, #4]
 80127e2:	609a      	str	r2, [r3, #8]
 80127e4:	60da      	str	r2, [r3, #12]
 80127e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80127e8:	f107 0310 	add.w	r3, r7, #16
 80127ec:	2294      	movs	r2, #148	; 0x94
 80127ee:	2100      	movs	r1, #0
 80127f0:	4618      	mov	r0, r3
 80127f2:	f00f fdb2 	bl	802235a <memset>
  if(hi2c->Instance==I2C1)
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	4a21      	ldr	r2, [pc, #132]	; (8012880 <HAL_I2C_MspInit+0xb0>)
 80127fc:	4293      	cmp	r3, r2
 80127fe:	d13b      	bne.n	8012878 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8012800:	2340      	movs	r3, #64	; 0x40
 8012802:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8012804:	2300      	movs	r3, #0
 8012806:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012808:	f107 0310 	add.w	r3, r7, #16
 801280c:	4618      	mov	r0, r3
 801280e:	f005 f8c1 	bl	8017994 <HAL_RCCEx_PeriphCLKConfig>
 8012812:	4603      	mov	r3, r0
 8012814:	2b00      	cmp	r3, #0
 8012816:	d001      	beq.n	801281c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8012818:	f7ff fef9 	bl	801260e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801281c:	4b19      	ldr	r3, [pc, #100]	; (8012884 <HAL_I2C_MspInit+0xb4>)
 801281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012820:	4a18      	ldr	r2, [pc, #96]	; (8012884 <HAL_I2C_MspInit+0xb4>)
 8012822:	f043 0302 	orr.w	r3, r3, #2
 8012826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012828:	4b16      	ldr	r3, [pc, #88]	; (8012884 <HAL_I2C_MspInit+0xb4>)
 801282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801282c:	f003 0302 	and.w	r3, r3, #2
 8012830:	60fb      	str	r3, [r7, #12]
 8012832:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8012834:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012838:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801283c:	2312      	movs	r3, #18
 801283e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012842:	2300      	movs	r3, #0
 8012844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012848:	2300      	movs	r3, #0
 801284a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801284e:	2304      	movs	r3, #4
 8012850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012854:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012858:	4619      	mov	r1, r3
 801285a:	480b      	ldr	r0, [pc, #44]	; (8012888 <HAL_I2C_MspInit+0xb8>)
 801285c:	f002 ff76 	bl	801574c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8012860:	4b08      	ldr	r3, [pc, #32]	; (8012884 <HAL_I2C_MspInit+0xb4>)
 8012862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012864:	4a07      	ldr	r2, [pc, #28]	; (8012884 <HAL_I2C_MspInit+0xb4>)
 8012866:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801286a:	6593      	str	r3, [r2, #88]	; 0x58
 801286c:	4b05      	ldr	r3, [pc, #20]	; (8012884 <HAL_I2C_MspInit+0xb4>)
 801286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012874:	60bb      	str	r3, [r7, #8]
 8012876:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8012878:	bf00      	nop
 801287a:	37b8      	adds	r7, #184	; 0xb8
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}
 8012880:	40005400 	.word	0x40005400
 8012884:	40021000 	.word	0x40021000
 8012888:	42020400 	.word	0x42020400

0801288c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b0b2      	sub	sp, #200	; 0xc8
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012894:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012898:	2200      	movs	r2, #0
 801289a:	601a      	str	r2, [r3, #0]
 801289c:	605a      	str	r2, [r3, #4]
 801289e:	609a      	str	r2, [r3, #8]
 80128a0:	60da      	str	r2, [r3, #12]
 80128a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80128a4:	f107 0320 	add.w	r3, r7, #32
 80128a8:	2294      	movs	r2, #148	; 0x94
 80128aa:	2100      	movs	r1, #0
 80128ac:	4618      	mov	r0, r3
 80128ae:	f00f fd54 	bl	802235a <memset>
  if(huart->Instance==LPUART1)
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	4a67      	ldr	r2, [pc, #412]	; (8012a54 <HAL_UART_MspInit+0x1c8>)
 80128b8:	4293      	cmp	r3, r2
 80128ba:	d13e      	bne.n	801293a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80128bc:	2320      	movs	r3, #32
 80128be:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80128c0:	2300      	movs	r3, #0
 80128c2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80128c4:	f107 0320 	add.w	r3, r7, #32
 80128c8:	4618      	mov	r0, r3
 80128ca:	f005 f863 	bl	8017994 <HAL_RCCEx_PeriphCLKConfig>
 80128ce:	4603      	mov	r3, r0
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d001      	beq.n	80128d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80128d4:	f7ff fe9b 	bl	801260e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80128d8:	4b5f      	ldr	r3, [pc, #380]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 80128da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80128dc:	4a5e      	ldr	r2, [pc, #376]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 80128de:	f043 0301 	orr.w	r3, r3, #1
 80128e2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80128e4:	4b5c      	ldr	r3, [pc, #368]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 80128e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80128e8:	f003 0301 	and.w	r3, r3, #1
 80128ec:	61fb      	str	r3, [r7, #28]
 80128ee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80128f0:	4b59      	ldr	r3, [pc, #356]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 80128f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80128f4:	4a58      	ldr	r2, [pc, #352]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 80128f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80128fc:	4b56      	ldr	r3, [pc, #344]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 80128fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012904:	61bb      	str	r3, [r7, #24]
 8012906:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8012908:	f004 f824 	bl	8016954 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 801290c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8012910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012914:	2302      	movs	r3, #2
 8012916:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801291a:	2300      	movs	r3, #0
 801291c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012920:	2300      	movs	r3, #0
 8012922:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8012926:	2308      	movs	r3, #8
 8012928:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801292c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012930:	4619      	mov	r1, r3
 8012932:	484a      	ldr	r0, [pc, #296]	; (8012a5c <HAL_UART_MspInit+0x1d0>)
 8012934:	f002 ff0a 	bl	801574c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8012938:	e088      	b.n	8012a4c <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	4a48      	ldr	r2, [pc, #288]	; (8012a60 <HAL_UART_MspInit+0x1d4>)
 8012940:	4293      	cmp	r3, r2
 8012942:	d143      	bne.n	80129cc <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8012944:	2308      	movs	r3, #8
 8012946:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8012948:	2300      	movs	r3, #0
 801294a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801294c:	f107 0320 	add.w	r3, r7, #32
 8012950:	4618      	mov	r0, r3
 8012952:	f005 f81f 	bl	8017994 <HAL_RCCEx_PeriphCLKConfig>
 8012956:	4603      	mov	r3, r0
 8012958:	2b00      	cmp	r3, #0
 801295a:	d001      	beq.n	8012960 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 801295c:	f7ff fe57 	bl	801260e <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8012960:	4b3d      	ldr	r3, [pc, #244]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 8012962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012964:	4a3c      	ldr	r2, [pc, #240]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 8012966:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801296a:	6593      	str	r3, [r2, #88]	; 0x58
 801296c:	4b3a      	ldr	r3, [pc, #232]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 801296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012970:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012974:	617b      	str	r3, [r7, #20]
 8012976:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012978:	4b37      	ldr	r3, [pc, #220]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 801297a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801297c:	4a36      	ldr	r2, [pc, #216]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 801297e:	f043 0301 	orr.w	r3, r3, #1
 8012982:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012984:	4b34      	ldr	r3, [pc, #208]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 8012986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012988:	f003 0301 	and.w	r3, r3, #1
 801298c:	613b      	str	r3, [r7, #16]
 801298e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8012990:	2303      	movs	r3, #3
 8012992:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012996:	2302      	movs	r3, #2
 8012998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801299c:	2300      	movs	r3, #0
 801299e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80129a2:	2300      	movs	r3, #0
 80129a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80129a8:	2308      	movs	r3, #8
 80129aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80129ae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80129b2:	4619      	mov	r1, r3
 80129b4:	482b      	ldr	r0, [pc, #172]	; (8012a64 <HAL_UART_MspInit+0x1d8>)
 80129b6:	f002 fec9 	bl	801574c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80129ba:	2200      	movs	r2, #0
 80129bc:	2105      	movs	r1, #5
 80129be:	2040      	movs	r0, #64	; 0x40
 80129c0:	f002 faee 	bl	8014fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80129c4:	2040      	movs	r0, #64	; 0x40
 80129c6:	f002 fb05 	bl	8014fd4 <HAL_NVIC_EnableIRQ>
}
 80129ca:	e03f      	b.n	8012a4c <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	4a25      	ldr	r2, [pc, #148]	; (8012a68 <HAL_UART_MspInit+0x1dc>)
 80129d2:	4293      	cmp	r3, r2
 80129d4:	d13a      	bne.n	8012a4c <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80129d6:	2302      	movs	r3, #2
 80129d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80129da:	2300      	movs	r3, #0
 80129dc:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80129de:	f107 0320 	add.w	r3, r7, #32
 80129e2:	4618      	mov	r0, r3
 80129e4:	f004 ffd6 	bl	8017994 <HAL_RCCEx_PeriphCLKConfig>
 80129e8:	4603      	mov	r3, r0
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d001      	beq.n	80129f2 <HAL_UART_MspInit+0x166>
      Error_Handler();
 80129ee:	f7ff fe0e 	bl	801260e <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80129f2:	4b19      	ldr	r3, [pc, #100]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 80129f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129f6:	4a18      	ldr	r2, [pc, #96]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 80129f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80129fc:	6593      	str	r3, [r2, #88]	; 0x58
 80129fe:	4b16      	ldr	r3, [pc, #88]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 8012a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a06:	60fb      	str	r3, [r7, #12]
 8012a08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012a0a:	4b13      	ldr	r3, [pc, #76]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 8012a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a0e:	4a12      	ldr	r2, [pc, #72]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 8012a10:	f043 0308 	orr.w	r3, r3, #8
 8012a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012a16:	4b10      	ldr	r3, [pc, #64]	; (8012a58 <HAL_UART_MspInit+0x1cc>)
 8012a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a1a:	f003 0308 	and.w	r3, r3, #8
 8012a1e:	60bb      	str	r3, [r7, #8]
 8012a20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 8012a22:	2360      	movs	r3, #96	; 0x60
 8012a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a28:	2302      	movs	r3, #2
 8012a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012a34:	2300      	movs	r3, #0
 8012a36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8012a3a:	2307      	movs	r3, #7
 8012a3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012a40:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012a44:	4619      	mov	r1, r3
 8012a46:	4809      	ldr	r0, [pc, #36]	; (8012a6c <HAL_UART_MspInit+0x1e0>)
 8012a48:	f002 fe80 	bl	801574c <HAL_GPIO_Init>
}
 8012a4c:	bf00      	nop
 8012a4e:	37c8      	adds	r7, #200	; 0xc8
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}
 8012a54:	40008000 	.word	0x40008000
 8012a58:	40021000 	.word	0x40021000
 8012a5c:	42021800 	.word	0x42021800
 8012a60:	40004c00 	.word	0x40004c00
 8012a64:	42020000 	.word	0x42020000
 8012a68:	40004400 	.word	0x40004400
 8012a6c:	42020c00 	.word	0x42020c00

08012a70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b0a8      	sub	sp, #160	; 0xa0
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012a78:	f107 030c 	add.w	r3, r7, #12
 8012a7c:	2294      	movs	r2, #148	; 0x94
 8012a7e:	2100      	movs	r1, #0
 8012a80:	4618      	mov	r0, r3
 8012a82:	f00f fc6a 	bl	802235a <memset>
  if(hrtc->Instance==RTC)
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	4a16      	ldr	r2, [pc, #88]	; (8012ae4 <HAL_RTC_MspInit+0x74>)
 8012a8c:	4293      	cmp	r3, r2
 8012a8e:	d124      	bne.n	8012ada <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8012a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012a94:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8012a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012a9e:	f107 030c 	add.w	r3, r7, #12
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f004 ff76 	bl	8017994 <HAL_RCCEx_PeriphCLKConfig>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d001      	beq.n	8012ab2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8012aae:	f7ff fdae 	bl	801260e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8012ab2:	4b0d      	ldr	r3, [pc, #52]	; (8012ae8 <HAL_RTC_MspInit+0x78>)
 8012ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ab8:	4a0b      	ldr	r2, [pc, #44]	; (8012ae8 <HAL_RTC_MspInit+0x78>)
 8012aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8012ac2:	4b09      	ldr	r3, [pc, #36]	; (8012ae8 <HAL_RTC_MspInit+0x78>)
 8012ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ac6:	4a08      	ldr	r2, [pc, #32]	; (8012ae8 <HAL_RTC_MspInit+0x78>)
 8012ac8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012acc:	6593      	str	r3, [r2, #88]	; 0x58
 8012ace:	4b06      	ldr	r3, [pc, #24]	; (8012ae8 <HAL_RTC_MspInit+0x78>)
 8012ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012ad6:	60bb      	str	r3, [r7, #8]
 8012ad8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8012ada:	bf00      	nop
 8012adc:	37a0      	adds	r7, #160	; 0xa0
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}
 8012ae2:	bf00      	nop
 8012ae4:	40002800 	.word	0x40002800
 8012ae8:	40021000 	.word	0x40021000

08012aec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b090      	sub	sp, #64	; 0x40
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012af8:	2200      	movs	r2, #0
 8012afa:	601a      	str	r2, [r3, #0]
 8012afc:	605a      	str	r2, [r3, #4]
 8012afe:	609a      	str	r2, [r3, #8]
 8012b00:	60da      	str	r2, [r3, #12]
 8012b02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	4a62      	ldr	r2, [pc, #392]	; (8012c94 <HAL_SPI_MspInit+0x1a8>)
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d145      	bne.n	8012b9a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8012b0e:	4b62      	ldr	r3, [pc, #392]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012b12:	4a61      	ldr	r2, [pc, #388]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012b18:	6613      	str	r3, [r2, #96]	; 0x60
 8012b1a:	4b5f      	ldr	r3, [pc, #380]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8012b24:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012b26:	4b5c      	ldr	r3, [pc, #368]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b2a:	4a5b      	ldr	r2, [pc, #364]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012b2c:	f043 0301 	orr.w	r3, r3, #1
 8012b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012b32:	4b59      	ldr	r3, [pc, #356]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b36:	f003 0301 	and.w	r3, r3, #1
 8012b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8012b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8012b3e:	4b56      	ldr	r3, [pc, #344]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b42:	4a55      	ldr	r2, [pc, #340]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012b44:	f043 0310 	orr.w	r3, r3, #16
 8012b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012b4a:	4b53      	ldr	r3, [pc, #332]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b4e:	f003 0310 	and.w	r3, r3, #16
 8012b52:	623b      	str	r3, [r7, #32]
 8012b54:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 8012b56:	2360      	movs	r3, #96	; 0x60
 8012b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012b5a:	2302      	movs	r3, #2
 8012b5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b5e:	2300      	movs	r3, #0
 8012b60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012b62:	2300      	movs	r3, #0
 8012b64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012b66:	2305      	movs	r3, #5
 8012b68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012b6e:	4619      	mov	r1, r3
 8012b70:	484a      	ldr	r0, [pc, #296]	; (8012c9c <HAL_SPI_MspInit+0x1b0>)
 8012b72:	f002 fdeb 	bl	801574c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 8012b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012b7c:	2302      	movs	r3, #2
 8012b7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b80:	2300      	movs	r3, #0
 8012b82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012b84:	2300      	movs	r3, #0
 8012b86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012b88:	2305      	movs	r3, #5
 8012b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 8012b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012b90:	4619      	mov	r1, r3
 8012b92:	4843      	ldr	r0, [pc, #268]	; (8012ca0 <HAL_SPI_MspInit+0x1b4>)
 8012b94:	f002 fdda 	bl	801574c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8012b98:	e078      	b.n	8012c8c <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	4a41      	ldr	r2, [pc, #260]	; (8012ca4 <HAL_SPI_MspInit+0x1b8>)
 8012ba0:	4293      	cmp	r3, r2
 8012ba2:	d145      	bne.n	8012c30 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8012ba4:	4b3c      	ldr	r3, [pc, #240]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ba8:	4a3b      	ldr	r2, [pc, #236]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012bae:	6593      	str	r3, [r2, #88]	; 0x58
 8012bb0:	4b39      	ldr	r3, [pc, #228]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012bb8:	61fb      	str	r3, [r7, #28]
 8012bba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012bbc:	4b36      	ldr	r3, [pc, #216]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012bc0:	4a35      	ldr	r2, [pc, #212]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012bc2:	f043 0302 	orr.w	r3, r3, #2
 8012bc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012bc8:	4b33      	ldr	r3, [pc, #204]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012bcc:	f003 0302 	and.w	r3, r3, #2
 8012bd0:	61bb      	str	r3, [r7, #24]
 8012bd2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012bd4:	4b30      	ldr	r3, [pc, #192]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012bd8:	4a2f      	ldr	r2, [pc, #188]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012bda:	f043 0308 	orr.w	r3, r3, #8
 8012bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012be0:	4b2d      	ldr	r3, [pc, #180]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012be4:	f003 0308 	and.w	r3, r3, #8
 8012be8:	617b      	str	r3, [r7, #20]
 8012bea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8012bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012bf2:	2302      	movs	r3, #2
 8012bf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8012bfe:	2305      	movs	r3, #5
 8012c00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012c06:	4619      	mov	r1, r3
 8012c08:	4827      	ldr	r0, [pc, #156]	; (8012ca8 <HAL_SPI_MspInit+0x1bc>)
 8012c0a:	f002 fd9f 	bl	801574c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8012c0e:	2318      	movs	r3, #24
 8012c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012c12:	2302      	movs	r3, #2
 8012c14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c16:	2300      	movs	r3, #0
 8012c18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8012c1e:	2305      	movs	r3, #5
 8012c20:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012c26:	4619      	mov	r1, r3
 8012c28:	4820      	ldr	r0, [pc, #128]	; (8012cac <HAL_SPI_MspInit+0x1c0>)
 8012c2a:	f002 fd8f 	bl	801574c <HAL_GPIO_Init>
}
 8012c2e:	e02d      	b.n	8012c8c <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	4a1e      	ldr	r2, [pc, #120]	; (8012cb0 <HAL_SPI_MspInit+0x1c4>)
 8012c36:	4293      	cmp	r3, r2
 8012c38:	d128      	bne.n	8012c8c <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8012c3a:	4b17      	ldr	r3, [pc, #92]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c3e:	4a16      	ldr	r2, [pc, #88]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012c44:	6593      	str	r3, [r2, #88]	; 0x58
 8012c46:	4b14      	ldr	r3, [pc, #80]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012c4e:	613b      	str	r3, [r7, #16]
 8012c50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012c52:	4b11      	ldr	r3, [pc, #68]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c56:	4a10      	ldr	r2, [pc, #64]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012c58:	f043 0304 	orr.w	r3, r3, #4
 8012c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012c5e:	4b0e      	ldr	r3, [pc, #56]	; (8012c98 <HAL_SPI_MspInit+0x1ac>)
 8012c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c62:	f003 0304 	and.w	r3, r3, #4
 8012c66:	60fb      	str	r3, [r7, #12]
 8012c68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8012c6a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8012c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012c70:	2302      	movs	r3, #2
 8012c72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c74:	2300      	movs	r3, #0
 8012c76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8012c7c:	2306      	movs	r3, #6
 8012c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012c84:	4619      	mov	r1, r3
 8012c86:	480b      	ldr	r0, [pc, #44]	; (8012cb4 <HAL_SPI_MspInit+0x1c8>)
 8012c88:	f002 fd60 	bl	801574c <HAL_GPIO_Init>
}
 8012c8c:	bf00      	nop
 8012c8e:	3740      	adds	r7, #64	; 0x40
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}
 8012c94:	40013000 	.word	0x40013000
 8012c98:	40021000 	.word	0x40021000
 8012c9c:	42020000 	.word	0x42020000
 8012ca0:	42021000 	.word	0x42021000
 8012ca4:	40003800 	.word	0x40003800
 8012ca8:	42020400 	.word	0x42020400
 8012cac:	42020c00 	.word	0x42020c00
 8012cb0:	40003c00 	.word	0x40003c00
 8012cb4:	42020800 	.word	0x42020800

08012cb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b08c      	sub	sp, #48	; 0x30
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012cc0:	f107 031c 	add.w	r3, r7, #28
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	601a      	str	r2, [r3, #0]
 8012cc8:	605a      	str	r2, [r3, #4]
 8012cca:	609a      	str	r2, [r3, #8]
 8012ccc:	60da      	str	r2, [r3, #12]
 8012cce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	4a40      	ldr	r2, [pc, #256]	; (8012dd8 <HAL_TIM_Base_MspInit+0x120>)
 8012cd6:	4293      	cmp	r3, r2
 8012cd8:	d14e      	bne.n	8012d78 <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8012cda:	4b40      	ldr	r3, [pc, #256]	; (8012ddc <HAL_TIM_Base_MspInit+0x124>)
 8012cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012cde:	4a3f      	ldr	r2, [pc, #252]	; (8012ddc <HAL_TIM_Base_MspInit+0x124>)
 8012ce0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012ce4:	6613      	str	r3, [r2, #96]	; 0x60
 8012ce6:	4b3d      	ldr	r3, [pc, #244]	; (8012ddc <HAL_TIM_Base_MspInit+0x124>)
 8012ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012cee:	61bb      	str	r3, [r7, #24]
 8012cf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8012cf2:	4b3a      	ldr	r3, [pc, #232]	; (8012ddc <HAL_TIM_Base_MspInit+0x124>)
 8012cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012cf6:	4a39      	ldr	r2, [pc, #228]	; (8012ddc <HAL_TIM_Base_MspInit+0x124>)
 8012cf8:	f043 0310 	orr.w	r3, r3, #16
 8012cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012cfe:	4b37      	ldr	r3, [pc, #220]	; (8012ddc <HAL_TIM_Base_MspInit+0x124>)
 8012d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d02:	f003 0310 	and.w	r3, r3, #16
 8012d06:	617b      	str	r3, [r7, #20]
 8012d08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012d0a:	4b34      	ldr	r3, [pc, #208]	; (8012ddc <HAL_TIM_Base_MspInit+0x124>)
 8012d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d0e:	4a33      	ldr	r2, [pc, #204]	; (8012ddc <HAL_TIM_Base_MspInit+0x124>)
 8012d10:	f043 0301 	orr.w	r3, r3, #1
 8012d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012d16:	4b31      	ldr	r3, [pc, #196]	; (8012ddc <HAL_TIM_Base_MspInit+0x124>)
 8012d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d1a:	f003 0301 	and.w	r3, r3, #1
 8012d1e:	613b      	str	r3, [r7, #16]
 8012d20:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_IN_Pin;
 8012d22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d28:	2302      	movs	r3, #2
 8012d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d30:	2300      	movs	r3, #0
 8012d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8012d34:	2301      	movs	r3, #1
 8012d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_STEERING_IN_GPIO_Port, &GPIO_InitStruct);
 8012d38:	f107 031c 	add.w	r3, r7, #28
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	4828      	ldr	r0, [pc, #160]	; (8012de0 <HAL_TIM_Base_MspInit+0x128>)
 8012d40:	f002 fd04 	bl	801574c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_PWM_STEERING_Pin|RC_PWM_THROTTLE_IN_Pin;
 8012d44:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8012d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d4a:	2302      	movs	r3, #2
 8012d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d4e:	2300      	movs	r3, #0
 8012d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d52:	2300      	movs	r3, #0
 8012d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8012d56:	2301      	movs	r3, #1
 8012d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012d5a:	f107 031c 	add.w	r3, r7, #28
 8012d5e:	4619      	mov	r1, r3
 8012d60:	4820      	ldr	r0, [pc, #128]	; (8012de4 <HAL_TIM_Base_MspInit+0x12c>)
 8012d62:	f002 fcf3 	bl	801574c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8012d66:	2200      	movs	r2, #0
 8012d68:	2105      	movs	r1, #5
 8012d6a:	202c      	movs	r0, #44	; 0x2c
 8012d6c:	f002 f918 	bl	8014fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8012d70:	202c      	movs	r0, #44	; 0x2c
 8012d72:	f002 f92f 	bl	8014fd4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8012d76:	e02a      	b.n	8012dce <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM5)
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	4a1a      	ldr	r2, [pc, #104]	; (8012de8 <HAL_TIM_Base_MspInit+0x130>)
 8012d7e:	4293      	cmp	r3, r2
 8012d80:	d10c      	bne.n	8012d9c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8012d82:	4b16      	ldr	r3, [pc, #88]	; (8012ddc <HAL_TIM_Base_MspInit+0x124>)
 8012d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d86:	4a15      	ldr	r2, [pc, #84]	; (8012ddc <HAL_TIM_Base_MspInit+0x124>)
 8012d88:	f043 0308 	orr.w	r3, r3, #8
 8012d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8012d8e:	4b13      	ldr	r3, [pc, #76]	; (8012ddc <HAL_TIM_Base_MspInit+0x124>)
 8012d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d92:	f003 0308 	and.w	r3, r3, #8
 8012d96:	60fb      	str	r3, [r7, #12]
 8012d98:	68fb      	ldr	r3, [r7, #12]
}
 8012d9a:	e018      	b.n	8012dce <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM6)
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	4a12      	ldr	r2, [pc, #72]	; (8012dec <HAL_TIM_Base_MspInit+0x134>)
 8012da2:	4293      	cmp	r3, r2
 8012da4:	d113      	bne.n	8012dce <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8012da6:	4b0d      	ldr	r3, [pc, #52]	; (8012ddc <HAL_TIM_Base_MspInit+0x124>)
 8012da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012daa:	4a0c      	ldr	r2, [pc, #48]	; (8012ddc <HAL_TIM_Base_MspInit+0x124>)
 8012dac:	f043 0310 	orr.w	r3, r3, #16
 8012db0:	6593      	str	r3, [r2, #88]	; 0x58
 8012db2:	4b0a      	ldr	r3, [pc, #40]	; (8012ddc <HAL_TIM_Base_MspInit+0x124>)
 8012db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012db6:	f003 0310 	and.w	r3, r3, #16
 8012dba:	60bb      	str	r3, [r7, #8]
 8012dbc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	2105      	movs	r1, #5
 8012dc2:	2031      	movs	r0, #49	; 0x31
 8012dc4:	f002 f8ec 	bl	8014fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8012dc8:	2031      	movs	r0, #49	; 0x31
 8012dca:	f002 f903 	bl	8014fd4 <HAL_NVIC_EnableIRQ>
}
 8012dce:	bf00      	nop
 8012dd0:	3730      	adds	r7, #48	; 0x30
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}
 8012dd6:	bf00      	nop
 8012dd8:	40012c00 	.word	0x40012c00
 8012ddc:	40021000 	.word	0x40021000
 8012de0:	42021000 	.word	0x42021000
 8012de4:	42020000 	.word	0x42020000
 8012de8:	40000c00 	.word	0x40000c00
 8012dec:	40001000 	.word	0x40001000

08012df0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b08a      	sub	sp, #40	; 0x28
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012df8:	f107 0314 	add.w	r3, r7, #20
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	601a      	str	r2, [r3, #0]
 8012e00:	605a      	str	r2, [r3, #4]
 8012e02:	609a      	str	r2, [r3, #8]
 8012e04:	60da      	str	r2, [r3, #12]
 8012e06:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	4a1b      	ldr	r2, [pc, #108]	; (8012e7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8012e0e:	4293      	cmp	r3, r2
 8012e10:	d12f      	bne.n	8012e72 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8012e12:	4b1b      	ldr	r3, [pc, #108]	; (8012e80 <HAL_TIM_Encoder_MspInit+0x90>)
 8012e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e16:	4a1a      	ldr	r2, [pc, #104]	; (8012e80 <HAL_TIM_Encoder_MspInit+0x90>)
 8012e18:	f043 0302 	orr.w	r3, r3, #2
 8012e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8012e1e:	4b18      	ldr	r3, [pc, #96]	; (8012e80 <HAL_TIM_Encoder_MspInit+0x90>)
 8012e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e22:	f003 0302 	and.w	r3, r3, #2
 8012e26:	613b      	str	r3, [r7, #16]
 8012e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8012e2a:	4b15      	ldr	r3, [pc, #84]	; (8012e80 <HAL_TIM_Encoder_MspInit+0x90>)
 8012e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e2e:	4a14      	ldr	r2, [pc, #80]	; (8012e80 <HAL_TIM_Encoder_MspInit+0x90>)
 8012e30:	f043 0310 	orr.w	r3, r3, #16
 8012e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012e36:	4b12      	ldr	r3, [pc, #72]	; (8012e80 <HAL_TIM_Encoder_MspInit+0x90>)
 8012e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e3a:	f003 0310 	and.w	r3, r3, #16
 8012e3e:	60fb      	str	r3, [r7, #12]
 8012e40:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CHB_Pin;
 8012e42:	2318      	movs	r3, #24
 8012e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e46:	2302      	movs	r3, #2
 8012e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012e52:	2302      	movs	r3, #2
 8012e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012e56:	f107 0314 	add.w	r3, r7, #20
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	4809      	ldr	r0, [pc, #36]	; (8012e84 <HAL_TIM_Encoder_MspInit+0x94>)
 8012e5e:	f002 fc75 	bl	801574c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8012e62:	2200      	movs	r2, #0
 8012e64:	2105      	movs	r1, #5
 8012e66:	202e      	movs	r0, #46	; 0x2e
 8012e68:	f002 f89a 	bl	8014fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8012e6c:	202e      	movs	r0, #46	; 0x2e
 8012e6e:	f002 f8b1 	bl	8014fd4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8012e72:	bf00      	nop
 8012e74:	3728      	adds	r7, #40	; 0x28
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}
 8012e7a:	bf00      	nop
 8012e7c:	40000400 	.word	0x40000400
 8012e80:	40021000 	.word	0x40021000
 8012e84:	42021000 	.word	0x42021000

08012e88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8012e88:	b480      	push	{r7}
 8012e8a:	b085      	sub	sp, #20
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	4a0a      	ldr	r2, [pc, #40]	; (8012ec0 <HAL_TIM_PWM_MspInit+0x38>)
 8012e96:	4293      	cmp	r3, r2
 8012e98:	d10b      	bne.n	8012eb2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8012e9a:	4b0a      	ldr	r3, [pc, #40]	; (8012ec4 <HAL_TIM_PWM_MspInit+0x3c>)
 8012e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012e9e:	4a09      	ldr	r2, [pc, #36]	; (8012ec4 <HAL_TIM_PWM_MspInit+0x3c>)
 8012ea0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012ea4:	6613      	str	r3, [r2, #96]	; 0x60
 8012ea6:	4b07      	ldr	r3, [pc, #28]	; (8012ec4 <HAL_TIM_PWM_MspInit+0x3c>)
 8012ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012eae:	60fb      	str	r3, [r7, #12]
 8012eb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8012eb2:	bf00      	nop
 8012eb4:	3714      	adds	r7, #20
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebc:	4770      	bx	lr
 8012ebe:	bf00      	nop
 8012ec0:	40013400 	.word	0x40013400
 8012ec4:	40021000 	.word	0x40021000

08012ec8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b08a      	sub	sp, #40	; 0x28
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012ed0:	f107 0314 	add.w	r3, r7, #20
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	601a      	str	r2, [r3, #0]
 8012ed8:	605a      	str	r2, [r3, #4]
 8012eda:	609a      	str	r2, [r3, #8]
 8012edc:	60da      	str	r2, [r3, #12]
 8012ede:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	4a22      	ldr	r2, [pc, #136]	; (8012f70 <HAL_TIM_MspPostInit+0xa8>)
 8012ee6:	4293      	cmp	r3, r2
 8012ee8:	d11d      	bne.n	8012f26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8012eea:	4b22      	ldr	r3, [pc, #136]	; (8012f74 <HAL_TIM_MspPostInit+0xac>)
 8012eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012eee:	4a21      	ldr	r2, [pc, #132]	; (8012f74 <HAL_TIM_MspPostInit+0xac>)
 8012ef0:	f043 0320 	orr.w	r3, r3, #32
 8012ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012ef6:	4b1f      	ldr	r3, [pc, #124]	; (8012f74 <HAL_TIM_MspPostInit+0xac>)
 8012ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012efa:	f003 0320 	and.w	r3, r3, #32
 8012efe:	613b      	str	r3, [r7, #16]
 8012f00:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PF6     ------> TIM5_CH1
    PF9     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PWM1_Pin|MOTOR_PWM2_Pin;
 8012f02:	f44f 7310 	mov.w	r3, #576	; 0x240
 8012f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f08:	2302      	movs	r3, #2
 8012f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012f10:	2300      	movs	r3, #0
 8012f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8012f14:	2302      	movs	r3, #2
 8012f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012f18:	f107 0314 	add.w	r3, r7, #20
 8012f1c:	4619      	mov	r1, r3
 8012f1e:	4816      	ldr	r0, [pc, #88]	; (8012f78 <HAL_TIM_MspPostInit+0xb0>)
 8012f20:	f002 fc14 	bl	801574c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8012f24:	e020      	b.n	8012f68 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	4a14      	ldr	r2, [pc, #80]	; (8012f7c <HAL_TIM_MspPostInit+0xb4>)
 8012f2c:	4293      	cmp	r3, r2
 8012f2e:	d11b      	bne.n	8012f68 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012f30:	4b10      	ldr	r3, [pc, #64]	; (8012f74 <HAL_TIM_MspPostInit+0xac>)
 8012f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f34:	4a0f      	ldr	r2, [pc, #60]	; (8012f74 <HAL_TIM_MspPostInit+0xac>)
 8012f36:	f043 0304 	orr.w	r3, r3, #4
 8012f3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012f3c:	4b0d      	ldr	r3, [pc, #52]	; (8012f74 <HAL_TIM_MspPostInit+0xac>)
 8012f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f40:	f003 0304 	and.w	r3, r3, #4
 8012f44:	60fb      	str	r3, [r7, #12]
 8012f46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8012f48:	2340      	movs	r3, #64	; 0x40
 8012f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f4c:	2302      	movs	r3, #2
 8012f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f50:	2300      	movs	r3, #0
 8012f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012f54:	2300      	movs	r3, #0
 8012f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8012f58:	2303      	movs	r3, #3
 8012f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012f5c:	f107 0314 	add.w	r3, r7, #20
 8012f60:	4619      	mov	r1, r3
 8012f62:	4807      	ldr	r0, [pc, #28]	; (8012f80 <HAL_TIM_MspPostInit+0xb8>)
 8012f64:	f002 fbf2 	bl	801574c <HAL_GPIO_Init>
}
 8012f68:	bf00      	nop
 8012f6a:	3728      	adds	r7, #40	; 0x28
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}
 8012f70:	40000c00 	.word	0x40000c00
 8012f74:	40021000 	.word	0x40021000
 8012f78:	42021400 	.word	0x42021400
 8012f7c:	40013400 	.word	0x40013400
 8012f80:	42020800 	.word	0x42020800

08012f84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b0ae      	sub	sp, #184	; 0xb8
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012f8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012f90:	2200      	movs	r2, #0
 8012f92:	601a      	str	r2, [r3, #0]
 8012f94:	605a      	str	r2, [r3, #4]
 8012f96:	609a      	str	r2, [r3, #8]
 8012f98:	60da      	str	r2, [r3, #12]
 8012f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012f9c:	f107 0310 	add.w	r3, r7, #16
 8012fa0:	2294      	movs	r2, #148	; 0x94
 8012fa2:	2100      	movs	r1, #0
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f00f f9d8 	bl	802235a <memset>
  if(hpcd->Instance==USB)
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	4a22      	ldr	r2, [pc, #136]	; (8013038 <HAL_PCD_MspInit+0xb4>)
 8012fb0:	4293      	cmp	r3, r2
 8012fb2:	d13d      	bne.n	8013030 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012fb8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012fba:	2300      	movs	r3, #0
 8012fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012fc0:	f107 0310 	add.w	r3, r7, #16
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f004 fce5 	bl	8017994 <HAL_RCCEx_PeriphCLKConfig>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d001      	beq.n	8012fd4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8012fd0:	f7ff fb1d 	bl	801260e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012fd4:	4b19      	ldr	r3, [pc, #100]	; (801303c <HAL_PCD_MspInit+0xb8>)
 8012fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012fd8:	4a18      	ldr	r2, [pc, #96]	; (801303c <HAL_PCD_MspInit+0xb8>)
 8012fda:	f043 0301 	orr.w	r3, r3, #1
 8012fde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012fe0:	4b16      	ldr	r3, [pc, #88]	; (801303c <HAL_PCD_MspInit+0xb8>)
 8012fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012fe4:	f003 0301 	and.w	r3, r3, #1
 8012fe8:	60fb      	str	r3, [r7, #12]
 8012fea:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012fec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ff4:	2302      	movs	r3, #2
 8012ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013000:	2300      	movs	r3, #0
 8013002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8013006:	230a      	movs	r3, #10
 8013008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801300c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013010:	4619      	mov	r1, r3
 8013012:	480b      	ldr	r0, [pc, #44]	; (8013040 <HAL_PCD_MspInit+0xbc>)
 8013014:	f002 fb9a 	bl	801574c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8013018:	4b08      	ldr	r3, [pc, #32]	; (801303c <HAL_PCD_MspInit+0xb8>)
 801301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801301c:	4a07      	ldr	r2, [pc, #28]	; (801303c <HAL_PCD_MspInit+0xb8>)
 801301e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013022:	65d3      	str	r3, [r2, #92]	; 0x5c
 8013024:	4b05      	ldr	r3, [pc, #20]	; (801303c <HAL_PCD_MspInit+0xb8>)
 8013026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801302c:	60bb      	str	r3, [r7, #8]
 801302e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8013030:	bf00      	nop
 8013032:	37b8      	adds	r7, #184	; 0xb8
 8013034:	46bd      	mov	sp, r7
 8013036:	bd80      	pop	{r7, pc}
 8013038:	4000d400 	.word	0x4000d400
 801303c:	40021000 	.word	0x40021000
 8013040:	42020000 	.word	0x42020000

08013044 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b08c      	sub	sp, #48	; 0x30
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 801304c:	2300      	movs	r3, #0
 801304e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8013050:	2300      	movs	r3, #0
 8013052:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8013054:	2200      	movs	r2, #0
 8013056:	6879      	ldr	r1, [r7, #4]
 8013058:	202d      	movs	r0, #45	; 0x2d
 801305a:	f001 ffa1 	bl	8014fa0 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801305e:	202d      	movs	r0, #45	; 0x2d
 8013060:	f001 ffb8 	bl	8014fd4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8013064:	4b1f      	ldr	r3, [pc, #124]	; (80130e4 <HAL_InitTick+0xa0>)
 8013066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013068:	4a1e      	ldr	r2, [pc, #120]	; (80130e4 <HAL_InitTick+0xa0>)
 801306a:	f043 0301 	orr.w	r3, r3, #1
 801306e:	6593      	str	r3, [r2, #88]	; 0x58
 8013070:	4b1c      	ldr	r3, [pc, #112]	; (80130e4 <HAL_InitTick+0xa0>)
 8013072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013074:	f003 0301 	and.w	r3, r3, #1
 8013078:	60fb      	str	r3, [r7, #12]
 801307a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801307c:	f107 0210 	add.w	r2, r7, #16
 8013080:	f107 0314 	add.w	r3, r7, #20
 8013084:	4611      	mov	r1, r2
 8013086:	4618      	mov	r0, r3
 8013088:	f004 fb80 	bl	801778c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 801308c:	f004 fb56 	bl	801773c <HAL_RCC_GetPCLK1Freq>
 8013090:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8013092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013094:	4a14      	ldr	r2, [pc, #80]	; (80130e8 <HAL_InitTick+0xa4>)
 8013096:	fba2 2303 	umull	r2, r3, r2, r3
 801309a:	0c9b      	lsrs	r3, r3, #18
 801309c:	3b01      	subs	r3, #1
 801309e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80130a0:	4b12      	ldr	r3, [pc, #72]	; (80130ec <HAL_InitTick+0xa8>)
 80130a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80130a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80130a8:	4b10      	ldr	r3, [pc, #64]	; (80130ec <HAL_InitTick+0xa8>)
 80130aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80130ae:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80130b0:	4a0e      	ldr	r2, [pc, #56]	; (80130ec <HAL_InitTick+0xa8>)
 80130b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80130b6:	4b0d      	ldr	r3, [pc, #52]	; (80130ec <HAL_InitTick+0xa8>)
 80130b8:	2200      	movs	r2, #0
 80130ba:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80130bc:	4b0b      	ldr	r3, [pc, #44]	; (80130ec <HAL_InitTick+0xa8>)
 80130be:	2200      	movs	r2, #0
 80130c0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80130c2:	480a      	ldr	r0, [pc, #40]	; (80130ec <HAL_InitTick+0xa8>)
 80130c4:	f006 f9c6 	bl	8019454 <HAL_TIM_Base_Init>
 80130c8:	4603      	mov	r3, r0
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d104      	bne.n	80130d8 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80130ce:	4807      	ldr	r0, [pc, #28]	; (80130ec <HAL_InitTick+0xa8>)
 80130d0:	f006 fa80 	bl	80195d4 <HAL_TIM_Base_Start_IT>
 80130d4:	4603      	mov	r3, r0
 80130d6:	e000      	b.n	80130da <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 80130d8:	2301      	movs	r3, #1
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3730      	adds	r7, #48	; 0x30
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}
 80130e2:	bf00      	nop
 80130e4:	40021000 	.word	0x40021000
 80130e8:	431bde83 	.word	0x431bde83
 80130ec:	20000f78 	.word	0x20000f78

080130f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80130f0:	b480      	push	{r7}
 80130f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80130f4:	f3bf 8f4f 	dsb	sy
}
 80130f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80130fa:	4b06      	ldr	r3, [pc, #24]	; (8013114 <__NVIC_SystemReset+0x24>)
 80130fc:	68db      	ldr	r3, [r3, #12]
 80130fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8013102:	4904      	ldr	r1, [pc, #16]	; (8013114 <__NVIC_SystemReset+0x24>)
 8013104:	4b04      	ldr	r3, [pc, #16]	; (8013118 <__NVIC_SystemReset+0x28>)
 8013106:	4313      	orrs	r3, r2
 8013108:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801310a:	f3bf 8f4f 	dsb	sy
}
 801310e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8013110:	bf00      	nop
 8013112:	e7fd      	b.n	8013110 <__NVIC_SystemReset+0x20>
 8013114:	e000ed00 	.word	0xe000ed00
 8013118:	05fa0004 	.word	0x05fa0004

0801311c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801311c:	b480      	push	{r7}
 801311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8013120:	e7fe      	b.n	8013120 <NMI_Handler+0x4>

08013122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013122:	b580      	push	{r7, lr}
 8013124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8013126:	f7ff ffe3 	bl	80130f0 <__NVIC_SystemReset>

0801312a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801312a:	b480      	push	{r7}
 801312c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801312e:	e7fe      	b.n	801312e <MemManage_Handler+0x4>

08013130 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8013130:	b480      	push	{r7}
 8013132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8013134:	e7fe      	b.n	8013134 <BusFault_Handler+0x4>

08013136 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8013136:	b480      	push	{r7}
 8013138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801313a:	e7fe      	b.n	801313a <UsageFault_Handler+0x4>

0801313c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801313c:	b480      	push	{r7}
 801313e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8013140:	bf00      	nop
 8013142:	46bd      	mov	sp, r7
 8013144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013148:	4770      	bx	lr
	...

0801314c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8013150:	4802      	ldr	r0, [pc, #8]	; (801315c <DMA1_Channel1_IRQHandler+0x10>)
 8013152:	f002 f92b 	bl	80153ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8013156:	bf00      	nop
 8013158:	bd80      	pop	{r7, pc}
 801315a:	bf00      	nop
 801315c:	20000738 	.word	0x20000738

08013160 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8013164:	4802      	ldr	r0, [pc, #8]	; (8013170 <ADC1_2_IRQHandler+0x10>)
 8013166:	f000 fe2b 	bl	8013dc0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 801316a:	bf00      	nop
 801316c:	bd80      	pop	{r7, pc}
 801316e:	bf00      	nop
 8013170:	200006d0 	.word	0x200006d0

08013174 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8013178:	4802      	ldr	r0, [pc, #8]	; (8013184 <TIM1_CC_IRQHandler+0x10>)
 801317a:	f006 fed9 	bl	8019f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 801317e:	bf00      	nop
 8013180:	bd80      	pop	{r7, pc}
 8013182:	bf00      	nop
 8013184:	20000b04 	.word	0x20000b04

08013188 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 801318c:	4802      	ldr	r0, [pc, #8]	; (8013198 <TIM2_IRQHandler+0x10>)
 801318e:	f006 fecf 	bl	8019f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8013192:	bf00      	nop
 8013194:	bd80      	pop	{r7, pc}
 8013196:	bf00      	nop
 8013198:	20000f78 	.word	0x20000f78

0801319c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80131a0:	4802      	ldr	r0, [pc, #8]	; (80131ac <TIM3_IRQHandler+0x10>)
 80131a2:	f006 fec5 	bl	8019f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80131a6:	bf00      	nop
 80131a8:	bd80      	pop	{r7, pc}
 80131aa:	bf00      	nop
 80131ac:	20000b50 	.word	0x20000b50

080131b0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80131b4:	4802      	ldr	r0, [pc, #8]	; (80131c0 <TIM6_IRQHandler+0x10>)
 80131b6:	f006 febb 	bl	8019f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80131ba:	bf00      	nop
 80131bc:	bd80      	pop	{r7, pc}
 80131be:	bf00      	nop
 80131c0:	20000be8 	.word	0x20000be8

080131c4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80131c8:	4802      	ldr	r0, [pc, #8]	; (80131d4 <UART4_IRQHandler+0x10>)
 80131ca:	f008 fa73 	bl	801b6b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80131ce:	bf00      	nop
 80131d0:	bd80      	pop	{r7, pc}
 80131d2:	bf00      	nop
 80131d4:	20000888 	.word	0x20000888

080131d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80131d8:	b480      	push	{r7}
 80131da:	af00      	add	r7, sp, #0
  return 1;
 80131dc:	2301      	movs	r3, #1
}
 80131de:	4618      	mov	r0, r3
 80131e0:	46bd      	mov	sp, r7
 80131e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e6:	4770      	bx	lr

080131e8 <_kill>:

int _kill(int pid, int sig)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b082      	sub	sp, #8
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
 80131f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80131f2:	f00f f851 	bl	8022298 <__errno>
 80131f6:	4603      	mov	r3, r0
 80131f8:	2216      	movs	r2, #22
 80131fa:	601a      	str	r2, [r3, #0]
  return -1;
 80131fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013200:	4618      	mov	r0, r3
 8013202:	3708      	adds	r7, #8
 8013204:	46bd      	mov	sp, r7
 8013206:	bd80      	pop	{r7, pc}

08013208 <_exit>:

void _exit (int status)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b082      	sub	sp, #8
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8013210:	f04f 31ff 	mov.w	r1, #4294967295
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f7ff ffe7 	bl	80131e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 801321a:	e7fe      	b.n	801321a <_exit+0x12>

0801321c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b086      	sub	sp, #24
 8013220:	af00      	add	r7, sp, #0
 8013222:	60f8      	str	r0, [r7, #12]
 8013224:	60b9      	str	r1, [r7, #8]
 8013226:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013228:	2300      	movs	r3, #0
 801322a:	617b      	str	r3, [r7, #20]
 801322c:	e00a      	b.n	8013244 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 801322e:	e000      	b.n	8013232 <_read+0x16>
 8013230:	bf00      	nop
 8013232:	4601      	mov	r1, r0
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	1c5a      	adds	r2, r3, #1
 8013238:	60ba      	str	r2, [r7, #8]
 801323a:	b2ca      	uxtb	r2, r1
 801323c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801323e:	697b      	ldr	r3, [r7, #20]
 8013240:	3301      	adds	r3, #1
 8013242:	617b      	str	r3, [r7, #20]
 8013244:	697a      	ldr	r2, [r7, #20]
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	429a      	cmp	r2, r3
 801324a:	dbf0      	blt.n	801322e <_read+0x12>
  }

  return len;
 801324c:	687b      	ldr	r3, [r7, #4]
}
 801324e:	4618      	mov	r0, r3
 8013250:	3718      	adds	r7, #24
 8013252:	46bd      	mov	sp, r7
 8013254:	bd80      	pop	{r7, pc}

08013256 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8013256:	b580      	push	{r7, lr}
 8013258:	b086      	sub	sp, #24
 801325a:	af00      	add	r7, sp, #0
 801325c:	60f8      	str	r0, [r7, #12]
 801325e:	60b9      	str	r1, [r7, #8]
 8013260:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013262:	2300      	movs	r3, #0
 8013264:	617b      	str	r3, [r7, #20]
 8013266:	e009      	b.n	801327c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	1c5a      	adds	r2, r3, #1
 801326c:	60ba      	str	r2, [r7, #8]
 801326e:	781b      	ldrb	r3, [r3, #0]
 8013270:	4618      	mov	r0, r3
 8013272:	e000      	b.n	8013276 <_write+0x20>
 8013274:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013276:	697b      	ldr	r3, [r7, #20]
 8013278:	3301      	adds	r3, #1
 801327a:	617b      	str	r3, [r7, #20]
 801327c:	697a      	ldr	r2, [r7, #20]
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	429a      	cmp	r2, r3
 8013282:	dbf1      	blt.n	8013268 <_write+0x12>
  }
  return len;
 8013284:	687b      	ldr	r3, [r7, #4]
}
 8013286:	4618      	mov	r0, r3
 8013288:	3718      	adds	r7, #24
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}

0801328e <_close>:

int _close(int file)
{
 801328e:	b480      	push	{r7}
 8013290:	b083      	sub	sp, #12
 8013292:	af00      	add	r7, sp, #0
 8013294:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8013296:	f04f 33ff 	mov.w	r3, #4294967295
}
 801329a:	4618      	mov	r0, r3
 801329c:	370c      	adds	r7, #12
 801329e:	46bd      	mov	sp, r7
 80132a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a4:	4770      	bx	lr

080132a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80132a6:	b480      	push	{r7}
 80132a8:	b083      	sub	sp, #12
 80132aa:	af00      	add	r7, sp, #0
 80132ac:	6078      	str	r0, [r7, #4]
 80132ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80132b6:	605a      	str	r2, [r3, #4]
  return 0;
 80132b8:	2300      	movs	r3, #0
}
 80132ba:	4618      	mov	r0, r3
 80132bc:	370c      	adds	r7, #12
 80132be:	46bd      	mov	sp, r7
 80132c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c4:	4770      	bx	lr

080132c6 <_isatty>:

int _isatty(int file)
{
 80132c6:	b480      	push	{r7}
 80132c8:	b083      	sub	sp, #12
 80132ca:	af00      	add	r7, sp, #0
 80132cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80132ce:	2301      	movs	r3, #1
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	370c      	adds	r7, #12
 80132d4:	46bd      	mov	sp, r7
 80132d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132da:	4770      	bx	lr

080132dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80132dc:	b480      	push	{r7}
 80132de:	b085      	sub	sp, #20
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	60f8      	str	r0, [r7, #12]
 80132e4:	60b9      	str	r1, [r7, #8]
 80132e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80132e8:	2300      	movs	r3, #0
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	3714      	adds	r7, #20
 80132ee:	46bd      	mov	sp, r7
 80132f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f4:	4770      	bx	lr
	...

080132f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b086      	sub	sp, #24
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013300:	4a14      	ldr	r2, [pc, #80]	; (8013354 <_sbrk+0x5c>)
 8013302:	4b15      	ldr	r3, [pc, #84]	; (8013358 <_sbrk+0x60>)
 8013304:	1ad3      	subs	r3, r2, r3
 8013306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8013308:	697b      	ldr	r3, [r7, #20]
 801330a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801330c:	4b13      	ldr	r3, [pc, #76]	; (801335c <_sbrk+0x64>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d102      	bne.n	801331a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8013314:	4b11      	ldr	r3, [pc, #68]	; (801335c <_sbrk+0x64>)
 8013316:	4a12      	ldr	r2, [pc, #72]	; (8013360 <_sbrk+0x68>)
 8013318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801331a:	4b10      	ldr	r3, [pc, #64]	; (801335c <_sbrk+0x64>)
 801331c:	681a      	ldr	r2, [r3, #0]
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	4413      	add	r3, r2
 8013322:	693a      	ldr	r2, [r7, #16]
 8013324:	429a      	cmp	r2, r3
 8013326:	d207      	bcs.n	8013338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8013328:	f00e ffb6 	bl	8022298 <__errno>
 801332c:	4603      	mov	r3, r0
 801332e:	220c      	movs	r2, #12
 8013330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8013332:	f04f 33ff 	mov.w	r3, #4294967295
 8013336:	e009      	b.n	801334c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8013338:	4b08      	ldr	r3, [pc, #32]	; (801335c <_sbrk+0x64>)
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801333e:	4b07      	ldr	r3, [pc, #28]	; (801335c <_sbrk+0x64>)
 8013340:	681a      	ldr	r2, [r3, #0]
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	4413      	add	r3, r2
 8013346:	4a05      	ldr	r2, [pc, #20]	; (801335c <_sbrk+0x64>)
 8013348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801334a:	68fb      	ldr	r3, [r7, #12]
}
 801334c:	4618      	mov	r0, r3
 801334e:	3718      	adds	r7, #24
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}
 8013354:	20030000 	.word	0x20030000
 8013358:	00000400 	.word	0x00000400
 801335c:	20000fc4 	.word	0x20000fc4
 8013360:	20003d28 	.word	0x20003d28

08013364 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8013364:	b480      	push	{r7}
 8013366:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8013368:	4b06      	ldr	r3, [pc, #24]	; (8013384 <SystemInit+0x20>)
 801336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801336e:	4a05      	ldr	r2, [pc, #20]	; (8013384 <SystemInit+0x20>)
 8013370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8013378:	bf00      	nop
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr
 8013382:	bf00      	nop
 8013384:	e000ed00 	.word	0xe000ed00

08013388 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8013388:	b480      	push	{r7}
 801338a:	b087      	sub	sp, #28
 801338c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 801338e:	4b4f      	ldr	r3, [pc, #316]	; (80134cc <SystemCoreClockUpdate+0x144>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	f003 0308 	and.w	r3, r3, #8
 8013396:	2b00      	cmp	r3, #0
 8013398:	d107      	bne.n	80133aa <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 801339a:	4b4c      	ldr	r3, [pc, #304]	; (80134cc <SystemCoreClockUpdate+0x144>)
 801339c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80133a0:	0a1b      	lsrs	r3, r3, #8
 80133a2:	f003 030f 	and.w	r3, r3, #15
 80133a6:	617b      	str	r3, [r7, #20]
 80133a8:	e005      	b.n	80133b6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80133aa:	4b48      	ldr	r3, [pc, #288]	; (80134cc <SystemCoreClockUpdate+0x144>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	091b      	lsrs	r3, r3, #4
 80133b0:	f003 030f 	and.w	r3, r3, #15
 80133b4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80133b6:	4a46      	ldr	r2, [pc, #280]	; (80134d0 <SystemCoreClockUpdate+0x148>)
 80133b8:	697b      	ldr	r3, [r7, #20]
 80133ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133be:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80133c0:	4b42      	ldr	r3, [pc, #264]	; (80134cc <SystemCoreClockUpdate+0x144>)
 80133c2:	689b      	ldr	r3, [r3, #8]
 80133c4:	f003 030c 	and.w	r3, r3, #12
 80133c8:	2b0c      	cmp	r3, #12
 80133ca:	d866      	bhi.n	801349a <SystemCoreClockUpdate+0x112>
 80133cc:	a201      	add	r2, pc, #4	; (adr r2, 80133d4 <SystemCoreClockUpdate+0x4c>)
 80133ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133d2:	bf00      	nop
 80133d4:	08013409 	.word	0x08013409
 80133d8:	0801349b 	.word	0x0801349b
 80133dc:	0801349b 	.word	0x0801349b
 80133e0:	0801349b 	.word	0x0801349b
 80133e4:	08013411 	.word	0x08013411
 80133e8:	0801349b 	.word	0x0801349b
 80133ec:	0801349b 	.word	0x0801349b
 80133f0:	0801349b 	.word	0x0801349b
 80133f4:	08013419 	.word	0x08013419
 80133f8:	0801349b 	.word	0x0801349b
 80133fc:	0801349b 	.word	0x0801349b
 8013400:	0801349b 	.word	0x0801349b
 8013404:	08013421 	.word	0x08013421
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8013408:	4a32      	ldr	r2, [pc, #200]	; (80134d4 <SystemCoreClockUpdate+0x14c>)
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	6013      	str	r3, [r2, #0]
      break;
 801340e:	e048      	b.n	80134a2 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8013410:	4b30      	ldr	r3, [pc, #192]	; (80134d4 <SystemCoreClockUpdate+0x14c>)
 8013412:	4a31      	ldr	r2, [pc, #196]	; (80134d8 <SystemCoreClockUpdate+0x150>)
 8013414:	601a      	str	r2, [r3, #0]
      break;
 8013416:	e044      	b.n	80134a2 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8013418:	4b2e      	ldr	r3, [pc, #184]	; (80134d4 <SystemCoreClockUpdate+0x14c>)
 801341a:	4a30      	ldr	r2, [pc, #192]	; (80134dc <SystemCoreClockUpdate+0x154>)
 801341c:	601a      	str	r2, [r3, #0]
      break;
 801341e:	e040      	b.n	80134a2 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8013420:	4b2a      	ldr	r3, [pc, #168]	; (80134cc <SystemCoreClockUpdate+0x144>)
 8013422:	68db      	ldr	r3, [r3, #12]
 8013424:	f003 0303 	and.w	r3, r3, #3
 8013428:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 801342a:	4b28      	ldr	r3, [pc, #160]	; (80134cc <SystemCoreClockUpdate+0x144>)
 801342c:	68db      	ldr	r3, [r3, #12]
 801342e:	091b      	lsrs	r3, r3, #4
 8013430:	f003 030f 	and.w	r3, r3, #15
 8013434:	3301      	adds	r3, #1
 8013436:	60bb      	str	r3, [r7, #8]
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	2b02      	cmp	r3, #2
 801343c:	d003      	beq.n	8013446 <SystemCoreClockUpdate+0xbe>
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	2b03      	cmp	r3, #3
 8013442:	d006      	beq.n	8013452 <SystemCoreClockUpdate+0xca>
 8013444:	e00b      	b.n	801345e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8013446:	4a24      	ldr	r2, [pc, #144]	; (80134d8 <SystemCoreClockUpdate+0x150>)
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	fbb2 f3f3 	udiv	r3, r2, r3
 801344e:	613b      	str	r3, [r7, #16]
          break;
 8013450:	e00b      	b.n	801346a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8013452:	4a22      	ldr	r2, [pc, #136]	; (80134dc <SystemCoreClockUpdate+0x154>)
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	fbb2 f3f3 	udiv	r3, r2, r3
 801345a:	613b      	str	r3, [r7, #16]
          break;
 801345c:	e005      	b.n	801346a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 801345e:	697a      	ldr	r2, [r7, #20]
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	fbb2 f3f3 	udiv	r3, r2, r3
 8013466:	613b      	str	r3, [r7, #16]
          break;
 8013468:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 801346a:	4b18      	ldr	r3, [pc, #96]	; (80134cc <SystemCoreClockUpdate+0x144>)
 801346c:	68db      	ldr	r3, [r3, #12]
 801346e:	0a1b      	lsrs	r3, r3, #8
 8013470:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013474:	693b      	ldr	r3, [r7, #16]
 8013476:	fb02 f303 	mul.w	r3, r2, r3
 801347a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 801347c:	4b13      	ldr	r3, [pc, #76]	; (80134cc <SystemCoreClockUpdate+0x144>)
 801347e:	68db      	ldr	r3, [r3, #12]
 8013480:	0e5b      	lsrs	r3, r3, #25
 8013482:	f003 0303 	and.w	r3, r3, #3
 8013486:	3301      	adds	r3, #1
 8013488:	005b      	lsls	r3, r3, #1
 801348a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 801348c:	693a      	ldr	r2, [r7, #16]
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	fbb2 f3f3 	udiv	r3, r2, r3
 8013494:	4a0f      	ldr	r2, [pc, #60]	; (80134d4 <SystemCoreClockUpdate+0x14c>)
 8013496:	6013      	str	r3, [r2, #0]
      break;
 8013498:	e003      	b.n	80134a2 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 801349a:	4a0e      	ldr	r2, [pc, #56]	; (80134d4 <SystemCoreClockUpdate+0x14c>)
 801349c:	697b      	ldr	r3, [r7, #20]
 801349e:	6013      	str	r3, [r2, #0]
      break;
 80134a0:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80134a2:	4b0a      	ldr	r3, [pc, #40]	; (80134cc <SystemCoreClockUpdate+0x144>)
 80134a4:	689b      	ldr	r3, [r3, #8]
 80134a6:	091b      	lsrs	r3, r3, #4
 80134a8:	f003 030f 	and.w	r3, r3, #15
 80134ac:	4a0c      	ldr	r2, [pc, #48]	; (80134e0 <SystemCoreClockUpdate+0x158>)
 80134ae:	5cd3      	ldrb	r3, [r2, r3]
 80134b0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80134b2:	4b08      	ldr	r3, [pc, #32]	; (80134d4 <SystemCoreClockUpdate+0x14c>)
 80134b4:	681a      	ldr	r2, [r3, #0]
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	fa22 f303 	lsr.w	r3, r2, r3
 80134bc:	4a05      	ldr	r2, [pc, #20]	; (80134d4 <SystemCoreClockUpdate+0x14c>)
 80134be:	6013      	str	r3, [r2, #0]
}
 80134c0:	bf00      	nop
 80134c2:	371c      	adds	r7, #28
 80134c4:	46bd      	mov	sp, r7
 80134c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ca:	4770      	bx	lr
 80134cc:	40021000 	.word	0x40021000
 80134d0:	08024058 	.word	0x08024058
 80134d4:	20000090 	.word	0x20000090
 80134d8:	00f42400 	.word	0x00f42400
 80134dc:	007a1200 	.word	0x007a1200
 80134e0:	08024040 	.word	0x08024040

080134e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80134e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 801351c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80134e8:	f7ff ff3c 	bl	8013364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80134ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80134ee:	e003      	b.n	80134f8 <LoopCopyDataInit>

080134f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80134f0:	4b0b      	ldr	r3, [pc, #44]	; (8013520 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80134f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80134f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80134f6:	3104      	adds	r1, #4

080134f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80134f8:	480a      	ldr	r0, [pc, #40]	; (8013524 <LoopForever+0xa>)
	ldr	r3, =_edata
 80134fa:	4b0b      	ldr	r3, [pc, #44]	; (8013528 <LoopForever+0xe>)
	adds	r2, r0, r1
 80134fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80134fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8013500:	d3f6      	bcc.n	80134f0 <CopyDataInit>
	ldr	r2, =_sbss
 8013502:	4a0a      	ldr	r2, [pc, #40]	; (801352c <LoopForever+0x12>)
	b	LoopFillZerobss
 8013504:	e002      	b.n	801350c <LoopFillZerobss>

08013506 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8013506:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8013508:	f842 3b04 	str.w	r3, [r2], #4

0801350c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 801350c:	4b08      	ldr	r3, [pc, #32]	; (8013530 <LoopForever+0x16>)
	cmp	r2, r3
 801350e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8013510:	d3f9      	bcc.n	8013506 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8013512:	f00e fec7 	bl	80222a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8013516:	f7fd ff67 	bl	80113e8 <main>

0801351a <LoopForever>:

LoopForever:
    b LoopForever
 801351a:	e7fe      	b.n	801351a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 801351c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8013520:	08024794 	.word	0x08024794
	ldr	r0, =_sdata
 8013524:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8013528:	20000104 	.word	0x20000104
	ldr	r2, =_sbss
 801352c:	20000108 	.word	0x20000108
	ldr	r3, = _ebss
 8013530:	20003d28 	.word	0x20003d28

08013534 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8013534:	e7fe      	b.n	8013534 <COMP_IRQHandler>

08013536 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013536:	b580      	push	{r7, lr}
 8013538:	b082      	sub	sp, #8
 801353a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801353c:	2300      	movs	r3, #0
 801353e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8013540:	2004      	movs	r0, #4
 8013542:	f001 fd22 	bl	8014f8a <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8013546:	f7ff ff1f 	bl	8013388 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801354a:	2007      	movs	r0, #7
 801354c:	f7ff fd7a 	bl	8013044 <HAL_InitTick>
 8013550:	4603      	mov	r3, r0
 8013552:	2b00      	cmp	r3, #0
 8013554:	d002      	beq.n	801355c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8013556:	2301      	movs	r3, #1
 8013558:	71fb      	strb	r3, [r7, #7]
 801355a:	e001      	b.n	8013560 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801355c:	f7ff f85c 	bl	8012618 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8013560:	79fb      	ldrb	r3, [r7, #7]
}
 8013562:	4618      	mov	r0, r3
 8013564:	3708      	adds	r7, #8
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}
	...

0801356c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801356c:	b480      	push	{r7}
 801356e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8013570:	4b06      	ldr	r3, [pc, #24]	; (801358c <HAL_IncTick+0x20>)
 8013572:	781b      	ldrb	r3, [r3, #0]
 8013574:	461a      	mov	r2, r3
 8013576:	4b06      	ldr	r3, [pc, #24]	; (8013590 <HAL_IncTick+0x24>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	4413      	add	r3, r2
 801357c:	4a04      	ldr	r2, [pc, #16]	; (8013590 <HAL_IncTick+0x24>)
 801357e:	6013      	str	r3, [r2, #0]
}
 8013580:	bf00      	nop
 8013582:	46bd      	mov	sp, r7
 8013584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013588:	4770      	bx	lr
 801358a:	bf00      	nop
 801358c:	20000098 	.word	0x20000098
 8013590:	20000fc8 	.word	0x20000fc8

08013594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8013594:	b480      	push	{r7}
 8013596:	af00      	add	r7, sp, #0
  return uwTick;
 8013598:	4b03      	ldr	r3, [pc, #12]	; (80135a8 <HAL_GetTick+0x14>)
 801359a:	681b      	ldr	r3, [r3, #0]
}
 801359c:	4618      	mov	r0, r3
 801359e:	46bd      	mov	sp, r7
 80135a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a4:	4770      	bx	lr
 80135a6:	bf00      	nop
 80135a8:	20000fc8 	.word	0x20000fc8

080135ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80135ac:	b480      	push	{r7}
 80135ae:	b083      	sub	sp, #12
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
 80135b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	689b      	ldr	r3, [r3, #8]
 80135ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	431a      	orrs	r2, r3
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	609a      	str	r2, [r3, #8]
}
 80135c6:	bf00      	nop
 80135c8:	370c      	adds	r7, #12
 80135ca:	46bd      	mov	sp, r7
 80135cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d0:	4770      	bx	lr

080135d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80135d2:	b480      	push	{r7}
 80135d4:	b083      	sub	sp, #12
 80135d6:	af00      	add	r7, sp, #0
 80135d8:	6078      	str	r0, [r7, #4]
 80135da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	689b      	ldr	r3, [r3, #8]
 80135e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80135e4:	683b      	ldr	r3, [r7, #0]
 80135e6:	431a      	orrs	r2, r3
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	609a      	str	r2, [r3, #8]
}
 80135ec:	bf00      	nop
 80135ee:	370c      	adds	r7, #12
 80135f0:	46bd      	mov	sp, r7
 80135f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f6:	4770      	bx	lr

080135f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80135f8:	b480      	push	{r7}
 80135fa:	b083      	sub	sp, #12
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	689b      	ldr	r3, [r3, #8]
 8013604:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8013608:	4618      	mov	r0, r3
 801360a:	370c      	adds	r7, #12
 801360c:	46bd      	mov	sp, r7
 801360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013612:	4770      	bx	lr

08013614 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8013614:	b480      	push	{r7}
 8013616:	b087      	sub	sp, #28
 8013618:	af00      	add	r7, sp, #0
 801361a:	60f8      	str	r0, [r7, #12]
 801361c:	60b9      	str	r1, [r7, #8]
 801361e:	607a      	str	r2, [r7, #4]
 8013620:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	3360      	adds	r3, #96	; 0x60
 8013626:	461a      	mov	r2, r3
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	009b      	lsls	r3, r3, #2
 801362c:	4413      	add	r3, r2
 801362e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8013630:	697b      	ldr	r3, [r7, #20]
 8013632:	681a      	ldr	r2, [r3, #0]
 8013634:	4b08      	ldr	r3, [pc, #32]	; (8013658 <LL_ADC_SetOffset+0x44>)
 8013636:	4013      	ands	r3, r2
 8013638:	687a      	ldr	r2, [r7, #4]
 801363a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 801363e:	683a      	ldr	r2, [r7, #0]
 8013640:	430a      	orrs	r2, r1
 8013642:	4313      	orrs	r3, r2
 8013644:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 801364c:	bf00      	nop
 801364e:	371c      	adds	r7, #28
 8013650:	46bd      	mov	sp, r7
 8013652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013656:	4770      	bx	lr
 8013658:	03fff000 	.word	0x03fff000

0801365c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 801365c:	b480      	push	{r7}
 801365e:	b085      	sub	sp, #20
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
 8013664:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	3360      	adds	r3, #96	; 0x60
 801366a:	461a      	mov	r2, r3
 801366c:	683b      	ldr	r3, [r7, #0]
 801366e:	009b      	lsls	r3, r3, #2
 8013670:	4413      	add	r3, r2
 8013672:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 801367c:	4618      	mov	r0, r3
 801367e:	3714      	adds	r7, #20
 8013680:	46bd      	mov	sp, r7
 8013682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013686:	4770      	bx	lr

08013688 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8013688:	b480      	push	{r7}
 801368a:	b087      	sub	sp, #28
 801368c:	af00      	add	r7, sp, #0
 801368e:	60f8      	str	r0, [r7, #12]
 8013690:	60b9      	str	r1, [r7, #8]
 8013692:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	3360      	adds	r3, #96	; 0x60
 8013698:	461a      	mov	r2, r3
 801369a:	68bb      	ldr	r3, [r7, #8]
 801369c:	009b      	lsls	r3, r3, #2
 801369e:	4413      	add	r3, r2
 80136a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	431a      	orrs	r2, r3
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80136b2:	bf00      	nop
 80136b4:	371c      	adds	r7, #28
 80136b6:	46bd      	mov	sp, r7
 80136b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136bc:	4770      	bx	lr

080136be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80136be:	b480      	push	{r7}
 80136c0:	b083      	sub	sp, #12
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	6078      	str	r0, [r7, #4]
 80136c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	695b      	ldr	r3, [r3, #20]
 80136cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80136d0:	683b      	ldr	r3, [r7, #0]
 80136d2:	431a      	orrs	r2, r3
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	615a      	str	r2, [r3, #20]
}
 80136d8:	bf00      	nop
 80136da:	370c      	adds	r7, #12
 80136dc:	46bd      	mov	sp, r7
 80136de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e2:	4770      	bx	lr

080136e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80136e4:	b480      	push	{r7}
 80136e6:	b083      	sub	sp, #12
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	68db      	ldr	r3, [r3, #12]
 80136f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d101      	bne.n	80136fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80136f8:	2301      	movs	r3, #1
 80136fa:	e000      	b.n	80136fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80136fc:	2300      	movs	r3, #0
}
 80136fe:	4618      	mov	r0, r3
 8013700:	370c      	adds	r7, #12
 8013702:	46bd      	mov	sp, r7
 8013704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013708:	4770      	bx	lr

0801370a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 801370a:	b480      	push	{r7}
 801370c:	b087      	sub	sp, #28
 801370e:	af00      	add	r7, sp, #0
 8013710:	60f8      	str	r0, [r7, #12]
 8013712:	60b9      	str	r1, [r7, #8]
 8013714:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	3330      	adds	r3, #48	; 0x30
 801371a:	461a      	mov	r2, r3
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	0a1b      	lsrs	r3, r3, #8
 8013720:	009b      	lsls	r3, r3, #2
 8013722:	f003 030c 	and.w	r3, r3, #12
 8013726:	4413      	add	r3, r2
 8013728:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	681a      	ldr	r2, [r3, #0]
 801372e:	68bb      	ldr	r3, [r7, #8]
 8013730:	f003 031f 	and.w	r3, r3, #31
 8013734:	211f      	movs	r1, #31
 8013736:	fa01 f303 	lsl.w	r3, r1, r3
 801373a:	43db      	mvns	r3, r3
 801373c:	401a      	ands	r2, r3
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	0e9b      	lsrs	r3, r3, #26
 8013742:	f003 011f 	and.w	r1, r3, #31
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	f003 031f 	and.w	r3, r3, #31
 801374c:	fa01 f303 	lsl.w	r3, r1, r3
 8013750:	431a      	orrs	r2, r3
 8013752:	697b      	ldr	r3, [r7, #20]
 8013754:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8013756:	bf00      	nop
 8013758:	371c      	adds	r7, #28
 801375a:	46bd      	mov	sp, r7
 801375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013760:	4770      	bx	lr

08013762 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8013762:	b480      	push	{r7}
 8013764:	b083      	sub	sp, #12
 8013766:	af00      	add	r7, sp, #0
 8013768:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801376e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013772:	2b00      	cmp	r3, #0
 8013774:	d101      	bne.n	801377a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8013776:	2301      	movs	r3, #1
 8013778:	e000      	b.n	801377c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 801377a:	2300      	movs	r3, #0
}
 801377c:	4618      	mov	r0, r3
 801377e:	370c      	adds	r7, #12
 8013780:	46bd      	mov	sp, r7
 8013782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013786:	4770      	bx	lr

08013788 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8013788:	b480      	push	{r7}
 801378a:	b087      	sub	sp, #28
 801378c:	af00      	add	r7, sp, #0
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	60b9      	str	r1, [r7, #8]
 8013792:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	3314      	adds	r3, #20
 8013798:	461a      	mov	r2, r3
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	0e5b      	lsrs	r3, r3, #25
 801379e:	009b      	lsls	r3, r3, #2
 80137a0:	f003 0304 	and.w	r3, r3, #4
 80137a4:	4413      	add	r3, r2
 80137a6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	681a      	ldr	r2, [r3, #0]
 80137ac:	68bb      	ldr	r3, [r7, #8]
 80137ae:	0d1b      	lsrs	r3, r3, #20
 80137b0:	f003 031f 	and.w	r3, r3, #31
 80137b4:	2107      	movs	r1, #7
 80137b6:	fa01 f303 	lsl.w	r3, r1, r3
 80137ba:	43db      	mvns	r3, r3
 80137bc:	401a      	ands	r2, r3
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	0d1b      	lsrs	r3, r3, #20
 80137c2:	f003 031f 	and.w	r3, r3, #31
 80137c6:	6879      	ldr	r1, [r7, #4]
 80137c8:	fa01 f303 	lsl.w	r3, r1, r3
 80137cc:	431a      	orrs	r2, r3
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80137d2:	bf00      	nop
 80137d4:	371c      	adds	r7, #28
 80137d6:	46bd      	mov	sp, r7
 80137d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137dc:	4770      	bx	lr
	...

080137e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80137e0:	b480      	push	{r7}
 80137e2:	b085      	sub	sp, #20
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	60f8      	str	r0, [r7, #12]
 80137e8:	60b9      	str	r1, [r7, #8]
 80137ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80137f8:	43db      	mvns	r3, r3
 80137fa:	401a      	ands	r2, r3
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f003 0318 	and.w	r3, r3, #24
 8013802:	4908      	ldr	r1, [pc, #32]	; (8013824 <LL_ADC_SetChannelSingleDiff+0x44>)
 8013804:	40d9      	lsrs	r1, r3
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	400b      	ands	r3, r1
 801380a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801380e:	431a      	orrs	r2, r3
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8013816:	bf00      	nop
 8013818:	3714      	adds	r7, #20
 801381a:	46bd      	mov	sp, r7
 801381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013820:	4770      	bx	lr
 8013822:	bf00      	nop
 8013824:	0007ffff 	.word	0x0007ffff

08013828 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8013828:	b480      	push	{r7}
 801382a:	b083      	sub	sp, #12
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	689b      	ldr	r3, [r3, #8]
 8013834:	f003 031f 	and.w	r3, r3, #31
}
 8013838:	4618      	mov	r0, r3
 801383a:	370c      	adds	r7, #12
 801383c:	46bd      	mov	sp, r7
 801383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013842:	4770      	bx	lr

08013844 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8013844:	b480      	push	{r7}
 8013846:	b083      	sub	sp, #12
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	689b      	ldr	r3, [r3, #8]
 8013850:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8013854:	4618      	mov	r0, r3
 8013856:	370c      	adds	r7, #12
 8013858:	46bd      	mov	sp, r7
 801385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385e:	4770      	bx	lr

08013860 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8013860:	b480      	push	{r7}
 8013862:	b083      	sub	sp, #12
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	689b      	ldr	r3, [r3, #8]
 801386c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8013870:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8013874:	687a      	ldr	r2, [r7, #4]
 8013876:	6093      	str	r3, [r2, #8]
}
 8013878:	bf00      	nop
 801387a:	370c      	adds	r7, #12
 801387c:	46bd      	mov	sp, r7
 801387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013882:	4770      	bx	lr

08013884 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8013884:	b480      	push	{r7}
 8013886:	b083      	sub	sp, #12
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	689b      	ldr	r3, [r3, #8]
 8013890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013898:	d101      	bne.n	801389e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 801389a:	2301      	movs	r3, #1
 801389c:	e000      	b.n	80138a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 801389e:	2300      	movs	r3, #0
}
 80138a0:	4618      	mov	r0, r3
 80138a2:	370c      	adds	r7, #12
 80138a4:	46bd      	mov	sp, r7
 80138a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138aa:	4770      	bx	lr

080138ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80138ac:	b480      	push	{r7}
 80138ae:	b083      	sub	sp, #12
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	689b      	ldr	r3, [r3, #8]
 80138b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80138bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80138c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80138c8:	bf00      	nop
 80138ca:	370c      	adds	r7, #12
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr

080138d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80138d4:	b480      	push	{r7}
 80138d6:	b083      	sub	sp, #12
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	689b      	ldr	r3, [r3, #8]
 80138e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80138e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80138e8:	d101      	bne.n	80138ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80138ea:	2301      	movs	r3, #1
 80138ec:	e000      	b.n	80138f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80138ee:	2300      	movs	r3, #0
}
 80138f0:	4618      	mov	r0, r3
 80138f2:	370c      	adds	r7, #12
 80138f4:	46bd      	mov	sp, r7
 80138f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fa:	4770      	bx	lr

080138fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80138fc:	b480      	push	{r7}
 80138fe:	b083      	sub	sp, #12
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	689b      	ldr	r3, [r3, #8]
 8013908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801390c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8013910:	f043 0201 	orr.w	r2, r3, #1
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8013918:	bf00      	nop
 801391a:	370c      	adds	r7, #12
 801391c:	46bd      	mov	sp, r7
 801391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013922:	4770      	bx	lr

08013924 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8013924:	b480      	push	{r7}
 8013926:	b083      	sub	sp, #12
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	689b      	ldr	r3, [r3, #8]
 8013930:	f003 0301 	and.w	r3, r3, #1
 8013934:	2b01      	cmp	r3, #1
 8013936:	d101      	bne.n	801393c <LL_ADC_IsEnabled+0x18>
 8013938:	2301      	movs	r3, #1
 801393a:	e000      	b.n	801393e <LL_ADC_IsEnabled+0x1a>
 801393c:	2300      	movs	r3, #0
}
 801393e:	4618      	mov	r0, r3
 8013940:	370c      	adds	r7, #12
 8013942:	46bd      	mov	sp, r7
 8013944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013948:	4770      	bx	lr

0801394a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 801394a:	b480      	push	{r7}
 801394c:	b083      	sub	sp, #12
 801394e:	af00      	add	r7, sp, #0
 8013950:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	689b      	ldr	r3, [r3, #8]
 8013956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801395a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801395e:	f043 0204 	orr.w	r2, r3, #4
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8013966:	bf00      	nop
 8013968:	370c      	adds	r7, #12
 801396a:	46bd      	mov	sp, r7
 801396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013970:	4770      	bx	lr

08013972 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8013972:	b480      	push	{r7}
 8013974:	b083      	sub	sp, #12
 8013976:	af00      	add	r7, sp, #0
 8013978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	689b      	ldr	r3, [r3, #8]
 801397e:	f003 0304 	and.w	r3, r3, #4
 8013982:	2b04      	cmp	r3, #4
 8013984:	d101      	bne.n	801398a <LL_ADC_REG_IsConversionOngoing+0x18>
 8013986:	2301      	movs	r3, #1
 8013988:	e000      	b.n	801398c <LL_ADC_REG_IsConversionOngoing+0x1a>
 801398a:	2300      	movs	r3, #0
}
 801398c:	4618      	mov	r0, r3
 801398e:	370c      	adds	r7, #12
 8013990:	46bd      	mov	sp, r7
 8013992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013996:	4770      	bx	lr

08013998 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8013998:	b480      	push	{r7}
 801399a:	b083      	sub	sp, #12
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	689b      	ldr	r3, [r3, #8]
 80139a4:	f003 0308 	and.w	r3, r3, #8
 80139a8:	2b08      	cmp	r3, #8
 80139aa:	d101      	bne.n	80139b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80139ac:	2301      	movs	r3, #1
 80139ae:	e000      	b.n	80139b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80139b0:	2300      	movs	r3, #0
}
 80139b2:	4618      	mov	r0, r3
 80139b4:	370c      	adds	r7, #12
 80139b6:	46bd      	mov	sp, r7
 80139b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139bc:	4770      	bx	lr
	...

080139c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80139c0:	b590      	push	{r4, r7, lr}
 80139c2:	b089      	sub	sp, #36	; 0x24
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80139c8:	2300      	movs	r3, #0
 80139ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80139cc:	2300      	movs	r3, #0
 80139ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d101      	bne.n	80139da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80139d6:	2301      	movs	r3, #1
 80139d8:	e12e      	b.n	8013c38 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	691b      	ldr	r3, [r3, #16]
 80139de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d109      	bne.n	80139fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80139e8:	6878      	ldr	r0, [r7, #4]
 80139ea:	f7fe fe3d 	bl	8012668 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2200      	movs	r2, #0
 80139f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2200      	movs	r2, #0
 80139f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7ff ff3f 	bl	8013884 <LL_ADC_IsDeepPowerDownEnabled>
 8013a06:	4603      	mov	r3, r0
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d004      	beq.n	8013a16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7ff ff25 	bl	8013860 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7ff ff5a 	bl	80138d4 <LL_ADC_IsInternalRegulatorEnabled>
 8013a20:	4603      	mov	r3, r0
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d115      	bne.n	8013a52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f7ff ff3e 	bl	80138ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8013a30:	4b83      	ldr	r3, [pc, #524]	; (8013c40 <HAL_ADC_Init+0x280>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	099b      	lsrs	r3, r3, #6
 8013a36:	4a83      	ldr	r2, [pc, #524]	; (8013c44 <HAL_ADC_Init+0x284>)
 8013a38:	fba2 2303 	umull	r2, r3, r2, r3
 8013a3c:	099b      	lsrs	r3, r3, #6
 8013a3e:	3301      	adds	r3, #1
 8013a40:	005b      	lsls	r3, r3, #1
 8013a42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8013a44:	e002      	b.n	8013a4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	3b01      	subs	r3, #1
 8013a4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d1f9      	bne.n	8013a46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	4618      	mov	r0, r3
 8013a58:	f7ff ff3c 	bl	80138d4 <LL_ADC_IsInternalRegulatorEnabled>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d10d      	bne.n	8013a7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a66:	f043 0210 	orr.w	r2, r3, #16
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013a72:	f043 0201 	orr.w	r2, r3, #1
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	4618      	mov	r0, r3
 8013a84:	f7ff ff75 	bl	8013972 <LL_ADC_REG_IsConversionOngoing>
 8013a88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a8e:	f003 0310 	and.w	r3, r3, #16
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	f040 80c7 	bne.w	8013c26 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8013a98:	697b      	ldr	r3, [r7, #20]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	f040 80c3 	bne.w	8013c26 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013aa4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8013aa8:	f043 0202 	orr.w	r2, r3, #2
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f7ff ff35 	bl	8013924 <LL_ADC_IsEnabled>
 8013aba:	4603      	mov	r3, r0
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d110      	bne.n	8013ae2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8013ac0:	4861      	ldr	r0, [pc, #388]	; (8013c48 <HAL_ADC_Init+0x288>)
 8013ac2:	f7ff ff2f 	bl	8013924 <LL_ADC_IsEnabled>
 8013ac6:	4604      	mov	r4, r0
 8013ac8:	4860      	ldr	r0, [pc, #384]	; (8013c4c <HAL_ADC_Init+0x28c>)
 8013aca:	f7ff ff2b 	bl	8013924 <LL_ADC_IsEnabled>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	4323      	orrs	r3, r4
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d105      	bne.n	8013ae2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	685b      	ldr	r3, [r3, #4]
 8013ada:	4619      	mov	r1, r3
 8013adc:	485c      	ldr	r0, [pc, #368]	; (8013c50 <HAL_ADC_Init+0x290>)
 8013ade:	f7ff fd65 	bl	80135ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	7e5b      	ldrb	r3, [r3, #25]
 8013ae6:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8013aec:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8013af2:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8013af8:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b00:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8013b02:	4313      	orrs	r3, r2
 8013b04:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b0c:	2b01      	cmp	r3, #1
 8013b0e:	d106      	bne.n	8013b1e <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b14:	3b01      	subs	r3, #1
 8013b16:	045b      	lsls	r3, r3, #17
 8013b18:	69ba      	ldr	r2, [r7, #24]
 8013b1a:	4313      	orrs	r3, r2
 8013b1c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d009      	beq.n	8013b3a <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b2a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b32:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8013b34:	69ba      	ldr	r2, [r7, #24]
 8013b36:	4313      	orrs	r3, r2
 8013b38:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	68da      	ldr	r2, [r3, #12]
 8013b40:	4b44      	ldr	r3, [pc, #272]	; (8013c54 <HAL_ADC_Init+0x294>)
 8013b42:	4013      	ands	r3, r2
 8013b44:	687a      	ldr	r2, [r7, #4]
 8013b46:	6812      	ldr	r2, [r2, #0]
 8013b48:	69b9      	ldr	r1, [r7, #24]
 8013b4a:	430b      	orrs	r3, r1
 8013b4c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	4618      	mov	r0, r3
 8013b54:	f7ff ff20 	bl	8013998 <LL_ADC_INJ_IsConversionOngoing>
 8013b58:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8013b5a:	697b      	ldr	r3, [r7, #20]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d140      	bne.n	8013be2 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8013b60:	693b      	ldr	r3, [r7, #16]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d13d      	bne.n	8013be2 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	7e1b      	ldrb	r3, [r3, #24]
 8013b6e:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8013b70:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b78:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8013b7a:	4313      	orrs	r3, r2
 8013b7c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	68db      	ldr	r3, [r3, #12]
 8013b84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013b88:	f023 0306 	bic.w	r3, r3, #6
 8013b8c:	687a      	ldr	r2, [r7, #4]
 8013b8e:	6812      	ldr	r2, [r2, #0]
 8013b90:	69b9      	ldr	r1, [r7, #24]
 8013b92:	430b      	orrs	r3, r1
 8013b94:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013b9c:	2b01      	cmp	r3, #1
 8013b9e:	d118      	bne.n	8013bd2 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	691b      	ldr	r3, [r3, #16]
 8013ba6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8013baa:	f023 0304 	bic.w	r3, r3, #4
 8013bae:	687a      	ldr	r2, [r7, #4]
 8013bb0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8013bb2:	687a      	ldr	r2, [r7, #4]
 8013bb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013bb6:	4311      	orrs	r1, r2
 8013bb8:	687a      	ldr	r2, [r7, #4]
 8013bba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8013bbc:	4311      	orrs	r1, r2
 8013bbe:	687a      	ldr	r2, [r7, #4]
 8013bc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8013bc2:	430a      	orrs	r2, r1
 8013bc4:	431a      	orrs	r2, r3
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	f042 0201 	orr.w	r2, r2, #1
 8013bce:	611a      	str	r2, [r3, #16]
 8013bd0:	e007      	b.n	8013be2 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	691a      	ldr	r2, [r3, #16]
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	f022 0201 	bic.w	r2, r2, #1
 8013be0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	691b      	ldr	r3, [r3, #16]
 8013be6:	2b01      	cmp	r3, #1
 8013be8:	d10c      	bne.n	8013c04 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bf0:	f023 010f 	bic.w	r1, r3, #15
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	69db      	ldr	r3, [r3, #28]
 8013bf8:	1e5a      	subs	r2, r3, #1
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	430a      	orrs	r2, r1
 8013c00:	631a      	str	r2, [r3, #48]	; 0x30
 8013c02:	e007      	b.n	8013c14 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	f022 020f 	bic.w	r2, r2, #15
 8013c12:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c18:	f023 0303 	bic.w	r3, r3, #3
 8013c1c:	f043 0201 	orr.w	r2, r3, #1
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	659a      	str	r2, [r3, #88]	; 0x58
 8013c24:	e007      	b.n	8013c36 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c2a:	f043 0210 	orr.w	r2, r3, #16
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8013c32:	2301      	movs	r3, #1
 8013c34:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8013c36:	7ffb      	ldrb	r3, [r7, #31]
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3724      	adds	r7, #36	; 0x24
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd90      	pop	{r4, r7, pc}
 8013c40:	20000090 	.word	0x20000090
 8013c44:	053e2d63 	.word	0x053e2d63
 8013c48:	42028000 	.word	0x42028000
 8013c4c:	42028100 	.word	0x42028100
 8013c50:	42028300 	.word	0x42028300
 8013c54:	fff0c007 	.word	0xfff0c007

08013c58 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b086      	sub	sp, #24
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	60f8      	str	r0, [r7, #12]
 8013c60:	60b9      	str	r1, [r7, #8]
 8013c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8013c64:	4850      	ldr	r0, [pc, #320]	; (8013da8 <HAL_ADC_Start_DMA+0x150>)
 8013c66:	f7ff fddf 	bl	8013828 <LL_ADC_GetMultimode>
 8013c6a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7ff fe7e 	bl	8013972 <LL_ADC_REG_IsConversionOngoing>
 8013c76:	4603      	mov	r3, r0
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	f040 808e 	bne.w	8013d9a <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8013c84:	2b01      	cmp	r3, #1
 8013c86:	d101      	bne.n	8013c8c <HAL_ADC_Start_DMA+0x34>
 8013c88:	2302      	movs	r3, #2
 8013c8a:	e089      	b.n	8013da0 <HAL_ADC_Start_DMA+0x148>
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	2201      	movs	r2, #1
 8013c90:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8013c94:	693b      	ldr	r3, [r7, #16]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d005      	beq.n	8013ca6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8013c9a:	693b      	ldr	r3, [r7, #16]
 8013c9c:	2b05      	cmp	r3, #5
 8013c9e:	d002      	beq.n	8013ca6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8013ca0:	693b      	ldr	r3, [r7, #16]
 8013ca2:	2b09      	cmp	r3, #9
 8013ca4:	d172      	bne.n	8013d8c <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8013ca6:	68f8      	ldr	r0, [r7, #12]
 8013ca8:	f000 feac 	bl	8014a04 <ADC_Enable>
 8013cac:	4603      	mov	r3, r0
 8013cae:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8013cb0:	7dfb      	ldrb	r3, [r7, #23]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d165      	bne.n	8013d82 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013cba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8013cbe:	f023 0301 	bic.w	r3, r3, #1
 8013cc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	4a37      	ldr	r2, [pc, #220]	; (8013dac <HAL_ADC_Start_DMA+0x154>)
 8013cd0:	4293      	cmp	r3, r2
 8013cd2:	d002      	beq.n	8013cda <HAL_ADC_Start_DMA+0x82>
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	e000      	b.n	8013cdc <HAL_ADC_Start_DMA+0x84>
 8013cda:	4b35      	ldr	r3, [pc, #212]	; (8013db0 <HAL_ADC_Start_DMA+0x158>)
 8013cdc:	68fa      	ldr	r2, [r7, #12]
 8013cde:	6812      	ldr	r2, [r2, #0]
 8013ce0:	4293      	cmp	r3, r2
 8013ce2:	d002      	beq.n	8013cea <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8013ce4:	693b      	ldr	r3, [r7, #16]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d105      	bne.n	8013cf6 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013cee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d006      	beq.n	8013d10 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013d06:	f023 0206 	bic.w	r2, r3, #6
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8013d0e:	e002      	b.n	8013d16 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	2200      	movs	r2, #0
 8013d14:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d1a:	4a26      	ldr	r2, [pc, #152]	; (8013db4 <HAL_ADC_Start_DMA+0x15c>)
 8013d1c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d22:	4a25      	ldr	r2, [pc, #148]	; (8013db8 <HAL_ADC_Start_DMA+0x160>)
 8013d24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d2a:	4a24      	ldr	r2, [pc, #144]	; (8013dbc <HAL_ADC_Start_DMA+0x164>)
 8013d2c:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	221c      	movs	r2, #28
 8013d34:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	2200      	movs	r2, #0
 8013d3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	685a      	ldr	r2, [r3, #4]
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	f042 0210 	orr.w	r2, r2, #16
 8013d4c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	68da      	ldr	r2, [r3, #12]
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	f042 0201 	orr.w	r2, r2, #1
 8013d5c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	3340      	adds	r3, #64	; 0x40
 8013d68:	4619      	mov	r1, r3
 8013d6a:	68ba      	ldr	r2, [r7, #8]
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	f001 f9e7 	bl	8015140 <HAL_DMA_Start_IT>
 8013d72:	4603      	mov	r3, r0
 8013d74:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f7ff fde5 	bl	801394a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8013d80:	e00d      	b.n	8013d9e <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	2200      	movs	r2, #0
 8013d86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8013d8a:	e008      	b.n	8013d9e <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8013d8c:	2301      	movs	r3, #1
 8013d8e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	2200      	movs	r2, #0
 8013d94:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8013d98:	e001      	b.n	8013d9e <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8013d9a:	2302      	movs	r3, #2
 8013d9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8013d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	3718      	adds	r7, #24
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}
 8013da8:	42028300 	.word	0x42028300
 8013dac:	42028100 	.word	0x42028100
 8013db0:	42028000 	.word	0x42028000
 8013db4:	08014b11 	.word	0x08014b11
 8013db8:	08014be9 	.word	0x08014be9
 8013dbc:	08014c05 	.word	0x08014c05

08013dc0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b08a      	sub	sp, #40	; 0x28
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8013dc8:	2300      	movs	r3, #0
 8013dca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	685b      	ldr	r3, [r3, #4]
 8013dda:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8013ddc:	4882      	ldr	r0, [pc, #520]	; (8013fe8 <HAL_ADC_IRQHandler+0x228>)
 8013dde:	f7ff fd23 	bl	8013828 <LL_ADC_GetMultimode>
 8013de2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8013de4:	69fb      	ldr	r3, [r7, #28]
 8013de6:	f003 0302 	and.w	r3, r3, #2
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d017      	beq.n	8013e1e <HAL_ADC_IRQHandler+0x5e>
 8013dee:	69bb      	ldr	r3, [r7, #24]
 8013df0:	f003 0302 	and.w	r3, r3, #2
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d012      	beq.n	8013e1e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013dfc:	f003 0310 	and.w	r3, r3, #16
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d105      	bne.n	8013e10 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e08:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	f000 ff5f 	bl	8014cd4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	2202      	movs	r2, #2
 8013e1c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8013e1e:	69fb      	ldr	r3, [r7, #28]
 8013e20:	f003 0304 	and.w	r3, r3, #4
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d004      	beq.n	8013e32 <HAL_ADC_IRQHandler+0x72>
 8013e28:	69bb      	ldr	r3, [r7, #24]
 8013e2a:	f003 0304 	and.w	r3, r3, #4
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d10a      	bne.n	8013e48 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8013e32:	69fb      	ldr	r3, [r7, #28]
 8013e34:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	f000 8083 	beq.w	8013f44 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8013e3e:	69bb      	ldr	r3, [r7, #24]
 8013e40:	f003 0308 	and.w	r3, r3, #8
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d07d      	beq.n	8013f44 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e4c:	f003 0310 	and.w	r3, r3, #16
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d105      	bne.n	8013e60 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	4618      	mov	r0, r3
 8013e66:	f7ff fc3d 	bl	80136e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d062      	beq.n	8013f36 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	4a5d      	ldr	r2, [pc, #372]	; (8013fec <HAL_ADC_IRQHandler+0x22c>)
 8013e76:	4293      	cmp	r3, r2
 8013e78:	d002      	beq.n	8013e80 <HAL_ADC_IRQHandler+0xc0>
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	e000      	b.n	8013e82 <HAL_ADC_IRQHandler+0xc2>
 8013e80:	4b5b      	ldr	r3, [pc, #364]	; (8013ff0 <HAL_ADC_IRQHandler+0x230>)
 8013e82:	687a      	ldr	r2, [r7, #4]
 8013e84:	6812      	ldr	r2, [r2, #0]
 8013e86:	4293      	cmp	r3, r2
 8013e88:	d008      	beq.n	8013e9c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8013e8a:	697b      	ldr	r3, [r7, #20]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d005      	beq.n	8013e9c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	2b05      	cmp	r3, #5
 8013e94:	d002      	beq.n	8013e9c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	2b09      	cmp	r3, #9
 8013e9a:	d104      	bne.n	8013ea6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	68db      	ldr	r3, [r3, #12]
 8013ea2:	623b      	str	r3, [r7, #32]
 8013ea4:	e00c      	b.n	8013ec0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	4a50      	ldr	r2, [pc, #320]	; (8013fec <HAL_ADC_IRQHandler+0x22c>)
 8013eac:	4293      	cmp	r3, r2
 8013eae:	d002      	beq.n	8013eb6 <HAL_ADC_IRQHandler+0xf6>
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	e000      	b.n	8013eb8 <HAL_ADC_IRQHandler+0xf8>
 8013eb6:	4b4e      	ldr	r3, [pc, #312]	; (8013ff0 <HAL_ADC_IRQHandler+0x230>)
 8013eb8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	68db      	ldr	r3, [r3, #12]
 8013ebe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8013ec0:	6a3b      	ldr	r3, [r7, #32]
 8013ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d135      	bne.n	8013f36 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	f003 0308 	and.w	r3, r3, #8
 8013ed4:	2b08      	cmp	r3, #8
 8013ed6:	d12e      	bne.n	8013f36 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	4618      	mov	r0, r3
 8013ede:	f7ff fd48 	bl	8013972 <LL_ADC_REG_IsConversionOngoing>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d11a      	bne.n	8013f1e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	685a      	ldr	r2, [r3, #4]
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	f022 020c 	bic.w	r2, r2, #12
 8013ef6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013efc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d112      	bne.n	8013f36 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f14:	f043 0201 	orr.w	r2, r3, #1
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	659a      	str	r2, [r3, #88]	; 0x58
 8013f1c:	e00b      	b.n	8013f36 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f22:	f043 0210 	orr.w	r2, r3, #16
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013f2e:	f043 0201 	orr.w	r2, r3, #1
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f7ee f8be 	bl	80020b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	220c      	movs	r2, #12
 8013f42:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8013f44:	69fb      	ldr	r3, [r7, #28]
 8013f46:	f003 0320 	and.w	r3, r3, #32
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d004      	beq.n	8013f58 <HAL_ADC_IRQHandler+0x198>
 8013f4e:	69bb      	ldr	r3, [r7, #24]
 8013f50:	f003 0320 	and.w	r3, r3, #32
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d10b      	bne.n	8013f70 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8013f58:	69fb      	ldr	r3, [r7, #28]
 8013f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	f000 809f 	beq.w	80140a2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8013f64:	69bb      	ldr	r3, [r7, #24]
 8013f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	f000 8099 	beq.w	80140a2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f74:	f003 0310 	and.w	r3, r3, #16
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d105      	bne.n	8013f88 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f80:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f7ff fbe8 	bl	8013762 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8013f92:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7ff fba3 	bl	80136e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8013f9e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	4a11      	ldr	r2, [pc, #68]	; (8013fec <HAL_ADC_IRQHandler+0x22c>)
 8013fa6:	4293      	cmp	r3, r2
 8013fa8:	d002      	beq.n	8013fb0 <HAL_ADC_IRQHandler+0x1f0>
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	e000      	b.n	8013fb2 <HAL_ADC_IRQHandler+0x1f2>
 8013fb0:	4b0f      	ldr	r3, [pc, #60]	; (8013ff0 <HAL_ADC_IRQHandler+0x230>)
 8013fb2:	687a      	ldr	r2, [r7, #4]
 8013fb4:	6812      	ldr	r2, [r2, #0]
 8013fb6:	4293      	cmp	r3, r2
 8013fb8:	d008      	beq.n	8013fcc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8013fba:	697b      	ldr	r3, [r7, #20]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d005      	beq.n	8013fcc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8013fc0:	697b      	ldr	r3, [r7, #20]
 8013fc2:	2b06      	cmp	r3, #6
 8013fc4:	d002      	beq.n	8013fcc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8013fc6:	697b      	ldr	r3, [r7, #20]
 8013fc8:	2b07      	cmp	r3, #7
 8013fca:	d104      	bne.n	8013fd6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	68db      	ldr	r3, [r3, #12]
 8013fd2:	623b      	str	r3, [r7, #32]
 8013fd4:	e013      	b.n	8013ffe <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	4a04      	ldr	r2, [pc, #16]	; (8013fec <HAL_ADC_IRQHandler+0x22c>)
 8013fdc:	4293      	cmp	r3, r2
 8013fde:	d009      	beq.n	8013ff4 <HAL_ADC_IRQHandler+0x234>
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	e007      	b.n	8013ff6 <HAL_ADC_IRQHandler+0x236>
 8013fe6:	bf00      	nop
 8013fe8:	42028300 	.word	0x42028300
 8013fec:	42028100 	.word	0x42028100
 8013ff0:	42028000 	.word	0x42028000
 8013ff4:	4b7d      	ldr	r3, [pc, #500]	; (80141ec <HAL_ADC_IRQHandler+0x42c>)
 8013ff6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8013ff8:	693b      	ldr	r3, [r7, #16]
 8013ffa:	68db      	ldr	r3, [r3, #12]
 8013ffc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d047      	beq.n	8014094 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8014004:	6a3b      	ldr	r3, [r7, #32]
 8014006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801400a:	2b00      	cmp	r3, #0
 801400c:	d007      	beq.n	801401e <HAL_ADC_IRQHandler+0x25e>
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d03f      	beq.n	8014094 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8014014:	6a3b      	ldr	r3, [r7, #32]
 8014016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 801401a:	2b00      	cmp	r3, #0
 801401c:	d13a      	bne.n	8014094 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014028:	2b40      	cmp	r3, #64	; 0x40
 801402a:	d133      	bne.n	8014094 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 801402c:	6a3b      	ldr	r3, [r7, #32]
 801402e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014032:	2b00      	cmp	r3, #0
 8014034:	d12e      	bne.n	8014094 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	4618      	mov	r0, r3
 801403c:	f7ff fcac 	bl	8013998 <LL_ADC_INJ_IsConversionOngoing>
 8014040:	4603      	mov	r3, r0
 8014042:	2b00      	cmp	r3, #0
 8014044:	d11a      	bne.n	801407c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	685a      	ldr	r2, [r3, #4]
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014054:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801405a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801406a:	2b00      	cmp	r3, #0
 801406c:	d112      	bne.n	8014094 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014072:	f043 0201 	orr.w	r2, r3, #1
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	659a      	str	r2, [r3, #88]	; 0x58
 801407a:	e00b      	b.n	8014094 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014080:	f043 0210 	orr.w	r2, r3, #16
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801408c:	f043 0201 	orr.w	r2, r3, #1
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8014094:	6878      	ldr	r0, [r7, #4]
 8014096:	f000 fdf5 	bl	8014c84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	2260      	movs	r2, #96	; 0x60
 80140a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80140a2:	69fb      	ldr	r3, [r7, #28]
 80140a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d011      	beq.n	80140d0 <HAL_ADC_IRQHandler+0x310>
 80140ac:	69bb      	ldr	r3, [r7, #24]
 80140ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d00c      	beq.n	80140d0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80140ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f000 f8a0 	bl	8014208 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	2280      	movs	r2, #128	; 0x80
 80140ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80140d0:	69fb      	ldr	r3, [r7, #28]
 80140d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d012      	beq.n	8014100 <HAL_ADC_IRQHandler+0x340>
 80140da:	69bb      	ldr	r3, [r7, #24]
 80140dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d00d      	beq.n	8014100 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80140e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80140f0:	6878      	ldr	r0, [r7, #4]
 80140f2:	f000 fddb 	bl	8014cac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80140fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8014100:	69fb      	ldr	r3, [r7, #28]
 8014102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014106:	2b00      	cmp	r3, #0
 8014108:	d012      	beq.n	8014130 <HAL_ADC_IRQHandler+0x370>
 801410a:	69bb      	ldr	r3, [r7, #24]
 801410c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014110:	2b00      	cmp	r3, #0
 8014112:	d00d      	beq.n	8014130 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014118:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8014120:	6878      	ldr	r0, [r7, #4]
 8014122:	f000 fdcd 	bl	8014cc0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801412e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8014130:	69fb      	ldr	r3, [r7, #28]
 8014132:	f003 0310 	and.w	r3, r3, #16
 8014136:	2b00      	cmp	r3, #0
 8014138:	d036      	beq.n	80141a8 <HAL_ADC_IRQHandler+0x3e8>
 801413a:	69bb      	ldr	r3, [r7, #24]
 801413c:	f003 0310 	and.w	r3, r3, #16
 8014140:	2b00      	cmp	r3, #0
 8014142:	d031      	beq.n	80141a8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014148:	2b00      	cmp	r3, #0
 801414a:	d102      	bne.n	8014152 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 801414c:	2301      	movs	r3, #1
 801414e:	627b      	str	r3, [r7, #36]	; 0x24
 8014150:	e014      	b.n	801417c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d008      	beq.n	801416a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8014158:	4825      	ldr	r0, [pc, #148]	; (80141f0 <HAL_ADC_IRQHandler+0x430>)
 801415a:	f7ff fb73 	bl	8013844 <LL_ADC_GetMultiDMATransfer>
 801415e:	4603      	mov	r3, r0
 8014160:	2b00      	cmp	r3, #0
 8014162:	d00b      	beq.n	801417c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8014164:	2301      	movs	r3, #1
 8014166:	627b      	str	r3, [r7, #36]	; 0x24
 8014168:	e008      	b.n	801417c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	68db      	ldr	r3, [r3, #12]
 8014170:	f003 0301 	and.w	r3, r3, #1
 8014174:	2b00      	cmp	r3, #0
 8014176:	d001      	beq.n	801417c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8014178:	2301      	movs	r3, #1
 801417a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 801417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801417e:	2b01      	cmp	r3, #1
 8014180:	d10e      	bne.n	80141a0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014186:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014192:	f043 0202 	orr.w	r2, r3, #2
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 801419a:	6878      	ldr	r0, [r7, #4]
 801419c:	f000 f83e 	bl	801421c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	2210      	movs	r2, #16
 80141a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80141a8:	69fb      	ldr	r3, [r7, #28]
 80141aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d018      	beq.n	80141e4 <HAL_ADC_IRQHandler+0x424>
 80141b2:	69bb      	ldr	r3, [r7, #24]
 80141b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d013      	beq.n	80141e4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141c0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80141cc:	f043 0208 	orr.w	r2, r3, #8
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80141dc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	f000 fd5a 	bl	8014c98 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80141e4:	bf00      	nop
 80141e6:	3728      	adds	r7, #40	; 0x28
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	42028000 	.word	0x42028000
 80141f0:	42028300 	.word	0x42028300

080141f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80141f4:	b480      	push	{r7}
 80141f6:	b083      	sub	sp, #12
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80141fc:	bf00      	nop
 80141fe:	370c      	adds	r7, #12
 8014200:	46bd      	mov	sp, r7
 8014202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014206:	4770      	bx	lr

08014208 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8014208:	b480      	push	{r7}
 801420a:	b083      	sub	sp, #12
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8014210:	bf00      	nop
 8014212:	370c      	adds	r7, #12
 8014214:	46bd      	mov	sp, r7
 8014216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421a:	4770      	bx	lr

0801421c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801421c:	b480      	push	{r7}
 801421e:	b083      	sub	sp, #12
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8014224:	bf00      	nop
 8014226:	370c      	adds	r7, #12
 8014228:	46bd      	mov	sp, r7
 801422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422e:	4770      	bx	lr

08014230 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8014230:	b590      	push	{r4, r7, lr}
 8014232:	b0b7      	sub	sp, #220	; 0xdc
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
 8014238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801423a:	2300      	movs	r3, #0
 801423c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8014240:	2300      	movs	r3, #0
 8014242:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801424a:	2b01      	cmp	r3, #1
 801424c:	d101      	bne.n	8014252 <HAL_ADC_ConfigChannel+0x22>
 801424e:	2302      	movs	r3, #2
 8014250:	e3c1      	b.n	80149d6 <HAL_ADC_ConfigChannel+0x7a6>
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	2201      	movs	r2, #1
 8014256:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	4618      	mov	r0, r3
 8014260:	f7ff fb87 	bl	8013972 <LL_ADC_REG_IsConversionOngoing>
 8014264:	4603      	mov	r3, r0
 8014266:	2b00      	cmp	r3, #0
 8014268:	f040 83a6 	bne.w	80149b8 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	6818      	ldr	r0, [r3, #0]
 8014270:	683b      	ldr	r3, [r7, #0]
 8014272:	6859      	ldr	r1, [r3, #4]
 8014274:	683b      	ldr	r3, [r7, #0]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	461a      	mov	r2, r3
 801427a:	f7ff fa46 	bl	801370a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	4618      	mov	r0, r3
 8014284:	f7ff fb75 	bl	8013972 <LL_ADC_REG_IsConversionOngoing>
 8014288:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	4618      	mov	r0, r3
 8014292:	f7ff fb81 	bl	8013998 <LL_ADC_INJ_IsConversionOngoing>
 8014296:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801429a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801429e:	2b00      	cmp	r3, #0
 80142a0:	f040 81c1 	bne.w	8014626 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80142a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	f040 81bc 	bne.w	8014626 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	689b      	ldr	r3, [r3, #8]
 80142b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80142b6:	d10f      	bne.n	80142d8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	6818      	ldr	r0, [r3, #0]
 80142bc:	683b      	ldr	r3, [r7, #0]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	2200      	movs	r2, #0
 80142c2:	4619      	mov	r1, r3
 80142c4:	f7ff fa60 	bl	8013788 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80142d0:	4618      	mov	r0, r3
 80142d2:	f7ff f9f4 	bl	80136be <LL_ADC_SetSamplingTimeCommonConfig>
 80142d6:	e00e      	b.n	80142f6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6818      	ldr	r0, [r3, #0]
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	6819      	ldr	r1, [r3, #0]
 80142e0:	683b      	ldr	r3, [r7, #0]
 80142e2:	689b      	ldr	r3, [r3, #8]
 80142e4:	461a      	mov	r2, r3
 80142e6:	f7ff fa4f 	bl	8013788 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	2100      	movs	r1, #0
 80142f0:	4618      	mov	r0, r3
 80142f2:	f7ff f9e4 	bl	80136be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80142f6:	683b      	ldr	r3, [r7, #0]
 80142f8:	695a      	ldr	r2, [r3, #20]
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	68db      	ldr	r3, [r3, #12]
 8014300:	08db      	lsrs	r3, r3, #3
 8014302:	f003 0303 	and.w	r3, r3, #3
 8014306:	005b      	lsls	r3, r3, #1
 8014308:	fa02 f303 	lsl.w	r3, r2, r3
 801430c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8014310:	683b      	ldr	r3, [r7, #0]
 8014312:	691b      	ldr	r3, [r3, #16]
 8014314:	2b04      	cmp	r3, #4
 8014316:	d00a      	beq.n	801432e <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	6818      	ldr	r0, [r3, #0]
 801431c:	683b      	ldr	r3, [r7, #0]
 801431e:	6919      	ldr	r1, [r3, #16]
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	681a      	ldr	r2, [r3, #0]
 8014324:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014328:	f7ff f974 	bl	8013614 <LL_ADC_SetOffset>
 801432c:	e17b      	b.n	8014626 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	2100      	movs	r1, #0
 8014334:	4618      	mov	r0, r3
 8014336:	f7ff f991 	bl	801365c <LL_ADC_GetOffsetChannel>
 801433a:	4603      	mov	r3, r0
 801433c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014340:	2b00      	cmp	r3, #0
 8014342:	d10a      	bne.n	801435a <HAL_ADC_ConfigChannel+0x12a>
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	2100      	movs	r1, #0
 801434a:	4618      	mov	r0, r3
 801434c:	f7ff f986 	bl	801365c <LL_ADC_GetOffsetChannel>
 8014350:	4603      	mov	r3, r0
 8014352:	0e9b      	lsrs	r3, r3, #26
 8014354:	f003 021f 	and.w	r2, r3, #31
 8014358:	e01e      	b.n	8014398 <HAL_ADC_ConfigChannel+0x168>
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	2100      	movs	r1, #0
 8014360:	4618      	mov	r0, r3
 8014362:	f7ff f97b 	bl	801365c <LL_ADC_GetOffsetChannel>
 8014366:	4603      	mov	r3, r0
 8014368:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801436c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014370:	fa93 f3a3 	rbit	r3, r3
 8014374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8014378:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801437c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8014380:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014384:	2b00      	cmp	r3, #0
 8014386:	d101      	bne.n	801438c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8014388:	2320      	movs	r3, #32
 801438a:	e004      	b.n	8014396 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 801438c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014390:	fab3 f383 	clz	r3, r3
 8014394:	b2db      	uxtb	r3, r3
 8014396:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d105      	bne.n	80143b0 <HAL_ADC_ConfigChannel+0x180>
 80143a4:	683b      	ldr	r3, [r7, #0]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	0e9b      	lsrs	r3, r3, #26
 80143aa:	f003 031f 	and.w	r3, r3, #31
 80143ae:	e018      	b.n	80143e2 <HAL_ADC_ConfigChannel+0x1b2>
 80143b0:	683b      	ldr	r3, [r7, #0]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80143b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80143bc:	fa93 f3a3 	rbit	r3, r3
 80143c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80143c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80143c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80143cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d101      	bne.n	80143d8 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 80143d4:	2320      	movs	r3, #32
 80143d6:	e004      	b.n	80143e2 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 80143d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80143dc:	fab3 f383 	clz	r3, r3
 80143e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d106      	bne.n	80143f4 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	2200      	movs	r2, #0
 80143ec:	2100      	movs	r1, #0
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7ff f94a 	bl	8013688 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	2101      	movs	r1, #1
 80143fa:	4618      	mov	r0, r3
 80143fc:	f7ff f92e 	bl	801365c <LL_ADC_GetOffsetChannel>
 8014400:	4603      	mov	r3, r0
 8014402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014406:	2b00      	cmp	r3, #0
 8014408:	d10a      	bne.n	8014420 <HAL_ADC_ConfigChannel+0x1f0>
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	2101      	movs	r1, #1
 8014410:	4618      	mov	r0, r3
 8014412:	f7ff f923 	bl	801365c <LL_ADC_GetOffsetChannel>
 8014416:	4603      	mov	r3, r0
 8014418:	0e9b      	lsrs	r3, r3, #26
 801441a:	f003 021f 	and.w	r2, r3, #31
 801441e:	e01e      	b.n	801445e <HAL_ADC_ConfigChannel+0x22e>
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	2101      	movs	r1, #1
 8014426:	4618      	mov	r0, r3
 8014428:	f7ff f918 	bl	801365c <LL_ADC_GetOffsetChannel>
 801442c:	4603      	mov	r3, r0
 801442e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014436:	fa93 f3a3 	rbit	r3, r3
 801443a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 801443e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014442:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8014446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801444a:	2b00      	cmp	r3, #0
 801444c:	d101      	bne.n	8014452 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 801444e:	2320      	movs	r3, #32
 8014450:	e004      	b.n	801445c <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8014452:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014456:	fab3 f383 	clz	r3, r3
 801445a:	b2db      	uxtb	r3, r3
 801445c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014466:	2b00      	cmp	r3, #0
 8014468:	d105      	bne.n	8014476 <HAL_ADC_ConfigChannel+0x246>
 801446a:	683b      	ldr	r3, [r7, #0]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	0e9b      	lsrs	r3, r3, #26
 8014470:	f003 031f 	and.w	r3, r3, #31
 8014474:	e018      	b.n	80144a8 <HAL_ADC_ConfigChannel+0x278>
 8014476:	683b      	ldr	r3, [r7, #0]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801447e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014482:	fa93 f3a3 	rbit	r3, r3
 8014486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 801448a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801448e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8014492:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014496:	2b00      	cmp	r3, #0
 8014498:	d101      	bne.n	801449e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 801449a:	2320      	movs	r3, #32
 801449c:	e004      	b.n	80144a8 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 801449e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80144a2:	fab3 f383 	clz	r3, r3
 80144a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80144a8:	429a      	cmp	r2, r3
 80144aa:	d106      	bne.n	80144ba <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	2200      	movs	r2, #0
 80144b2:	2101      	movs	r1, #1
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7ff f8e7 	bl	8013688 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	2102      	movs	r1, #2
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7ff f8cb 	bl	801365c <LL_ADC_GetOffsetChannel>
 80144c6:	4603      	mov	r3, r0
 80144c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d10a      	bne.n	80144e6 <HAL_ADC_ConfigChannel+0x2b6>
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	2102      	movs	r1, #2
 80144d6:	4618      	mov	r0, r3
 80144d8:	f7ff f8c0 	bl	801365c <LL_ADC_GetOffsetChannel>
 80144dc:	4603      	mov	r3, r0
 80144de:	0e9b      	lsrs	r3, r3, #26
 80144e0:	f003 021f 	and.w	r2, r3, #31
 80144e4:	e01e      	b.n	8014524 <HAL_ADC_ConfigChannel+0x2f4>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	2102      	movs	r1, #2
 80144ec:	4618      	mov	r0, r3
 80144ee:	f7ff f8b5 	bl	801365c <LL_ADC_GetOffsetChannel>
 80144f2:	4603      	mov	r3, r0
 80144f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80144f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80144fc:	fa93 f3a3 	rbit	r3, r3
 8014500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8014504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014508:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 801450c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014510:	2b00      	cmp	r3, #0
 8014512:	d101      	bne.n	8014518 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8014514:	2320      	movs	r3, #32
 8014516:	e004      	b.n	8014522 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8014518:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801451c:	fab3 f383 	clz	r3, r3
 8014520:	b2db      	uxtb	r3, r3
 8014522:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801452c:	2b00      	cmp	r3, #0
 801452e:	d105      	bne.n	801453c <HAL_ADC_ConfigChannel+0x30c>
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	0e9b      	lsrs	r3, r3, #26
 8014536:	f003 031f 	and.w	r3, r3, #31
 801453a:	e016      	b.n	801456a <HAL_ADC_ConfigChannel+0x33a>
 801453c:	683b      	ldr	r3, [r7, #0]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014544:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014548:	fa93 f3a3 	rbit	r3, r3
 801454c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 801454e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8014554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014558:	2b00      	cmp	r3, #0
 801455a:	d101      	bne.n	8014560 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 801455c:	2320      	movs	r3, #32
 801455e:	e004      	b.n	801456a <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8014560:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014564:	fab3 f383 	clz	r3, r3
 8014568:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801456a:	429a      	cmp	r2, r3
 801456c:	d106      	bne.n	801457c <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	2200      	movs	r2, #0
 8014574:	2102      	movs	r1, #2
 8014576:	4618      	mov	r0, r3
 8014578:	f7ff f886 	bl	8013688 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	2103      	movs	r1, #3
 8014582:	4618      	mov	r0, r3
 8014584:	f7ff f86a 	bl	801365c <LL_ADC_GetOffsetChannel>
 8014588:	4603      	mov	r3, r0
 801458a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801458e:	2b00      	cmp	r3, #0
 8014590:	d10a      	bne.n	80145a8 <HAL_ADC_ConfigChannel+0x378>
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	2103      	movs	r1, #3
 8014598:	4618      	mov	r0, r3
 801459a:	f7ff f85f 	bl	801365c <LL_ADC_GetOffsetChannel>
 801459e:	4603      	mov	r3, r0
 80145a0:	0e9b      	lsrs	r3, r3, #26
 80145a2:	f003 021f 	and.w	r2, r3, #31
 80145a6:	e017      	b.n	80145d8 <HAL_ADC_ConfigChannel+0x3a8>
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	2103      	movs	r1, #3
 80145ae:	4618      	mov	r0, r3
 80145b0:	f7ff f854 	bl	801365c <LL_ADC_GetOffsetChannel>
 80145b4:	4603      	mov	r3, r0
 80145b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80145b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80145ba:	fa93 f3a3 	rbit	r3, r3
 80145be:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80145c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80145c2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80145c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d101      	bne.n	80145ce <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 80145ca:	2320      	movs	r3, #32
 80145cc:	e003      	b.n	80145d6 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 80145ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80145d0:	fab3 f383 	clz	r3, r3
 80145d4:	b2db      	uxtb	r3, r3
 80145d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d105      	bne.n	80145f0 <HAL_ADC_ConfigChannel+0x3c0>
 80145e4:	683b      	ldr	r3, [r7, #0]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	0e9b      	lsrs	r3, r3, #26
 80145ea:	f003 031f 	and.w	r3, r3, #31
 80145ee:	e011      	b.n	8014614 <HAL_ADC_ConfigChannel+0x3e4>
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80145f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80145f8:	fa93 f3a3 	rbit	r3, r3
 80145fc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80145fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014600:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8014602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014604:	2b00      	cmp	r3, #0
 8014606:	d101      	bne.n	801460c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8014608:	2320      	movs	r3, #32
 801460a:	e003      	b.n	8014614 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 801460c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801460e:	fab3 f383 	clz	r3, r3
 8014612:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8014614:	429a      	cmp	r2, r3
 8014616:	d106      	bne.n	8014626 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	2200      	movs	r2, #0
 801461e:	2103      	movs	r1, #3
 8014620:	4618      	mov	r0, r3
 8014622:	f7ff f831 	bl	8013688 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	4618      	mov	r0, r3
 801462c:	f7ff f97a 	bl	8013924 <LL_ADC_IsEnabled>
 8014630:	4603      	mov	r3, r0
 8014632:	2b00      	cmp	r3, #0
 8014634:	f040 81c9 	bne.w	80149ca <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	6818      	ldr	r0, [r3, #0]
 801463c:	683b      	ldr	r3, [r7, #0]
 801463e:	6819      	ldr	r1, [r3, #0]
 8014640:	683b      	ldr	r3, [r7, #0]
 8014642:	68db      	ldr	r3, [r3, #12]
 8014644:	461a      	mov	r2, r3
 8014646:	f7ff f8cb 	bl	80137e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	68db      	ldr	r3, [r3, #12]
 801464e:	4a8f      	ldr	r2, [pc, #572]	; (801488c <HAL_ADC_ConfigChannel+0x65c>)
 8014650:	4293      	cmp	r3, r2
 8014652:	f040 8131 	bne.w	80148b8 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 801465a:	683b      	ldr	r3, [r7, #0]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014662:	2b00      	cmp	r3, #0
 8014664:	d10b      	bne.n	801467e <HAL_ADC_ConfigChannel+0x44e>
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	0e9b      	lsrs	r3, r3, #26
 801466c:	3301      	adds	r3, #1
 801466e:	f003 031f 	and.w	r3, r3, #31
 8014672:	2b09      	cmp	r3, #9
 8014674:	bf94      	ite	ls
 8014676:	2301      	movls	r3, #1
 8014678:	2300      	movhi	r3, #0
 801467a:	b2db      	uxtb	r3, r3
 801467c:	e019      	b.n	80146b2 <HAL_ADC_ConfigChannel+0x482>
 801467e:	683b      	ldr	r3, [r7, #0]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014686:	fa93 f3a3 	rbit	r3, r3
 801468a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801468c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801468e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8014690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014692:	2b00      	cmp	r3, #0
 8014694:	d101      	bne.n	801469a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8014696:	2320      	movs	r3, #32
 8014698:	e003      	b.n	80146a2 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 801469a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801469c:	fab3 f383 	clz	r3, r3
 80146a0:	b2db      	uxtb	r3, r3
 80146a2:	3301      	adds	r3, #1
 80146a4:	f003 031f 	and.w	r3, r3, #31
 80146a8:	2b09      	cmp	r3, #9
 80146aa:	bf94      	ite	ls
 80146ac:	2301      	movls	r3, #1
 80146ae:	2300      	movhi	r3, #0
 80146b0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d079      	beq.n	80147aa <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d107      	bne.n	80146d2 <HAL_ADC_ConfigChannel+0x4a2>
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	0e9b      	lsrs	r3, r3, #26
 80146c8:	3301      	adds	r3, #1
 80146ca:	069b      	lsls	r3, r3, #26
 80146cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80146d0:	e015      	b.n	80146fe <HAL_ADC_ConfigChannel+0x4ce>
 80146d2:	683b      	ldr	r3, [r7, #0]
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80146d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146da:	fa93 f3a3 	rbit	r3, r3
 80146de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80146e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80146e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d101      	bne.n	80146ee <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80146ea:	2320      	movs	r3, #32
 80146ec:	e003      	b.n	80146f6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80146ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146f0:	fab3 f383 	clz	r3, r3
 80146f4:	b2db      	uxtb	r3, r3
 80146f6:	3301      	adds	r3, #1
 80146f8:	069b      	lsls	r3, r3, #26
 80146fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014706:	2b00      	cmp	r3, #0
 8014708:	d109      	bne.n	801471e <HAL_ADC_ConfigChannel+0x4ee>
 801470a:	683b      	ldr	r3, [r7, #0]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	0e9b      	lsrs	r3, r3, #26
 8014710:	3301      	adds	r3, #1
 8014712:	f003 031f 	and.w	r3, r3, #31
 8014716:	2101      	movs	r1, #1
 8014718:	fa01 f303 	lsl.w	r3, r1, r3
 801471c:	e017      	b.n	801474e <HAL_ADC_ConfigChannel+0x51e>
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014726:	fa93 f3a3 	rbit	r3, r3
 801472a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 801472c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801472e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8014730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014732:	2b00      	cmp	r3, #0
 8014734:	d101      	bne.n	801473a <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8014736:	2320      	movs	r3, #32
 8014738:	e003      	b.n	8014742 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 801473a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801473c:	fab3 f383 	clz	r3, r3
 8014740:	b2db      	uxtb	r3, r3
 8014742:	3301      	adds	r3, #1
 8014744:	f003 031f 	and.w	r3, r3, #31
 8014748:	2101      	movs	r1, #1
 801474a:	fa01 f303 	lsl.w	r3, r1, r3
 801474e:	ea42 0103 	orr.w	r1, r2, r3
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801475a:	2b00      	cmp	r3, #0
 801475c:	d10a      	bne.n	8014774 <HAL_ADC_ConfigChannel+0x544>
 801475e:	683b      	ldr	r3, [r7, #0]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	0e9b      	lsrs	r3, r3, #26
 8014764:	3301      	adds	r3, #1
 8014766:	f003 021f 	and.w	r2, r3, #31
 801476a:	4613      	mov	r3, r2
 801476c:	005b      	lsls	r3, r3, #1
 801476e:	4413      	add	r3, r2
 8014770:	051b      	lsls	r3, r3, #20
 8014772:	e018      	b.n	80147a6 <HAL_ADC_ConfigChannel+0x576>
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801477c:	fa93 f3a3 	rbit	r3, r3
 8014780:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8014782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014784:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8014786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014788:	2b00      	cmp	r3, #0
 801478a:	d101      	bne.n	8014790 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 801478c:	2320      	movs	r3, #32
 801478e:	e003      	b.n	8014798 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8014790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014792:	fab3 f383 	clz	r3, r3
 8014796:	b2db      	uxtb	r3, r3
 8014798:	3301      	adds	r3, #1
 801479a:	f003 021f 	and.w	r2, r3, #31
 801479e:	4613      	mov	r3, r2
 80147a0:	005b      	lsls	r3, r3, #1
 80147a2:	4413      	add	r3, r2
 80147a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80147a6:	430b      	orrs	r3, r1
 80147a8:	e081      	b.n	80148ae <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d107      	bne.n	80147c6 <HAL_ADC_ConfigChannel+0x596>
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	0e9b      	lsrs	r3, r3, #26
 80147bc:	3301      	adds	r3, #1
 80147be:	069b      	lsls	r3, r3, #26
 80147c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80147c4:	e015      	b.n	80147f2 <HAL_ADC_ConfigChannel+0x5c2>
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80147cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ce:	fa93 f3a3 	rbit	r3, r3
 80147d2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80147d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80147d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d101      	bne.n	80147e2 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80147de:	2320      	movs	r3, #32
 80147e0:	e003      	b.n	80147ea <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80147e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147e4:	fab3 f383 	clz	r3, r3
 80147e8:	b2db      	uxtb	r3, r3
 80147ea:	3301      	adds	r3, #1
 80147ec:	069b      	lsls	r3, r3, #26
 80147ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d109      	bne.n	8014812 <HAL_ADC_ConfigChannel+0x5e2>
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	0e9b      	lsrs	r3, r3, #26
 8014804:	3301      	adds	r3, #1
 8014806:	f003 031f 	and.w	r3, r3, #31
 801480a:	2101      	movs	r1, #1
 801480c:	fa01 f303 	lsl.w	r3, r1, r3
 8014810:	e017      	b.n	8014842 <HAL_ADC_ConfigChannel+0x612>
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014818:	6a3b      	ldr	r3, [r7, #32]
 801481a:	fa93 f3a3 	rbit	r3, r3
 801481e:	61fb      	str	r3, [r7, #28]
  return result;
 8014820:	69fb      	ldr	r3, [r7, #28]
 8014822:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8014824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014826:	2b00      	cmp	r3, #0
 8014828:	d101      	bne.n	801482e <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 801482a:	2320      	movs	r3, #32
 801482c:	e003      	b.n	8014836 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 801482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014830:	fab3 f383 	clz	r3, r3
 8014834:	b2db      	uxtb	r3, r3
 8014836:	3301      	adds	r3, #1
 8014838:	f003 031f 	and.w	r3, r3, #31
 801483c:	2101      	movs	r1, #1
 801483e:	fa01 f303 	lsl.w	r3, r1, r3
 8014842:	ea42 0103 	orr.w	r1, r2, r3
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801484e:	2b00      	cmp	r3, #0
 8014850:	d10d      	bne.n	801486e <HAL_ADC_ConfigChannel+0x63e>
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	0e9b      	lsrs	r3, r3, #26
 8014858:	3301      	adds	r3, #1
 801485a:	f003 021f 	and.w	r2, r3, #31
 801485e:	4613      	mov	r3, r2
 8014860:	005b      	lsls	r3, r3, #1
 8014862:	4413      	add	r3, r2
 8014864:	3b1e      	subs	r3, #30
 8014866:	051b      	lsls	r3, r3, #20
 8014868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801486c:	e01e      	b.n	80148ac <HAL_ADC_ConfigChannel+0x67c>
 801486e:	683b      	ldr	r3, [r7, #0]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014874:	697b      	ldr	r3, [r7, #20]
 8014876:	fa93 f3a3 	rbit	r3, r3
 801487a:	613b      	str	r3, [r7, #16]
  return result;
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8014880:	69bb      	ldr	r3, [r7, #24]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d104      	bne.n	8014890 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8014886:	2320      	movs	r3, #32
 8014888:	e006      	b.n	8014898 <HAL_ADC_ConfigChannel+0x668>
 801488a:	bf00      	nop
 801488c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8014890:	69bb      	ldr	r3, [r7, #24]
 8014892:	fab3 f383 	clz	r3, r3
 8014896:	b2db      	uxtb	r3, r3
 8014898:	3301      	adds	r3, #1
 801489a:	f003 021f 	and.w	r2, r3, #31
 801489e:	4613      	mov	r3, r2
 80148a0:	005b      	lsls	r3, r3, #1
 80148a2:	4413      	add	r3, r2
 80148a4:	3b1e      	subs	r3, #30
 80148a6:	051b      	lsls	r3, r3, #20
 80148a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80148ac:	430b      	orrs	r3, r1
 80148ae:	683a      	ldr	r2, [r7, #0]
 80148b0:	6892      	ldr	r2, [r2, #8]
 80148b2:	4619      	mov	r1, r3
 80148b4:	f7fe ff68 	bl	8013788 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80148b8:	683b      	ldr	r3, [r7, #0]
 80148ba:	681a      	ldr	r2, [r3, #0]
 80148bc:	4b48      	ldr	r3, [pc, #288]	; (80149e0 <HAL_ADC_ConfigChannel+0x7b0>)
 80148be:	4013      	ands	r3, r2
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	f000 8082 	beq.w	80149ca <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80148c6:	4847      	ldr	r0, [pc, #284]	; (80149e4 <HAL_ADC_ConfigChannel+0x7b4>)
 80148c8:	f7fe fe96 	bl	80135f8 <LL_ADC_GetCommonPathInternalCh>
 80148cc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80148d0:	4845      	ldr	r0, [pc, #276]	; (80149e8 <HAL_ADC_ConfigChannel+0x7b8>)
 80148d2:	f7ff f827 	bl	8013924 <LL_ADC_IsEnabled>
 80148d6:	4604      	mov	r4, r0
 80148d8:	4844      	ldr	r0, [pc, #272]	; (80149ec <HAL_ADC_ConfigChannel+0x7bc>)
 80148da:	f7ff f823 	bl	8013924 <LL_ADC_IsEnabled>
 80148de:	4603      	mov	r3, r0
 80148e0:	4323      	orrs	r3, r4
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d15e      	bne.n	80149a4 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	4a41      	ldr	r2, [pc, #260]	; (80149f0 <HAL_ADC_ConfigChannel+0x7c0>)
 80148ec:	4293      	cmp	r3, r2
 80148ee:	d127      	bne.n	8014940 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80148f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80148f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d121      	bne.n	8014940 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	4a39      	ldr	r2, [pc, #228]	; (80149e8 <HAL_ADC_ConfigChannel+0x7b8>)
 8014902:	4293      	cmp	r3, r2
 8014904:	d161      	bne.n	80149ca <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8014906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801490a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801490e:	4619      	mov	r1, r3
 8014910:	4834      	ldr	r0, [pc, #208]	; (80149e4 <HAL_ADC_ConfigChannel+0x7b4>)
 8014912:	f7fe fe5e 	bl	80135d2 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8014916:	4b37      	ldr	r3, [pc, #220]	; (80149f4 <HAL_ADC_ConfigChannel+0x7c4>)
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	099b      	lsrs	r3, r3, #6
 801491c:	4a36      	ldr	r2, [pc, #216]	; (80149f8 <HAL_ADC_ConfigChannel+0x7c8>)
 801491e:	fba2 2303 	umull	r2, r3, r2, r3
 8014922:	099b      	lsrs	r3, r3, #6
 8014924:	1c5a      	adds	r2, r3, #1
 8014926:	4613      	mov	r3, r2
 8014928:	005b      	lsls	r3, r3, #1
 801492a:	4413      	add	r3, r2
 801492c:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 801492e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8014930:	e002      	b.n	8014938 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	3b01      	subs	r3, #1
 8014936:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d1f9      	bne.n	8014932 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801493e:	e044      	b.n	80149ca <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	4a2d      	ldr	r2, [pc, #180]	; (80149fc <HAL_ADC_ConfigChannel+0x7cc>)
 8014946:	4293      	cmp	r3, r2
 8014948:	d113      	bne.n	8014972 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801494a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801494e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014952:	2b00      	cmp	r3, #0
 8014954:	d10d      	bne.n	8014972 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	4a23      	ldr	r2, [pc, #140]	; (80149e8 <HAL_ADC_ConfigChannel+0x7b8>)
 801495c:	4293      	cmp	r3, r2
 801495e:	d134      	bne.n	80149ca <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8014960:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014964:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014968:	4619      	mov	r1, r3
 801496a:	481e      	ldr	r0, [pc, #120]	; (80149e4 <HAL_ADC_ConfigChannel+0x7b4>)
 801496c:	f7fe fe31 	bl	80135d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8014970:	e02b      	b.n	80149ca <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8014972:	683b      	ldr	r3, [r7, #0]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	4a22      	ldr	r2, [pc, #136]	; (8014a00 <HAL_ADC_ConfigChannel+0x7d0>)
 8014978:	4293      	cmp	r3, r2
 801497a:	d126      	bne.n	80149ca <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801497c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014984:	2b00      	cmp	r3, #0
 8014986:	d120      	bne.n	80149ca <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	4a16      	ldr	r2, [pc, #88]	; (80149e8 <HAL_ADC_ConfigChannel+0x7b8>)
 801498e:	4293      	cmp	r3, r2
 8014990:	d11b      	bne.n	80149ca <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8014992:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014996:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801499a:	4619      	mov	r1, r3
 801499c:	4811      	ldr	r0, [pc, #68]	; (80149e4 <HAL_ADC_ConfigChannel+0x7b4>)
 801499e:	f7fe fe18 	bl	80135d2 <LL_ADC_SetCommonPathInternalCh>
 80149a2:	e012      	b.n	80149ca <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149a8:	f043 0220 	orr.w	r2, r3, #32
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 80149b0:	2301      	movs	r3, #1
 80149b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80149b6:	e008      	b.n	80149ca <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149bc:	f043 0220 	orr.w	r2, r3, #32
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80149c4:	2301      	movs	r3, #1
 80149c6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	2200      	movs	r2, #0
 80149ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80149d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	37dc      	adds	r7, #220	; 0xdc
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd90      	pop	{r4, r7, pc}
 80149de:	bf00      	nop
 80149e0:	80080000 	.word	0x80080000
 80149e4:	42028300 	.word	0x42028300
 80149e8:	42028000 	.word	0x42028000
 80149ec:	42028100 	.word	0x42028100
 80149f0:	c7520000 	.word	0xc7520000
 80149f4:	20000090 	.word	0x20000090
 80149f8:	053e2d63 	.word	0x053e2d63
 80149fc:	cb840000 	.word	0xcb840000
 8014a00:	80000001 	.word	0x80000001

08014a04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b084      	sub	sp, #16
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	4618      	mov	r0, r3
 8014a16:	f7fe ff85 	bl	8013924 <LL_ADC_IsEnabled>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d169      	bne.n	8014af4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	689a      	ldr	r2, [r3, #8]
 8014a26:	4b36      	ldr	r3, [pc, #216]	; (8014b00 <ADC_Enable+0xfc>)
 8014a28:	4013      	ands	r3, r2
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d00d      	beq.n	8014a4a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014a32:	f043 0210 	orr.w	r2, r3, #16
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014a3e:	f043 0201 	orr.w	r2, r3, #1
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8014a46:	2301      	movs	r3, #1
 8014a48:	e055      	b.n	8014af6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f7fe ff54 	bl	80138fc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8014a54:	482b      	ldr	r0, [pc, #172]	; (8014b04 <ADC_Enable+0x100>)
 8014a56:	f7fe fdcf 	bl	80135f8 <LL_ADC_GetCommonPathInternalCh>
 8014a5a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8014a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d013      	beq.n	8014a8c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8014a64:	4b28      	ldr	r3, [pc, #160]	; (8014b08 <ADC_Enable+0x104>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	099b      	lsrs	r3, r3, #6
 8014a6a:	4a28      	ldr	r2, [pc, #160]	; (8014b0c <ADC_Enable+0x108>)
 8014a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8014a70:	099b      	lsrs	r3, r3, #6
 8014a72:	1c5a      	adds	r2, r3, #1
 8014a74:	4613      	mov	r3, r2
 8014a76:	005b      	lsls	r3, r3, #1
 8014a78:	4413      	add	r3, r2
 8014a7a:	009b      	lsls	r3, r3, #2
 8014a7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8014a7e:	e002      	b.n	8014a86 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8014a80:	68bb      	ldr	r3, [r7, #8]
 8014a82:	3b01      	subs	r3, #1
 8014a84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8014a86:	68bb      	ldr	r3, [r7, #8]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d1f9      	bne.n	8014a80 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8014a8c:	f7fe fd82 	bl	8013594 <HAL_GetTick>
 8014a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8014a92:	e028      	b.n	8014ae6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f7fe ff43 	bl	8013924 <LL_ADC_IsEnabled>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d104      	bne.n	8014aae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f7fe ff27 	bl	80138fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8014aae:	f7fe fd71 	bl	8013594 <HAL_GetTick>
 8014ab2:	4602      	mov	r2, r0
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	1ad3      	subs	r3, r2, r3
 8014ab8:	2b02      	cmp	r3, #2
 8014aba:	d914      	bls.n	8014ae6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	f003 0301 	and.w	r3, r3, #1
 8014ac6:	2b01      	cmp	r3, #1
 8014ac8:	d00d      	beq.n	8014ae6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014ace:	f043 0210 	orr.w	r2, r3, #16
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014ada:	f043 0201 	orr.w	r2, r3, #1
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8014ae2:	2301      	movs	r3, #1
 8014ae4:	e007      	b.n	8014af6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	f003 0301 	and.w	r3, r3, #1
 8014af0:	2b01      	cmp	r3, #1
 8014af2:	d1cf      	bne.n	8014a94 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8014af4:	2300      	movs	r3, #0
}
 8014af6:	4618      	mov	r0, r3
 8014af8:	3710      	adds	r7, #16
 8014afa:	46bd      	mov	sp, r7
 8014afc:	bd80      	pop	{r7, pc}
 8014afe:	bf00      	nop
 8014b00:	8000003f 	.word	0x8000003f
 8014b04:	42028300 	.word	0x42028300
 8014b08:	20000090 	.word	0x20000090
 8014b0c:	053e2d63 	.word	0x053e2d63

08014b10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b084      	sub	sp, #16
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b1c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d14b      	bne.n	8014bc2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	f003 0308 	and.w	r3, r3, #8
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d021      	beq.n	8014b88 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f7fe fdcb 	bl	80136e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d032      	beq.n	8014bba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	68db      	ldr	r3, [r3, #12]
 8014b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d12b      	bne.n	8014bba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d11f      	bne.n	8014bba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b7e:	f043 0201 	orr.w	r2, r3, #1
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	659a      	str	r2, [r3, #88]	; 0x58
 8014b86:	e018      	b.n	8014bba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	68db      	ldr	r3, [r3, #12]
 8014b8e:	f003 0302 	and.w	r3, r3, #2
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d111      	bne.n	8014bba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d105      	bne.n	8014bba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014bb2:	f043 0201 	orr.w	r2, r3, #1
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8014bba:	68f8      	ldr	r0, [r7, #12]
 8014bbc:	f7ed fa7c 	bl	80020b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8014bc0:	e00e      	b.n	8014be0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014bc6:	f003 0310 	and.w	r3, r3, #16
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d003      	beq.n	8014bd6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8014bce:	68f8      	ldr	r0, [r7, #12]
 8014bd0:	f7ff fb24 	bl	801421c <HAL_ADC_ErrorCallback>
}
 8014bd4:	e004      	b.n	8014be0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014bdc:	6878      	ldr	r0, [r7, #4]
 8014bde:	4798      	blx	r3
}
 8014be0:	bf00      	nop
 8014be2:	3710      	adds	r7, #16
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}

08014be8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b084      	sub	sp, #16
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bf4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8014bf6:	68f8      	ldr	r0, [r7, #12]
 8014bf8:	f7ff fafc 	bl	80141f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8014bfc:	bf00      	nop
 8014bfe:	3710      	adds	r7, #16
 8014c00:	46bd      	mov	sp, r7
 8014c02:	bd80      	pop	{r7, pc}

08014c04 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b084      	sub	sp, #16
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c10:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014c22:	f043 0204 	orr.w	r2, r3, #4
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8014c2a:	68f8      	ldr	r0, [r7, #12]
 8014c2c:	f7ff faf6 	bl	801421c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8014c30:	bf00      	nop
 8014c32:	3710      	adds	r7, #16
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bd80      	pop	{r7, pc}

08014c38 <LL_ADC_IsEnabled>:
{
 8014c38:	b480      	push	{r7}
 8014c3a:	b083      	sub	sp, #12
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	689b      	ldr	r3, [r3, #8]
 8014c44:	f003 0301 	and.w	r3, r3, #1
 8014c48:	2b01      	cmp	r3, #1
 8014c4a:	d101      	bne.n	8014c50 <LL_ADC_IsEnabled+0x18>
 8014c4c:	2301      	movs	r3, #1
 8014c4e:	e000      	b.n	8014c52 <LL_ADC_IsEnabled+0x1a>
 8014c50:	2300      	movs	r3, #0
}
 8014c52:	4618      	mov	r0, r3
 8014c54:	370c      	adds	r7, #12
 8014c56:	46bd      	mov	sp, r7
 8014c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5c:	4770      	bx	lr

08014c5e <LL_ADC_REG_IsConversionOngoing>:
{
 8014c5e:	b480      	push	{r7}
 8014c60:	b083      	sub	sp, #12
 8014c62:	af00      	add	r7, sp, #0
 8014c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	689b      	ldr	r3, [r3, #8]
 8014c6a:	f003 0304 	and.w	r3, r3, #4
 8014c6e:	2b04      	cmp	r3, #4
 8014c70:	d101      	bne.n	8014c76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8014c72:	2301      	movs	r3, #1
 8014c74:	e000      	b.n	8014c78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8014c76:	2300      	movs	r3, #0
}
 8014c78:	4618      	mov	r0, r3
 8014c7a:	370c      	adds	r7, #12
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c82:	4770      	bx	lr

08014c84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8014c84:	b480      	push	{r7}
 8014c86:	b083      	sub	sp, #12
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8014c8c:	bf00      	nop
 8014c8e:	370c      	adds	r7, #12
 8014c90:	46bd      	mov	sp, r7
 8014c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c96:	4770      	bx	lr

08014c98 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8014c98:	b480      	push	{r7}
 8014c9a:	b083      	sub	sp, #12
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8014ca0:	bf00      	nop
 8014ca2:	370c      	adds	r7, #12
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014caa:	4770      	bx	lr

08014cac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8014cac:	b480      	push	{r7}
 8014cae:	b083      	sub	sp, #12
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8014cb4:	bf00      	nop
 8014cb6:	370c      	adds	r7, #12
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cbe:	4770      	bx	lr

08014cc0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8014cc0:	b480      	push	{r7}
 8014cc2:	b083      	sub	sp, #12
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8014cc8:	bf00      	nop
 8014cca:	370c      	adds	r7, #12
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd2:	4770      	bx	lr

08014cd4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8014cd4:	b480      	push	{r7}
 8014cd6:	b083      	sub	sp, #12
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8014cdc:	bf00      	nop
 8014cde:	370c      	adds	r7, #12
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce6:	4770      	bx	lr

08014ce8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8014ce8:	b590      	push	{r4, r7, lr}
 8014cea:	b0a1      	sub	sp, #132	; 0x84
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
 8014cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8014cfe:	2b01      	cmp	r3, #1
 8014d00:	d101      	bne.n	8014d06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8014d02:	2302      	movs	r3, #2
 8014d04:	e089      	b.n	8014e1a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	2201      	movs	r2, #1
 8014d0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8014d0e:	2300      	movs	r3, #0
 8014d10:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8014d12:	2300      	movs	r3, #0
 8014d14:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	4a42      	ldr	r2, [pc, #264]	; (8014e24 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8014d1c:	4293      	cmp	r3, r2
 8014d1e:	d102      	bne.n	8014d26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8014d20:	4b41      	ldr	r3, [pc, #260]	; (8014e28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8014d22:	60fb      	str	r3, [r7, #12]
 8014d24:	e001      	b.n	8014d2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8014d26:	2300      	movs	r3, #0
 8014d28:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d10b      	bne.n	8014d48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d34:	f043 0220 	orr.w	r2, r3, #32
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2200      	movs	r2, #0
 8014d40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8014d44:	2301      	movs	r3, #1
 8014d46:	e068      	b.n	8014e1a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f7ff ff87 	bl	8014c5e <LL_ADC_REG_IsConversionOngoing>
 8014d50:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	4618      	mov	r0, r3
 8014d58:	f7ff ff81 	bl	8014c5e <LL_ADC_REG_IsConversionOngoing>
 8014d5c:	4603      	mov	r3, r0
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d14a      	bne.n	8014df8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8014d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d147      	bne.n	8014df8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8014d68:	4b30      	ldr	r3, [pc, #192]	; (8014e2c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8014d6a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8014d6c:	683b      	ldr	r3, [r7, #0]
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d027      	beq.n	8014dc4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8014d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d76:	689b      	ldr	r3, [r3, #8]
 8014d78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	6859      	ldr	r1, [r3, #4]
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014d86:	035b      	lsls	r3, r3, #13
 8014d88:	430b      	orrs	r3, r1
 8014d8a:	431a      	orrs	r2, r3
 8014d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8014d90:	4824      	ldr	r0, [pc, #144]	; (8014e24 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8014d92:	f7ff ff51 	bl	8014c38 <LL_ADC_IsEnabled>
 8014d96:	4604      	mov	r4, r0
 8014d98:	4823      	ldr	r0, [pc, #140]	; (8014e28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8014d9a:	f7ff ff4d 	bl	8014c38 <LL_ADC_IsEnabled>
 8014d9e:	4603      	mov	r3, r0
 8014da0:	4323      	orrs	r3, r4
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d132      	bne.n	8014e0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8014da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014da8:	689b      	ldr	r3, [r3, #8]
 8014daa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8014dae:	f023 030f 	bic.w	r3, r3, #15
 8014db2:	683a      	ldr	r2, [r7, #0]
 8014db4:	6811      	ldr	r1, [r2, #0]
 8014db6:	683a      	ldr	r2, [r7, #0]
 8014db8:	6892      	ldr	r2, [r2, #8]
 8014dba:	430a      	orrs	r2, r1
 8014dbc:	431a      	orrs	r2, r3
 8014dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014dc0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8014dc2:	e023      	b.n	8014e0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8014dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014dc6:	689b      	ldr	r3, [r3, #8]
 8014dc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8014dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014dce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8014dd0:	4814      	ldr	r0, [pc, #80]	; (8014e24 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8014dd2:	f7ff ff31 	bl	8014c38 <LL_ADC_IsEnabled>
 8014dd6:	4604      	mov	r4, r0
 8014dd8:	4813      	ldr	r0, [pc, #76]	; (8014e28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8014dda:	f7ff ff2d 	bl	8014c38 <LL_ADC_IsEnabled>
 8014dde:	4603      	mov	r3, r0
 8014de0:	4323      	orrs	r3, r4
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d112      	bne.n	8014e0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8014de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014de8:	689b      	ldr	r3, [r3, #8]
 8014dea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8014dee:	f023 030f 	bic.w	r3, r3, #15
 8014df2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014df4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8014df6:	e009      	b.n	8014e0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014dfc:	f043 0220 	orr.w	r2, r3, #32
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8014e04:	2301      	movs	r3, #1
 8014e06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8014e0a:	e000      	b.n	8014e0e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8014e0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	2200      	movs	r2, #0
 8014e12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8014e16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3784      	adds	r7, #132	; 0x84
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd90      	pop	{r4, r7, pc}
 8014e22:	bf00      	nop
 8014e24:	42028000 	.word	0x42028000
 8014e28:	42028100 	.word	0x42028100
 8014e2c:	42028300 	.word	0x42028300

08014e30 <__NVIC_SetPriorityGrouping>:
{
 8014e30:	b480      	push	{r7}
 8014e32:	b085      	sub	sp, #20
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	f003 0307 	and.w	r3, r3, #7
 8014e3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8014e40:	4b0c      	ldr	r3, [pc, #48]	; (8014e74 <__NVIC_SetPriorityGrouping+0x44>)
 8014e42:	68db      	ldr	r3, [r3, #12]
 8014e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8014e46:	68ba      	ldr	r2, [r7, #8]
 8014e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8014e4c:	4013      	ands	r3, r2
 8014e4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8014e54:	68bb      	ldr	r3, [r7, #8]
 8014e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8014e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8014e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8014e62:	4a04      	ldr	r2, [pc, #16]	; (8014e74 <__NVIC_SetPriorityGrouping+0x44>)
 8014e64:	68bb      	ldr	r3, [r7, #8]
 8014e66:	60d3      	str	r3, [r2, #12]
}
 8014e68:	bf00      	nop
 8014e6a:	3714      	adds	r7, #20
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e72:	4770      	bx	lr
 8014e74:	e000ed00 	.word	0xe000ed00

08014e78 <__NVIC_GetPriorityGrouping>:
{
 8014e78:	b480      	push	{r7}
 8014e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8014e7c:	4b04      	ldr	r3, [pc, #16]	; (8014e90 <__NVIC_GetPriorityGrouping+0x18>)
 8014e7e:	68db      	ldr	r3, [r3, #12]
 8014e80:	0a1b      	lsrs	r3, r3, #8
 8014e82:	f003 0307 	and.w	r3, r3, #7
}
 8014e86:	4618      	mov	r0, r3
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8e:	4770      	bx	lr
 8014e90:	e000ed00 	.word	0xe000ed00

08014e94 <__NVIC_EnableIRQ>:
{
 8014e94:	b480      	push	{r7}
 8014e96:	b083      	sub	sp, #12
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	db0b      	blt.n	8014ebe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014ea6:	79fb      	ldrb	r3, [r7, #7]
 8014ea8:	f003 021f 	and.w	r2, r3, #31
 8014eac:	4907      	ldr	r1, [pc, #28]	; (8014ecc <__NVIC_EnableIRQ+0x38>)
 8014eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014eb2:	095b      	lsrs	r3, r3, #5
 8014eb4:	2001      	movs	r0, #1
 8014eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8014eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014ebe:	bf00      	nop
 8014ec0:	370c      	adds	r7, #12
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec8:	4770      	bx	lr
 8014eca:	bf00      	nop
 8014ecc:	e000e100 	.word	0xe000e100

08014ed0 <__NVIC_SetPriority>:
{
 8014ed0:	b480      	push	{r7}
 8014ed2:	b083      	sub	sp, #12
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	6039      	str	r1, [r7, #0]
 8014eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	db0a      	blt.n	8014efa <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	b2da      	uxtb	r2, r3
 8014ee8:	490c      	ldr	r1, [pc, #48]	; (8014f1c <__NVIC_SetPriority+0x4c>)
 8014eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014eee:	0152      	lsls	r2, r2, #5
 8014ef0:	b2d2      	uxtb	r2, r2
 8014ef2:	440b      	add	r3, r1
 8014ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014ef8:	e00a      	b.n	8014f10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014efa:	683b      	ldr	r3, [r7, #0]
 8014efc:	b2da      	uxtb	r2, r3
 8014efe:	4908      	ldr	r1, [pc, #32]	; (8014f20 <__NVIC_SetPriority+0x50>)
 8014f00:	79fb      	ldrb	r3, [r7, #7]
 8014f02:	f003 030f 	and.w	r3, r3, #15
 8014f06:	3b04      	subs	r3, #4
 8014f08:	0152      	lsls	r2, r2, #5
 8014f0a:	b2d2      	uxtb	r2, r2
 8014f0c:	440b      	add	r3, r1
 8014f0e:	761a      	strb	r2, [r3, #24]
}
 8014f10:	bf00      	nop
 8014f12:	370c      	adds	r7, #12
 8014f14:	46bd      	mov	sp, r7
 8014f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f1a:	4770      	bx	lr
 8014f1c:	e000e100 	.word	0xe000e100
 8014f20:	e000ed00 	.word	0xe000ed00

08014f24 <NVIC_EncodePriority>:
{
 8014f24:	b480      	push	{r7}
 8014f26:	b089      	sub	sp, #36	; 0x24
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	60f8      	str	r0, [r7, #12]
 8014f2c:	60b9      	str	r1, [r7, #8]
 8014f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	f003 0307 	and.w	r3, r3, #7
 8014f36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8014f38:	69fb      	ldr	r3, [r7, #28]
 8014f3a:	f1c3 0307 	rsb	r3, r3, #7
 8014f3e:	2b03      	cmp	r3, #3
 8014f40:	bf28      	it	cs
 8014f42:	2303      	movcs	r3, #3
 8014f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8014f46:	69fb      	ldr	r3, [r7, #28]
 8014f48:	3303      	adds	r3, #3
 8014f4a:	2b06      	cmp	r3, #6
 8014f4c:	d902      	bls.n	8014f54 <NVIC_EncodePriority+0x30>
 8014f4e:	69fb      	ldr	r3, [r7, #28]
 8014f50:	3b04      	subs	r3, #4
 8014f52:	e000      	b.n	8014f56 <NVIC_EncodePriority+0x32>
 8014f54:	2300      	movs	r3, #0
 8014f56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014f58:	f04f 32ff 	mov.w	r2, #4294967295
 8014f5c:	69bb      	ldr	r3, [r7, #24]
 8014f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8014f62:	43da      	mvns	r2, r3
 8014f64:	68bb      	ldr	r3, [r7, #8]
 8014f66:	401a      	ands	r2, r3
 8014f68:	697b      	ldr	r3, [r7, #20]
 8014f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8014f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8014f70:	697b      	ldr	r3, [r7, #20]
 8014f72:	fa01 f303 	lsl.w	r3, r1, r3
 8014f76:	43d9      	mvns	r1, r3
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014f7c:	4313      	orrs	r3, r2
}
 8014f7e:	4618      	mov	r0, r3
 8014f80:	3724      	adds	r7, #36	; 0x24
 8014f82:	46bd      	mov	sp, r7
 8014f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f88:	4770      	bx	lr

08014f8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014f8a:	b580      	push	{r7, lr}
 8014f8c:	b082      	sub	sp, #8
 8014f8e:	af00      	add	r7, sp, #0
 8014f90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8014f92:	6878      	ldr	r0, [r7, #4]
 8014f94:	f7ff ff4c 	bl	8014e30 <__NVIC_SetPriorityGrouping>
}
 8014f98:	bf00      	nop
 8014f9a:	3708      	adds	r7, #8
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bd80      	pop	{r7, pc}

08014fa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b086      	sub	sp, #24
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	60b9      	str	r1, [r7, #8]
 8014faa:	607a      	str	r2, [r7, #4]
 8014fac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8014fae:	f7ff ff63 	bl	8014e78 <__NVIC_GetPriorityGrouping>
 8014fb2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8014fb4:	687a      	ldr	r2, [r7, #4]
 8014fb6:	68b9      	ldr	r1, [r7, #8]
 8014fb8:	6978      	ldr	r0, [r7, #20]
 8014fba:	f7ff ffb3 	bl	8014f24 <NVIC_EncodePriority>
 8014fbe:	4602      	mov	r2, r0
 8014fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fc4:	4611      	mov	r1, r2
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f7ff ff82 	bl	8014ed0 <__NVIC_SetPriority>
}
 8014fcc:	bf00      	nop
 8014fce:	3718      	adds	r7, #24
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}

08014fd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b082      	sub	sp, #8
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	4603      	mov	r3, r0
 8014fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8014fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f7ff ff56 	bl	8014e94 <__NVIC_EnableIRQ>
}
 8014fe8:	bf00      	nop
 8014fea:	3708      	adds	r7, #8
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}

08014ff0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b084      	sub	sp, #16
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d101      	bne.n	8015002 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8014ffe:	2301      	movs	r3, #1
 8015000:	e08d      	b.n	801511e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	461a      	mov	r2, r3
 8015008:	4b47      	ldr	r3, [pc, #284]	; (8015128 <HAL_DMA_Init+0x138>)
 801500a:	429a      	cmp	r2, r3
 801500c:	d80f      	bhi.n	801502e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	461a      	mov	r2, r3
 8015014:	4b45      	ldr	r3, [pc, #276]	; (801512c <HAL_DMA_Init+0x13c>)
 8015016:	4413      	add	r3, r2
 8015018:	4a45      	ldr	r2, [pc, #276]	; (8015130 <HAL_DMA_Init+0x140>)
 801501a:	fba2 2303 	umull	r2, r3, r2, r3
 801501e:	091b      	lsrs	r3, r3, #4
 8015020:	009a      	lsls	r2, r3, #2
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	4a42      	ldr	r2, [pc, #264]	; (8015134 <HAL_DMA_Init+0x144>)
 801502a:	649a      	str	r2, [r3, #72]	; 0x48
 801502c:	e00e      	b.n	801504c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	461a      	mov	r2, r3
 8015034:	4b40      	ldr	r3, [pc, #256]	; (8015138 <HAL_DMA_Init+0x148>)
 8015036:	4413      	add	r3, r2
 8015038:	4a3d      	ldr	r2, [pc, #244]	; (8015130 <HAL_DMA_Init+0x140>)
 801503a:	fba2 2303 	umull	r2, r3, r2, r3
 801503e:	091b      	lsrs	r3, r3, #4
 8015040:	009a      	lsls	r2, r3, #2
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	4a3c      	ldr	r2, [pc, #240]	; (801513c <HAL_DMA_Init+0x14c>)
 801504a:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	2202      	movs	r2, #2
 8015050:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8015062:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8015066:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8015070:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	691b      	ldr	r3, [r3, #16]
 8015076:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801507c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	699b      	ldr	r3, [r3, #24]
 8015082:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015088:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	6a1b      	ldr	r3, [r3, #32]
 801508e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8015090:	68fa      	ldr	r2, [r7, #12]
 8015092:	4313      	orrs	r3, r2
 8015094:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	68fa      	ldr	r2, [r7, #12]
 801509c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801509e:	6878      	ldr	r0, [r7, #4]
 80150a0:	f000 faf2 	bl	8015688 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	689b      	ldr	r3, [r3, #8]
 80150a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80150ac:	d102      	bne.n	80150b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	2200      	movs	r2, #0
 80150b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	685a      	ldr	r2, [r3, #4]
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150bc:	b2d2      	uxtb	r2, r2
 80150be:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80150c4:	687a      	ldr	r2, [r7, #4]
 80150c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80150c8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	685b      	ldr	r3, [r3, #4]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d010      	beq.n	80150f4 <HAL_DMA_Init+0x104>
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	685b      	ldr	r3, [r3, #4]
 80150d6:	2b04      	cmp	r3, #4
 80150d8:	d80c      	bhi.n	80150f4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80150da:	6878      	ldr	r0, [r7, #4]
 80150dc:	f000 fb12 	bl	8015704 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80150e4:	2200      	movs	r2, #0
 80150e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80150ec:	687a      	ldr	r2, [r7, #4]
 80150ee:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80150f0:	605a      	str	r2, [r3, #4]
 80150f2:	e008      	b.n	8015106 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	2200      	movs	r2, #0
 80150f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	2200      	movs	r2, #0
 80150fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	2200      	movs	r2, #0
 8015104:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	2200      	movs	r2, #0
 801510a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	2201      	movs	r2, #1
 8015110:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2200      	movs	r2, #0
 8015118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801511c:	2300      	movs	r3, #0
}
 801511e:	4618      	mov	r0, r3
 8015120:	3710      	adds	r7, #16
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}
 8015126:	bf00      	nop
 8015128:	40020407 	.word	0x40020407
 801512c:	bffdfff8 	.word	0xbffdfff8
 8015130:	cccccccd 	.word	0xcccccccd
 8015134:	40020000 	.word	0x40020000
 8015138:	bffdfbf8 	.word	0xbffdfbf8
 801513c:	40020400 	.word	0x40020400

08015140 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015140:	b580      	push	{r7, lr}
 8015142:	b086      	sub	sp, #24
 8015144:	af00      	add	r7, sp, #0
 8015146:	60f8      	str	r0, [r7, #12]
 8015148:	60b9      	str	r1, [r7, #8]
 801514a:	607a      	str	r2, [r7, #4]
 801514c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801514e:	2300      	movs	r3, #0
 8015150:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015158:	2b01      	cmp	r3, #1
 801515a:	d101      	bne.n	8015160 <HAL_DMA_Start_IT+0x20>
 801515c:	2302      	movs	r3, #2
 801515e:	e066      	b.n	801522e <HAL_DMA_Start_IT+0xee>
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	2201      	movs	r2, #1
 8015164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801516e:	b2db      	uxtb	r3, r3
 8015170:	2b01      	cmp	r3, #1
 8015172:	d155      	bne.n	8015220 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	2202      	movs	r2, #2
 8015178:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	2200      	movs	r2, #0
 8015180:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	681a      	ldr	r2, [r3, #0]
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	f022 0201 	bic.w	r2, r2, #1
 8015190:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8015192:	683b      	ldr	r3, [r7, #0]
 8015194:	687a      	ldr	r2, [r7, #4]
 8015196:	68b9      	ldr	r1, [r7, #8]
 8015198:	68f8      	ldr	r0, [r7, #12]
 801519a:	f000 fa37 	bl	801560c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d008      	beq.n	80151b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	681a      	ldr	r2, [r3, #0]
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	f042 020e 	orr.w	r2, r2, #14
 80151b4:	601a      	str	r2, [r3, #0]
 80151b6:	e00f      	b.n	80151d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	681a      	ldr	r2, [r3, #0]
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	f022 0204 	bic.w	r2, r2, #4
 80151c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	681a      	ldr	r2, [r3, #0]
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	f042 020a 	orr.w	r2, r2, #10
 80151d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d007      	beq.n	80151f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151ea:	681a      	ldr	r2, [r3, #0]
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80151f4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d007      	beq.n	801520e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015202:	681a      	ldr	r2, [r3, #0]
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801520c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	681a      	ldr	r2, [r3, #0]
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	f042 0201 	orr.w	r2, r2, #1
 801521c:	601a      	str	r2, [r3, #0]
 801521e:	e005      	b.n	801522c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	2200      	movs	r2, #0
 8015224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8015228:	2302      	movs	r3, #2
 801522a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801522c:	7dfb      	ldrb	r3, [r7, #23]
}
 801522e:	4618      	mov	r0, r3
 8015230:	3718      	adds	r7, #24
 8015232:	46bd      	mov	sp, r7
 8015234:	bd80      	pop	{r7, pc}

08015236 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8015236:	b480      	push	{r7}
 8015238:	b085      	sub	sp, #20
 801523a:	af00      	add	r7, sp, #0
 801523c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801523e:	2300      	movs	r3, #0
 8015240:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8015248:	b2db      	uxtb	r3, r3
 801524a:	2b02      	cmp	r3, #2
 801524c:	d008      	beq.n	8015260 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	2204      	movs	r2, #4
 8015252:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	2200      	movs	r2, #0
 8015258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801525c:	2301      	movs	r3, #1
 801525e:	e040      	b.n	80152e2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	681a      	ldr	r2, [r3, #0]
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	f022 020e 	bic.w	r2, r2, #14
 801526e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015274:	681a      	ldr	r2, [r3, #0]
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801527a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801527e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	681a      	ldr	r2, [r3, #0]
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	f022 0201 	bic.w	r2, r2, #1
 801528e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015294:	f003 021c 	and.w	r2, r3, #28
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801529c:	2101      	movs	r1, #1
 801529e:	fa01 f202 	lsl.w	r2, r1, r2
 80152a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152a8:	687a      	ldr	r2, [r7, #4]
 80152aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80152ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d00c      	beq.n	80152d0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80152ba:	681a      	ldr	r2, [r3, #0]
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80152c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80152c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80152ca:	687a      	ldr	r2, [r7, #4]
 80152cc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80152ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	2201      	movs	r2, #1
 80152d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	2200      	movs	r2, #0
 80152dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80152e0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80152e2:	4618      	mov	r0, r3
 80152e4:	3714      	adds	r7, #20
 80152e6:	46bd      	mov	sp, r7
 80152e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ec:	4770      	bx	lr

080152ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80152ee:	b580      	push	{r7, lr}
 80152f0:	b084      	sub	sp, #16
 80152f2:	af00      	add	r7, sp, #0
 80152f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80152f6:	2300      	movs	r3, #0
 80152f8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8015300:	b2db      	uxtb	r3, r3
 8015302:	2b02      	cmp	r3, #2
 8015304:	d005      	beq.n	8015312 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	2204      	movs	r2, #4
 801530a:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 801530c:	2301      	movs	r3, #1
 801530e:	73fb      	strb	r3, [r7, #15]
 8015310:	e047      	b.n	80153a2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	681a      	ldr	r2, [r3, #0]
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	f022 020e 	bic.w	r2, r2, #14
 8015320:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	681a      	ldr	r2, [r3, #0]
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	f022 0201 	bic.w	r2, r2, #1
 8015330:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015336:	681a      	ldr	r2, [r3, #0]
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801533c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015340:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015346:	f003 021c 	and.w	r2, r3, #28
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801534e:	2101      	movs	r1, #1
 8015350:	fa01 f202 	lsl.w	r2, r1, r2
 8015354:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801535a:	687a      	ldr	r2, [r7, #4]
 801535c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801535e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015364:	2b00      	cmp	r3, #0
 8015366:	d00c      	beq.n	8015382 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801536c:	681a      	ldr	r2, [r3, #0]
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015372:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015376:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801537c:	687a      	ldr	r2, [r7, #4]
 801537e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8015380:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	2201      	movs	r2, #1
 8015386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	2200      	movs	r2, #0
 801538e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015396:	2b00      	cmp	r3, #0
 8015398:	d003      	beq.n	80153a2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801539e:	6878      	ldr	r0, [r7, #4]
 80153a0:	4798      	blx	r3
    }
  }
  return status;
 80153a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80153a4:	4618      	mov	r0, r3
 80153a6:	3710      	adds	r7, #16
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}

080153ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b084      	sub	sp, #16
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80153c8:	f003 031c 	and.w	r3, r3, #28
 80153cc:	2204      	movs	r2, #4
 80153ce:	409a      	lsls	r2, r3
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	4013      	ands	r3, r2
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d053      	beq.n	8015480 <HAL_DMA_IRQHandler+0xd4>
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	f003 0304 	and.w	r3, r3, #4
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d04e      	beq.n	8015480 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d024      	beq.n	801543a <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80153f4:	f003 021c 	and.w	r2, r3, #28
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80153fc:	2104      	movs	r1, #4
 80153fe:	fa01 f202 	lsl.w	r2, r1, r2
 8015402:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801540e:	2b00      	cmp	r3, #0
 8015410:	d109      	bne.n	8015426 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015416:	2b00      	cmp	r3, #0
 8015418:	f000 80c0 	beq.w	801559c <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015420:	6878      	ldr	r0, [r7, #4]
 8015422:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8015424:	e0ba      	b.n	801559c <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801542a:	2b00      	cmp	r3, #0
 801542c:	f000 80b6 	beq.w	801559c <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015434:	6878      	ldr	r0, [r7, #4]
 8015436:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8015438:	e0b0      	b.n	801559c <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	f003 0320 	and.w	r3, r3, #32
 8015444:	2b00      	cmp	r3, #0
 8015446:	d107      	bne.n	8015458 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	681a      	ldr	r2, [r3, #0]
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	f022 0204 	bic.w	r2, r2, #4
 8015456:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801545c:	f003 021c 	and.w	r2, r3, #28
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015464:	2104      	movs	r1, #4
 8015466:	fa01 f202 	lsl.w	r2, r1, r2
 801546a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015470:	2b00      	cmp	r3, #0
 8015472:	f000 8093 	beq.w	801559c <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801547a:	6878      	ldr	r0, [r7, #4]
 801547c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801547e:	e08d      	b.n	801559c <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015484:	f003 031c 	and.w	r3, r3, #28
 8015488:	2202      	movs	r2, #2
 801548a:	409a      	lsls	r2, r3
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	4013      	ands	r3, r2
 8015490:	2b00      	cmp	r3, #0
 8015492:	d04e      	beq.n	8015532 <HAL_DMA_IRQHandler+0x186>
 8015494:	68bb      	ldr	r3, [r7, #8]
 8015496:	f003 0302 	and.w	r3, r3, #2
 801549a:	2b00      	cmp	r3, #0
 801549c:	d049      	beq.n	8015532 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d018      	beq.n	80154de <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d108      	bne.n	80154cc <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d06e      	beq.n	80155a0 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80154ca:	e069      	b.n	80155a0 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d065      	beq.n	80155a0 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154d8:	6878      	ldr	r0, [r7, #4]
 80154da:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80154dc:	e060      	b.n	80155a0 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	f003 0320 	and.w	r3, r3, #32
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d10b      	bne.n	8015504 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	681a      	ldr	r2, [r3, #0]
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	f022 020a 	bic.w	r2, r2, #10
 80154fa:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	2201      	movs	r2, #1
 8015500:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015508:	f003 021c 	and.w	r2, r3, #28
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015510:	2102      	movs	r1, #2
 8015512:	fa01 f202 	lsl.w	r2, r1, r2
 8015516:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	2200      	movs	r2, #0
 801551c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015524:	2b00      	cmp	r3, #0
 8015526:	d03b      	beq.n	80155a0 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8015530:	e036      	b.n	80155a0 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015536:	f003 031c 	and.w	r3, r3, #28
 801553a:	2208      	movs	r2, #8
 801553c:	409a      	lsls	r2, r3
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	4013      	ands	r3, r2
 8015542:	2b00      	cmp	r3, #0
 8015544:	d02e      	beq.n	80155a4 <HAL_DMA_IRQHandler+0x1f8>
 8015546:	68bb      	ldr	r3, [r7, #8]
 8015548:	f003 0308 	and.w	r3, r3, #8
 801554c:	2b00      	cmp	r3, #0
 801554e:	d029      	beq.n	80155a4 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	681a      	ldr	r2, [r3, #0]
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	f022 020e 	bic.w	r2, r2, #14
 801555e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015564:	f003 021c 	and.w	r2, r3, #28
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801556c:	2101      	movs	r1, #1
 801556e:	fa01 f202 	lsl.w	r2, r1, r2
 8015572:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	2201      	movs	r2, #1
 8015578:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	2201      	movs	r2, #1
 801557e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	2200      	movs	r2, #0
 8015586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801558e:	2b00      	cmp	r3, #0
 8015590:	d008      	beq.n	80155a4 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015596:	6878      	ldr	r0, [r7, #4]
 8015598:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801559a:	e002      	b.n	80155a2 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801559c:	bf00      	nop
 801559e:	e000      	b.n	80155a2 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80155a0:	bf00      	nop
  return;
 80155a2:	bf00      	nop
 80155a4:	bf00      	nop
}
 80155a6:	3710      	adds	r7, #16
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bd80      	pop	{r7, pc}

080155ac <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80155ac:	b480      	push	{r7}
 80155ae:	b085      	sub	sp, #20
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
 80155b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80155b6:	2300      	movs	r3, #0
 80155b8:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d103      	bne.n	80155c8 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80155c0:	2301      	movs	r3, #1
 80155c2:	72fb      	strb	r3, [r7, #11]
    return status;
 80155c4:	7afb      	ldrb	r3, [r7, #11]
 80155c6:	e01b      	b.n	8015600 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	f003 0310 	and.w	r3, r3, #16
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d00d      	beq.n	80155f6 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80155da:	683b      	ldr	r3, [r7, #0]
 80155dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d004      	beq.n	80155ee <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80155ea:	60fb      	str	r3, [r7, #12]
 80155ec:	e003      	b.n	80155f6 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80155f4:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	68fa      	ldr	r2, [r7, #12]
 80155fc:	601a      	str	r2, [r3, #0]

  return status;
 80155fe:	7afb      	ldrb	r3, [r7, #11]
}
 8015600:	4618      	mov	r0, r3
 8015602:	3714      	adds	r7, #20
 8015604:	46bd      	mov	sp, r7
 8015606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560a:	4770      	bx	lr

0801560c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801560c:	b480      	push	{r7}
 801560e:	b085      	sub	sp, #20
 8015610:	af00      	add	r7, sp, #0
 8015612:	60f8      	str	r0, [r7, #12]
 8015614:	60b9      	str	r1, [r7, #8]
 8015616:	607a      	str	r2, [r7, #4]
 8015618:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801561e:	68fa      	ldr	r2, [r7, #12]
 8015620:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8015622:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015628:	2b00      	cmp	r3, #0
 801562a:	d004      	beq.n	8015636 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015630:	68fa      	ldr	r2, [r7, #12]
 8015632:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8015634:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801563a:	f003 021c 	and.w	r2, r3, #28
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015642:	2101      	movs	r1, #1
 8015644:	fa01 f202 	lsl.w	r2, r1, r2
 8015648:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	683a      	ldr	r2, [r7, #0]
 8015650:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	689b      	ldr	r3, [r3, #8]
 8015656:	2b10      	cmp	r3, #16
 8015658:	d108      	bne.n	801566c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	687a      	ldr	r2, [r7, #4]
 8015660:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	68ba      	ldr	r2, [r7, #8]
 8015668:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 801566a:	e007      	b.n	801567c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	68ba      	ldr	r2, [r7, #8]
 8015672:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	687a      	ldr	r2, [r7, #4]
 801567a:	60da      	str	r2, [r3, #12]
}
 801567c:	bf00      	nop
 801567e:	3714      	adds	r7, #20
 8015680:	46bd      	mov	sp, r7
 8015682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015686:	4770      	bx	lr

08015688 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8015688:	b480      	push	{r7}
 801568a:	b085      	sub	sp, #20
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	461a      	mov	r2, r3
 8015696:	4b17      	ldr	r3, [pc, #92]	; (80156f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8015698:	429a      	cmp	r2, r3
 801569a:	d80a      	bhi.n	80156b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80156a0:	089b      	lsrs	r3, r3, #2
 80156a2:	009b      	lsls	r3, r3, #2
 80156a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80156a8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80156ac:	687a      	ldr	r2, [r7, #4]
 80156ae:	6513      	str	r3, [r2, #80]	; 0x50
 80156b0:	e007      	b.n	80156c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80156b6:	089b      	lsrs	r3, r3, #2
 80156b8:	009a      	lsls	r2, r3, #2
 80156ba:	4b0f      	ldr	r3, [pc, #60]	; (80156f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80156bc:	4413      	add	r3, r2
 80156be:	687a      	ldr	r2, [r7, #4]
 80156c0:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	b2db      	uxtb	r3, r3
 80156c8:	3b08      	subs	r3, #8
 80156ca:	4a0c      	ldr	r2, [pc, #48]	; (80156fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80156cc:	fba2 2303 	umull	r2, r3, r2, r3
 80156d0:	091b      	lsrs	r3, r3, #4
 80156d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	4a0a      	ldr	r2, [pc, #40]	; (8015700 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80156d8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	f003 031f 	and.w	r3, r3, #31
 80156e0:	2201      	movs	r2, #1
 80156e2:	409a      	lsls	r2, r3
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80156e8:	bf00      	nop
 80156ea:	3714      	adds	r7, #20
 80156ec:	46bd      	mov	sp, r7
 80156ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f2:	4770      	bx	lr
 80156f4:	40020407 	.word	0x40020407
 80156f8:	40020820 	.word	0x40020820
 80156fc:	cccccccd 	.word	0xcccccccd
 8015700:	40020880 	.word	0x40020880

08015704 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8015704:	b480      	push	{r7}
 8015706:	b085      	sub	sp, #20
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	685b      	ldr	r3, [r3, #4]
 8015710:	b2db      	uxtb	r3, r3
 8015712:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8015714:	68fa      	ldr	r2, [r7, #12]
 8015716:	4b0b      	ldr	r3, [pc, #44]	; (8015744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8015718:	4413      	add	r3, r2
 801571a:	009b      	lsls	r3, r3, #2
 801571c:	461a      	mov	r2, r3
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	4a08      	ldr	r2, [pc, #32]	; (8015748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8015726:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	3b01      	subs	r3, #1
 801572c:	f003 0303 	and.w	r3, r3, #3
 8015730:	2201      	movs	r2, #1
 8015732:	409a      	lsls	r2, r3
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	665a      	str	r2, [r3, #100]	; 0x64
}
 8015738:	bf00      	nop
 801573a:	3714      	adds	r7, #20
 801573c:	46bd      	mov	sp, r7
 801573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015742:	4770      	bx	lr
 8015744:	1000823f 	.word	0x1000823f
 8015748:	40020940 	.word	0x40020940

0801574c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801574c:	b480      	push	{r7}
 801574e:	b087      	sub	sp, #28
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
 8015754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8015756:	2300      	movs	r3, #0
 8015758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801575a:	e158      	b.n	8015a0e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801575c:	683b      	ldr	r3, [r7, #0]
 801575e:	681a      	ldr	r2, [r3, #0]
 8015760:	2101      	movs	r1, #1
 8015762:	697b      	ldr	r3, [r7, #20]
 8015764:	fa01 f303 	lsl.w	r3, r1, r3
 8015768:	4013      	ands	r3, r2
 801576a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	2b00      	cmp	r3, #0
 8015770:	f000 814a 	beq.w	8015a08 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015774:	683b      	ldr	r3, [r7, #0]
 8015776:	685b      	ldr	r3, [r3, #4]
 8015778:	f003 0303 	and.w	r3, r3, #3
 801577c:	2b01      	cmp	r3, #1
 801577e:	d005      	beq.n	801578c <HAL_GPIO_Init+0x40>
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	685b      	ldr	r3, [r3, #4]
 8015784:	f003 0303 	and.w	r3, r3, #3
 8015788:	2b02      	cmp	r3, #2
 801578a:	d130      	bne.n	80157ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	689b      	ldr	r3, [r3, #8]
 8015790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8015792:	697b      	ldr	r3, [r7, #20]
 8015794:	005b      	lsls	r3, r3, #1
 8015796:	2203      	movs	r2, #3
 8015798:	fa02 f303 	lsl.w	r3, r2, r3
 801579c:	43db      	mvns	r3, r3
 801579e:	693a      	ldr	r2, [r7, #16]
 80157a0:	4013      	ands	r3, r2
 80157a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80157a4:	683b      	ldr	r3, [r7, #0]
 80157a6:	68da      	ldr	r2, [r3, #12]
 80157a8:	697b      	ldr	r3, [r7, #20]
 80157aa:	005b      	lsls	r3, r3, #1
 80157ac:	fa02 f303 	lsl.w	r3, r2, r3
 80157b0:	693a      	ldr	r2, [r7, #16]
 80157b2:	4313      	orrs	r3, r2
 80157b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	693a      	ldr	r2, [r7, #16]
 80157ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	685b      	ldr	r3, [r3, #4]
 80157c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80157c2:	2201      	movs	r2, #1
 80157c4:	697b      	ldr	r3, [r7, #20]
 80157c6:	fa02 f303 	lsl.w	r3, r2, r3
 80157ca:	43db      	mvns	r3, r3
 80157cc:	693a      	ldr	r2, [r7, #16]
 80157ce:	4013      	ands	r3, r2
 80157d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	685b      	ldr	r3, [r3, #4]
 80157d6:	091b      	lsrs	r3, r3, #4
 80157d8:	f003 0201 	and.w	r2, r3, #1
 80157dc:	697b      	ldr	r3, [r7, #20]
 80157de:	fa02 f303 	lsl.w	r3, r2, r3
 80157e2:	693a      	ldr	r2, [r7, #16]
 80157e4:	4313      	orrs	r3, r2
 80157e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	693a      	ldr	r2, [r7, #16]
 80157ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	685b      	ldr	r3, [r3, #4]
 80157f2:	f003 0303 	and.w	r3, r3, #3
 80157f6:	2b03      	cmp	r3, #3
 80157f8:	d017      	beq.n	801582a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	68db      	ldr	r3, [r3, #12]
 80157fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015800:	697b      	ldr	r3, [r7, #20]
 8015802:	005b      	lsls	r3, r3, #1
 8015804:	2203      	movs	r2, #3
 8015806:	fa02 f303 	lsl.w	r3, r2, r3
 801580a:	43db      	mvns	r3, r3
 801580c:	693a      	ldr	r2, [r7, #16]
 801580e:	4013      	ands	r3, r2
 8015810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015812:	683b      	ldr	r3, [r7, #0]
 8015814:	689a      	ldr	r2, [r3, #8]
 8015816:	697b      	ldr	r3, [r7, #20]
 8015818:	005b      	lsls	r3, r3, #1
 801581a:	fa02 f303 	lsl.w	r3, r2, r3
 801581e:	693a      	ldr	r2, [r7, #16]
 8015820:	4313      	orrs	r3, r2
 8015822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	693a      	ldr	r2, [r7, #16]
 8015828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801582a:	683b      	ldr	r3, [r7, #0]
 801582c:	685b      	ldr	r3, [r3, #4]
 801582e:	f003 0303 	and.w	r3, r3, #3
 8015832:	2b02      	cmp	r3, #2
 8015834:	d123      	bne.n	801587e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	08da      	lsrs	r2, r3, #3
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	3208      	adds	r2, #8
 801583e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015842:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8015844:	697b      	ldr	r3, [r7, #20]
 8015846:	f003 0307 	and.w	r3, r3, #7
 801584a:	009b      	lsls	r3, r3, #2
 801584c:	220f      	movs	r2, #15
 801584e:	fa02 f303 	lsl.w	r3, r2, r3
 8015852:	43db      	mvns	r3, r3
 8015854:	693a      	ldr	r2, [r7, #16]
 8015856:	4013      	ands	r3, r2
 8015858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	691a      	ldr	r2, [r3, #16]
 801585e:	697b      	ldr	r3, [r7, #20]
 8015860:	f003 0307 	and.w	r3, r3, #7
 8015864:	009b      	lsls	r3, r3, #2
 8015866:	fa02 f303 	lsl.w	r3, r2, r3
 801586a:	693a      	ldr	r2, [r7, #16]
 801586c:	4313      	orrs	r3, r2
 801586e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	08da      	lsrs	r2, r3, #3
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	3208      	adds	r2, #8
 8015878:	6939      	ldr	r1, [r7, #16]
 801587a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8015884:	697b      	ldr	r3, [r7, #20]
 8015886:	005b      	lsls	r3, r3, #1
 8015888:	2203      	movs	r2, #3
 801588a:	fa02 f303 	lsl.w	r3, r2, r3
 801588e:	43db      	mvns	r3, r3
 8015890:	693a      	ldr	r2, [r7, #16]
 8015892:	4013      	ands	r3, r2
 8015894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015896:	683b      	ldr	r3, [r7, #0]
 8015898:	685b      	ldr	r3, [r3, #4]
 801589a:	f003 0203 	and.w	r2, r3, #3
 801589e:	697b      	ldr	r3, [r7, #20]
 80158a0:	005b      	lsls	r3, r3, #1
 80158a2:	fa02 f303 	lsl.w	r3, r2, r3
 80158a6:	693a      	ldr	r2, [r7, #16]
 80158a8:	4313      	orrs	r3, r2
 80158aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	693a      	ldr	r2, [r7, #16]
 80158b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80158b2:	683b      	ldr	r3, [r7, #0]
 80158b4:	685b      	ldr	r3, [r3, #4]
 80158b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	f000 80a4 	beq.w	8015a08 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80158c0:	4a5a      	ldr	r2, [pc, #360]	; (8015a2c <HAL_GPIO_Init+0x2e0>)
 80158c2:	697b      	ldr	r3, [r7, #20]
 80158c4:	089b      	lsrs	r3, r3, #2
 80158c6:	3318      	adds	r3, #24
 80158c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80158cc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80158ce:	697b      	ldr	r3, [r7, #20]
 80158d0:	f003 0303 	and.w	r3, r3, #3
 80158d4:	00db      	lsls	r3, r3, #3
 80158d6:	220f      	movs	r2, #15
 80158d8:	fa02 f303 	lsl.w	r3, r2, r3
 80158dc:	43db      	mvns	r3, r3
 80158de:	693a      	ldr	r2, [r7, #16]
 80158e0:	4013      	ands	r3, r2
 80158e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	4a52      	ldr	r2, [pc, #328]	; (8015a30 <HAL_GPIO_Init+0x2e4>)
 80158e8:	4293      	cmp	r3, r2
 80158ea:	d025      	beq.n	8015938 <HAL_GPIO_Init+0x1ec>
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	4a51      	ldr	r2, [pc, #324]	; (8015a34 <HAL_GPIO_Init+0x2e8>)
 80158f0:	4293      	cmp	r3, r2
 80158f2:	d01f      	beq.n	8015934 <HAL_GPIO_Init+0x1e8>
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	4a50      	ldr	r2, [pc, #320]	; (8015a38 <HAL_GPIO_Init+0x2ec>)
 80158f8:	4293      	cmp	r3, r2
 80158fa:	d019      	beq.n	8015930 <HAL_GPIO_Init+0x1e4>
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	4a4f      	ldr	r2, [pc, #316]	; (8015a3c <HAL_GPIO_Init+0x2f0>)
 8015900:	4293      	cmp	r3, r2
 8015902:	d013      	beq.n	801592c <HAL_GPIO_Init+0x1e0>
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	4a4e      	ldr	r2, [pc, #312]	; (8015a40 <HAL_GPIO_Init+0x2f4>)
 8015908:	4293      	cmp	r3, r2
 801590a:	d00d      	beq.n	8015928 <HAL_GPIO_Init+0x1dc>
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	4a4d      	ldr	r2, [pc, #308]	; (8015a44 <HAL_GPIO_Init+0x2f8>)
 8015910:	4293      	cmp	r3, r2
 8015912:	d007      	beq.n	8015924 <HAL_GPIO_Init+0x1d8>
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	4a4c      	ldr	r2, [pc, #304]	; (8015a48 <HAL_GPIO_Init+0x2fc>)
 8015918:	4293      	cmp	r3, r2
 801591a:	d101      	bne.n	8015920 <HAL_GPIO_Init+0x1d4>
 801591c:	2306      	movs	r3, #6
 801591e:	e00c      	b.n	801593a <HAL_GPIO_Init+0x1ee>
 8015920:	2307      	movs	r3, #7
 8015922:	e00a      	b.n	801593a <HAL_GPIO_Init+0x1ee>
 8015924:	2305      	movs	r3, #5
 8015926:	e008      	b.n	801593a <HAL_GPIO_Init+0x1ee>
 8015928:	2304      	movs	r3, #4
 801592a:	e006      	b.n	801593a <HAL_GPIO_Init+0x1ee>
 801592c:	2303      	movs	r3, #3
 801592e:	e004      	b.n	801593a <HAL_GPIO_Init+0x1ee>
 8015930:	2302      	movs	r3, #2
 8015932:	e002      	b.n	801593a <HAL_GPIO_Init+0x1ee>
 8015934:	2301      	movs	r3, #1
 8015936:	e000      	b.n	801593a <HAL_GPIO_Init+0x1ee>
 8015938:	2300      	movs	r3, #0
 801593a:	697a      	ldr	r2, [r7, #20]
 801593c:	f002 0203 	and.w	r2, r2, #3
 8015940:	00d2      	lsls	r2, r2, #3
 8015942:	4093      	lsls	r3, r2
 8015944:	693a      	ldr	r2, [r7, #16]
 8015946:	4313      	orrs	r3, r2
 8015948:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 801594a:	4938      	ldr	r1, [pc, #224]	; (8015a2c <HAL_GPIO_Init+0x2e0>)
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	089b      	lsrs	r3, r3, #2
 8015950:	3318      	adds	r3, #24
 8015952:	693a      	ldr	r2, [r7, #16]
 8015954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8015958:	4b34      	ldr	r3, [pc, #208]	; (8015a2c <HAL_GPIO_Init+0x2e0>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	43db      	mvns	r3, r3
 8015962:	693a      	ldr	r2, [r7, #16]
 8015964:	4013      	ands	r3, r2
 8015966:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	685b      	ldr	r3, [r3, #4]
 801596c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015970:	2b00      	cmp	r3, #0
 8015972:	d003      	beq.n	801597c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8015974:	693a      	ldr	r2, [r7, #16]
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	4313      	orrs	r3, r2
 801597a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801597c:	4a2b      	ldr	r2, [pc, #172]	; (8015a2c <HAL_GPIO_Init+0x2e0>)
 801597e:	693b      	ldr	r3, [r7, #16]
 8015980:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8015982:	4b2a      	ldr	r3, [pc, #168]	; (8015a2c <HAL_GPIO_Init+0x2e0>)
 8015984:	685b      	ldr	r3, [r3, #4]
 8015986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	43db      	mvns	r3, r3
 801598c:	693a      	ldr	r2, [r7, #16]
 801598e:	4013      	ands	r3, r2
 8015990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8015992:	683b      	ldr	r3, [r7, #0]
 8015994:	685b      	ldr	r3, [r3, #4]
 8015996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801599a:	2b00      	cmp	r3, #0
 801599c:	d003      	beq.n	80159a6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 801599e:	693a      	ldr	r2, [r7, #16]
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	4313      	orrs	r3, r2
 80159a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80159a6:	4a21      	ldr	r2, [pc, #132]	; (8015a2c <HAL_GPIO_Init+0x2e0>)
 80159a8:	693b      	ldr	r3, [r7, #16]
 80159aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80159ac:	4b1f      	ldr	r3, [pc, #124]	; (8015a2c <HAL_GPIO_Init+0x2e0>)
 80159ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80159b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	43db      	mvns	r3, r3
 80159b8:	693a      	ldr	r2, [r7, #16]
 80159ba:	4013      	ands	r3, r2
 80159bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80159be:	683b      	ldr	r3, [r7, #0]
 80159c0:	685b      	ldr	r3, [r3, #4]
 80159c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d003      	beq.n	80159d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80159ca:	693a      	ldr	r2, [r7, #16]
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	4313      	orrs	r3, r2
 80159d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80159d2:	4a16      	ldr	r2, [pc, #88]	; (8015a2c <HAL_GPIO_Init+0x2e0>)
 80159d4:	693b      	ldr	r3, [r7, #16]
 80159d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80159da:	4b14      	ldr	r3, [pc, #80]	; (8015a2c <HAL_GPIO_Init+0x2e0>)
 80159dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80159e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	43db      	mvns	r3, r3
 80159e6:	693a      	ldr	r2, [r7, #16]
 80159e8:	4013      	ands	r3, r2
 80159ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	685b      	ldr	r3, [r3, #4]
 80159f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d003      	beq.n	8015a00 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80159f8:	693a      	ldr	r2, [r7, #16]
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	4313      	orrs	r3, r2
 80159fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8015a00:	4a0a      	ldr	r2, [pc, #40]	; (8015a2c <HAL_GPIO_Init+0x2e0>)
 8015a02:	693b      	ldr	r3, [r7, #16]
 8015a04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8015a08:	697b      	ldr	r3, [r7, #20]
 8015a0a:	3301      	adds	r3, #1
 8015a0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8015a0e:	683b      	ldr	r3, [r7, #0]
 8015a10:	681a      	ldr	r2, [r3, #0]
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	fa22 f303 	lsr.w	r3, r2, r3
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	f47f ae9f 	bne.w	801575c <HAL_GPIO_Init+0x10>
  }
}
 8015a1e:	bf00      	nop
 8015a20:	bf00      	nop
 8015a22:	371c      	adds	r7, #28
 8015a24:	46bd      	mov	sp, r7
 8015a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2a:	4770      	bx	lr
 8015a2c:	4002f400 	.word	0x4002f400
 8015a30:	42020000 	.word	0x42020000
 8015a34:	42020400 	.word	0x42020400
 8015a38:	42020800 	.word	0x42020800
 8015a3c:	42020c00 	.word	0x42020c00
 8015a40:	42021000 	.word	0x42021000
 8015a44:	42021400 	.word	0x42021400
 8015a48:	42021800 	.word	0x42021800

08015a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015a4c:	b480      	push	{r7}
 8015a4e:	b083      	sub	sp, #12
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
 8015a54:	460b      	mov	r3, r1
 8015a56:	807b      	strh	r3, [r7, #2]
 8015a58:	4613      	mov	r3, r2
 8015a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015a5c:	787b      	ldrb	r3, [r7, #1]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d003      	beq.n	8015a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8015a62:	887a      	ldrh	r2, [r7, #2]
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8015a68:	e002      	b.n	8015a70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8015a6a:	887a      	ldrh	r2, [r7, #2]
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015a70:	bf00      	nop
 8015a72:	370c      	adds	r7, #12
 8015a74:	46bd      	mov	sp, r7
 8015a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7a:	4770      	bx	lr

08015a7c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8015a7c:	b480      	push	{r7}
 8015a7e:	b085      	sub	sp, #20
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
 8015a84:	460b      	mov	r3, r1
 8015a86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	695b      	ldr	r3, [r3, #20]
 8015a8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8015a8e:	887a      	ldrh	r2, [r7, #2]
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	4013      	ands	r3, r2
 8015a94:	041a      	lsls	r2, r3, #16
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	43d9      	mvns	r1, r3
 8015a9a:	887b      	ldrh	r3, [r7, #2]
 8015a9c:	400b      	ands	r3, r1
 8015a9e:	431a      	orrs	r2, r3
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	619a      	str	r2, [r3, #24]
}
 8015aa4:	bf00      	nop
 8015aa6:	3714      	adds	r7, #20
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aae:	4770      	bx	lr

08015ab0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b082      	sub	sp, #8
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d101      	bne.n	8015ac2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015abe:	2301      	movs	r3, #1
 8015ac0:	e081      	b.n	8015bc6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015ac8:	b2db      	uxtb	r3, r3
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d106      	bne.n	8015adc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015ad6:	6878      	ldr	r0, [r7, #4]
 8015ad8:	f7fc fe7a 	bl	80127d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	2224      	movs	r2, #36	; 0x24
 8015ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	681a      	ldr	r2, [r3, #0]
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	f022 0201 	bic.w	r2, r2, #1
 8015af2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	685a      	ldr	r2, [r3, #4]
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8015b00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	689a      	ldr	r2, [r3, #8]
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015b10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	68db      	ldr	r3, [r3, #12]
 8015b16:	2b01      	cmp	r3, #1
 8015b18:	d107      	bne.n	8015b2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	689a      	ldr	r2, [r3, #8]
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015b26:	609a      	str	r2, [r3, #8]
 8015b28:	e006      	b.n	8015b38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	689a      	ldr	r2, [r3, #8]
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8015b36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	68db      	ldr	r3, [r3, #12]
 8015b3c:	2b02      	cmp	r3, #2
 8015b3e:	d104      	bne.n	8015b4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015b48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	685b      	ldr	r3, [r3, #4]
 8015b50:	687a      	ldr	r2, [r7, #4]
 8015b52:	6812      	ldr	r2, [r2, #0]
 8015b54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015b5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	68da      	ldr	r2, [r3, #12]
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015b6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	691a      	ldr	r2, [r3, #16]
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	695b      	ldr	r3, [r3, #20]
 8015b76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	699b      	ldr	r3, [r3, #24]
 8015b7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	430a      	orrs	r2, r1
 8015b86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	69d9      	ldr	r1, [r3, #28]
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	6a1a      	ldr	r2, [r3, #32]
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	430a      	orrs	r2, r1
 8015b96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	681a      	ldr	r2, [r3, #0]
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	f042 0201 	orr.w	r2, r2, #1
 8015ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	2200      	movs	r2, #0
 8015bac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	2220      	movs	r2, #32
 8015bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	2200      	movs	r2, #0
 8015bba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8015bc4:	2300      	movs	r3, #0
}
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	3708      	adds	r7, #8
 8015bca:	46bd      	mov	sp, r7
 8015bcc:	bd80      	pop	{r7, pc}
	...

08015bd0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b088      	sub	sp, #32
 8015bd4:	af02      	add	r7, sp, #8
 8015bd6:	60f8      	str	r0, [r7, #12]
 8015bd8:	607a      	str	r2, [r7, #4]
 8015bda:	461a      	mov	r2, r3
 8015bdc:	460b      	mov	r3, r1
 8015bde:	817b      	strh	r3, [r7, #10]
 8015be0:	4613      	mov	r3, r2
 8015be2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015bea:	b2db      	uxtb	r3, r3
 8015bec:	2b20      	cmp	r3, #32
 8015bee:	f040 80da 	bne.w	8015da6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015bf8:	2b01      	cmp	r3, #1
 8015bfa:	d101      	bne.n	8015c00 <HAL_I2C_Master_Transmit+0x30>
 8015bfc:	2302      	movs	r3, #2
 8015bfe:	e0d3      	b.n	8015da8 <HAL_I2C_Master_Transmit+0x1d8>
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	2201      	movs	r2, #1
 8015c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015c08:	f7fd fcc4 	bl	8013594 <HAL_GetTick>
 8015c0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015c0e:	697b      	ldr	r3, [r7, #20]
 8015c10:	9300      	str	r3, [sp, #0]
 8015c12:	2319      	movs	r3, #25
 8015c14:	2201      	movs	r2, #1
 8015c16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015c1a:	68f8      	ldr	r0, [r7, #12]
 8015c1c:	f000 f9e6 	bl	8015fec <I2C_WaitOnFlagUntilTimeout>
 8015c20:	4603      	mov	r3, r0
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d001      	beq.n	8015c2a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8015c26:	2301      	movs	r3, #1
 8015c28:	e0be      	b.n	8015da8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	2221      	movs	r2, #33	; 0x21
 8015c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	2210      	movs	r2, #16
 8015c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	687a      	ldr	r2, [r7, #4]
 8015c44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	893a      	ldrh	r2, [r7, #8]
 8015c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	2200      	movs	r2, #0
 8015c50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c56:	b29b      	uxth	r3, r3
 8015c58:	2bff      	cmp	r3, #255	; 0xff
 8015c5a:	d90e      	bls.n	8015c7a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	22ff      	movs	r2, #255	; 0xff
 8015c60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c66:	b2da      	uxtb	r2, r3
 8015c68:	8979      	ldrh	r1, [r7, #10]
 8015c6a:	4b51      	ldr	r3, [pc, #324]	; (8015db0 <HAL_I2C_Master_Transmit+0x1e0>)
 8015c6c:	9300      	str	r3, [sp, #0]
 8015c6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015c72:	68f8      	ldr	r0, [r7, #12]
 8015c74:	f000 fbf6 	bl	8016464 <I2C_TransferConfig>
 8015c78:	e06c      	b.n	8015d54 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c7e:	b29a      	uxth	r2, r3
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c88:	b2da      	uxtb	r2, r3
 8015c8a:	8979      	ldrh	r1, [r7, #10]
 8015c8c:	4b48      	ldr	r3, [pc, #288]	; (8015db0 <HAL_I2C_Master_Transmit+0x1e0>)
 8015c8e:	9300      	str	r3, [sp, #0]
 8015c90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015c94:	68f8      	ldr	r0, [r7, #12]
 8015c96:	f000 fbe5 	bl	8016464 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8015c9a:	e05b      	b.n	8015d54 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015c9c:	697a      	ldr	r2, [r7, #20]
 8015c9e:	6a39      	ldr	r1, [r7, #32]
 8015ca0:	68f8      	ldr	r0, [r7, #12]
 8015ca2:	f000 f9f2 	bl	801608a <I2C_WaitOnTXISFlagUntilTimeout>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d001      	beq.n	8015cb0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8015cac:	2301      	movs	r3, #1
 8015cae:	e07b      	b.n	8015da8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cb4:	781a      	ldrb	r2, [r3, #0]
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cc0:	1c5a      	adds	r2, r3, #1
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015cca:	b29b      	uxth	r3, r3
 8015ccc:	3b01      	subs	r3, #1
 8015cce:	b29a      	uxth	r2, r3
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015cd8:	3b01      	subs	r3, #1
 8015cda:	b29a      	uxth	r2, r3
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015ce4:	b29b      	uxth	r3, r3
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d034      	beq.n	8015d54 <HAL_I2C_Master_Transmit+0x184>
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d130      	bne.n	8015d54 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015cf2:	697b      	ldr	r3, [r7, #20]
 8015cf4:	9300      	str	r3, [sp, #0]
 8015cf6:	6a3b      	ldr	r3, [r7, #32]
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	2180      	movs	r1, #128	; 0x80
 8015cfc:	68f8      	ldr	r0, [r7, #12]
 8015cfe:	f000 f975 	bl	8015fec <I2C_WaitOnFlagUntilTimeout>
 8015d02:	4603      	mov	r3, r0
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d001      	beq.n	8015d0c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8015d08:	2301      	movs	r3, #1
 8015d0a:	e04d      	b.n	8015da8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d10:	b29b      	uxth	r3, r3
 8015d12:	2bff      	cmp	r3, #255	; 0xff
 8015d14:	d90e      	bls.n	8015d34 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	22ff      	movs	r2, #255	; 0xff
 8015d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d20:	b2da      	uxtb	r2, r3
 8015d22:	8979      	ldrh	r1, [r7, #10]
 8015d24:	2300      	movs	r3, #0
 8015d26:	9300      	str	r3, [sp, #0]
 8015d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015d2c:	68f8      	ldr	r0, [r7, #12]
 8015d2e:	f000 fb99 	bl	8016464 <I2C_TransferConfig>
 8015d32:	e00f      	b.n	8015d54 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d38:	b29a      	uxth	r2, r3
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d42:	b2da      	uxtb	r2, r3
 8015d44:	8979      	ldrh	r1, [r7, #10]
 8015d46:	2300      	movs	r3, #0
 8015d48:	9300      	str	r3, [sp, #0]
 8015d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015d4e:	68f8      	ldr	r0, [r7, #12]
 8015d50:	f000 fb88 	bl	8016464 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d58:	b29b      	uxth	r3, r3
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d19e      	bne.n	8015c9c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015d5e:	697a      	ldr	r2, [r7, #20]
 8015d60:	6a39      	ldr	r1, [r7, #32]
 8015d62:	68f8      	ldr	r0, [r7, #12]
 8015d64:	f000 f9d8 	bl	8016118 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d001      	beq.n	8015d72 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8015d6e:	2301      	movs	r3, #1
 8015d70:	e01a      	b.n	8015da8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	2220      	movs	r2, #32
 8015d78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	6859      	ldr	r1, [r3, #4]
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	681a      	ldr	r2, [r3, #0]
 8015d84:	4b0b      	ldr	r3, [pc, #44]	; (8015db4 <HAL_I2C_Master_Transmit+0x1e4>)
 8015d86:	400b      	ands	r3, r1
 8015d88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	2220      	movs	r2, #32
 8015d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	2200      	movs	r2, #0
 8015d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8015da2:	2300      	movs	r3, #0
 8015da4:	e000      	b.n	8015da8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8015da6:	2302      	movs	r3, #2
  }
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	3718      	adds	r7, #24
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd80      	pop	{r7, pc}
 8015db0:	80002000 	.word	0x80002000
 8015db4:	fe00e800 	.word	0xfe00e800

08015db8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b088      	sub	sp, #32
 8015dbc:	af02      	add	r7, sp, #8
 8015dbe:	60f8      	str	r0, [r7, #12]
 8015dc0:	607a      	str	r2, [r7, #4]
 8015dc2:	461a      	mov	r2, r3
 8015dc4:	460b      	mov	r3, r1
 8015dc6:	817b      	strh	r3, [r7, #10]
 8015dc8:	4613      	mov	r3, r2
 8015dca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015dd2:	b2db      	uxtb	r3, r3
 8015dd4:	2b20      	cmp	r3, #32
 8015dd6:	f040 80db 	bne.w	8015f90 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015de0:	2b01      	cmp	r3, #1
 8015de2:	d101      	bne.n	8015de8 <HAL_I2C_Master_Receive+0x30>
 8015de4:	2302      	movs	r3, #2
 8015de6:	e0d4      	b.n	8015f92 <HAL_I2C_Master_Receive+0x1da>
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	2201      	movs	r2, #1
 8015dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015df0:	f7fd fbd0 	bl	8013594 <HAL_GetTick>
 8015df4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015df6:	697b      	ldr	r3, [r7, #20]
 8015df8:	9300      	str	r3, [sp, #0]
 8015dfa:	2319      	movs	r3, #25
 8015dfc:	2201      	movs	r2, #1
 8015dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015e02:	68f8      	ldr	r0, [r7, #12]
 8015e04:	f000 f8f2 	bl	8015fec <I2C_WaitOnFlagUntilTimeout>
 8015e08:	4603      	mov	r3, r0
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d001      	beq.n	8015e12 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8015e0e:	2301      	movs	r3, #1
 8015e10:	e0bf      	b.n	8015f92 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	2222      	movs	r2, #34	; 0x22
 8015e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	2210      	movs	r2, #16
 8015e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	2200      	movs	r2, #0
 8015e26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	687a      	ldr	r2, [r7, #4]
 8015e2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	893a      	ldrh	r2, [r7, #8]
 8015e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	2200      	movs	r2, #0
 8015e38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e3e:	b29b      	uxth	r3, r3
 8015e40:	2bff      	cmp	r3, #255	; 0xff
 8015e42:	d90e      	bls.n	8015e62 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	22ff      	movs	r2, #255	; 0xff
 8015e48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e4e:	b2da      	uxtb	r2, r3
 8015e50:	8979      	ldrh	r1, [r7, #10]
 8015e52:	4b52      	ldr	r3, [pc, #328]	; (8015f9c <HAL_I2C_Master_Receive+0x1e4>)
 8015e54:	9300      	str	r3, [sp, #0]
 8015e56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015e5a:	68f8      	ldr	r0, [r7, #12]
 8015e5c:	f000 fb02 	bl	8016464 <I2C_TransferConfig>
 8015e60:	e06d      	b.n	8015f3e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e66:	b29a      	uxth	r2, r3
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e70:	b2da      	uxtb	r2, r3
 8015e72:	8979      	ldrh	r1, [r7, #10]
 8015e74:	4b49      	ldr	r3, [pc, #292]	; (8015f9c <HAL_I2C_Master_Receive+0x1e4>)
 8015e76:	9300      	str	r3, [sp, #0]
 8015e78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015e7c:	68f8      	ldr	r0, [r7, #12]
 8015e7e:	f000 faf1 	bl	8016464 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8015e82:	e05c      	b.n	8015f3e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015e84:	697a      	ldr	r2, [r7, #20]
 8015e86:	6a39      	ldr	r1, [r7, #32]
 8015e88:	68f8      	ldr	r0, [r7, #12]
 8015e8a:	f000 f989 	bl	80161a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8015e8e:	4603      	mov	r3, r0
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d001      	beq.n	8015e98 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8015e94:	2301      	movs	r3, #1
 8015e96:	e07c      	b.n	8015f92 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ea2:	b2d2      	uxtb	r2, r2
 8015ea4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eaa:	1c5a      	adds	r2, r3, #1
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015eb4:	3b01      	subs	r3, #1
 8015eb6:	b29a      	uxth	r2, r3
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015ec0:	b29b      	uxth	r3, r3
 8015ec2:	3b01      	subs	r3, #1
 8015ec4:	b29a      	uxth	r2, r3
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015ece:	b29b      	uxth	r3, r3
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d034      	beq.n	8015f3e <HAL_I2C_Master_Receive+0x186>
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d130      	bne.n	8015f3e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015edc:	697b      	ldr	r3, [r7, #20]
 8015ede:	9300      	str	r3, [sp, #0]
 8015ee0:	6a3b      	ldr	r3, [r7, #32]
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	2180      	movs	r1, #128	; 0x80
 8015ee6:	68f8      	ldr	r0, [r7, #12]
 8015ee8:	f000 f880 	bl	8015fec <I2C_WaitOnFlagUntilTimeout>
 8015eec:	4603      	mov	r3, r0
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d001      	beq.n	8015ef6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8015ef2:	2301      	movs	r3, #1
 8015ef4:	e04d      	b.n	8015f92 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015efa:	b29b      	uxth	r3, r3
 8015efc:	2bff      	cmp	r3, #255	; 0xff
 8015efe:	d90e      	bls.n	8015f1e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	22ff      	movs	r2, #255	; 0xff
 8015f04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f0a:	b2da      	uxtb	r2, r3
 8015f0c:	8979      	ldrh	r1, [r7, #10]
 8015f0e:	2300      	movs	r3, #0
 8015f10:	9300      	str	r3, [sp, #0]
 8015f12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015f16:	68f8      	ldr	r0, [r7, #12]
 8015f18:	f000 faa4 	bl	8016464 <I2C_TransferConfig>
 8015f1c:	e00f      	b.n	8015f3e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f22:	b29a      	uxth	r2, r3
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f2c:	b2da      	uxtb	r2, r3
 8015f2e:	8979      	ldrh	r1, [r7, #10]
 8015f30:	2300      	movs	r3, #0
 8015f32:	9300      	str	r3, [sp, #0]
 8015f34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015f38:	68f8      	ldr	r0, [r7, #12]
 8015f3a:	f000 fa93 	bl	8016464 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f42:	b29b      	uxth	r3, r3
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d19d      	bne.n	8015e84 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015f48:	697a      	ldr	r2, [r7, #20]
 8015f4a:	6a39      	ldr	r1, [r7, #32]
 8015f4c:	68f8      	ldr	r0, [r7, #12]
 8015f4e:	f000 f8e3 	bl	8016118 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015f52:	4603      	mov	r3, r0
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d001      	beq.n	8015f5c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8015f58:	2301      	movs	r3, #1
 8015f5a:	e01a      	b.n	8015f92 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	2220      	movs	r2, #32
 8015f62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	6859      	ldr	r1, [r3, #4]
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	681a      	ldr	r2, [r3, #0]
 8015f6e:	4b0c      	ldr	r3, [pc, #48]	; (8015fa0 <HAL_I2C_Master_Receive+0x1e8>)
 8015f70:	400b      	ands	r3, r1
 8015f72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	2220      	movs	r2, #32
 8015f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	2200      	movs	r2, #0
 8015f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	e000      	b.n	8015f92 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8015f90:	2302      	movs	r3, #2
  }
}
 8015f92:	4618      	mov	r0, r3
 8015f94:	3718      	adds	r7, #24
 8015f96:	46bd      	mov	sp, r7
 8015f98:	bd80      	pop	{r7, pc}
 8015f9a:	bf00      	nop
 8015f9c:	80002400 	.word	0x80002400
 8015fa0:	fe00e800 	.word	0xfe00e800

08015fa4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8015fa4:	b480      	push	{r7}
 8015fa6:	b083      	sub	sp, #12
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	699b      	ldr	r3, [r3, #24]
 8015fb2:	f003 0302 	and.w	r3, r3, #2
 8015fb6:	2b02      	cmp	r3, #2
 8015fb8:	d103      	bne.n	8015fc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	699b      	ldr	r3, [r3, #24]
 8015fc8:	f003 0301 	and.w	r3, r3, #1
 8015fcc:	2b01      	cmp	r3, #1
 8015fce:	d007      	beq.n	8015fe0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	699a      	ldr	r2, [r3, #24]
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	f042 0201 	orr.w	r2, r2, #1
 8015fde:	619a      	str	r2, [r3, #24]
  }
}
 8015fe0:	bf00      	nop
 8015fe2:	370c      	adds	r7, #12
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fea:	4770      	bx	lr

08015fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b084      	sub	sp, #16
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	60f8      	str	r0, [r7, #12]
 8015ff4:	60b9      	str	r1, [r7, #8]
 8015ff6:	603b      	str	r3, [r7, #0]
 8015ff8:	4613      	mov	r3, r2
 8015ffa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015ffc:	e031      	b.n	8016062 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015ffe:	683b      	ldr	r3, [r7, #0]
 8016000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016004:	d02d      	beq.n	8016062 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016006:	f7fd fac5 	bl	8013594 <HAL_GetTick>
 801600a:	4602      	mov	r2, r0
 801600c:	69bb      	ldr	r3, [r7, #24]
 801600e:	1ad3      	subs	r3, r2, r3
 8016010:	683a      	ldr	r2, [r7, #0]
 8016012:	429a      	cmp	r2, r3
 8016014:	d302      	bcc.n	801601c <I2C_WaitOnFlagUntilTimeout+0x30>
 8016016:	683b      	ldr	r3, [r7, #0]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d122      	bne.n	8016062 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	699a      	ldr	r2, [r3, #24]
 8016022:	68bb      	ldr	r3, [r7, #8]
 8016024:	4013      	ands	r3, r2
 8016026:	68ba      	ldr	r2, [r7, #8]
 8016028:	429a      	cmp	r2, r3
 801602a:	bf0c      	ite	eq
 801602c:	2301      	moveq	r3, #1
 801602e:	2300      	movne	r3, #0
 8016030:	b2db      	uxtb	r3, r3
 8016032:	461a      	mov	r2, r3
 8016034:	79fb      	ldrb	r3, [r7, #7]
 8016036:	429a      	cmp	r2, r3
 8016038:	d113      	bne.n	8016062 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801603e:	f043 0220 	orr.w	r2, r3, #32
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	2220      	movs	r2, #32
 801604a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	2200      	movs	r2, #0
 8016052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	2200      	movs	r2, #0
 801605a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 801605e:	2301      	movs	r3, #1
 8016060:	e00f      	b.n	8016082 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	699a      	ldr	r2, [r3, #24]
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	4013      	ands	r3, r2
 801606c:	68ba      	ldr	r2, [r7, #8]
 801606e:	429a      	cmp	r2, r3
 8016070:	bf0c      	ite	eq
 8016072:	2301      	moveq	r3, #1
 8016074:	2300      	movne	r3, #0
 8016076:	b2db      	uxtb	r3, r3
 8016078:	461a      	mov	r2, r3
 801607a:	79fb      	ldrb	r3, [r7, #7]
 801607c:	429a      	cmp	r2, r3
 801607e:	d0be      	beq.n	8015ffe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016080:	2300      	movs	r3, #0
}
 8016082:	4618      	mov	r0, r3
 8016084:	3710      	adds	r7, #16
 8016086:	46bd      	mov	sp, r7
 8016088:	bd80      	pop	{r7, pc}

0801608a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801608a:	b580      	push	{r7, lr}
 801608c:	b084      	sub	sp, #16
 801608e:	af00      	add	r7, sp, #0
 8016090:	60f8      	str	r0, [r7, #12]
 8016092:	60b9      	str	r1, [r7, #8]
 8016094:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8016096:	e033      	b.n	8016100 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016098:	687a      	ldr	r2, [r7, #4]
 801609a:	68b9      	ldr	r1, [r7, #8]
 801609c:	68f8      	ldr	r0, [r7, #12]
 801609e:	f000 f901 	bl	80162a4 <I2C_IsErrorOccurred>
 80160a2:	4603      	mov	r3, r0
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d001      	beq.n	80160ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80160a8:	2301      	movs	r3, #1
 80160aa:	e031      	b.n	8016110 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80160ac:	68bb      	ldr	r3, [r7, #8]
 80160ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160b2:	d025      	beq.n	8016100 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80160b4:	f7fd fa6e 	bl	8013594 <HAL_GetTick>
 80160b8:	4602      	mov	r2, r0
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	1ad3      	subs	r3, r2, r3
 80160be:	68ba      	ldr	r2, [r7, #8]
 80160c0:	429a      	cmp	r2, r3
 80160c2:	d302      	bcc.n	80160ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80160c4:	68bb      	ldr	r3, [r7, #8]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d11a      	bne.n	8016100 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	699b      	ldr	r3, [r3, #24]
 80160d0:	f003 0302 	and.w	r3, r3, #2
 80160d4:	2b02      	cmp	r3, #2
 80160d6:	d013      	beq.n	8016100 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160dc:	f043 0220 	orr.w	r2, r3, #32
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	2220      	movs	r2, #32
 80160e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	2200      	movs	r2, #0
 80160f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	2200      	movs	r2, #0
 80160f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80160fc:	2301      	movs	r3, #1
 80160fe:	e007      	b.n	8016110 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	699b      	ldr	r3, [r3, #24]
 8016106:	f003 0302 	and.w	r3, r3, #2
 801610a:	2b02      	cmp	r3, #2
 801610c:	d1c4      	bne.n	8016098 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801610e:	2300      	movs	r3, #0
}
 8016110:	4618      	mov	r0, r3
 8016112:	3710      	adds	r7, #16
 8016114:	46bd      	mov	sp, r7
 8016116:	bd80      	pop	{r7, pc}

08016118 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b084      	sub	sp, #16
 801611c:	af00      	add	r7, sp, #0
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	60b9      	str	r1, [r7, #8]
 8016122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016124:	e02f      	b.n	8016186 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016126:	687a      	ldr	r2, [r7, #4]
 8016128:	68b9      	ldr	r1, [r7, #8]
 801612a:	68f8      	ldr	r0, [r7, #12]
 801612c:	f000 f8ba 	bl	80162a4 <I2C_IsErrorOccurred>
 8016130:	4603      	mov	r3, r0
 8016132:	2b00      	cmp	r3, #0
 8016134:	d001      	beq.n	801613a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8016136:	2301      	movs	r3, #1
 8016138:	e02d      	b.n	8016196 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801613a:	f7fd fa2b 	bl	8013594 <HAL_GetTick>
 801613e:	4602      	mov	r2, r0
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	1ad3      	subs	r3, r2, r3
 8016144:	68ba      	ldr	r2, [r7, #8]
 8016146:	429a      	cmp	r2, r3
 8016148:	d302      	bcc.n	8016150 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d11a      	bne.n	8016186 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	699b      	ldr	r3, [r3, #24]
 8016156:	f003 0320 	and.w	r3, r3, #32
 801615a:	2b20      	cmp	r3, #32
 801615c:	d013      	beq.n	8016186 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016162:	f043 0220 	orr.w	r2, r3, #32
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	2220      	movs	r2, #32
 801616e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	2200      	movs	r2, #0
 8016176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	2200      	movs	r2, #0
 801617e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016182:	2301      	movs	r3, #1
 8016184:	e007      	b.n	8016196 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	699b      	ldr	r3, [r3, #24]
 801618c:	f003 0320 	and.w	r3, r3, #32
 8016190:	2b20      	cmp	r3, #32
 8016192:	d1c8      	bne.n	8016126 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8016194:	2300      	movs	r3, #0
}
 8016196:	4618      	mov	r0, r3
 8016198:	3710      	adds	r7, #16
 801619a:	46bd      	mov	sp, r7
 801619c:	bd80      	pop	{r7, pc}
	...

080161a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b084      	sub	sp, #16
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	60f8      	str	r0, [r7, #12]
 80161a8:	60b9      	str	r1, [r7, #8]
 80161aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80161ac:	e06b      	b.n	8016286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80161ae:	687a      	ldr	r2, [r7, #4]
 80161b0:	68b9      	ldr	r1, [r7, #8]
 80161b2:	68f8      	ldr	r0, [r7, #12]
 80161b4:	f000 f876 	bl	80162a4 <I2C_IsErrorOccurred>
 80161b8:	4603      	mov	r3, r0
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d001      	beq.n	80161c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80161be:	2301      	movs	r3, #1
 80161c0:	e069      	b.n	8016296 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	699b      	ldr	r3, [r3, #24]
 80161c8:	f003 0320 	and.w	r3, r3, #32
 80161cc:	2b20      	cmp	r3, #32
 80161ce:	d138      	bne.n	8016242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	699b      	ldr	r3, [r3, #24]
 80161d6:	f003 0304 	and.w	r3, r3, #4
 80161da:	2b04      	cmp	r3, #4
 80161dc:	d105      	bne.n	80161ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d001      	beq.n	80161ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80161e6:	2300      	movs	r3, #0
 80161e8:	e055      	b.n	8016296 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	699b      	ldr	r3, [r3, #24]
 80161f0:	f003 0310 	and.w	r3, r3, #16
 80161f4:	2b10      	cmp	r3, #16
 80161f6:	d107      	bne.n	8016208 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	2210      	movs	r2, #16
 80161fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	2204      	movs	r2, #4
 8016204:	645a      	str	r2, [r3, #68]	; 0x44
 8016206:	e002      	b.n	801620e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	2200      	movs	r2, #0
 801620c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	2220      	movs	r2, #32
 8016214:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	6859      	ldr	r1, [r3, #4]
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	681a      	ldr	r2, [r3, #0]
 8016220:	4b1f      	ldr	r3, [pc, #124]	; (80162a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8016222:	400b      	ands	r3, r1
 8016224:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	2220      	movs	r2, #32
 801622a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	2200      	movs	r2, #0
 8016232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	2200      	movs	r2, #0
 801623a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801623e:	2301      	movs	r3, #1
 8016240:	e029      	b.n	8016296 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016242:	f7fd f9a7 	bl	8013594 <HAL_GetTick>
 8016246:	4602      	mov	r2, r0
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	1ad3      	subs	r3, r2, r3
 801624c:	68ba      	ldr	r2, [r7, #8]
 801624e:	429a      	cmp	r2, r3
 8016250:	d302      	bcc.n	8016258 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8016252:	68bb      	ldr	r3, [r7, #8]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d116      	bne.n	8016286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	699b      	ldr	r3, [r3, #24]
 801625e:	f003 0304 	and.w	r3, r3, #4
 8016262:	2b04      	cmp	r3, #4
 8016264:	d00f      	beq.n	8016286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801626a:	f043 0220 	orr.w	r2, r3, #32
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	2220      	movs	r2, #32
 8016276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	2200      	movs	r2, #0
 801627e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016282:	2301      	movs	r3, #1
 8016284:	e007      	b.n	8016296 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	699b      	ldr	r3, [r3, #24]
 801628c:	f003 0304 	and.w	r3, r3, #4
 8016290:	2b04      	cmp	r3, #4
 8016292:	d18c      	bne.n	80161ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8016294:	2300      	movs	r3, #0
}
 8016296:	4618      	mov	r0, r3
 8016298:	3710      	adds	r7, #16
 801629a:	46bd      	mov	sp, r7
 801629c:	bd80      	pop	{r7, pc}
 801629e:	bf00      	nop
 80162a0:	fe00e800 	.word	0xfe00e800

080162a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b08a      	sub	sp, #40	; 0x28
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	60f8      	str	r0, [r7, #12]
 80162ac:	60b9      	str	r1, [r7, #8]
 80162ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80162b0:	2300      	movs	r3, #0
 80162b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	699b      	ldr	r3, [r3, #24]
 80162bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80162be:	2300      	movs	r3, #0
 80162c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80162c6:	69bb      	ldr	r3, [r7, #24]
 80162c8:	f003 0310 	and.w	r3, r3, #16
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d068      	beq.n	80163a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	2210      	movs	r2, #16
 80162d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80162d8:	e049      	b.n	801636e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80162da:	68bb      	ldr	r3, [r7, #8]
 80162dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162e0:	d045      	beq.n	801636e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80162e2:	f7fd f957 	bl	8013594 <HAL_GetTick>
 80162e6:	4602      	mov	r2, r0
 80162e8:	69fb      	ldr	r3, [r7, #28]
 80162ea:	1ad3      	subs	r3, r2, r3
 80162ec:	68ba      	ldr	r2, [r7, #8]
 80162ee:	429a      	cmp	r2, r3
 80162f0:	d302      	bcc.n	80162f8 <I2C_IsErrorOccurred+0x54>
 80162f2:	68bb      	ldr	r3, [r7, #8]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d13a      	bne.n	801636e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	685b      	ldr	r3, [r3, #4]
 80162fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016302:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801630a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	699b      	ldr	r3, [r3, #24]
 8016312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801631a:	d121      	bne.n	8016360 <I2C_IsErrorOccurred+0xbc>
 801631c:	697b      	ldr	r3, [r7, #20]
 801631e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016322:	d01d      	beq.n	8016360 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8016324:	7cfb      	ldrb	r3, [r7, #19]
 8016326:	2b20      	cmp	r3, #32
 8016328:	d01a      	beq.n	8016360 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	685a      	ldr	r2, [r3, #4]
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016338:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801633a:	f7fd f92b 	bl	8013594 <HAL_GetTick>
 801633e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016340:	e00e      	b.n	8016360 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8016342:	f7fd f927 	bl	8013594 <HAL_GetTick>
 8016346:	4602      	mov	r2, r0
 8016348:	69fb      	ldr	r3, [r7, #28]
 801634a:	1ad3      	subs	r3, r2, r3
 801634c:	2b19      	cmp	r3, #25
 801634e:	d907      	bls.n	8016360 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8016350:	6a3b      	ldr	r3, [r7, #32]
 8016352:	f043 0320 	orr.w	r3, r3, #32
 8016356:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8016358:	2301      	movs	r3, #1
 801635a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 801635e:	e006      	b.n	801636e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	699b      	ldr	r3, [r3, #24]
 8016366:	f003 0320 	and.w	r3, r3, #32
 801636a:	2b20      	cmp	r3, #32
 801636c:	d1e9      	bne.n	8016342 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	699b      	ldr	r3, [r3, #24]
 8016374:	f003 0320 	and.w	r3, r3, #32
 8016378:	2b20      	cmp	r3, #32
 801637a:	d003      	beq.n	8016384 <I2C_IsErrorOccurred+0xe0>
 801637c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016380:	2b00      	cmp	r3, #0
 8016382:	d0aa      	beq.n	80162da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8016384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016388:	2b00      	cmp	r3, #0
 801638a:	d103      	bne.n	8016394 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	2220      	movs	r2, #32
 8016392:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8016394:	6a3b      	ldr	r3, [r7, #32]
 8016396:	f043 0304 	orr.w	r3, r3, #4
 801639a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801639c:	2301      	movs	r3, #1
 801639e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	699b      	ldr	r3, [r3, #24]
 80163a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80163aa:	69bb      	ldr	r3, [r7, #24]
 80163ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d00b      	beq.n	80163cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80163b4:	6a3b      	ldr	r3, [r7, #32]
 80163b6:	f043 0301 	orr.w	r3, r3, #1
 80163ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80163c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80163c6:	2301      	movs	r3, #1
 80163c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80163cc:	69bb      	ldr	r3, [r7, #24]
 80163ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d00b      	beq.n	80163ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80163d6:	6a3b      	ldr	r3, [r7, #32]
 80163d8:	f043 0308 	orr.w	r3, r3, #8
 80163dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80163e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80163e8:	2301      	movs	r3, #1
 80163ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80163ee:	69bb      	ldr	r3, [r7, #24]
 80163f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d00b      	beq.n	8016410 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80163f8:	6a3b      	ldr	r3, [r7, #32]
 80163fa:	f043 0302 	orr.w	r3, r3, #2
 80163fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016408:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801640a:	2301      	movs	r3, #1
 801640c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8016410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016414:	2b00      	cmp	r3, #0
 8016416:	d01c      	beq.n	8016452 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016418:	68f8      	ldr	r0, [r7, #12]
 801641a:	f7ff fdc3 	bl	8015fa4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	6859      	ldr	r1, [r3, #4]
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	681a      	ldr	r2, [r3, #0]
 8016428:	4b0d      	ldr	r3, [pc, #52]	; (8016460 <I2C_IsErrorOccurred+0x1bc>)
 801642a:	400b      	ands	r3, r1
 801642c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016432:	6a3b      	ldr	r3, [r7, #32]
 8016434:	431a      	orrs	r2, r3
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	2220      	movs	r2, #32
 801643e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	2200      	movs	r2, #0
 8016446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	2200      	movs	r2, #0
 801644e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8016452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8016456:	4618      	mov	r0, r3
 8016458:	3728      	adds	r7, #40	; 0x28
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop
 8016460:	fe00e800 	.word	0xfe00e800

08016464 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8016464:	b480      	push	{r7}
 8016466:	b087      	sub	sp, #28
 8016468:	af00      	add	r7, sp, #0
 801646a:	60f8      	str	r0, [r7, #12]
 801646c:	607b      	str	r3, [r7, #4]
 801646e:	460b      	mov	r3, r1
 8016470:	817b      	strh	r3, [r7, #10]
 8016472:	4613      	mov	r3, r2
 8016474:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016476:	897b      	ldrh	r3, [r7, #10]
 8016478:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801647c:	7a7b      	ldrb	r3, [r7, #9]
 801647e:	041b      	lsls	r3, r3, #16
 8016480:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016484:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801648a:	6a3b      	ldr	r3, [r7, #32]
 801648c:	4313      	orrs	r3, r2
 801648e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016492:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	685a      	ldr	r2, [r3, #4]
 801649a:	6a3b      	ldr	r3, [r7, #32]
 801649c:	0d5b      	lsrs	r3, r3, #21
 801649e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80164a2:	4b08      	ldr	r3, [pc, #32]	; (80164c4 <I2C_TransferConfig+0x60>)
 80164a4:	430b      	orrs	r3, r1
 80164a6:	43db      	mvns	r3, r3
 80164a8:	ea02 0103 	and.w	r1, r2, r3
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	697a      	ldr	r2, [r7, #20]
 80164b2:	430a      	orrs	r2, r1
 80164b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80164b6:	bf00      	nop
 80164b8:	371c      	adds	r7, #28
 80164ba:	46bd      	mov	sp, r7
 80164bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c0:	4770      	bx	lr
 80164c2:	bf00      	nop
 80164c4:	03ff63ff 	.word	0x03ff63ff

080164c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80164c8:	b480      	push	{r7}
 80164ca:	b083      	sub	sp, #12
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
 80164d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80164d8:	b2db      	uxtb	r3, r3
 80164da:	2b20      	cmp	r3, #32
 80164dc:	d138      	bne.n	8016550 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80164e4:	2b01      	cmp	r3, #1
 80164e6:	d101      	bne.n	80164ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80164e8:	2302      	movs	r3, #2
 80164ea:	e032      	b.n	8016552 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	2201      	movs	r2, #1
 80164f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	2224      	movs	r2, #36	; 0x24
 80164f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	681a      	ldr	r2, [r3, #0]
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	f022 0201 	bic.w	r2, r2, #1
 801650a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	681a      	ldr	r2, [r3, #0]
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801651a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	6819      	ldr	r1, [r3, #0]
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	683a      	ldr	r2, [r7, #0]
 8016528:	430a      	orrs	r2, r1
 801652a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	681a      	ldr	r2, [r3, #0]
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	f042 0201 	orr.w	r2, r2, #1
 801653a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	2220      	movs	r2, #32
 8016540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	2200      	movs	r2, #0
 8016548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801654c:	2300      	movs	r3, #0
 801654e:	e000      	b.n	8016552 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8016550:	2302      	movs	r3, #2
  }
}
 8016552:	4618      	mov	r0, r3
 8016554:	370c      	adds	r7, #12
 8016556:	46bd      	mov	sp, r7
 8016558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655c:	4770      	bx	lr

0801655e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801655e:	b480      	push	{r7}
 8016560:	b085      	sub	sp, #20
 8016562:	af00      	add	r7, sp, #0
 8016564:	6078      	str	r0, [r7, #4]
 8016566:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801656e:	b2db      	uxtb	r3, r3
 8016570:	2b20      	cmp	r3, #32
 8016572:	d139      	bne.n	80165e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801657a:	2b01      	cmp	r3, #1
 801657c:	d101      	bne.n	8016582 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801657e:	2302      	movs	r3, #2
 8016580:	e033      	b.n	80165ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	2201      	movs	r2, #1
 8016586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	2224      	movs	r2, #36	; 0x24
 801658e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	681a      	ldr	r2, [r3, #0]
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	f022 0201 	bic.w	r2, r2, #1
 80165a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80165b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80165b2:	683b      	ldr	r3, [r7, #0]
 80165b4:	021b      	lsls	r3, r3, #8
 80165b6:	68fa      	ldr	r2, [r7, #12]
 80165b8:	4313      	orrs	r3, r2
 80165ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	68fa      	ldr	r2, [r7, #12]
 80165c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	681a      	ldr	r2, [r3, #0]
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	f042 0201 	orr.w	r2, r2, #1
 80165d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	2220      	movs	r2, #32
 80165d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	2200      	movs	r2, #0
 80165e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80165e4:	2300      	movs	r3, #0
 80165e6:	e000      	b.n	80165ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80165e8:	2302      	movs	r3, #2
  }
}
 80165ea:	4618      	mov	r0, r3
 80165ec:	3714      	adds	r7, #20
 80165ee:	46bd      	mov	sp, r7
 80165f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f4:	4770      	bx	lr
	...

080165f8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80165f8:	b480      	push	{r7}
 80165fa:	b085      	sub	sp, #20
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016600:	2300      	movs	r3, #0
 8016602:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8016604:	4b0b      	ldr	r3, [pc, #44]	; (8016634 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	f003 0301 	and.w	r3, r3, #1
 801660c:	2b00      	cmp	r3, #0
 801660e:	d002      	beq.n	8016616 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8016610:	2301      	movs	r3, #1
 8016612:	73fb      	strb	r3, [r7, #15]
 8016614:	e007      	b.n	8016626 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8016616:	4b07      	ldr	r3, [pc, #28]	; (8016634 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	f023 0204 	bic.w	r2, r3, #4
 801661e:	4905      	ldr	r1, [pc, #20]	; (8016634 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	4313      	orrs	r3, r2
 8016624:	600b      	str	r3, [r1, #0]
  }

  return status;
 8016626:	7bfb      	ldrb	r3, [r7, #15]
}
 8016628:	4618      	mov	r0, r3
 801662a:	3714      	adds	r7, #20
 801662c:	46bd      	mov	sp, r7
 801662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016632:	4770      	bx	lr
 8016634:	40030400 	.word	0x40030400

08016638 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8016638:	b480      	push	{r7}
 801663a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 801663c:	4b05      	ldr	r3, [pc, #20]	; (8016654 <HAL_ICACHE_Enable+0x1c>)
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	4a04      	ldr	r2, [pc, #16]	; (8016654 <HAL_ICACHE_Enable+0x1c>)
 8016642:	f043 0301 	orr.w	r3, r3, #1
 8016646:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8016648:	2300      	movs	r3, #0
}
 801664a:	4618      	mov	r0, r3
 801664c:	46bd      	mov	sp, r7
 801664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016652:	4770      	bx	lr
 8016654:	40030400 	.word	0x40030400

08016658 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8016658:	b5f0      	push	{r4, r5, r6, r7, lr}
 801665a:	b08b      	sub	sp, #44	; 0x2c
 801665c:	af06      	add	r7, sp, #24
 801665e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d101      	bne.n	801666a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8016666:	2301      	movs	r3, #1
 8016668:	e0cb      	b.n	8016802 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8016670:	b2db      	uxtb	r3, r3
 8016672:	2b00      	cmp	r3, #0
 8016674:	d106      	bne.n	8016684 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	2200      	movs	r2, #0
 801667a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801667e:	6878      	ldr	r0, [r7, #4]
 8016680:	f7fc fc80 	bl	8012f84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	2203      	movs	r2, #3
 8016688:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	4618      	mov	r0, r3
 8016692:	f007 f9c7 	bl	801da24 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016696:	2300      	movs	r3, #0
 8016698:	73fb      	strb	r3, [r7, #15]
 801669a:	e040      	b.n	801671e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801669c:	7bfb      	ldrb	r3, [r7, #15]
 801669e:	6879      	ldr	r1, [r7, #4]
 80166a0:	1c5a      	adds	r2, r3, #1
 80166a2:	4613      	mov	r3, r2
 80166a4:	009b      	lsls	r3, r3, #2
 80166a6:	4413      	add	r3, r2
 80166a8:	00db      	lsls	r3, r3, #3
 80166aa:	440b      	add	r3, r1
 80166ac:	3301      	adds	r3, #1
 80166ae:	2201      	movs	r2, #1
 80166b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80166b2:	7bfb      	ldrb	r3, [r7, #15]
 80166b4:	6879      	ldr	r1, [r7, #4]
 80166b6:	1c5a      	adds	r2, r3, #1
 80166b8:	4613      	mov	r3, r2
 80166ba:	009b      	lsls	r3, r3, #2
 80166bc:	4413      	add	r3, r2
 80166be:	00db      	lsls	r3, r3, #3
 80166c0:	440b      	add	r3, r1
 80166c2:	7bfa      	ldrb	r2, [r7, #15]
 80166c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80166c6:	7bfb      	ldrb	r3, [r7, #15]
 80166c8:	6879      	ldr	r1, [r7, #4]
 80166ca:	1c5a      	adds	r2, r3, #1
 80166cc:	4613      	mov	r3, r2
 80166ce:	009b      	lsls	r3, r3, #2
 80166d0:	4413      	add	r3, r2
 80166d2:	00db      	lsls	r3, r3, #3
 80166d4:	440b      	add	r3, r1
 80166d6:	3303      	adds	r3, #3
 80166d8:	2200      	movs	r2, #0
 80166da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80166dc:	7bfa      	ldrb	r2, [r7, #15]
 80166de:	6879      	ldr	r1, [r7, #4]
 80166e0:	4613      	mov	r3, r2
 80166e2:	009b      	lsls	r3, r3, #2
 80166e4:	4413      	add	r3, r2
 80166e6:	00db      	lsls	r3, r3, #3
 80166e8:	440b      	add	r3, r1
 80166ea:	3338      	adds	r3, #56	; 0x38
 80166ec:	2200      	movs	r2, #0
 80166ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80166f0:	7bfa      	ldrb	r2, [r7, #15]
 80166f2:	6879      	ldr	r1, [r7, #4]
 80166f4:	4613      	mov	r3, r2
 80166f6:	009b      	lsls	r3, r3, #2
 80166f8:	4413      	add	r3, r2
 80166fa:	00db      	lsls	r3, r3, #3
 80166fc:	440b      	add	r3, r1
 80166fe:	333c      	adds	r3, #60	; 0x3c
 8016700:	2200      	movs	r2, #0
 8016702:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8016704:	7bfa      	ldrb	r2, [r7, #15]
 8016706:	6879      	ldr	r1, [r7, #4]
 8016708:	4613      	mov	r3, r2
 801670a:	009b      	lsls	r3, r3, #2
 801670c:	4413      	add	r3, r2
 801670e:	00db      	lsls	r3, r3, #3
 8016710:	440b      	add	r3, r1
 8016712:	3340      	adds	r3, #64	; 0x40
 8016714:	2200      	movs	r2, #0
 8016716:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016718:	7bfb      	ldrb	r3, [r7, #15]
 801671a:	3301      	adds	r3, #1
 801671c:	73fb      	strb	r3, [r7, #15]
 801671e:	7bfa      	ldrb	r2, [r7, #15]
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	685b      	ldr	r3, [r3, #4]
 8016724:	429a      	cmp	r2, r3
 8016726:	d3b9      	bcc.n	801669c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016728:	2300      	movs	r3, #0
 801672a:	73fb      	strb	r3, [r7, #15]
 801672c:	e044      	b.n	80167b8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801672e:	7bfa      	ldrb	r2, [r7, #15]
 8016730:	6879      	ldr	r1, [r7, #4]
 8016732:	4613      	mov	r3, r2
 8016734:	009b      	lsls	r3, r3, #2
 8016736:	4413      	add	r3, r2
 8016738:	00db      	lsls	r3, r3, #3
 801673a:	440b      	add	r3, r1
 801673c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8016740:	2200      	movs	r2, #0
 8016742:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8016744:	7bfa      	ldrb	r2, [r7, #15]
 8016746:	6879      	ldr	r1, [r7, #4]
 8016748:	4613      	mov	r3, r2
 801674a:	009b      	lsls	r3, r3, #2
 801674c:	4413      	add	r3, r2
 801674e:	00db      	lsls	r3, r3, #3
 8016750:	440b      	add	r3, r1
 8016752:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8016756:	7bfa      	ldrb	r2, [r7, #15]
 8016758:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801675a:	7bfa      	ldrb	r2, [r7, #15]
 801675c:	6879      	ldr	r1, [r7, #4]
 801675e:	4613      	mov	r3, r2
 8016760:	009b      	lsls	r3, r3, #2
 8016762:	4413      	add	r3, r2
 8016764:	00db      	lsls	r3, r3, #3
 8016766:	440b      	add	r3, r1
 8016768:	f203 136b 	addw	r3, r3, #363	; 0x16b
 801676c:	2200      	movs	r2, #0
 801676e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8016770:	7bfa      	ldrb	r2, [r7, #15]
 8016772:	6879      	ldr	r1, [r7, #4]
 8016774:	4613      	mov	r3, r2
 8016776:	009b      	lsls	r3, r3, #2
 8016778:	4413      	add	r3, r2
 801677a:	00db      	lsls	r3, r3, #3
 801677c:	440b      	add	r3, r1
 801677e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8016782:	2200      	movs	r2, #0
 8016784:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8016786:	7bfa      	ldrb	r2, [r7, #15]
 8016788:	6879      	ldr	r1, [r7, #4]
 801678a:	4613      	mov	r3, r2
 801678c:	009b      	lsls	r3, r3, #2
 801678e:	4413      	add	r3, r2
 8016790:	00db      	lsls	r3, r3, #3
 8016792:	440b      	add	r3, r1
 8016794:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8016798:	2200      	movs	r2, #0
 801679a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801679c:	7bfa      	ldrb	r2, [r7, #15]
 801679e:	6879      	ldr	r1, [r7, #4]
 80167a0:	4613      	mov	r3, r2
 80167a2:	009b      	lsls	r3, r3, #2
 80167a4:	4413      	add	r3, r2
 80167a6:	00db      	lsls	r3, r3, #3
 80167a8:	440b      	add	r3, r1
 80167aa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80167ae:	2200      	movs	r2, #0
 80167b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80167b2:	7bfb      	ldrb	r3, [r7, #15]
 80167b4:	3301      	adds	r3, #1
 80167b6:	73fb      	strb	r3, [r7, #15]
 80167b8:	7bfa      	ldrb	r2, [r7, #15]
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	685b      	ldr	r3, [r3, #4]
 80167be:	429a      	cmp	r2, r3
 80167c0:	d3b5      	bcc.n	801672e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	603b      	str	r3, [r7, #0]
 80167c8:	687e      	ldr	r6, [r7, #4]
 80167ca:	466d      	mov	r5, sp
 80167cc:	f106 0410 	add.w	r4, r6, #16
 80167d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80167d4:	6823      	ldr	r3, [r4, #0]
 80167d6:	602b      	str	r3, [r5, #0]
 80167d8:	1d33      	adds	r3, r6, #4
 80167da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80167dc:	6838      	ldr	r0, [r7, #0]
 80167de:	f007 f93c 	bl	801da5a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	2200      	movs	r2, #0
 80167e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	2201      	movs	r2, #1
 80167ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	69db      	ldr	r3, [r3, #28]
 80167f6:	2b01      	cmp	r3, #1
 80167f8:	d102      	bne.n	8016800 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80167fa:	6878      	ldr	r0, [r7, #4]
 80167fc:	f000 f805 	bl	801680a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8016800:	2300      	movs	r3, #0
}
 8016802:	4618      	mov	r0, r3
 8016804:	3714      	adds	r7, #20
 8016806:	46bd      	mov	sp, r7
 8016808:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801680a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801680a:	b480      	push	{r7}
 801680c:	b085      	sub	sp, #20
 801680e:	af00      	add	r7, sp, #0
 8016810:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	2201      	movs	r2, #1
 801681c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	2200      	movs	r2, #0
 8016824:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801682e:	b29b      	uxth	r3, r3
 8016830:	f043 0301 	orr.w	r3, r3, #1
 8016834:	b29a      	uxth	r2, r3
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8016842:	b29b      	uxth	r3, r3
 8016844:	f043 0302 	orr.w	r3, r3, #2
 8016848:	b29a      	uxth	r2, r3
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8016850:	2300      	movs	r3, #0
}
 8016852:	4618      	mov	r0, r3
 8016854:	3714      	adds	r7, #20
 8016856:	46bd      	mov	sp, r7
 8016858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801685c:	4770      	bx	lr
	...

08016860 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8016860:	b480      	push	{r7}
 8016862:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8016864:	4b05      	ldr	r3, [pc, #20]	; (801687c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	4a04      	ldr	r2, [pc, #16]	; (801687c <HAL_PWR_EnableBkUpAccess+0x1c>)
 801686a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801686e:	6013      	str	r3, [r2, #0]
}
 8016870:	bf00      	nop
 8016872:	46bd      	mov	sp, r7
 8016874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016878:	4770      	bx	lr
 801687a:	bf00      	nop
 801687c:	40007000 	.word	0x40007000

08016880 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8016880:	b480      	push	{r7}
 8016882:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8016884:	4b04      	ldr	r3, [pc, #16]	; (8016898 <HAL_PWREx_GetVoltageRange+0x18>)
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 801688c:	4618      	mov	r0, r3
 801688e:	46bd      	mov	sp, r7
 8016890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016894:	4770      	bx	lr
 8016896:	bf00      	nop
 8016898:	40007000 	.word	0x40007000

0801689c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801689c:	b580      	push	{r7, lr}
 801689e:	b084      	sub	sp, #16
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80168a4:	4b27      	ldr	r3, [pc, #156]	; (8016944 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80168ac:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80168ae:	f000 f861 	bl	8016974 <HAL_PWREx_SMPS_GetEffectiveMode>
 80168b2:	4603      	mov	r3, r0
 80168b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80168b8:	d101      	bne.n	80168be <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80168ba:	2301      	movs	r3, #1
 80168bc:	e03e      	b.n	801693c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80168be:	4b21      	ldr	r3, [pc, #132]	; (8016944 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80168c0:	68db      	ldr	r3, [r3, #12]
 80168c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80168c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80168ca:	d101      	bne.n	80168d0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80168cc:	2301      	movs	r3, #1
 80168ce:	e035      	b.n	801693c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80168d0:	68ba      	ldr	r2, [r7, #8]
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	429a      	cmp	r2, r3
 80168d6:	d101      	bne.n	80168dc <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80168d8:	2300      	movs	r3, #0
 80168da:	e02f      	b.n	801693c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80168dc:	4b19      	ldr	r3, [pc, #100]	; (8016944 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80168e4:	4917      	ldr	r1, [pc, #92]	; (8016944 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	4313      	orrs	r3, r2
 80168ea:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80168ec:	4b16      	ldr	r3, [pc, #88]	; (8016948 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	095b      	lsrs	r3, r3, #5
 80168f2:	4a16      	ldr	r2, [pc, #88]	; (801694c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80168f4:	fba2 2303 	umull	r2, r3, r2, r3
 80168f8:	09db      	lsrs	r3, r3, #7
 80168fa:	2232      	movs	r2, #50	; 0x32
 80168fc:	fb02 f303 	mul.w	r3, r2, r3
 8016900:	4a13      	ldr	r2, [pc, #76]	; (8016950 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8016902:	fba2 2303 	umull	r2, r3, r2, r3
 8016906:	08db      	lsrs	r3, r3, #3
 8016908:	3301      	adds	r3, #1
 801690a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801690c:	e002      	b.n	8016914 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	3b01      	subs	r3, #1
 8016912:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8016914:	4b0b      	ldr	r3, [pc, #44]	; (8016944 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8016916:	695b      	ldr	r3, [r3, #20]
 8016918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801691c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016920:	d102      	bne.n	8016928 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d1f2      	bne.n	801690e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8016928:	4b06      	ldr	r3, [pc, #24]	; (8016944 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801692a:	695b      	ldr	r3, [r3, #20]
 801692c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016934:	d101      	bne.n	801693a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8016936:	2303      	movs	r3, #3
 8016938:	e000      	b.n	801693c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 801693a:	2300      	movs	r3, #0
}
 801693c:	4618      	mov	r0, r3
 801693e:	3710      	adds	r7, #16
 8016940:	46bd      	mov	sp, r7
 8016942:	bd80      	pop	{r7, pc}
 8016944:	40007000 	.word	0x40007000
 8016948:	20000090 	.word	0x20000090
 801694c:	0a7c5ac5 	.word	0x0a7c5ac5
 8016950:	cccccccd 	.word	0xcccccccd

08016954 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8016954:	b480      	push	{r7}
 8016956:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8016958:	4b05      	ldr	r3, [pc, #20]	; (8016970 <HAL_PWREx_EnableVddIO2+0x1c>)
 801695a:	685b      	ldr	r3, [r3, #4]
 801695c:	4a04      	ldr	r2, [pc, #16]	; (8016970 <HAL_PWREx_EnableVddIO2+0x1c>)
 801695e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016962:	6053      	str	r3, [r2, #4]
}
 8016964:	bf00      	nop
 8016966:	46bd      	mov	sp, r7
 8016968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696c:	4770      	bx	lr
 801696e:	bf00      	nop
 8016970:	40007000 	.word	0x40007000

08016974 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8016974:	b480      	push	{r7}
 8016976:	b083      	sub	sp, #12
 8016978:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 801697a:	4b0f      	ldr	r3, [pc, #60]	; (80169b8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 801697c:	691b      	ldr	r3, [r3, #16]
 801697e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8016980:	683b      	ldr	r3, [r7, #0]
 8016982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016986:	2b00      	cmp	r3, #0
 8016988:	d003      	beq.n	8016992 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 801698a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801698e:	607b      	str	r3, [r7, #4]
 8016990:	e00a      	b.n	80169a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8016992:	683b      	ldr	r3, [r7, #0]
 8016994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016998:	2b00      	cmp	r3, #0
 801699a:	d103      	bne.n	80169a4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 801699c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80169a0:	607b      	str	r3, [r7, #4]
 80169a2:	e001      	b.n	80169a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80169a4:	2300      	movs	r3, #0
 80169a6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80169a8:	687b      	ldr	r3, [r7, #4]
}
 80169aa:	4618      	mov	r0, r3
 80169ac:	370c      	adds	r7, #12
 80169ae:	46bd      	mov	sp, r7
 80169b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b4:	4770      	bx	lr
 80169b6:	bf00      	nop
 80169b8:	40007000 	.word	0x40007000

080169bc <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b088      	sub	sp, #32
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d102      	bne.n	80169d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80169ca:	2301      	movs	r3, #1
 80169cc:	f000 bcc2 	b.w	8017354 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80169d0:	4b99      	ldr	r3, [pc, #612]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 80169d2:	689b      	ldr	r3, [r3, #8]
 80169d4:	f003 030c 	and.w	r3, r3, #12
 80169d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80169da:	4b97      	ldr	r3, [pc, #604]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 80169dc:	68db      	ldr	r3, [r3, #12]
 80169de:	f003 0303 	and.w	r3, r3, #3
 80169e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	f003 0310 	and.w	r3, r3, #16
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	f000 80e9 	beq.w	8016bc4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80169f2:	69bb      	ldr	r3, [r7, #24]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d006      	beq.n	8016a06 <HAL_RCC_OscConfig+0x4a>
 80169f8:	69bb      	ldr	r3, [r7, #24]
 80169fa:	2b0c      	cmp	r3, #12
 80169fc:	f040 8083 	bne.w	8016b06 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8016a00:	697b      	ldr	r3, [r7, #20]
 8016a02:	2b01      	cmp	r3, #1
 8016a04:	d17f      	bne.n	8016b06 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8016a06:	4b8c      	ldr	r3, [pc, #560]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	f003 0302 	and.w	r3, r3, #2
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d006      	beq.n	8016a20 <HAL_RCC_OscConfig+0x64>
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	69db      	ldr	r3, [r3, #28]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d102      	bne.n	8016a20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8016a1a:	2301      	movs	r3, #1
 8016a1c:	f000 bc9a 	b.w	8017354 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016a24:	4b84      	ldr	r3, [pc, #528]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	f003 0308 	and.w	r3, r3, #8
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d004      	beq.n	8016a3a <HAL_RCC_OscConfig+0x7e>
 8016a30:	4b81      	ldr	r3, [pc, #516]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016a38:	e005      	b.n	8016a46 <HAL_RCC_OscConfig+0x8a>
 8016a3a:	4b7f      	ldr	r3, [pc, #508]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016a40:	091b      	lsrs	r3, r3, #4
 8016a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016a46:	4293      	cmp	r3, r2
 8016a48:	d224      	bcs.n	8016a94 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a4e:	4618      	mov	r0, r3
 8016a50:	f000 fece 	bl	80177f0 <RCC_SetFlashLatencyFromMSIRange>
 8016a54:	4603      	mov	r3, r0
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d002      	beq.n	8016a60 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8016a5a:	2301      	movs	r3, #1
 8016a5c:	f000 bc7a 	b.w	8017354 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016a60:	4b75      	ldr	r3, [pc, #468]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	4a74      	ldr	r2, [pc, #464]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016a66:	f043 0308 	orr.w	r3, r3, #8
 8016a6a:	6013      	str	r3, [r2, #0]
 8016a6c:	4b72      	ldr	r3, [pc, #456]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a78:	496f      	ldr	r1, [pc, #444]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016a7a:	4313      	orrs	r3, r2
 8016a7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016a7e:	4b6e      	ldr	r3, [pc, #440]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016a80:	685b      	ldr	r3, [r3, #4]
 8016a82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	6a1b      	ldr	r3, [r3, #32]
 8016a8a:	021b      	lsls	r3, r3, #8
 8016a8c:	496a      	ldr	r1, [pc, #424]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016a8e:	4313      	orrs	r3, r2
 8016a90:	604b      	str	r3, [r1, #4]
 8016a92:	e026      	b.n	8016ae2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016a94:	4b68      	ldr	r3, [pc, #416]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	4a67      	ldr	r2, [pc, #412]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016a9a:	f043 0308 	orr.w	r3, r3, #8
 8016a9e:	6013      	str	r3, [r2, #0]
 8016aa0:	4b65      	ldr	r3, [pc, #404]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aac:	4962      	ldr	r1, [pc, #392]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016aae:	4313      	orrs	r3, r2
 8016ab0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016ab2:	4b61      	ldr	r3, [pc, #388]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016ab4:	685b      	ldr	r3, [r3, #4]
 8016ab6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	6a1b      	ldr	r3, [r3, #32]
 8016abe:	021b      	lsls	r3, r3, #8
 8016ac0:	495d      	ldr	r1, [pc, #372]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016ac2:	4313      	orrs	r3, r2
 8016ac4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8016ac6:	69bb      	ldr	r3, [r7, #24]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d10a      	bne.n	8016ae2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	f000 fe8d 	bl	80177f0 <RCC_SetFlashLatencyFromMSIRange>
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d002      	beq.n	8016ae2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8016adc:	2301      	movs	r3, #1
 8016ade:	f000 bc39 	b.w	8017354 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8016ae2:	f000 fe17 	bl	8017714 <HAL_RCC_GetHCLKFreq>
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	4a54      	ldr	r2, [pc, #336]	; (8016c3c <HAL_RCC_OscConfig+0x280>)
 8016aea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8016aec:	4b54      	ldr	r3, [pc, #336]	; (8016c40 <HAL_RCC_OscConfig+0x284>)
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	4618      	mov	r0, r3
 8016af2:	f7fc faa7 	bl	8013044 <HAL_InitTick>
 8016af6:	4603      	mov	r3, r0
 8016af8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8016afa:	7bfb      	ldrb	r3, [r7, #15]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d060      	beq.n	8016bc2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8016b00:	7bfb      	ldrb	r3, [r7, #15]
 8016b02:	f000 bc27 	b.w	8017354 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	69db      	ldr	r3, [r3, #28]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d039      	beq.n	8016b82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8016b0e:	4b4a      	ldr	r3, [pc, #296]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	4a49      	ldr	r2, [pc, #292]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016b14:	f043 0301 	orr.w	r3, r3, #1
 8016b18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8016b1a:	f7fc fd3b 	bl	8013594 <HAL_GetTick>
 8016b1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8016b20:	e00f      	b.n	8016b42 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8016b22:	f7fc fd37 	bl	8013594 <HAL_GetTick>
 8016b26:	4602      	mov	r2, r0
 8016b28:	693b      	ldr	r3, [r7, #16]
 8016b2a:	1ad3      	subs	r3, r2, r3
 8016b2c:	2b02      	cmp	r3, #2
 8016b2e:	d908      	bls.n	8016b42 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8016b30:	4b41      	ldr	r3, [pc, #260]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	f003 0302 	and.w	r3, r3, #2
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d102      	bne.n	8016b42 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8016b3c:	2303      	movs	r3, #3
 8016b3e:	f000 bc09 	b.w	8017354 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8016b42:	4b3d      	ldr	r3, [pc, #244]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	f003 0302 	and.w	r3, r3, #2
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d0e9      	beq.n	8016b22 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016b4e:	4b3a      	ldr	r3, [pc, #232]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	4a39      	ldr	r2, [pc, #228]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016b54:	f043 0308 	orr.w	r3, r3, #8
 8016b58:	6013      	str	r3, [r2, #0]
 8016b5a:	4b37      	ldr	r3, [pc, #220]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b66:	4934      	ldr	r1, [pc, #208]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016b68:	4313      	orrs	r3, r2
 8016b6a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016b6c:	4b32      	ldr	r3, [pc, #200]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016b6e:	685b      	ldr	r3, [r3, #4]
 8016b70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	6a1b      	ldr	r3, [r3, #32]
 8016b78:	021b      	lsls	r3, r3, #8
 8016b7a:	492f      	ldr	r1, [pc, #188]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016b7c:	4313      	orrs	r3, r2
 8016b7e:	604b      	str	r3, [r1, #4]
 8016b80:	e020      	b.n	8016bc4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8016b82:	4b2d      	ldr	r3, [pc, #180]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	4a2c      	ldr	r2, [pc, #176]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016b88:	f023 0301 	bic.w	r3, r3, #1
 8016b8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8016b8e:	f7fc fd01 	bl	8013594 <HAL_GetTick>
 8016b92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8016b94:	e00e      	b.n	8016bb4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8016b96:	f7fc fcfd 	bl	8013594 <HAL_GetTick>
 8016b9a:	4602      	mov	r2, r0
 8016b9c:	693b      	ldr	r3, [r7, #16]
 8016b9e:	1ad3      	subs	r3, r2, r3
 8016ba0:	2b02      	cmp	r3, #2
 8016ba2:	d907      	bls.n	8016bb4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8016ba4:	4b24      	ldr	r3, [pc, #144]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	f003 0302 	and.w	r3, r3, #2
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d001      	beq.n	8016bb4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8016bb0:	2303      	movs	r3, #3
 8016bb2:	e3cf      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8016bb4:	4b20      	ldr	r3, [pc, #128]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	f003 0302 	and.w	r3, r3, #2
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d1ea      	bne.n	8016b96 <HAL_RCC_OscConfig+0x1da>
 8016bc0:	e000      	b.n	8016bc4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8016bc2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	f003 0301 	and.w	r3, r3, #1
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d07e      	beq.n	8016cce <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8016bd0:	69bb      	ldr	r3, [r7, #24]
 8016bd2:	2b08      	cmp	r3, #8
 8016bd4:	d005      	beq.n	8016be2 <HAL_RCC_OscConfig+0x226>
 8016bd6:	69bb      	ldr	r3, [r7, #24]
 8016bd8:	2b0c      	cmp	r3, #12
 8016bda:	d10e      	bne.n	8016bfa <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8016bdc:	697b      	ldr	r3, [r7, #20]
 8016bde:	2b03      	cmp	r3, #3
 8016be0:	d10b      	bne.n	8016bfa <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016be2:	4b15      	ldr	r3, [pc, #84]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d06e      	beq.n	8016ccc <HAL_RCC_OscConfig+0x310>
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	685b      	ldr	r3, [r3, #4]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d16a      	bne.n	8016ccc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8016bf6:	2301      	movs	r3, #1
 8016bf8:	e3ac      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	685b      	ldr	r3, [r3, #4]
 8016bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016c02:	d106      	bne.n	8016c12 <HAL_RCC_OscConfig+0x256>
 8016c04:	4b0c      	ldr	r3, [pc, #48]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	4a0b      	ldr	r2, [pc, #44]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016c0e:	6013      	str	r3, [r2, #0]
 8016c10:	e024      	b.n	8016c5c <HAL_RCC_OscConfig+0x2a0>
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	685b      	ldr	r3, [r3, #4]
 8016c16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8016c1a:	d113      	bne.n	8016c44 <HAL_RCC_OscConfig+0x288>
 8016c1c:	4b06      	ldr	r3, [pc, #24]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	4a05      	ldr	r2, [pc, #20]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016c22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016c26:	6013      	str	r3, [r2, #0]
 8016c28:	4b03      	ldr	r3, [pc, #12]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	4a02      	ldr	r2, [pc, #8]	; (8016c38 <HAL_RCC_OscConfig+0x27c>)
 8016c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016c32:	6013      	str	r3, [r2, #0]
 8016c34:	e012      	b.n	8016c5c <HAL_RCC_OscConfig+0x2a0>
 8016c36:	bf00      	nop
 8016c38:	40021000 	.word	0x40021000
 8016c3c:	20000090 	.word	0x20000090
 8016c40:	20000094 	.word	0x20000094
 8016c44:	4b8b      	ldr	r3, [pc, #556]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	4a8a      	ldr	r2, [pc, #552]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016c4e:	6013      	str	r3, [r2, #0]
 8016c50:	4b88      	ldr	r3, [pc, #544]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	4a87      	ldr	r2, [pc, #540]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8016c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	685b      	ldr	r3, [r3, #4]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d019      	beq.n	8016c98 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016c64:	f7fc fc96 	bl	8013594 <HAL_GetTick>
 8016c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8016c6a:	e00e      	b.n	8016c8a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016c6c:	f7fc fc92 	bl	8013594 <HAL_GetTick>
 8016c70:	4602      	mov	r2, r0
 8016c72:	693b      	ldr	r3, [r7, #16]
 8016c74:	1ad3      	subs	r3, r2, r3
 8016c76:	2b64      	cmp	r3, #100	; 0x64
 8016c78:	d907      	bls.n	8016c8a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8016c7a:	4b7e      	ldr	r3, [pc, #504]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d101      	bne.n	8016c8a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8016c86:	2303      	movs	r3, #3
 8016c88:	e364      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8016c8a:	4b7a      	ldr	r3, [pc, #488]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d0ea      	beq.n	8016c6c <HAL_RCC_OscConfig+0x2b0>
 8016c96:	e01a      	b.n	8016cce <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016c98:	f7fc fc7c 	bl	8013594 <HAL_GetTick>
 8016c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8016c9e:	e00e      	b.n	8016cbe <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016ca0:	f7fc fc78 	bl	8013594 <HAL_GetTick>
 8016ca4:	4602      	mov	r2, r0
 8016ca6:	693b      	ldr	r3, [r7, #16]
 8016ca8:	1ad3      	subs	r3, r2, r3
 8016caa:	2b64      	cmp	r3, #100	; 0x64
 8016cac:	d907      	bls.n	8016cbe <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8016cae:	4b71      	ldr	r3, [pc, #452]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d001      	beq.n	8016cbe <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8016cba:	2303      	movs	r3, #3
 8016cbc:	e34a      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8016cbe:	4b6d      	ldr	r3, [pc, #436]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d1ea      	bne.n	8016ca0 <HAL_RCC_OscConfig+0x2e4>
 8016cca:	e000      	b.n	8016cce <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	f003 0302 	and.w	r3, r3, #2
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d06c      	beq.n	8016db4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8016cda:	69bb      	ldr	r3, [r7, #24]
 8016cdc:	2b04      	cmp	r3, #4
 8016cde:	d005      	beq.n	8016cec <HAL_RCC_OscConfig+0x330>
 8016ce0:	69bb      	ldr	r3, [r7, #24]
 8016ce2:	2b0c      	cmp	r3, #12
 8016ce4:	d119      	bne.n	8016d1a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8016ce6:	697b      	ldr	r3, [r7, #20]
 8016ce8:	2b02      	cmp	r3, #2
 8016cea:	d116      	bne.n	8016d1a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016cec:	4b61      	ldr	r3, [pc, #388]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d005      	beq.n	8016d04 <HAL_RCC_OscConfig+0x348>
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	68db      	ldr	r3, [r3, #12]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d101      	bne.n	8016d04 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8016d00:	2301      	movs	r3, #1
 8016d02:	e327      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016d04:	4b5b      	ldr	r3, [pc, #364]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016d06:	685b      	ldr	r3, [r3, #4]
 8016d08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	691b      	ldr	r3, [r3, #16]
 8016d10:	061b      	lsls	r3, r3, #24
 8016d12:	4958      	ldr	r1, [pc, #352]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016d14:	4313      	orrs	r3, r2
 8016d16:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016d18:	e04c      	b.n	8016db4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	68db      	ldr	r3, [r3, #12]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d029      	beq.n	8016d76 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8016d22:	4b54      	ldr	r3, [pc, #336]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	4a53      	ldr	r2, [pc, #332]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016d2e:	f7fc fc31 	bl	8013594 <HAL_GetTick>
 8016d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8016d34:	e00e      	b.n	8016d54 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016d36:	f7fc fc2d 	bl	8013594 <HAL_GetTick>
 8016d3a:	4602      	mov	r2, r0
 8016d3c:	693b      	ldr	r3, [r7, #16]
 8016d3e:	1ad3      	subs	r3, r2, r3
 8016d40:	2b02      	cmp	r3, #2
 8016d42:	d907      	bls.n	8016d54 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8016d44:	4b4b      	ldr	r3, [pc, #300]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d101      	bne.n	8016d54 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8016d50:	2303      	movs	r3, #3
 8016d52:	e2ff      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8016d54:	4b47      	ldr	r3, [pc, #284]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d0ea      	beq.n	8016d36 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016d60:	4b44      	ldr	r3, [pc, #272]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016d62:	685b      	ldr	r3, [r3, #4]
 8016d64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	691b      	ldr	r3, [r3, #16]
 8016d6c:	061b      	lsls	r3, r3, #24
 8016d6e:	4941      	ldr	r1, [pc, #260]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016d70:	4313      	orrs	r3, r2
 8016d72:	604b      	str	r3, [r1, #4]
 8016d74:	e01e      	b.n	8016db4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8016d76:	4b3f      	ldr	r3, [pc, #252]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	4a3e      	ldr	r2, [pc, #248]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016d82:	f7fc fc07 	bl	8013594 <HAL_GetTick>
 8016d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8016d88:	e00e      	b.n	8016da8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016d8a:	f7fc fc03 	bl	8013594 <HAL_GetTick>
 8016d8e:	4602      	mov	r2, r0
 8016d90:	693b      	ldr	r3, [r7, #16]
 8016d92:	1ad3      	subs	r3, r2, r3
 8016d94:	2b02      	cmp	r3, #2
 8016d96:	d907      	bls.n	8016da8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8016d98:	4b36      	ldr	r3, [pc, #216]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d001      	beq.n	8016da8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8016da4:	2303      	movs	r3, #3
 8016da6:	e2d5      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8016da8:	4b32      	ldr	r3, [pc, #200]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d1ea      	bne.n	8016d8a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	f003 0308 	and.w	r3, r3, #8
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d062      	beq.n	8016e86 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	695b      	ldr	r3, [r3, #20]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d038      	beq.n	8016e3a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	699b      	ldr	r3, [r3, #24]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d108      	bne.n	8016de2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8016dd0:	4b28      	ldr	r3, [pc, #160]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016dd6:	4a27      	ldr	r2, [pc, #156]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016dd8:	f023 0310 	bic.w	r3, r3, #16
 8016ddc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8016de0:	e007      	b.n	8016df2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8016de2:	4b24      	ldr	r3, [pc, #144]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016de8:	4a22      	ldr	r2, [pc, #136]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016dea:	f043 0310 	orr.w	r3, r3, #16
 8016dee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8016df2:	4b20      	ldr	r3, [pc, #128]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016df8:	4a1e      	ldr	r2, [pc, #120]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016dfa:	f043 0301 	orr.w	r3, r3, #1
 8016dfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016e02:	f7fc fbc7 	bl	8013594 <HAL_GetTick>
 8016e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8016e08:	e00f      	b.n	8016e2a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016e0a:	f7fc fbc3 	bl	8013594 <HAL_GetTick>
 8016e0e:	4602      	mov	r2, r0
 8016e10:	693b      	ldr	r3, [r7, #16]
 8016e12:	1ad3      	subs	r3, r2, r3
 8016e14:	2b07      	cmp	r3, #7
 8016e16:	d908      	bls.n	8016e2a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8016e18:	4b16      	ldr	r3, [pc, #88]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016e1e:	f003 0302 	and.w	r3, r3, #2
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d101      	bne.n	8016e2a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8016e26:	2303      	movs	r3, #3
 8016e28:	e294      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8016e2a:	4b12      	ldr	r3, [pc, #72]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016e30:	f003 0302 	and.w	r3, r3, #2
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d0e8      	beq.n	8016e0a <HAL_RCC_OscConfig+0x44e>
 8016e38:	e025      	b.n	8016e86 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016e3a:	4b0e      	ldr	r3, [pc, #56]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016e40:	4a0c      	ldr	r2, [pc, #48]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016e42:	f023 0301 	bic.w	r3, r3, #1
 8016e46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016e4a:	f7fc fba3 	bl	8013594 <HAL_GetTick>
 8016e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8016e50:	e012      	b.n	8016e78 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016e52:	f7fc fb9f 	bl	8013594 <HAL_GetTick>
 8016e56:	4602      	mov	r2, r0
 8016e58:	693b      	ldr	r3, [r7, #16]
 8016e5a:	1ad3      	subs	r3, r2, r3
 8016e5c:	2b07      	cmp	r3, #7
 8016e5e:	d90b      	bls.n	8016e78 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8016e60:	4b04      	ldr	r3, [pc, #16]	; (8016e74 <HAL_RCC_OscConfig+0x4b8>)
 8016e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016e66:	f003 0302 	and.w	r3, r3, #2
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d004      	beq.n	8016e78 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8016e6e:	2303      	movs	r3, #3
 8016e70:	e270      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
 8016e72:	bf00      	nop
 8016e74:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8016e78:	4ba8      	ldr	r3, [pc, #672]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016e7e:	f003 0302 	and.w	r3, r3, #2
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d1e5      	bne.n	8016e52 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	f003 0304 	and.w	r3, r3, #4
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	f000 812d 	beq.w	80170ee <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8016e94:	2300      	movs	r3, #0
 8016e96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8016e98:	4ba0      	ldr	r3, [pc, #640]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d10d      	bne.n	8016ec0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8016ea4:	4b9d      	ldr	r3, [pc, #628]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016ea8:	4a9c      	ldr	r2, [pc, #624]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016eae:	6593      	str	r3, [r2, #88]	; 0x58
 8016eb0:	4b9a      	ldr	r3, [pc, #616]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016eb8:	60bb      	str	r3, [r7, #8]
 8016eba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8016ebc:	2301      	movs	r3, #1
 8016ebe:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016ec0:	4b97      	ldr	r3, [pc, #604]	; (8017120 <HAL_RCC_OscConfig+0x764>)
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d11e      	bne.n	8016f0a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8016ecc:	4b94      	ldr	r3, [pc, #592]	; (8017120 <HAL_RCC_OscConfig+0x764>)
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	4a93      	ldr	r2, [pc, #588]	; (8017120 <HAL_RCC_OscConfig+0x764>)
 8016ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016ed6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8016ed8:	f7fc fb5c 	bl	8013594 <HAL_GetTick>
 8016edc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016ede:	e00e      	b.n	8016efe <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016ee0:	f7fc fb58 	bl	8013594 <HAL_GetTick>
 8016ee4:	4602      	mov	r2, r0
 8016ee6:	693b      	ldr	r3, [r7, #16]
 8016ee8:	1ad3      	subs	r3, r2, r3
 8016eea:	2b02      	cmp	r3, #2
 8016eec:	d907      	bls.n	8016efe <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016eee:	4b8c      	ldr	r3, [pc, #560]	; (8017120 <HAL_RCC_OscConfig+0x764>)
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d101      	bne.n	8016efe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8016efa:	2303      	movs	r3, #3
 8016efc:	e22a      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016efe:	4b88      	ldr	r3, [pc, #544]	; (8017120 <HAL_RCC_OscConfig+0x764>)
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d0ea      	beq.n	8016ee0 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	689b      	ldr	r3, [r3, #8]
 8016f0e:	f003 0301 	and.w	r3, r3, #1
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d01f      	beq.n	8016f56 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	689b      	ldr	r3, [r3, #8]
 8016f1a:	f003 0304 	and.w	r3, r3, #4
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d010      	beq.n	8016f44 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016f22:	4b7e      	ldr	r3, [pc, #504]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f28:	4a7c      	ldr	r2, [pc, #496]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016f2a:	f043 0304 	orr.w	r3, r3, #4
 8016f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016f32:	4b7a      	ldr	r3, [pc, #488]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f38:	4a78      	ldr	r2, [pc, #480]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016f3a:	f043 0301 	orr.w	r3, r3, #1
 8016f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8016f42:	e018      	b.n	8016f76 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016f44:	4b75      	ldr	r3, [pc, #468]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f4a:	4a74      	ldr	r2, [pc, #464]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016f4c:	f043 0301 	orr.w	r3, r3, #1
 8016f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8016f54:	e00f      	b.n	8016f76 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016f56:	4b71      	ldr	r3, [pc, #452]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f5c:	4a6f      	ldr	r2, [pc, #444]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016f5e:	f023 0301 	bic.w	r3, r3, #1
 8016f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016f66:	4b6d      	ldr	r3, [pc, #436]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f6c:	4a6b      	ldr	r2, [pc, #428]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016f6e:	f023 0304 	bic.w	r3, r3, #4
 8016f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	689b      	ldr	r3, [r3, #8]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d068      	beq.n	8017050 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016f7e:	f7fc fb09 	bl	8013594 <HAL_GetTick>
 8016f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8016f84:	e011      	b.n	8016faa <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016f86:	f7fc fb05 	bl	8013594 <HAL_GetTick>
 8016f8a:	4602      	mov	r2, r0
 8016f8c:	693b      	ldr	r3, [r7, #16]
 8016f8e:	1ad3      	subs	r3, r2, r3
 8016f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8016f94:	4293      	cmp	r3, r2
 8016f96:	d908      	bls.n	8016faa <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8016f98:	4b60      	ldr	r3, [pc, #384]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f9e:	f003 0302 	and.w	r3, r3, #2
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d101      	bne.n	8016faa <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8016fa6:	2303      	movs	r3, #3
 8016fa8:	e1d4      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8016faa:	4b5c      	ldr	r3, [pc, #368]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016fb0:	f003 0302 	and.w	r3, r3, #2
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d0e6      	beq.n	8016f86 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	689b      	ldr	r3, [r3, #8]
 8016fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d022      	beq.n	801700a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8016fc4:	4b55      	ldr	r3, [pc, #340]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016fca:	4a54      	ldr	r2, [pc, #336]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8016fd4:	e011      	b.n	8016ffa <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016fd6:	f7fc fadd 	bl	8013594 <HAL_GetTick>
 8016fda:	4602      	mov	r2, r0
 8016fdc:	693b      	ldr	r3, [r7, #16]
 8016fde:	1ad3      	subs	r3, r2, r3
 8016fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8016fe4:	4293      	cmp	r3, r2
 8016fe6:	d908      	bls.n	8016ffa <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8016fe8:	4b4c      	ldr	r3, [pc, #304]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d101      	bne.n	8016ffa <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8016ff6:	2303      	movs	r3, #3
 8016ff8:	e1ac      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8016ffa:	4b48      	ldr	r3, [pc, #288]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8016ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017004:	2b00      	cmp	r3, #0
 8017006:	d0e6      	beq.n	8016fd6 <HAL_RCC_OscConfig+0x61a>
 8017008:	e068      	b.n	80170dc <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 801700a:	4b44      	ldr	r3, [pc, #272]	; (801711c <HAL_RCC_OscConfig+0x760>)
 801700c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017010:	4a42      	ldr	r2, [pc, #264]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8017012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801701a:	e011      	b.n	8017040 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801701c:	f7fc faba 	bl	8013594 <HAL_GetTick>
 8017020:	4602      	mov	r2, r0
 8017022:	693b      	ldr	r3, [r7, #16]
 8017024:	1ad3      	subs	r3, r2, r3
 8017026:	f241 3288 	movw	r2, #5000	; 0x1388
 801702a:	4293      	cmp	r3, r2
 801702c:	d908      	bls.n	8017040 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801702e:	4b3b      	ldr	r3, [pc, #236]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8017030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017038:	2b00      	cmp	r3, #0
 801703a:	d001      	beq.n	8017040 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 801703c:	2303      	movs	r3, #3
 801703e:	e189      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017040:	4b36      	ldr	r3, [pc, #216]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8017042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801704a:	2b00      	cmp	r3, #0
 801704c:	d1e6      	bne.n	801701c <HAL_RCC_OscConfig+0x660>
 801704e:	e045      	b.n	80170dc <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017050:	f7fc faa0 	bl	8013594 <HAL_GetTick>
 8017054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8017056:	e011      	b.n	801707c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017058:	f7fc fa9c 	bl	8013594 <HAL_GetTick>
 801705c:	4602      	mov	r2, r0
 801705e:	693b      	ldr	r3, [r7, #16]
 8017060:	1ad3      	subs	r3, r2, r3
 8017062:	f241 3288 	movw	r2, #5000	; 0x1388
 8017066:	4293      	cmp	r3, r2
 8017068:	d908      	bls.n	801707c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801706a:	4b2c      	ldr	r3, [pc, #176]	; (801711c <HAL_RCC_OscConfig+0x760>)
 801706c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017070:	f003 0302 	and.w	r3, r3, #2
 8017074:	2b00      	cmp	r3, #0
 8017076:	d001      	beq.n	801707c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8017078:	2303      	movs	r3, #3
 801707a:	e16b      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801707c:	4b27      	ldr	r3, [pc, #156]	; (801711c <HAL_RCC_OscConfig+0x760>)
 801707e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017082:	f003 0302 	and.w	r3, r3, #2
 8017086:	2b00      	cmp	r3, #0
 8017088:	d1e6      	bne.n	8017058 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 801708a:	4b24      	ldr	r3, [pc, #144]	; (801711c <HAL_RCC_OscConfig+0x760>)
 801708c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017094:	2b00      	cmp	r3, #0
 8017096:	d021      	beq.n	80170dc <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8017098:	4b20      	ldr	r3, [pc, #128]	; (801711c <HAL_RCC_OscConfig+0x760>)
 801709a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801709e:	4a1f      	ldr	r2, [pc, #124]	; (801711c <HAL_RCC_OscConfig+0x760>)
 80170a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80170a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80170a8:	e011      	b.n	80170ce <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80170aa:	f7fc fa73 	bl	8013594 <HAL_GetTick>
 80170ae:	4602      	mov	r2, r0
 80170b0:	693b      	ldr	r3, [r7, #16]
 80170b2:	1ad3      	subs	r3, r2, r3
 80170b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80170b8:	4293      	cmp	r3, r2
 80170ba:	d908      	bls.n	80170ce <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80170bc:	4b17      	ldr	r3, [pc, #92]	; (801711c <HAL_RCC_OscConfig+0x760>)
 80170be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80170c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d001      	beq.n	80170ce <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80170ca:	2303      	movs	r3, #3
 80170cc:	e142      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80170ce:	4b13      	ldr	r3, [pc, #76]	; (801711c <HAL_RCC_OscConfig+0x760>)
 80170d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80170d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d1e6      	bne.n	80170aa <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80170dc:	7ffb      	ldrb	r3, [r7, #31]
 80170de:	2b01      	cmp	r3, #1
 80170e0:	d105      	bne.n	80170ee <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80170e2:	4b0e      	ldr	r3, [pc, #56]	; (801711c <HAL_RCC_OscConfig+0x760>)
 80170e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80170e6:	4a0d      	ldr	r2, [pc, #52]	; (801711c <HAL_RCC_OscConfig+0x760>)
 80170e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80170ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	f003 0320 	and.w	r3, r3, #32
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d04f      	beq.n	801719a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d028      	beq.n	8017154 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8017102:	4b06      	ldr	r3, [pc, #24]	; (801711c <HAL_RCC_OscConfig+0x760>)
 8017104:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017108:	4a04      	ldr	r2, [pc, #16]	; (801711c <HAL_RCC_OscConfig+0x760>)
 801710a:	f043 0301 	orr.w	r3, r3, #1
 801710e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017112:	f7fc fa3f 	bl	8013594 <HAL_GetTick>
 8017116:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8017118:	e014      	b.n	8017144 <HAL_RCC_OscConfig+0x788>
 801711a:	bf00      	nop
 801711c:	40021000 	.word	0x40021000
 8017120:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017124:	f7fc fa36 	bl	8013594 <HAL_GetTick>
 8017128:	4602      	mov	r2, r0
 801712a:	693b      	ldr	r3, [r7, #16]
 801712c:	1ad3      	subs	r3, r2, r3
 801712e:	2b02      	cmp	r3, #2
 8017130:	d908      	bls.n	8017144 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8017132:	4b8a      	ldr	r3, [pc, #552]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 8017134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017138:	f003 0302 	and.w	r3, r3, #2
 801713c:	2b00      	cmp	r3, #0
 801713e:	d101      	bne.n	8017144 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8017140:	2303      	movs	r3, #3
 8017142:	e107      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8017144:	4b85      	ldr	r3, [pc, #532]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 8017146:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801714a:	f003 0302 	and.w	r3, r3, #2
 801714e:	2b00      	cmp	r3, #0
 8017150:	d0e8      	beq.n	8017124 <HAL_RCC_OscConfig+0x768>
 8017152:	e022      	b.n	801719a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8017154:	4b81      	ldr	r3, [pc, #516]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 8017156:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801715a:	4a80      	ldr	r2, [pc, #512]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 801715c:	f023 0301 	bic.w	r3, r3, #1
 8017160:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017164:	f7fc fa16 	bl	8013594 <HAL_GetTick>
 8017168:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801716a:	e00f      	b.n	801718c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801716c:	f7fc fa12 	bl	8013594 <HAL_GetTick>
 8017170:	4602      	mov	r2, r0
 8017172:	693b      	ldr	r3, [r7, #16]
 8017174:	1ad3      	subs	r3, r2, r3
 8017176:	2b02      	cmp	r3, #2
 8017178:	d908      	bls.n	801718c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801717a:	4b78      	ldr	r3, [pc, #480]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 801717c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017180:	f003 0302 	and.w	r3, r3, #2
 8017184:	2b00      	cmp	r3, #0
 8017186:	d001      	beq.n	801718c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8017188:	2303      	movs	r3, #3
 801718a:	e0e3      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801718c:	4b73      	ldr	r3, [pc, #460]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 801718e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017192:	f003 0302 	and.w	r3, r3, #2
 8017196:	2b00      	cmp	r3, #0
 8017198:	d1e8      	bne.n	801716c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801719e:	2b00      	cmp	r3, #0
 80171a0:	f000 80d7 	beq.w	8017352 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80171a4:	4b6d      	ldr	r3, [pc, #436]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 80171a6:	689b      	ldr	r3, [r3, #8]
 80171a8:	f003 030c 	and.w	r3, r3, #12
 80171ac:	2b0c      	cmp	r3, #12
 80171ae:	f000 8091 	beq.w	80172d4 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171b6:	2b02      	cmp	r3, #2
 80171b8:	d166      	bne.n	8017288 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80171ba:	4b68      	ldr	r3, [pc, #416]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	4a67      	ldr	r2, [pc, #412]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 80171c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80171c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80171c6:	f7fc f9e5 	bl	8013594 <HAL_GetTick>
 80171ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80171cc:	e00e      	b.n	80171ec <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80171ce:	f7fc f9e1 	bl	8013594 <HAL_GetTick>
 80171d2:	4602      	mov	r2, r0
 80171d4:	693b      	ldr	r3, [r7, #16]
 80171d6:	1ad3      	subs	r3, r2, r3
 80171d8:	2b02      	cmp	r3, #2
 80171da:	d907      	bls.n	80171ec <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80171dc:	4b5f      	ldr	r3, [pc, #380]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d001      	beq.n	80171ec <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80171e8:	2303      	movs	r3, #3
 80171ea:	e0b3      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80171ec:	4b5b      	ldr	r3, [pc, #364]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d1ea      	bne.n	80171ce <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80171f8:	4b58      	ldr	r3, [pc, #352]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 80171fa:	68da      	ldr	r2, [r3, #12]
 80171fc:	4b58      	ldr	r3, [pc, #352]	; (8017360 <HAL_RCC_OscConfig+0x9a4>)
 80171fe:	4013      	ands	r3, r2
 8017200:	687a      	ldr	r2, [r7, #4]
 8017202:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8017204:	687a      	ldr	r2, [r7, #4]
 8017206:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8017208:	3a01      	subs	r2, #1
 801720a:	0112      	lsls	r2, r2, #4
 801720c:	4311      	orrs	r1, r2
 801720e:	687a      	ldr	r2, [r7, #4]
 8017210:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8017212:	0212      	lsls	r2, r2, #8
 8017214:	4311      	orrs	r1, r2
 8017216:	687a      	ldr	r2, [r7, #4]
 8017218:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801721a:	0852      	lsrs	r2, r2, #1
 801721c:	3a01      	subs	r2, #1
 801721e:	0552      	lsls	r2, r2, #21
 8017220:	4311      	orrs	r1, r2
 8017222:	687a      	ldr	r2, [r7, #4]
 8017224:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8017226:	0852      	lsrs	r2, r2, #1
 8017228:	3a01      	subs	r2, #1
 801722a:	0652      	lsls	r2, r2, #25
 801722c:	4311      	orrs	r1, r2
 801722e:	687a      	ldr	r2, [r7, #4]
 8017230:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017232:	06d2      	lsls	r2, r2, #27
 8017234:	430a      	orrs	r2, r1
 8017236:	4949      	ldr	r1, [pc, #292]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 8017238:	4313      	orrs	r3, r2
 801723a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801723c:	4b47      	ldr	r3, [pc, #284]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	4a46      	ldr	r2, [pc, #280]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 8017242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017246:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8017248:	4b44      	ldr	r3, [pc, #272]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 801724a:	68db      	ldr	r3, [r3, #12]
 801724c:	4a43      	ldr	r2, [pc, #268]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 801724e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017252:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017254:	f7fc f99e 	bl	8013594 <HAL_GetTick>
 8017258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801725a:	e00e      	b.n	801727a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801725c:	f7fc f99a 	bl	8013594 <HAL_GetTick>
 8017260:	4602      	mov	r2, r0
 8017262:	693b      	ldr	r3, [r7, #16]
 8017264:	1ad3      	subs	r3, r2, r3
 8017266:	2b02      	cmp	r3, #2
 8017268:	d907      	bls.n	801727a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801726a:	4b3c      	ldr	r3, [pc, #240]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017272:	2b00      	cmp	r3, #0
 8017274:	d101      	bne.n	801727a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8017276:	2303      	movs	r3, #3
 8017278:	e06c      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801727a:	4b38      	ldr	r3, [pc, #224]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017282:	2b00      	cmp	r3, #0
 8017284:	d0ea      	beq.n	801725c <HAL_RCC_OscConfig+0x8a0>
 8017286:	e064      	b.n	8017352 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017288:	4b34      	ldr	r3, [pc, #208]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	4a33      	ldr	r2, [pc, #204]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 801728e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8017292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017294:	f7fc f97e 	bl	8013594 <HAL_GetTick>
 8017298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801729a:	e00e      	b.n	80172ba <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801729c:	f7fc f97a 	bl	8013594 <HAL_GetTick>
 80172a0:	4602      	mov	r2, r0
 80172a2:	693b      	ldr	r3, [r7, #16]
 80172a4:	1ad3      	subs	r3, r2, r3
 80172a6:	2b02      	cmp	r3, #2
 80172a8:	d907      	bls.n	80172ba <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80172aa:	4b2c      	ldr	r3, [pc, #176]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d001      	beq.n	80172ba <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80172b6:	2303      	movs	r3, #3
 80172b8:	e04c      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80172ba:	4b28      	ldr	r3, [pc, #160]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d1ea      	bne.n	801729c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80172c6:	4b25      	ldr	r3, [pc, #148]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 80172c8:	68da      	ldr	r2, [r3, #12]
 80172ca:	4924      	ldr	r1, [pc, #144]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 80172cc:	4b25      	ldr	r3, [pc, #148]	; (8017364 <HAL_RCC_OscConfig+0x9a8>)
 80172ce:	4013      	ands	r3, r2
 80172d0:	60cb      	str	r3, [r1, #12]
 80172d2:	e03e      	b.n	8017352 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172d8:	2b01      	cmp	r3, #1
 80172da:	d101      	bne.n	80172e0 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80172dc:	2301      	movs	r3, #1
 80172de:	e039      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80172e0:	4b1e      	ldr	r3, [pc, #120]	; (801735c <HAL_RCC_OscConfig+0x9a0>)
 80172e2:	68db      	ldr	r3, [r3, #12]
 80172e4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80172e6:	697b      	ldr	r3, [r7, #20]
 80172e8:	f003 0203 	and.w	r2, r3, #3
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172f0:	429a      	cmp	r2, r3
 80172f2:	d12c      	bne.n	801734e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80172f4:	697b      	ldr	r3, [r7, #20]
 80172f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80172fe:	3b01      	subs	r3, #1
 8017300:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8017302:	429a      	cmp	r2, r3
 8017304:	d123      	bne.n	801734e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8017306:	697b      	ldr	r3, [r7, #20]
 8017308:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017310:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8017312:	429a      	cmp	r2, r3
 8017314:	d11b      	bne.n	801734e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8017316:	697b      	ldr	r3, [r7, #20]
 8017318:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017320:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8017322:	429a      	cmp	r2, r3
 8017324:	d113      	bne.n	801734e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8017326:	697b      	ldr	r3, [r7, #20]
 8017328:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017330:	085b      	lsrs	r3, r3, #1
 8017332:	3b01      	subs	r3, #1
 8017334:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8017336:	429a      	cmp	r2, r3
 8017338:	d109      	bne.n	801734e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801733a:	697b      	ldr	r3, [r7, #20]
 801733c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017344:	085b      	lsrs	r3, r3, #1
 8017346:	3b01      	subs	r3, #1
 8017348:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801734a:	429a      	cmp	r2, r3
 801734c:	d001      	beq.n	8017352 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 801734e:	2301      	movs	r3, #1
 8017350:	e000      	b.n	8017354 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8017352:	2300      	movs	r3, #0
}
 8017354:	4618      	mov	r0, r3
 8017356:	3720      	adds	r7, #32
 8017358:	46bd      	mov	sp, r7
 801735a:	bd80      	pop	{r7, pc}
 801735c:	40021000 	.word	0x40021000
 8017360:	019f800c 	.word	0x019f800c
 8017364:	feeefffc 	.word	0xfeeefffc

08017368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b086      	sub	sp, #24
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
 8017370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8017372:	2300      	movs	r3, #0
 8017374:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	2b00      	cmp	r3, #0
 801737a:	d101      	bne.n	8017380 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801737c:	2301      	movs	r3, #1
 801737e:	e11c      	b.n	80175ba <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017380:	4b90      	ldr	r3, [pc, #576]	; (80175c4 <HAL_RCC_ClockConfig+0x25c>)
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	f003 030f 	and.w	r3, r3, #15
 8017388:	683a      	ldr	r2, [r7, #0]
 801738a:	429a      	cmp	r2, r3
 801738c:	d910      	bls.n	80173b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801738e:	4b8d      	ldr	r3, [pc, #564]	; (80175c4 <HAL_RCC_ClockConfig+0x25c>)
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	f023 020f 	bic.w	r2, r3, #15
 8017396:	498b      	ldr	r1, [pc, #556]	; (80175c4 <HAL_RCC_ClockConfig+0x25c>)
 8017398:	683b      	ldr	r3, [r7, #0]
 801739a:	4313      	orrs	r3, r2
 801739c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801739e:	4b89      	ldr	r3, [pc, #548]	; (80175c4 <HAL_RCC_ClockConfig+0x25c>)
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	f003 030f 	and.w	r3, r3, #15
 80173a6:	683a      	ldr	r2, [r7, #0]
 80173a8:	429a      	cmp	r2, r3
 80173aa:	d001      	beq.n	80173b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80173ac:	2301      	movs	r3, #1
 80173ae:	e104      	b.n	80175ba <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	f003 0302 	and.w	r3, r3, #2
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d010      	beq.n	80173de <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	689a      	ldr	r2, [r3, #8]
 80173c0:	4b81      	ldr	r3, [pc, #516]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 80173c2:	689b      	ldr	r3, [r3, #8]
 80173c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80173c8:	429a      	cmp	r2, r3
 80173ca:	d908      	bls.n	80173de <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80173cc:	4b7e      	ldr	r3, [pc, #504]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 80173ce:	689b      	ldr	r3, [r3, #8]
 80173d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	689b      	ldr	r3, [r3, #8]
 80173d8:	497b      	ldr	r1, [pc, #492]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 80173da:	4313      	orrs	r3, r2
 80173dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	f003 0301 	and.w	r3, r3, #1
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	f000 8085 	beq.w	80174f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	685b      	ldr	r3, [r3, #4]
 80173f0:	2b03      	cmp	r3, #3
 80173f2:	d11f      	bne.n	8017434 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80173f4:	4b74      	ldr	r3, [pc, #464]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d101      	bne.n	8017404 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8017400:	2301      	movs	r3, #1
 8017402:	e0da      	b.n	80175ba <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8017404:	f000 fa58 	bl	80178b8 <RCC_GetSysClockFreqFromPLLSource>
 8017408:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 801740a:	693b      	ldr	r3, [r7, #16]
 801740c:	4a6f      	ldr	r2, [pc, #444]	; (80175cc <HAL_RCC_ClockConfig+0x264>)
 801740e:	4293      	cmp	r3, r2
 8017410:	d947      	bls.n	80174a2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8017412:	4b6d      	ldr	r3, [pc, #436]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 8017414:	689b      	ldr	r3, [r3, #8]
 8017416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801741a:	2b00      	cmp	r3, #0
 801741c:	d141      	bne.n	80174a2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801741e:	4b6a      	ldr	r3, [pc, #424]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 8017420:	689b      	ldr	r3, [r3, #8]
 8017422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8017426:	4a68      	ldr	r2, [pc, #416]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 8017428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801742c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801742e:	2380      	movs	r3, #128	; 0x80
 8017430:	617b      	str	r3, [r7, #20]
 8017432:	e036      	b.n	80174a2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	685b      	ldr	r3, [r3, #4]
 8017438:	2b02      	cmp	r3, #2
 801743a:	d107      	bne.n	801744c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801743c:	4b62      	ldr	r3, [pc, #392]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017444:	2b00      	cmp	r3, #0
 8017446:	d115      	bne.n	8017474 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8017448:	2301      	movs	r3, #1
 801744a:	e0b6      	b.n	80175ba <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	685b      	ldr	r3, [r3, #4]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d107      	bne.n	8017464 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8017454:	4b5c      	ldr	r3, [pc, #368]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	f003 0302 	and.w	r3, r3, #2
 801745c:	2b00      	cmp	r3, #0
 801745e:	d109      	bne.n	8017474 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8017460:	2301      	movs	r3, #1
 8017462:	e0aa      	b.n	80175ba <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8017464:	4b58      	ldr	r3, [pc, #352]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801746c:	2b00      	cmp	r3, #0
 801746e:	d101      	bne.n	8017474 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8017470:	2301      	movs	r3, #1
 8017472:	e0a2      	b.n	80175ba <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8017474:	f000 f8b0 	bl	80175d8 <HAL_RCC_GetSysClockFreq>
 8017478:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 801747a:	693b      	ldr	r3, [r7, #16]
 801747c:	4a53      	ldr	r2, [pc, #332]	; (80175cc <HAL_RCC_ClockConfig+0x264>)
 801747e:	4293      	cmp	r3, r2
 8017480:	d90f      	bls.n	80174a2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8017482:	4b51      	ldr	r3, [pc, #324]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 8017484:	689b      	ldr	r3, [r3, #8]
 8017486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801748a:	2b00      	cmp	r3, #0
 801748c:	d109      	bne.n	80174a2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801748e:	4b4e      	ldr	r3, [pc, #312]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 8017490:	689b      	ldr	r3, [r3, #8]
 8017492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8017496:	4a4c      	ldr	r2, [pc, #304]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 8017498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801749c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801749e:	2380      	movs	r3, #128	; 0x80
 80174a0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80174a2:	4b49      	ldr	r3, [pc, #292]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 80174a4:	689b      	ldr	r3, [r3, #8]
 80174a6:	f023 0203 	bic.w	r2, r3, #3
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	685b      	ldr	r3, [r3, #4]
 80174ae:	4946      	ldr	r1, [pc, #280]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 80174b0:	4313      	orrs	r3, r2
 80174b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80174b4:	f7fc f86e 	bl	8013594 <HAL_GetTick>
 80174b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80174ba:	e013      	b.n	80174e4 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80174bc:	f7fc f86a 	bl	8013594 <HAL_GetTick>
 80174c0:	4602      	mov	r2, r0
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	1ad3      	subs	r3, r2, r3
 80174c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80174ca:	4293      	cmp	r3, r2
 80174cc:	d90a      	bls.n	80174e4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80174ce:	4b3e      	ldr	r3, [pc, #248]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 80174d0:	689b      	ldr	r3, [r3, #8]
 80174d2:	f003 020c 	and.w	r2, r3, #12
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	685b      	ldr	r3, [r3, #4]
 80174da:	009b      	lsls	r3, r3, #2
 80174dc:	429a      	cmp	r2, r3
 80174de:	d001      	beq.n	80174e4 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80174e0:	2303      	movs	r3, #3
 80174e2:	e06a      	b.n	80175ba <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80174e4:	4b38      	ldr	r3, [pc, #224]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 80174e6:	689b      	ldr	r3, [r3, #8]
 80174e8:	f003 020c 	and.w	r2, r3, #12
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	685b      	ldr	r3, [r3, #4]
 80174f0:	009b      	lsls	r3, r3, #2
 80174f2:	429a      	cmp	r2, r3
 80174f4:	d1e2      	bne.n	80174bc <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80174f6:	697b      	ldr	r3, [r7, #20]
 80174f8:	2b80      	cmp	r3, #128	; 0x80
 80174fa:	d105      	bne.n	8017508 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80174fc:	4b32      	ldr	r3, [pc, #200]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 80174fe:	689b      	ldr	r3, [r3, #8]
 8017500:	4a31      	ldr	r2, [pc, #196]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 8017502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8017506:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	f003 0302 	and.w	r3, r3, #2
 8017510:	2b00      	cmp	r3, #0
 8017512:	d010      	beq.n	8017536 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	689a      	ldr	r2, [r3, #8]
 8017518:	4b2b      	ldr	r3, [pc, #172]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 801751a:	689b      	ldr	r3, [r3, #8]
 801751c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017520:	429a      	cmp	r2, r3
 8017522:	d208      	bcs.n	8017536 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017524:	4b28      	ldr	r3, [pc, #160]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 8017526:	689b      	ldr	r3, [r3, #8]
 8017528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	689b      	ldr	r3, [r3, #8]
 8017530:	4925      	ldr	r1, [pc, #148]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 8017532:	4313      	orrs	r3, r2
 8017534:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017536:	4b23      	ldr	r3, [pc, #140]	; (80175c4 <HAL_RCC_ClockConfig+0x25c>)
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	f003 030f 	and.w	r3, r3, #15
 801753e:	683a      	ldr	r2, [r7, #0]
 8017540:	429a      	cmp	r2, r3
 8017542:	d210      	bcs.n	8017566 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017544:	4b1f      	ldr	r3, [pc, #124]	; (80175c4 <HAL_RCC_ClockConfig+0x25c>)
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	f023 020f 	bic.w	r2, r3, #15
 801754c:	491d      	ldr	r1, [pc, #116]	; (80175c4 <HAL_RCC_ClockConfig+0x25c>)
 801754e:	683b      	ldr	r3, [r7, #0]
 8017550:	4313      	orrs	r3, r2
 8017552:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017554:	4b1b      	ldr	r3, [pc, #108]	; (80175c4 <HAL_RCC_ClockConfig+0x25c>)
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	f003 030f 	and.w	r3, r3, #15
 801755c:	683a      	ldr	r2, [r7, #0]
 801755e:	429a      	cmp	r2, r3
 8017560:	d001      	beq.n	8017566 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8017562:	2301      	movs	r3, #1
 8017564:	e029      	b.n	80175ba <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	f003 0304 	and.w	r3, r3, #4
 801756e:	2b00      	cmp	r3, #0
 8017570:	d008      	beq.n	8017584 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8017572:	4b15      	ldr	r3, [pc, #84]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 8017574:	689b      	ldr	r3, [r3, #8]
 8017576:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	68db      	ldr	r3, [r3, #12]
 801757e:	4912      	ldr	r1, [pc, #72]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 8017580:	4313      	orrs	r3, r2
 8017582:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	f003 0308 	and.w	r3, r3, #8
 801758c:	2b00      	cmp	r3, #0
 801758e:	d009      	beq.n	80175a4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8017590:	4b0d      	ldr	r3, [pc, #52]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 8017592:	689b      	ldr	r3, [r3, #8]
 8017594:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	691b      	ldr	r3, [r3, #16]
 801759c:	00db      	lsls	r3, r3, #3
 801759e:	490a      	ldr	r1, [pc, #40]	; (80175c8 <HAL_RCC_ClockConfig+0x260>)
 80175a0:	4313      	orrs	r3, r2
 80175a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80175a4:	f000 f8b6 	bl	8017714 <HAL_RCC_GetHCLKFreq>
 80175a8:	4603      	mov	r3, r0
 80175aa:	4a09      	ldr	r2, [pc, #36]	; (80175d0 <HAL_RCC_ClockConfig+0x268>)
 80175ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80175ae:	4b09      	ldr	r3, [pc, #36]	; (80175d4 <HAL_RCC_ClockConfig+0x26c>)
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	4618      	mov	r0, r3
 80175b4:	f7fb fd46 	bl	8013044 <HAL_InitTick>
 80175b8:	4603      	mov	r3, r0
}
 80175ba:	4618      	mov	r0, r3
 80175bc:	3718      	adds	r7, #24
 80175be:	46bd      	mov	sp, r7
 80175c0:	bd80      	pop	{r7, pc}
 80175c2:	bf00      	nop
 80175c4:	40022000 	.word	0x40022000
 80175c8:	40021000 	.word	0x40021000
 80175cc:	04c4b400 	.word	0x04c4b400
 80175d0:	20000090 	.word	0x20000090
 80175d4:	20000094 	.word	0x20000094

080175d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80175d8:	b480      	push	{r7}
 80175da:	b089      	sub	sp, #36	; 0x24
 80175dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80175de:	2300      	movs	r3, #0
 80175e0:	61fb      	str	r3, [r7, #28]
 80175e2:	2300      	movs	r3, #0
 80175e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80175e6:	4b47      	ldr	r3, [pc, #284]	; (8017704 <HAL_RCC_GetSysClockFreq+0x12c>)
 80175e8:	689b      	ldr	r3, [r3, #8]
 80175ea:	f003 030c 	and.w	r3, r3, #12
 80175ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80175f0:	4b44      	ldr	r3, [pc, #272]	; (8017704 <HAL_RCC_GetSysClockFreq+0x12c>)
 80175f2:	68db      	ldr	r3, [r3, #12]
 80175f4:	f003 0303 	and.w	r3, r3, #3
 80175f8:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80175fa:	693b      	ldr	r3, [r7, #16]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d005      	beq.n	801760c <HAL_RCC_GetSysClockFreq+0x34>
 8017600:	693b      	ldr	r3, [r7, #16]
 8017602:	2b0c      	cmp	r3, #12
 8017604:	d121      	bne.n	801764a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	2b01      	cmp	r3, #1
 801760a:	d11e      	bne.n	801764a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801760c:	4b3d      	ldr	r3, [pc, #244]	; (8017704 <HAL_RCC_GetSysClockFreq+0x12c>)
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	f003 0308 	and.w	r3, r3, #8
 8017614:	2b00      	cmp	r3, #0
 8017616:	d107      	bne.n	8017628 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8017618:	4b3a      	ldr	r3, [pc, #232]	; (8017704 <HAL_RCC_GetSysClockFreq+0x12c>)
 801761a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801761e:	0a1b      	lsrs	r3, r3, #8
 8017620:	f003 030f 	and.w	r3, r3, #15
 8017624:	61fb      	str	r3, [r7, #28]
 8017626:	e005      	b.n	8017634 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8017628:	4b36      	ldr	r3, [pc, #216]	; (8017704 <HAL_RCC_GetSysClockFreq+0x12c>)
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	091b      	lsrs	r3, r3, #4
 801762e:	f003 030f 	and.w	r3, r3, #15
 8017632:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8017634:	4a34      	ldr	r2, [pc, #208]	; (8017708 <HAL_RCC_GetSysClockFreq+0x130>)
 8017636:	69fb      	ldr	r3, [r7, #28]
 8017638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801763c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801763e:	693b      	ldr	r3, [r7, #16]
 8017640:	2b00      	cmp	r3, #0
 8017642:	d10d      	bne.n	8017660 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8017644:	69fb      	ldr	r3, [r7, #28]
 8017646:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8017648:	e00a      	b.n	8017660 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801764a:	693b      	ldr	r3, [r7, #16]
 801764c:	2b04      	cmp	r3, #4
 801764e:	d102      	bne.n	8017656 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8017650:	4b2e      	ldr	r3, [pc, #184]	; (801770c <HAL_RCC_GetSysClockFreq+0x134>)
 8017652:	61bb      	str	r3, [r7, #24]
 8017654:	e004      	b.n	8017660 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8017656:	693b      	ldr	r3, [r7, #16]
 8017658:	2b08      	cmp	r3, #8
 801765a:	d101      	bne.n	8017660 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801765c:	4b2c      	ldr	r3, [pc, #176]	; (8017710 <HAL_RCC_GetSysClockFreq+0x138>)
 801765e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017660:	693b      	ldr	r3, [r7, #16]
 8017662:	2b0c      	cmp	r3, #12
 8017664:	d146      	bne.n	80176f4 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8017666:	4b27      	ldr	r3, [pc, #156]	; (8017704 <HAL_RCC_GetSysClockFreq+0x12c>)
 8017668:	68db      	ldr	r3, [r3, #12]
 801766a:	f003 0303 	and.w	r3, r3, #3
 801766e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8017670:	4b24      	ldr	r3, [pc, #144]	; (8017704 <HAL_RCC_GetSysClockFreq+0x12c>)
 8017672:	68db      	ldr	r3, [r3, #12]
 8017674:	091b      	lsrs	r3, r3, #4
 8017676:	f003 030f 	and.w	r3, r3, #15
 801767a:	3301      	adds	r3, #1
 801767c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 801767e:	68bb      	ldr	r3, [r7, #8]
 8017680:	2b02      	cmp	r3, #2
 8017682:	d003      	beq.n	801768c <HAL_RCC_GetSysClockFreq+0xb4>
 8017684:	68bb      	ldr	r3, [r7, #8]
 8017686:	2b03      	cmp	r3, #3
 8017688:	d00d      	beq.n	80176a6 <HAL_RCC_GetSysClockFreq+0xce>
 801768a:	e019      	b.n	80176c0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801768c:	4a1f      	ldr	r2, [pc, #124]	; (801770c <HAL_RCC_GetSysClockFreq+0x134>)
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	fbb2 f3f3 	udiv	r3, r2, r3
 8017694:	4a1b      	ldr	r2, [pc, #108]	; (8017704 <HAL_RCC_GetSysClockFreq+0x12c>)
 8017696:	68d2      	ldr	r2, [r2, #12]
 8017698:	0a12      	lsrs	r2, r2, #8
 801769a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801769e:	fb02 f303 	mul.w	r3, r2, r3
 80176a2:	617b      	str	r3, [r7, #20]
        break;
 80176a4:	e019      	b.n	80176da <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80176a6:	4a1a      	ldr	r2, [pc, #104]	; (8017710 <HAL_RCC_GetSysClockFreq+0x138>)
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80176ae:	4a15      	ldr	r2, [pc, #84]	; (8017704 <HAL_RCC_GetSysClockFreq+0x12c>)
 80176b0:	68d2      	ldr	r2, [r2, #12]
 80176b2:	0a12      	lsrs	r2, r2, #8
 80176b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80176b8:	fb02 f303 	mul.w	r3, r2, r3
 80176bc:	617b      	str	r3, [r7, #20]
        break;
 80176be:	e00c      	b.n	80176da <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80176c0:	69fa      	ldr	r2, [r7, #28]
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80176c8:	4a0e      	ldr	r2, [pc, #56]	; (8017704 <HAL_RCC_GetSysClockFreq+0x12c>)
 80176ca:	68d2      	ldr	r2, [r2, #12]
 80176cc:	0a12      	lsrs	r2, r2, #8
 80176ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80176d2:	fb02 f303 	mul.w	r3, r2, r3
 80176d6:	617b      	str	r3, [r7, #20]
        break;
 80176d8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80176da:	4b0a      	ldr	r3, [pc, #40]	; (8017704 <HAL_RCC_GetSysClockFreq+0x12c>)
 80176dc:	68db      	ldr	r3, [r3, #12]
 80176de:	0e5b      	lsrs	r3, r3, #25
 80176e0:	f003 0303 	and.w	r3, r3, #3
 80176e4:	3301      	adds	r3, #1
 80176e6:	005b      	lsls	r3, r3, #1
 80176e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80176ea:	697a      	ldr	r2, [r7, #20]
 80176ec:	683b      	ldr	r3, [r7, #0]
 80176ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80176f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80176f4:	69bb      	ldr	r3, [r7, #24]
}
 80176f6:	4618      	mov	r0, r3
 80176f8:	3724      	adds	r7, #36	; 0x24
 80176fa:	46bd      	mov	sp, r7
 80176fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017700:	4770      	bx	lr
 8017702:	bf00      	nop
 8017704:	40021000 	.word	0x40021000
 8017708:	08024058 	.word	0x08024058
 801770c:	00f42400 	.word	0x00f42400
 8017710:	007a1200 	.word	0x007a1200

08017714 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017714:	b580      	push	{r7, lr}
 8017716:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8017718:	f7ff ff5e 	bl	80175d8 <HAL_RCC_GetSysClockFreq>
 801771c:	4602      	mov	r2, r0
 801771e:	4b05      	ldr	r3, [pc, #20]	; (8017734 <HAL_RCC_GetHCLKFreq+0x20>)
 8017720:	689b      	ldr	r3, [r3, #8]
 8017722:	091b      	lsrs	r3, r3, #4
 8017724:	f003 030f 	and.w	r3, r3, #15
 8017728:	4903      	ldr	r1, [pc, #12]	; (8017738 <HAL_RCC_GetHCLKFreq+0x24>)
 801772a:	5ccb      	ldrb	r3, [r1, r3]
 801772c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017730:	4618      	mov	r0, r3
 8017732:	bd80      	pop	{r7, pc}
 8017734:	40021000 	.word	0x40021000
 8017738:	08024040 	.word	0x08024040

0801773c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801773c:	b580      	push	{r7, lr}
 801773e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8017740:	f7ff ffe8 	bl	8017714 <HAL_RCC_GetHCLKFreq>
 8017744:	4602      	mov	r2, r0
 8017746:	4b05      	ldr	r3, [pc, #20]	; (801775c <HAL_RCC_GetPCLK1Freq+0x20>)
 8017748:	689b      	ldr	r3, [r3, #8]
 801774a:	0a1b      	lsrs	r3, r3, #8
 801774c:	f003 0307 	and.w	r3, r3, #7
 8017750:	4903      	ldr	r1, [pc, #12]	; (8017760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8017752:	5ccb      	ldrb	r3, [r1, r3]
 8017754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017758:	4618      	mov	r0, r3
 801775a:	bd80      	pop	{r7, pc}
 801775c:	40021000 	.word	0x40021000
 8017760:	08024050 	.word	0x08024050

08017764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8017768:	f7ff ffd4 	bl	8017714 <HAL_RCC_GetHCLKFreq>
 801776c:	4602      	mov	r2, r0
 801776e:	4b05      	ldr	r3, [pc, #20]	; (8017784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8017770:	689b      	ldr	r3, [r3, #8]
 8017772:	0adb      	lsrs	r3, r3, #11
 8017774:	f003 0307 	and.w	r3, r3, #7
 8017778:	4903      	ldr	r1, [pc, #12]	; (8017788 <HAL_RCC_GetPCLK2Freq+0x24>)
 801777a:	5ccb      	ldrb	r3, [r1, r3]
 801777c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017780:	4618      	mov	r0, r3
 8017782:	bd80      	pop	{r7, pc}
 8017784:	40021000 	.word	0x40021000
 8017788:	08024050 	.word	0x08024050

0801778c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801778c:	b480      	push	{r7}
 801778e:	b083      	sub	sp, #12
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
 8017794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	220f      	movs	r2, #15
 801779a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801779c:	4b12      	ldr	r3, [pc, #72]	; (80177e8 <HAL_RCC_GetClockConfig+0x5c>)
 801779e:	689b      	ldr	r3, [r3, #8]
 80177a0:	f003 0203 	and.w	r2, r3, #3
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80177a8:	4b0f      	ldr	r3, [pc, #60]	; (80177e8 <HAL_RCC_GetClockConfig+0x5c>)
 80177aa:	689b      	ldr	r3, [r3, #8]
 80177ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80177b4:	4b0c      	ldr	r3, [pc, #48]	; (80177e8 <HAL_RCC_GetClockConfig+0x5c>)
 80177b6:	689b      	ldr	r3, [r3, #8]
 80177b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80177c0:	4b09      	ldr	r3, [pc, #36]	; (80177e8 <HAL_RCC_GetClockConfig+0x5c>)
 80177c2:	689b      	ldr	r3, [r3, #8]
 80177c4:	08db      	lsrs	r3, r3, #3
 80177c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80177ce:	4b07      	ldr	r3, [pc, #28]	; (80177ec <HAL_RCC_GetClockConfig+0x60>)
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	f003 020f 	and.w	r2, r3, #15
 80177d6:	683b      	ldr	r3, [r7, #0]
 80177d8:	601a      	str	r2, [r3, #0]
}
 80177da:	bf00      	nop
 80177dc:	370c      	adds	r7, #12
 80177de:	46bd      	mov	sp, r7
 80177e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e4:	4770      	bx	lr
 80177e6:	bf00      	nop
 80177e8:	40021000 	.word	0x40021000
 80177ec:	40022000 	.word	0x40022000

080177f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80177f0:	b580      	push	{r7, lr}
 80177f2:	b086      	sub	sp, #24
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80177f8:	2300      	movs	r3, #0
 80177fa:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80177fc:	4b2c      	ldr	r3, [pc, #176]	; (80178b0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80177fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017804:	2b00      	cmp	r3, #0
 8017806:	d003      	beq.n	8017810 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8017808:	f7ff f83a 	bl	8016880 <HAL_PWREx_GetVoltageRange>
 801780c:	6138      	str	r0, [r7, #16]
 801780e:	e014      	b.n	801783a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8017810:	4b27      	ldr	r3, [pc, #156]	; (80178b0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8017812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017814:	4a26      	ldr	r2, [pc, #152]	; (80178b0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8017816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801781a:	6593      	str	r3, [r2, #88]	; 0x58
 801781c:	4b24      	ldr	r3, [pc, #144]	; (80178b0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 801781e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017824:	60fb      	str	r3, [r7, #12]
 8017826:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8017828:	f7ff f82a 	bl	8016880 <HAL_PWREx_GetVoltageRange>
 801782c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 801782e:	4b20      	ldr	r3, [pc, #128]	; (80178b0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8017830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017832:	4a1f      	ldr	r2, [pc, #124]	; (80178b0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8017834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017838:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 801783a:	693b      	ldr	r3, [r7, #16]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d003      	beq.n	8017848 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8017840:	693b      	ldr	r3, [r7, #16]
 8017842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017846:	d10b      	bne.n	8017860 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	2b80      	cmp	r3, #128	; 0x80
 801784c:	d919      	bls.n	8017882 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	2ba0      	cmp	r3, #160	; 0xa0
 8017852:	d902      	bls.n	801785a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8017854:	2302      	movs	r3, #2
 8017856:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8017858:	e013      	b.n	8017882 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801785a:	2301      	movs	r3, #1
 801785c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 801785e:	e010      	b.n	8017882 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	2b80      	cmp	r3, #128	; 0x80
 8017864:	d902      	bls.n	801786c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8017866:	2303      	movs	r3, #3
 8017868:	617b      	str	r3, [r7, #20]
 801786a:	e00a      	b.n	8017882 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	2b80      	cmp	r3, #128	; 0x80
 8017870:	d102      	bne.n	8017878 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8017872:	2302      	movs	r3, #2
 8017874:	617b      	str	r3, [r7, #20]
 8017876:	e004      	b.n	8017882 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	2b70      	cmp	r3, #112	; 0x70
 801787c:	d101      	bne.n	8017882 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801787e:	2301      	movs	r3, #1
 8017880:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8017882:	4b0c      	ldr	r3, [pc, #48]	; (80178b4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	f023 020f 	bic.w	r2, r3, #15
 801788a:	490a      	ldr	r1, [pc, #40]	; (80178b4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 801788c:	697b      	ldr	r3, [r7, #20]
 801788e:	4313      	orrs	r3, r2
 8017890:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8017892:	4b08      	ldr	r3, [pc, #32]	; (80178b4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	f003 030f 	and.w	r3, r3, #15
 801789a:	697a      	ldr	r2, [r7, #20]
 801789c:	429a      	cmp	r2, r3
 801789e:	d001      	beq.n	80178a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80178a0:	2301      	movs	r3, #1
 80178a2:	e000      	b.n	80178a6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80178a4:	2300      	movs	r3, #0
}
 80178a6:	4618      	mov	r0, r3
 80178a8:	3718      	adds	r7, #24
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bd80      	pop	{r7, pc}
 80178ae:	bf00      	nop
 80178b0:	40021000 	.word	0x40021000
 80178b4:	40022000 	.word	0x40022000

080178b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80178b8:	b480      	push	{r7}
 80178ba:	b087      	sub	sp, #28
 80178bc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80178be:	4b31      	ldr	r3, [pc, #196]	; (8017984 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80178c0:	68db      	ldr	r3, [r3, #12]
 80178c2:	f003 0303 	and.w	r3, r3, #3
 80178c6:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80178c8:	4b2e      	ldr	r3, [pc, #184]	; (8017984 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80178ca:	68db      	ldr	r3, [r3, #12]
 80178cc:	091b      	lsrs	r3, r3, #4
 80178ce:	f003 030f 	and.w	r3, r3, #15
 80178d2:	3301      	adds	r3, #1
 80178d4:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	2b03      	cmp	r3, #3
 80178da:	d015      	beq.n	8017908 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	2b03      	cmp	r3, #3
 80178e0:	d839      	bhi.n	8017956 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	2b01      	cmp	r3, #1
 80178e6:	d01c      	beq.n	8017922 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	2b02      	cmp	r3, #2
 80178ec:	d133      	bne.n	8017956 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80178ee:	4a26      	ldr	r2, [pc, #152]	; (8017988 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80178f0:	68bb      	ldr	r3, [r7, #8]
 80178f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80178f6:	4a23      	ldr	r2, [pc, #140]	; (8017984 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80178f8:	68d2      	ldr	r2, [r2, #12]
 80178fa:	0a12      	lsrs	r2, r2, #8
 80178fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8017900:	fb02 f303 	mul.w	r3, r2, r3
 8017904:	613b      	str	r3, [r7, #16]
      break;
 8017906:	e029      	b.n	801795c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8017908:	4a20      	ldr	r2, [pc, #128]	; (801798c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 801790a:	68bb      	ldr	r3, [r7, #8]
 801790c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017910:	4a1c      	ldr	r2, [pc, #112]	; (8017984 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8017912:	68d2      	ldr	r2, [r2, #12]
 8017914:	0a12      	lsrs	r2, r2, #8
 8017916:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801791a:	fb02 f303 	mul.w	r3, r2, r3
 801791e:	613b      	str	r3, [r7, #16]
      break;
 8017920:	e01c      	b.n	801795c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8017922:	4b18      	ldr	r3, [pc, #96]	; (8017984 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	f003 0308 	and.w	r3, r3, #8
 801792a:	2b00      	cmp	r3, #0
 801792c:	d107      	bne.n	801793e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801792e:	4b15      	ldr	r3, [pc, #84]	; (8017984 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8017930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017934:	0a1b      	lsrs	r3, r3, #8
 8017936:	f003 030f 	and.w	r3, r3, #15
 801793a:	617b      	str	r3, [r7, #20]
 801793c:	e005      	b.n	801794a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801793e:	4b11      	ldr	r3, [pc, #68]	; (8017984 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	091b      	lsrs	r3, r3, #4
 8017944:	f003 030f 	and.w	r3, r3, #15
 8017948:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 801794a:	4a11      	ldr	r2, [pc, #68]	; (8017990 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 801794c:	697b      	ldr	r3, [r7, #20]
 801794e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017952:	613b      	str	r3, [r7, #16]
        break;
 8017954:	e002      	b.n	801795c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8017956:	2300      	movs	r3, #0
 8017958:	613b      	str	r3, [r7, #16]
      break;
 801795a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 801795c:	4b09      	ldr	r3, [pc, #36]	; (8017984 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801795e:	68db      	ldr	r3, [r3, #12]
 8017960:	0e5b      	lsrs	r3, r3, #25
 8017962:	f003 0303 	and.w	r3, r3, #3
 8017966:	3301      	adds	r3, #1
 8017968:	005b      	lsls	r3, r3, #1
 801796a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 801796c:	693a      	ldr	r2, [r7, #16]
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	fbb2 f3f3 	udiv	r3, r2, r3
 8017974:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8017976:	683b      	ldr	r3, [r7, #0]
}
 8017978:	4618      	mov	r0, r3
 801797a:	371c      	adds	r7, #28
 801797c:	46bd      	mov	sp, r7
 801797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017982:	4770      	bx	lr
 8017984:	40021000 	.word	0x40021000
 8017988:	00f42400 	.word	0x00f42400
 801798c:	007a1200 	.word	0x007a1200
 8017990:	08024058 	.word	0x08024058

08017994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b088      	sub	sp, #32
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801799c:	2300      	movs	r3, #0
 801799e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80179a0:	2300      	movs	r3, #0
 80179a2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d040      	beq.n	8017a32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80179b4:	2b80      	cmp	r3, #128	; 0x80
 80179b6:	d02a      	beq.n	8017a0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80179b8:	2b80      	cmp	r3, #128	; 0x80
 80179ba:	d825      	bhi.n	8017a08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80179bc:	2b60      	cmp	r3, #96	; 0x60
 80179be:	d026      	beq.n	8017a0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80179c0:	2b60      	cmp	r3, #96	; 0x60
 80179c2:	d821      	bhi.n	8017a08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80179c4:	2b40      	cmp	r3, #64	; 0x40
 80179c6:	d006      	beq.n	80179d6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80179c8:	2b40      	cmp	r3, #64	; 0x40
 80179ca:	d81d      	bhi.n	8017a08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d009      	beq.n	80179e4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80179d0:	2b20      	cmp	r3, #32
 80179d2:	d010      	beq.n	80179f6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80179d4:	e018      	b.n	8017a08 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80179d6:	4b8f      	ldr	r3, [pc, #572]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80179d8:	68db      	ldr	r3, [r3, #12]
 80179da:	4a8e      	ldr	r2, [pc, #568]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80179dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80179e0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80179e2:	e015      	b.n	8017a10 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	3304      	adds	r3, #4
 80179e8:	2100      	movs	r1, #0
 80179ea:	4618      	mov	r0, r3
 80179ec:	f000 fb56 	bl	801809c <RCCEx_PLLSAI1_Config>
 80179f0:	4603      	mov	r3, r0
 80179f2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80179f4:	e00c      	b.n	8017a10 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	3320      	adds	r3, #32
 80179fa:	2100      	movs	r1, #0
 80179fc:	4618      	mov	r0, r3
 80179fe:	f000 fc33 	bl	8018268 <RCCEx_PLLSAI2_Config>
 8017a02:	4603      	mov	r3, r0
 8017a04:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8017a06:	e003      	b.n	8017a10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8017a08:	2301      	movs	r3, #1
 8017a0a:	77fb      	strb	r3, [r7, #31]
        break;
 8017a0c:	e000      	b.n	8017a10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8017a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017a10:	7ffb      	ldrb	r3, [r7, #31]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d10b      	bne.n	8017a2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8017a16:	4b7f      	ldr	r3, [pc, #508]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017a1c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a24:	497b      	ldr	r1, [pc, #492]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a26:	4313      	orrs	r3, r2
 8017a28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8017a2c:	e001      	b.n	8017a32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017a2e:	7ffb      	ldrb	r3, [r7, #31]
 8017a30:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d047      	beq.n	8017ace <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017a46:	d030      	beq.n	8017aaa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8017a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017a4c:	d82a      	bhi.n	8017aa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8017a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017a52:	d02a      	beq.n	8017aaa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8017a54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017a58:	d824      	bhi.n	8017aa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8017a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a5e:	d008      	beq.n	8017a72 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8017a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a64:	d81e      	bhi.n	8017aa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d00a      	beq.n	8017a80 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8017a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017a6e:	d010      	beq.n	8017a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8017a70:	e018      	b.n	8017aa4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8017a72:	4b68      	ldr	r3, [pc, #416]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a74:	68db      	ldr	r3, [r3, #12]
 8017a76:	4a67      	ldr	r2, [pc, #412]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017a7c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8017a7e:	e015      	b.n	8017aac <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	3304      	adds	r3, #4
 8017a84:	2100      	movs	r1, #0
 8017a86:	4618      	mov	r0, r3
 8017a88:	f000 fb08 	bl	801809c <RCCEx_PLLSAI1_Config>
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8017a90:	e00c      	b.n	8017aac <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	3320      	adds	r3, #32
 8017a96:	2100      	movs	r1, #0
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f000 fbe5 	bl	8018268 <RCCEx_PLLSAI2_Config>
 8017a9e:	4603      	mov	r3, r0
 8017aa0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8017aa2:	e003      	b.n	8017aac <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8017aa4:	2301      	movs	r3, #1
 8017aa6:	77fb      	strb	r3, [r7, #31]
        break;
 8017aa8:	e000      	b.n	8017aac <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8017aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017aac:	7ffb      	ldrb	r3, [r7, #31]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d10b      	bne.n	8017aca <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8017ab2:	4b58      	ldr	r3, [pc, #352]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017ab8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ac0:	4954      	ldr	r1, [pc, #336]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017ac2:	4313      	orrs	r3, r2
 8017ac4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8017ac8:	e001      	b.n	8017ace <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017aca:	7ffb      	ldrb	r3, [r7, #31]
 8017acc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	f000 80ab 	beq.w	8017c32 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017adc:	2300      	movs	r3, #0
 8017ade:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017ae0:	4b4c      	ldr	r3, [pc, #304]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d10d      	bne.n	8017b08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017aec:	4b49      	ldr	r3, [pc, #292]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017af0:	4a48      	ldr	r2, [pc, #288]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017af6:	6593      	str	r3, [r2, #88]	; 0x58
 8017af8:	4b46      	ldr	r3, [pc, #280]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017b00:	60fb      	str	r3, [r7, #12]
 8017b02:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8017b04:	2301      	movs	r3, #1
 8017b06:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017b08:	4b43      	ldr	r3, [pc, #268]	; (8017c18 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	4a42      	ldr	r2, [pc, #264]	; (8017c18 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8017b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017b12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8017b14:	f7fb fd3e 	bl	8013594 <HAL_GetTick>
 8017b18:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8017b1a:	e00f      	b.n	8017b3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017b1c:	f7fb fd3a 	bl	8013594 <HAL_GetTick>
 8017b20:	4602      	mov	r2, r0
 8017b22:	693b      	ldr	r3, [r7, #16]
 8017b24:	1ad3      	subs	r3, r2, r3
 8017b26:	2b02      	cmp	r3, #2
 8017b28:	d908      	bls.n	8017b3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8017b2a:	4b3b      	ldr	r3, [pc, #236]	; (8017c18 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d109      	bne.n	8017b4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8017b36:	2303      	movs	r3, #3
 8017b38:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8017b3a:	e006      	b.n	8017b4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8017b3c:	4b36      	ldr	r3, [pc, #216]	; (8017c18 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d0e9      	beq.n	8017b1c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8017b48:	e000      	b.n	8017b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8017b4a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8017b4c:	7ffb      	ldrb	r3, [r7, #31]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d164      	bne.n	8017c1c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8017b52:	4b30      	ldr	r3, [pc, #192]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017b5c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8017b5e:	69bb      	ldr	r3, [r7, #24]
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d01f      	beq.n	8017ba4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b6a:	69ba      	ldr	r2, [r7, #24]
 8017b6c:	429a      	cmp	r2, r3
 8017b6e:	d019      	beq.n	8017ba4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8017b70:	4b28      	ldr	r3, [pc, #160]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017b7a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8017b7c:	4b25      	ldr	r3, [pc, #148]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b82:	4a24      	ldr	r2, [pc, #144]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8017b8c:	4b21      	ldr	r3, [pc, #132]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b92:	4a20      	ldr	r2, [pc, #128]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8017b9c:	4a1d      	ldr	r2, [pc, #116]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017b9e:	69bb      	ldr	r3, [r7, #24]
 8017ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8017ba4:	69bb      	ldr	r3, [r7, #24]
 8017ba6:	f003 0301 	and.w	r3, r3, #1
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d01f      	beq.n	8017bee <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017bae:	f7fb fcf1 	bl	8013594 <HAL_GetTick>
 8017bb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017bb4:	e012      	b.n	8017bdc <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017bb6:	f7fb fced 	bl	8013594 <HAL_GetTick>
 8017bba:	4602      	mov	r2, r0
 8017bbc:	693b      	ldr	r3, [r7, #16]
 8017bbe:	1ad3      	subs	r3, r2, r3
 8017bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8017bc4:	4293      	cmp	r3, r2
 8017bc6:	d909      	bls.n	8017bdc <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017bc8:	4b12      	ldr	r3, [pc, #72]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017bce:	f003 0302 	and.w	r3, r3, #2
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d10a      	bne.n	8017bec <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8017bd6:	2303      	movs	r3, #3
 8017bd8:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8017bda:	e007      	b.n	8017bec <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017bdc:	4b0d      	ldr	r3, [pc, #52]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017be2:	f003 0302 	and.w	r3, r3, #2
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d0e5      	beq.n	8017bb6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8017bea:	e000      	b.n	8017bee <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8017bec:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8017bee:	7ffb      	ldrb	r3, [r7, #31]
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d10c      	bne.n	8017c0e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8017bf4:	4b07      	ldr	r3, [pc, #28]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017bfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017c04:	4903      	ldr	r1, [pc, #12]	; (8017c14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017c06:	4313      	orrs	r3, r2
 8017c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8017c0c:	e008      	b.n	8017c20 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8017c0e:	7ffb      	ldrb	r3, [r7, #31]
 8017c10:	77bb      	strb	r3, [r7, #30]
 8017c12:	e005      	b.n	8017c20 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8017c14:	40021000 	.word	0x40021000
 8017c18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017c1c:	7ffb      	ldrb	r3, [r7, #31]
 8017c1e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8017c20:	7dfb      	ldrb	r3, [r7, #23]
 8017c22:	2b01      	cmp	r3, #1
 8017c24:	d105      	bne.n	8017c32 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017c26:	4b9c      	ldr	r3, [pc, #624]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017c2a:	4a9b      	ldr	r2, [pc, #620]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017c30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	f003 0301 	and.w	r3, r3, #1
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d00a      	beq.n	8017c54 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8017c3e:	4b96      	ldr	r3, [pc, #600]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c44:	f023 0203 	bic.w	r2, r3, #3
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c4c:	4992      	ldr	r1, [pc, #584]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c4e:	4313      	orrs	r3, r2
 8017c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	f003 0302 	and.w	r3, r3, #2
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d00a      	beq.n	8017c76 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8017c60:	4b8d      	ldr	r3, [pc, #564]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c66:	f023 020c 	bic.w	r2, r3, #12
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c6e:	498a      	ldr	r1, [pc, #552]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c70:	4313      	orrs	r3, r2
 8017c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	f003 0304 	and.w	r3, r3, #4
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d00a      	beq.n	8017c98 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8017c82:	4b85      	ldr	r3, [pc, #532]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c90:	4981      	ldr	r1, [pc, #516]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c92:	4313      	orrs	r3, r2
 8017c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	f003 0308 	and.w	r3, r3, #8
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d00a      	beq.n	8017cba <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8017ca4:	4b7c      	ldr	r3, [pc, #496]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017caa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017cb2:	4979      	ldr	r1, [pc, #484]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017cb4:	4313      	orrs	r3, r2
 8017cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	f003 0310 	and.w	r3, r3, #16
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d00a      	beq.n	8017cdc <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8017cc6:	4b74      	ldr	r3, [pc, #464]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017cd4:	4970      	ldr	r1, [pc, #448]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017cd6:	4313      	orrs	r3, r2
 8017cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	f003 0320 	and.w	r3, r3, #32
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d00a      	beq.n	8017cfe <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8017ce8:	4b6b      	ldr	r3, [pc, #428]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017cee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017cf6:	4968      	ldr	r1, [pc, #416]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017cf8:	4313      	orrs	r3, r2
 8017cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d00a      	beq.n	8017d20 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8017d0a:	4b63      	ldr	r3, [pc, #396]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017d18:	495f      	ldr	r1, [pc, #380]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017d1a:	4313      	orrs	r3, r2
 8017d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d00a      	beq.n	8017d42 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8017d2c:	4b5a      	ldr	r3, [pc, #360]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017d3a:	4957      	ldr	r1, [pc, #348]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017d3c:	4313      	orrs	r3, r2
 8017d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d00a      	beq.n	8017d64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8017d4e:	4b52      	ldr	r3, [pc, #328]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017d5c:	494e      	ldr	r1, [pc, #312]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017d5e:	4313      	orrs	r3, r2
 8017d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d031      	beq.n	8017dd4 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017d74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8017d78:	d00e      	beq.n	8017d98 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8017d7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8017d7e:	d814      	bhi.n	8017daa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d015      	beq.n	8017db0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8017d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8017d88:	d10f      	bne.n	8017daa <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8017d8a:	4b43      	ldr	r3, [pc, #268]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017d8c:	68db      	ldr	r3, [r3, #12]
 8017d8e:	4a42      	ldr	r2, [pc, #264]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017d90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017d94:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8017d96:	e00c      	b.n	8017db2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	3304      	adds	r3, #4
 8017d9c:	2100      	movs	r1, #0
 8017d9e:	4618      	mov	r0, r3
 8017da0:	f000 f97c 	bl	801809c <RCCEx_PLLSAI1_Config>
 8017da4:	4603      	mov	r3, r0
 8017da6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8017da8:	e003      	b.n	8017db2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8017daa:	2301      	movs	r3, #1
 8017dac:	77fb      	strb	r3, [r7, #31]
        break;
 8017dae:	e000      	b.n	8017db2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8017db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017db2:	7ffb      	ldrb	r3, [r7, #31]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d10b      	bne.n	8017dd0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8017db8:	4b37      	ldr	r3, [pc, #220]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017dbe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017dc6:	4934      	ldr	r1, [pc, #208]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017dc8:	4313      	orrs	r3, r2
 8017dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8017dce:	e001      	b.n	8017dd4 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017dd0:	7ffb      	ldrb	r3, [r7, #31]
 8017dd2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d00a      	beq.n	8017df6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8017de0:	4b2d      	ldr	r3, [pc, #180]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017de6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017dee:	492a      	ldr	r1, [pc, #168]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017df0:	4313      	orrs	r3, r2
 8017df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d00a      	beq.n	8017e18 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8017e02:	4b25      	ldr	r3, [pc, #148]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e10:	4921      	ldr	r1, [pc, #132]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017e12:	4313      	orrs	r3, r2
 8017e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d00a      	beq.n	8017e3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8017e24:	4b1c      	ldr	r3, [pc, #112]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017e32:	4919      	ldr	r1, [pc, #100]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017e34:	4313      	orrs	r3, r2
 8017e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d00a      	beq.n	8017e5c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8017e46:	4b14      	ldr	r3, [pc, #80]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017e48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017e4c:	f023 0203 	bic.w	r2, r3, #3
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e54:	4910      	ldr	r1, [pc, #64]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017e56:	4313      	orrs	r3, r2
 8017e58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d02b      	beq.n	8017ec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8017e68:	4b0b      	ldr	r3, [pc, #44]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017e76:	4908      	ldr	r1, [pc, #32]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017e78:	4313      	orrs	r3, r2
 8017e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8017e86:	d109      	bne.n	8017e9c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8017e88:	4b03      	ldr	r3, [pc, #12]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017e8a:	68db      	ldr	r3, [r3, #12]
 8017e8c:	4a02      	ldr	r2, [pc, #8]	; (8017e98 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017e92:	60d3      	str	r3, [r2, #12]
 8017e94:	e014      	b.n	8017ec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8017e96:	bf00      	nop
 8017e98:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017ea0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8017ea4:	d10c      	bne.n	8017ec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	3304      	adds	r3, #4
 8017eaa:	2101      	movs	r1, #1
 8017eac:	4618      	mov	r0, r3
 8017eae:	f000 f8f5 	bl	801809c <RCCEx_PLLSAI1_Config>
 8017eb2:	4603      	mov	r3, r0
 8017eb4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8017eb6:	7ffb      	ldrb	r3, [r7, #31]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d001      	beq.n	8017ec0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8017ebc:	7ffb      	ldrb	r3, [r7, #31]
 8017ebe:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d04a      	beq.n	8017f62 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017ed0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017ed4:	d108      	bne.n	8017ee8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8017ed6:	4b70      	ldr	r3, [pc, #448]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017ed8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017edc:	4a6e      	ldr	r2, [pc, #440]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017ede:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017ee2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8017ee6:	e012      	b.n	8017f0e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8017ee8:	4b6b      	ldr	r3, [pc, #428]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017eee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017ef6:	4968      	ldr	r1, [pc, #416]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017ef8:	4313      	orrs	r3, r2
 8017efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8017efe:	4b66      	ldr	r3, [pc, #408]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017f00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017f04:	4a64      	ldr	r2, [pc, #400]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017f06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017f0a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017f12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8017f16:	d10d      	bne.n	8017f34 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	3304      	adds	r3, #4
 8017f1c:	2101      	movs	r1, #1
 8017f1e:	4618      	mov	r0, r3
 8017f20:	f000 f8bc 	bl	801809c <RCCEx_PLLSAI1_Config>
 8017f24:	4603      	mov	r3, r0
 8017f26:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8017f28:	7ffb      	ldrb	r3, [r7, #31]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d019      	beq.n	8017f62 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8017f2e:	7ffb      	ldrb	r3, [r7, #31]
 8017f30:	77bb      	strb	r3, [r7, #30]
 8017f32:	e016      	b.n	8017f62 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017f38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8017f3c:	d106      	bne.n	8017f4c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8017f3e:	4b56      	ldr	r3, [pc, #344]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017f40:	68db      	ldr	r3, [r3, #12]
 8017f42:	4a55      	ldr	r2, [pc, #340]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017f44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017f48:	60d3      	str	r3, [r2, #12]
 8017f4a:	e00a      	b.n	8017f62 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017f50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017f54:	d105      	bne.n	8017f62 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8017f56:	4b50      	ldr	r3, [pc, #320]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017f58:	68db      	ldr	r3, [r3, #12]
 8017f5a:	4a4f      	ldr	r2, [pc, #316]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017f60:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d028      	beq.n	8017fc0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8017f6e:	4b4a      	ldr	r3, [pc, #296]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017f74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017f7c:	4946      	ldr	r1, [pc, #280]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017f7e:	4313      	orrs	r3, r2
 8017f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017f88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8017f8c:	d106      	bne.n	8017f9c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8017f8e:	4b42      	ldr	r3, [pc, #264]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017f90:	68db      	ldr	r3, [r3, #12]
 8017f92:	4a41      	ldr	r2, [pc, #260]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017f94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017f98:	60d3      	str	r3, [r2, #12]
 8017f9a:	e011      	b.n	8017fc0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8017fa4:	d10c      	bne.n	8017fc0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	3304      	adds	r3, #4
 8017faa:	2101      	movs	r1, #1
 8017fac:	4618      	mov	r0, r3
 8017fae:	f000 f875 	bl	801809c <RCCEx_PLLSAI1_Config>
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8017fb6:	7ffb      	ldrb	r3, [r7, #31]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d001      	beq.n	8017fc0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8017fbc:	7ffb      	ldrb	r3, [r7, #31]
 8017fbe:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d01e      	beq.n	801800a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8017fcc:	4b32      	ldr	r3, [pc, #200]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017fd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017fdc:	492e      	ldr	r1, [pc, #184]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017fde:	4313      	orrs	r3, r2
 8017fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8017fee:	d10c      	bne.n	801800a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	3304      	adds	r3, #4
 8017ff4:	2102      	movs	r1, #2
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f000 f850 	bl	801809c <RCCEx_PLLSAI1_Config>
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8018000:	7ffb      	ldrb	r3, [r7, #31]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d001      	beq.n	801800a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8018006:	7ffb      	ldrb	r3, [r7, #31]
 8018008:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018012:	2b00      	cmp	r3, #0
 8018014:	d00b      	beq.n	801802e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8018016:	4b20      	ldr	r3, [pc, #128]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018018:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801801c:	f023 0204 	bic.w	r2, r3, #4
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018026:	491c      	ldr	r1, [pc, #112]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018028:	4313      	orrs	r3, r2
 801802a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018036:	2b00      	cmp	r3, #0
 8018038:	d00b      	beq.n	8018052 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 801803a:	4b17      	ldr	r3, [pc, #92]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801803c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018040:	f023 0218 	bic.w	r2, r3, #24
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801804a:	4913      	ldr	r1, [pc, #76]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801804c:	4313      	orrs	r3, r2
 801804e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801805a:	2b00      	cmp	r3, #0
 801805c:	d017      	beq.n	801808e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 801805e:	4b0e      	ldr	r3, [pc, #56]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018060:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018064:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801806e:	490a      	ldr	r1, [pc, #40]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018070:	4313      	orrs	r3, r2
 8018072:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801807c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018080:	d105      	bne.n	801808e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018082:	4b05      	ldr	r3, [pc, #20]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018084:	68db      	ldr	r3, [r3, #12]
 8018086:	4a04      	ldr	r2, [pc, #16]	; (8018098 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801808c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 801808e:	7fbb      	ldrb	r3, [r7, #30]
}
 8018090:	4618      	mov	r0, r3
 8018092:	3720      	adds	r7, #32
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}
 8018098:	40021000 	.word	0x40021000

0801809c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 801809c:	b580      	push	{r7, lr}
 801809e:	b084      	sub	sp, #16
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	6078      	str	r0, [r7, #4]
 80180a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80180a6:	2300      	movs	r3, #0
 80180a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	2b03      	cmp	r3, #3
 80180b0:	d018      	beq.n	80180e4 <RCCEx_PLLSAI1_Config+0x48>
 80180b2:	2b03      	cmp	r3, #3
 80180b4:	d81f      	bhi.n	80180f6 <RCCEx_PLLSAI1_Config+0x5a>
 80180b6:	2b01      	cmp	r3, #1
 80180b8:	d002      	beq.n	80180c0 <RCCEx_PLLSAI1_Config+0x24>
 80180ba:	2b02      	cmp	r3, #2
 80180bc:	d009      	beq.n	80180d2 <RCCEx_PLLSAI1_Config+0x36>
 80180be:	e01a      	b.n	80180f6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80180c0:	4b65      	ldr	r3, [pc, #404]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	f003 0302 	and.w	r3, r3, #2
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d117      	bne.n	80180fc <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80180cc:	2301      	movs	r3, #1
 80180ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80180d0:	e014      	b.n	80180fc <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80180d2:	4b61      	ldr	r3, [pc, #388]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d110      	bne.n	8018100 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80180de:	2301      	movs	r3, #1
 80180e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80180e2:	e00d      	b.n	8018100 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80180e4:	4b5c      	ldr	r3, [pc, #368]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d109      	bne.n	8018104 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80180f0:	2301      	movs	r3, #1
 80180f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80180f4:	e006      	b.n	8018104 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80180f6:	2301      	movs	r3, #1
 80180f8:	73fb      	strb	r3, [r7, #15]
      break;
 80180fa:	e004      	b.n	8018106 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80180fc:	bf00      	nop
 80180fe:	e002      	b.n	8018106 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8018100:	bf00      	nop
 8018102:	e000      	b.n	8018106 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8018104:	bf00      	nop
  }

  if (status == HAL_OK)
 8018106:	7bfb      	ldrb	r3, [r7, #15]
 8018108:	2b00      	cmp	r3, #0
 801810a:	f040 809f 	bne.w	801824c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 801810e:	4b52      	ldr	r3, [pc, #328]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	4a51      	ldr	r2, [pc, #324]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018114:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8018118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801811a:	f7fb fa3b 	bl	8013594 <HAL_GetTick>
 801811e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8018120:	e00f      	b.n	8018142 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018122:	f7fb fa37 	bl	8013594 <HAL_GetTick>
 8018126:	4602      	mov	r2, r0
 8018128:	68bb      	ldr	r3, [r7, #8]
 801812a:	1ad3      	subs	r3, r2, r3
 801812c:	2b02      	cmp	r3, #2
 801812e:	d908      	bls.n	8018142 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8018130:	4b49      	ldr	r3, [pc, #292]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018138:	2b00      	cmp	r3, #0
 801813a:	d009      	beq.n	8018150 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 801813c:	2303      	movs	r3, #3
 801813e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8018140:	e006      	b.n	8018150 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8018142:	4b45      	ldr	r3, [pc, #276]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801814a:	2b00      	cmp	r3, #0
 801814c:	d1e9      	bne.n	8018122 <RCCEx_PLLSAI1_Config+0x86>
 801814e:	e000      	b.n	8018152 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8018150:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8018152:	7bfb      	ldrb	r3, [r7, #15]
 8018154:	2b00      	cmp	r3, #0
 8018156:	d179      	bne.n	801824c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8018158:	683b      	ldr	r3, [r7, #0]
 801815a:	2b00      	cmp	r3, #0
 801815c:	d116      	bne.n	801818c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801815e:	4b3e      	ldr	r3, [pc, #248]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018160:	691a      	ldr	r2, [r3, #16]
 8018162:	4b3e      	ldr	r3, [pc, #248]	; (801825c <RCCEx_PLLSAI1_Config+0x1c0>)
 8018164:	4013      	ands	r3, r2
 8018166:	687a      	ldr	r2, [r7, #4]
 8018168:	6892      	ldr	r2, [r2, #8]
 801816a:	0211      	lsls	r1, r2, #8
 801816c:	687a      	ldr	r2, [r7, #4]
 801816e:	68d2      	ldr	r2, [r2, #12]
 8018170:	06d2      	lsls	r2, r2, #27
 8018172:	4311      	orrs	r1, r2
 8018174:	687a      	ldr	r2, [r7, #4]
 8018176:	6852      	ldr	r2, [r2, #4]
 8018178:	3a01      	subs	r2, #1
 801817a:	0112      	lsls	r2, r2, #4
 801817c:	4311      	orrs	r1, r2
 801817e:	687a      	ldr	r2, [r7, #4]
 8018180:	6812      	ldr	r2, [r2, #0]
 8018182:	430a      	orrs	r2, r1
 8018184:	4934      	ldr	r1, [pc, #208]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018186:	4313      	orrs	r3, r2
 8018188:	610b      	str	r3, [r1, #16]
 801818a:	e033      	b.n	80181f4 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 801818c:	683b      	ldr	r3, [r7, #0]
 801818e:	2b01      	cmp	r3, #1
 8018190:	d118      	bne.n	80181c4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8018192:	4b31      	ldr	r3, [pc, #196]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018194:	691a      	ldr	r2, [r3, #16]
 8018196:	4b32      	ldr	r3, [pc, #200]	; (8018260 <RCCEx_PLLSAI1_Config+0x1c4>)
 8018198:	4013      	ands	r3, r2
 801819a:	687a      	ldr	r2, [r7, #4]
 801819c:	6892      	ldr	r2, [r2, #8]
 801819e:	0211      	lsls	r1, r2, #8
 80181a0:	687a      	ldr	r2, [r7, #4]
 80181a2:	6912      	ldr	r2, [r2, #16]
 80181a4:	0852      	lsrs	r2, r2, #1
 80181a6:	3a01      	subs	r2, #1
 80181a8:	0552      	lsls	r2, r2, #21
 80181aa:	4311      	orrs	r1, r2
 80181ac:	687a      	ldr	r2, [r7, #4]
 80181ae:	6852      	ldr	r2, [r2, #4]
 80181b0:	3a01      	subs	r2, #1
 80181b2:	0112      	lsls	r2, r2, #4
 80181b4:	4311      	orrs	r1, r2
 80181b6:	687a      	ldr	r2, [r7, #4]
 80181b8:	6812      	ldr	r2, [r2, #0]
 80181ba:	430a      	orrs	r2, r1
 80181bc:	4926      	ldr	r1, [pc, #152]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 80181be:	4313      	orrs	r3, r2
 80181c0:	610b      	str	r3, [r1, #16]
 80181c2:	e017      	b.n	80181f4 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80181c4:	4b24      	ldr	r3, [pc, #144]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 80181c6:	691a      	ldr	r2, [r3, #16]
 80181c8:	4b26      	ldr	r3, [pc, #152]	; (8018264 <RCCEx_PLLSAI1_Config+0x1c8>)
 80181ca:	4013      	ands	r3, r2
 80181cc:	687a      	ldr	r2, [r7, #4]
 80181ce:	6892      	ldr	r2, [r2, #8]
 80181d0:	0211      	lsls	r1, r2, #8
 80181d2:	687a      	ldr	r2, [r7, #4]
 80181d4:	6952      	ldr	r2, [r2, #20]
 80181d6:	0852      	lsrs	r2, r2, #1
 80181d8:	3a01      	subs	r2, #1
 80181da:	0652      	lsls	r2, r2, #25
 80181dc:	4311      	orrs	r1, r2
 80181de:	687a      	ldr	r2, [r7, #4]
 80181e0:	6852      	ldr	r2, [r2, #4]
 80181e2:	3a01      	subs	r2, #1
 80181e4:	0112      	lsls	r2, r2, #4
 80181e6:	4311      	orrs	r1, r2
 80181e8:	687a      	ldr	r2, [r7, #4]
 80181ea:	6812      	ldr	r2, [r2, #0]
 80181ec:	430a      	orrs	r2, r1
 80181ee:	491a      	ldr	r1, [pc, #104]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 80181f0:	4313      	orrs	r3, r2
 80181f2:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80181f4:	4b18      	ldr	r3, [pc, #96]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	4a17      	ldr	r2, [pc, #92]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 80181fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80181fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018200:	f7fb f9c8 	bl	8013594 <HAL_GetTick>
 8018204:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8018206:	e00f      	b.n	8018228 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018208:	f7fb f9c4 	bl	8013594 <HAL_GetTick>
 801820c:	4602      	mov	r2, r0
 801820e:	68bb      	ldr	r3, [r7, #8]
 8018210:	1ad3      	subs	r3, r2, r3
 8018212:	2b02      	cmp	r3, #2
 8018214:	d908      	bls.n	8018228 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8018216:	4b10      	ldr	r3, [pc, #64]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801821e:	2b00      	cmp	r3, #0
 8018220:	d109      	bne.n	8018236 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8018222:	2303      	movs	r3, #3
 8018224:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8018226:	e006      	b.n	8018236 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8018228:	4b0b      	ldr	r3, [pc, #44]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018230:	2b00      	cmp	r3, #0
 8018232:	d0e9      	beq.n	8018208 <RCCEx_PLLSAI1_Config+0x16c>
 8018234:	e000      	b.n	8018238 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8018236:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8018238:	7bfb      	ldrb	r3, [r7, #15]
 801823a:	2b00      	cmp	r3, #0
 801823c:	d106      	bne.n	801824c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 801823e:	4b06      	ldr	r3, [pc, #24]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018240:	691a      	ldr	r2, [r3, #16]
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	699b      	ldr	r3, [r3, #24]
 8018246:	4904      	ldr	r1, [pc, #16]	; (8018258 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018248:	4313      	orrs	r3, r2
 801824a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 801824c:	7bfb      	ldrb	r3, [r7, #15]
}
 801824e:	4618      	mov	r0, r3
 8018250:	3710      	adds	r7, #16
 8018252:	46bd      	mov	sp, r7
 8018254:	bd80      	pop	{r7, pc}
 8018256:	bf00      	nop
 8018258:	40021000 	.word	0x40021000
 801825c:	07ff800c 	.word	0x07ff800c
 8018260:	ff9f800c 	.word	0xff9f800c
 8018264:	f9ff800c 	.word	0xf9ff800c

08018268 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8018268:	b580      	push	{r7, lr}
 801826a:	b084      	sub	sp, #16
 801826c:	af00      	add	r7, sp, #0
 801826e:	6078      	str	r0, [r7, #4]
 8018270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018272:	2300      	movs	r3, #0
 8018274:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	2b03      	cmp	r3, #3
 801827c:	d018      	beq.n	80182b0 <RCCEx_PLLSAI2_Config+0x48>
 801827e:	2b03      	cmp	r3, #3
 8018280:	d81f      	bhi.n	80182c2 <RCCEx_PLLSAI2_Config+0x5a>
 8018282:	2b01      	cmp	r3, #1
 8018284:	d002      	beq.n	801828c <RCCEx_PLLSAI2_Config+0x24>
 8018286:	2b02      	cmp	r3, #2
 8018288:	d009      	beq.n	801829e <RCCEx_PLLSAI2_Config+0x36>
 801828a:	e01a      	b.n	80182c2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801828c:	4b4a      	ldr	r3, [pc, #296]	; (80183b8 <RCCEx_PLLSAI2_Config+0x150>)
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	f003 0302 	and.w	r3, r3, #2
 8018294:	2b00      	cmp	r3, #0
 8018296:	d117      	bne.n	80182c8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8018298:	2301      	movs	r3, #1
 801829a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801829c:	e014      	b.n	80182c8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801829e:	4b46      	ldr	r3, [pc, #280]	; (80183b8 <RCCEx_PLLSAI2_Config+0x150>)
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d110      	bne.n	80182cc <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80182aa:	2301      	movs	r3, #1
 80182ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80182ae:	e00d      	b.n	80182cc <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80182b0:	4b41      	ldr	r3, [pc, #260]	; (80183b8 <RCCEx_PLLSAI2_Config+0x150>)
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d109      	bne.n	80182d0 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80182bc:	2301      	movs	r3, #1
 80182be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80182c0:	e006      	b.n	80182d0 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80182c2:	2301      	movs	r3, #1
 80182c4:	73fb      	strb	r3, [r7, #15]
      break;
 80182c6:	e004      	b.n	80182d2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80182c8:	bf00      	nop
 80182ca:	e002      	b.n	80182d2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80182cc:	bf00      	nop
 80182ce:	e000      	b.n	80182d2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80182d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80182d2:	7bfb      	ldrb	r3, [r7, #15]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d169      	bne.n	80183ac <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80182d8:	4b37      	ldr	r3, [pc, #220]	; (80183b8 <RCCEx_PLLSAI2_Config+0x150>)
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	4a36      	ldr	r2, [pc, #216]	; (80183b8 <RCCEx_PLLSAI2_Config+0x150>)
 80182de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80182e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80182e4:	f7fb f956 	bl	8013594 <HAL_GetTick>
 80182e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80182ea:	e00f      	b.n	801830c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80182ec:	f7fb f952 	bl	8013594 <HAL_GetTick>
 80182f0:	4602      	mov	r2, r0
 80182f2:	68bb      	ldr	r3, [r7, #8]
 80182f4:	1ad3      	subs	r3, r2, r3
 80182f6:	2b02      	cmp	r3, #2
 80182f8:	d908      	bls.n	801830c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80182fa:	4b2f      	ldr	r3, [pc, #188]	; (80183b8 <RCCEx_PLLSAI2_Config+0x150>)
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018302:	2b00      	cmp	r3, #0
 8018304:	d009      	beq.n	801831a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8018306:	2303      	movs	r3, #3
 8018308:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801830a:	e006      	b.n	801831a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801830c:	4b2a      	ldr	r3, [pc, #168]	; (80183b8 <RCCEx_PLLSAI2_Config+0x150>)
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018314:	2b00      	cmp	r3, #0
 8018316:	d1e9      	bne.n	80182ec <RCCEx_PLLSAI2_Config+0x84>
 8018318:	e000      	b.n	801831c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 801831a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 801831c:	7bfb      	ldrb	r3, [r7, #15]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d144      	bne.n	80183ac <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8018322:	683b      	ldr	r3, [r7, #0]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d115      	bne.n	8018354 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8018328:	4b23      	ldr	r3, [pc, #140]	; (80183b8 <RCCEx_PLLSAI2_Config+0x150>)
 801832a:	695a      	ldr	r2, [r3, #20]
 801832c:	4b23      	ldr	r3, [pc, #140]	; (80183bc <RCCEx_PLLSAI2_Config+0x154>)
 801832e:	4013      	ands	r3, r2
 8018330:	687a      	ldr	r2, [r7, #4]
 8018332:	6892      	ldr	r2, [r2, #8]
 8018334:	0211      	lsls	r1, r2, #8
 8018336:	687a      	ldr	r2, [r7, #4]
 8018338:	68d2      	ldr	r2, [r2, #12]
 801833a:	06d2      	lsls	r2, r2, #27
 801833c:	4311      	orrs	r1, r2
 801833e:	687a      	ldr	r2, [r7, #4]
 8018340:	6852      	ldr	r2, [r2, #4]
 8018342:	3a01      	subs	r2, #1
 8018344:	0112      	lsls	r2, r2, #4
 8018346:	4311      	orrs	r1, r2
 8018348:	687a      	ldr	r2, [r7, #4]
 801834a:	6812      	ldr	r2, [r2, #0]
 801834c:	430a      	orrs	r2, r1
 801834e:	491a      	ldr	r1, [pc, #104]	; (80183b8 <RCCEx_PLLSAI2_Config+0x150>)
 8018350:	4313      	orrs	r3, r2
 8018352:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8018354:	4b18      	ldr	r3, [pc, #96]	; (80183b8 <RCCEx_PLLSAI2_Config+0x150>)
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	4a17      	ldr	r2, [pc, #92]	; (80183b8 <RCCEx_PLLSAI2_Config+0x150>)
 801835a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801835e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018360:	f7fb f918 	bl	8013594 <HAL_GetTick>
 8018364:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8018366:	e00f      	b.n	8018388 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8018368:	f7fb f914 	bl	8013594 <HAL_GetTick>
 801836c:	4602      	mov	r2, r0
 801836e:	68bb      	ldr	r3, [r7, #8]
 8018370:	1ad3      	subs	r3, r2, r3
 8018372:	2b02      	cmp	r3, #2
 8018374:	d908      	bls.n	8018388 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8018376:	4b10      	ldr	r3, [pc, #64]	; (80183b8 <RCCEx_PLLSAI2_Config+0x150>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801837e:	2b00      	cmp	r3, #0
 8018380:	d109      	bne.n	8018396 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8018382:	2303      	movs	r3, #3
 8018384:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8018386:	e006      	b.n	8018396 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8018388:	4b0b      	ldr	r3, [pc, #44]	; (80183b8 <RCCEx_PLLSAI2_Config+0x150>)
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018390:	2b00      	cmp	r3, #0
 8018392:	d0e9      	beq.n	8018368 <RCCEx_PLLSAI2_Config+0x100>
 8018394:	e000      	b.n	8018398 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8018396:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8018398:	7bfb      	ldrb	r3, [r7, #15]
 801839a:	2b00      	cmp	r3, #0
 801839c:	d106      	bne.n	80183ac <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 801839e:	4b06      	ldr	r3, [pc, #24]	; (80183b8 <RCCEx_PLLSAI2_Config+0x150>)
 80183a0:	695a      	ldr	r2, [r3, #20]
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	691b      	ldr	r3, [r3, #16]
 80183a6:	4904      	ldr	r1, [pc, #16]	; (80183b8 <RCCEx_PLLSAI2_Config+0x150>)
 80183a8:	4313      	orrs	r3, r2
 80183aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80183ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80183ae:	4618      	mov	r0, r3
 80183b0:	3710      	adds	r7, #16
 80183b2:	46bd      	mov	sp, r7
 80183b4:	bd80      	pop	{r7, pc}
 80183b6:	bf00      	nop
 80183b8:	40021000 	.word	0x40021000
 80183bc:	07ff800c 	.word	0x07ff800c

080183c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80183c0:	b580      	push	{r7, lr}
 80183c2:	b084      	sub	sp, #16
 80183c4:	af00      	add	r7, sp, #0
 80183c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80183c8:	2301      	movs	r3, #1
 80183ca:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d066      	beq.n	80184a0 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80183d8:	b2db      	uxtb	r3, r3
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d106      	bne.n	80183ec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	2200      	movs	r2, #0
 80183e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80183e6:	6878      	ldr	r0, [r7, #4]
 80183e8:	f7fa fb42 	bl	8012a70 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	2202      	movs	r2, #2
 80183f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	68db      	ldr	r3, [r3, #12]
 80183fa:	f003 0310 	and.w	r3, r3, #16
 80183fe:	2b10      	cmp	r3, #16
 8018400:	d045      	beq.n	801848e <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018402:	4b2a      	ldr	r3, [pc, #168]	; (80184ac <HAL_RTC_Init+0xec>)
 8018404:	22ca      	movs	r2, #202	; 0xca
 8018406:	625a      	str	r2, [r3, #36]	; 0x24
 8018408:	4b28      	ldr	r3, [pc, #160]	; (80184ac <HAL_RTC_Init+0xec>)
 801840a:	2253      	movs	r2, #83	; 0x53
 801840c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 801840e:	6878      	ldr	r0, [r7, #4]
 8018410:	f000 f872 	bl	80184f8 <RTC_EnterInitMode>
 8018414:	4603      	mov	r3, r0
 8018416:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8018418:	7bfb      	ldrb	r3, [r7, #15]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d121      	bne.n	8018462 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 801841e:	4b23      	ldr	r3, [pc, #140]	; (80184ac <HAL_RTC_Init+0xec>)
 8018420:	699b      	ldr	r3, [r3, #24]
 8018422:	4a22      	ldr	r2, [pc, #136]	; (80184ac <HAL_RTC_Init+0xec>)
 8018424:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8018428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801842c:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 801842e:	4b1f      	ldr	r3, [pc, #124]	; (80184ac <HAL_RTC_Init+0xec>)
 8018430:	699a      	ldr	r2, [r3, #24]
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	6859      	ldr	r1, [r3, #4]
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	691b      	ldr	r3, [r3, #16]
 801843a:	4319      	orrs	r1, r3
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	699b      	ldr	r3, [r3, #24]
 8018440:	430b      	orrs	r3, r1
 8018442:	491a      	ldr	r1, [pc, #104]	; (80184ac <HAL_RTC_Init+0xec>)
 8018444:	4313      	orrs	r3, r2
 8018446:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	68da      	ldr	r2, [r3, #12]
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	689b      	ldr	r3, [r3, #8]
 8018450:	041b      	lsls	r3, r3, #16
 8018452:	4916      	ldr	r1, [pc, #88]	; (80184ac <HAL_RTC_Init+0xec>)
 8018454:	4313      	orrs	r3, r2
 8018456:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8018458:	6878      	ldr	r0, [r7, #4]
 801845a:	f000 f881 	bl	8018560 <RTC_ExitInitMode>
 801845e:	4603      	mov	r3, r0
 8018460:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8018462:	7bfb      	ldrb	r3, [r7, #15]
 8018464:	2b00      	cmp	r3, #0
 8018466:	d10e      	bne.n	8018486 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8018468:	4b10      	ldr	r3, [pc, #64]	; (80184ac <HAL_RTC_Init+0xec>)
 801846a:	699b      	ldr	r3, [r3, #24]
 801846c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	6a19      	ldr	r1, [r3, #32]
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	69db      	ldr	r3, [r3, #28]
 8018478:	4319      	orrs	r1, r3
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	695b      	ldr	r3, [r3, #20]
 801847e:	430b      	orrs	r3, r1
 8018480:	490a      	ldr	r1, [pc, #40]	; (80184ac <HAL_RTC_Init+0xec>)
 8018482:	4313      	orrs	r3, r2
 8018484:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018486:	4b09      	ldr	r3, [pc, #36]	; (80184ac <HAL_RTC_Init+0xec>)
 8018488:	22ff      	movs	r2, #255	; 0xff
 801848a:	625a      	str	r2, [r3, #36]	; 0x24
 801848c:	e001      	b.n	8018492 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 801848e:	2300      	movs	r3, #0
 8018490:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8018492:	7bfb      	ldrb	r3, [r7, #15]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d103      	bne.n	80184a0 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	2201      	movs	r2, #1
 801849c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80184a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80184a2:	4618      	mov	r0, r3
 80184a4:	3710      	adds	r7, #16
 80184a6:	46bd      	mov	sp, r7
 80184a8:	bd80      	pop	{r7, pc}
 80184aa:	bf00      	nop
 80184ac:	40002800 	.word	0x40002800

080184b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b084      	sub	sp, #16
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 80184b8:	4b0d      	ldr	r3, [pc, #52]	; (80184f0 <HAL_RTC_WaitForSynchro+0x40>)
 80184ba:	4a0e      	ldr	r2, [pc, #56]	; (80184f4 <HAL_RTC_WaitForSynchro+0x44>)
 80184bc:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80184be:	f7fb f869 	bl	8013594 <HAL_GetTick>
 80184c2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80184c4:	e009      	b.n	80184da <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80184c6:	f7fb f865 	bl	8013594 <HAL_GetTick>
 80184ca:	4602      	mov	r2, r0
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	1ad3      	subs	r3, r2, r3
 80184d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80184d4:	d901      	bls.n	80184da <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 80184d6:	2303      	movs	r3, #3
 80184d8:	e006      	b.n	80184e8 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80184da:	4b05      	ldr	r3, [pc, #20]	; (80184f0 <HAL_RTC_WaitForSynchro+0x40>)
 80184dc:	68db      	ldr	r3, [r3, #12]
 80184de:	f003 0320 	and.w	r3, r3, #32
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d0ef      	beq.n	80184c6 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 80184e6:	2300      	movs	r3, #0
}
 80184e8:	4618      	mov	r0, r3
 80184ea:	3710      	adds	r7, #16
 80184ec:	46bd      	mov	sp, r7
 80184ee:	bd80      	pop	{r7, pc}
 80184f0:	40002800 	.word	0x40002800
 80184f4:	0001005c 	.word	0x0001005c

080184f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80184f8:	b580      	push	{r7, lr}
 80184fa:	b084      	sub	sp, #16
 80184fc:	af00      	add	r7, sp, #0
 80184fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018500:	2300      	movs	r3, #0
 8018502:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8018504:	4b15      	ldr	r3, [pc, #84]	; (801855c <RTC_EnterInitMode+0x64>)
 8018506:	68db      	ldr	r3, [r3, #12]
 8018508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801850c:	2b00      	cmp	r3, #0
 801850e:	d120      	bne.n	8018552 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8018510:	4b12      	ldr	r3, [pc, #72]	; (801855c <RTC_EnterInitMode+0x64>)
 8018512:	68db      	ldr	r3, [r3, #12]
 8018514:	4a11      	ldr	r2, [pc, #68]	; (801855c <RTC_EnterInitMode+0x64>)
 8018516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801851a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 801851c:	f7fb f83a 	bl	8013594 <HAL_GetTick>
 8018520:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8018522:	e00d      	b.n	8018540 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8018524:	f7fb f836 	bl	8013594 <HAL_GetTick>
 8018528:	4602      	mov	r2, r0
 801852a:	68bb      	ldr	r3, [r7, #8]
 801852c:	1ad3      	subs	r3, r2, r3
 801852e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018532:	d905      	bls.n	8018540 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8018534:	2303      	movs	r3, #3
 8018536:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	2203      	movs	r2, #3
 801853c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8018540:	4b06      	ldr	r3, [pc, #24]	; (801855c <RTC_EnterInitMode+0x64>)
 8018542:	68db      	ldr	r3, [r3, #12]
 8018544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018548:	2b00      	cmp	r3, #0
 801854a:	d102      	bne.n	8018552 <RTC_EnterInitMode+0x5a>
 801854c:	7bfb      	ldrb	r3, [r7, #15]
 801854e:	2b03      	cmp	r3, #3
 8018550:	d1e8      	bne.n	8018524 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8018552:	7bfb      	ldrb	r3, [r7, #15]
}
 8018554:	4618      	mov	r0, r3
 8018556:	3710      	adds	r7, #16
 8018558:	46bd      	mov	sp, r7
 801855a:	bd80      	pop	{r7, pc}
 801855c:	40002800 	.word	0x40002800

08018560 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8018560:	b580      	push	{r7, lr}
 8018562:	b084      	sub	sp, #16
 8018564:	af00      	add	r7, sp, #0
 8018566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018568:	2300      	movs	r3, #0
 801856a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 801856c:	4b1a      	ldr	r3, [pc, #104]	; (80185d8 <RTC_ExitInitMode+0x78>)
 801856e:	68db      	ldr	r3, [r3, #12]
 8018570:	4a19      	ldr	r2, [pc, #100]	; (80185d8 <RTC_ExitInitMode+0x78>)
 8018572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018576:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8018578:	4b17      	ldr	r3, [pc, #92]	; (80185d8 <RTC_ExitInitMode+0x78>)
 801857a:	699b      	ldr	r3, [r3, #24]
 801857c:	f003 0320 	and.w	r3, r3, #32
 8018580:	2b00      	cmp	r3, #0
 8018582:	d10c      	bne.n	801859e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8018584:	6878      	ldr	r0, [r7, #4]
 8018586:	f7ff ff93 	bl	80184b0 <HAL_RTC_WaitForSynchro>
 801858a:	4603      	mov	r3, r0
 801858c:	2b00      	cmp	r3, #0
 801858e:	d01e      	beq.n	80185ce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	2203      	movs	r2, #3
 8018594:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8018598:	2303      	movs	r3, #3
 801859a:	73fb      	strb	r3, [r7, #15]
 801859c:	e017      	b.n	80185ce <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801859e:	4b0e      	ldr	r3, [pc, #56]	; (80185d8 <RTC_ExitInitMode+0x78>)
 80185a0:	699b      	ldr	r3, [r3, #24]
 80185a2:	4a0d      	ldr	r2, [pc, #52]	; (80185d8 <RTC_ExitInitMode+0x78>)
 80185a4:	f023 0320 	bic.w	r3, r3, #32
 80185a8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80185aa:	6878      	ldr	r0, [r7, #4]
 80185ac:	f7ff ff80 	bl	80184b0 <HAL_RTC_WaitForSynchro>
 80185b0:	4603      	mov	r3, r0
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d005      	beq.n	80185c2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	2203      	movs	r2, #3
 80185ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80185be:	2303      	movs	r3, #3
 80185c0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80185c2:	4b05      	ldr	r3, [pc, #20]	; (80185d8 <RTC_ExitInitMode+0x78>)
 80185c4:	699b      	ldr	r3, [r3, #24]
 80185c6:	4a04      	ldr	r2, [pc, #16]	; (80185d8 <RTC_ExitInitMode+0x78>)
 80185c8:	f043 0320 	orr.w	r3, r3, #32
 80185cc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80185ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80185d0:	4618      	mov	r0, r3
 80185d2:	3710      	adds	r7, #16
 80185d4:	46bd      	mov	sp, r7
 80185d6:	bd80      	pop	{r7, pc}
 80185d8:	40002800 	.word	0x40002800

080185dc <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80185dc:	b480      	push	{r7}
 80185de:	b083      	sub	sp, #12
 80185e0:	af00      	add	r7, sp, #0
 80185e2:	6078      	str	r0, [r7, #4]
 80185e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80185e6:	683b      	ldr	r3, [r7, #0]
 80185e8:	681a      	ldr	r2, [r3, #0]
 80185ea:	683b      	ldr	r3, [r7, #0]
 80185ec:	685b      	ldr	r3, [r3, #4]
 80185ee:	490f      	ldr	r1, [pc, #60]	; (801862c <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80185f0:	4313      	orrs	r3, r2
 80185f2:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80185f4:	683b      	ldr	r3, [r7, #0]
 80185f6:	689a      	ldr	r2, [r3, #8]
 80185f8:	683b      	ldr	r3, [r7, #0]
 80185fa:	68db      	ldr	r3, [r3, #12]
 80185fc:	490c      	ldr	r1, [pc, #48]	; (8018630 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80185fe:	4313      	orrs	r3, r2
 8018600:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8018602:	4b0b      	ldr	r3, [pc, #44]	; (8018630 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8018604:	6a1b      	ldr	r3, [r3, #32]
 8018606:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 801860a:	683b      	ldr	r3, [r7, #0]
 801860c:	6919      	ldr	r1, [r3, #16]
 801860e:	683b      	ldr	r3, [r7, #0]
 8018610:	695b      	ldr	r3, [r3, #20]
 8018612:	041b      	lsls	r3, r3, #16
 8018614:	430b      	orrs	r3, r1
 8018616:	4906      	ldr	r1, [pc, #24]	; (8018630 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8018618:	4313      	orrs	r3, r2
 801861a:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 801861c:	2300      	movs	r3, #0
}
 801861e:	4618      	mov	r0, r3
 8018620:	370c      	adds	r7, #12
 8018622:	46bd      	mov	sp, r7
 8018624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018628:	4770      	bx	lr
 801862a:	bf00      	nop
 801862c:	40002800 	.word	0x40002800
 8018630:	40003400 	.word	0x40003400

08018634 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b084      	sub	sp, #16
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d101      	bne.n	8018646 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8018642:	2301      	movs	r3, #1
 8018644:	e095      	b.n	8018772 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801864a:	2b00      	cmp	r3, #0
 801864c:	d108      	bne.n	8018660 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	685b      	ldr	r3, [r3, #4]
 8018652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8018656:	d009      	beq.n	801866c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	2200      	movs	r2, #0
 801865c:	61da      	str	r2, [r3, #28]
 801865e:	e005      	b.n	801866c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	2200      	movs	r2, #0
 8018664:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	2200      	movs	r2, #0
 801866a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	2200      	movs	r2, #0
 8018670:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8018678:	b2db      	uxtb	r3, r3
 801867a:	2b00      	cmp	r3, #0
 801867c:	d106      	bne.n	801868c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	2200      	movs	r2, #0
 8018682:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8018686:	6878      	ldr	r0, [r7, #4]
 8018688:	f7fa fa30 	bl	8012aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	2202      	movs	r2, #2
 8018690:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	681a      	ldr	r2, [r3, #0]
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80186a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	68db      	ldr	r3, [r3, #12]
 80186a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80186ac:	d902      	bls.n	80186b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80186ae:	2300      	movs	r3, #0
 80186b0:	60fb      	str	r3, [r7, #12]
 80186b2:	e002      	b.n	80186ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80186b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80186b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	68db      	ldr	r3, [r3, #12]
 80186be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80186c2:	d007      	beq.n	80186d4 <HAL_SPI_Init+0xa0>
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	68db      	ldr	r3, [r3, #12]
 80186c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80186cc:	d002      	beq.n	80186d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	2200      	movs	r2, #0
 80186d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	685b      	ldr	r3, [r3, #4]
 80186d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	689b      	ldr	r3, [r3, #8]
 80186e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80186e4:	431a      	orrs	r2, r3
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	691b      	ldr	r3, [r3, #16]
 80186ea:	f003 0302 	and.w	r3, r3, #2
 80186ee:	431a      	orrs	r2, r3
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	695b      	ldr	r3, [r3, #20]
 80186f4:	f003 0301 	and.w	r3, r3, #1
 80186f8:	431a      	orrs	r2, r3
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	699b      	ldr	r3, [r3, #24]
 80186fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018702:	431a      	orrs	r2, r3
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	69db      	ldr	r3, [r3, #28]
 8018708:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801870c:	431a      	orrs	r2, r3
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	6a1b      	ldr	r3, [r3, #32]
 8018712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018716:	ea42 0103 	orr.w	r1, r2, r3
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801871e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	430a      	orrs	r2, r1
 8018728:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	699b      	ldr	r3, [r3, #24]
 801872e:	0c1b      	lsrs	r3, r3, #16
 8018730:	f003 0204 	and.w	r2, r3, #4
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018738:	f003 0310 	and.w	r3, r3, #16
 801873c:	431a      	orrs	r2, r3
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018742:	f003 0308 	and.w	r3, r3, #8
 8018746:	431a      	orrs	r2, r3
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	68db      	ldr	r3, [r3, #12]
 801874c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8018750:	ea42 0103 	orr.w	r1, r2, r3
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	430a      	orrs	r2, r1
 8018760:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	2200      	movs	r2, #0
 8018766:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	2201      	movs	r2, #1
 801876c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8018770:	2300      	movs	r3, #0
}
 8018772:	4618      	mov	r0, r3
 8018774:	3710      	adds	r7, #16
 8018776:	46bd      	mov	sp, r7
 8018778:	bd80      	pop	{r7, pc}

0801877a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801877a:	b580      	push	{r7, lr}
 801877c:	b088      	sub	sp, #32
 801877e:	af00      	add	r7, sp, #0
 8018780:	60f8      	str	r0, [r7, #12]
 8018782:	60b9      	str	r1, [r7, #8]
 8018784:	603b      	str	r3, [r7, #0]
 8018786:	4613      	mov	r3, r2
 8018788:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801878a:	2300      	movs	r3, #0
 801878c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8018794:	2b01      	cmp	r3, #1
 8018796:	d101      	bne.n	801879c <HAL_SPI_Transmit+0x22>
 8018798:	2302      	movs	r3, #2
 801879a:	e158      	b.n	8018a4e <HAL_SPI_Transmit+0x2d4>
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	2201      	movs	r2, #1
 80187a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80187a4:	f7fa fef6 	bl	8013594 <HAL_GetTick>
 80187a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80187aa:	88fb      	ldrh	r3, [r7, #6]
 80187ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80187b4:	b2db      	uxtb	r3, r3
 80187b6:	2b01      	cmp	r3, #1
 80187b8:	d002      	beq.n	80187c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80187ba:	2302      	movs	r3, #2
 80187bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80187be:	e13d      	b.n	8018a3c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80187c0:	68bb      	ldr	r3, [r7, #8]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d002      	beq.n	80187cc <HAL_SPI_Transmit+0x52>
 80187c6:	88fb      	ldrh	r3, [r7, #6]
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d102      	bne.n	80187d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80187cc:	2301      	movs	r3, #1
 80187ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80187d0:	e134      	b.n	8018a3c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	2203      	movs	r2, #3
 80187d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	2200      	movs	r2, #0
 80187de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	68ba      	ldr	r2, [r7, #8]
 80187e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80187e6:	68fb      	ldr	r3, [r7, #12]
 80187e8:	88fa      	ldrh	r2, [r7, #6]
 80187ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	88fa      	ldrh	r2, [r7, #6]
 80187f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80187f2:	68fb      	ldr	r3, [r7, #12]
 80187f4:	2200      	movs	r2, #0
 80187f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	2200      	movs	r2, #0
 80187fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	2200      	movs	r2, #0
 8018804:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	2200      	movs	r2, #0
 801880c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	2200      	movs	r2, #0
 8018812:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	689b      	ldr	r3, [r3, #8]
 8018818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801881c:	d10f      	bne.n	801883e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	681a      	ldr	r2, [r3, #0]
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801882c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	681a      	ldr	r2, [r3, #0]
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801883c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018848:	2b40      	cmp	r3, #64	; 0x40
 801884a:	d007      	beq.n	801885c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	681a      	ldr	r2, [r3, #0]
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801885a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	68db      	ldr	r3, [r3, #12]
 8018860:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8018864:	d94b      	bls.n	80188fe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	685b      	ldr	r3, [r3, #4]
 801886a:	2b00      	cmp	r3, #0
 801886c:	d002      	beq.n	8018874 <HAL_SPI_Transmit+0xfa>
 801886e:	8afb      	ldrh	r3, [r7, #22]
 8018870:	2b01      	cmp	r3, #1
 8018872:	d13e      	bne.n	80188f2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018878:	881a      	ldrh	r2, [r3, #0]
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8018880:	68fb      	ldr	r3, [r7, #12]
 8018882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018884:	1c9a      	adds	r2, r3, #2
 8018886:	68fb      	ldr	r3, [r7, #12]
 8018888:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801888e:	b29b      	uxth	r3, r3
 8018890:	3b01      	subs	r3, #1
 8018892:	b29a      	uxth	r2, r3
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8018898:	e02b      	b.n	80188f2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	689b      	ldr	r3, [r3, #8]
 80188a0:	f003 0302 	and.w	r3, r3, #2
 80188a4:	2b02      	cmp	r3, #2
 80188a6:	d112      	bne.n	80188ce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80188ac:	881a      	ldrh	r2, [r3, #0]
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80188b4:	68fb      	ldr	r3, [r7, #12]
 80188b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80188b8:	1c9a      	adds	r2, r3, #2
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80188c2:	b29b      	uxth	r3, r3
 80188c4:	3b01      	subs	r3, #1
 80188c6:	b29a      	uxth	r2, r3
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80188cc:	e011      	b.n	80188f2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80188ce:	f7fa fe61 	bl	8013594 <HAL_GetTick>
 80188d2:	4602      	mov	r2, r0
 80188d4:	69bb      	ldr	r3, [r7, #24]
 80188d6:	1ad3      	subs	r3, r2, r3
 80188d8:	683a      	ldr	r2, [r7, #0]
 80188da:	429a      	cmp	r2, r3
 80188dc:	d803      	bhi.n	80188e6 <HAL_SPI_Transmit+0x16c>
 80188de:	683b      	ldr	r3, [r7, #0]
 80188e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188e4:	d102      	bne.n	80188ec <HAL_SPI_Transmit+0x172>
 80188e6:	683b      	ldr	r3, [r7, #0]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d102      	bne.n	80188f2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80188ec:	2303      	movs	r3, #3
 80188ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80188f0:	e0a4      	b.n	8018a3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80188f6:	b29b      	uxth	r3, r3
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d1ce      	bne.n	801889a <HAL_SPI_Transmit+0x120>
 80188fc:	e07c      	b.n	80189f8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	685b      	ldr	r3, [r3, #4]
 8018902:	2b00      	cmp	r3, #0
 8018904:	d002      	beq.n	801890c <HAL_SPI_Transmit+0x192>
 8018906:	8afb      	ldrh	r3, [r7, #22]
 8018908:	2b01      	cmp	r3, #1
 801890a:	d170      	bne.n	80189ee <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018910:	b29b      	uxth	r3, r3
 8018912:	2b01      	cmp	r3, #1
 8018914:	d912      	bls.n	801893c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801891a:	881a      	ldrh	r2, [r3, #0]
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018926:	1c9a      	adds	r2, r3, #2
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018930:	b29b      	uxth	r3, r3
 8018932:	3b02      	subs	r3, #2
 8018934:	b29a      	uxth	r2, r3
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	87da      	strh	r2, [r3, #62]	; 0x3e
 801893a:	e058      	b.n	80189ee <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	330c      	adds	r3, #12
 8018946:	7812      	ldrb	r2, [r2, #0]
 8018948:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801894e:	1c5a      	adds	r2, r3, #1
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018958:	b29b      	uxth	r3, r3
 801895a:	3b01      	subs	r3, #1
 801895c:	b29a      	uxth	r2, r3
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8018962:	e044      	b.n	80189ee <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8018964:	68fb      	ldr	r3, [r7, #12]
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	689b      	ldr	r3, [r3, #8]
 801896a:	f003 0302 	and.w	r3, r3, #2
 801896e:	2b02      	cmp	r3, #2
 8018970:	d12b      	bne.n	80189ca <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018976:	b29b      	uxth	r3, r3
 8018978:	2b01      	cmp	r3, #1
 801897a:	d912      	bls.n	80189a2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018980:	881a      	ldrh	r2, [r3, #0]
 8018982:	68fb      	ldr	r3, [r7, #12]
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801898c:	1c9a      	adds	r2, r3, #2
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8018992:	68fb      	ldr	r3, [r7, #12]
 8018994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018996:	b29b      	uxth	r3, r3
 8018998:	3b02      	subs	r3, #2
 801899a:	b29a      	uxth	r2, r3
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80189a0:	e025      	b.n	80189ee <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	330c      	adds	r3, #12
 80189ac:	7812      	ldrb	r2, [r2, #0]
 80189ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189b4:	1c5a      	adds	r2, r3, #1
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80189be:	b29b      	uxth	r3, r3
 80189c0:	3b01      	subs	r3, #1
 80189c2:	b29a      	uxth	r2, r3
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80189c8:	e011      	b.n	80189ee <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80189ca:	f7fa fde3 	bl	8013594 <HAL_GetTick>
 80189ce:	4602      	mov	r2, r0
 80189d0:	69bb      	ldr	r3, [r7, #24]
 80189d2:	1ad3      	subs	r3, r2, r3
 80189d4:	683a      	ldr	r2, [r7, #0]
 80189d6:	429a      	cmp	r2, r3
 80189d8:	d803      	bhi.n	80189e2 <HAL_SPI_Transmit+0x268>
 80189da:	683b      	ldr	r3, [r7, #0]
 80189dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80189e0:	d102      	bne.n	80189e8 <HAL_SPI_Transmit+0x26e>
 80189e2:	683b      	ldr	r3, [r7, #0]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d102      	bne.n	80189ee <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80189e8:	2303      	movs	r3, #3
 80189ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80189ec:	e026      	b.n	8018a3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80189f2:	b29b      	uxth	r3, r3
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d1b5      	bne.n	8018964 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80189f8:	69ba      	ldr	r2, [r7, #24]
 80189fa:	6839      	ldr	r1, [r7, #0]
 80189fc:	68f8      	ldr	r0, [r7, #12]
 80189fe:	f000 fce3 	bl	80193c8 <SPI_EndRxTxTransaction>
 8018a02:	4603      	mov	r3, r0
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d002      	beq.n	8018a0e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	2220      	movs	r2, #32
 8018a0c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8018a0e:	68fb      	ldr	r3, [r7, #12]
 8018a10:	689b      	ldr	r3, [r3, #8]
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d10a      	bne.n	8018a2c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8018a16:	2300      	movs	r3, #0
 8018a18:	613b      	str	r3, [r7, #16]
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	68db      	ldr	r3, [r3, #12]
 8018a20:	613b      	str	r3, [r7, #16]
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	689b      	ldr	r3, [r3, #8]
 8018a28:	613b      	str	r3, [r7, #16]
 8018a2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d002      	beq.n	8018a3a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8018a34:	2301      	movs	r3, #1
 8018a36:	77fb      	strb	r3, [r7, #31]
 8018a38:	e000      	b.n	8018a3c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8018a3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	2201      	movs	r2, #1
 8018a40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	2200      	movs	r2, #0
 8018a48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8018a4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8018a4e:	4618      	mov	r0, r3
 8018a50:	3720      	adds	r7, #32
 8018a52:	46bd      	mov	sp, r7
 8018a54:	bd80      	pop	{r7, pc}

08018a56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018a56:	b580      	push	{r7, lr}
 8018a58:	b088      	sub	sp, #32
 8018a5a:	af02      	add	r7, sp, #8
 8018a5c:	60f8      	str	r0, [r7, #12]
 8018a5e:	60b9      	str	r1, [r7, #8]
 8018a60:	603b      	str	r3, [r7, #0]
 8018a62:	4613      	mov	r3, r2
 8018a64:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8018a66:	2300      	movs	r3, #0
 8018a68:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	685b      	ldr	r3, [r3, #4]
 8018a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8018a72:	d112      	bne.n	8018a9a <HAL_SPI_Receive+0x44>
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	689b      	ldr	r3, [r3, #8]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d10e      	bne.n	8018a9a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	2204      	movs	r2, #4
 8018a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8018a84:	88fa      	ldrh	r2, [r7, #6]
 8018a86:	683b      	ldr	r3, [r7, #0]
 8018a88:	9300      	str	r3, [sp, #0]
 8018a8a:	4613      	mov	r3, r2
 8018a8c:	68ba      	ldr	r2, [r7, #8]
 8018a8e:	68b9      	ldr	r1, [r7, #8]
 8018a90:	68f8      	ldr	r0, [r7, #12]
 8018a92:	f000 f910 	bl	8018cb6 <HAL_SPI_TransmitReceive>
 8018a96:	4603      	mov	r3, r0
 8018a98:	e109      	b.n	8018cae <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8018aa0:	2b01      	cmp	r3, #1
 8018aa2:	d101      	bne.n	8018aa8 <HAL_SPI_Receive+0x52>
 8018aa4:	2302      	movs	r3, #2
 8018aa6:	e102      	b.n	8018cae <HAL_SPI_Receive+0x258>
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	2201      	movs	r2, #1
 8018aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8018ab0:	f7fa fd70 	bl	8013594 <HAL_GetTick>
 8018ab4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8018abc:	b2db      	uxtb	r3, r3
 8018abe:	2b01      	cmp	r3, #1
 8018ac0:	d002      	beq.n	8018ac8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8018ac2:	2302      	movs	r3, #2
 8018ac4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8018ac6:	e0e9      	b.n	8018c9c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8018ac8:	68bb      	ldr	r3, [r7, #8]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d002      	beq.n	8018ad4 <HAL_SPI_Receive+0x7e>
 8018ace:	88fb      	ldrh	r3, [r7, #6]
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d102      	bne.n	8018ada <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8018ad4:	2301      	movs	r3, #1
 8018ad6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8018ad8:	e0e0      	b.n	8018c9c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	2204      	movs	r2, #4
 8018ade:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	2200      	movs	r2, #0
 8018ae6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	68ba      	ldr	r2, [r7, #8]
 8018aec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	88fa      	ldrh	r2, [r7, #6]
 8018af2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	88fa      	ldrh	r2, [r7, #6]
 8018afa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	2200      	movs	r2, #0
 8018b02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8018b04:	68fb      	ldr	r3, [r7, #12]
 8018b06:	2200      	movs	r2, #0
 8018b08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	2200      	movs	r2, #0
 8018b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	2200      	movs	r2, #0
 8018b14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	2200      	movs	r2, #0
 8018b1a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	68db      	ldr	r3, [r3, #12]
 8018b20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8018b24:	d908      	bls.n	8018b38 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	685a      	ldr	r2, [r3, #4]
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8018b34:	605a      	str	r2, [r3, #4]
 8018b36:	e007      	b.n	8018b48 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	685a      	ldr	r2, [r3, #4]
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018b46:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	689b      	ldr	r3, [r3, #8]
 8018b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018b50:	d10f      	bne.n	8018b72 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	681a      	ldr	r2, [r3, #0]
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018b60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	681a      	ldr	r2, [r3, #0]
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8018b70:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018b7c:	2b40      	cmp	r3, #64	; 0x40
 8018b7e:	d007      	beq.n	8018b90 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	681a      	ldr	r2, [r3, #0]
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018b8e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8018b90:	68fb      	ldr	r3, [r7, #12]
 8018b92:	68db      	ldr	r3, [r3, #12]
 8018b94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8018b98:	d867      	bhi.n	8018c6a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8018b9a:	e030      	b.n	8018bfe <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	689b      	ldr	r3, [r3, #8]
 8018ba2:	f003 0301 	and.w	r3, r3, #1
 8018ba6:	2b01      	cmp	r3, #1
 8018ba8:	d117      	bne.n	8018bda <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	f103 020c 	add.w	r2, r3, #12
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bb6:	7812      	ldrb	r2, [r2, #0]
 8018bb8:	b2d2      	uxtb	r2, r2
 8018bba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bc0:	1c5a      	adds	r2, r3, #1
 8018bc2:	68fb      	ldr	r3, [r7, #12]
 8018bc4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018bcc:	b29b      	uxth	r3, r3
 8018bce:	3b01      	subs	r3, #1
 8018bd0:	b29a      	uxth	r2, r3
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8018bd8:	e011      	b.n	8018bfe <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8018bda:	f7fa fcdb 	bl	8013594 <HAL_GetTick>
 8018bde:	4602      	mov	r2, r0
 8018be0:	693b      	ldr	r3, [r7, #16]
 8018be2:	1ad3      	subs	r3, r2, r3
 8018be4:	683a      	ldr	r2, [r7, #0]
 8018be6:	429a      	cmp	r2, r3
 8018be8:	d803      	bhi.n	8018bf2 <HAL_SPI_Receive+0x19c>
 8018bea:	683b      	ldr	r3, [r7, #0]
 8018bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018bf0:	d102      	bne.n	8018bf8 <HAL_SPI_Receive+0x1a2>
 8018bf2:	683b      	ldr	r3, [r7, #0]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d102      	bne.n	8018bfe <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8018bf8:	2303      	movs	r3, #3
 8018bfa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8018bfc:	e04e      	b.n	8018c9c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018c04:	b29b      	uxth	r3, r3
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d1c8      	bne.n	8018b9c <HAL_SPI_Receive+0x146>
 8018c0a:	e034      	b.n	8018c76 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	689b      	ldr	r3, [r3, #8]
 8018c12:	f003 0301 	and.w	r3, r3, #1
 8018c16:	2b01      	cmp	r3, #1
 8018c18:	d115      	bne.n	8018c46 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8018c1a:	68fb      	ldr	r3, [r7, #12]
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	68da      	ldr	r2, [r3, #12]
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c24:	b292      	uxth	r2, r2
 8018c26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c2c:	1c9a      	adds	r2, r3, #2
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8018c32:	68fb      	ldr	r3, [r7, #12]
 8018c34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018c38:	b29b      	uxth	r3, r3
 8018c3a:	3b01      	subs	r3, #1
 8018c3c:	b29a      	uxth	r2, r3
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8018c44:	e011      	b.n	8018c6a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8018c46:	f7fa fca5 	bl	8013594 <HAL_GetTick>
 8018c4a:	4602      	mov	r2, r0
 8018c4c:	693b      	ldr	r3, [r7, #16]
 8018c4e:	1ad3      	subs	r3, r2, r3
 8018c50:	683a      	ldr	r2, [r7, #0]
 8018c52:	429a      	cmp	r2, r3
 8018c54:	d803      	bhi.n	8018c5e <HAL_SPI_Receive+0x208>
 8018c56:	683b      	ldr	r3, [r7, #0]
 8018c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c5c:	d102      	bne.n	8018c64 <HAL_SPI_Receive+0x20e>
 8018c5e:	683b      	ldr	r3, [r7, #0]
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d102      	bne.n	8018c6a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8018c64:	2303      	movs	r3, #3
 8018c66:	75fb      	strb	r3, [r7, #23]
          goto error;
 8018c68:	e018      	b.n	8018c9c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018c70:	b29b      	uxth	r3, r3
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d1ca      	bne.n	8018c0c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8018c76:	693a      	ldr	r2, [r7, #16]
 8018c78:	6839      	ldr	r1, [r7, #0]
 8018c7a:	68f8      	ldr	r0, [r7, #12]
 8018c7c:	f000 fb4c 	bl	8019318 <SPI_EndRxTransaction>
 8018c80:	4603      	mov	r3, r0
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d002      	beq.n	8018c8c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	2220      	movs	r2, #32
 8018c8a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8018c8c:	68fb      	ldr	r3, [r7, #12]
 8018c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d002      	beq.n	8018c9a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8018c94:	2301      	movs	r3, #1
 8018c96:	75fb      	strb	r3, [r7, #23]
 8018c98:	e000      	b.n	8018c9c <HAL_SPI_Receive+0x246>
  }

error :
 8018c9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	2201      	movs	r2, #1
 8018ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8018ca4:	68fb      	ldr	r3, [r7, #12]
 8018ca6:	2200      	movs	r2, #0
 8018ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8018cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8018cae:	4618      	mov	r0, r3
 8018cb0:	3718      	adds	r7, #24
 8018cb2:	46bd      	mov	sp, r7
 8018cb4:	bd80      	pop	{r7, pc}

08018cb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8018cb6:	b580      	push	{r7, lr}
 8018cb8:	b08a      	sub	sp, #40	; 0x28
 8018cba:	af00      	add	r7, sp, #0
 8018cbc:	60f8      	str	r0, [r7, #12]
 8018cbe:	60b9      	str	r1, [r7, #8]
 8018cc0:	607a      	str	r2, [r7, #4]
 8018cc2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8018cc4:	2301      	movs	r3, #1
 8018cc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8018cc8:	2300      	movs	r3, #0
 8018cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8018cd4:	2b01      	cmp	r3, #1
 8018cd6:	d101      	bne.n	8018cdc <HAL_SPI_TransmitReceive+0x26>
 8018cd8:	2302      	movs	r3, #2
 8018cda:	e1fb      	b.n	80190d4 <HAL_SPI_TransmitReceive+0x41e>
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	2201      	movs	r2, #1
 8018ce0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8018ce4:	f7fa fc56 	bl	8013594 <HAL_GetTick>
 8018ce8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8018cf0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8018cf2:	68fb      	ldr	r3, [r7, #12]
 8018cf4:	685b      	ldr	r3, [r3, #4]
 8018cf6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8018cf8:	887b      	ldrh	r3, [r7, #2]
 8018cfa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8018cfc:	887b      	ldrh	r3, [r7, #2]
 8018cfe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8018d00:	7efb      	ldrb	r3, [r7, #27]
 8018d02:	2b01      	cmp	r3, #1
 8018d04:	d00e      	beq.n	8018d24 <HAL_SPI_TransmitReceive+0x6e>
 8018d06:	697b      	ldr	r3, [r7, #20]
 8018d08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8018d0c:	d106      	bne.n	8018d1c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	689b      	ldr	r3, [r3, #8]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d102      	bne.n	8018d1c <HAL_SPI_TransmitReceive+0x66>
 8018d16:	7efb      	ldrb	r3, [r7, #27]
 8018d18:	2b04      	cmp	r3, #4
 8018d1a:	d003      	beq.n	8018d24 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8018d1c:	2302      	movs	r3, #2
 8018d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8018d22:	e1cd      	b.n	80190c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8018d24:	68bb      	ldr	r3, [r7, #8]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d005      	beq.n	8018d36 <HAL_SPI_TransmitReceive+0x80>
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d002      	beq.n	8018d36 <HAL_SPI_TransmitReceive+0x80>
 8018d30:	887b      	ldrh	r3, [r7, #2]
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d103      	bne.n	8018d3e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8018d36:	2301      	movs	r3, #1
 8018d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8018d3c:	e1c0      	b.n	80190c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8018d44:	b2db      	uxtb	r3, r3
 8018d46:	2b04      	cmp	r3, #4
 8018d48:	d003      	beq.n	8018d52 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	2205      	movs	r2, #5
 8018d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	2200      	movs	r2, #0
 8018d56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	687a      	ldr	r2, [r7, #4]
 8018d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	887a      	ldrh	r2, [r7, #2]
 8018d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	887a      	ldrh	r2, [r7, #2]
 8018d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	68ba      	ldr	r2, [r7, #8]
 8018d72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	887a      	ldrh	r2, [r7, #2]
 8018d78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	887a      	ldrh	r2, [r7, #2]
 8018d7e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8018d80:	68fb      	ldr	r3, [r7, #12]
 8018d82:	2200      	movs	r2, #0
 8018d84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	2200      	movs	r2, #0
 8018d8a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	68db      	ldr	r3, [r3, #12]
 8018d90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8018d94:	d802      	bhi.n	8018d9c <HAL_SPI_TransmitReceive+0xe6>
 8018d96:	8a3b      	ldrh	r3, [r7, #16]
 8018d98:	2b01      	cmp	r3, #1
 8018d9a:	d908      	bls.n	8018dae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8018d9c:	68fb      	ldr	r3, [r7, #12]
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	685a      	ldr	r2, [r3, #4]
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8018daa:	605a      	str	r2, [r3, #4]
 8018dac:	e007      	b.n	8018dbe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	685a      	ldr	r2, [r3, #4]
 8018db4:	68fb      	ldr	r3, [r7, #12]
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018dbc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018dc8:	2b40      	cmp	r3, #64	; 0x40
 8018dca:	d007      	beq.n	8018ddc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	681a      	ldr	r2, [r3, #0]
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018dda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	68db      	ldr	r3, [r3, #12]
 8018de0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8018de4:	d97c      	bls.n	8018ee0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	685b      	ldr	r3, [r3, #4]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d002      	beq.n	8018df4 <HAL_SPI_TransmitReceive+0x13e>
 8018dee:	8a7b      	ldrh	r3, [r7, #18]
 8018df0:	2b01      	cmp	r3, #1
 8018df2:	d169      	bne.n	8018ec8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018df8:	881a      	ldrh	r2, [r3, #0]
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e04:	1c9a      	adds	r2, r3, #2
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8018e0a:	68fb      	ldr	r3, [r7, #12]
 8018e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018e0e:	b29b      	uxth	r3, r3
 8018e10:	3b01      	subs	r3, #1
 8018e12:	b29a      	uxth	r2, r3
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018e18:	e056      	b.n	8018ec8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	689b      	ldr	r3, [r3, #8]
 8018e20:	f003 0302 	and.w	r3, r3, #2
 8018e24:	2b02      	cmp	r3, #2
 8018e26:	d11b      	bne.n	8018e60 <HAL_SPI_TransmitReceive+0x1aa>
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018e2c:	b29b      	uxth	r3, r3
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d016      	beq.n	8018e60 <HAL_SPI_TransmitReceive+0x1aa>
 8018e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e34:	2b01      	cmp	r3, #1
 8018e36:	d113      	bne.n	8018e60 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e3c:	881a      	ldrh	r2, [r3, #0]
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e48:	1c9a      	adds	r2, r3, #2
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018e52:	b29b      	uxth	r3, r3
 8018e54:	3b01      	subs	r3, #1
 8018e56:	b29a      	uxth	r2, r3
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8018e5c:	2300      	movs	r3, #0
 8018e5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	689b      	ldr	r3, [r3, #8]
 8018e66:	f003 0301 	and.w	r3, r3, #1
 8018e6a:	2b01      	cmp	r3, #1
 8018e6c:	d11c      	bne.n	8018ea8 <HAL_SPI_TransmitReceive+0x1f2>
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018e74:	b29b      	uxth	r3, r3
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d016      	beq.n	8018ea8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	68da      	ldr	r2, [r3, #12]
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e84:	b292      	uxth	r2, r2
 8018e86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e8c:	1c9a      	adds	r2, r3, #2
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018e98:	b29b      	uxth	r3, r3
 8018e9a:	3b01      	subs	r3, #1
 8018e9c:	b29a      	uxth	r2, r3
 8018e9e:	68fb      	ldr	r3, [r7, #12]
 8018ea0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8018ea4:	2301      	movs	r3, #1
 8018ea6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8018ea8:	f7fa fb74 	bl	8013594 <HAL_GetTick>
 8018eac:	4602      	mov	r2, r0
 8018eae:	69fb      	ldr	r3, [r7, #28]
 8018eb0:	1ad3      	subs	r3, r2, r3
 8018eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018eb4:	429a      	cmp	r2, r3
 8018eb6:	d807      	bhi.n	8018ec8 <HAL_SPI_TransmitReceive+0x212>
 8018eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ebe:	d003      	beq.n	8018ec8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8018ec0:	2303      	movs	r3, #3
 8018ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8018ec6:	e0fb      	b.n	80190c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018ecc:	b29b      	uxth	r3, r3
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d1a3      	bne.n	8018e1a <HAL_SPI_TransmitReceive+0x164>
 8018ed2:	68fb      	ldr	r3, [r7, #12]
 8018ed4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018ed8:	b29b      	uxth	r3, r3
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d19d      	bne.n	8018e1a <HAL_SPI_TransmitReceive+0x164>
 8018ede:	e0df      	b.n	80190a0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	685b      	ldr	r3, [r3, #4]
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d003      	beq.n	8018ef0 <HAL_SPI_TransmitReceive+0x23a>
 8018ee8:	8a7b      	ldrh	r3, [r7, #18]
 8018eea:	2b01      	cmp	r3, #1
 8018eec:	f040 80cb 	bne.w	8019086 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018ef4:	b29b      	uxth	r3, r3
 8018ef6:	2b01      	cmp	r3, #1
 8018ef8:	d912      	bls.n	8018f20 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8018efa:	68fb      	ldr	r3, [r7, #12]
 8018efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018efe:	881a      	ldrh	r2, [r3, #0]
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f0a:	1c9a      	adds	r2, r3, #2
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018f14:	b29b      	uxth	r3, r3
 8018f16:	3b02      	subs	r3, #2
 8018f18:	b29a      	uxth	r2, r3
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8018f1e:	e0b2      	b.n	8019086 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	330c      	adds	r3, #12
 8018f2a:	7812      	ldrb	r2, [r2, #0]
 8018f2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f32:	1c5a      	adds	r2, r3, #1
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018f3c:	b29b      	uxth	r3, r3
 8018f3e:	3b01      	subs	r3, #1
 8018f40:	b29a      	uxth	r2, r3
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018f46:	e09e      	b.n	8019086 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	689b      	ldr	r3, [r3, #8]
 8018f4e:	f003 0302 	and.w	r3, r3, #2
 8018f52:	2b02      	cmp	r3, #2
 8018f54:	d134      	bne.n	8018fc0 <HAL_SPI_TransmitReceive+0x30a>
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018f5a:	b29b      	uxth	r3, r3
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d02f      	beq.n	8018fc0 <HAL_SPI_TransmitReceive+0x30a>
 8018f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f62:	2b01      	cmp	r3, #1
 8018f64:	d12c      	bne.n	8018fc0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018f6a:	b29b      	uxth	r3, r3
 8018f6c:	2b01      	cmp	r3, #1
 8018f6e:	d912      	bls.n	8018f96 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f74:	881a      	ldrh	r2, [r3, #0]
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8018f7c:	68fb      	ldr	r3, [r7, #12]
 8018f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f80:	1c9a      	adds	r2, r3, #2
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018f8a:	b29b      	uxth	r3, r3
 8018f8c:	3b02      	subs	r3, #2
 8018f8e:	b29a      	uxth	r2, r3
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8018f94:	e012      	b.n	8018fbc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	330c      	adds	r3, #12
 8018fa0:	7812      	ldrb	r2, [r2, #0]
 8018fa2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018fa8:	1c5a      	adds	r2, r3, #1
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018fb2:	b29b      	uxth	r3, r3
 8018fb4:	3b01      	subs	r3, #1
 8018fb6:	b29a      	uxth	r2, r3
 8018fb8:	68fb      	ldr	r3, [r7, #12]
 8018fba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	689b      	ldr	r3, [r3, #8]
 8018fc6:	f003 0301 	and.w	r3, r3, #1
 8018fca:	2b01      	cmp	r3, #1
 8018fcc:	d148      	bne.n	8019060 <HAL_SPI_TransmitReceive+0x3aa>
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018fd4:	b29b      	uxth	r3, r3
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d042      	beq.n	8019060 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8018fda:	68fb      	ldr	r3, [r7, #12]
 8018fdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018fe0:	b29b      	uxth	r3, r3
 8018fe2:	2b01      	cmp	r3, #1
 8018fe4:	d923      	bls.n	801902e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	68da      	ldr	r2, [r3, #12]
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ff0:	b292      	uxth	r2, r2
 8018ff2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ff8:	1c9a      	adds	r2, r3, #2
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019004:	b29b      	uxth	r3, r3
 8019006:	3b02      	subs	r3, #2
 8019008:	b29a      	uxth	r2, r3
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019016:	b29b      	uxth	r3, r3
 8019018:	2b01      	cmp	r3, #1
 801901a:	d81f      	bhi.n	801905c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801901c:	68fb      	ldr	r3, [r7, #12]
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	685a      	ldr	r2, [r3, #4]
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801902a:	605a      	str	r2, [r3, #4]
 801902c:	e016      	b.n	801905c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	f103 020c 	add.w	r2, r3, #12
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801903a:	7812      	ldrb	r2, [r2, #0]
 801903c:	b2d2      	uxtb	r2, r2
 801903e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019044:	1c5a      	adds	r2, r3, #1
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801904a:	68fb      	ldr	r3, [r7, #12]
 801904c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019050:	b29b      	uxth	r3, r3
 8019052:	3b01      	subs	r3, #1
 8019054:	b29a      	uxth	r2, r3
 8019056:	68fb      	ldr	r3, [r7, #12]
 8019058:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801905c:	2301      	movs	r3, #1
 801905e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8019060:	f7fa fa98 	bl	8013594 <HAL_GetTick>
 8019064:	4602      	mov	r2, r0
 8019066:	69fb      	ldr	r3, [r7, #28]
 8019068:	1ad3      	subs	r3, r2, r3
 801906a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801906c:	429a      	cmp	r2, r3
 801906e:	d803      	bhi.n	8019078 <HAL_SPI_TransmitReceive+0x3c2>
 8019070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019076:	d102      	bne.n	801907e <HAL_SPI_TransmitReceive+0x3c8>
 8019078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801907a:	2b00      	cmp	r3, #0
 801907c:	d103      	bne.n	8019086 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801907e:	2303      	movs	r3, #3
 8019080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8019084:	e01c      	b.n	80190c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801908a:	b29b      	uxth	r3, r3
 801908c:	2b00      	cmp	r3, #0
 801908e:	f47f af5b 	bne.w	8018f48 <HAL_SPI_TransmitReceive+0x292>
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019098:	b29b      	uxth	r3, r3
 801909a:	2b00      	cmp	r3, #0
 801909c:	f47f af54 	bne.w	8018f48 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80190a0:	69fa      	ldr	r2, [r7, #28]
 80190a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80190a4:	68f8      	ldr	r0, [r7, #12]
 80190a6:	f000 f98f 	bl	80193c8 <SPI_EndRxTxTransaction>
 80190aa:	4603      	mov	r3, r0
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d006      	beq.n	80190be <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80190b0:	2301      	movs	r3, #1
 80190b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	2220      	movs	r2, #32
 80190ba:	661a      	str	r2, [r3, #96]	; 0x60
 80190bc:	e000      	b.n	80190c0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80190be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	2201      	movs	r2, #1
 80190c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	2200      	movs	r2, #0
 80190cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80190d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80190d4:	4618      	mov	r0, r3
 80190d6:	3728      	adds	r7, #40	; 0x28
 80190d8:	46bd      	mov	sp, r7
 80190da:	bd80      	pop	{r7, pc}

080190dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80190dc:	b580      	push	{r7, lr}
 80190de:	b088      	sub	sp, #32
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	60f8      	str	r0, [r7, #12]
 80190e4:	60b9      	str	r1, [r7, #8]
 80190e6:	603b      	str	r3, [r7, #0]
 80190e8:	4613      	mov	r3, r2
 80190ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80190ec:	f7fa fa52 	bl	8013594 <HAL_GetTick>
 80190f0:	4602      	mov	r2, r0
 80190f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190f4:	1a9b      	subs	r3, r3, r2
 80190f6:	683a      	ldr	r2, [r7, #0]
 80190f8:	4413      	add	r3, r2
 80190fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80190fc:	f7fa fa4a 	bl	8013594 <HAL_GetTick>
 8019100:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8019102:	4b39      	ldr	r3, [pc, #228]	; (80191e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	015b      	lsls	r3, r3, #5
 8019108:	0d1b      	lsrs	r3, r3, #20
 801910a:	69fa      	ldr	r2, [r7, #28]
 801910c:	fb02 f303 	mul.w	r3, r2, r3
 8019110:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8019112:	e054      	b.n	80191be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8019114:	683b      	ldr	r3, [r7, #0]
 8019116:	f1b3 3fff 	cmp.w	r3, #4294967295
 801911a:	d050      	beq.n	80191be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801911c:	f7fa fa3a 	bl	8013594 <HAL_GetTick>
 8019120:	4602      	mov	r2, r0
 8019122:	69bb      	ldr	r3, [r7, #24]
 8019124:	1ad3      	subs	r3, r2, r3
 8019126:	69fa      	ldr	r2, [r7, #28]
 8019128:	429a      	cmp	r2, r3
 801912a:	d902      	bls.n	8019132 <SPI_WaitFlagStateUntilTimeout+0x56>
 801912c:	69fb      	ldr	r3, [r7, #28]
 801912e:	2b00      	cmp	r3, #0
 8019130:	d13d      	bne.n	80191ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	685a      	ldr	r2, [r3, #4]
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8019140:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	685b      	ldr	r3, [r3, #4]
 8019146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801914a:	d111      	bne.n	8019170 <SPI_WaitFlagStateUntilTimeout+0x94>
 801914c:	68fb      	ldr	r3, [r7, #12]
 801914e:	689b      	ldr	r3, [r3, #8]
 8019150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019154:	d004      	beq.n	8019160 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	689b      	ldr	r3, [r3, #8]
 801915a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801915e:	d107      	bne.n	8019170 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	681a      	ldr	r2, [r3, #0]
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801916e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019178:	d10f      	bne.n	801919a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	681a      	ldr	r2, [r3, #0]
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8019188:	601a      	str	r2, [r3, #0]
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	681a      	ldr	r2, [r3, #0]
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8019198:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	2201      	movs	r2, #1
 801919e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	2200      	movs	r2, #0
 80191a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80191aa:	2303      	movs	r3, #3
 80191ac:	e017      	b.n	80191de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80191ae:	697b      	ldr	r3, [r7, #20]
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d101      	bne.n	80191b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80191b4:	2300      	movs	r3, #0
 80191b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80191b8:	697b      	ldr	r3, [r7, #20]
 80191ba:	3b01      	subs	r3, #1
 80191bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	689a      	ldr	r2, [r3, #8]
 80191c4:	68bb      	ldr	r3, [r7, #8]
 80191c6:	4013      	ands	r3, r2
 80191c8:	68ba      	ldr	r2, [r7, #8]
 80191ca:	429a      	cmp	r2, r3
 80191cc:	bf0c      	ite	eq
 80191ce:	2301      	moveq	r3, #1
 80191d0:	2300      	movne	r3, #0
 80191d2:	b2db      	uxtb	r3, r3
 80191d4:	461a      	mov	r2, r3
 80191d6:	79fb      	ldrb	r3, [r7, #7]
 80191d8:	429a      	cmp	r2, r3
 80191da:	d19b      	bne.n	8019114 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80191dc:	2300      	movs	r3, #0
}
 80191de:	4618      	mov	r0, r3
 80191e0:	3720      	adds	r7, #32
 80191e2:	46bd      	mov	sp, r7
 80191e4:	bd80      	pop	{r7, pc}
 80191e6:	bf00      	nop
 80191e8:	20000090 	.word	0x20000090

080191ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b08a      	sub	sp, #40	; 0x28
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	60f8      	str	r0, [r7, #12]
 80191f4:	60b9      	str	r1, [r7, #8]
 80191f6:	607a      	str	r2, [r7, #4]
 80191f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80191fa:	2300      	movs	r3, #0
 80191fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80191fe:	f7fa f9c9 	bl	8013594 <HAL_GetTick>
 8019202:	4602      	mov	r2, r0
 8019204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019206:	1a9b      	subs	r3, r3, r2
 8019208:	683a      	ldr	r2, [r7, #0]
 801920a:	4413      	add	r3, r2
 801920c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801920e:	f7fa f9c1 	bl	8013594 <HAL_GetTick>
 8019212:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	330c      	adds	r3, #12
 801921a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801921c:	4b3d      	ldr	r3, [pc, #244]	; (8019314 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801921e:	681a      	ldr	r2, [r3, #0]
 8019220:	4613      	mov	r3, r2
 8019222:	009b      	lsls	r3, r3, #2
 8019224:	4413      	add	r3, r2
 8019226:	00da      	lsls	r2, r3, #3
 8019228:	1ad3      	subs	r3, r2, r3
 801922a:	0d1b      	lsrs	r3, r3, #20
 801922c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801922e:	fb02 f303 	mul.w	r3, r2, r3
 8019232:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8019234:	e060      	b.n	80192f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8019236:	68bb      	ldr	r3, [r7, #8]
 8019238:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801923c:	d107      	bne.n	801924e <SPI_WaitFifoStateUntilTimeout+0x62>
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	2b00      	cmp	r3, #0
 8019242:	d104      	bne.n	801924e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8019244:	69fb      	ldr	r3, [r7, #28]
 8019246:	781b      	ldrb	r3, [r3, #0]
 8019248:	b2db      	uxtb	r3, r3
 801924a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801924c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801924e:	683b      	ldr	r3, [r7, #0]
 8019250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019254:	d050      	beq.n	80192f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8019256:	f7fa f99d 	bl	8013594 <HAL_GetTick>
 801925a:	4602      	mov	r2, r0
 801925c:	6a3b      	ldr	r3, [r7, #32]
 801925e:	1ad3      	subs	r3, r2, r3
 8019260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019262:	429a      	cmp	r2, r3
 8019264:	d902      	bls.n	801926c <SPI_WaitFifoStateUntilTimeout+0x80>
 8019266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019268:	2b00      	cmp	r3, #0
 801926a:	d13d      	bne.n	80192e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	685a      	ldr	r2, [r3, #4]
 8019272:	68fb      	ldr	r3, [r7, #12]
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801927a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	685b      	ldr	r3, [r3, #4]
 8019280:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019284:	d111      	bne.n	80192aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	689b      	ldr	r3, [r3, #8]
 801928a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801928e:	d004      	beq.n	801929a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	689b      	ldr	r3, [r3, #8]
 8019294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019298:	d107      	bne.n	80192aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	681a      	ldr	r2, [r3, #0]
 80192a0:	68fb      	ldr	r3, [r7, #12]
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80192a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80192b2:	d10f      	bne.n	80192d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80192b4:	68fb      	ldr	r3, [r7, #12]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	681a      	ldr	r2, [r3, #0]
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80192c2:	601a      	str	r2, [r3, #0]
 80192c4:	68fb      	ldr	r3, [r7, #12]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	681a      	ldr	r2, [r3, #0]
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80192d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80192d4:	68fb      	ldr	r3, [r7, #12]
 80192d6:	2201      	movs	r2, #1
 80192d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	2200      	movs	r2, #0
 80192e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80192e4:	2303      	movs	r3, #3
 80192e6:	e010      	b.n	801930a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80192e8:	69bb      	ldr	r3, [r7, #24]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d101      	bne.n	80192f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80192ee:	2300      	movs	r3, #0
 80192f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80192f2:	69bb      	ldr	r3, [r7, #24]
 80192f4:	3b01      	subs	r3, #1
 80192f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	689a      	ldr	r2, [r3, #8]
 80192fe:	68bb      	ldr	r3, [r7, #8]
 8019300:	4013      	ands	r3, r2
 8019302:	687a      	ldr	r2, [r7, #4]
 8019304:	429a      	cmp	r2, r3
 8019306:	d196      	bne.n	8019236 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8019308:	2300      	movs	r3, #0
}
 801930a:	4618      	mov	r0, r3
 801930c:	3728      	adds	r7, #40	; 0x28
 801930e:	46bd      	mov	sp, r7
 8019310:	bd80      	pop	{r7, pc}
 8019312:	bf00      	nop
 8019314:	20000090 	.word	0x20000090

08019318 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8019318:	b580      	push	{r7, lr}
 801931a:	b086      	sub	sp, #24
 801931c:	af02      	add	r7, sp, #8
 801931e:	60f8      	str	r0, [r7, #12]
 8019320:	60b9      	str	r1, [r7, #8]
 8019322:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019324:	68fb      	ldr	r3, [r7, #12]
 8019326:	685b      	ldr	r3, [r3, #4]
 8019328:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801932c:	d111      	bne.n	8019352 <SPI_EndRxTransaction+0x3a>
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	689b      	ldr	r3, [r3, #8]
 8019332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019336:	d004      	beq.n	8019342 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	689b      	ldr	r3, [r3, #8]
 801933c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019340:	d107      	bne.n	8019352 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	681a      	ldr	r2, [r3, #0]
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019350:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	9300      	str	r3, [sp, #0]
 8019356:	68bb      	ldr	r3, [r7, #8]
 8019358:	2200      	movs	r2, #0
 801935a:	2180      	movs	r1, #128	; 0x80
 801935c:	68f8      	ldr	r0, [r7, #12]
 801935e:	f7ff febd 	bl	80190dc <SPI_WaitFlagStateUntilTimeout>
 8019362:	4603      	mov	r3, r0
 8019364:	2b00      	cmp	r3, #0
 8019366:	d007      	beq.n	8019378 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801936c:	f043 0220 	orr.w	r2, r3, #32
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8019374:	2303      	movs	r3, #3
 8019376:	e023      	b.n	80193c0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	685b      	ldr	r3, [r3, #4]
 801937c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019380:	d11d      	bne.n	80193be <SPI_EndRxTransaction+0xa6>
 8019382:	68fb      	ldr	r3, [r7, #12]
 8019384:	689b      	ldr	r3, [r3, #8]
 8019386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801938a:	d004      	beq.n	8019396 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	689b      	ldr	r3, [r3, #8]
 8019390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019394:	d113      	bne.n	80193be <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	9300      	str	r3, [sp, #0]
 801939a:	68bb      	ldr	r3, [r7, #8]
 801939c:	2200      	movs	r2, #0
 801939e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80193a2:	68f8      	ldr	r0, [r7, #12]
 80193a4:	f7ff ff22 	bl	80191ec <SPI_WaitFifoStateUntilTimeout>
 80193a8:	4603      	mov	r3, r0
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d007      	beq.n	80193be <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80193b2:	f043 0220 	orr.w	r2, r3, #32
 80193b6:	68fb      	ldr	r3, [r7, #12]
 80193b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80193ba:	2303      	movs	r3, #3
 80193bc:	e000      	b.n	80193c0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80193be:	2300      	movs	r3, #0
}
 80193c0:	4618      	mov	r0, r3
 80193c2:	3710      	adds	r7, #16
 80193c4:	46bd      	mov	sp, r7
 80193c6:	bd80      	pop	{r7, pc}

080193c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80193c8:	b580      	push	{r7, lr}
 80193ca:	b086      	sub	sp, #24
 80193cc:	af02      	add	r7, sp, #8
 80193ce:	60f8      	str	r0, [r7, #12]
 80193d0:	60b9      	str	r1, [r7, #8]
 80193d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	9300      	str	r3, [sp, #0]
 80193d8:	68bb      	ldr	r3, [r7, #8]
 80193da:	2200      	movs	r2, #0
 80193dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80193e0:	68f8      	ldr	r0, [r7, #12]
 80193e2:	f7ff ff03 	bl	80191ec <SPI_WaitFifoStateUntilTimeout>
 80193e6:	4603      	mov	r3, r0
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d007      	beq.n	80193fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80193f0:	f043 0220 	orr.w	r2, r3, #32
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80193f8:	2303      	movs	r3, #3
 80193fa:	e027      	b.n	801944c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	9300      	str	r3, [sp, #0]
 8019400:	68bb      	ldr	r3, [r7, #8]
 8019402:	2200      	movs	r2, #0
 8019404:	2180      	movs	r1, #128	; 0x80
 8019406:	68f8      	ldr	r0, [r7, #12]
 8019408:	f7ff fe68 	bl	80190dc <SPI_WaitFlagStateUntilTimeout>
 801940c:	4603      	mov	r3, r0
 801940e:	2b00      	cmp	r3, #0
 8019410:	d007      	beq.n	8019422 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019416:	f043 0220 	orr.w	r2, r3, #32
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801941e:	2303      	movs	r3, #3
 8019420:	e014      	b.n	801944c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	9300      	str	r3, [sp, #0]
 8019426:	68bb      	ldr	r3, [r7, #8]
 8019428:	2200      	movs	r2, #0
 801942a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801942e:	68f8      	ldr	r0, [r7, #12]
 8019430:	f7ff fedc 	bl	80191ec <SPI_WaitFifoStateUntilTimeout>
 8019434:	4603      	mov	r3, r0
 8019436:	2b00      	cmp	r3, #0
 8019438:	d007      	beq.n	801944a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801943e:	f043 0220 	orr.w	r2, r3, #32
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8019446:	2303      	movs	r3, #3
 8019448:	e000      	b.n	801944c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801944a:	2300      	movs	r3, #0
}
 801944c:	4618      	mov	r0, r3
 801944e:	3710      	adds	r7, #16
 8019450:	46bd      	mov	sp, r7
 8019452:	bd80      	pop	{r7, pc}

08019454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8019454:	b580      	push	{r7, lr}
 8019456:	b082      	sub	sp, #8
 8019458:	af00      	add	r7, sp, #0
 801945a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	2b00      	cmp	r3, #0
 8019460:	d101      	bne.n	8019466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8019462:	2301      	movs	r3, #1
 8019464:	e049      	b.n	80194fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801946c:	b2db      	uxtb	r3, r3
 801946e:	2b00      	cmp	r3, #0
 8019470:	d106      	bne.n	8019480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	2200      	movs	r2, #0
 8019476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801947a:	6878      	ldr	r0, [r7, #4]
 801947c:	f7f9 fc1c 	bl	8012cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	2202      	movs	r2, #2
 8019484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	681a      	ldr	r2, [r3, #0]
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	3304      	adds	r3, #4
 8019490:	4619      	mov	r1, r3
 8019492:	4610      	mov	r0, r2
 8019494:	f001 f948 	bl	801a728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	2201      	movs	r2, #1
 801949c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	2201      	movs	r2, #1
 80194a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	2201      	movs	r2, #1
 80194ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	2201      	movs	r2, #1
 80194b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	2201      	movs	r2, #1
 80194bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	2201      	movs	r2, #1
 80194c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	2201      	movs	r2, #1
 80194cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	2201      	movs	r2, #1
 80194d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	2201      	movs	r2, #1
 80194dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	2201      	movs	r2, #1
 80194e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	2201      	movs	r2, #1
 80194ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	2201      	movs	r2, #1
 80194f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80194f8:	2300      	movs	r3, #0
}
 80194fa:	4618      	mov	r0, r3
 80194fc:	3708      	adds	r7, #8
 80194fe:	46bd      	mov	sp, r7
 8019500:	bd80      	pop	{r7, pc}
	...

08019504 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8019504:	b480      	push	{r7}
 8019506:	b085      	sub	sp, #20
 8019508:	af00      	add	r7, sp, #0
 801950a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019512:	b2db      	uxtb	r3, r3
 8019514:	2b01      	cmp	r3, #1
 8019516:	d001      	beq.n	801951c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8019518:	2301      	movs	r3, #1
 801951a:	e047      	b.n	80195ac <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	2202      	movs	r2, #2
 8019520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	4a23      	ldr	r2, [pc, #140]	; (80195b8 <HAL_TIM_Base_Start+0xb4>)
 801952a:	4293      	cmp	r3, r2
 801952c:	d01d      	beq.n	801956a <HAL_TIM_Base_Start+0x66>
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019536:	d018      	beq.n	801956a <HAL_TIM_Base_Start+0x66>
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	4a1f      	ldr	r2, [pc, #124]	; (80195bc <HAL_TIM_Base_Start+0xb8>)
 801953e:	4293      	cmp	r3, r2
 8019540:	d013      	beq.n	801956a <HAL_TIM_Base_Start+0x66>
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	4a1e      	ldr	r2, [pc, #120]	; (80195c0 <HAL_TIM_Base_Start+0xbc>)
 8019548:	4293      	cmp	r3, r2
 801954a:	d00e      	beq.n	801956a <HAL_TIM_Base_Start+0x66>
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	4a1c      	ldr	r2, [pc, #112]	; (80195c4 <HAL_TIM_Base_Start+0xc0>)
 8019552:	4293      	cmp	r3, r2
 8019554:	d009      	beq.n	801956a <HAL_TIM_Base_Start+0x66>
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	4a1b      	ldr	r2, [pc, #108]	; (80195c8 <HAL_TIM_Base_Start+0xc4>)
 801955c:	4293      	cmp	r3, r2
 801955e:	d004      	beq.n	801956a <HAL_TIM_Base_Start+0x66>
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	4a19      	ldr	r2, [pc, #100]	; (80195cc <HAL_TIM_Base_Start+0xc8>)
 8019566:	4293      	cmp	r3, r2
 8019568:	d115      	bne.n	8019596 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	689a      	ldr	r2, [r3, #8]
 8019570:	4b17      	ldr	r3, [pc, #92]	; (80195d0 <HAL_TIM_Base_Start+0xcc>)
 8019572:	4013      	ands	r3, r2
 8019574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019576:	68fb      	ldr	r3, [r7, #12]
 8019578:	2b06      	cmp	r3, #6
 801957a:	d015      	beq.n	80195a8 <HAL_TIM_Base_Start+0xa4>
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019582:	d011      	beq.n	80195a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	681a      	ldr	r2, [r3, #0]
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	f042 0201 	orr.w	r2, r2, #1
 8019592:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019594:	e008      	b.n	80195a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	681a      	ldr	r2, [r3, #0]
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	f042 0201 	orr.w	r2, r2, #1
 80195a4:	601a      	str	r2, [r3, #0]
 80195a6:	e000      	b.n	80195aa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80195a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80195aa:	2300      	movs	r3, #0
}
 80195ac:	4618      	mov	r0, r3
 80195ae:	3714      	adds	r7, #20
 80195b0:	46bd      	mov	sp, r7
 80195b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b6:	4770      	bx	lr
 80195b8:	40012c00 	.word	0x40012c00
 80195bc:	40000400 	.word	0x40000400
 80195c0:	40000800 	.word	0x40000800
 80195c4:	40000c00 	.word	0x40000c00
 80195c8:	40013400 	.word	0x40013400
 80195cc:	40014000 	.word	0x40014000
 80195d0:	00010007 	.word	0x00010007

080195d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80195d4:	b480      	push	{r7}
 80195d6:	b085      	sub	sp, #20
 80195d8:	af00      	add	r7, sp, #0
 80195da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80195e2:	b2db      	uxtb	r3, r3
 80195e4:	2b01      	cmp	r3, #1
 80195e6:	d001      	beq.n	80195ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80195e8:	2301      	movs	r3, #1
 80195ea:	e04f      	b.n	801968c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	2202      	movs	r2, #2
 80195f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	68da      	ldr	r2, [r3, #12]
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	f042 0201 	orr.w	r2, r2, #1
 8019602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	4a23      	ldr	r2, [pc, #140]	; (8019698 <HAL_TIM_Base_Start_IT+0xc4>)
 801960a:	4293      	cmp	r3, r2
 801960c:	d01d      	beq.n	801964a <HAL_TIM_Base_Start_IT+0x76>
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019616:	d018      	beq.n	801964a <HAL_TIM_Base_Start_IT+0x76>
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	4a1f      	ldr	r2, [pc, #124]	; (801969c <HAL_TIM_Base_Start_IT+0xc8>)
 801961e:	4293      	cmp	r3, r2
 8019620:	d013      	beq.n	801964a <HAL_TIM_Base_Start_IT+0x76>
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	4a1e      	ldr	r2, [pc, #120]	; (80196a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8019628:	4293      	cmp	r3, r2
 801962a:	d00e      	beq.n	801964a <HAL_TIM_Base_Start_IT+0x76>
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	4a1c      	ldr	r2, [pc, #112]	; (80196a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8019632:	4293      	cmp	r3, r2
 8019634:	d009      	beq.n	801964a <HAL_TIM_Base_Start_IT+0x76>
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	4a1b      	ldr	r2, [pc, #108]	; (80196a8 <HAL_TIM_Base_Start_IT+0xd4>)
 801963c:	4293      	cmp	r3, r2
 801963e:	d004      	beq.n	801964a <HAL_TIM_Base_Start_IT+0x76>
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	681b      	ldr	r3, [r3, #0]
 8019644:	4a19      	ldr	r2, [pc, #100]	; (80196ac <HAL_TIM_Base_Start_IT+0xd8>)
 8019646:	4293      	cmp	r3, r2
 8019648:	d115      	bne.n	8019676 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	689a      	ldr	r2, [r3, #8]
 8019650:	4b17      	ldr	r3, [pc, #92]	; (80196b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8019652:	4013      	ands	r3, r2
 8019654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	2b06      	cmp	r3, #6
 801965a:	d015      	beq.n	8019688 <HAL_TIM_Base_Start_IT+0xb4>
 801965c:	68fb      	ldr	r3, [r7, #12]
 801965e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019662:	d011      	beq.n	8019688 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	681a      	ldr	r2, [r3, #0]
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	f042 0201 	orr.w	r2, r2, #1
 8019672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019674:	e008      	b.n	8019688 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	681a      	ldr	r2, [r3, #0]
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	f042 0201 	orr.w	r2, r2, #1
 8019684:	601a      	str	r2, [r3, #0]
 8019686:	e000      	b.n	801968a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019688:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801968a:	2300      	movs	r3, #0
}
 801968c:	4618      	mov	r0, r3
 801968e:	3714      	adds	r7, #20
 8019690:	46bd      	mov	sp, r7
 8019692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019696:	4770      	bx	lr
 8019698:	40012c00 	.word	0x40012c00
 801969c:	40000400 	.word	0x40000400
 80196a0:	40000800 	.word	0x40000800
 80196a4:	40000c00 	.word	0x40000c00
 80196a8:	40013400 	.word	0x40013400
 80196ac:	40014000 	.word	0x40014000
 80196b0:	00010007 	.word	0x00010007

080196b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80196b4:	b580      	push	{r7, lr}
 80196b6:	b082      	sub	sp, #8
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d101      	bne.n	80196c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80196c2:	2301      	movs	r3, #1
 80196c4:	e049      	b.n	801975a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80196cc:	b2db      	uxtb	r3, r3
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d106      	bne.n	80196e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	2200      	movs	r2, #0
 80196d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80196da:	6878      	ldr	r0, [r7, #4]
 80196dc:	f7f9 fbd4 	bl	8012e88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	2202      	movs	r2, #2
 80196e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	681a      	ldr	r2, [r3, #0]
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	3304      	adds	r3, #4
 80196f0:	4619      	mov	r1, r3
 80196f2:	4610      	mov	r0, r2
 80196f4:	f001 f818 	bl	801a728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	2201      	movs	r2, #1
 80196fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	2201      	movs	r2, #1
 8019704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	2201      	movs	r2, #1
 801970c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	2201      	movs	r2, #1
 8019714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	2201      	movs	r2, #1
 801971c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	2201      	movs	r2, #1
 8019724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	2201      	movs	r2, #1
 801972c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	2201      	movs	r2, #1
 8019734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	2201      	movs	r2, #1
 801973c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	2201      	movs	r2, #1
 8019744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	2201      	movs	r2, #1
 801974c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	2201      	movs	r2, #1
 8019754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019758:	2300      	movs	r3, #0
}
 801975a:	4618      	mov	r0, r3
 801975c:	3708      	adds	r7, #8
 801975e:	46bd      	mov	sp, r7
 8019760:	bd80      	pop	{r7, pc}
	...

08019764 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019764:	b580      	push	{r7, lr}
 8019766:	b084      	sub	sp, #16
 8019768:	af00      	add	r7, sp, #0
 801976a:	6078      	str	r0, [r7, #4]
 801976c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801976e:	683b      	ldr	r3, [r7, #0]
 8019770:	2b00      	cmp	r3, #0
 8019772:	d109      	bne.n	8019788 <HAL_TIM_PWM_Start+0x24>
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801977a:	b2db      	uxtb	r3, r3
 801977c:	2b01      	cmp	r3, #1
 801977e:	bf14      	ite	ne
 8019780:	2301      	movne	r3, #1
 8019782:	2300      	moveq	r3, #0
 8019784:	b2db      	uxtb	r3, r3
 8019786:	e03c      	b.n	8019802 <HAL_TIM_PWM_Start+0x9e>
 8019788:	683b      	ldr	r3, [r7, #0]
 801978a:	2b04      	cmp	r3, #4
 801978c:	d109      	bne.n	80197a2 <HAL_TIM_PWM_Start+0x3e>
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8019794:	b2db      	uxtb	r3, r3
 8019796:	2b01      	cmp	r3, #1
 8019798:	bf14      	ite	ne
 801979a:	2301      	movne	r3, #1
 801979c:	2300      	moveq	r3, #0
 801979e:	b2db      	uxtb	r3, r3
 80197a0:	e02f      	b.n	8019802 <HAL_TIM_PWM_Start+0x9e>
 80197a2:	683b      	ldr	r3, [r7, #0]
 80197a4:	2b08      	cmp	r3, #8
 80197a6:	d109      	bne.n	80197bc <HAL_TIM_PWM_Start+0x58>
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80197ae:	b2db      	uxtb	r3, r3
 80197b0:	2b01      	cmp	r3, #1
 80197b2:	bf14      	ite	ne
 80197b4:	2301      	movne	r3, #1
 80197b6:	2300      	moveq	r3, #0
 80197b8:	b2db      	uxtb	r3, r3
 80197ba:	e022      	b.n	8019802 <HAL_TIM_PWM_Start+0x9e>
 80197bc:	683b      	ldr	r3, [r7, #0]
 80197be:	2b0c      	cmp	r3, #12
 80197c0:	d109      	bne.n	80197d6 <HAL_TIM_PWM_Start+0x72>
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80197c8:	b2db      	uxtb	r3, r3
 80197ca:	2b01      	cmp	r3, #1
 80197cc:	bf14      	ite	ne
 80197ce:	2301      	movne	r3, #1
 80197d0:	2300      	moveq	r3, #0
 80197d2:	b2db      	uxtb	r3, r3
 80197d4:	e015      	b.n	8019802 <HAL_TIM_PWM_Start+0x9e>
 80197d6:	683b      	ldr	r3, [r7, #0]
 80197d8:	2b10      	cmp	r3, #16
 80197da:	d109      	bne.n	80197f0 <HAL_TIM_PWM_Start+0x8c>
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80197e2:	b2db      	uxtb	r3, r3
 80197e4:	2b01      	cmp	r3, #1
 80197e6:	bf14      	ite	ne
 80197e8:	2301      	movne	r3, #1
 80197ea:	2300      	moveq	r3, #0
 80197ec:	b2db      	uxtb	r3, r3
 80197ee:	e008      	b.n	8019802 <HAL_TIM_PWM_Start+0x9e>
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80197f6:	b2db      	uxtb	r3, r3
 80197f8:	2b01      	cmp	r3, #1
 80197fa:	bf14      	ite	ne
 80197fc:	2301      	movne	r3, #1
 80197fe:	2300      	moveq	r3, #0
 8019800:	b2db      	uxtb	r3, r3
 8019802:	2b00      	cmp	r3, #0
 8019804:	d001      	beq.n	801980a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8019806:	2301      	movs	r3, #1
 8019808:	e09c      	b.n	8019944 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801980a:	683b      	ldr	r3, [r7, #0]
 801980c:	2b00      	cmp	r3, #0
 801980e:	d104      	bne.n	801981a <HAL_TIM_PWM_Start+0xb6>
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	2202      	movs	r2, #2
 8019814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019818:	e023      	b.n	8019862 <HAL_TIM_PWM_Start+0xfe>
 801981a:	683b      	ldr	r3, [r7, #0]
 801981c:	2b04      	cmp	r3, #4
 801981e:	d104      	bne.n	801982a <HAL_TIM_PWM_Start+0xc6>
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	2202      	movs	r2, #2
 8019824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019828:	e01b      	b.n	8019862 <HAL_TIM_PWM_Start+0xfe>
 801982a:	683b      	ldr	r3, [r7, #0]
 801982c:	2b08      	cmp	r3, #8
 801982e:	d104      	bne.n	801983a <HAL_TIM_PWM_Start+0xd6>
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	2202      	movs	r2, #2
 8019834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019838:	e013      	b.n	8019862 <HAL_TIM_PWM_Start+0xfe>
 801983a:	683b      	ldr	r3, [r7, #0]
 801983c:	2b0c      	cmp	r3, #12
 801983e:	d104      	bne.n	801984a <HAL_TIM_PWM_Start+0xe6>
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	2202      	movs	r2, #2
 8019844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8019848:	e00b      	b.n	8019862 <HAL_TIM_PWM_Start+0xfe>
 801984a:	683b      	ldr	r3, [r7, #0]
 801984c:	2b10      	cmp	r3, #16
 801984e:	d104      	bne.n	801985a <HAL_TIM_PWM_Start+0xf6>
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	2202      	movs	r2, #2
 8019854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019858:	e003      	b.n	8019862 <HAL_TIM_PWM_Start+0xfe>
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	2202      	movs	r2, #2
 801985e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	2201      	movs	r2, #1
 8019868:	6839      	ldr	r1, [r7, #0]
 801986a:	4618      	mov	r0, r3
 801986c:	f001 fc8c 	bl	801b188 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	4a35      	ldr	r2, [pc, #212]	; (801994c <HAL_TIM_PWM_Start+0x1e8>)
 8019876:	4293      	cmp	r3, r2
 8019878:	d013      	beq.n	80198a2 <HAL_TIM_PWM_Start+0x13e>
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	4a34      	ldr	r2, [pc, #208]	; (8019950 <HAL_TIM_PWM_Start+0x1ec>)
 8019880:	4293      	cmp	r3, r2
 8019882:	d00e      	beq.n	80198a2 <HAL_TIM_PWM_Start+0x13e>
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	4a32      	ldr	r2, [pc, #200]	; (8019954 <HAL_TIM_PWM_Start+0x1f0>)
 801988a:	4293      	cmp	r3, r2
 801988c:	d009      	beq.n	80198a2 <HAL_TIM_PWM_Start+0x13e>
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	4a31      	ldr	r2, [pc, #196]	; (8019958 <HAL_TIM_PWM_Start+0x1f4>)
 8019894:	4293      	cmp	r3, r2
 8019896:	d004      	beq.n	80198a2 <HAL_TIM_PWM_Start+0x13e>
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	4a2f      	ldr	r2, [pc, #188]	; (801995c <HAL_TIM_PWM_Start+0x1f8>)
 801989e:	4293      	cmp	r3, r2
 80198a0:	d101      	bne.n	80198a6 <HAL_TIM_PWM_Start+0x142>
 80198a2:	2301      	movs	r3, #1
 80198a4:	e000      	b.n	80198a8 <HAL_TIM_PWM_Start+0x144>
 80198a6:	2300      	movs	r3, #0
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d007      	beq.n	80198bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80198ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	4a22      	ldr	r2, [pc, #136]	; (801994c <HAL_TIM_PWM_Start+0x1e8>)
 80198c2:	4293      	cmp	r3, r2
 80198c4:	d01d      	beq.n	8019902 <HAL_TIM_PWM_Start+0x19e>
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80198ce:	d018      	beq.n	8019902 <HAL_TIM_PWM_Start+0x19e>
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	4a22      	ldr	r2, [pc, #136]	; (8019960 <HAL_TIM_PWM_Start+0x1fc>)
 80198d6:	4293      	cmp	r3, r2
 80198d8:	d013      	beq.n	8019902 <HAL_TIM_PWM_Start+0x19e>
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	4a21      	ldr	r2, [pc, #132]	; (8019964 <HAL_TIM_PWM_Start+0x200>)
 80198e0:	4293      	cmp	r3, r2
 80198e2:	d00e      	beq.n	8019902 <HAL_TIM_PWM_Start+0x19e>
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	4a1f      	ldr	r2, [pc, #124]	; (8019968 <HAL_TIM_PWM_Start+0x204>)
 80198ea:	4293      	cmp	r3, r2
 80198ec:	d009      	beq.n	8019902 <HAL_TIM_PWM_Start+0x19e>
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	4a17      	ldr	r2, [pc, #92]	; (8019950 <HAL_TIM_PWM_Start+0x1ec>)
 80198f4:	4293      	cmp	r3, r2
 80198f6:	d004      	beq.n	8019902 <HAL_TIM_PWM_Start+0x19e>
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	4a15      	ldr	r2, [pc, #84]	; (8019954 <HAL_TIM_PWM_Start+0x1f0>)
 80198fe:	4293      	cmp	r3, r2
 8019900:	d115      	bne.n	801992e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	689a      	ldr	r2, [r3, #8]
 8019908:	4b18      	ldr	r3, [pc, #96]	; (801996c <HAL_TIM_PWM_Start+0x208>)
 801990a:	4013      	ands	r3, r2
 801990c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	2b06      	cmp	r3, #6
 8019912:	d015      	beq.n	8019940 <HAL_TIM_PWM_Start+0x1dc>
 8019914:	68fb      	ldr	r3, [r7, #12]
 8019916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801991a:	d011      	beq.n	8019940 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	681b      	ldr	r3, [r3, #0]
 8019920:	681a      	ldr	r2, [r3, #0]
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	f042 0201 	orr.w	r2, r2, #1
 801992a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801992c:	e008      	b.n	8019940 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	681a      	ldr	r2, [r3, #0]
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	f042 0201 	orr.w	r2, r2, #1
 801993c:	601a      	str	r2, [r3, #0]
 801993e:	e000      	b.n	8019942 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019940:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8019942:	2300      	movs	r3, #0
}
 8019944:	4618      	mov	r0, r3
 8019946:	3710      	adds	r7, #16
 8019948:	46bd      	mov	sp, r7
 801994a:	bd80      	pop	{r7, pc}
 801994c:	40012c00 	.word	0x40012c00
 8019950:	40013400 	.word	0x40013400
 8019954:	40014000 	.word	0x40014000
 8019958:	40014400 	.word	0x40014400
 801995c:	40014800 	.word	0x40014800
 8019960:	40000400 	.word	0x40000400
 8019964:	40000800 	.word	0x40000800
 8019968:	40000c00 	.word	0x40000c00
 801996c:	00010007 	.word	0x00010007

08019970 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8019970:	b580      	push	{r7, lr}
 8019972:	b082      	sub	sp, #8
 8019974:	af00      	add	r7, sp, #0
 8019976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	2b00      	cmp	r3, #0
 801997c:	d101      	bne.n	8019982 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801997e:	2301      	movs	r3, #1
 8019980:	e049      	b.n	8019a16 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019988:	b2db      	uxtb	r3, r3
 801998a:	2b00      	cmp	r3, #0
 801998c:	d106      	bne.n	801999c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	2200      	movs	r2, #0
 8019992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8019996:	6878      	ldr	r0, [r7, #4]
 8019998:	f000 f841 	bl	8019a1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	2202      	movs	r2, #2
 80199a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	681a      	ldr	r2, [r3, #0]
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	3304      	adds	r3, #4
 80199ac:	4619      	mov	r1, r3
 80199ae:	4610      	mov	r0, r2
 80199b0:	f000 feba 	bl	801a728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	2201      	movs	r2, #1
 80199b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	2201      	movs	r2, #1
 80199c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	2201      	movs	r2, #1
 80199c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	2201      	movs	r2, #1
 80199d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	2201      	movs	r2, #1
 80199d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	2201      	movs	r2, #1
 80199e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	2201      	movs	r2, #1
 80199e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	2201      	movs	r2, #1
 80199f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	2201      	movs	r2, #1
 80199f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	2201      	movs	r2, #1
 8019a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	2201      	movs	r2, #1
 8019a08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	2201      	movs	r2, #1
 8019a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019a14:	2300      	movs	r3, #0
}
 8019a16:	4618      	mov	r0, r3
 8019a18:	3708      	adds	r7, #8
 8019a1a:	46bd      	mov	sp, r7
 8019a1c:	bd80      	pop	{r7, pc}

08019a1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8019a1e:	b480      	push	{r7}
 8019a20:	b083      	sub	sp, #12
 8019a22:	af00      	add	r7, sp, #0
 8019a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8019a26:	bf00      	nop
 8019a28:	370c      	adds	r7, #12
 8019a2a:	46bd      	mov	sp, r7
 8019a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a30:	4770      	bx	lr
	...

08019a34 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019a34:	b580      	push	{r7, lr}
 8019a36:	b084      	sub	sp, #16
 8019a38:	af00      	add	r7, sp, #0
 8019a3a:	6078      	str	r0, [r7, #4]
 8019a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8019a3e:	2300      	movs	r3, #0
 8019a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8019a42:	683b      	ldr	r3, [r7, #0]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d104      	bne.n	8019a52 <HAL_TIM_IC_Start_IT+0x1e>
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019a4e:	b2db      	uxtb	r3, r3
 8019a50:	e023      	b.n	8019a9a <HAL_TIM_IC_Start_IT+0x66>
 8019a52:	683b      	ldr	r3, [r7, #0]
 8019a54:	2b04      	cmp	r3, #4
 8019a56:	d104      	bne.n	8019a62 <HAL_TIM_IC_Start_IT+0x2e>
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8019a5e:	b2db      	uxtb	r3, r3
 8019a60:	e01b      	b.n	8019a9a <HAL_TIM_IC_Start_IT+0x66>
 8019a62:	683b      	ldr	r3, [r7, #0]
 8019a64:	2b08      	cmp	r3, #8
 8019a66:	d104      	bne.n	8019a72 <HAL_TIM_IC_Start_IT+0x3e>
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019a6e:	b2db      	uxtb	r3, r3
 8019a70:	e013      	b.n	8019a9a <HAL_TIM_IC_Start_IT+0x66>
 8019a72:	683b      	ldr	r3, [r7, #0]
 8019a74:	2b0c      	cmp	r3, #12
 8019a76:	d104      	bne.n	8019a82 <HAL_TIM_IC_Start_IT+0x4e>
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019a7e:	b2db      	uxtb	r3, r3
 8019a80:	e00b      	b.n	8019a9a <HAL_TIM_IC_Start_IT+0x66>
 8019a82:	683b      	ldr	r3, [r7, #0]
 8019a84:	2b10      	cmp	r3, #16
 8019a86:	d104      	bne.n	8019a92 <HAL_TIM_IC_Start_IT+0x5e>
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019a8e:	b2db      	uxtb	r3, r3
 8019a90:	e003      	b.n	8019a9a <HAL_TIM_IC_Start_IT+0x66>
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019a98:	b2db      	uxtb	r3, r3
 8019a9a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8019a9c:	683b      	ldr	r3, [r7, #0]
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d104      	bne.n	8019aac <HAL_TIM_IC_Start_IT+0x78>
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019aa8:	b2db      	uxtb	r3, r3
 8019aaa:	e013      	b.n	8019ad4 <HAL_TIM_IC_Start_IT+0xa0>
 8019aac:	683b      	ldr	r3, [r7, #0]
 8019aae:	2b04      	cmp	r3, #4
 8019ab0:	d104      	bne.n	8019abc <HAL_TIM_IC_Start_IT+0x88>
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019ab8:	b2db      	uxtb	r3, r3
 8019aba:	e00b      	b.n	8019ad4 <HAL_TIM_IC_Start_IT+0xa0>
 8019abc:	683b      	ldr	r3, [r7, #0]
 8019abe:	2b08      	cmp	r3, #8
 8019ac0:	d104      	bne.n	8019acc <HAL_TIM_IC_Start_IT+0x98>
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019ac8:	b2db      	uxtb	r3, r3
 8019aca:	e003      	b.n	8019ad4 <HAL_TIM_IC_Start_IT+0xa0>
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019ad2:	b2db      	uxtb	r3, r3
 8019ad4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8019ad6:	7bbb      	ldrb	r3, [r7, #14]
 8019ad8:	2b01      	cmp	r3, #1
 8019ada:	d102      	bne.n	8019ae2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8019adc:	7b7b      	ldrb	r3, [r7, #13]
 8019ade:	2b01      	cmp	r3, #1
 8019ae0:	d001      	beq.n	8019ae6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8019ae2:	2301      	movs	r3, #1
 8019ae4:	e0dd      	b.n	8019ca2 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8019ae6:	683b      	ldr	r3, [r7, #0]
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d104      	bne.n	8019af6 <HAL_TIM_IC_Start_IT+0xc2>
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	2202      	movs	r2, #2
 8019af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019af4:	e023      	b.n	8019b3e <HAL_TIM_IC_Start_IT+0x10a>
 8019af6:	683b      	ldr	r3, [r7, #0]
 8019af8:	2b04      	cmp	r3, #4
 8019afa:	d104      	bne.n	8019b06 <HAL_TIM_IC_Start_IT+0xd2>
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	2202      	movs	r2, #2
 8019b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019b04:	e01b      	b.n	8019b3e <HAL_TIM_IC_Start_IT+0x10a>
 8019b06:	683b      	ldr	r3, [r7, #0]
 8019b08:	2b08      	cmp	r3, #8
 8019b0a:	d104      	bne.n	8019b16 <HAL_TIM_IC_Start_IT+0xe2>
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	2202      	movs	r2, #2
 8019b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019b14:	e013      	b.n	8019b3e <HAL_TIM_IC_Start_IT+0x10a>
 8019b16:	683b      	ldr	r3, [r7, #0]
 8019b18:	2b0c      	cmp	r3, #12
 8019b1a:	d104      	bne.n	8019b26 <HAL_TIM_IC_Start_IT+0xf2>
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	2202      	movs	r2, #2
 8019b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8019b24:	e00b      	b.n	8019b3e <HAL_TIM_IC_Start_IT+0x10a>
 8019b26:	683b      	ldr	r3, [r7, #0]
 8019b28:	2b10      	cmp	r3, #16
 8019b2a:	d104      	bne.n	8019b36 <HAL_TIM_IC_Start_IT+0x102>
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	2202      	movs	r2, #2
 8019b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019b34:	e003      	b.n	8019b3e <HAL_TIM_IC_Start_IT+0x10a>
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	2202      	movs	r2, #2
 8019b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8019b3e:	683b      	ldr	r3, [r7, #0]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d104      	bne.n	8019b4e <HAL_TIM_IC_Start_IT+0x11a>
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	2202      	movs	r2, #2
 8019b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019b4c:	e013      	b.n	8019b76 <HAL_TIM_IC_Start_IT+0x142>
 8019b4e:	683b      	ldr	r3, [r7, #0]
 8019b50:	2b04      	cmp	r3, #4
 8019b52:	d104      	bne.n	8019b5e <HAL_TIM_IC_Start_IT+0x12a>
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	2202      	movs	r2, #2
 8019b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019b5c:	e00b      	b.n	8019b76 <HAL_TIM_IC_Start_IT+0x142>
 8019b5e:	683b      	ldr	r3, [r7, #0]
 8019b60:	2b08      	cmp	r3, #8
 8019b62:	d104      	bne.n	8019b6e <HAL_TIM_IC_Start_IT+0x13a>
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	2202      	movs	r2, #2
 8019b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8019b6c:	e003      	b.n	8019b76 <HAL_TIM_IC_Start_IT+0x142>
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	2202      	movs	r2, #2
 8019b72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8019b76:	683b      	ldr	r3, [r7, #0]
 8019b78:	2b0c      	cmp	r3, #12
 8019b7a:	d841      	bhi.n	8019c00 <HAL_TIM_IC_Start_IT+0x1cc>
 8019b7c:	a201      	add	r2, pc, #4	; (adr r2, 8019b84 <HAL_TIM_IC_Start_IT+0x150>)
 8019b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b82:	bf00      	nop
 8019b84:	08019bb9 	.word	0x08019bb9
 8019b88:	08019c01 	.word	0x08019c01
 8019b8c:	08019c01 	.word	0x08019c01
 8019b90:	08019c01 	.word	0x08019c01
 8019b94:	08019bcb 	.word	0x08019bcb
 8019b98:	08019c01 	.word	0x08019c01
 8019b9c:	08019c01 	.word	0x08019c01
 8019ba0:	08019c01 	.word	0x08019c01
 8019ba4:	08019bdd 	.word	0x08019bdd
 8019ba8:	08019c01 	.word	0x08019c01
 8019bac:	08019c01 	.word	0x08019c01
 8019bb0:	08019c01 	.word	0x08019c01
 8019bb4:	08019bef 	.word	0x08019bef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	68da      	ldr	r2, [r3, #12]
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	f042 0202 	orr.w	r2, r2, #2
 8019bc6:	60da      	str	r2, [r3, #12]
      break;
 8019bc8:	e01d      	b.n	8019c06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	68da      	ldr	r2, [r3, #12]
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	f042 0204 	orr.w	r2, r2, #4
 8019bd8:	60da      	str	r2, [r3, #12]
      break;
 8019bda:	e014      	b.n	8019c06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	68da      	ldr	r2, [r3, #12]
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	f042 0208 	orr.w	r2, r2, #8
 8019bea:	60da      	str	r2, [r3, #12]
      break;
 8019bec:	e00b      	b.n	8019c06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	68da      	ldr	r2, [r3, #12]
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	f042 0210 	orr.w	r2, r2, #16
 8019bfc:	60da      	str	r2, [r3, #12]
      break;
 8019bfe:	e002      	b.n	8019c06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8019c00:	2301      	movs	r3, #1
 8019c02:	73fb      	strb	r3, [r7, #15]
      break;
 8019c04:	bf00      	nop
  }

  if (status == HAL_OK)
 8019c06:	7bfb      	ldrb	r3, [r7, #15]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d149      	bne.n	8019ca0 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	2201      	movs	r2, #1
 8019c12:	6839      	ldr	r1, [r7, #0]
 8019c14:	4618      	mov	r0, r3
 8019c16:	f001 fab7 	bl	801b188 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	4a23      	ldr	r2, [pc, #140]	; (8019cac <HAL_TIM_IC_Start_IT+0x278>)
 8019c20:	4293      	cmp	r3, r2
 8019c22:	d01d      	beq.n	8019c60 <HAL_TIM_IC_Start_IT+0x22c>
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019c2c:	d018      	beq.n	8019c60 <HAL_TIM_IC_Start_IT+0x22c>
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	4a1f      	ldr	r2, [pc, #124]	; (8019cb0 <HAL_TIM_IC_Start_IT+0x27c>)
 8019c34:	4293      	cmp	r3, r2
 8019c36:	d013      	beq.n	8019c60 <HAL_TIM_IC_Start_IT+0x22c>
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	4a1d      	ldr	r2, [pc, #116]	; (8019cb4 <HAL_TIM_IC_Start_IT+0x280>)
 8019c3e:	4293      	cmp	r3, r2
 8019c40:	d00e      	beq.n	8019c60 <HAL_TIM_IC_Start_IT+0x22c>
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	4a1c      	ldr	r2, [pc, #112]	; (8019cb8 <HAL_TIM_IC_Start_IT+0x284>)
 8019c48:	4293      	cmp	r3, r2
 8019c4a:	d009      	beq.n	8019c60 <HAL_TIM_IC_Start_IT+0x22c>
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	4a1a      	ldr	r2, [pc, #104]	; (8019cbc <HAL_TIM_IC_Start_IT+0x288>)
 8019c52:	4293      	cmp	r3, r2
 8019c54:	d004      	beq.n	8019c60 <HAL_TIM_IC_Start_IT+0x22c>
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	4a19      	ldr	r2, [pc, #100]	; (8019cc0 <HAL_TIM_IC_Start_IT+0x28c>)
 8019c5c:	4293      	cmp	r3, r2
 8019c5e:	d115      	bne.n	8019c8c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	689a      	ldr	r2, [r3, #8]
 8019c66:	4b17      	ldr	r3, [pc, #92]	; (8019cc4 <HAL_TIM_IC_Start_IT+0x290>)
 8019c68:	4013      	ands	r3, r2
 8019c6a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019c6c:	68bb      	ldr	r3, [r7, #8]
 8019c6e:	2b06      	cmp	r3, #6
 8019c70:	d015      	beq.n	8019c9e <HAL_TIM_IC_Start_IT+0x26a>
 8019c72:	68bb      	ldr	r3, [r7, #8]
 8019c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019c78:	d011      	beq.n	8019c9e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	681a      	ldr	r2, [r3, #0]
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	f042 0201 	orr.w	r2, r2, #1
 8019c88:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019c8a:	e008      	b.n	8019c9e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	681a      	ldr	r2, [r3, #0]
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	f042 0201 	orr.w	r2, r2, #1
 8019c9a:	601a      	str	r2, [r3, #0]
 8019c9c:	e000      	b.n	8019ca0 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019c9e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8019ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ca2:	4618      	mov	r0, r3
 8019ca4:	3710      	adds	r7, #16
 8019ca6:	46bd      	mov	sp, r7
 8019ca8:	bd80      	pop	{r7, pc}
 8019caa:	bf00      	nop
 8019cac:	40012c00 	.word	0x40012c00
 8019cb0:	40000400 	.word	0x40000400
 8019cb4:	40000800 	.word	0x40000800
 8019cb8:	40000c00 	.word	0x40000c00
 8019cbc:	40013400 	.word	0x40013400
 8019cc0:	40014000 	.word	0x40014000
 8019cc4:	00010007 	.word	0x00010007

08019cc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8019cc8:	b580      	push	{r7, lr}
 8019cca:	b086      	sub	sp, #24
 8019ccc:	af00      	add	r7, sp, #0
 8019cce:	6078      	str	r0, [r7, #4]
 8019cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d101      	bne.n	8019cdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8019cd8:	2301      	movs	r3, #1
 8019cda:	e097      	b.n	8019e0c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019ce2:	b2db      	uxtb	r3, r3
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d106      	bne.n	8019cf6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	2200      	movs	r2, #0
 8019cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8019cf0:	6878      	ldr	r0, [r7, #4]
 8019cf2:	f7f9 f87d 	bl	8012df0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	2202      	movs	r2, #2
 8019cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	689b      	ldr	r3, [r3, #8]
 8019d04:	687a      	ldr	r2, [r7, #4]
 8019d06:	6812      	ldr	r2, [r2, #0]
 8019d08:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8019d0c:	f023 0307 	bic.w	r3, r3, #7
 8019d10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	681a      	ldr	r2, [r3, #0]
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	3304      	adds	r3, #4
 8019d1a:	4619      	mov	r1, r3
 8019d1c:	4610      	mov	r0, r2
 8019d1e:	f000 fd03 	bl	801a728 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	689b      	ldr	r3, [r3, #8]
 8019d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	699b      	ldr	r3, [r3, #24]
 8019d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	6a1b      	ldr	r3, [r3, #32]
 8019d38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8019d3a:	683b      	ldr	r3, [r7, #0]
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	697a      	ldr	r2, [r7, #20]
 8019d40:	4313      	orrs	r3, r2
 8019d42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8019d44:	693b      	ldr	r3, [r7, #16]
 8019d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019d4a:	f023 0303 	bic.w	r3, r3, #3
 8019d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8019d50:	683b      	ldr	r3, [r7, #0]
 8019d52:	689a      	ldr	r2, [r3, #8]
 8019d54:	683b      	ldr	r3, [r7, #0]
 8019d56:	699b      	ldr	r3, [r3, #24]
 8019d58:	021b      	lsls	r3, r3, #8
 8019d5a:	4313      	orrs	r3, r2
 8019d5c:	693a      	ldr	r2, [r7, #16]
 8019d5e:	4313      	orrs	r3, r2
 8019d60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8019d62:	693b      	ldr	r3, [r7, #16]
 8019d64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8019d68:	f023 030c 	bic.w	r3, r3, #12
 8019d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8019d6e:	693b      	ldr	r3, [r7, #16]
 8019d70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8019d74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8019d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8019d7a:	683b      	ldr	r3, [r7, #0]
 8019d7c:	68da      	ldr	r2, [r3, #12]
 8019d7e:	683b      	ldr	r3, [r7, #0]
 8019d80:	69db      	ldr	r3, [r3, #28]
 8019d82:	021b      	lsls	r3, r3, #8
 8019d84:	4313      	orrs	r3, r2
 8019d86:	693a      	ldr	r2, [r7, #16]
 8019d88:	4313      	orrs	r3, r2
 8019d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8019d8c:	683b      	ldr	r3, [r7, #0]
 8019d8e:	691b      	ldr	r3, [r3, #16]
 8019d90:	011a      	lsls	r2, r3, #4
 8019d92:	683b      	ldr	r3, [r7, #0]
 8019d94:	6a1b      	ldr	r3, [r3, #32]
 8019d96:	031b      	lsls	r3, r3, #12
 8019d98:	4313      	orrs	r3, r2
 8019d9a:	693a      	ldr	r2, [r7, #16]
 8019d9c:	4313      	orrs	r3, r2
 8019d9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8019da6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8019dae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8019db0:	683b      	ldr	r3, [r7, #0]
 8019db2:	685a      	ldr	r2, [r3, #4]
 8019db4:	683b      	ldr	r3, [r7, #0]
 8019db6:	695b      	ldr	r3, [r3, #20]
 8019db8:	011b      	lsls	r3, r3, #4
 8019dba:	4313      	orrs	r3, r2
 8019dbc:	68fa      	ldr	r2, [r7, #12]
 8019dbe:	4313      	orrs	r3, r2
 8019dc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	697a      	ldr	r2, [r7, #20]
 8019dc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	693a      	ldr	r2, [r7, #16]
 8019dd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	68fa      	ldr	r2, [r7, #12]
 8019dd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	2201      	movs	r2, #1
 8019dde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	2201      	movs	r2, #1
 8019de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	2201      	movs	r2, #1
 8019dee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	2201      	movs	r2, #1
 8019df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	2201      	movs	r2, #1
 8019dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	2201      	movs	r2, #1
 8019e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019e0a:	2300      	movs	r3, #0
}
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	3718      	adds	r7, #24
 8019e10:	46bd      	mov	sp, r7
 8019e12:	bd80      	pop	{r7, pc}

08019e14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b084      	sub	sp, #16
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	6078      	str	r0, [r7, #4]
 8019e1c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019e24:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8019e2c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019e34:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019e3c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8019e3e:	683b      	ldr	r3, [r7, #0]
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d110      	bne.n	8019e66 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8019e44:	7bfb      	ldrb	r3, [r7, #15]
 8019e46:	2b01      	cmp	r3, #1
 8019e48:	d102      	bne.n	8019e50 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8019e4a:	7b7b      	ldrb	r3, [r7, #13]
 8019e4c:	2b01      	cmp	r3, #1
 8019e4e:	d001      	beq.n	8019e54 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8019e50:	2301      	movs	r3, #1
 8019e52:	e069      	b.n	8019f28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	2202      	movs	r2, #2
 8019e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	2202      	movs	r2, #2
 8019e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019e64:	e031      	b.n	8019eca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8019e66:	683b      	ldr	r3, [r7, #0]
 8019e68:	2b04      	cmp	r3, #4
 8019e6a:	d110      	bne.n	8019e8e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8019e6c:	7bbb      	ldrb	r3, [r7, #14]
 8019e6e:	2b01      	cmp	r3, #1
 8019e70:	d102      	bne.n	8019e78 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8019e72:	7b3b      	ldrb	r3, [r7, #12]
 8019e74:	2b01      	cmp	r3, #1
 8019e76:	d001      	beq.n	8019e7c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8019e78:	2301      	movs	r3, #1
 8019e7a:	e055      	b.n	8019f28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	2202      	movs	r2, #2
 8019e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	2202      	movs	r2, #2
 8019e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019e8c:	e01d      	b.n	8019eca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8019e8e:	7bfb      	ldrb	r3, [r7, #15]
 8019e90:	2b01      	cmp	r3, #1
 8019e92:	d108      	bne.n	8019ea6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8019e94:	7bbb      	ldrb	r3, [r7, #14]
 8019e96:	2b01      	cmp	r3, #1
 8019e98:	d105      	bne.n	8019ea6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8019e9a:	7b7b      	ldrb	r3, [r7, #13]
 8019e9c:	2b01      	cmp	r3, #1
 8019e9e:	d102      	bne.n	8019ea6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8019ea0:	7b3b      	ldrb	r3, [r7, #12]
 8019ea2:	2b01      	cmp	r3, #1
 8019ea4:	d001      	beq.n	8019eaa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8019ea6:	2301      	movs	r3, #1
 8019ea8:	e03e      	b.n	8019f28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	2202      	movs	r2, #2
 8019eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	2202      	movs	r2, #2
 8019eb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	2202      	movs	r2, #2
 8019ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	2202      	movs	r2, #2
 8019ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8019eca:	683b      	ldr	r3, [r7, #0]
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d003      	beq.n	8019ed8 <HAL_TIM_Encoder_Start+0xc4>
 8019ed0:	683b      	ldr	r3, [r7, #0]
 8019ed2:	2b04      	cmp	r3, #4
 8019ed4:	d008      	beq.n	8019ee8 <HAL_TIM_Encoder_Start+0xd4>
 8019ed6:	e00f      	b.n	8019ef8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	2201      	movs	r2, #1
 8019ede:	2100      	movs	r1, #0
 8019ee0:	4618      	mov	r0, r3
 8019ee2:	f001 f951 	bl	801b188 <TIM_CCxChannelCmd>
      break;
 8019ee6:	e016      	b.n	8019f16 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	2201      	movs	r2, #1
 8019eee:	2104      	movs	r1, #4
 8019ef0:	4618      	mov	r0, r3
 8019ef2:	f001 f949 	bl	801b188 <TIM_CCxChannelCmd>
      break;
 8019ef6:	e00e      	b.n	8019f16 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	2201      	movs	r2, #1
 8019efe:	2100      	movs	r1, #0
 8019f00:	4618      	mov	r0, r3
 8019f02:	f001 f941 	bl	801b188 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	2201      	movs	r2, #1
 8019f0c:	2104      	movs	r1, #4
 8019f0e:	4618      	mov	r0, r3
 8019f10:	f001 f93a 	bl	801b188 <TIM_CCxChannelCmd>
      break;
 8019f14:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	681a      	ldr	r2, [r3, #0]
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	f042 0201 	orr.w	r2, r2, #1
 8019f24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8019f26:	2300      	movs	r3, #0
}
 8019f28:	4618      	mov	r0, r3
 8019f2a:	3710      	adds	r7, #16
 8019f2c:	46bd      	mov	sp, r7
 8019f2e:	bd80      	pop	{r7, pc}

08019f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8019f30:	b580      	push	{r7, lr}
 8019f32:	b082      	sub	sp, #8
 8019f34:	af00      	add	r7, sp, #0
 8019f36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	691b      	ldr	r3, [r3, #16]
 8019f3e:	f003 0302 	and.w	r3, r3, #2
 8019f42:	2b02      	cmp	r3, #2
 8019f44:	d122      	bne.n	8019f8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	68db      	ldr	r3, [r3, #12]
 8019f4c:	f003 0302 	and.w	r3, r3, #2
 8019f50:	2b02      	cmp	r3, #2
 8019f52:	d11b      	bne.n	8019f8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	f06f 0202 	mvn.w	r2, #2
 8019f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	2201      	movs	r2, #1
 8019f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	699b      	ldr	r3, [r3, #24]
 8019f6a:	f003 0303 	and.w	r3, r3, #3
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d003      	beq.n	8019f7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8019f72:	6878      	ldr	r0, [r7, #4]
 8019f74:	f7ea f972 	bl	800425c <HAL_TIM_IC_CaptureCallback>
 8019f78:	e005      	b.n	8019f86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8019f7a:	6878      	ldr	r0, [r7, #4]
 8019f7c:	f000 fbb6 	bl	801a6ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019f80:	6878      	ldr	r0, [r7, #4]
 8019f82:	f000 fbbd 	bl	801a700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	2200      	movs	r2, #0
 8019f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	691b      	ldr	r3, [r3, #16]
 8019f92:	f003 0304 	and.w	r3, r3, #4
 8019f96:	2b04      	cmp	r3, #4
 8019f98:	d122      	bne.n	8019fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	68db      	ldr	r3, [r3, #12]
 8019fa0:	f003 0304 	and.w	r3, r3, #4
 8019fa4:	2b04      	cmp	r3, #4
 8019fa6:	d11b      	bne.n	8019fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	f06f 0204 	mvn.w	r2, #4
 8019fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	2202      	movs	r2, #2
 8019fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	699b      	ldr	r3, [r3, #24]
 8019fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d003      	beq.n	8019fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019fc6:	6878      	ldr	r0, [r7, #4]
 8019fc8:	f7ea f948 	bl	800425c <HAL_TIM_IC_CaptureCallback>
 8019fcc:	e005      	b.n	8019fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019fce:	6878      	ldr	r0, [r7, #4]
 8019fd0:	f000 fb8c 	bl	801a6ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019fd4:	6878      	ldr	r0, [r7, #4]
 8019fd6:	f000 fb93 	bl	801a700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	2200      	movs	r2, #0
 8019fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	691b      	ldr	r3, [r3, #16]
 8019fe6:	f003 0308 	and.w	r3, r3, #8
 8019fea:	2b08      	cmp	r3, #8
 8019fec:	d122      	bne.n	801a034 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	68db      	ldr	r3, [r3, #12]
 8019ff4:	f003 0308 	and.w	r3, r3, #8
 8019ff8:	2b08      	cmp	r3, #8
 8019ffa:	d11b      	bne.n	801a034 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	f06f 0208 	mvn.w	r2, #8
 801a004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	2204      	movs	r2, #4
 801a00a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	69db      	ldr	r3, [r3, #28]
 801a012:	f003 0303 	and.w	r3, r3, #3
 801a016:	2b00      	cmp	r3, #0
 801a018:	d003      	beq.n	801a022 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a01a:	6878      	ldr	r0, [r7, #4]
 801a01c:	f7ea f91e 	bl	800425c <HAL_TIM_IC_CaptureCallback>
 801a020:	e005      	b.n	801a02e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a022:	6878      	ldr	r0, [r7, #4]
 801a024:	f000 fb62 	bl	801a6ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a028:	6878      	ldr	r0, [r7, #4]
 801a02a:	f000 fb69 	bl	801a700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	2200      	movs	r2, #0
 801a032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	691b      	ldr	r3, [r3, #16]
 801a03a:	f003 0310 	and.w	r3, r3, #16
 801a03e:	2b10      	cmp	r3, #16
 801a040:	d122      	bne.n	801a088 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	68db      	ldr	r3, [r3, #12]
 801a048:	f003 0310 	and.w	r3, r3, #16
 801a04c:	2b10      	cmp	r3, #16
 801a04e:	d11b      	bne.n	801a088 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	f06f 0210 	mvn.w	r2, #16
 801a058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	2208      	movs	r2, #8
 801a05e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	69db      	ldr	r3, [r3, #28]
 801a066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d003      	beq.n	801a076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a06e:	6878      	ldr	r0, [r7, #4]
 801a070:	f7ea f8f4 	bl	800425c <HAL_TIM_IC_CaptureCallback>
 801a074:	e005      	b.n	801a082 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a076:	6878      	ldr	r0, [r7, #4]
 801a078:	f000 fb38 	bl	801a6ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a07c:	6878      	ldr	r0, [r7, #4]
 801a07e:	f000 fb3f 	bl	801a700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	2200      	movs	r2, #0
 801a086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	691b      	ldr	r3, [r3, #16]
 801a08e:	f003 0301 	and.w	r3, r3, #1
 801a092:	2b01      	cmp	r3, #1
 801a094:	d10e      	bne.n	801a0b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	68db      	ldr	r3, [r3, #12]
 801a09c:	f003 0301 	and.w	r3, r3, #1
 801a0a0:	2b01      	cmp	r3, #1
 801a0a2:	d107      	bne.n	801a0b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	f06f 0201 	mvn.w	r2, #1
 801a0ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801a0ae:	6878      	ldr	r0, [r7, #4]
 801a0b0:	f7f8 fa9e 	bl	80125f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	691b      	ldr	r3, [r3, #16]
 801a0ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a0be:	2b80      	cmp	r3, #128	; 0x80
 801a0c0:	d10e      	bne.n	801a0e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	68db      	ldr	r3, [r3, #12]
 801a0c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a0cc:	2b80      	cmp	r3, #128	; 0x80
 801a0ce:	d107      	bne.n	801a0e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801a0d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801a0da:	6878      	ldr	r0, [r7, #4]
 801a0dc:	f001 f9ac 	bl	801b438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	691b      	ldr	r3, [r3, #16]
 801a0e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a0ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a0ee:	d10e      	bne.n	801a10e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	68db      	ldr	r3, [r3, #12]
 801a0f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a0fa:	2b80      	cmp	r3, #128	; 0x80
 801a0fc:	d107      	bne.n	801a10e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801a106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801a108:	6878      	ldr	r0, [r7, #4]
 801a10a:	f001 f99f 	bl	801b44c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	691b      	ldr	r3, [r3, #16]
 801a114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a118:	2b40      	cmp	r3, #64	; 0x40
 801a11a:	d10e      	bne.n	801a13a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	68db      	ldr	r3, [r3, #12]
 801a122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a126:	2b40      	cmp	r3, #64	; 0x40
 801a128:	d107      	bne.n	801a13a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801a132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801a134:	6878      	ldr	r0, [r7, #4]
 801a136:	f000 faed 	bl	801a714 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	691b      	ldr	r3, [r3, #16]
 801a140:	f003 0320 	and.w	r3, r3, #32
 801a144:	2b20      	cmp	r3, #32
 801a146:	d10e      	bne.n	801a166 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	681b      	ldr	r3, [r3, #0]
 801a14c:	68db      	ldr	r3, [r3, #12]
 801a14e:	f003 0320 	and.w	r3, r3, #32
 801a152:	2b20      	cmp	r3, #32
 801a154:	d107      	bne.n	801a166 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	f06f 0220 	mvn.w	r2, #32
 801a15e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801a160:	6878      	ldr	r0, [r7, #4]
 801a162:	f001 f95f 	bl	801b424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801a166:	bf00      	nop
 801a168:	3708      	adds	r7, #8
 801a16a:	46bd      	mov	sp, r7
 801a16c:	bd80      	pop	{r7, pc}

0801a16e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801a16e:	b580      	push	{r7, lr}
 801a170:	b086      	sub	sp, #24
 801a172:	af00      	add	r7, sp, #0
 801a174:	60f8      	str	r0, [r7, #12]
 801a176:	60b9      	str	r1, [r7, #8]
 801a178:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a17a:	2300      	movs	r3, #0
 801a17c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a184:	2b01      	cmp	r3, #1
 801a186:	d101      	bne.n	801a18c <HAL_TIM_IC_ConfigChannel+0x1e>
 801a188:	2302      	movs	r3, #2
 801a18a:	e088      	b.n	801a29e <HAL_TIM_IC_ConfigChannel+0x130>
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	2201      	movs	r2, #1
 801a190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	2b00      	cmp	r3, #0
 801a198:	d11b      	bne.n	801a1d2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	6818      	ldr	r0, [r3, #0]
 801a19e:	68bb      	ldr	r3, [r7, #8]
 801a1a0:	6819      	ldr	r1, [r3, #0]
 801a1a2:	68bb      	ldr	r3, [r7, #8]
 801a1a4:	685a      	ldr	r2, [r3, #4]
 801a1a6:	68bb      	ldr	r3, [r7, #8]
 801a1a8:	68db      	ldr	r3, [r3, #12]
 801a1aa:	f000 fe2d 	bl	801ae08 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	699a      	ldr	r2, [r3, #24]
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	f022 020c 	bic.w	r2, r2, #12
 801a1bc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	6999      	ldr	r1, [r3, #24]
 801a1c4:	68bb      	ldr	r3, [r7, #8]
 801a1c6:	689a      	ldr	r2, [r3, #8]
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	430a      	orrs	r2, r1
 801a1ce:	619a      	str	r2, [r3, #24]
 801a1d0:	e060      	b.n	801a294 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	2b04      	cmp	r3, #4
 801a1d6:	d11c      	bne.n	801a212 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	6818      	ldr	r0, [r3, #0]
 801a1dc:	68bb      	ldr	r3, [r7, #8]
 801a1de:	6819      	ldr	r1, [r3, #0]
 801a1e0:	68bb      	ldr	r3, [r7, #8]
 801a1e2:	685a      	ldr	r2, [r3, #4]
 801a1e4:	68bb      	ldr	r3, [r7, #8]
 801a1e6:	68db      	ldr	r3, [r3, #12]
 801a1e8:	f000 feab 	bl	801af42 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	699a      	ldr	r2, [r3, #24]
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801a1fa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801a1fc:	68fb      	ldr	r3, [r7, #12]
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	6999      	ldr	r1, [r3, #24]
 801a202:	68bb      	ldr	r3, [r7, #8]
 801a204:	689b      	ldr	r3, [r3, #8]
 801a206:	021a      	lsls	r2, r3, #8
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	430a      	orrs	r2, r1
 801a20e:	619a      	str	r2, [r3, #24]
 801a210:	e040      	b.n	801a294 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	2b08      	cmp	r3, #8
 801a216:	d11b      	bne.n	801a250 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	6818      	ldr	r0, [r3, #0]
 801a21c:	68bb      	ldr	r3, [r7, #8]
 801a21e:	6819      	ldr	r1, [r3, #0]
 801a220:	68bb      	ldr	r3, [r7, #8]
 801a222:	685a      	ldr	r2, [r3, #4]
 801a224:	68bb      	ldr	r3, [r7, #8]
 801a226:	68db      	ldr	r3, [r3, #12]
 801a228:	f000 fef8 	bl	801b01c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	681b      	ldr	r3, [r3, #0]
 801a230:	69da      	ldr	r2, [r3, #28]
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	f022 020c 	bic.w	r2, r2, #12
 801a23a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801a23c:	68fb      	ldr	r3, [r7, #12]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	69d9      	ldr	r1, [r3, #28]
 801a242:	68bb      	ldr	r3, [r7, #8]
 801a244:	689a      	ldr	r2, [r3, #8]
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	430a      	orrs	r2, r1
 801a24c:	61da      	str	r2, [r3, #28]
 801a24e:	e021      	b.n	801a294 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	2b0c      	cmp	r3, #12
 801a254:	d11c      	bne.n	801a290 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	6818      	ldr	r0, [r3, #0]
 801a25a:	68bb      	ldr	r3, [r7, #8]
 801a25c:	6819      	ldr	r1, [r3, #0]
 801a25e:	68bb      	ldr	r3, [r7, #8]
 801a260:	685a      	ldr	r2, [r3, #4]
 801a262:	68bb      	ldr	r3, [r7, #8]
 801a264:	68db      	ldr	r3, [r3, #12]
 801a266:	f000 ff15 	bl	801b094 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801a26a:	68fb      	ldr	r3, [r7, #12]
 801a26c:	681b      	ldr	r3, [r3, #0]
 801a26e:	69da      	ldr	r2, [r3, #28]
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801a278:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	69d9      	ldr	r1, [r3, #28]
 801a280:	68bb      	ldr	r3, [r7, #8]
 801a282:	689b      	ldr	r3, [r3, #8]
 801a284:	021a      	lsls	r2, r3, #8
 801a286:	68fb      	ldr	r3, [r7, #12]
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	430a      	orrs	r2, r1
 801a28c:	61da      	str	r2, [r3, #28]
 801a28e:	e001      	b.n	801a294 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801a290:	2301      	movs	r3, #1
 801a292:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801a294:	68fb      	ldr	r3, [r7, #12]
 801a296:	2200      	movs	r2, #0
 801a298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801a29c:	7dfb      	ldrb	r3, [r7, #23]
}
 801a29e:	4618      	mov	r0, r3
 801a2a0:	3718      	adds	r7, #24
 801a2a2:	46bd      	mov	sp, r7
 801a2a4:	bd80      	pop	{r7, pc}
	...

0801a2a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801a2a8:	b580      	push	{r7, lr}
 801a2aa:	b086      	sub	sp, #24
 801a2ac:	af00      	add	r7, sp, #0
 801a2ae:	60f8      	str	r0, [r7, #12]
 801a2b0:	60b9      	str	r1, [r7, #8]
 801a2b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801a2b8:	68fb      	ldr	r3, [r7, #12]
 801a2ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a2be:	2b01      	cmp	r3, #1
 801a2c0:	d101      	bne.n	801a2c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801a2c2:	2302      	movs	r3, #2
 801a2c4:	e0ff      	b.n	801a4c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801a2c6:	68fb      	ldr	r3, [r7, #12]
 801a2c8:	2201      	movs	r2, #1
 801a2ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	2b14      	cmp	r3, #20
 801a2d2:	f200 80f0 	bhi.w	801a4b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801a2d6:	a201      	add	r2, pc, #4	; (adr r2, 801a2dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 801a2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2dc:	0801a331 	.word	0x0801a331
 801a2e0:	0801a4b7 	.word	0x0801a4b7
 801a2e4:	0801a4b7 	.word	0x0801a4b7
 801a2e8:	0801a4b7 	.word	0x0801a4b7
 801a2ec:	0801a371 	.word	0x0801a371
 801a2f0:	0801a4b7 	.word	0x0801a4b7
 801a2f4:	0801a4b7 	.word	0x0801a4b7
 801a2f8:	0801a4b7 	.word	0x0801a4b7
 801a2fc:	0801a3b3 	.word	0x0801a3b3
 801a300:	0801a4b7 	.word	0x0801a4b7
 801a304:	0801a4b7 	.word	0x0801a4b7
 801a308:	0801a4b7 	.word	0x0801a4b7
 801a30c:	0801a3f3 	.word	0x0801a3f3
 801a310:	0801a4b7 	.word	0x0801a4b7
 801a314:	0801a4b7 	.word	0x0801a4b7
 801a318:	0801a4b7 	.word	0x0801a4b7
 801a31c:	0801a435 	.word	0x0801a435
 801a320:	0801a4b7 	.word	0x0801a4b7
 801a324:	0801a4b7 	.word	0x0801a4b7
 801a328:	0801a4b7 	.word	0x0801a4b7
 801a32c:	0801a475 	.word	0x0801a475
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	68b9      	ldr	r1, [r7, #8]
 801a336:	4618      	mov	r0, r3
 801a338:	f000 fa90 	bl	801a85c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801a33c:	68fb      	ldr	r3, [r7, #12]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	699a      	ldr	r2, [r3, #24]
 801a342:	68fb      	ldr	r3, [r7, #12]
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	f042 0208 	orr.w	r2, r2, #8
 801a34a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801a34c:	68fb      	ldr	r3, [r7, #12]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	699a      	ldr	r2, [r3, #24]
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	f022 0204 	bic.w	r2, r2, #4
 801a35a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801a35c:	68fb      	ldr	r3, [r7, #12]
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	6999      	ldr	r1, [r3, #24]
 801a362:	68bb      	ldr	r3, [r7, #8]
 801a364:	691a      	ldr	r2, [r3, #16]
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	430a      	orrs	r2, r1
 801a36c:	619a      	str	r2, [r3, #24]
      break;
 801a36e:	e0a5      	b.n	801a4bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	68b9      	ldr	r1, [r7, #8]
 801a376:	4618      	mov	r0, r3
 801a378:	f000 fb00 	bl	801a97c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	699a      	ldr	r2, [r3, #24]
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	681b      	ldr	r3, [r3, #0]
 801a386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a38a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801a38c:	68fb      	ldr	r3, [r7, #12]
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	699a      	ldr	r2, [r3, #24]
 801a392:	68fb      	ldr	r3, [r7, #12]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a39a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	6999      	ldr	r1, [r3, #24]
 801a3a2:	68bb      	ldr	r3, [r7, #8]
 801a3a4:	691b      	ldr	r3, [r3, #16]
 801a3a6:	021a      	lsls	r2, r3, #8
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	430a      	orrs	r2, r1
 801a3ae:	619a      	str	r2, [r3, #24]
      break;
 801a3b0:	e084      	b.n	801a4bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801a3b2:	68fb      	ldr	r3, [r7, #12]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	68b9      	ldr	r1, [r7, #8]
 801a3b8:	4618      	mov	r0, r3
 801a3ba:	f000 fb69 	bl	801aa90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	69da      	ldr	r2, [r3, #28]
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	681b      	ldr	r3, [r3, #0]
 801a3c8:	f042 0208 	orr.w	r2, r2, #8
 801a3cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801a3ce:	68fb      	ldr	r3, [r7, #12]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	69da      	ldr	r2, [r3, #28]
 801a3d4:	68fb      	ldr	r3, [r7, #12]
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	f022 0204 	bic.w	r2, r2, #4
 801a3dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	69d9      	ldr	r1, [r3, #28]
 801a3e4:	68bb      	ldr	r3, [r7, #8]
 801a3e6:	691a      	ldr	r2, [r3, #16]
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	430a      	orrs	r2, r1
 801a3ee:	61da      	str	r2, [r3, #28]
      break;
 801a3f0:	e064      	b.n	801a4bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801a3f2:	68fb      	ldr	r3, [r7, #12]
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	68b9      	ldr	r1, [r7, #8]
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	f000 fbd1 	bl	801aba0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	69da      	ldr	r2, [r3, #28]
 801a404:	68fb      	ldr	r3, [r7, #12]
 801a406:	681b      	ldr	r3, [r3, #0]
 801a408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a40c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801a40e:	68fb      	ldr	r3, [r7, #12]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	69da      	ldr	r2, [r3, #28]
 801a414:	68fb      	ldr	r3, [r7, #12]
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a41c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	69d9      	ldr	r1, [r3, #28]
 801a424:	68bb      	ldr	r3, [r7, #8]
 801a426:	691b      	ldr	r3, [r3, #16]
 801a428:	021a      	lsls	r2, r3, #8
 801a42a:	68fb      	ldr	r3, [r7, #12]
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	430a      	orrs	r2, r1
 801a430:	61da      	str	r2, [r3, #28]
      break;
 801a432:	e043      	b.n	801a4bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801a434:	68fb      	ldr	r3, [r7, #12]
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	68b9      	ldr	r1, [r7, #8]
 801a43a:	4618      	mov	r0, r3
 801a43c:	f000 fc1a 	bl	801ac74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a446:	68fb      	ldr	r3, [r7, #12]
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	f042 0208 	orr.w	r2, r2, #8
 801a44e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	681b      	ldr	r3, [r3, #0]
 801a45a:	f022 0204 	bic.w	r2, r2, #4
 801a45e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801a466:	68bb      	ldr	r3, [r7, #8]
 801a468:	691a      	ldr	r2, [r3, #16]
 801a46a:	68fb      	ldr	r3, [r7, #12]
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	430a      	orrs	r2, r1
 801a470:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801a472:	e023      	b.n	801a4bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801a474:	68fb      	ldr	r3, [r7, #12]
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	68b9      	ldr	r1, [r7, #8]
 801a47a:	4618      	mov	r0, r3
 801a47c:	f000 fc5e 	bl	801ad3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a48e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a496:	68fb      	ldr	r3, [r7, #12]
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a49e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801a4a0:	68fb      	ldr	r3, [r7, #12]
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801a4a6:	68bb      	ldr	r3, [r7, #8]
 801a4a8:	691b      	ldr	r3, [r3, #16]
 801a4aa:	021a      	lsls	r2, r3, #8
 801a4ac:	68fb      	ldr	r3, [r7, #12]
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	430a      	orrs	r2, r1
 801a4b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801a4b4:	e002      	b.n	801a4bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801a4b6:	2301      	movs	r3, #1
 801a4b8:	75fb      	strb	r3, [r7, #23]
      break;
 801a4ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	2200      	movs	r2, #0
 801a4c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801a4c4:	7dfb      	ldrb	r3, [r7, #23]
}
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	3718      	adds	r7, #24
 801a4ca:	46bd      	mov	sp, r7
 801a4cc:	bd80      	pop	{r7, pc}
 801a4ce:	bf00      	nop

0801a4d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801a4d0:	b580      	push	{r7, lr}
 801a4d2:	b084      	sub	sp, #16
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	6078      	str	r0, [r7, #4]
 801a4d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801a4da:	2300      	movs	r3, #0
 801a4dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a4e4:	2b01      	cmp	r3, #1
 801a4e6:	d101      	bne.n	801a4ec <HAL_TIM_ConfigClockSource+0x1c>
 801a4e8:	2302      	movs	r3, #2
 801a4ea:	e0b6      	b.n	801a65a <HAL_TIM_ConfigClockSource+0x18a>
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	2201      	movs	r2, #1
 801a4f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	2202      	movs	r2, #2
 801a4f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	689b      	ldr	r3, [r3, #8]
 801a502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801a504:	68bb      	ldr	r3, [r7, #8]
 801a506:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 801a50a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801a50e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801a510:	68bb      	ldr	r3, [r7, #8]
 801a512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801a516:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	68ba      	ldr	r2, [r7, #8]
 801a51e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801a520:	683b      	ldr	r3, [r7, #0]
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a528:	d03e      	beq.n	801a5a8 <HAL_TIM_ConfigClockSource+0xd8>
 801a52a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a52e:	f200 8087 	bhi.w	801a640 <HAL_TIM_ConfigClockSource+0x170>
 801a532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a536:	f000 8086 	beq.w	801a646 <HAL_TIM_ConfigClockSource+0x176>
 801a53a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a53e:	d87f      	bhi.n	801a640 <HAL_TIM_ConfigClockSource+0x170>
 801a540:	2b70      	cmp	r3, #112	; 0x70
 801a542:	d01a      	beq.n	801a57a <HAL_TIM_ConfigClockSource+0xaa>
 801a544:	2b70      	cmp	r3, #112	; 0x70
 801a546:	d87b      	bhi.n	801a640 <HAL_TIM_ConfigClockSource+0x170>
 801a548:	2b60      	cmp	r3, #96	; 0x60
 801a54a:	d050      	beq.n	801a5ee <HAL_TIM_ConfigClockSource+0x11e>
 801a54c:	2b60      	cmp	r3, #96	; 0x60
 801a54e:	d877      	bhi.n	801a640 <HAL_TIM_ConfigClockSource+0x170>
 801a550:	2b50      	cmp	r3, #80	; 0x50
 801a552:	d03c      	beq.n	801a5ce <HAL_TIM_ConfigClockSource+0xfe>
 801a554:	2b50      	cmp	r3, #80	; 0x50
 801a556:	d873      	bhi.n	801a640 <HAL_TIM_ConfigClockSource+0x170>
 801a558:	2b40      	cmp	r3, #64	; 0x40
 801a55a:	d058      	beq.n	801a60e <HAL_TIM_ConfigClockSource+0x13e>
 801a55c:	2b40      	cmp	r3, #64	; 0x40
 801a55e:	d86f      	bhi.n	801a640 <HAL_TIM_ConfigClockSource+0x170>
 801a560:	2b30      	cmp	r3, #48	; 0x30
 801a562:	d064      	beq.n	801a62e <HAL_TIM_ConfigClockSource+0x15e>
 801a564:	2b30      	cmp	r3, #48	; 0x30
 801a566:	d86b      	bhi.n	801a640 <HAL_TIM_ConfigClockSource+0x170>
 801a568:	2b20      	cmp	r3, #32
 801a56a:	d060      	beq.n	801a62e <HAL_TIM_ConfigClockSource+0x15e>
 801a56c:	2b20      	cmp	r3, #32
 801a56e:	d867      	bhi.n	801a640 <HAL_TIM_ConfigClockSource+0x170>
 801a570:	2b00      	cmp	r3, #0
 801a572:	d05c      	beq.n	801a62e <HAL_TIM_ConfigClockSource+0x15e>
 801a574:	2b10      	cmp	r3, #16
 801a576:	d05a      	beq.n	801a62e <HAL_TIM_ConfigClockSource+0x15e>
 801a578:	e062      	b.n	801a640 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	6818      	ldr	r0, [r3, #0]
 801a57e:	683b      	ldr	r3, [r7, #0]
 801a580:	6899      	ldr	r1, [r3, #8]
 801a582:	683b      	ldr	r3, [r7, #0]
 801a584:	685a      	ldr	r2, [r3, #4]
 801a586:	683b      	ldr	r3, [r7, #0]
 801a588:	68db      	ldr	r3, [r3, #12]
 801a58a:	f000 fddd 	bl	801b148 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	689b      	ldr	r3, [r3, #8]
 801a594:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801a596:	68bb      	ldr	r3, [r7, #8]
 801a598:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801a59c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	68ba      	ldr	r2, [r7, #8]
 801a5a4:	609a      	str	r2, [r3, #8]
      break;
 801a5a6:	e04f      	b.n	801a648 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	6818      	ldr	r0, [r3, #0]
 801a5ac:	683b      	ldr	r3, [r7, #0]
 801a5ae:	6899      	ldr	r1, [r3, #8]
 801a5b0:	683b      	ldr	r3, [r7, #0]
 801a5b2:	685a      	ldr	r2, [r3, #4]
 801a5b4:	683b      	ldr	r3, [r7, #0]
 801a5b6:	68db      	ldr	r3, [r3, #12]
 801a5b8:	f000 fdc6 	bl	801b148 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	689a      	ldr	r2, [r3, #8]
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801a5ca:	609a      	str	r2, [r3, #8]
      break;
 801a5cc:	e03c      	b.n	801a648 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	6818      	ldr	r0, [r3, #0]
 801a5d2:	683b      	ldr	r3, [r7, #0]
 801a5d4:	6859      	ldr	r1, [r3, #4]
 801a5d6:	683b      	ldr	r3, [r7, #0]
 801a5d8:	68db      	ldr	r3, [r3, #12]
 801a5da:	461a      	mov	r2, r3
 801a5dc:	f000 fc82 	bl	801aee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	681b      	ldr	r3, [r3, #0]
 801a5e4:	2150      	movs	r1, #80	; 0x50
 801a5e6:	4618      	mov	r0, r3
 801a5e8:	f000 fd91 	bl	801b10e <TIM_ITRx_SetConfig>
      break;
 801a5ec:	e02c      	b.n	801a648 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	6818      	ldr	r0, [r3, #0]
 801a5f2:	683b      	ldr	r3, [r7, #0]
 801a5f4:	6859      	ldr	r1, [r3, #4]
 801a5f6:	683b      	ldr	r3, [r7, #0]
 801a5f8:	68db      	ldr	r3, [r3, #12]
 801a5fa:	461a      	mov	r2, r3
 801a5fc:	f000 fcde 	bl	801afbc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	2160      	movs	r1, #96	; 0x60
 801a606:	4618      	mov	r0, r3
 801a608:	f000 fd81 	bl	801b10e <TIM_ITRx_SetConfig>
      break;
 801a60c:	e01c      	b.n	801a648 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	6818      	ldr	r0, [r3, #0]
 801a612:	683b      	ldr	r3, [r7, #0]
 801a614:	6859      	ldr	r1, [r3, #4]
 801a616:	683b      	ldr	r3, [r7, #0]
 801a618:	68db      	ldr	r3, [r3, #12]
 801a61a:	461a      	mov	r2, r3
 801a61c:	f000 fc62 	bl	801aee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	2140      	movs	r1, #64	; 0x40
 801a626:	4618      	mov	r0, r3
 801a628:	f000 fd71 	bl	801b10e <TIM_ITRx_SetConfig>
      break;
 801a62c:	e00c      	b.n	801a648 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	681a      	ldr	r2, [r3, #0]
 801a632:	683b      	ldr	r3, [r7, #0]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	4619      	mov	r1, r3
 801a638:	4610      	mov	r0, r2
 801a63a:	f000 fd68 	bl	801b10e <TIM_ITRx_SetConfig>
      break;
 801a63e:	e003      	b.n	801a648 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801a640:	2301      	movs	r3, #1
 801a642:	73fb      	strb	r3, [r7, #15]
      break;
 801a644:	e000      	b.n	801a648 <HAL_TIM_ConfigClockSource+0x178>
      break;
 801a646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	2201      	movs	r2, #1
 801a64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	2200      	movs	r2, #0
 801a654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801a658:	7bfb      	ldrb	r3, [r7, #15]
}
 801a65a:	4618      	mov	r0, r3
 801a65c:	3710      	adds	r7, #16
 801a65e:	46bd      	mov	sp, r7
 801a660:	bd80      	pop	{r7, pc}
	...

0801a664 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a664:	b480      	push	{r7}
 801a666:	b085      	sub	sp, #20
 801a668:	af00      	add	r7, sp, #0
 801a66a:	6078      	str	r0, [r7, #4]
 801a66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801a66e:	2300      	movs	r3, #0
 801a670:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801a672:	683b      	ldr	r3, [r7, #0]
 801a674:	2b0c      	cmp	r3, #12
 801a676:	d831      	bhi.n	801a6dc <HAL_TIM_ReadCapturedValue+0x78>
 801a678:	a201      	add	r2, pc, #4	; (adr r2, 801a680 <HAL_TIM_ReadCapturedValue+0x1c>)
 801a67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a67e:	bf00      	nop
 801a680:	0801a6b5 	.word	0x0801a6b5
 801a684:	0801a6dd 	.word	0x0801a6dd
 801a688:	0801a6dd 	.word	0x0801a6dd
 801a68c:	0801a6dd 	.word	0x0801a6dd
 801a690:	0801a6bf 	.word	0x0801a6bf
 801a694:	0801a6dd 	.word	0x0801a6dd
 801a698:	0801a6dd 	.word	0x0801a6dd
 801a69c:	0801a6dd 	.word	0x0801a6dd
 801a6a0:	0801a6c9 	.word	0x0801a6c9
 801a6a4:	0801a6dd 	.word	0x0801a6dd
 801a6a8:	0801a6dd 	.word	0x0801a6dd
 801a6ac:	0801a6dd 	.word	0x0801a6dd
 801a6b0:	0801a6d3 	.word	0x0801a6d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a6ba:	60fb      	str	r3, [r7, #12]

      break;
 801a6bc:	e00f      	b.n	801a6de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6c4:	60fb      	str	r3, [r7, #12]

      break;
 801a6c6:	e00a      	b.n	801a6de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a6ce:	60fb      	str	r3, [r7, #12]

      break;
 801a6d0:	e005      	b.n	801a6de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a6d8:	60fb      	str	r3, [r7, #12]

      break;
 801a6da:	e000      	b.n	801a6de <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801a6dc:	bf00      	nop
  }

  return tmpreg;
 801a6de:	68fb      	ldr	r3, [r7, #12]
}
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	3714      	adds	r7, #20
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ea:	4770      	bx	lr

0801a6ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801a6ec:	b480      	push	{r7}
 801a6ee:	b083      	sub	sp, #12
 801a6f0:	af00      	add	r7, sp, #0
 801a6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801a6f4:	bf00      	nop
 801a6f6:	370c      	adds	r7, #12
 801a6f8:	46bd      	mov	sp, r7
 801a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6fe:	4770      	bx	lr

0801a700 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801a700:	b480      	push	{r7}
 801a702:	b083      	sub	sp, #12
 801a704:	af00      	add	r7, sp, #0
 801a706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801a708:	bf00      	nop
 801a70a:	370c      	adds	r7, #12
 801a70c:	46bd      	mov	sp, r7
 801a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a712:	4770      	bx	lr

0801a714 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801a714:	b480      	push	{r7}
 801a716:	b083      	sub	sp, #12
 801a718:	af00      	add	r7, sp, #0
 801a71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801a71c:	bf00      	nop
 801a71e:	370c      	adds	r7, #12
 801a720:	46bd      	mov	sp, r7
 801a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a726:	4770      	bx	lr

0801a728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801a728:	b480      	push	{r7}
 801a72a:	b085      	sub	sp, #20
 801a72c:	af00      	add	r7, sp, #0
 801a72e:	6078      	str	r0, [r7, #4]
 801a730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	4a40      	ldr	r2, [pc, #256]	; (801a83c <TIM_Base_SetConfig+0x114>)
 801a73c:	4293      	cmp	r3, r2
 801a73e:	d013      	beq.n	801a768 <TIM_Base_SetConfig+0x40>
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a746:	d00f      	beq.n	801a768 <TIM_Base_SetConfig+0x40>
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	4a3d      	ldr	r2, [pc, #244]	; (801a840 <TIM_Base_SetConfig+0x118>)
 801a74c:	4293      	cmp	r3, r2
 801a74e:	d00b      	beq.n	801a768 <TIM_Base_SetConfig+0x40>
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	4a3c      	ldr	r2, [pc, #240]	; (801a844 <TIM_Base_SetConfig+0x11c>)
 801a754:	4293      	cmp	r3, r2
 801a756:	d007      	beq.n	801a768 <TIM_Base_SetConfig+0x40>
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	4a3b      	ldr	r2, [pc, #236]	; (801a848 <TIM_Base_SetConfig+0x120>)
 801a75c:	4293      	cmp	r3, r2
 801a75e:	d003      	beq.n	801a768 <TIM_Base_SetConfig+0x40>
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	4a3a      	ldr	r2, [pc, #232]	; (801a84c <TIM_Base_SetConfig+0x124>)
 801a764:	4293      	cmp	r3, r2
 801a766:	d108      	bne.n	801a77a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a76e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801a770:	683b      	ldr	r3, [r7, #0]
 801a772:	685b      	ldr	r3, [r3, #4]
 801a774:	68fa      	ldr	r2, [r7, #12]
 801a776:	4313      	orrs	r3, r2
 801a778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	4a2f      	ldr	r2, [pc, #188]	; (801a83c <TIM_Base_SetConfig+0x114>)
 801a77e:	4293      	cmp	r3, r2
 801a780:	d01f      	beq.n	801a7c2 <TIM_Base_SetConfig+0x9a>
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a788:	d01b      	beq.n	801a7c2 <TIM_Base_SetConfig+0x9a>
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	4a2c      	ldr	r2, [pc, #176]	; (801a840 <TIM_Base_SetConfig+0x118>)
 801a78e:	4293      	cmp	r3, r2
 801a790:	d017      	beq.n	801a7c2 <TIM_Base_SetConfig+0x9a>
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	4a2b      	ldr	r2, [pc, #172]	; (801a844 <TIM_Base_SetConfig+0x11c>)
 801a796:	4293      	cmp	r3, r2
 801a798:	d013      	beq.n	801a7c2 <TIM_Base_SetConfig+0x9a>
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	4a2a      	ldr	r2, [pc, #168]	; (801a848 <TIM_Base_SetConfig+0x120>)
 801a79e:	4293      	cmp	r3, r2
 801a7a0:	d00f      	beq.n	801a7c2 <TIM_Base_SetConfig+0x9a>
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	4a29      	ldr	r2, [pc, #164]	; (801a84c <TIM_Base_SetConfig+0x124>)
 801a7a6:	4293      	cmp	r3, r2
 801a7a8:	d00b      	beq.n	801a7c2 <TIM_Base_SetConfig+0x9a>
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	4a28      	ldr	r2, [pc, #160]	; (801a850 <TIM_Base_SetConfig+0x128>)
 801a7ae:	4293      	cmp	r3, r2
 801a7b0:	d007      	beq.n	801a7c2 <TIM_Base_SetConfig+0x9a>
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	4a27      	ldr	r2, [pc, #156]	; (801a854 <TIM_Base_SetConfig+0x12c>)
 801a7b6:	4293      	cmp	r3, r2
 801a7b8:	d003      	beq.n	801a7c2 <TIM_Base_SetConfig+0x9a>
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	4a26      	ldr	r2, [pc, #152]	; (801a858 <TIM_Base_SetConfig+0x130>)
 801a7be:	4293      	cmp	r3, r2
 801a7c0:	d108      	bne.n	801a7d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801a7c2:	68fb      	ldr	r3, [r7, #12]
 801a7c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801a7c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801a7ca:	683b      	ldr	r3, [r7, #0]
 801a7cc:	68db      	ldr	r3, [r3, #12]
 801a7ce:	68fa      	ldr	r2, [r7, #12]
 801a7d0:	4313      	orrs	r3, r2
 801a7d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801a7d4:	68fb      	ldr	r3, [r7, #12]
 801a7d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801a7da:	683b      	ldr	r3, [r7, #0]
 801a7dc:	695b      	ldr	r3, [r3, #20]
 801a7de:	4313      	orrs	r3, r2
 801a7e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	68fa      	ldr	r2, [r7, #12]
 801a7e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801a7e8:	683b      	ldr	r3, [r7, #0]
 801a7ea:	689a      	ldr	r2, [r3, #8]
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801a7f0:	683b      	ldr	r3, [r7, #0]
 801a7f2:	681a      	ldr	r2, [r3, #0]
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	4a10      	ldr	r2, [pc, #64]	; (801a83c <TIM_Base_SetConfig+0x114>)
 801a7fc:	4293      	cmp	r3, r2
 801a7fe:	d00f      	beq.n	801a820 <TIM_Base_SetConfig+0xf8>
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	4a12      	ldr	r2, [pc, #72]	; (801a84c <TIM_Base_SetConfig+0x124>)
 801a804:	4293      	cmp	r3, r2
 801a806:	d00b      	beq.n	801a820 <TIM_Base_SetConfig+0xf8>
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	4a11      	ldr	r2, [pc, #68]	; (801a850 <TIM_Base_SetConfig+0x128>)
 801a80c:	4293      	cmp	r3, r2
 801a80e:	d007      	beq.n	801a820 <TIM_Base_SetConfig+0xf8>
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	4a10      	ldr	r2, [pc, #64]	; (801a854 <TIM_Base_SetConfig+0x12c>)
 801a814:	4293      	cmp	r3, r2
 801a816:	d003      	beq.n	801a820 <TIM_Base_SetConfig+0xf8>
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	4a0f      	ldr	r2, [pc, #60]	; (801a858 <TIM_Base_SetConfig+0x130>)
 801a81c:	4293      	cmp	r3, r2
 801a81e:	d103      	bne.n	801a828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801a820:	683b      	ldr	r3, [r7, #0]
 801a822:	691a      	ldr	r2, [r3, #16]
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	2201      	movs	r2, #1
 801a82c:	615a      	str	r2, [r3, #20]
}
 801a82e:	bf00      	nop
 801a830:	3714      	adds	r7, #20
 801a832:	46bd      	mov	sp, r7
 801a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a838:	4770      	bx	lr
 801a83a:	bf00      	nop
 801a83c:	40012c00 	.word	0x40012c00
 801a840:	40000400 	.word	0x40000400
 801a844:	40000800 	.word	0x40000800
 801a848:	40000c00 	.word	0x40000c00
 801a84c:	40013400 	.word	0x40013400
 801a850:	40014000 	.word	0x40014000
 801a854:	40014400 	.word	0x40014400
 801a858:	40014800 	.word	0x40014800

0801a85c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a85c:	b480      	push	{r7}
 801a85e:	b087      	sub	sp, #28
 801a860:	af00      	add	r7, sp, #0
 801a862:	6078      	str	r0, [r7, #4]
 801a864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	6a1b      	ldr	r3, [r3, #32]
 801a86a:	f023 0201 	bic.w	r2, r3, #1
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	6a1b      	ldr	r3, [r3, #32]
 801a876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	685b      	ldr	r3, [r3, #4]
 801a87c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	699b      	ldr	r3, [r3, #24]
 801a882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a88a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a88e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801a890:	68fb      	ldr	r3, [r7, #12]
 801a892:	f023 0303 	bic.w	r3, r3, #3
 801a896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a898:	683b      	ldr	r3, [r7, #0]
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	68fa      	ldr	r2, [r7, #12]
 801a89e:	4313      	orrs	r3, r2
 801a8a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801a8a2:	697b      	ldr	r3, [r7, #20]
 801a8a4:	f023 0302 	bic.w	r3, r3, #2
 801a8a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801a8aa:	683b      	ldr	r3, [r7, #0]
 801a8ac:	689b      	ldr	r3, [r3, #8]
 801a8ae:	697a      	ldr	r2, [r7, #20]
 801a8b0:	4313      	orrs	r3, r2
 801a8b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	4a2c      	ldr	r2, [pc, #176]	; (801a968 <TIM_OC1_SetConfig+0x10c>)
 801a8b8:	4293      	cmp	r3, r2
 801a8ba:	d00f      	beq.n	801a8dc <TIM_OC1_SetConfig+0x80>
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	4a2b      	ldr	r2, [pc, #172]	; (801a96c <TIM_OC1_SetConfig+0x110>)
 801a8c0:	4293      	cmp	r3, r2
 801a8c2:	d00b      	beq.n	801a8dc <TIM_OC1_SetConfig+0x80>
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	4a2a      	ldr	r2, [pc, #168]	; (801a970 <TIM_OC1_SetConfig+0x114>)
 801a8c8:	4293      	cmp	r3, r2
 801a8ca:	d007      	beq.n	801a8dc <TIM_OC1_SetConfig+0x80>
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	4a29      	ldr	r2, [pc, #164]	; (801a974 <TIM_OC1_SetConfig+0x118>)
 801a8d0:	4293      	cmp	r3, r2
 801a8d2:	d003      	beq.n	801a8dc <TIM_OC1_SetConfig+0x80>
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	4a28      	ldr	r2, [pc, #160]	; (801a978 <TIM_OC1_SetConfig+0x11c>)
 801a8d8:	4293      	cmp	r3, r2
 801a8da:	d10c      	bne.n	801a8f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801a8dc:	697b      	ldr	r3, [r7, #20]
 801a8de:	f023 0308 	bic.w	r3, r3, #8
 801a8e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801a8e4:	683b      	ldr	r3, [r7, #0]
 801a8e6:	68db      	ldr	r3, [r3, #12]
 801a8e8:	697a      	ldr	r2, [r7, #20]
 801a8ea:	4313      	orrs	r3, r2
 801a8ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801a8ee:	697b      	ldr	r3, [r7, #20]
 801a8f0:	f023 0304 	bic.w	r3, r3, #4
 801a8f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	4a1b      	ldr	r2, [pc, #108]	; (801a968 <TIM_OC1_SetConfig+0x10c>)
 801a8fa:	4293      	cmp	r3, r2
 801a8fc:	d00f      	beq.n	801a91e <TIM_OC1_SetConfig+0xc2>
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	4a1a      	ldr	r2, [pc, #104]	; (801a96c <TIM_OC1_SetConfig+0x110>)
 801a902:	4293      	cmp	r3, r2
 801a904:	d00b      	beq.n	801a91e <TIM_OC1_SetConfig+0xc2>
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	4a19      	ldr	r2, [pc, #100]	; (801a970 <TIM_OC1_SetConfig+0x114>)
 801a90a:	4293      	cmp	r3, r2
 801a90c:	d007      	beq.n	801a91e <TIM_OC1_SetConfig+0xc2>
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	4a18      	ldr	r2, [pc, #96]	; (801a974 <TIM_OC1_SetConfig+0x118>)
 801a912:	4293      	cmp	r3, r2
 801a914:	d003      	beq.n	801a91e <TIM_OC1_SetConfig+0xc2>
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	4a17      	ldr	r2, [pc, #92]	; (801a978 <TIM_OC1_SetConfig+0x11c>)
 801a91a:	4293      	cmp	r3, r2
 801a91c:	d111      	bne.n	801a942 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801a91e:	693b      	ldr	r3, [r7, #16]
 801a920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801a926:	693b      	ldr	r3, [r7, #16]
 801a928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801a92c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801a92e:	683b      	ldr	r3, [r7, #0]
 801a930:	695b      	ldr	r3, [r3, #20]
 801a932:	693a      	ldr	r2, [r7, #16]
 801a934:	4313      	orrs	r3, r2
 801a936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801a938:	683b      	ldr	r3, [r7, #0]
 801a93a:	699b      	ldr	r3, [r3, #24]
 801a93c:	693a      	ldr	r2, [r7, #16]
 801a93e:	4313      	orrs	r3, r2
 801a940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	693a      	ldr	r2, [r7, #16]
 801a946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	68fa      	ldr	r2, [r7, #12]
 801a94c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801a94e:	683b      	ldr	r3, [r7, #0]
 801a950:	685a      	ldr	r2, [r3, #4]
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	697a      	ldr	r2, [r7, #20]
 801a95a:	621a      	str	r2, [r3, #32]
}
 801a95c:	bf00      	nop
 801a95e:	371c      	adds	r7, #28
 801a960:	46bd      	mov	sp, r7
 801a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a966:	4770      	bx	lr
 801a968:	40012c00 	.word	0x40012c00
 801a96c:	40013400 	.word	0x40013400
 801a970:	40014000 	.word	0x40014000
 801a974:	40014400 	.word	0x40014400
 801a978:	40014800 	.word	0x40014800

0801a97c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a97c:	b480      	push	{r7}
 801a97e:	b087      	sub	sp, #28
 801a980:	af00      	add	r7, sp, #0
 801a982:	6078      	str	r0, [r7, #4]
 801a984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	6a1b      	ldr	r3, [r3, #32]
 801a98a:	f023 0210 	bic.w	r2, r3, #16
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	6a1b      	ldr	r3, [r3, #32]
 801a996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	685b      	ldr	r3, [r3, #4]
 801a99c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	699b      	ldr	r3, [r3, #24]
 801a9a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801a9a4:	68fb      	ldr	r3, [r7, #12]
 801a9a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801a9aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a9ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801a9b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a9b8:	683b      	ldr	r3, [r7, #0]
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	021b      	lsls	r3, r3, #8
 801a9be:	68fa      	ldr	r2, [r7, #12]
 801a9c0:	4313      	orrs	r3, r2
 801a9c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801a9c4:	697b      	ldr	r3, [r7, #20]
 801a9c6:	f023 0320 	bic.w	r3, r3, #32
 801a9ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801a9cc:	683b      	ldr	r3, [r7, #0]
 801a9ce:	689b      	ldr	r3, [r3, #8]
 801a9d0:	011b      	lsls	r3, r3, #4
 801a9d2:	697a      	ldr	r2, [r7, #20]
 801a9d4:	4313      	orrs	r3, r2
 801a9d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	4a28      	ldr	r2, [pc, #160]	; (801aa7c <TIM_OC2_SetConfig+0x100>)
 801a9dc:	4293      	cmp	r3, r2
 801a9de:	d003      	beq.n	801a9e8 <TIM_OC2_SetConfig+0x6c>
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	4a27      	ldr	r2, [pc, #156]	; (801aa80 <TIM_OC2_SetConfig+0x104>)
 801a9e4:	4293      	cmp	r3, r2
 801a9e6:	d10d      	bne.n	801aa04 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801a9e8:	697b      	ldr	r3, [r7, #20]
 801a9ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a9ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801a9f0:	683b      	ldr	r3, [r7, #0]
 801a9f2:	68db      	ldr	r3, [r3, #12]
 801a9f4:	011b      	lsls	r3, r3, #4
 801a9f6:	697a      	ldr	r2, [r7, #20]
 801a9f8:	4313      	orrs	r3, r2
 801a9fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801a9fc:	697b      	ldr	r3, [r7, #20]
 801a9fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801aa02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	4a1d      	ldr	r2, [pc, #116]	; (801aa7c <TIM_OC2_SetConfig+0x100>)
 801aa08:	4293      	cmp	r3, r2
 801aa0a:	d00f      	beq.n	801aa2c <TIM_OC2_SetConfig+0xb0>
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	4a1c      	ldr	r2, [pc, #112]	; (801aa80 <TIM_OC2_SetConfig+0x104>)
 801aa10:	4293      	cmp	r3, r2
 801aa12:	d00b      	beq.n	801aa2c <TIM_OC2_SetConfig+0xb0>
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	4a1b      	ldr	r2, [pc, #108]	; (801aa84 <TIM_OC2_SetConfig+0x108>)
 801aa18:	4293      	cmp	r3, r2
 801aa1a:	d007      	beq.n	801aa2c <TIM_OC2_SetConfig+0xb0>
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	4a1a      	ldr	r2, [pc, #104]	; (801aa88 <TIM_OC2_SetConfig+0x10c>)
 801aa20:	4293      	cmp	r3, r2
 801aa22:	d003      	beq.n	801aa2c <TIM_OC2_SetConfig+0xb0>
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	4a19      	ldr	r2, [pc, #100]	; (801aa8c <TIM_OC2_SetConfig+0x110>)
 801aa28:	4293      	cmp	r3, r2
 801aa2a:	d113      	bne.n	801aa54 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801aa2c:	693b      	ldr	r3, [r7, #16]
 801aa2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801aa32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801aa34:	693b      	ldr	r3, [r7, #16]
 801aa36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801aa3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801aa3c:	683b      	ldr	r3, [r7, #0]
 801aa3e:	695b      	ldr	r3, [r3, #20]
 801aa40:	009b      	lsls	r3, r3, #2
 801aa42:	693a      	ldr	r2, [r7, #16]
 801aa44:	4313      	orrs	r3, r2
 801aa46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801aa48:	683b      	ldr	r3, [r7, #0]
 801aa4a:	699b      	ldr	r3, [r3, #24]
 801aa4c:	009b      	lsls	r3, r3, #2
 801aa4e:	693a      	ldr	r2, [r7, #16]
 801aa50:	4313      	orrs	r3, r2
 801aa52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	693a      	ldr	r2, [r7, #16]
 801aa58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	68fa      	ldr	r2, [r7, #12]
 801aa5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801aa60:	683b      	ldr	r3, [r7, #0]
 801aa62:	685a      	ldr	r2, [r3, #4]
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	697a      	ldr	r2, [r7, #20]
 801aa6c:	621a      	str	r2, [r3, #32]
}
 801aa6e:	bf00      	nop
 801aa70:	371c      	adds	r7, #28
 801aa72:	46bd      	mov	sp, r7
 801aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa78:	4770      	bx	lr
 801aa7a:	bf00      	nop
 801aa7c:	40012c00 	.word	0x40012c00
 801aa80:	40013400 	.word	0x40013400
 801aa84:	40014000 	.word	0x40014000
 801aa88:	40014400 	.word	0x40014400
 801aa8c:	40014800 	.word	0x40014800

0801aa90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801aa90:	b480      	push	{r7}
 801aa92:	b087      	sub	sp, #28
 801aa94:	af00      	add	r7, sp, #0
 801aa96:	6078      	str	r0, [r7, #4]
 801aa98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	6a1b      	ldr	r3, [r3, #32]
 801aa9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	6a1b      	ldr	r3, [r3, #32]
 801aaaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	685b      	ldr	r3, [r3, #4]
 801aab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	69db      	ldr	r3, [r3, #28]
 801aab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801aabe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801aac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	f023 0303 	bic.w	r3, r3, #3
 801aaca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801aacc:	683b      	ldr	r3, [r7, #0]
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	68fa      	ldr	r2, [r7, #12]
 801aad2:	4313      	orrs	r3, r2
 801aad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801aad6:	697b      	ldr	r3, [r7, #20]
 801aad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801aadc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801aade:	683b      	ldr	r3, [r7, #0]
 801aae0:	689b      	ldr	r3, [r3, #8]
 801aae2:	021b      	lsls	r3, r3, #8
 801aae4:	697a      	ldr	r2, [r7, #20]
 801aae6:	4313      	orrs	r3, r2
 801aae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	4a27      	ldr	r2, [pc, #156]	; (801ab8c <TIM_OC3_SetConfig+0xfc>)
 801aaee:	4293      	cmp	r3, r2
 801aaf0:	d003      	beq.n	801aafa <TIM_OC3_SetConfig+0x6a>
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	4a26      	ldr	r2, [pc, #152]	; (801ab90 <TIM_OC3_SetConfig+0x100>)
 801aaf6:	4293      	cmp	r3, r2
 801aaf8:	d10d      	bne.n	801ab16 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801aafa:	697b      	ldr	r3, [r7, #20]
 801aafc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ab00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801ab02:	683b      	ldr	r3, [r7, #0]
 801ab04:	68db      	ldr	r3, [r3, #12]
 801ab06:	021b      	lsls	r3, r3, #8
 801ab08:	697a      	ldr	r2, [r7, #20]
 801ab0a:	4313      	orrs	r3, r2
 801ab0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801ab0e:	697b      	ldr	r3, [r7, #20]
 801ab10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ab14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	4a1c      	ldr	r2, [pc, #112]	; (801ab8c <TIM_OC3_SetConfig+0xfc>)
 801ab1a:	4293      	cmp	r3, r2
 801ab1c:	d00f      	beq.n	801ab3e <TIM_OC3_SetConfig+0xae>
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	4a1b      	ldr	r2, [pc, #108]	; (801ab90 <TIM_OC3_SetConfig+0x100>)
 801ab22:	4293      	cmp	r3, r2
 801ab24:	d00b      	beq.n	801ab3e <TIM_OC3_SetConfig+0xae>
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	4a1a      	ldr	r2, [pc, #104]	; (801ab94 <TIM_OC3_SetConfig+0x104>)
 801ab2a:	4293      	cmp	r3, r2
 801ab2c:	d007      	beq.n	801ab3e <TIM_OC3_SetConfig+0xae>
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	4a19      	ldr	r2, [pc, #100]	; (801ab98 <TIM_OC3_SetConfig+0x108>)
 801ab32:	4293      	cmp	r3, r2
 801ab34:	d003      	beq.n	801ab3e <TIM_OC3_SetConfig+0xae>
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	4a18      	ldr	r2, [pc, #96]	; (801ab9c <TIM_OC3_SetConfig+0x10c>)
 801ab3a:	4293      	cmp	r3, r2
 801ab3c:	d113      	bne.n	801ab66 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801ab3e:	693b      	ldr	r3, [r7, #16]
 801ab40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ab44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801ab46:	693b      	ldr	r3, [r7, #16]
 801ab48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ab4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801ab4e:	683b      	ldr	r3, [r7, #0]
 801ab50:	695b      	ldr	r3, [r3, #20]
 801ab52:	011b      	lsls	r3, r3, #4
 801ab54:	693a      	ldr	r2, [r7, #16]
 801ab56:	4313      	orrs	r3, r2
 801ab58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801ab5a:	683b      	ldr	r3, [r7, #0]
 801ab5c:	699b      	ldr	r3, [r3, #24]
 801ab5e:	011b      	lsls	r3, r3, #4
 801ab60:	693a      	ldr	r2, [r7, #16]
 801ab62:	4313      	orrs	r3, r2
 801ab64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	693a      	ldr	r2, [r7, #16]
 801ab6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	68fa      	ldr	r2, [r7, #12]
 801ab70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801ab72:	683b      	ldr	r3, [r7, #0]
 801ab74:	685a      	ldr	r2, [r3, #4]
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	697a      	ldr	r2, [r7, #20]
 801ab7e:	621a      	str	r2, [r3, #32]
}
 801ab80:	bf00      	nop
 801ab82:	371c      	adds	r7, #28
 801ab84:	46bd      	mov	sp, r7
 801ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab8a:	4770      	bx	lr
 801ab8c:	40012c00 	.word	0x40012c00
 801ab90:	40013400 	.word	0x40013400
 801ab94:	40014000 	.word	0x40014000
 801ab98:	40014400 	.word	0x40014400
 801ab9c:	40014800 	.word	0x40014800

0801aba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801aba0:	b480      	push	{r7}
 801aba2:	b087      	sub	sp, #28
 801aba4:	af00      	add	r7, sp, #0
 801aba6:	6078      	str	r0, [r7, #4]
 801aba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	6a1b      	ldr	r3, [r3, #32]
 801abae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	6a1b      	ldr	r3, [r3, #32]
 801abba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	685b      	ldr	r3, [r3, #4]
 801abc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	69db      	ldr	r3, [r3, #28]
 801abc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801abce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801abd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801abda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801abdc:	683b      	ldr	r3, [r7, #0]
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	021b      	lsls	r3, r3, #8
 801abe2:	68fa      	ldr	r2, [r7, #12]
 801abe4:	4313      	orrs	r3, r2
 801abe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801abe8:	693b      	ldr	r3, [r7, #16]
 801abea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801abee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801abf0:	683b      	ldr	r3, [r7, #0]
 801abf2:	689b      	ldr	r3, [r3, #8]
 801abf4:	031b      	lsls	r3, r3, #12
 801abf6:	693a      	ldr	r2, [r7, #16]
 801abf8:	4313      	orrs	r3, r2
 801abfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	4a18      	ldr	r2, [pc, #96]	; (801ac60 <TIM_OC4_SetConfig+0xc0>)
 801ac00:	4293      	cmp	r3, r2
 801ac02:	d00f      	beq.n	801ac24 <TIM_OC4_SetConfig+0x84>
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	4a17      	ldr	r2, [pc, #92]	; (801ac64 <TIM_OC4_SetConfig+0xc4>)
 801ac08:	4293      	cmp	r3, r2
 801ac0a:	d00b      	beq.n	801ac24 <TIM_OC4_SetConfig+0x84>
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	4a16      	ldr	r2, [pc, #88]	; (801ac68 <TIM_OC4_SetConfig+0xc8>)
 801ac10:	4293      	cmp	r3, r2
 801ac12:	d007      	beq.n	801ac24 <TIM_OC4_SetConfig+0x84>
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	4a15      	ldr	r2, [pc, #84]	; (801ac6c <TIM_OC4_SetConfig+0xcc>)
 801ac18:	4293      	cmp	r3, r2
 801ac1a:	d003      	beq.n	801ac24 <TIM_OC4_SetConfig+0x84>
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	4a14      	ldr	r2, [pc, #80]	; (801ac70 <TIM_OC4_SetConfig+0xd0>)
 801ac20:	4293      	cmp	r3, r2
 801ac22:	d109      	bne.n	801ac38 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801ac24:	697b      	ldr	r3, [r7, #20]
 801ac26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801ac2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801ac2c:	683b      	ldr	r3, [r7, #0]
 801ac2e:	695b      	ldr	r3, [r3, #20]
 801ac30:	019b      	lsls	r3, r3, #6
 801ac32:	697a      	ldr	r2, [r7, #20]
 801ac34:	4313      	orrs	r3, r2
 801ac36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	697a      	ldr	r2, [r7, #20]
 801ac3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	68fa      	ldr	r2, [r7, #12]
 801ac42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801ac44:	683b      	ldr	r3, [r7, #0]
 801ac46:	685a      	ldr	r2, [r3, #4]
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	693a      	ldr	r2, [r7, #16]
 801ac50:	621a      	str	r2, [r3, #32]
}
 801ac52:	bf00      	nop
 801ac54:	371c      	adds	r7, #28
 801ac56:	46bd      	mov	sp, r7
 801ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac5c:	4770      	bx	lr
 801ac5e:	bf00      	nop
 801ac60:	40012c00 	.word	0x40012c00
 801ac64:	40013400 	.word	0x40013400
 801ac68:	40014000 	.word	0x40014000
 801ac6c:	40014400 	.word	0x40014400
 801ac70:	40014800 	.word	0x40014800

0801ac74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801ac74:	b480      	push	{r7}
 801ac76:	b087      	sub	sp, #28
 801ac78:	af00      	add	r7, sp, #0
 801ac7a:	6078      	str	r0, [r7, #4]
 801ac7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	6a1b      	ldr	r3, [r3, #32]
 801ac82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	6a1b      	ldr	r3, [r3, #32]
 801ac8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	685b      	ldr	r3, [r3, #4]
 801ac94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ac9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801aca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801aca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801aca8:	683b      	ldr	r3, [r7, #0]
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	68fa      	ldr	r2, [r7, #12]
 801acae:	4313      	orrs	r3, r2
 801acb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801acb2:	693b      	ldr	r3, [r7, #16]
 801acb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801acb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801acba:	683b      	ldr	r3, [r7, #0]
 801acbc:	689b      	ldr	r3, [r3, #8]
 801acbe:	041b      	lsls	r3, r3, #16
 801acc0:	693a      	ldr	r2, [r7, #16]
 801acc2:	4313      	orrs	r3, r2
 801acc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	4a17      	ldr	r2, [pc, #92]	; (801ad28 <TIM_OC5_SetConfig+0xb4>)
 801acca:	4293      	cmp	r3, r2
 801accc:	d00f      	beq.n	801acee <TIM_OC5_SetConfig+0x7a>
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	4a16      	ldr	r2, [pc, #88]	; (801ad2c <TIM_OC5_SetConfig+0xb8>)
 801acd2:	4293      	cmp	r3, r2
 801acd4:	d00b      	beq.n	801acee <TIM_OC5_SetConfig+0x7a>
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	4a15      	ldr	r2, [pc, #84]	; (801ad30 <TIM_OC5_SetConfig+0xbc>)
 801acda:	4293      	cmp	r3, r2
 801acdc:	d007      	beq.n	801acee <TIM_OC5_SetConfig+0x7a>
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	4a14      	ldr	r2, [pc, #80]	; (801ad34 <TIM_OC5_SetConfig+0xc0>)
 801ace2:	4293      	cmp	r3, r2
 801ace4:	d003      	beq.n	801acee <TIM_OC5_SetConfig+0x7a>
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	4a13      	ldr	r2, [pc, #76]	; (801ad38 <TIM_OC5_SetConfig+0xc4>)
 801acea:	4293      	cmp	r3, r2
 801acec:	d109      	bne.n	801ad02 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801acee:	697b      	ldr	r3, [r7, #20]
 801acf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801acf4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801acf6:	683b      	ldr	r3, [r7, #0]
 801acf8:	695b      	ldr	r3, [r3, #20]
 801acfa:	021b      	lsls	r3, r3, #8
 801acfc:	697a      	ldr	r2, [r7, #20]
 801acfe:	4313      	orrs	r3, r2
 801ad00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	697a      	ldr	r2, [r7, #20]
 801ad06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	68fa      	ldr	r2, [r7, #12]
 801ad0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801ad0e:	683b      	ldr	r3, [r7, #0]
 801ad10:	685a      	ldr	r2, [r3, #4]
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	693a      	ldr	r2, [r7, #16]
 801ad1a:	621a      	str	r2, [r3, #32]
}
 801ad1c:	bf00      	nop
 801ad1e:	371c      	adds	r7, #28
 801ad20:	46bd      	mov	sp, r7
 801ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad26:	4770      	bx	lr
 801ad28:	40012c00 	.word	0x40012c00
 801ad2c:	40013400 	.word	0x40013400
 801ad30:	40014000 	.word	0x40014000
 801ad34:	40014400 	.word	0x40014400
 801ad38:	40014800 	.word	0x40014800

0801ad3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801ad3c:	b480      	push	{r7}
 801ad3e:	b087      	sub	sp, #28
 801ad40:	af00      	add	r7, sp, #0
 801ad42:	6078      	str	r0, [r7, #4]
 801ad44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	6a1b      	ldr	r3, [r3, #32]
 801ad4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	6a1b      	ldr	r3, [r3, #32]
 801ad56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	685b      	ldr	r3, [r3, #4]
 801ad5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ad62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ad6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ad6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ad70:	683b      	ldr	r3, [r7, #0]
 801ad72:	681b      	ldr	r3, [r3, #0]
 801ad74:	021b      	lsls	r3, r3, #8
 801ad76:	68fa      	ldr	r2, [r7, #12]
 801ad78:	4313      	orrs	r3, r2
 801ad7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801ad7c:	693b      	ldr	r3, [r7, #16]
 801ad7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ad82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801ad84:	683b      	ldr	r3, [r7, #0]
 801ad86:	689b      	ldr	r3, [r3, #8]
 801ad88:	051b      	lsls	r3, r3, #20
 801ad8a:	693a      	ldr	r2, [r7, #16]
 801ad8c:	4313      	orrs	r3, r2
 801ad8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	4a18      	ldr	r2, [pc, #96]	; (801adf4 <TIM_OC6_SetConfig+0xb8>)
 801ad94:	4293      	cmp	r3, r2
 801ad96:	d00f      	beq.n	801adb8 <TIM_OC6_SetConfig+0x7c>
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	4a17      	ldr	r2, [pc, #92]	; (801adf8 <TIM_OC6_SetConfig+0xbc>)
 801ad9c:	4293      	cmp	r3, r2
 801ad9e:	d00b      	beq.n	801adb8 <TIM_OC6_SetConfig+0x7c>
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	4a16      	ldr	r2, [pc, #88]	; (801adfc <TIM_OC6_SetConfig+0xc0>)
 801ada4:	4293      	cmp	r3, r2
 801ada6:	d007      	beq.n	801adb8 <TIM_OC6_SetConfig+0x7c>
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	4a15      	ldr	r2, [pc, #84]	; (801ae00 <TIM_OC6_SetConfig+0xc4>)
 801adac:	4293      	cmp	r3, r2
 801adae:	d003      	beq.n	801adb8 <TIM_OC6_SetConfig+0x7c>
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	4a14      	ldr	r2, [pc, #80]	; (801ae04 <TIM_OC6_SetConfig+0xc8>)
 801adb4:	4293      	cmp	r3, r2
 801adb6:	d109      	bne.n	801adcc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801adb8:	697b      	ldr	r3, [r7, #20]
 801adba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801adbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801adc0:	683b      	ldr	r3, [r7, #0]
 801adc2:	695b      	ldr	r3, [r3, #20]
 801adc4:	029b      	lsls	r3, r3, #10
 801adc6:	697a      	ldr	r2, [r7, #20]
 801adc8:	4313      	orrs	r3, r2
 801adca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	697a      	ldr	r2, [r7, #20]
 801add0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	68fa      	ldr	r2, [r7, #12]
 801add6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801add8:	683b      	ldr	r3, [r7, #0]
 801adda:	685a      	ldr	r2, [r3, #4]
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	693a      	ldr	r2, [r7, #16]
 801ade4:	621a      	str	r2, [r3, #32]
}
 801ade6:	bf00      	nop
 801ade8:	371c      	adds	r7, #28
 801adea:	46bd      	mov	sp, r7
 801adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adf0:	4770      	bx	lr
 801adf2:	bf00      	nop
 801adf4:	40012c00 	.word	0x40012c00
 801adf8:	40013400 	.word	0x40013400
 801adfc:	40014000 	.word	0x40014000
 801ae00:	40014400 	.word	0x40014400
 801ae04:	40014800 	.word	0x40014800

0801ae08 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801ae08:	b480      	push	{r7}
 801ae0a:	b087      	sub	sp, #28
 801ae0c:	af00      	add	r7, sp, #0
 801ae0e:	60f8      	str	r0, [r7, #12]
 801ae10:	60b9      	str	r1, [r7, #8]
 801ae12:	607a      	str	r2, [r7, #4]
 801ae14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	6a1b      	ldr	r3, [r3, #32]
 801ae1a:	f023 0201 	bic.w	r2, r3, #1
 801ae1e:	68fb      	ldr	r3, [r7, #12]
 801ae20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ae22:	68fb      	ldr	r3, [r7, #12]
 801ae24:	699b      	ldr	r3, [r3, #24]
 801ae26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801ae28:	68fb      	ldr	r3, [r7, #12]
 801ae2a:	6a1b      	ldr	r3, [r3, #32]
 801ae2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801ae2e:	68fb      	ldr	r3, [r7, #12]
 801ae30:	4a26      	ldr	r2, [pc, #152]	; (801aecc <TIM_TI1_SetConfig+0xc4>)
 801ae32:	4293      	cmp	r3, r2
 801ae34:	d017      	beq.n	801ae66 <TIM_TI1_SetConfig+0x5e>
 801ae36:	68fb      	ldr	r3, [r7, #12]
 801ae38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ae3c:	d013      	beq.n	801ae66 <TIM_TI1_SetConfig+0x5e>
 801ae3e:	68fb      	ldr	r3, [r7, #12]
 801ae40:	4a23      	ldr	r2, [pc, #140]	; (801aed0 <TIM_TI1_SetConfig+0xc8>)
 801ae42:	4293      	cmp	r3, r2
 801ae44:	d00f      	beq.n	801ae66 <TIM_TI1_SetConfig+0x5e>
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	4a22      	ldr	r2, [pc, #136]	; (801aed4 <TIM_TI1_SetConfig+0xcc>)
 801ae4a:	4293      	cmp	r3, r2
 801ae4c:	d00b      	beq.n	801ae66 <TIM_TI1_SetConfig+0x5e>
 801ae4e:	68fb      	ldr	r3, [r7, #12]
 801ae50:	4a21      	ldr	r2, [pc, #132]	; (801aed8 <TIM_TI1_SetConfig+0xd0>)
 801ae52:	4293      	cmp	r3, r2
 801ae54:	d007      	beq.n	801ae66 <TIM_TI1_SetConfig+0x5e>
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	4a20      	ldr	r2, [pc, #128]	; (801aedc <TIM_TI1_SetConfig+0xd4>)
 801ae5a:	4293      	cmp	r3, r2
 801ae5c:	d003      	beq.n	801ae66 <TIM_TI1_SetConfig+0x5e>
 801ae5e:	68fb      	ldr	r3, [r7, #12]
 801ae60:	4a1f      	ldr	r2, [pc, #124]	; (801aee0 <TIM_TI1_SetConfig+0xd8>)
 801ae62:	4293      	cmp	r3, r2
 801ae64:	d101      	bne.n	801ae6a <TIM_TI1_SetConfig+0x62>
 801ae66:	2301      	movs	r3, #1
 801ae68:	e000      	b.n	801ae6c <TIM_TI1_SetConfig+0x64>
 801ae6a:	2300      	movs	r3, #0
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d008      	beq.n	801ae82 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801ae70:	697b      	ldr	r3, [r7, #20]
 801ae72:	f023 0303 	bic.w	r3, r3, #3
 801ae76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801ae78:	697a      	ldr	r2, [r7, #20]
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	4313      	orrs	r3, r2
 801ae7e:	617b      	str	r3, [r7, #20]
 801ae80:	e003      	b.n	801ae8a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801ae82:	697b      	ldr	r3, [r7, #20]
 801ae84:	f043 0301 	orr.w	r3, r3, #1
 801ae88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801ae8a:	697b      	ldr	r3, [r7, #20]
 801ae8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801ae90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801ae92:	683b      	ldr	r3, [r7, #0]
 801ae94:	011b      	lsls	r3, r3, #4
 801ae96:	b2db      	uxtb	r3, r3
 801ae98:	697a      	ldr	r2, [r7, #20]
 801ae9a:	4313      	orrs	r3, r2
 801ae9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801ae9e:	693b      	ldr	r3, [r7, #16]
 801aea0:	f023 030a 	bic.w	r3, r3, #10
 801aea4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801aea6:	68bb      	ldr	r3, [r7, #8]
 801aea8:	f003 030a 	and.w	r3, r3, #10
 801aeac:	693a      	ldr	r2, [r7, #16]
 801aeae:	4313      	orrs	r3, r2
 801aeb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	697a      	ldr	r2, [r7, #20]
 801aeb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	693a      	ldr	r2, [r7, #16]
 801aebc:	621a      	str	r2, [r3, #32]
}
 801aebe:	bf00      	nop
 801aec0:	371c      	adds	r7, #28
 801aec2:	46bd      	mov	sp, r7
 801aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aec8:	4770      	bx	lr
 801aeca:	bf00      	nop
 801aecc:	40012c00 	.word	0x40012c00
 801aed0:	40000400 	.word	0x40000400
 801aed4:	40000800 	.word	0x40000800
 801aed8:	40000c00 	.word	0x40000c00
 801aedc:	40013400 	.word	0x40013400
 801aee0:	40014000 	.word	0x40014000

0801aee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801aee4:	b480      	push	{r7}
 801aee6:	b087      	sub	sp, #28
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	60f8      	str	r0, [r7, #12]
 801aeec:	60b9      	str	r1, [r7, #8]
 801aeee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801aef0:	68fb      	ldr	r3, [r7, #12]
 801aef2:	6a1b      	ldr	r3, [r3, #32]
 801aef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801aef6:	68fb      	ldr	r3, [r7, #12]
 801aef8:	6a1b      	ldr	r3, [r3, #32]
 801aefa:	f023 0201 	bic.w	r2, r3, #1
 801aefe:	68fb      	ldr	r3, [r7, #12]
 801af00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801af02:	68fb      	ldr	r3, [r7, #12]
 801af04:	699b      	ldr	r3, [r3, #24]
 801af06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801af08:	693b      	ldr	r3, [r7, #16]
 801af0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801af0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	011b      	lsls	r3, r3, #4
 801af14:	693a      	ldr	r2, [r7, #16]
 801af16:	4313      	orrs	r3, r2
 801af18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801af1a:	697b      	ldr	r3, [r7, #20]
 801af1c:	f023 030a 	bic.w	r3, r3, #10
 801af20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801af22:	697a      	ldr	r2, [r7, #20]
 801af24:	68bb      	ldr	r3, [r7, #8]
 801af26:	4313      	orrs	r3, r2
 801af28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	693a      	ldr	r2, [r7, #16]
 801af2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801af30:	68fb      	ldr	r3, [r7, #12]
 801af32:	697a      	ldr	r2, [r7, #20]
 801af34:	621a      	str	r2, [r3, #32]
}
 801af36:	bf00      	nop
 801af38:	371c      	adds	r7, #28
 801af3a:	46bd      	mov	sp, r7
 801af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af40:	4770      	bx	lr

0801af42 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801af42:	b480      	push	{r7}
 801af44:	b087      	sub	sp, #28
 801af46:	af00      	add	r7, sp, #0
 801af48:	60f8      	str	r0, [r7, #12]
 801af4a:	60b9      	str	r1, [r7, #8]
 801af4c:	607a      	str	r2, [r7, #4]
 801af4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	6a1b      	ldr	r3, [r3, #32]
 801af54:	f023 0210 	bic.w	r2, r3, #16
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	699b      	ldr	r3, [r3, #24]
 801af60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801af62:	68fb      	ldr	r3, [r7, #12]
 801af64:	6a1b      	ldr	r3, [r3, #32]
 801af66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801af68:	697b      	ldr	r3, [r7, #20]
 801af6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801af6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	021b      	lsls	r3, r3, #8
 801af74:	697a      	ldr	r2, [r7, #20]
 801af76:	4313      	orrs	r3, r2
 801af78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801af7a:	697b      	ldr	r3, [r7, #20]
 801af7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801af80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801af82:	683b      	ldr	r3, [r7, #0]
 801af84:	031b      	lsls	r3, r3, #12
 801af86:	b29b      	uxth	r3, r3
 801af88:	697a      	ldr	r2, [r7, #20]
 801af8a:	4313      	orrs	r3, r2
 801af8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801af8e:	693b      	ldr	r3, [r7, #16]
 801af90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801af94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801af96:	68bb      	ldr	r3, [r7, #8]
 801af98:	011b      	lsls	r3, r3, #4
 801af9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801af9e:	693a      	ldr	r2, [r7, #16]
 801afa0:	4313      	orrs	r3, r2
 801afa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	697a      	ldr	r2, [r7, #20]
 801afa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	693a      	ldr	r2, [r7, #16]
 801afae:	621a      	str	r2, [r3, #32]
}
 801afb0:	bf00      	nop
 801afb2:	371c      	adds	r7, #28
 801afb4:	46bd      	mov	sp, r7
 801afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afba:	4770      	bx	lr

0801afbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801afbc:	b480      	push	{r7}
 801afbe:	b087      	sub	sp, #28
 801afc0:	af00      	add	r7, sp, #0
 801afc2:	60f8      	str	r0, [r7, #12]
 801afc4:	60b9      	str	r1, [r7, #8]
 801afc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801afc8:	68fb      	ldr	r3, [r7, #12]
 801afca:	6a1b      	ldr	r3, [r3, #32]
 801afcc:	f023 0210 	bic.w	r2, r3, #16
 801afd0:	68fb      	ldr	r3, [r7, #12]
 801afd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801afd4:	68fb      	ldr	r3, [r7, #12]
 801afd6:	699b      	ldr	r3, [r3, #24]
 801afd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	6a1b      	ldr	r3, [r3, #32]
 801afde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801afe0:	697b      	ldr	r3, [r7, #20]
 801afe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801afe6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	031b      	lsls	r3, r3, #12
 801afec:	697a      	ldr	r2, [r7, #20]
 801afee:	4313      	orrs	r3, r2
 801aff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801aff2:	693b      	ldr	r3, [r7, #16]
 801aff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801aff8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801affa:	68bb      	ldr	r3, [r7, #8]
 801affc:	011b      	lsls	r3, r3, #4
 801affe:	693a      	ldr	r2, [r7, #16]
 801b000:	4313      	orrs	r3, r2
 801b002:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	697a      	ldr	r2, [r7, #20]
 801b008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b00a:	68fb      	ldr	r3, [r7, #12]
 801b00c:	693a      	ldr	r2, [r7, #16]
 801b00e:	621a      	str	r2, [r3, #32]
}
 801b010:	bf00      	nop
 801b012:	371c      	adds	r7, #28
 801b014:	46bd      	mov	sp, r7
 801b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b01a:	4770      	bx	lr

0801b01c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801b01c:	b480      	push	{r7}
 801b01e:	b087      	sub	sp, #28
 801b020:	af00      	add	r7, sp, #0
 801b022:	60f8      	str	r0, [r7, #12]
 801b024:	60b9      	str	r1, [r7, #8]
 801b026:	607a      	str	r2, [r7, #4]
 801b028:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	6a1b      	ldr	r3, [r3, #32]
 801b02e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b032:	68fb      	ldr	r3, [r7, #12]
 801b034:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801b036:	68fb      	ldr	r3, [r7, #12]
 801b038:	69db      	ldr	r3, [r3, #28]
 801b03a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b03c:	68fb      	ldr	r3, [r7, #12]
 801b03e:	6a1b      	ldr	r3, [r3, #32]
 801b040:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801b042:	697b      	ldr	r3, [r7, #20]
 801b044:	f023 0303 	bic.w	r3, r3, #3
 801b048:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801b04a:	697a      	ldr	r2, [r7, #20]
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	4313      	orrs	r3, r2
 801b050:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801b052:	697b      	ldr	r3, [r7, #20]
 801b054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b058:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801b05a:	683b      	ldr	r3, [r7, #0]
 801b05c:	011b      	lsls	r3, r3, #4
 801b05e:	b2db      	uxtb	r3, r3
 801b060:	697a      	ldr	r2, [r7, #20]
 801b062:	4313      	orrs	r3, r2
 801b064:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801b066:	693b      	ldr	r3, [r7, #16]
 801b068:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 801b06c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801b06e:	68bb      	ldr	r3, [r7, #8]
 801b070:	021b      	lsls	r3, r3, #8
 801b072:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801b076:	693a      	ldr	r2, [r7, #16]
 801b078:	4313      	orrs	r3, r2
 801b07a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801b07c:	68fb      	ldr	r3, [r7, #12]
 801b07e:	697a      	ldr	r2, [r7, #20]
 801b080:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801b082:	68fb      	ldr	r3, [r7, #12]
 801b084:	693a      	ldr	r2, [r7, #16]
 801b086:	621a      	str	r2, [r3, #32]
}
 801b088:	bf00      	nop
 801b08a:	371c      	adds	r7, #28
 801b08c:	46bd      	mov	sp, r7
 801b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b092:	4770      	bx	lr

0801b094 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801b094:	b480      	push	{r7}
 801b096:	b087      	sub	sp, #28
 801b098:	af00      	add	r7, sp, #0
 801b09a:	60f8      	str	r0, [r7, #12]
 801b09c:	60b9      	str	r1, [r7, #8]
 801b09e:	607a      	str	r2, [r7, #4]
 801b0a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	6a1b      	ldr	r3, [r3, #32]
 801b0a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801b0ae:	68fb      	ldr	r3, [r7, #12]
 801b0b0:	69db      	ldr	r3, [r3, #28]
 801b0b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	6a1b      	ldr	r3, [r3, #32]
 801b0b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801b0ba:	697b      	ldr	r3, [r7, #20]
 801b0bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b0c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	021b      	lsls	r3, r3, #8
 801b0c6:	697a      	ldr	r2, [r7, #20]
 801b0c8:	4313      	orrs	r3, r2
 801b0ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801b0cc:	697b      	ldr	r3, [r7, #20]
 801b0ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b0d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801b0d4:	683b      	ldr	r3, [r7, #0]
 801b0d6:	031b      	lsls	r3, r3, #12
 801b0d8:	b29b      	uxth	r3, r3
 801b0da:	697a      	ldr	r2, [r7, #20]
 801b0dc:	4313      	orrs	r3, r2
 801b0de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801b0e0:	693b      	ldr	r3, [r7, #16]
 801b0e2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801b0e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801b0e8:	68bb      	ldr	r3, [r7, #8]
 801b0ea:	031b      	lsls	r3, r3, #12
 801b0ec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 801b0f0:	693a      	ldr	r2, [r7, #16]
 801b0f2:	4313      	orrs	r3, r2
 801b0f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801b0f6:	68fb      	ldr	r3, [r7, #12]
 801b0f8:	697a      	ldr	r2, [r7, #20]
 801b0fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801b0fc:	68fb      	ldr	r3, [r7, #12]
 801b0fe:	693a      	ldr	r2, [r7, #16]
 801b100:	621a      	str	r2, [r3, #32]
}
 801b102:	bf00      	nop
 801b104:	371c      	adds	r7, #28
 801b106:	46bd      	mov	sp, r7
 801b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b10c:	4770      	bx	lr

0801b10e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801b10e:	b480      	push	{r7}
 801b110:	b085      	sub	sp, #20
 801b112:	af00      	add	r7, sp, #0
 801b114:	6078      	str	r0, [r7, #4]
 801b116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	689b      	ldr	r3, [r3, #8]
 801b11c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801b11e:	68fb      	ldr	r3, [r7, #12]
 801b120:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801b124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801b12a:	683a      	ldr	r2, [r7, #0]
 801b12c:	68fb      	ldr	r3, [r7, #12]
 801b12e:	4313      	orrs	r3, r2
 801b130:	f043 0307 	orr.w	r3, r3, #7
 801b134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	68fa      	ldr	r2, [r7, #12]
 801b13a:	609a      	str	r2, [r3, #8]
}
 801b13c:	bf00      	nop
 801b13e:	3714      	adds	r7, #20
 801b140:	46bd      	mov	sp, r7
 801b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b146:	4770      	bx	lr

0801b148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801b148:	b480      	push	{r7}
 801b14a:	b087      	sub	sp, #28
 801b14c:	af00      	add	r7, sp, #0
 801b14e:	60f8      	str	r0, [r7, #12]
 801b150:	60b9      	str	r1, [r7, #8]
 801b152:	607a      	str	r2, [r7, #4]
 801b154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801b156:	68fb      	ldr	r3, [r7, #12]
 801b158:	689b      	ldr	r3, [r3, #8]
 801b15a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b15c:	697b      	ldr	r3, [r7, #20]
 801b15e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801b164:	683b      	ldr	r3, [r7, #0]
 801b166:	021a      	lsls	r2, r3, #8
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	431a      	orrs	r2, r3
 801b16c:	68bb      	ldr	r3, [r7, #8]
 801b16e:	4313      	orrs	r3, r2
 801b170:	697a      	ldr	r2, [r7, #20]
 801b172:	4313      	orrs	r3, r2
 801b174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	697a      	ldr	r2, [r7, #20]
 801b17a:	609a      	str	r2, [r3, #8]
}
 801b17c:	bf00      	nop
 801b17e:	371c      	adds	r7, #28
 801b180:	46bd      	mov	sp, r7
 801b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b186:	4770      	bx	lr

0801b188 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801b188:	b480      	push	{r7}
 801b18a:	b087      	sub	sp, #28
 801b18c:	af00      	add	r7, sp, #0
 801b18e:	60f8      	str	r0, [r7, #12]
 801b190:	60b9      	str	r1, [r7, #8]
 801b192:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801b194:	68bb      	ldr	r3, [r7, #8]
 801b196:	f003 031f 	and.w	r3, r3, #31
 801b19a:	2201      	movs	r2, #1
 801b19c:	fa02 f303 	lsl.w	r3, r2, r3
 801b1a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801b1a2:	68fb      	ldr	r3, [r7, #12]
 801b1a4:	6a1a      	ldr	r2, [r3, #32]
 801b1a6:	697b      	ldr	r3, [r7, #20]
 801b1a8:	43db      	mvns	r3, r3
 801b1aa:	401a      	ands	r2, r3
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801b1b0:	68fb      	ldr	r3, [r7, #12]
 801b1b2:	6a1a      	ldr	r2, [r3, #32]
 801b1b4:	68bb      	ldr	r3, [r7, #8]
 801b1b6:	f003 031f 	and.w	r3, r3, #31
 801b1ba:	6879      	ldr	r1, [r7, #4]
 801b1bc:	fa01 f303 	lsl.w	r3, r1, r3
 801b1c0:	431a      	orrs	r2, r3
 801b1c2:	68fb      	ldr	r3, [r7, #12]
 801b1c4:	621a      	str	r2, [r3, #32]
}
 801b1c6:	bf00      	nop
 801b1c8:	371c      	adds	r7, #28
 801b1ca:	46bd      	mov	sp, r7
 801b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1d0:	4770      	bx	lr
	...

0801b1d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801b1d4:	b480      	push	{r7}
 801b1d6:	b085      	sub	sp, #20
 801b1d8:	af00      	add	r7, sp, #0
 801b1da:	6078      	str	r0, [r7, #4]
 801b1dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b1e4:	2b01      	cmp	r3, #1
 801b1e6:	d101      	bne.n	801b1ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801b1e8:	2302      	movs	r3, #2
 801b1ea:	e068      	b.n	801b2be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	2201      	movs	r2, #1
 801b1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	2202      	movs	r2, #2
 801b1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	685b      	ldr	r3, [r3, #4]
 801b202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	681b      	ldr	r3, [r3, #0]
 801b208:	689b      	ldr	r3, [r3, #8]
 801b20a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	4a2e      	ldr	r2, [pc, #184]	; (801b2cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801b212:	4293      	cmp	r3, r2
 801b214:	d004      	beq.n	801b220 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	4a2d      	ldr	r2, [pc, #180]	; (801b2d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801b21c:	4293      	cmp	r3, r2
 801b21e:	d108      	bne.n	801b232 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801b220:	68fb      	ldr	r3, [r7, #12]
 801b222:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801b226:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801b228:	683b      	ldr	r3, [r7, #0]
 801b22a:	685b      	ldr	r3, [r3, #4]
 801b22c:	68fa      	ldr	r2, [r7, #12]
 801b22e:	4313      	orrs	r3, r2
 801b230:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801b232:	68fb      	ldr	r3, [r7, #12]
 801b234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b238:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801b23a:	683b      	ldr	r3, [r7, #0]
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	68fa      	ldr	r2, [r7, #12]
 801b240:	4313      	orrs	r3, r2
 801b242:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	68fa      	ldr	r2, [r7, #12]
 801b24a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	4a1e      	ldr	r2, [pc, #120]	; (801b2cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801b252:	4293      	cmp	r3, r2
 801b254:	d01d      	beq.n	801b292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b25e:	d018      	beq.n	801b292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	4a1b      	ldr	r2, [pc, #108]	; (801b2d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801b266:	4293      	cmp	r3, r2
 801b268:	d013      	beq.n	801b292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	4a1a      	ldr	r2, [pc, #104]	; (801b2d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801b270:	4293      	cmp	r3, r2
 801b272:	d00e      	beq.n	801b292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	681b      	ldr	r3, [r3, #0]
 801b278:	4a18      	ldr	r2, [pc, #96]	; (801b2dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801b27a:	4293      	cmp	r3, r2
 801b27c:	d009      	beq.n	801b292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	4a13      	ldr	r2, [pc, #76]	; (801b2d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801b284:	4293      	cmp	r3, r2
 801b286:	d004      	beq.n	801b292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	681b      	ldr	r3, [r3, #0]
 801b28c:	4a14      	ldr	r2, [pc, #80]	; (801b2e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801b28e:	4293      	cmp	r3, r2
 801b290:	d10c      	bne.n	801b2ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801b292:	68bb      	ldr	r3, [r7, #8]
 801b294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801b29a:	683b      	ldr	r3, [r7, #0]
 801b29c:	689b      	ldr	r3, [r3, #8]
 801b29e:	68ba      	ldr	r2, [r7, #8]
 801b2a0:	4313      	orrs	r3, r2
 801b2a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	68ba      	ldr	r2, [r7, #8]
 801b2aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	2201      	movs	r2, #1
 801b2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	2200      	movs	r2, #0
 801b2b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b2bc:	2300      	movs	r3, #0
}
 801b2be:	4618      	mov	r0, r3
 801b2c0:	3714      	adds	r7, #20
 801b2c2:	46bd      	mov	sp, r7
 801b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2c8:	4770      	bx	lr
 801b2ca:	bf00      	nop
 801b2cc:	40012c00 	.word	0x40012c00
 801b2d0:	40013400 	.word	0x40013400
 801b2d4:	40000400 	.word	0x40000400
 801b2d8:	40000800 	.word	0x40000800
 801b2dc:	40000c00 	.word	0x40000c00
 801b2e0:	40014000 	.word	0x40014000

0801b2e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801b2e4:	b480      	push	{r7}
 801b2e6:	b085      	sub	sp, #20
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	6078      	str	r0, [r7, #4]
 801b2ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801b2ee:	2300      	movs	r3, #0
 801b2f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b2f8:	2b01      	cmp	r3, #1
 801b2fa:	d101      	bne.n	801b300 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801b2fc:	2302      	movs	r3, #2
 801b2fe:	e087      	b.n	801b410 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	2201      	movs	r2, #1
 801b304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801b308:	68fb      	ldr	r3, [r7, #12]
 801b30a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801b30e:	683b      	ldr	r3, [r7, #0]
 801b310:	68db      	ldr	r3, [r3, #12]
 801b312:	4313      	orrs	r3, r2
 801b314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801b316:	68fb      	ldr	r3, [r7, #12]
 801b318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801b31c:	683b      	ldr	r3, [r7, #0]
 801b31e:	689b      	ldr	r3, [r3, #8]
 801b320:	4313      	orrs	r3, r2
 801b322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801b324:	68fb      	ldr	r3, [r7, #12]
 801b326:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801b32a:	683b      	ldr	r3, [r7, #0]
 801b32c:	685b      	ldr	r3, [r3, #4]
 801b32e:	4313      	orrs	r3, r2
 801b330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801b332:	68fb      	ldr	r3, [r7, #12]
 801b334:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801b338:	683b      	ldr	r3, [r7, #0]
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	4313      	orrs	r3, r2
 801b33e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801b340:	68fb      	ldr	r3, [r7, #12]
 801b342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b346:	683b      	ldr	r3, [r7, #0]
 801b348:	691b      	ldr	r3, [r3, #16]
 801b34a:	4313      	orrs	r3, r2
 801b34c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801b34e:	68fb      	ldr	r3, [r7, #12]
 801b350:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801b354:	683b      	ldr	r3, [r7, #0]
 801b356:	695b      	ldr	r3, [r3, #20]
 801b358:	4313      	orrs	r3, r2
 801b35a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801b35c:	68fb      	ldr	r3, [r7, #12]
 801b35e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801b362:	683b      	ldr	r3, [r7, #0]
 801b364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b366:	4313      	orrs	r3, r2
 801b368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801b370:	683b      	ldr	r3, [r7, #0]
 801b372:	699b      	ldr	r3, [r3, #24]
 801b374:	041b      	lsls	r3, r3, #16
 801b376:	4313      	orrs	r3, r2
 801b378:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	681b      	ldr	r3, [r3, #0]
 801b37e:	4a27      	ldr	r2, [pc, #156]	; (801b41c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801b380:	4293      	cmp	r3, r2
 801b382:	d004      	beq.n	801b38e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	4a25      	ldr	r2, [pc, #148]	; (801b420 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801b38a:	4293      	cmp	r3, r2
 801b38c:	d106      	bne.n	801b39c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801b38e:	68fb      	ldr	r3, [r7, #12]
 801b390:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801b394:	683b      	ldr	r3, [r7, #0]
 801b396:	69db      	ldr	r3, [r3, #28]
 801b398:	4313      	orrs	r3, r2
 801b39a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	681b      	ldr	r3, [r3, #0]
 801b3a0:	4a1e      	ldr	r2, [pc, #120]	; (801b41c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801b3a2:	4293      	cmp	r3, r2
 801b3a4:	d004      	beq.n	801b3b0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	4a1d      	ldr	r2, [pc, #116]	; (801b420 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801b3ac:	4293      	cmp	r3, r2
 801b3ae:	d126      	bne.n	801b3fe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801b3b0:	68fb      	ldr	r3, [r7, #12]
 801b3b2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801b3b6:	683b      	ldr	r3, [r7, #0]
 801b3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b3ba:	051b      	lsls	r3, r3, #20
 801b3bc:	4313      	orrs	r3, r2
 801b3be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801b3c0:	68fb      	ldr	r3, [r7, #12]
 801b3c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801b3c6:	683b      	ldr	r3, [r7, #0]
 801b3c8:	6a1b      	ldr	r3, [r3, #32]
 801b3ca:	4313      	orrs	r3, r2
 801b3cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801b3ce:	68fb      	ldr	r3, [r7, #12]
 801b3d0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801b3d4:	683b      	ldr	r3, [r7, #0]
 801b3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3d8:	4313      	orrs	r3, r2
 801b3da:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	4a0e      	ldr	r2, [pc, #56]	; (801b41c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801b3e2:	4293      	cmp	r3, r2
 801b3e4:	d004      	beq.n	801b3f0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	4a0d      	ldr	r2, [pc, #52]	; (801b420 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801b3ec:	4293      	cmp	r3, r2
 801b3ee:	d106      	bne.n	801b3fe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801b3f0:	68fb      	ldr	r3, [r7, #12]
 801b3f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801b3f6:	683b      	ldr	r3, [r7, #0]
 801b3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3fa:	4313      	orrs	r3, r2
 801b3fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	68fa      	ldr	r2, [r7, #12]
 801b404:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	2200      	movs	r2, #0
 801b40a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b40e:	2300      	movs	r3, #0
}
 801b410:	4618      	mov	r0, r3
 801b412:	3714      	adds	r7, #20
 801b414:	46bd      	mov	sp, r7
 801b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b41a:	4770      	bx	lr
 801b41c:	40012c00 	.word	0x40012c00
 801b420:	40013400 	.word	0x40013400

0801b424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801b424:	b480      	push	{r7}
 801b426:	b083      	sub	sp, #12
 801b428:	af00      	add	r7, sp, #0
 801b42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801b42c:	bf00      	nop
 801b42e:	370c      	adds	r7, #12
 801b430:	46bd      	mov	sp, r7
 801b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b436:	4770      	bx	lr

0801b438 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801b438:	b480      	push	{r7}
 801b43a:	b083      	sub	sp, #12
 801b43c:	af00      	add	r7, sp, #0
 801b43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801b440:	bf00      	nop
 801b442:	370c      	adds	r7, #12
 801b444:	46bd      	mov	sp, r7
 801b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b44a:	4770      	bx	lr

0801b44c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801b44c:	b480      	push	{r7}
 801b44e:	b083      	sub	sp, #12
 801b450:	af00      	add	r7, sp, #0
 801b452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801b454:	bf00      	nop
 801b456:	370c      	adds	r7, #12
 801b458:	46bd      	mov	sp, r7
 801b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b45e:	4770      	bx	lr

0801b460 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b460:	b580      	push	{r7, lr}
 801b462:	b082      	sub	sp, #8
 801b464:	af00      	add	r7, sp, #0
 801b466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d101      	bne.n	801b472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b46e:	2301      	movs	r3, #1
 801b470:	e042      	b.n	801b4f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d106      	bne.n	801b48a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	2200      	movs	r2, #0
 801b480:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801b484:	6878      	ldr	r0, [r7, #4]
 801b486:	f7f7 fa01 	bl	801288c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	2224      	movs	r2, #36	; 0x24
 801b48e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	681a      	ldr	r2, [r3, #0]
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	f022 0201 	bic.w	r2, r2, #1
 801b4a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801b4a2:	6878      	ldr	r0, [r7, #4]
 801b4a4:	f000 fc4a 	bl	801bd3c <UART_SetConfig>
 801b4a8:	4603      	mov	r3, r0
 801b4aa:	2b01      	cmp	r3, #1
 801b4ac:	d101      	bne.n	801b4b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801b4ae:	2301      	movs	r3, #1
 801b4b0:	e022      	b.n	801b4f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d002      	beq.n	801b4c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801b4ba:	6878      	ldr	r0, [r7, #4]
 801b4bc:	f000 ff3e 	bl	801c33c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	685a      	ldr	r2, [r3, #4]
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801b4ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	689a      	ldr	r2, [r3, #8]
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801b4de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	681a      	ldr	r2, [r3, #0]
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	f042 0201 	orr.w	r2, r2, #1
 801b4ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801b4f0:	6878      	ldr	r0, [r7, #4]
 801b4f2:	f000 ffc5 	bl	801c480 <UART_CheckIdleState>
 801b4f6:	4603      	mov	r3, r0
}
 801b4f8:	4618      	mov	r0, r3
 801b4fa:	3708      	adds	r7, #8
 801b4fc:	46bd      	mov	sp, r7
 801b4fe:	bd80      	pop	{r7, pc}

0801b500 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b500:	b580      	push	{r7, lr}
 801b502:	b08a      	sub	sp, #40	; 0x28
 801b504:	af02      	add	r7, sp, #8
 801b506:	60f8      	str	r0, [r7, #12]
 801b508:	60b9      	str	r1, [r7, #8]
 801b50a:	603b      	str	r3, [r7, #0]
 801b50c:	4613      	mov	r3, r2
 801b50e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b516:	2b20      	cmp	r3, #32
 801b518:	d17b      	bne.n	801b612 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801b51a:	68bb      	ldr	r3, [r7, #8]
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d002      	beq.n	801b526 <HAL_UART_Transmit+0x26>
 801b520:	88fb      	ldrh	r3, [r7, #6]
 801b522:	2b00      	cmp	r3, #0
 801b524:	d101      	bne.n	801b52a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801b526:	2301      	movs	r3, #1
 801b528:	e074      	b.n	801b614 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b52a:	68fb      	ldr	r3, [r7, #12]
 801b52c:	2200      	movs	r2, #0
 801b52e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b532:	68fb      	ldr	r3, [r7, #12]
 801b534:	2221      	movs	r2, #33	; 0x21
 801b536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801b53a:	f7f8 f82b 	bl	8013594 <HAL_GetTick>
 801b53e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801b540:	68fb      	ldr	r3, [r7, #12]
 801b542:	88fa      	ldrh	r2, [r7, #6]
 801b544:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	88fa      	ldrh	r2, [r7, #6]
 801b54c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	689b      	ldr	r3, [r3, #8]
 801b554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b558:	d108      	bne.n	801b56c <HAL_UART_Transmit+0x6c>
 801b55a:	68fb      	ldr	r3, [r7, #12]
 801b55c:	691b      	ldr	r3, [r3, #16]
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d104      	bne.n	801b56c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801b562:	2300      	movs	r3, #0
 801b564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801b566:	68bb      	ldr	r3, [r7, #8]
 801b568:	61bb      	str	r3, [r7, #24]
 801b56a:	e003      	b.n	801b574 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801b56c:	68bb      	ldr	r3, [r7, #8]
 801b56e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801b570:	2300      	movs	r3, #0
 801b572:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801b574:	e030      	b.n	801b5d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b576:	683b      	ldr	r3, [r7, #0]
 801b578:	9300      	str	r3, [sp, #0]
 801b57a:	697b      	ldr	r3, [r7, #20]
 801b57c:	2200      	movs	r2, #0
 801b57e:	2180      	movs	r1, #128	; 0x80
 801b580:	68f8      	ldr	r0, [r7, #12]
 801b582:	f001 f827 	bl	801c5d4 <UART_WaitOnFlagUntilTimeout>
 801b586:	4603      	mov	r3, r0
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d005      	beq.n	801b598 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801b58c:	68fb      	ldr	r3, [r7, #12]
 801b58e:	2220      	movs	r2, #32
 801b590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801b594:	2303      	movs	r3, #3
 801b596:	e03d      	b.n	801b614 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801b598:	69fb      	ldr	r3, [r7, #28]
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d10b      	bne.n	801b5b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801b59e:	69bb      	ldr	r3, [r7, #24]
 801b5a0:	881b      	ldrh	r3, [r3, #0]
 801b5a2:	461a      	mov	r2, r3
 801b5a4:	68fb      	ldr	r3, [r7, #12]
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b5ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801b5ae:	69bb      	ldr	r3, [r7, #24]
 801b5b0:	3302      	adds	r3, #2
 801b5b2:	61bb      	str	r3, [r7, #24]
 801b5b4:	e007      	b.n	801b5c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801b5b6:	69fb      	ldr	r3, [r7, #28]
 801b5b8:	781a      	ldrb	r2, [r3, #0]
 801b5ba:	68fb      	ldr	r3, [r7, #12]
 801b5bc:	681b      	ldr	r3, [r3, #0]
 801b5be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801b5c0:	69fb      	ldr	r3, [r7, #28]
 801b5c2:	3301      	adds	r3, #1
 801b5c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801b5c6:	68fb      	ldr	r3, [r7, #12]
 801b5c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801b5cc:	b29b      	uxth	r3, r3
 801b5ce:	3b01      	subs	r3, #1
 801b5d0:	b29a      	uxth	r2, r3
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801b5d8:	68fb      	ldr	r3, [r7, #12]
 801b5da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801b5de:	b29b      	uxth	r3, r3
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	d1c8      	bne.n	801b576 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801b5e4:	683b      	ldr	r3, [r7, #0]
 801b5e6:	9300      	str	r3, [sp, #0]
 801b5e8:	697b      	ldr	r3, [r7, #20]
 801b5ea:	2200      	movs	r2, #0
 801b5ec:	2140      	movs	r1, #64	; 0x40
 801b5ee:	68f8      	ldr	r0, [r7, #12]
 801b5f0:	f000 fff0 	bl	801c5d4 <UART_WaitOnFlagUntilTimeout>
 801b5f4:	4603      	mov	r3, r0
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d005      	beq.n	801b606 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801b5fa:	68fb      	ldr	r3, [r7, #12]
 801b5fc:	2220      	movs	r2, #32
 801b5fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801b602:	2303      	movs	r3, #3
 801b604:	e006      	b.n	801b614 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801b606:	68fb      	ldr	r3, [r7, #12]
 801b608:	2220      	movs	r2, #32
 801b60a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801b60e:	2300      	movs	r3, #0
 801b610:	e000      	b.n	801b614 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801b612:	2302      	movs	r3, #2
  }
}
 801b614:	4618      	mov	r0, r3
 801b616:	3720      	adds	r7, #32
 801b618:	46bd      	mov	sp, r7
 801b61a:	bd80      	pop	{r7, pc}

0801b61c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801b61c:	b580      	push	{r7, lr}
 801b61e:	b08a      	sub	sp, #40	; 0x28
 801b620:	af00      	add	r7, sp, #0
 801b622:	60f8      	str	r0, [r7, #12]
 801b624:	60b9      	str	r1, [r7, #8]
 801b626:	4613      	mov	r3, r2
 801b628:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801b62a:	68fb      	ldr	r3, [r7, #12]
 801b62c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b630:	2b20      	cmp	r3, #32
 801b632:	d137      	bne.n	801b6a4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801b634:	68bb      	ldr	r3, [r7, #8]
 801b636:	2b00      	cmp	r3, #0
 801b638:	d002      	beq.n	801b640 <HAL_UART_Receive_IT+0x24>
 801b63a:	88fb      	ldrh	r3, [r7, #6]
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	d101      	bne.n	801b644 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801b640:	2301      	movs	r3, #1
 801b642:	e030      	b.n	801b6a6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b644:	68fb      	ldr	r3, [r7, #12]
 801b646:	2200      	movs	r2, #0
 801b648:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b64a:	68fb      	ldr	r3, [r7, #12]
 801b64c:	681b      	ldr	r3, [r3, #0]
 801b64e:	4a18      	ldr	r2, [pc, #96]	; (801b6b0 <HAL_UART_Receive_IT+0x94>)
 801b650:	4293      	cmp	r3, r2
 801b652:	d01f      	beq.n	801b694 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	685b      	ldr	r3, [r3, #4]
 801b65a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d018      	beq.n	801b694 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b662:	68fb      	ldr	r3, [r7, #12]
 801b664:	681b      	ldr	r3, [r3, #0]
 801b666:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b668:	697b      	ldr	r3, [r7, #20]
 801b66a:	e853 3f00 	ldrex	r3, [r3]
 801b66e:	613b      	str	r3, [r7, #16]
   return(result);
 801b670:	693b      	ldr	r3, [r7, #16]
 801b672:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801b676:	627b      	str	r3, [r7, #36]	; 0x24
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	461a      	mov	r2, r3
 801b67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b680:	623b      	str	r3, [r7, #32]
 801b682:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b684:	69f9      	ldr	r1, [r7, #28]
 801b686:	6a3a      	ldr	r2, [r7, #32]
 801b688:	e841 2300 	strex	r3, r2, [r1]
 801b68c:	61bb      	str	r3, [r7, #24]
   return(result);
 801b68e:	69bb      	ldr	r3, [r7, #24]
 801b690:	2b00      	cmp	r3, #0
 801b692:	d1e6      	bne.n	801b662 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801b694:	88fb      	ldrh	r3, [r7, #6]
 801b696:	461a      	mov	r2, r3
 801b698:	68b9      	ldr	r1, [r7, #8]
 801b69a:	68f8      	ldr	r0, [r7, #12]
 801b69c:	f001 f802 	bl	801c6a4 <UART_Start_Receive_IT>
 801b6a0:	4603      	mov	r3, r0
 801b6a2:	e000      	b.n	801b6a6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801b6a4:	2302      	movs	r3, #2
  }
}
 801b6a6:	4618      	mov	r0, r3
 801b6a8:	3728      	adds	r7, #40	; 0x28
 801b6aa:	46bd      	mov	sp, r7
 801b6ac:	bd80      	pop	{r7, pc}
 801b6ae:	bf00      	nop
 801b6b0:	40008000 	.word	0x40008000

0801b6b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801b6b4:	b580      	push	{r7, lr}
 801b6b6:	b0ba      	sub	sp, #232	; 0xe8
 801b6b8:	af00      	add	r7, sp, #0
 801b6ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	69db      	ldr	r3, [r3, #28]
 801b6c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801b6d0:	687b      	ldr	r3, [r7, #4]
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	689b      	ldr	r3, [r3, #8]
 801b6d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801b6da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801b6de:	f640 030f 	movw	r3, #2063	; 0x80f
 801b6e2:	4013      	ands	r3, r2
 801b6e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801b6e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d11b      	bne.n	801b728 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801b6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b6f4:	f003 0320 	and.w	r3, r3, #32
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d015      	beq.n	801b728 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801b6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b700:	f003 0320 	and.w	r3, r3, #32
 801b704:	2b00      	cmp	r3, #0
 801b706:	d105      	bne.n	801b714 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801b708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b70c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b710:	2b00      	cmp	r3, #0
 801b712:	d009      	beq.n	801b728 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b718:	2b00      	cmp	r3, #0
 801b71a:	f000 82e3 	beq.w	801bce4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b722:	6878      	ldr	r0, [r7, #4]
 801b724:	4798      	blx	r3
      }
      return;
 801b726:	e2dd      	b.n	801bce4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801b728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	f000 8123 	beq.w	801b978 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801b732:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801b736:	4b8d      	ldr	r3, [pc, #564]	; (801b96c <HAL_UART_IRQHandler+0x2b8>)
 801b738:	4013      	ands	r3, r2
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d106      	bne.n	801b74c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801b73e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801b742:	4b8b      	ldr	r3, [pc, #556]	; (801b970 <HAL_UART_IRQHandler+0x2bc>)
 801b744:	4013      	ands	r3, r2
 801b746:	2b00      	cmp	r3, #0
 801b748:	f000 8116 	beq.w	801b978 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801b74c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b750:	f003 0301 	and.w	r3, r3, #1
 801b754:	2b00      	cmp	r3, #0
 801b756:	d011      	beq.n	801b77c <HAL_UART_IRQHandler+0xc8>
 801b758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b75c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b760:	2b00      	cmp	r3, #0
 801b762:	d00b      	beq.n	801b77c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	2201      	movs	r2, #1
 801b76a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b772:	f043 0201 	orr.w	r2, r3, #1
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b77c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b780:	f003 0302 	and.w	r3, r3, #2
 801b784:	2b00      	cmp	r3, #0
 801b786:	d011      	beq.n	801b7ac <HAL_UART_IRQHandler+0xf8>
 801b788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b78c:	f003 0301 	and.w	r3, r3, #1
 801b790:	2b00      	cmp	r3, #0
 801b792:	d00b      	beq.n	801b7ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	2202      	movs	r2, #2
 801b79a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b7a2:	f043 0204 	orr.w	r2, r3, #4
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b7ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b7b0:	f003 0304 	and.w	r3, r3, #4
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d011      	beq.n	801b7dc <HAL_UART_IRQHandler+0x128>
 801b7b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b7bc:	f003 0301 	and.w	r3, r3, #1
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d00b      	beq.n	801b7dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	681b      	ldr	r3, [r3, #0]
 801b7c8:	2204      	movs	r2, #4
 801b7ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b7d2:	f043 0202 	orr.w	r2, r3, #2
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801b7dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b7e0:	f003 0308 	and.w	r3, r3, #8
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	d017      	beq.n	801b818 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801b7e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b7ec:	f003 0320 	and.w	r3, r3, #32
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d105      	bne.n	801b800 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801b7f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801b7f8:	4b5c      	ldr	r3, [pc, #368]	; (801b96c <HAL_UART_IRQHandler+0x2b8>)
 801b7fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d00b      	beq.n	801b818 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801b800:	687b      	ldr	r3, [r7, #4]
 801b802:	681b      	ldr	r3, [r3, #0]
 801b804:	2208      	movs	r2, #8
 801b806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b80e:	f043 0208 	orr.w	r2, r3, #8
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801b818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b81c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b820:	2b00      	cmp	r3, #0
 801b822:	d012      	beq.n	801b84a <HAL_UART_IRQHandler+0x196>
 801b824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d00c      	beq.n	801b84a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b838:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b840:	f043 0220 	orr.w	r2, r3, #32
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b84a:	687b      	ldr	r3, [r7, #4]
 801b84c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b850:	2b00      	cmp	r3, #0
 801b852:	f000 8249 	beq.w	801bce8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801b856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b85a:	f003 0320 	and.w	r3, r3, #32
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d013      	beq.n	801b88a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801b862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b866:	f003 0320 	and.w	r3, r3, #32
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d105      	bne.n	801b87a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801b86e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b876:	2b00      	cmp	r3, #0
 801b878:	d007      	beq.n	801b88a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d003      	beq.n	801b88a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b886:	6878      	ldr	r0, [r7, #4]
 801b888:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b890:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	681b      	ldr	r3, [r3, #0]
 801b898:	689b      	ldr	r3, [r3, #8]
 801b89a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b89e:	2b40      	cmp	r3, #64	; 0x40
 801b8a0:	d005      	beq.n	801b8ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801b8a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b8a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d054      	beq.n	801b958 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801b8ae:	6878      	ldr	r0, [r7, #4]
 801b8b0:	f001 f81a 	bl	801c8e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	689b      	ldr	r3, [r3, #8]
 801b8ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b8be:	2b40      	cmp	r3, #64	; 0x40
 801b8c0:	d146      	bne.n	801b950 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	3308      	adds	r3, #8
 801b8c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b8cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b8d0:	e853 3f00 	ldrex	r3, [r3]
 801b8d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801b8d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b8dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b8e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	3308      	adds	r3, #8
 801b8ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801b8ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801b8f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b8f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801b8fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b8fe:	e841 2300 	strex	r3, r2, [r1]
 801b902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801b906:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	d1d9      	bne.n	801b8c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b914:	2b00      	cmp	r3, #0
 801b916:	d017      	beq.n	801b948 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b91e:	4a15      	ldr	r2, [pc, #84]	; (801b974 <HAL_UART_IRQHandler+0x2c0>)
 801b920:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b928:	4618      	mov	r0, r3
 801b92a:	f7f9 fce0 	bl	80152ee <HAL_DMA_Abort_IT>
 801b92e:	4603      	mov	r3, r0
 801b930:	2b00      	cmp	r3, #0
 801b932:	d019      	beq.n	801b968 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b93a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b93c:	687a      	ldr	r2, [r7, #4]
 801b93e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801b942:	4610      	mov	r0, r2
 801b944:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b946:	e00f      	b.n	801b968 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801b948:	6878      	ldr	r0, [r7, #4]
 801b94a:	f000 f9e1 	bl	801bd10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b94e:	e00b      	b.n	801b968 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801b950:	6878      	ldr	r0, [r7, #4]
 801b952:	f000 f9dd 	bl	801bd10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b956:	e007      	b.n	801b968 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801b958:	6878      	ldr	r0, [r7, #4]
 801b95a:	f000 f9d9 	bl	801bd10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	2200      	movs	r2, #0
 801b962:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801b966:	e1bf      	b.n	801bce8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b968:	bf00      	nop
    return;
 801b96a:	e1bd      	b.n	801bce8 <HAL_UART_IRQHandler+0x634>
 801b96c:	10000001 	.word	0x10000001
 801b970:	04000120 	.word	0x04000120
 801b974:	0801c9b5 	.word	0x0801c9b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b97c:	2b01      	cmp	r3, #1
 801b97e:	f040 8153 	bne.w	801bc28 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801b982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b986:	f003 0310 	and.w	r3, r3, #16
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	f000 814c 	beq.w	801bc28 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801b990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b994:	f003 0310 	and.w	r3, r3, #16
 801b998:	2b00      	cmp	r3, #0
 801b99a:	f000 8145 	beq.w	801bc28 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	2210      	movs	r2, #16
 801b9a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	689b      	ldr	r3, [r3, #8]
 801b9ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b9b0:	2b40      	cmp	r3, #64	; 0x40
 801b9b2:	f040 80bb 	bne.w	801bb2c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	685b      	ldr	r3, [r3, #4]
 801b9c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801b9c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	f000 818f 	beq.w	801bcec <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801b9d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b9d8:	429a      	cmp	r2, r3
 801b9da:	f080 8187 	bcs.w	801bcec <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b9e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b9ee:	681b      	ldr	r3, [r3, #0]
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	f003 0320 	and.w	r3, r3, #32
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	f040 8087 	bne.w	801bb0a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	681b      	ldr	r3, [r3, #0]
 801ba00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ba08:	e853 3f00 	ldrex	r3, [r3]
 801ba0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801ba10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801ba14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ba18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	461a      	mov	r2, r3
 801ba22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801ba26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801ba2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801ba32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801ba36:	e841 2300 	strex	r3, r2, [r1]
 801ba3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801ba3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d1da      	bne.n	801b9fc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	3308      	adds	r3, #8
 801ba4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ba50:	e853 3f00 	ldrex	r3, [r3]
 801ba54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801ba56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ba58:	f023 0301 	bic.w	r3, r3, #1
 801ba5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	3308      	adds	r3, #8
 801ba66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801ba6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801ba6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801ba72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801ba76:	e841 2300 	strex	r3, r2, [r1]
 801ba7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801ba7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d1e1      	bne.n	801ba46 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	3308      	adds	r3, #8
 801ba88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ba8c:	e853 3f00 	ldrex	r3, [r3]
 801ba90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801ba92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ba94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ba98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	3308      	adds	r3, #8
 801baa2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801baa6:	66fa      	str	r2, [r7, #108]	; 0x6c
 801baa8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801baaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801baac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801baae:	e841 2300 	strex	r3, r2, [r1]
 801bab2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801bab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d1e3      	bne.n	801ba82 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	2220      	movs	r2, #32
 801babe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	2200      	movs	r2, #0
 801bac6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bad0:	e853 3f00 	ldrex	r3, [r3]
 801bad4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801bad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bad8:	f023 0310 	bic.w	r3, r3, #16
 801badc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	681b      	ldr	r3, [r3, #0]
 801bae4:	461a      	mov	r2, r3
 801bae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801baea:	65bb      	str	r3, [r7, #88]	; 0x58
 801baec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801baee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801baf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801baf2:	e841 2300 	strex	r3, r2, [r1]
 801baf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801baf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d1e4      	bne.n	801bac8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bb04:	4618      	mov	r0, r3
 801bb06:	f7f9 fb96 	bl	8015236 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	2202      	movs	r2, #2
 801bb0e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801bb1c:	b29b      	uxth	r3, r3
 801bb1e:	1ad3      	subs	r3, r2, r3
 801bb20:	b29b      	uxth	r3, r3
 801bb22:	4619      	mov	r1, r3
 801bb24:	6878      	ldr	r0, [r7, #4]
 801bb26:	f000 f8fd 	bl	801bd24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801bb2a:	e0df      	b.n	801bcec <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801bb38:	b29b      	uxth	r3, r3
 801bb3a:	1ad3      	subs	r3, r2, r3
 801bb3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801bb46:	b29b      	uxth	r3, r3
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	f000 80d1 	beq.w	801bcf0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801bb4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	f000 80cc 	beq.w	801bcf0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	681b      	ldr	r3, [r3, #0]
 801bb5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb60:	e853 3f00 	ldrex	r3, [r3]
 801bb64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801bb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bb68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801bb6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	461a      	mov	r2, r3
 801bb76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801bb7a:	647b      	str	r3, [r7, #68]	; 0x44
 801bb7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801bb80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bb82:	e841 2300 	strex	r3, r2, [r1]
 801bb86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801bb88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d1e4      	bne.n	801bb58 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	3308      	adds	r3, #8
 801bb94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb98:	e853 3f00 	ldrex	r3, [r3]
 801bb9c:	623b      	str	r3, [r7, #32]
   return(result);
 801bb9e:	6a3b      	ldr	r3, [r7, #32]
 801bba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801bba4:	f023 0301 	bic.w	r3, r3, #1
 801bba8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	3308      	adds	r3, #8
 801bbb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801bbb6:	633a      	str	r2, [r7, #48]	; 0x30
 801bbb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bbba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bbbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bbbe:	e841 2300 	strex	r3, r2, [r1]
 801bbc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801bbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d1e1      	bne.n	801bb8e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	2220      	movs	r2, #32
 801bbce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	2200      	movs	r2, #0
 801bbd6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	2200      	movs	r2, #0
 801bbdc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	681b      	ldr	r3, [r3, #0]
 801bbe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bbe4:	693b      	ldr	r3, [r7, #16]
 801bbe6:	e853 3f00 	ldrex	r3, [r3]
 801bbea:	60fb      	str	r3, [r7, #12]
   return(result);
 801bbec:	68fb      	ldr	r3, [r7, #12]
 801bbee:	f023 0310 	bic.w	r3, r3, #16
 801bbf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	681b      	ldr	r3, [r3, #0]
 801bbfa:	461a      	mov	r2, r3
 801bbfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801bc00:	61fb      	str	r3, [r7, #28]
 801bc02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bc04:	69b9      	ldr	r1, [r7, #24]
 801bc06:	69fa      	ldr	r2, [r7, #28]
 801bc08:	e841 2300 	strex	r3, r2, [r1]
 801bc0c:	617b      	str	r3, [r7, #20]
   return(result);
 801bc0e:	697b      	ldr	r3, [r7, #20]
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	d1e4      	bne.n	801bbde <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	2202      	movs	r2, #2
 801bc18:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801bc1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801bc1e:	4619      	mov	r1, r3
 801bc20:	6878      	ldr	r0, [r7, #4]
 801bc22:	f000 f87f 	bl	801bd24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801bc26:	e063      	b.n	801bcf0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801bc28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	d00e      	beq.n	801bc52 <HAL_UART_IRQHandler+0x59e>
 801bc34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bc38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	d008      	beq.n	801bc52 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	681b      	ldr	r3, [r3, #0]
 801bc44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801bc48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801bc4a:	6878      	ldr	r0, [r7, #4]
 801bc4c:	f001 fc10 	bl	801d470 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801bc50:	e051      	b.n	801bcf6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801bc52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	d014      	beq.n	801bc88 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801bc5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bc62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d105      	bne.n	801bc76 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801bc6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bc6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	d008      	beq.n	801bc88 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d03a      	beq.n	801bcf4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bc82:	6878      	ldr	r0, [r7, #4]
 801bc84:	4798      	blx	r3
    }
    return;
 801bc86:	e035      	b.n	801bcf4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801bc88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d009      	beq.n	801bca8 <HAL_UART_IRQHandler+0x5f4>
 801bc94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bc98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d003      	beq.n	801bca8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 801bca0:	6878      	ldr	r0, [r7, #4]
 801bca2:	f000 fe9d 	bl	801c9e0 <UART_EndTransmit_IT>
    return;
 801bca6:	e026      	b.n	801bcf6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801bca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bcac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	d009      	beq.n	801bcc8 <HAL_UART_IRQHandler+0x614>
 801bcb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bcb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d003      	beq.n	801bcc8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801bcc0:	6878      	ldr	r0, [r7, #4]
 801bcc2:	f001 fbe9 	bl	801d498 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801bcc6:	e016      	b.n	801bcf6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801bcc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d010      	beq.n	801bcf6 <HAL_UART_IRQHandler+0x642>
 801bcd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	da0c      	bge.n	801bcf6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801bcdc:	6878      	ldr	r0, [r7, #4]
 801bcde:	f001 fbd1 	bl	801d484 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801bce2:	e008      	b.n	801bcf6 <HAL_UART_IRQHandler+0x642>
      return;
 801bce4:	bf00      	nop
 801bce6:	e006      	b.n	801bcf6 <HAL_UART_IRQHandler+0x642>
    return;
 801bce8:	bf00      	nop
 801bcea:	e004      	b.n	801bcf6 <HAL_UART_IRQHandler+0x642>
      return;
 801bcec:	bf00      	nop
 801bcee:	e002      	b.n	801bcf6 <HAL_UART_IRQHandler+0x642>
      return;
 801bcf0:	bf00      	nop
 801bcf2:	e000      	b.n	801bcf6 <HAL_UART_IRQHandler+0x642>
    return;
 801bcf4:	bf00      	nop
  }
}
 801bcf6:	37e8      	adds	r7, #232	; 0xe8
 801bcf8:	46bd      	mov	sp, r7
 801bcfa:	bd80      	pop	{r7, pc}

0801bcfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801bcfc:	b480      	push	{r7}
 801bcfe:	b083      	sub	sp, #12
 801bd00:	af00      	add	r7, sp, #0
 801bd02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801bd04:	bf00      	nop
 801bd06:	370c      	adds	r7, #12
 801bd08:	46bd      	mov	sp, r7
 801bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd0e:	4770      	bx	lr

0801bd10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801bd10:	b480      	push	{r7}
 801bd12:	b083      	sub	sp, #12
 801bd14:	af00      	add	r7, sp, #0
 801bd16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801bd18:	bf00      	nop
 801bd1a:	370c      	adds	r7, #12
 801bd1c:	46bd      	mov	sp, r7
 801bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd22:	4770      	bx	lr

0801bd24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801bd24:	b480      	push	{r7}
 801bd26:	b083      	sub	sp, #12
 801bd28:	af00      	add	r7, sp, #0
 801bd2a:	6078      	str	r0, [r7, #4]
 801bd2c:	460b      	mov	r3, r1
 801bd2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801bd30:	bf00      	nop
 801bd32:	370c      	adds	r7, #12
 801bd34:	46bd      	mov	sp, r7
 801bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd3a:	4770      	bx	lr

0801bd3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801bd3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bd40:	b08c      	sub	sp, #48	; 0x30
 801bd42:	af00      	add	r7, sp, #0
 801bd44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801bd46:	2300      	movs	r3, #0
 801bd48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801bd4c:	697b      	ldr	r3, [r7, #20]
 801bd4e:	689a      	ldr	r2, [r3, #8]
 801bd50:	697b      	ldr	r3, [r7, #20]
 801bd52:	691b      	ldr	r3, [r3, #16]
 801bd54:	431a      	orrs	r2, r3
 801bd56:	697b      	ldr	r3, [r7, #20]
 801bd58:	695b      	ldr	r3, [r3, #20]
 801bd5a:	431a      	orrs	r2, r3
 801bd5c:	697b      	ldr	r3, [r7, #20]
 801bd5e:	69db      	ldr	r3, [r3, #28]
 801bd60:	4313      	orrs	r3, r2
 801bd62:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801bd64:	697b      	ldr	r3, [r7, #20]
 801bd66:	681b      	ldr	r3, [r3, #0]
 801bd68:	681a      	ldr	r2, [r3, #0]
 801bd6a:	4baa      	ldr	r3, [pc, #680]	; (801c014 <UART_SetConfig+0x2d8>)
 801bd6c:	4013      	ands	r3, r2
 801bd6e:	697a      	ldr	r2, [r7, #20]
 801bd70:	6812      	ldr	r2, [r2, #0]
 801bd72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bd74:	430b      	orrs	r3, r1
 801bd76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801bd78:	697b      	ldr	r3, [r7, #20]
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	685b      	ldr	r3, [r3, #4]
 801bd7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801bd82:	697b      	ldr	r3, [r7, #20]
 801bd84:	68da      	ldr	r2, [r3, #12]
 801bd86:	697b      	ldr	r3, [r7, #20]
 801bd88:	681b      	ldr	r3, [r3, #0]
 801bd8a:	430a      	orrs	r2, r1
 801bd8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801bd8e:	697b      	ldr	r3, [r7, #20]
 801bd90:	699b      	ldr	r3, [r3, #24]
 801bd92:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801bd94:	697b      	ldr	r3, [r7, #20]
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	4a9f      	ldr	r2, [pc, #636]	; (801c018 <UART_SetConfig+0x2dc>)
 801bd9a:	4293      	cmp	r3, r2
 801bd9c:	d004      	beq.n	801bda8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801bd9e:	697b      	ldr	r3, [r7, #20]
 801bda0:	6a1b      	ldr	r3, [r3, #32]
 801bda2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bda4:	4313      	orrs	r3, r2
 801bda6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801bda8:	697b      	ldr	r3, [r7, #20]
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	689b      	ldr	r3, [r3, #8]
 801bdae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801bdb2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801bdb6:	697a      	ldr	r2, [r7, #20]
 801bdb8:	6812      	ldr	r2, [r2, #0]
 801bdba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bdbc:	430b      	orrs	r3, r1
 801bdbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801bdc0:	697b      	ldr	r3, [r7, #20]
 801bdc2:	681b      	ldr	r3, [r3, #0]
 801bdc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bdc6:	f023 010f 	bic.w	r1, r3, #15
 801bdca:	697b      	ldr	r3, [r7, #20]
 801bdcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bdce:	697b      	ldr	r3, [r7, #20]
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	430a      	orrs	r2, r1
 801bdd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801bdd6:	697b      	ldr	r3, [r7, #20]
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	4a90      	ldr	r2, [pc, #576]	; (801c01c <UART_SetConfig+0x2e0>)
 801bddc:	4293      	cmp	r3, r2
 801bdde:	d125      	bne.n	801be2c <UART_SetConfig+0xf0>
 801bde0:	4b8f      	ldr	r3, [pc, #572]	; (801c020 <UART_SetConfig+0x2e4>)
 801bde2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bde6:	f003 0303 	and.w	r3, r3, #3
 801bdea:	2b03      	cmp	r3, #3
 801bdec:	d81a      	bhi.n	801be24 <UART_SetConfig+0xe8>
 801bdee:	a201      	add	r2, pc, #4	; (adr r2, 801bdf4 <UART_SetConfig+0xb8>)
 801bdf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bdf4:	0801be05 	.word	0x0801be05
 801bdf8:	0801be15 	.word	0x0801be15
 801bdfc:	0801be0d 	.word	0x0801be0d
 801be00:	0801be1d 	.word	0x0801be1d
 801be04:	2301      	movs	r3, #1
 801be06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be0a:	e116      	b.n	801c03a <UART_SetConfig+0x2fe>
 801be0c:	2302      	movs	r3, #2
 801be0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be12:	e112      	b.n	801c03a <UART_SetConfig+0x2fe>
 801be14:	2304      	movs	r3, #4
 801be16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be1a:	e10e      	b.n	801c03a <UART_SetConfig+0x2fe>
 801be1c:	2308      	movs	r3, #8
 801be1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be22:	e10a      	b.n	801c03a <UART_SetConfig+0x2fe>
 801be24:	2310      	movs	r3, #16
 801be26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be2a:	e106      	b.n	801c03a <UART_SetConfig+0x2fe>
 801be2c:	697b      	ldr	r3, [r7, #20]
 801be2e:	681b      	ldr	r3, [r3, #0]
 801be30:	4a7c      	ldr	r2, [pc, #496]	; (801c024 <UART_SetConfig+0x2e8>)
 801be32:	4293      	cmp	r3, r2
 801be34:	d138      	bne.n	801bea8 <UART_SetConfig+0x16c>
 801be36:	4b7a      	ldr	r3, [pc, #488]	; (801c020 <UART_SetConfig+0x2e4>)
 801be38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801be3c:	f003 030c 	and.w	r3, r3, #12
 801be40:	2b0c      	cmp	r3, #12
 801be42:	d82d      	bhi.n	801bea0 <UART_SetConfig+0x164>
 801be44:	a201      	add	r2, pc, #4	; (adr r2, 801be4c <UART_SetConfig+0x110>)
 801be46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be4a:	bf00      	nop
 801be4c:	0801be81 	.word	0x0801be81
 801be50:	0801bea1 	.word	0x0801bea1
 801be54:	0801bea1 	.word	0x0801bea1
 801be58:	0801bea1 	.word	0x0801bea1
 801be5c:	0801be91 	.word	0x0801be91
 801be60:	0801bea1 	.word	0x0801bea1
 801be64:	0801bea1 	.word	0x0801bea1
 801be68:	0801bea1 	.word	0x0801bea1
 801be6c:	0801be89 	.word	0x0801be89
 801be70:	0801bea1 	.word	0x0801bea1
 801be74:	0801bea1 	.word	0x0801bea1
 801be78:	0801bea1 	.word	0x0801bea1
 801be7c:	0801be99 	.word	0x0801be99
 801be80:	2300      	movs	r3, #0
 801be82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be86:	e0d8      	b.n	801c03a <UART_SetConfig+0x2fe>
 801be88:	2302      	movs	r3, #2
 801be8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be8e:	e0d4      	b.n	801c03a <UART_SetConfig+0x2fe>
 801be90:	2304      	movs	r3, #4
 801be92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be96:	e0d0      	b.n	801c03a <UART_SetConfig+0x2fe>
 801be98:	2308      	movs	r3, #8
 801be9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be9e:	e0cc      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bea0:	2310      	movs	r3, #16
 801bea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bea6:	e0c8      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bea8:	697b      	ldr	r3, [r7, #20]
 801beaa:	681b      	ldr	r3, [r3, #0]
 801beac:	4a5e      	ldr	r2, [pc, #376]	; (801c028 <UART_SetConfig+0x2ec>)
 801beae:	4293      	cmp	r3, r2
 801beb0:	d125      	bne.n	801befe <UART_SetConfig+0x1c2>
 801beb2:	4b5b      	ldr	r3, [pc, #364]	; (801c020 <UART_SetConfig+0x2e4>)
 801beb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801beb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801bebc:	2b30      	cmp	r3, #48	; 0x30
 801bebe:	d016      	beq.n	801beee <UART_SetConfig+0x1b2>
 801bec0:	2b30      	cmp	r3, #48	; 0x30
 801bec2:	d818      	bhi.n	801bef6 <UART_SetConfig+0x1ba>
 801bec4:	2b20      	cmp	r3, #32
 801bec6:	d00a      	beq.n	801bede <UART_SetConfig+0x1a2>
 801bec8:	2b20      	cmp	r3, #32
 801beca:	d814      	bhi.n	801bef6 <UART_SetConfig+0x1ba>
 801becc:	2b00      	cmp	r3, #0
 801bece:	d002      	beq.n	801bed6 <UART_SetConfig+0x19a>
 801bed0:	2b10      	cmp	r3, #16
 801bed2:	d008      	beq.n	801bee6 <UART_SetConfig+0x1aa>
 801bed4:	e00f      	b.n	801bef6 <UART_SetConfig+0x1ba>
 801bed6:	2300      	movs	r3, #0
 801bed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bedc:	e0ad      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bede:	2302      	movs	r3, #2
 801bee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bee4:	e0a9      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bee6:	2304      	movs	r3, #4
 801bee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801beec:	e0a5      	b.n	801c03a <UART_SetConfig+0x2fe>
 801beee:	2308      	movs	r3, #8
 801bef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bef4:	e0a1      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bef6:	2310      	movs	r3, #16
 801bef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801befc:	e09d      	b.n	801c03a <UART_SetConfig+0x2fe>
 801befe:	697b      	ldr	r3, [r7, #20]
 801bf00:	681b      	ldr	r3, [r3, #0]
 801bf02:	4a4a      	ldr	r2, [pc, #296]	; (801c02c <UART_SetConfig+0x2f0>)
 801bf04:	4293      	cmp	r3, r2
 801bf06:	d125      	bne.n	801bf54 <UART_SetConfig+0x218>
 801bf08:	4b45      	ldr	r3, [pc, #276]	; (801c020 <UART_SetConfig+0x2e4>)
 801bf0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bf0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801bf12:	2bc0      	cmp	r3, #192	; 0xc0
 801bf14:	d016      	beq.n	801bf44 <UART_SetConfig+0x208>
 801bf16:	2bc0      	cmp	r3, #192	; 0xc0
 801bf18:	d818      	bhi.n	801bf4c <UART_SetConfig+0x210>
 801bf1a:	2b80      	cmp	r3, #128	; 0x80
 801bf1c:	d00a      	beq.n	801bf34 <UART_SetConfig+0x1f8>
 801bf1e:	2b80      	cmp	r3, #128	; 0x80
 801bf20:	d814      	bhi.n	801bf4c <UART_SetConfig+0x210>
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d002      	beq.n	801bf2c <UART_SetConfig+0x1f0>
 801bf26:	2b40      	cmp	r3, #64	; 0x40
 801bf28:	d008      	beq.n	801bf3c <UART_SetConfig+0x200>
 801bf2a:	e00f      	b.n	801bf4c <UART_SetConfig+0x210>
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf32:	e082      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bf34:	2302      	movs	r3, #2
 801bf36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf3a:	e07e      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bf3c:	2304      	movs	r3, #4
 801bf3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf42:	e07a      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bf44:	2308      	movs	r3, #8
 801bf46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf4a:	e076      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bf4c:	2310      	movs	r3, #16
 801bf4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf52:	e072      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bf54:	697b      	ldr	r3, [r7, #20]
 801bf56:	681b      	ldr	r3, [r3, #0]
 801bf58:	4a35      	ldr	r2, [pc, #212]	; (801c030 <UART_SetConfig+0x2f4>)
 801bf5a:	4293      	cmp	r3, r2
 801bf5c:	d12a      	bne.n	801bfb4 <UART_SetConfig+0x278>
 801bf5e:	4b30      	ldr	r3, [pc, #192]	; (801c020 <UART_SetConfig+0x2e4>)
 801bf60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bf64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801bf68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bf6c:	d01a      	beq.n	801bfa4 <UART_SetConfig+0x268>
 801bf6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bf72:	d81b      	bhi.n	801bfac <UART_SetConfig+0x270>
 801bf74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bf78:	d00c      	beq.n	801bf94 <UART_SetConfig+0x258>
 801bf7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bf7e:	d815      	bhi.n	801bfac <UART_SetConfig+0x270>
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d003      	beq.n	801bf8c <UART_SetConfig+0x250>
 801bf84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bf88:	d008      	beq.n	801bf9c <UART_SetConfig+0x260>
 801bf8a:	e00f      	b.n	801bfac <UART_SetConfig+0x270>
 801bf8c:	2300      	movs	r3, #0
 801bf8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf92:	e052      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bf94:	2302      	movs	r3, #2
 801bf96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf9a:	e04e      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bf9c:	2304      	movs	r3, #4
 801bf9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bfa2:	e04a      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bfa4:	2308      	movs	r3, #8
 801bfa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bfaa:	e046      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bfac:	2310      	movs	r3, #16
 801bfae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bfb2:	e042      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bfb4:	697b      	ldr	r3, [r7, #20]
 801bfb6:	681b      	ldr	r3, [r3, #0]
 801bfb8:	4a17      	ldr	r2, [pc, #92]	; (801c018 <UART_SetConfig+0x2dc>)
 801bfba:	4293      	cmp	r3, r2
 801bfbc:	d13a      	bne.n	801c034 <UART_SetConfig+0x2f8>
 801bfbe:	4b18      	ldr	r3, [pc, #96]	; (801c020 <UART_SetConfig+0x2e4>)
 801bfc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bfc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801bfc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801bfcc:	d01a      	beq.n	801c004 <UART_SetConfig+0x2c8>
 801bfce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801bfd2:	d81b      	bhi.n	801c00c <UART_SetConfig+0x2d0>
 801bfd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bfd8:	d00c      	beq.n	801bff4 <UART_SetConfig+0x2b8>
 801bfda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bfde:	d815      	bhi.n	801c00c <UART_SetConfig+0x2d0>
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d003      	beq.n	801bfec <UART_SetConfig+0x2b0>
 801bfe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bfe8:	d008      	beq.n	801bffc <UART_SetConfig+0x2c0>
 801bfea:	e00f      	b.n	801c00c <UART_SetConfig+0x2d0>
 801bfec:	2300      	movs	r3, #0
 801bfee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bff2:	e022      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bff4:	2302      	movs	r3, #2
 801bff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bffa:	e01e      	b.n	801c03a <UART_SetConfig+0x2fe>
 801bffc:	2304      	movs	r3, #4
 801bffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c002:	e01a      	b.n	801c03a <UART_SetConfig+0x2fe>
 801c004:	2308      	movs	r3, #8
 801c006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c00a:	e016      	b.n	801c03a <UART_SetConfig+0x2fe>
 801c00c:	2310      	movs	r3, #16
 801c00e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801c012:	e012      	b.n	801c03a <UART_SetConfig+0x2fe>
 801c014:	cfff69f3 	.word	0xcfff69f3
 801c018:	40008000 	.word	0x40008000
 801c01c:	40013800 	.word	0x40013800
 801c020:	40021000 	.word	0x40021000
 801c024:	40004400 	.word	0x40004400
 801c028:	40004800 	.word	0x40004800
 801c02c:	40004c00 	.word	0x40004c00
 801c030:	40005000 	.word	0x40005000
 801c034:	2310      	movs	r3, #16
 801c036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801c03a:	697b      	ldr	r3, [r7, #20]
 801c03c:	681b      	ldr	r3, [r3, #0]
 801c03e:	4ab0      	ldr	r2, [pc, #704]	; (801c300 <UART_SetConfig+0x5c4>)
 801c040:	4293      	cmp	r3, r2
 801c042:	f040 809b 	bne.w	801c17c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801c046:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c04a:	2b08      	cmp	r3, #8
 801c04c:	d827      	bhi.n	801c09e <UART_SetConfig+0x362>
 801c04e:	a201      	add	r2, pc, #4	; (adr r2, 801c054 <UART_SetConfig+0x318>)
 801c050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c054:	0801c079 	.word	0x0801c079
 801c058:	0801c081 	.word	0x0801c081
 801c05c:	0801c089 	.word	0x0801c089
 801c060:	0801c09f 	.word	0x0801c09f
 801c064:	0801c08f 	.word	0x0801c08f
 801c068:	0801c09f 	.word	0x0801c09f
 801c06c:	0801c09f 	.word	0x0801c09f
 801c070:	0801c09f 	.word	0x0801c09f
 801c074:	0801c097 	.word	0x0801c097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801c078:	f7fb fb60 	bl	801773c <HAL_RCC_GetPCLK1Freq>
 801c07c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c07e:	e014      	b.n	801c0aa <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801c080:	f7fb fb70 	bl	8017764 <HAL_RCC_GetPCLK2Freq>
 801c084:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c086:	e010      	b.n	801c0aa <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801c088:	4b9e      	ldr	r3, [pc, #632]	; (801c304 <UART_SetConfig+0x5c8>)
 801c08a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c08c:	e00d      	b.n	801c0aa <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c08e:	f7fb faa3 	bl	80175d8 <HAL_RCC_GetSysClockFreq>
 801c092:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c094:	e009      	b.n	801c0aa <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c09a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c09c:	e005      	b.n	801c0aa <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 801c09e:	2300      	movs	r3, #0
 801c0a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801c0a2:	2301      	movs	r3, #1
 801c0a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801c0a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	f000 8130 	beq.w	801c312 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801c0b2:	697b      	ldr	r3, [r7, #20]
 801c0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0b6:	4a94      	ldr	r2, [pc, #592]	; (801c308 <UART_SetConfig+0x5cc>)
 801c0b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c0bc:	461a      	mov	r2, r3
 801c0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0c0:	fbb3 f3f2 	udiv	r3, r3, r2
 801c0c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801c0c6:	697b      	ldr	r3, [r7, #20]
 801c0c8:	685a      	ldr	r2, [r3, #4]
 801c0ca:	4613      	mov	r3, r2
 801c0cc:	005b      	lsls	r3, r3, #1
 801c0ce:	4413      	add	r3, r2
 801c0d0:	69ba      	ldr	r2, [r7, #24]
 801c0d2:	429a      	cmp	r2, r3
 801c0d4:	d305      	bcc.n	801c0e2 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801c0d6:	697b      	ldr	r3, [r7, #20]
 801c0d8:	685b      	ldr	r3, [r3, #4]
 801c0da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801c0dc:	69ba      	ldr	r2, [r7, #24]
 801c0de:	429a      	cmp	r2, r3
 801c0e0:	d903      	bls.n	801c0ea <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 801c0e2:	2301      	movs	r3, #1
 801c0e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801c0e8:	e113      	b.n	801c312 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801c0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0ec:	2200      	movs	r2, #0
 801c0ee:	60bb      	str	r3, [r7, #8]
 801c0f0:	60fa      	str	r2, [r7, #12]
 801c0f2:	697b      	ldr	r3, [r7, #20]
 801c0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0f6:	4a84      	ldr	r2, [pc, #528]	; (801c308 <UART_SetConfig+0x5cc>)
 801c0f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c0fc:	b29b      	uxth	r3, r3
 801c0fe:	2200      	movs	r2, #0
 801c100:	603b      	str	r3, [r7, #0]
 801c102:	607a      	str	r2, [r7, #4]
 801c104:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c108:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801c10c:	f7e4 fd86 	bl	8000c1c <__aeabi_uldivmod>
 801c110:	4602      	mov	r2, r0
 801c112:	460b      	mov	r3, r1
 801c114:	4610      	mov	r0, r2
 801c116:	4619      	mov	r1, r3
 801c118:	f04f 0200 	mov.w	r2, #0
 801c11c:	f04f 0300 	mov.w	r3, #0
 801c120:	020b      	lsls	r3, r1, #8
 801c122:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801c126:	0202      	lsls	r2, r0, #8
 801c128:	6979      	ldr	r1, [r7, #20]
 801c12a:	6849      	ldr	r1, [r1, #4]
 801c12c:	0849      	lsrs	r1, r1, #1
 801c12e:	2000      	movs	r0, #0
 801c130:	460c      	mov	r4, r1
 801c132:	4605      	mov	r5, r0
 801c134:	eb12 0804 	adds.w	r8, r2, r4
 801c138:	eb43 0905 	adc.w	r9, r3, r5
 801c13c:	697b      	ldr	r3, [r7, #20]
 801c13e:	685b      	ldr	r3, [r3, #4]
 801c140:	2200      	movs	r2, #0
 801c142:	469a      	mov	sl, r3
 801c144:	4693      	mov	fp, r2
 801c146:	4652      	mov	r2, sl
 801c148:	465b      	mov	r3, fp
 801c14a:	4640      	mov	r0, r8
 801c14c:	4649      	mov	r1, r9
 801c14e:	f7e4 fd65 	bl	8000c1c <__aeabi_uldivmod>
 801c152:	4602      	mov	r2, r0
 801c154:	460b      	mov	r3, r1
 801c156:	4613      	mov	r3, r2
 801c158:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801c15a:	6a3b      	ldr	r3, [r7, #32]
 801c15c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c160:	d308      	bcc.n	801c174 <UART_SetConfig+0x438>
 801c162:	6a3b      	ldr	r3, [r7, #32]
 801c164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c168:	d204      	bcs.n	801c174 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 801c16a:	697b      	ldr	r3, [r7, #20]
 801c16c:	681b      	ldr	r3, [r3, #0]
 801c16e:	6a3a      	ldr	r2, [r7, #32]
 801c170:	60da      	str	r2, [r3, #12]
 801c172:	e0ce      	b.n	801c312 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 801c174:	2301      	movs	r3, #1
 801c176:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801c17a:	e0ca      	b.n	801c312 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c17c:	697b      	ldr	r3, [r7, #20]
 801c17e:	69db      	ldr	r3, [r3, #28]
 801c180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c184:	d166      	bne.n	801c254 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 801c186:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c18a:	2b08      	cmp	r3, #8
 801c18c:	d827      	bhi.n	801c1de <UART_SetConfig+0x4a2>
 801c18e:	a201      	add	r2, pc, #4	; (adr r2, 801c194 <UART_SetConfig+0x458>)
 801c190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c194:	0801c1b9 	.word	0x0801c1b9
 801c198:	0801c1c1 	.word	0x0801c1c1
 801c19c:	0801c1c9 	.word	0x0801c1c9
 801c1a0:	0801c1df 	.word	0x0801c1df
 801c1a4:	0801c1cf 	.word	0x0801c1cf
 801c1a8:	0801c1df 	.word	0x0801c1df
 801c1ac:	0801c1df 	.word	0x0801c1df
 801c1b0:	0801c1df 	.word	0x0801c1df
 801c1b4:	0801c1d7 	.word	0x0801c1d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801c1b8:	f7fb fac0 	bl	801773c <HAL_RCC_GetPCLK1Freq>
 801c1bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c1be:	e014      	b.n	801c1ea <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801c1c0:	f7fb fad0 	bl	8017764 <HAL_RCC_GetPCLK2Freq>
 801c1c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c1c6:	e010      	b.n	801c1ea <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801c1c8:	4b4e      	ldr	r3, [pc, #312]	; (801c304 <UART_SetConfig+0x5c8>)
 801c1ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c1cc:	e00d      	b.n	801c1ea <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c1ce:	f7fb fa03 	bl	80175d8 <HAL_RCC_GetSysClockFreq>
 801c1d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c1d4:	e009      	b.n	801c1ea <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c1d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c1da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c1dc:	e005      	b.n	801c1ea <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 801c1de:	2300      	movs	r3, #0
 801c1e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801c1e2:	2301      	movs	r3, #1
 801c1e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801c1e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801c1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	f000 8090 	beq.w	801c312 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801c1f2:	697b      	ldr	r3, [r7, #20]
 801c1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1f6:	4a44      	ldr	r2, [pc, #272]	; (801c308 <UART_SetConfig+0x5cc>)
 801c1f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c1fc:	461a      	mov	r2, r3
 801c1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c200:	fbb3 f3f2 	udiv	r3, r3, r2
 801c204:	005a      	lsls	r2, r3, #1
 801c206:	697b      	ldr	r3, [r7, #20]
 801c208:	685b      	ldr	r3, [r3, #4]
 801c20a:	085b      	lsrs	r3, r3, #1
 801c20c:	441a      	add	r2, r3
 801c20e:	697b      	ldr	r3, [r7, #20]
 801c210:	685b      	ldr	r3, [r3, #4]
 801c212:	fbb2 f3f3 	udiv	r3, r2, r3
 801c216:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801c218:	6a3b      	ldr	r3, [r7, #32]
 801c21a:	2b0f      	cmp	r3, #15
 801c21c:	d916      	bls.n	801c24c <UART_SetConfig+0x510>
 801c21e:	6a3b      	ldr	r3, [r7, #32]
 801c220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c224:	d212      	bcs.n	801c24c <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801c226:	6a3b      	ldr	r3, [r7, #32]
 801c228:	b29b      	uxth	r3, r3
 801c22a:	f023 030f 	bic.w	r3, r3, #15
 801c22e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801c230:	6a3b      	ldr	r3, [r7, #32]
 801c232:	085b      	lsrs	r3, r3, #1
 801c234:	b29b      	uxth	r3, r3
 801c236:	f003 0307 	and.w	r3, r3, #7
 801c23a:	b29a      	uxth	r2, r3
 801c23c:	8bfb      	ldrh	r3, [r7, #30]
 801c23e:	4313      	orrs	r3, r2
 801c240:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801c242:	697b      	ldr	r3, [r7, #20]
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	8bfa      	ldrh	r2, [r7, #30]
 801c248:	60da      	str	r2, [r3, #12]
 801c24a:	e062      	b.n	801c312 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 801c24c:	2301      	movs	r3, #1
 801c24e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801c252:	e05e      	b.n	801c312 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 801c254:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c258:	2b08      	cmp	r3, #8
 801c25a:	d828      	bhi.n	801c2ae <UART_SetConfig+0x572>
 801c25c:	a201      	add	r2, pc, #4	; (adr r2, 801c264 <UART_SetConfig+0x528>)
 801c25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c262:	bf00      	nop
 801c264:	0801c289 	.word	0x0801c289
 801c268:	0801c291 	.word	0x0801c291
 801c26c:	0801c299 	.word	0x0801c299
 801c270:	0801c2af 	.word	0x0801c2af
 801c274:	0801c29f 	.word	0x0801c29f
 801c278:	0801c2af 	.word	0x0801c2af
 801c27c:	0801c2af 	.word	0x0801c2af
 801c280:	0801c2af 	.word	0x0801c2af
 801c284:	0801c2a7 	.word	0x0801c2a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801c288:	f7fb fa58 	bl	801773c <HAL_RCC_GetPCLK1Freq>
 801c28c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c28e:	e014      	b.n	801c2ba <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801c290:	f7fb fa68 	bl	8017764 <HAL_RCC_GetPCLK2Freq>
 801c294:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c296:	e010      	b.n	801c2ba <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801c298:	4b1a      	ldr	r3, [pc, #104]	; (801c304 <UART_SetConfig+0x5c8>)
 801c29a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c29c:	e00d      	b.n	801c2ba <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c29e:	f7fb f99b 	bl	80175d8 <HAL_RCC_GetSysClockFreq>
 801c2a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c2a4:	e009      	b.n	801c2ba <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c2a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c2aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c2ac:	e005      	b.n	801c2ba <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 801c2ae:	2300      	movs	r3, #0
 801c2b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801c2b2:	2301      	movs	r3, #1
 801c2b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801c2b8:	bf00      	nop
    }

    if (pclk != 0U)
 801c2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	d028      	beq.n	801c312 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801c2c0:	697b      	ldr	r3, [r7, #20]
 801c2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2c4:	4a10      	ldr	r2, [pc, #64]	; (801c308 <UART_SetConfig+0x5cc>)
 801c2c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c2ca:	461a      	mov	r2, r3
 801c2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2ce:	fbb3 f2f2 	udiv	r2, r3, r2
 801c2d2:	697b      	ldr	r3, [r7, #20]
 801c2d4:	685b      	ldr	r3, [r3, #4]
 801c2d6:	085b      	lsrs	r3, r3, #1
 801c2d8:	441a      	add	r2, r3
 801c2da:	697b      	ldr	r3, [r7, #20]
 801c2dc:	685b      	ldr	r3, [r3, #4]
 801c2de:	fbb2 f3f3 	udiv	r3, r2, r3
 801c2e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801c2e4:	6a3b      	ldr	r3, [r7, #32]
 801c2e6:	2b0f      	cmp	r3, #15
 801c2e8:	d910      	bls.n	801c30c <UART_SetConfig+0x5d0>
 801c2ea:	6a3b      	ldr	r3, [r7, #32]
 801c2ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c2f0:	d20c      	bcs.n	801c30c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801c2f2:	6a3b      	ldr	r3, [r7, #32]
 801c2f4:	b29a      	uxth	r2, r3
 801c2f6:	697b      	ldr	r3, [r7, #20]
 801c2f8:	681b      	ldr	r3, [r3, #0]
 801c2fa:	60da      	str	r2, [r3, #12]
 801c2fc:	e009      	b.n	801c312 <UART_SetConfig+0x5d6>
 801c2fe:	bf00      	nop
 801c300:	40008000 	.word	0x40008000
 801c304:	00f42400 	.word	0x00f42400
 801c308:	08024098 	.word	0x08024098
      }
      else
      {
        ret = HAL_ERROR;
 801c30c:	2301      	movs	r3, #1
 801c30e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801c312:	697b      	ldr	r3, [r7, #20]
 801c314:	2201      	movs	r2, #1
 801c316:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801c31a:	697b      	ldr	r3, [r7, #20]
 801c31c:	2201      	movs	r2, #1
 801c31e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801c322:	697b      	ldr	r3, [r7, #20]
 801c324:	2200      	movs	r2, #0
 801c326:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801c328:	697b      	ldr	r3, [r7, #20]
 801c32a:	2200      	movs	r2, #0
 801c32c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801c32e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801c332:	4618      	mov	r0, r3
 801c334:	3730      	adds	r7, #48	; 0x30
 801c336:	46bd      	mov	sp, r7
 801c338:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801c33c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801c33c:	b480      	push	{r7}
 801c33e:	b083      	sub	sp, #12
 801c340:	af00      	add	r7, sp, #0
 801c342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c348:	f003 0301 	and.w	r3, r3, #1
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	d00a      	beq.n	801c366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	685b      	ldr	r3, [r3, #4]
 801c356:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801c35a:	687b      	ldr	r3, [r7, #4]
 801c35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	681b      	ldr	r3, [r3, #0]
 801c362:	430a      	orrs	r2, r1
 801c364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c36a:	f003 0302 	and.w	r3, r3, #2
 801c36e:	2b00      	cmp	r3, #0
 801c370:	d00a      	beq.n	801c388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	685b      	ldr	r3, [r3, #4]
 801c378:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	681b      	ldr	r3, [r3, #0]
 801c384:	430a      	orrs	r2, r1
 801c386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c38c:	f003 0304 	and.w	r3, r3, #4
 801c390:	2b00      	cmp	r3, #0
 801c392:	d00a      	beq.n	801c3aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	681b      	ldr	r3, [r3, #0]
 801c398:	685b      	ldr	r3, [r3, #4]
 801c39a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	681b      	ldr	r3, [r3, #0]
 801c3a6:	430a      	orrs	r2, r1
 801c3a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c3ae:	f003 0308 	and.w	r3, r3, #8
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	d00a      	beq.n	801c3cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	681b      	ldr	r3, [r3, #0]
 801c3ba:	685b      	ldr	r3, [r3, #4]
 801c3bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	681b      	ldr	r3, [r3, #0]
 801c3c8:	430a      	orrs	r2, r1
 801c3ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c3d0:	f003 0310 	and.w	r3, r3, #16
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	d00a      	beq.n	801c3ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	689b      	ldr	r3, [r3, #8]
 801c3de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	430a      	orrs	r2, r1
 801c3ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c3f2:	f003 0320 	and.w	r3, r3, #32
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d00a      	beq.n	801c410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801c3fa:	687b      	ldr	r3, [r7, #4]
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	689b      	ldr	r3, [r3, #8]
 801c400:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	681b      	ldr	r3, [r3, #0]
 801c40c:	430a      	orrs	r2, r1
 801c40e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d01a      	beq.n	801c452 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	681b      	ldr	r3, [r3, #0]
 801c420:	685b      	ldr	r3, [r3, #4]
 801c422:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	681b      	ldr	r3, [r3, #0]
 801c42e:	430a      	orrs	r2, r1
 801c430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c43a:	d10a      	bne.n	801c452 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	685b      	ldr	r3, [r3, #4]
 801c442:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801c446:	687b      	ldr	r3, [r7, #4]
 801c448:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	681b      	ldr	r3, [r3, #0]
 801c44e:	430a      	orrs	r2, r1
 801c450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	d00a      	beq.n	801c474 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801c45e:	687b      	ldr	r3, [r7, #4]
 801c460:	681b      	ldr	r3, [r3, #0]
 801c462:	685b      	ldr	r3, [r3, #4]
 801c464:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	681b      	ldr	r3, [r3, #0]
 801c470:	430a      	orrs	r2, r1
 801c472:	605a      	str	r2, [r3, #4]
  }
}
 801c474:	bf00      	nop
 801c476:	370c      	adds	r7, #12
 801c478:	46bd      	mov	sp, r7
 801c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c47e:	4770      	bx	lr

0801c480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801c480:	b580      	push	{r7, lr}
 801c482:	b098      	sub	sp, #96	; 0x60
 801c484:	af02      	add	r7, sp, #8
 801c486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	2200      	movs	r2, #0
 801c48c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801c490:	f7f7 f880 	bl	8013594 <HAL_GetTick>
 801c494:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	f003 0308 	and.w	r3, r3, #8
 801c4a0:	2b08      	cmp	r3, #8
 801c4a2:	d12f      	bne.n	801c504 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801c4a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801c4a8:	9300      	str	r3, [sp, #0]
 801c4aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c4ac:	2200      	movs	r2, #0
 801c4ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801c4b2:	6878      	ldr	r0, [r7, #4]
 801c4b4:	f000 f88e 	bl	801c5d4 <UART_WaitOnFlagUntilTimeout>
 801c4b8:	4603      	mov	r3, r0
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	d022      	beq.n	801c504 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c4c6:	e853 3f00 	ldrex	r3, [r3]
 801c4ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c4ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c4d2:	653b      	str	r3, [r7, #80]	; 0x50
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	461a      	mov	r2, r3
 801c4da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c4dc:	647b      	str	r3, [r7, #68]	; 0x44
 801c4de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c4e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c4e4:	e841 2300 	strex	r3, r2, [r1]
 801c4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c4ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d1e6      	bne.n	801c4be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	2220      	movs	r2, #32
 801c4f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	2200      	movs	r2, #0
 801c4fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801c500:	2303      	movs	r3, #3
 801c502:	e063      	b.n	801c5cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	681b      	ldr	r3, [r3, #0]
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	f003 0304 	and.w	r3, r3, #4
 801c50e:	2b04      	cmp	r3, #4
 801c510:	d149      	bne.n	801c5a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801c512:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801c516:	9300      	str	r3, [sp, #0]
 801c518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c51a:	2200      	movs	r2, #0
 801c51c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801c520:	6878      	ldr	r0, [r7, #4]
 801c522:	f000 f857 	bl	801c5d4 <UART_WaitOnFlagUntilTimeout>
 801c526:	4603      	mov	r3, r0
 801c528:	2b00      	cmp	r3, #0
 801c52a:	d03c      	beq.n	801c5a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	681b      	ldr	r3, [r3, #0]
 801c530:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c534:	e853 3f00 	ldrex	r3, [r3]
 801c538:	623b      	str	r3, [r7, #32]
   return(result);
 801c53a:	6a3b      	ldr	r3, [r7, #32]
 801c53c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c540:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	461a      	mov	r2, r3
 801c548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c54a:	633b      	str	r3, [r7, #48]	; 0x30
 801c54c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c54e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c552:	e841 2300 	strex	r3, r2, [r1]
 801c556:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d1e6      	bne.n	801c52c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	681b      	ldr	r3, [r3, #0]
 801c562:	3308      	adds	r3, #8
 801c564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c566:	693b      	ldr	r3, [r7, #16]
 801c568:	e853 3f00 	ldrex	r3, [r3]
 801c56c:	60fb      	str	r3, [r7, #12]
   return(result);
 801c56e:	68fb      	ldr	r3, [r7, #12]
 801c570:	f023 0301 	bic.w	r3, r3, #1
 801c574:	64bb      	str	r3, [r7, #72]	; 0x48
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	681b      	ldr	r3, [r3, #0]
 801c57a:	3308      	adds	r3, #8
 801c57c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c57e:	61fa      	str	r2, [r7, #28]
 801c580:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c582:	69b9      	ldr	r1, [r7, #24]
 801c584:	69fa      	ldr	r2, [r7, #28]
 801c586:	e841 2300 	strex	r3, r2, [r1]
 801c58a:	617b      	str	r3, [r7, #20]
   return(result);
 801c58c:	697b      	ldr	r3, [r7, #20]
 801c58e:	2b00      	cmp	r3, #0
 801c590:	d1e5      	bne.n	801c55e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	2220      	movs	r2, #32
 801c596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	2200      	movs	r2, #0
 801c59e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801c5a2:	2303      	movs	r3, #3
 801c5a4:	e012      	b.n	801c5cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	2220      	movs	r2, #32
 801c5aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	2220      	movs	r2, #32
 801c5b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	2200      	movs	r2, #0
 801c5ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	2200      	movs	r2, #0
 801c5c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	2200      	movs	r2, #0
 801c5c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801c5ca:	2300      	movs	r3, #0
}
 801c5cc:	4618      	mov	r0, r3
 801c5ce:	3758      	adds	r7, #88	; 0x58
 801c5d0:	46bd      	mov	sp, r7
 801c5d2:	bd80      	pop	{r7, pc}

0801c5d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801c5d4:	b580      	push	{r7, lr}
 801c5d6:	b084      	sub	sp, #16
 801c5d8:	af00      	add	r7, sp, #0
 801c5da:	60f8      	str	r0, [r7, #12]
 801c5dc:	60b9      	str	r1, [r7, #8]
 801c5de:	603b      	str	r3, [r7, #0]
 801c5e0:	4613      	mov	r3, r2
 801c5e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c5e4:	e049      	b.n	801c67a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c5e6:	69bb      	ldr	r3, [r7, #24]
 801c5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5ec:	d045      	beq.n	801c67a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c5ee:	f7f6 ffd1 	bl	8013594 <HAL_GetTick>
 801c5f2:	4602      	mov	r2, r0
 801c5f4:	683b      	ldr	r3, [r7, #0]
 801c5f6:	1ad3      	subs	r3, r2, r3
 801c5f8:	69ba      	ldr	r2, [r7, #24]
 801c5fa:	429a      	cmp	r2, r3
 801c5fc:	d302      	bcc.n	801c604 <UART_WaitOnFlagUntilTimeout+0x30>
 801c5fe:	69bb      	ldr	r3, [r7, #24]
 801c600:	2b00      	cmp	r3, #0
 801c602:	d101      	bne.n	801c608 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801c604:	2303      	movs	r3, #3
 801c606:	e048      	b.n	801c69a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	f003 0304 	and.w	r3, r3, #4
 801c612:	2b00      	cmp	r3, #0
 801c614:	d031      	beq.n	801c67a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801c616:	68fb      	ldr	r3, [r7, #12]
 801c618:	681b      	ldr	r3, [r3, #0]
 801c61a:	69db      	ldr	r3, [r3, #28]
 801c61c:	f003 0308 	and.w	r3, r3, #8
 801c620:	2b08      	cmp	r3, #8
 801c622:	d110      	bne.n	801c646 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	681b      	ldr	r3, [r3, #0]
 801c628:	2208      	movs	r2, #8
 801c62a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801c62c:	68f8      	ldr	r0, [r7, #12]
 801c62e:	f000 f95b 	bl	801c8e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	2208      	movs	r2, #8
 801c636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	2200      	movs	r2, #0
 801c63e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801c642:	2301      	movs	r3, #1
 801c644:	e029      	b.n	801c69a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	681b      	ldr	r3, [r3, #0]
 801c64a:	69db      	ldr	r3, [r3, #28]
 801c64c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c654:	d111      	bne.n	801c67a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	681b      	ldr	r3, [r3, #0]
 801c65a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c65e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801c660:	68f8      	ldr	r0, [r7, #12]
 801c662:	f000 f941 	bl	801c8e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801c666:	68fb      	ldr	r3, [r7, #12]
 801c668:	2220      	movs	r2, #32
 801c66a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	2200      	movs	r2, #0
 801c672:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801c676:	2303      	movs	r3, #3
 801c678:	e00f      	b.n	801c69a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	69da      	ldr	r2, [r3, #28]
 801c680:	68bb      	ldr	r3, [r7, #8]
 801c682:	4013      	ands	r3, r2
 801c684:	68ba      	ldr	r2, [r7, #8]
 801c686:	429a      	cmp	r2, r3
 801c688:	bf0c      	ite	eq
 801c68a:	2301      	moveq	r3, #1
 801c68c:	2300      	movne	r3, #0
 801c68e:	b2db      	uxtb	r3, r3
 801c690:	461a      	mov	r2, r3
 801c692:	79fb      	ldrb	r3, [r7, #7]
 801c694:	429a      	cmp	r2, r3
 801c696:	d0a6      	beq.n	801c5e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801c698:	2300      	movs	r3, #0
}
 801c69a:	4618      	mov	r0, r3
 801c69c:	3710      	adds	r7, #16
 801c69e:	46bd      	mov	sp, r7
 801c6a0:	bd80      	pop	{r7, pc}
	...

0801c6a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c6a4:	b480      	push	{r7}
 801c6a6:	b0a3      	sub	sp, #140	; 0x8c
 801c6a8:	af00      	add	r7, sp, #0
 801c6aa:	60f8      	str	r0, [r7, #12]
 801c6ac:	60b9      	str	r1, [r7, #8]
 801c6ae:	4613      	mov	r3, r2
 801c6b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801c6b2:	68fb      	ldr	r3, [r7, #12]
 801c6b4:	68ba      	ldr	r2, [r7, #8]
 801c6b6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801c6b8:	68fb      	ldr	r3, [r7, #12]
 801c6ba:	88fa      	ldrh	r2, [r7, #6]
 801c6bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801c6c0:	68fb      	ldr	r3, [r7, #12]
 801c6c2:	88fa      	ldrh	r2, [r7, #6]
 801c6c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	2200      	movs	r2, #0
 801c6cc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	689b      	ldr	r3, [r3, #8]
 801c6d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c6d6:	d10e      	bne.n	801c6f6 <UART_Start_Receive_IT+0x52>
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	691b      	ldr	r3, [r3, #16]
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	d105      	bne.n	801c6ec <UART_Start_Receive_IT+0x48>
 801c6e0:	68fb      	ldr	r3, [r7, #12]
 801c6e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 801c6e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801c6ea:	e02d      	b.n	801c748 <UART_Start_Receive_IT+0xa4>
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	22ff      	movs	r2, #255	; 0xff
 801c6f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801c6f4:	e028      	b.n	801c748 <UART_Start_Receive_IT+0xa4>
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	689b      	ldr	r3, [r3, #8]
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d10d      	bne.n	801c71a <UART_Start_Receive_IT+0x76>
 801c6fe:	68fb      	ldr	r3, [r7, #12]
 801c700:	691b      	ldr	r3, [r3, #16]
 801c702:	2b00      	cmp	r3, #0
 801c704:	d104      	bne.n	801c710 <UART_Start_Receive_IT+0x6c>
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	22ff      	movs	r2, #255	; 0xff
 801c70a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801c70e:	e01b      	b.n	801c748 <UART_Start_Receive_IT+0xa4>
 801c710:	68fb      	ldr	r3, [r7, #12]
 801c712:	227f      	movs	r2, #127	; 0x7f
 801c714:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801c718:	e016      	b.n	801c748 <UART_Start_Receive_IT+0xa4>
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	689b      	ldr	r3, [r3, #8]
 801c71e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c722:	d10d      	bne.n	801c740 <UART_Start_Receive_IT+0x9c>
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	691b      	ldr	r3, [r3, #16]
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d104      	bne.n	801c736 <UART_Start_Receive_IT+0x92>
 801c72c:	68fb      	ldr	r3, [r7, #12]
 801c72e:	227f      	movs	r2, #127	; 0x7f
 801c730:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801c734:	e008      	b.n	801c748 <UART_Start_Receive_IT+0xa4>
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	223f      	movs	r2, #63	; 0x3f
 801c73a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801c73e:	e003      	b.n	801c748 <UART_Start_Receive_IT+0xa4>
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	2200      	movs	r2, #0
 801c744:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	2200      	movs	r2, #0
 801c74c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c750:	68fb      	ldr	r3, [r7, #12]
 801c752:	2222      	movs	r2, #34	; 0x22
 801c754:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c758:	68fb      	ldr	r3, [r7, #12]
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	3308      	adds	r3, #8
 801c75e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c762:	e853 3f00 	ldrex	r3, [r3]
 801c766:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801c768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c76a:	f043 0301 	orr.w	r3, r3, #1
 801c76e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801c772:	68fb      	ldr	r3, [r7, #12]
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	3308      	adds	r3, #8
 801c778:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801c77c:	673a      	str	r2, [r7, #112]	; 0x70
 801c77e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c780:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801c782:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801c784:	e841 2300 	strex	r3, r2, [r1]
 801c788:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801c78a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d1e3      	bne.n	801c758 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c798:	d14f      	bne.n	801c83a <UART_Start_Receive_IT+0x196>
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801c7a0:	88fa      	ldrh	r2, [r7, #6]
 801c7a2:	429a      	cmp	r2, r3
 801c7a4:	d349      	bcc.n	801c83a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c7a6:	68fb      	ldr	r3, [r7, #12]
 801c7a8:	689b      	ldr	r3, [r3, #8]
 801c7aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c7ae:	d107      	bne.n	801c7c0 <UART_Start_Receive_IT+0x11c>
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	691b      	ldr	r3, [r3, #16]
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	d103      	bne.n	801c7c0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	4a47      	ldr	r2, [pc, #284]	; (801c8d8 <UART_Start_Receive_IT+0x234>)
 801c7bc:	675a      	str	r2, [r3, #116]	; 0x74
 801c7be:	e002      	b.n	801c7c6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801c7c0:	68fb      	ldr	r3, [r7, #12]
 801c7c2:	4a46      	ldr	r2, [pc, #280]	; (801c8dc <UART_Start_Receive_IT+0x238>)
 801c7c4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	691b      	ldr	r3, [r3, #16]
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	d01a      	beq.n	801c804 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c7d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c7d6:	e853 3f00 	ldrex	r3, [r3]
 801c7da:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801c7dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c7de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c7e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	681b      	ldr	r3, [r3, #0]
 801c7ea:	461a      	mov	r2, r3
 801c7ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c7f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c7f2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c7f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c7f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c7f8:	e841 2300 	strex	r3, r2, [r1]
 801c7fc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801c7fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c800:	2b00      	cmp	r3, #0
 801c802:	d1e4      	bne.n	801c7ce <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	3308      	adds	r3, #8
 801c80a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c80e:	e853 3f00 	ldrex	r3, [r3]
 801c812:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c81a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801c81c:	68fb      	ldr	r3, [r7, #12]
 801c81e:	681b      	ldr	r3, [r3, #0]
 801c820:	3308      	adds	r3, #8
 801c822:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801c824:	64ba      	str	r2, [r7, #72]	; 0x48
 801c826:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c828:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801c82a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c82c:	e841 2300 	strex	r3, r2, [r1]
 801c830:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801c832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c834:	2b00      	cmp	r3, #0
 801c836:	d1e5      	bne.n	801c804 <UART_Start_Receive_IT+0x160>
 801c838:	e046      	b.n	801c8c8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c83a:	68fb      	ldr	r3, [r7, #12]
 801c83c:	689b      	ldr	r3, [r3, #8]
 801c83e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c842:	d107      	bne.n	801c854 <UART_Start_Receive_IT+0x1b0>
 801c844:	68fb      	ldr	r3, [r7, #12]
 801c846:	691b      	ldr	r3, [r3, #16]
 801c848:	2b00      	cmp	r3, #0
 801c84a:	d103      	bne.n	801c854 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801c84c:	68fb      	ldr	r3, [r7, #12]
 801c84e:	4a24      	ldr	r2, [pc, #144]	; (801c8e0 <UART_Start_Receive_IT+0x23c>)
 801c850:	675a      	str	r2, [r3, #116]	; 0x74
 801c852:	e002      	b.n	801c85a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801c854:	68fb      	ldr	r3, [r7, #12]
 801c856:	4a23      	ldr	r2, [pc, #140]	; (801c8e4 <UART_Start_Receive_IT+0x240>)
 801c858:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801c85a:	68fb      	ldr	r3, [r7, #12]
 801c85c:	691b      	ldr	r3, [r3, #16]
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d019      	beq.n	801c896 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801c862:	68fb      	ldr	r3, [r7, #12]
 801c864:	681b      	ldr	r3, [r3, #0]
 801c866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c86a:	e853 3f00 	ldrex	r3, [r3]
 801c86e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c872:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801c876:	677b      	str	r3, [r7, #116]	; 0x74
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	461a      	mov	r2, r3
 801c87e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c880:	637b      	str	r3, [r7, #52]	; 0x34
 801c882:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c884:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c888:	e841 2300 	strex	r3, r2, [r1]
 801c88c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c890:	2b00      	cmp	r3, #0
 801c892:	d1e6      	bne.n	801c862 <UART_Start_Receive_IT+0x1be>
 801c894:	e018      	b.n	801c8c8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801c896:	68fb      	ldr	r3, [r7, #12]
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c89c:	697b      	ldr	r3, [r7, #20]
 801c89e:	e853 3f00 	ldrex	r3, [r3]
 801c8a2:	613b      	str	r3, [r7, #16]
   return(result);
 801c8a4:	693b      	ldr	r3, [r7, #16]
 801c8a6:	f043 0320 	orr.w	r3, r3, #32
 801c8aa:	67bb      	str	r3, [r7, #120]	; 0x78
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	461a      	mov	r2, r3
 801c8b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c8b4:	623b      	str	r3, [r7, #32]
 801c8b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c8b8:	69f9      	ldr	r1, [r7, #28]
 801c8ba:	6a3a      	ldr	r2, [r7, #32]
 801c8bc:	e841 2300 	strex	r3, r2, [r1]
 801c8c0:	61bb      	str	r3, [r7, #24]
   return(result);
 801c8c2:	69bb      	ldr	r3, [r7, #24]
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	d1e6      	bne.n	801c896 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801c8c8:	2300      	movs	r3, #0
}
 801c8ca:	4618      	mov	r0, r3
 801c8cc:	378c      	adds	r7, #140	; 0x8c
 801c8ce:	46bd      	mov	sp, r7
 801c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8d4:	4770      	bx	lr
 801c8d6:	bf00      	nop
 801c8d8:	0801d109 	.word	0x0801d109
 801c8dc:	0801cda9 	.word	0x0801cda9
 801c8e0:	0801cbf1 	.word	0x0801cbf1
 801c8e4:	0801ca39 	.word	0x0801ca39

0801c8e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c8e8:	b480      	push	{r7}
 801c8ea:	b095      	sub	sp, #84	; 0x54
 801c8ec:	af00      	add	r7, sp, #0
 801c8ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	681b      	ldr	r3, [r3, #0]
 801c8f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c8f8:	e853 3f00 	ldrex	r3, [r3]
 801c8fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c904:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	681b      	ldr	r3, [r3, #0]
 801c90a:	461a      	mov	r2, r3
 801c90c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c90e:	643b      	str	r3, [r7, #64]	; 0x40
 801c910:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c912:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c916:	e841 2300 	strex	r3, r2, [r1]
 801c91a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d1e6      	bne.n	801c8f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	681b      	ldr	r3, [r3, #0]
 801c926:	3308      	adds	r3, #8
 801c928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c92a:	6a3b      	ldr	r3, [r7, #32]
 801c92c:	e853 3f00 	ldrex	r3, [r3]
 801c930:	61fb      	str	r3, [r7, #28]
   return(result);
 801c932:	69fb      	ldr	r3, [r7, #28]
 801c934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c938:	f023 0301 	bic.w	r3, r3, #1
 801c93c:	64bb      	str	r3, [r7, #72]	; 0x48
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	3308      	adds	r3, #8
 801c944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c946:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c948:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c94a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c94c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c94e:	e841 2300 	strex	r3, r2, [r1]
 801c952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c956:	2b00      	cmp	r3, #0
 801c958:	d1e3      	bne.n	801c922 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c95e:	2b01      	cmp	r3, #1
 801c960:	d118      	bne.n	801c994 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c968:	68fb      	ldr	r3, [r7, #12]
 801c96a:	e853 3f00 	ldrex	r3, [r3]
 801c96e:	60bb      	str	r3, [r7, #8]
   return(result);
 801c970:	68bb      	ldr	r3, [r7, #8]
 801c972:	f023 0310 	bic.w	r3, r3, #16
 801c976:	647b      	str	r3, [r7, #68]	; 0x44
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	681b      	ldr	r3, [r3, #0]
 801c97c:	461a      	mov	r2, r3
 801c97e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c980:	61bb      	str	r3, [r7, #24]
 801c982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c984:	6979      	ldr	r1, [r7, #20]
 801c986:	69ba      	ldr	r2, [r7, #24]
 801c988:	e841 2300 	strex	r3, r2, [r1]
 801c98c:	613b      	str	r3, [r7, #16]
   return(result);
 801c98e:	693b      	ldr	r3, [r7, #16]
 801c990:	2b00      	cmp	r3, #0
 801c992:	d1e6      	bne.n	801c962 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c994:	687b      	ldr	r3, [r7, #4]
 801c996:	2220      	movs	r2, #32
 801c998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	2200      	movs	r2, #0
 801c9a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	2200      	movs	r2, #0
 801c9a6:	675a      	str	r2, [r3, #116]	; 0x74
}
 801c9a8:	bf00      	nop
 801c9aa:	3754      	adds	r7, #84	; 0x54
 801c9ac:	46bd      	mov	sp, r7
 801c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9b2:	4770      	bx	lr

0801c9b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c9b4:	b580      	push	{r7, lr}
 801c9b6:	b084      	sub	sp, #16
 801c9b8:	af00      	add	r7, sp, #0
 801c9ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c9c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801c9c2:	68fb      	ldr	r3, [r7, #12]
 801c9c4:	2200      	movs	r2, #0
 801c9c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801c9ca:	68fb      	ldr	r3, [r7, #12]
 801c9cc:	2200      	movs	r2, #0
 801c9ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c9d2:	68f8      	ldr	r0, [r7, #12]
 801c9d4:	f7ff f99c 	bl	801bd10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c9d8:	bf00      	nop
 801c9da:	3710      	adds	r7, #16
 801c9dc:	46bd      	mov	sp, r7
 801c9de:	bd80      	pop	{r7, pc}

0801c9e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c9e0:	b580      	push	{r7, lr}
 801c9e2:	b088      	sub	sp, #32
 801c9e4:	af00      	add	r7, sp, #0
 801c9e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c9ee:	68fb      	ldr	r3, [r7, #12]
 801c9f0:	e853 3f00 	ldrex	r3, [r3]
 801c9f4:	60bb      	str	r3, [r7, #8]
   return(result);
 801c9f6:	68bb      	ldr	r3, [r7, #8]
 801c9f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c9fc:	61fb      	str	r3, [r7, #28]
 801c9fe:	687b      	ldr	r3, [r7, #4]
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	461a      	mov	r2, r3
 801ca04:	69fb      	ldr	r3, [r7, #28]
 801ca06:	61bb      	str	r3, [r7, #24]
 801ca08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ca0a:	6979      	ldr	r1, [r7, #20]
 801ca0c:	69ba      	ldr	r2, [r7, #24]
 801ca0e:	e841 2300 	strex	r3, r2, [r1]
 801ca12:	613b      	str	r3, [r7, #16]
   return(result);
 801ca14:	693b      	ldr	r3, [r7, #16]
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d1e6      	bne.n	801c9e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	2220      	movs	r2, #32
 801ca1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	2200      	movs	r2, #0
 801ca26:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801ca28:	6878      	ldr	r0, [r7, #4]
 801ca2a:	f7ff f967 	bl	801bcfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ca2e:	bf00      	nop
 801ca30:	3720      	adds	r7, #32
 801ca32:	46bd      	mov	sp, r7
 801ca34:	bd80      	pop	{r7, pc}
	...

0801ca38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801ca38:	b580      	push	{r7, lr}
 801ca3a:	b09c      	sub	sp, #112	; 0x70
 801ca3c:	af00      	add	r7, sp, #0
 801ca3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ca46:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ca50:	2b22      	cmp	r3, #34	; 0x22
 801ca52:	f040 80be 	bne.w	801cbd2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca5c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801ca60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801ca64:	b2d9      	uxtb	r1, r3
 801ca66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801ca6a:	b2da      	uxtb	r2, r3
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca70:	400a      	ands	r2, r1
 801ca72:	b2d2      	uxtb	r2, r2
 801ca74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801ca76:	687b      	ldr	r3, [r7, #4]
 801ca78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca7a:	1c5a      	adds	r2, r3, #1
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801ca86:	b29b      	uxth	r3, r3
 801ca88:	3b01      	subs	r3, #1
 801ca8a:	b29a      	uxth	r2, r3
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801ca98:	b29b      	uxth	r3, r3
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	f040 80a1 	bne.w	801cbe2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	681b      	ldr	r3, [r3, #0]
 801caa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801caa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801caa8:	e853 3f00 	ldrex	r3, [r3]
 801caac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801caae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801cab4:	66bb      	str	r3, [r7, #104]	; 0x68
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	461a      	mov	r2, r3
 801cabc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cabe:	65bb      	str	r3, [r7, #88]	; 0x58
 801cac0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cac2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801cac4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801cac6:	e841 2300 	strex	r3, r2, [r1]
 801caca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801cacc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d1e6      	bne.n	801caa0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	3308      	adds	r3, #8
 801cad8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cadc:	e853 3f00 	ldrex	r3, [r3]
 801cae0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801cae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cae4:	f023 0301 	bic.w	r3, r3, #1
 801cae8:	667b      	str	r3, [r7, #100]	; 0x64
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	681b      	ldr	r3, [r3, #0]
 801caee:	3308      	adds	r3, #8
 801caf0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801caf2:	647a      	str	r2, [r7, #68]	; 0x44
 801caf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801caf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801caf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cafa:	e841 2300 	strex	r3, r2, [r1]
 801cafe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801cb00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb02:	2b00      	cmp	r3, #0
 801cb04:	d1e5      	bne.n	801cad2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	2220      	movs	r2, #32
 801cb0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	2200      	movs	r2, #0
 801cb12:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	2200      	movs	r2, #0
 801cb18:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	681b      	ldr	r3, [r3, #0]
 801cb1e:	4a33      	ldr	r2, [pc, #204]	; (801cbec <UART_RxISR_8BIT+0x1b4>)
 801cb20:	4293      	cmp	r3, r2
 801cb22:	d01f      	beq.n	801cb64 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801cb24:	687b      	ldr	r3, [r7, #4]
 801cb26:	681b      	ldr	r3, [r3, #0]
 801cb28:	685b      	ldr	r3, [r3, #4]
 801cb2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d018      	beq.n	801cb64 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb3a:	e853 3f00 	ldrex	r3, [r3]
 801cb3e:	623b      	str	r3, [r7, #32]
   return(result);
 801cb40:	6a3b      	ldr	r3, [r7, #32]
 801cb42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801cb46:	663b      	str	r3, [r7, #96]	; 0x60
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	681b      	ldr	r3, [r3, #0]
 801cb4c:	461a      	mov	r2, r3
 801cb4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cb50:	633b      	str	r3, [r7, #48]	; 0x30
 801cb52:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cb54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801cb56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cb58:	e841 2300 	strex	r3, r2, [r1]
 801cb5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801cb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d1e6      	bne.n	801cb32 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cb68:	2b01      	cmp	r3, #1
 801cb6a:	d12e      	bne.n	801cbca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	2200      	movs	r2, #0
 801cb70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	681b      	ldr	r3, [r3, #0]
 801cb76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cb78:	693b      	ldr	r3, [r7, #16]
 801cb7a:	e853 3f00 	ldrex	r3, [r3]
 801cb7e:	60fb      	str	r3, [r7, #12]
   return(result);
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	f023 0310 	bic.w	r3, r3, #16
 801cb86:	65fb      	str	r3, [r7, #92]	; 0x5c
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	681b      	ldr	r3, [r3, #0]
 801cb8c:	461a      	mov	r2, r3
 801cb8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cb90:	61fb      	str	r3, [r7, #28]
 801cb92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cb94:	69b9      	ldr	r1, [r7, #24]
 801cb96:	69fa      	ldr	r2, [r7, #28]
 801cb98:	e841 2300 	strex	r3, r2, [r1]
 801cb9c:	617b      	str	r3, [r7, #20]
   return(result);
 801cb9e:	697b      	ldr	r3, [r7, #20]
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d1e6      	bne.n	801cb72 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	681b      	ldr	r3, [r3, #0]
 801cba8:	69db      	ldr	r3, [r3, #28]
 801cbaa:	f003 0310 	and.w	r3, r3, #16
 801cbae:	2b10      	cmp	r3, #16
 801cbb0:	d103      	bne.n	801cbba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	2210      	movs	r2, #16
 801cbb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801cbc0:	4619      	mov	r1, r3
 801cbc2:	6878      	ldr	r0, [r7, #4]
 801cbc4:	f7ff f8ae 	bl	801bd24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801cbc8:	e00b      	b.n	801cbe2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801cbca:	6878      	ldr	r0, [r7, #4]
 801cbcc:	f7e7 faaa 	bl	8004124 <HAL_UART_RxCpltCallback>
}
 801cbd0:	e007      	b.n	801cbe2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	681b      	ldr	r3, [r3, #0]
 801cbd6:	699a      	ldr	r2, [r3, #24]
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	f042 0208 	orr.w	r2, r2, #8
 801cbe0:	619a      	str	r2, [r3, #24]
}
 801cbe2:	bf00      	nop
 801cbe4:	3770      	adds	r7, #112	; 0x70
 801cbe6:	46bd      	mov	sp, r7
 801cbe8:	bd80      	pop	{r7, pc}
 801cbea:	bf00      	nop
 801cbec:	40008000 	.word	0x40008000

0801cbf0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801cbf0:	b580      	push	{r7, lr}
 801cbf2:	b09c      	sub	sp, #112	; 0x70
 801cbf4:	af00      	add	r7, sp, #0
 801cbf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801cbfe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cc08:	2b22      	cmp	r3, #34	; 0x22
 801cc0a:	f040 80be 	bne.w	801cd8a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	681b      	ldr	r3, [r3, #0]
 801cc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801cc18:	687b      	ldr	r3, [r7, #4]
 801cc1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cc1c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801cc1e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801cc22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801cc26:	4013      	ands	r3, r2
 801cc28:	b29a      	uxth	r2, r3
 801cc2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cc2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cc32:	1c9a      	adds	r2, r3, #2
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801cc38:	687b      	ldr	r3, [r7, #4]
 801cc3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801cc3e:	b29b      	uxth	r3, r3
 801cc40:	3b01      	subs	r3, #1
 801cc42:	b29a      	uxth	r2, r3
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801cc50:	b29b      	uxth	r3, r3
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	f040 80a1 	bne.w	801cd9a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	681b      	ldr	r3, [r3, #0]
 801cc5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cc5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cc60:	e853 3f00 	ldrex	r3, [r3]
 801cc64:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801cc66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801cc6c:	667b      	str	r3, [r7, #100]	; 0x64
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	461a      	mov	r2, r3
 801cc74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801cc76:	657b      	str	r3, [r7, #84]	; 0x54
 801cc78:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cc7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801cc7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cc7e:	e841 2300 	strex	r3, r2, [r1]
 801cc82:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801cc84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	d1e6      	bne.n	801cc58 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	3308      	adds	r3, #8
 801cc90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cc92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cc94:	e853 3f00 	ldrex	r3, [r3]
 801cc98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801cc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc9c:	f023 0301 	bic.w	r3, r3, #1
 801cca0:	663b      	str	r3, [r7, #96]	; 0x60
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	3308      	adds	r3, #8
 801cca8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ccaa:	643a      	str	r2, [r7, #64]	; 0x40
 801ccac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ccae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801ccb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ccb2:	e841 2300 	strex	r3, r2, [r1]
 801ccb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801ccb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d1e5      	bne.n	801cc8a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	2220      	movs	r2, #32
 801ccc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	2200      	movs	r2, #0
 801ccca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	2200      	movs	r2, #0
 801ccd0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	4a33      	ldr	r2, [pc, #204]	; (801cda4 <UART_RxISR_16BIT+0x1b4>)
 801ccd8:	4293      	cmp	r3, r2
 801ccda:	d01f      	beq.n	801cd1c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	685b      	ldr	r3, [r3, #4]
 801cce2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801cce6:	2b00      	cmp	r3, #0
 801cce8:	d018      	beq.n	801cd1c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ccf0:	6a3b      	ldr	r3, [r7, #32]
 801ccf2:	e853 3f00 	ldrex	r3, [r3]
 801ccf6:	61fb      	str	r3, [r7, #28]
   return(result);
 801ccf8:	69fb      	ldr	r3, [r7, #28]
 801ccfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801ccfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	681b      	ldr	r3, [r3, #0]
 801cd04:	461a      	mov	r2, r3
 801cd06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cd08:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cd0a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cd0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801cd0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cd10:	e841 2300 	strex	r3, r2, [r1]
 801cd14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801cd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d1e6      	bne.n	801ccea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cd20:	2b01      	cmp	r3, #1
 801cd22:	d12e      	bne.n	801cd82 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	2200      	movs	r2, #0
 801cd28:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	681b      	ldr	r3, [r3, #0]
 801cd2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cd30:	68fb      	ldr	r3, [r7, #12]
 801cd32:	e853 3f00 	ldrex	r3, [r3]
 801cd36:	60bb      	str	r3, [r7, #8]
   return(result);
 801cd38:	68bb      	ldr	r3, [r7, #8]
 801cd3a:	f023 0310 	bic.w	r3, r3, #16
 801cd3e:	65bb      	str	r3, [r7, #88]	; 0x58
 801cd40:	687b      	ldr	r3, [r7, #4]
 801cd42:	681b      	ldr	r3, [r3, #0]
 801cd44:	461a      	mov	r2, r3
 801cd46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801cd48:	61bb      	str	r3, [r7, #24]
 801cd4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cd4c:	6979      	ldr	r1, [r7, #20]
 801cd4e:	69ba      	ldr	r2, [r7, #24]
 801cd50:	e841 2300 	strex	r3, r2, [r1]
 801cd54:	613b      	str	r3, [r7, #16]
   return(result);
 801cd56:	693b      	ldr	r3, [r7, #16]
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d1e6      	bne.n	801cd2a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	681b      	ldr	r3, [r3, #0]
 801cd60:	69db      	ldr	r3, [r3, #28]
 801cd62:	f003 0310 	and.w	r3, r3, #16
 801cd66:	2b10      	cmp	r3, #16
 801cd68:	d103      	bne.n	801cd72 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	681b      	ldr	r3, [r3, #0]
 801cd6e:	2210      	movs	r2, #16
 801cd70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801cd78:	4619      	mov	r1, r3
 801cd7a:	6878      	ldr	r0, [r7, #4]
 801cd7c:	f7fe ffd2 	bl	801bd24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801cd80:	e00b      	b.n	801cd9a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801cd82:	6878      	ldr	r0, [r7, #4]
 801cd84:	f7e7 f9ce 	bl	8004124 <HAL_UART_RxCpltCallback>
}
 801cd88:	e007      	b.n	801cd9a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	699a      	ldr	r2, [r3, #24]
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	681b      	ldr	r3, [r3, #0]
 801cd94:	f042 0208 	orr.w	r2, r2, #8
 801cd98:	619a      	str	r2, [r3, #24]
}
 801cd9a:	bf00      	nop
 801cd9c:	3770      	adds	r7, #112	; 0x70
 801cd9e:	46bd      	mov	sp, r7
 801cda0:	bd80      	pop	{r7, pc}
 801cda2:	bf00      	nop
 801cda4:	40008000 	.word	0x40008000

0801cda8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801cda8:	b580      	push	{r7, lr}
 801cdaa:	b0ac      	sub	sp, #176	; 0xb0
 801cdac:	af00      	add	r7, sp, #0
 801cdae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801cdb0:	687b      	ldr	r3, [r7, #4]
 801cdb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801cdb6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	681b      	ldr	r3, [r3, #0]
 801cdbe:	69db      	ldr	r3, [r3, #28]
 801cdc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	681b      	ldr	r3, [r3, #0]
 801cdc8:	681b      	ldr	r3, [r3, #0]
 801cdca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	681b      	ldr	r3, [r3, #0]
 801cdd2:	689b      	ldr	r3, [r3, #8]
 801cdd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cdde:	2b22      	cmp	r3, #34	; 0x22
 801cde0:	f040 8182 	bne.w	801d0e8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801cdea:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801cdee:	e125      	b.n	801d03c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cdf6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801cdfa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801cdfe:	b2d9      	uxtb	r1, r3
 801ce00:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801ce04:	b2da      	uxtb	r2, r3
 801ce06:	687b      	ldr	r3, [r7, #4]
 801ce08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ce0a:	400a      	ands	r2, r1
 801ce0c:	b2d2      	uxtb	r2, r2
 801ce0e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ce14:	1c5a      	adds	r2, r3, #1
 801ce16:	687b      	ldr	r3, [r7, #4]
 801ce18:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801ce20:	b29b      	uxth	r3, r3
 801ce22:	3b01      	subs	r3, #1
 801ce24:	b29a      	uxth	r2, r3
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	69db      	ldr	r3, [r3, #28]
 801ce32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801ce36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ce3a:	f003 0307 	and.w	r3, r3, #7
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d053      	beq.n	801ceea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801ce42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ce46:	f003 0301 	and.w	r3, r3, #1
 801ce4a:	2b00      	cmp	r3, #0
 801ce4c:	d011      	beq.n	801ce72 <UART_RxISR_8BIT_FIFOEN+0xca>
 801ce4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ce52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d00b      	beq.n	801ce72 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801ce5a:	687b      	ldr	r3, [r7, #4]
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	2201      	movs	r2, #1
 801ce60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce68:	f043 0201 	orr.w	r2, r3, #1
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801ce72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ce76:	f003 0302 	and.w	r3, r3, #2
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	d011      	beq.n	801cea2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801ce7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ce82:	f003 0301 	and.w	r3, r3, #1
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d00b      	beq.n	801cea2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	2202      	movs	r2, #2
 801ce90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce98:	f043 0204 	orr.w	r2, r3, #4
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801cea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801cea6:	f003 0304 	and.w	r3, r3, #4
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d011      	beq.n	801ced2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801ceae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ceb2:	f003 0301 	and.w	r3, r3, #1
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	d00b      	beq.n	801ced2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	681b      	ldr	r3, [r3, #0]
 801cebe:	2204      	movs	r2, #4
 801cec0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cec8:	f043 0202 	orr.w	r2, r3, #2
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	d006      	beq.n	801ceea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801cedc:	6878      	ldr	r0, [r7, #4]
 801cede:	f7fe ff17 	bl	801bd10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	2200      	movs	r2, #0
 801cee6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801cef0:	b29b      	uxth	r3, r3
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	f040 80a2 	bne.w	801d03c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	681b      	ldr	r3, [r3, #0]
 801cefc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cefe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cf00:	e853 3f00 	ldrex	r3, [r3]
 801cf04:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801cf06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cf08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801cf0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	461a      	mov	r2, r3
 801cf16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801cf1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801cf1c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cf1e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801cf20:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801cf22:	e841 2300 	strex	r3, r2, [r1]
 801cf26:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801cf28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	d1e4      	bne.n	801cef8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801cf2e:	687b      	ldr	r3, [r7, #4]
 801cf30:	681b      	ldr	r3, [r3, #0]
 801cf32:	3308      	adds	r3, #8
 801cf34:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cf36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cf38:	e853 3f00 	ldrex	r3, [r3]
 801cf3c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801cf3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801cf40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801cf44:	f023 0301 	bic.w	r3, r3, #1
 801cf48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	3308      	adds	r3, #8
 801cf52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801cf56:	66ba      	str	r2, [r7, #104]	; 0x68
 801cf58:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cf5a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801cf5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cf5e:	e841 2300 	strex	r3, r2, [r1]
 801cf62:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801cf64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d1e1      	bne.n	801cf2e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801cf6a:	687b      	ldr	r3, [r7, #4]
 801cf6c:	2220      	movs	r2, #32
 801cf6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	2200      	movs	r2, #0
 801cf76:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	2200      	movs	r2, #0
 801cf7c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	681b      	ldr	r3, [r3, #0]
 801cf82:	4a5f      	ldr	r2, [pc, #380]	; (801d100 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801cf84:	4293      	cmp	r3, r2
 801cf86:	d021      	beq.n	801cfcc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	681b      	ldr	r3, [r3, #0]
 801cf8c:	685b      	ldr	r3, [r3, #4]
 801cf8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	d01a      	beq.n	801cfcc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	681b      	ldr	r3, [r3, #0]
 801cf9a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cf9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cf9e:	e853 3f00 	ldrex	r3, [r3]
 801cfa2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801cfa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cfa6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801cfaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	461a      	mov	r2, r3
 801cfb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cfb8:	657b      	str	r3, [r7, #84]	; 0x54
 801cfba:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cfbc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801cfbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cfc0:	e841 2300 	strex	r3, r2, [r1]
 801cfc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801cfc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d1e4      	bne.n	801cf96 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cfd0:	2b01      	cmp	r3, #1
 801cfd2:	d130      	bne.n	801d036 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	2200      	movs	r2, #0
 801cfd8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801cfda:	687b      	ldr	r3, [r7, #4]
 801cfdc:	681b      	ldr	r3, [r3, #0]
 801cfde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cfe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cfe2:	e853 3f00 	ldrex	r3, [r3]
 801cfe6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801cfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cfea:	f023 0310 	bic.w	r3, r3, #16
 801cfee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	681b      	ldr	r3, [r3, #0]
 801cff6:	461a      	mov	r2, r3
 801cff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801cffc:	643b      	str	r3, [r7, #64]	; 0x40
 801cffe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d000:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d002:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d004:	e841 2300 	strex	r3, r2, [r1]
 801d008:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801d00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d00c:	2b00      	cmp	r3, #0
 801d00e:	d1e4      	bne.n	801cfda <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	681b      	ldr	r3, [r3, #0]
 801d014:	69db      	ldr	r3, [r3, #28]
 801d016:	f003 0310 	and.w	r3, r3, #16
 801d01a:	2b10      	cmp	r3, #16
 801d01c:	d103      	bne.n	801d026 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	681b      	ldr	r3, [r3, #0]
 801d022:	2210      	movs	r2, #16
 801d024:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801d026:	687b      	ldr	r3, [r7, #4]
 801d028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801d02c:	4619      	mov	r1, r3
 801d02e:	6878      	ldr	r0, [r7, #4]
 801d030:	f7fe fe78 	bl	801bd24 <HAL_UARTEx_RxEventCallback>
 801d034:	e002      	b.n	801d03c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801d036:	6878      	ldr	r0, [r7, #4]
 801d038:	f7e7 f874 	bl	8004124 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801d03c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801d040:	2b00      	cmp	r3, #0
 801d042:	d006      	beq.n	801d052 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 801d044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d048:	f003 0320 	and.w	r3, r3, #32
 801d04c:	2b00      	cmp	r3, #0
 801d04e:	f47f aecf 	bne.w	801cdf0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801d058:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801d05c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801d060:	2b00      	cmp	r3, #0
 801d062:	d049      	beq.n	801d0f8 <UART_RxISR_8BIT_FIFOEN+0x350>
 801d064:	687b      	ldr	r3, [r7, #4]
 801d066:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d06a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801d06e:	429a      	cmp	r2, r3
 801d070:	d242      	bcs.n	801d0f8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801d072:	687b      	ldr	r3, [r7, #4]
 801d074:	681b      	ldr	r3, [r3, #0]
 801d076:	3308      	adds	r3, #8
 801d078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d07a:	6a3b      	ldr	r3, [r7, #32]
 801d07c:	e853 3f00 	ldrex	r3, [r3]
 801d080:	61fb      	str	r3, [r7, #28]
   return(result);
 801d082:	69fb      	ldr	r3, [r7, #28]
 801d084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	681b      	ldr	r3, [r3, #0]
 801d090:	3308      	adds	r3, #8
 801d092:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801d096:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d098:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d09a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d09c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d09e:	e841 2300 	strex	r3, r2, [r1]
 801d0a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801d0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d1e3      	bne.n	801d072 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	4a15      	ldr	r2, [pc, #84]	; (801d104 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801d0ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	681b      	ldr	r3, [r3, #0]
 801d0b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d0b6:	68fb      	ldr	r3, [r7, #12]
 801d0b8:	e853 3f00 	ldrex	r3, [r3]
 801d0bc:	60bb      	str	r3, [r7, #8]
   return(result);
 801d0be:	68bb      	ldr	r3, [r7, #8]
 801d0c0:	f043 0320 	orr.w	r3, r3, #32
 801d0c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	461a      	mov	r2, r3
 801d0ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d0d2:	61bb      	str	r3, [r7, #24]
 801d0d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d0d6:	6979      	ldr	r1, [r7, #20]
 801d0d8:	69ba      	ldr	r2, [r7, #24]
 801d0da:	e841 2300 	strex	r3, r2, [r1]
 801d0de:	613b      	str	r3, [r7, #16]
   return(result);
 801d0e0:	693b      	ldr	r3, [r7, #16]
 801d0e2:	2b00      	cmp	r3, #0
 801d0e4:	d1e4      	bne.n	801d0b0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801d0e6:	e007      	b.n	801d0f8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801d0e8:	687b      	ldr	r3, [r7, #4]
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	699a      	ldr	r2, [r3, #24]
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	681b      	ldr	r3, [r3, #0]
 801d0f2:	f042 0208 	orr.w	r2, r2, #8
 801d0f6:	619a      	str	r2, [r3, #24]
}
 801d0f8:	bf00      	nop
 801d0fa:	37b0      	adds	r7, #176	; 0xb0
 801d0fc:	46bd      	mov	sp, r7
 801d0fe:	bd80      	pop	{r7, pc}
 801d100:	40008000 	.word	0x40008000
 801d104:	0801ca39 	.word	0x0801ca39

0801d108 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801d108:	b580      	push	{r7, lr}
 801d10a:	b0ae      	sub	sp, #184	; 0xb8
 801d10c:	af00      	add	r7, sp, #0
 801d10e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d116:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	69db      	ldr	r3, [r3, #28]
 801d120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	681b      	ldr	r3, [r3, #0]
 801d12a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801d12e:	687b      	ldr	r3, [r7, #4]
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	689b      	ldr	r3, [r3, #8]
 801d134:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d13e:	2b22      	cmp	r3, #34	; 0x22
 801d140:	f040 8186 	bne.w	801d450 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d14a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801d14e:	e129      	b.n	801d3a4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d156:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d15e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801d162:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801d166:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d16a:	4013      	ands	r3, r2
 801d16c:	b29a      	uxth	r2, r3
 801d16e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801d172:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d178:	1c9a      	adds	r2, r3, #2
 801d17a:	687b      	ldr	r3, [r7, #4]
 801d17c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801d184:	b29b      	uxth	r3, r3
 801d186:	3b01      	subs	r3, #1
 801d188:	b29a      	uxth	r2, r3
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801d190:	687b      	ldr	r3, [r7, #4]
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	69db      	ldr	r3, [r3, #28]
 801d196:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801d19a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d19e:	f003 0307 	and.w	r3, r3, #7
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	d053      	beq.n	801d24e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801d1a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d1aa:	f003 0301 	and.w	r3, r3, #1
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	d011      	beq.n	801d1d6 <UART_RxISR_16BIT_FIFOEN+0xce>
 801d1b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d1b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d1ba:	2b00      	cmp	r3, #0
 801d1bc:	d00b      	beq.n	801d1d6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	681b      	ldr	r3, [r3, #0]
 801d1c2:	2201      	movs	r2, #1
 801d1c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801d1c6:	687b      	ldr	r3, [r7, #4]
 801d1c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d1cc:	f043 0201 	orr.w	r2, r3, #1
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d1d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d1da:	f003 0302 	and.w	r3, r3, #2
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	d011      	beq.n	801d206 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801d1e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d1e6:	f003 0301 	and.w	r3, r3, #1
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	d00b      	beq.n	801d206 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801d1ee:	687b      	ldr	r3, [r7, #4]
 801d1f0:	681b      	ldr	r3, [r3, #0]
 801d1f2:	2202      	movs	r2, #2
 801d1f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d1fc:	f043 0204 	orr.w	r2, r3, #4
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d206:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d20a:	f003 0304 	and.w	r3, r3, #4
 801d20e:	2b00      	cmp	r3, #0
 801d210:	d011      	beq.n	801d236 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801d212:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d216:	f003 0301 	and.w	r3, r3, #1
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d00b      	beq.n	801d236 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801d21e:	687b      	ldr	r3, [r7, #4]
 801d220:	681b      	ldr	r3, [r3, #0]
 801d222:	2204      	movs	r2, #4
 801d224:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801d226:	687b      	ldr	r3, [r7, #4]
 801d228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d22c:	f043 0202 	orr.w	r2, r3, #2
 801d230:	687b      	ldr	r3, [r7, #4]
 801d232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801d236:	687b      	ldr	r3, [r7, #4]
 801d238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d23c:	2b00      	cmp	r3, #0
 801d23e:	d006      	beq.n	801d24e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801d240:	6878      	ldr	r0, [r7, #4]
 801d242:	f7fe fd65 	bl	801bd10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	2200      	movs	r2, #0
 801d24a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801d254:	b29b      	uxth	r3, r3
 801d256:	2b00      	cmp	r3, #0
 801d258:	f040 80a4 	bne.w	801d3a4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	681b      	ldr	r3, [r3, #0]
 801d260:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d264:	e853 3f00 	ldrex	r3, [r3]
 801d268:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801d26a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d26c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	461a      	mov	r2, r3
 801d27a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d27e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801d282:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d284:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801d286:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801d28a:	e841 2300 	strex	r3, r2, [r1]
 801d28e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801d290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d292:	2b00      	cmp	r3, #0
 801d294:	d1e2      	bne.n	801d25c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	681b      	ldr	r3, [r3, #0]
 801d29a:	3308      	adds	r3, #8
 801d29c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d29e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d2a0:	e853 3f00 	ldrex	r3, [r3]
 801d2a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801d2a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d2a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d2ac:	f023 0301 	bic.w	r3, r3, #1
 801d2b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	681b      	ldr	r3, [r3, #0]
 801d2b8:	3308      	adds	r3, #8
 801d2ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801d2be:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d2c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d2c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801d2c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d2c6:	e841 2300 	strex	r3, r2, [r1]
 801d2ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801d2cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	d1e1      	bne.n	801d296 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	2220      	movs	r2, #32
 801d2d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801d2da:	687b      	ldr	r3, [r7, #4]
 801d2dc:	2200      	movs	r2, #0
 801d2de:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	2200      	movs	r2, #0
 801d2e4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d2e6:	687b      	ldr	r3, [r7, #4]
 801d2e8:	681b      	ldr	r3, [r3, #0]
 801d2ea:	4a5f      	ldr	r2, [pc, #380]	; (801d468 <UART_RxISR_16BIT_FIFOEN+0x360>)
 801d2ec:	4293      	cmp	r3, r2
 801d2ee:	d021      	beq.n	801d334 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	681b      	ldr	r3, [r3, #0]
 801d2f4:	685b      	ldr	r3, [r3, #4]
 801d2f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	d01a      	beq.n	801d334 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	681b      	ldr	r3, [r3, #0]
 801d302:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d306:	e853 3f00 	ldrex	r3, [r3]
 801d30a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801d30c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d30e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801d312:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	681b      	ldr	r3, [r3, #0]
 801d31a:	461a      	mov	r2, r3
 801d31c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d320:	65bb      	str	r3, [r7, #88]	; 0x58
 801d322:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d324:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801d326:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d328:	e841 2300 	strex	r3, r2, [r1]
 801d32c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801d32e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d330:	2b00      	cmp	r3, #0
 801d332:	d1e4      	bne.n	801d2fe <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d338:	2b01      	cmp	r3, #1
 801d33a:	d130      	bne.n	801d39e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	2200      	movs	r2, #0
 801d340:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	681b      	ldr	r3, [r3, #0]
 801d346:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d34a:	e853 3f00 	ldrex	r3, [r3]
 801d34e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801d350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d352:	f023 0310 	bic.w	r3, r3, #16
 801d356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	461a      	mov	r2, r3
 801d360:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d364:	647b      	str	r3, [r7, #68]	; 0x44
 801d366:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d368:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801d36a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d36c:	e841 2300 	strex	r3, r2, [r1]
 801d370:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801d372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d374:	2b00      	cmp	r3, #0
 801d376:	d1e4      	bne.n	801d342 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	681b      	ldr	r3, [r3, #0]
 801d37c:	69db      	ldr	r3, [r3, #28]
 801d37e:	f003 0310 	and.w	r3, r3, #16
 801d382:	2b10      	cmp	r3, #16
 801d384:	d103      	bne.n	801d38e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	681b      	ldr	r3, [r3, #0]
 801d38a:	2210      	movs	r2, #16
 801d38c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801d394:	4619      	mov	r1, r3
 801d396:	6878      	ldr	r0, [r7, #4]
 801d398:	f7fe fcc4 	bl	801bd24 <HAL_UARTEx_RxEventCallback>
 801d39c:	e002      	b.n	801d3a4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801d39e:	6878      	ldr	r0, [r7, #4]
 801d3a0:	f7e6 fec0 	bl	8004124 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801d3a4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	d006      	beq.n	801d3ba <UART_RxISR_16BIT_FIFOEN+0x2b2>
 801d3ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d3b0:	f003 0320 	and.w	r3, r3, #32
 801d3b4:	2b00      	cmp	r3, #0
 801d3b6:	f47f aecb 	bne.w	801d150 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801d3ba:	687b      	ldr	r3, [r7, #4]
 801d3bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801d3c0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801d3c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801d3c8:	2b00      	cmp	r3, #0
 801d3ca:	d049      	beq.n	801d460 <UART_RxISR_16BIT_FIFOEN+0x358>
 801d3cc:	687b      	ldr	r3, [r7, #4]
 801d3ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d3d2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801d3d6:	429a      	cmp	r2, r3
 801d3d8:	d242      	bcs.n	801d460 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	681b      	ldr	r3, [r3, #0]
 801d3de:	3308      	adds	r3, #8
 801d3e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3e4:	e853 3f00 	ldrex	r3, [r3]
 801d3e8:	623b      	str	r3, [r7, #32]
   return(result);
 801d3ea:	6a3b      	ldr	r3, [r7, #32]
 801d3ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d3f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	681b      	ldr	r3, [r3, #0]
 801d3f8:	3308      	adds	r3, #8
 801d3fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d3fe:	633a      	str	r2, [r7, #48]	; 0x30
 801d400:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d406:	e841 2300 	strex	r3, r2, [r1]
 801d40a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801d40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d1e3      	bne.n	801d3da <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801d412:	687b      	ldr	r3, [r7, #4]
 801d414:	4a15      	ldr	r2, [pc, #84]	; (801d46c <UART_RxISR_16BIT_FIFOEN+0x364>)
 801d416:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	681b      	ldr	r3, [r3, #0]
 801d41c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d41e:	693b      	ldr	r3, [r7, #16]
 801d420:	e853 3f00 	ldrex	r3, [r3]
 801d424:	60fb      	str	r3, [r7, #12]
   return(result);
 801d426:	68fb      	ldr	r3, [r7, #12]
 801d428:	f043 0320 	orr.w	r3, r3, #32
 801d42c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	681b      	ldr	r3, [r3, #0]
 801d434:	461a      	mov	r2, r3
 801d436:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801d43a:	61fb      	str	r3, [r7, #28]
 801d43c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d43e:	69b9      	ldr	r1, [r7, #24]
 801d440:	69fa      	ldr	r2, [r7, #28]
 801d442:	e841 2300 	strex	r3, r2, [r1]
 801d446:	617b      	str	r3, [r7, #20]
   return(result);
 801d448:	697b      	ldr	r3, [r7, #20]
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	d1e4      	bne.n	801d418 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801d44e:	e007      	b.n	801d460 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	681b      	ldr	r3, [r3, #0]
 801d454:	699a      	ldr	r2, [r3, #24]
 801d456:	687b      	ldr	r3, [r7, #4]
 801d458:	681b      	ldr	r3, [r3, #0]
 801d45a:	f042 0208 	orr.w	r2, r2, #8
 801d45e:	619a      	str	r2, [r3, #24]
}
 801d460:	bf00      	nop
 801d462:	37b8      	adds	r7, #184	; 0xb8
 801d464:	46bd      	mov	sp, r7
 801d466:	bd80      	pop	{r7, pc}
 801d468:	40008000 	.word	0x40008000
 801d46c:	0801cbf1 	.word	0x0801cbf1

0801d470 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801d470:	b480      	push	{r7}
 801d472:	b083      	sub	sp, #12
 801d474:	af00      	add	r7, sp, #0
 801d476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801d478:	bf00      	nop
 801d47a:	370c      	adds	r7, #12
 801d47c:	46bd      	mov	sp, r7
 801d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d482:	4770      	bx	lr

0801d484 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801d484:	b480      	push	{r7}
 801d486:	b083      	sub	sp, #12
 801d488:	af00      	add	r7, sp, #0
 801d48a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801d48c:	bf00      	nop
 801d48e:	370c      	adds	r7, #12
 801d490:	46bd      	mov	sp, r7
 801d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d496:	4770      	bx	lr

0801d498 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801d498:	b480      	push	{r7}
 801d49a:	b083      	sub	sp, #12
 801d49c:	af00      	add	r7, sp, #0
 801d49e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801d4a0:	bf00      	nop
 801d4a2:	370c      	adds	r7, #12
 801d4a4:	46bd      	mov	sp, r7
 801d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4aa:	4770      	bx	lr

0801d4ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801d4ac:	b480      	push	{r7}
 801d4ae:	b085      	sub	sp, #20
 801d4b0:	af00      	add	r7, sp, #0
 801d4b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801d4ba:	2b01      	cmp	r3, #1
 801d4bc:	d101      	bne.n	801d4c2 <HAL_UARTEx_DisableFifoMode+0x16>
 801d4be:	2302      	movs	r3, #2
 801d4c0:	e027      	b.n	801d512 <HAL_UARTEx_DisableFifoMode+0x66>
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	2201      	movs	r2, #1
 801d4c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801d4ca:	687b      	ldr	r3, [r7, #4]
 801d4cc:	2224      	movs	r2, #36	; 0x24
 801d4ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801d4d2:	687b      	ldr	r3, [r7, #4]
 801d4d4:	681b      	ldr	r3, [r3, #0]
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801d4da:	687b      	ldr	r3, [r7, #4]
 801d4dc:	681b      	ldr	r3, [r3, #0]
 801d4de:	681a      	ldr	r2, [r3, #0]
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	681b      	ldr	r3, [r3, #0]
 801d4e4:	f022 0201 	bic.w	r2, r2, #1
 801d4e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801d4ea:	68fb      	ldr	r3, [r7, #12]
 801d4ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801d4f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801d4f2:	687b      	ldr	r3, [r7, #4]
 801d4f4:	2200      	movs	r2, #0
 801d4f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	681b      	ldr	r3, [r3, #0]
 801d4fc:	68fa      	ldr	r2, [r7, #12]
 801d4fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	2220      	movs	r2, #32
 801d504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	2200      	movs	r2, #0
 801d50c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801d510:	2300      	movs	r3, #0
}
 801d512:	4618      	mov	r0, r3
 801d514:	3714      	adds	r7, #20
 801d516:	46bd      	mov	sp, r7
 801d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d51c:	4770      	bx	lr

0801d51e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801d51e:	b580      	push	{r7, lr}
 801d520:	b084      	sub	sp, #16
 801d522:	af00      	add	r7, sp, #0
 801d524:	6078      	str	r0, [r7, #4]
 801d526:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801d52e:	2b01      	cmp	r3, #1
 801d530:	d101      	bne.n	801d536 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801d532:	2302      	movs	r3, #2
 801d534:	e02d      	b.n	801d592 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801d536:	687b      	ldr	r3, [r7, #4]
 801d538:	2201      	movs	r2, #1
 801d53a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	2224      	movs	r2, #36	; 0x24
 801d542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	681b      	ldr	r3, [r3, #0]
 801d54a:	681b      	ldr	r3, [r3, #0]
 801d54c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	681b      	ldr	r3, [r3, #0]
 801d552:	681a      	ldr	r2, [r3, #0]
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	681b      	ldr	r3, [r3, #0]
 801d558:	f022 0201 	bic.w	r2, r2, #1
 801d55c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801d55e:	687b      	ldr	r3, [r7, #4]
 801d560:	681b      	ldr	r3, [r3, #0]
 801d562:	689b      	ldr	r3, [r3, #8]
 801d564:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801d568:	687b      	ldr	r3, [r7, #4]
 801d56a:	681b      	ldr	r3, [r3, #0]
 801d56c:	683a      	ldr	r2, [r7, #0]
 801d56e:	430a      	orrs	r2, r1
 801d570:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801d572:	6878      	ldr	r0, [r7, #4]
 801d574:	f000 f850 	bl	801d618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801d578:	687b      	ldr	r3, [r7, #4]
 801d57a:	681b      	ldr	r3, [r3, #0]
 801d57c:	68fa      	ldr	r2, [r7, #12]
 801d57e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801d580:	687b      	ldr	r3, [r7, #4]
 801d582:	2220      	movs	r2, #32
 801d584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801d588:	687b      	ldr	r3, [r7, #4]
 801d58a:	2200      	movs	r2, #0
 801d58c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801d590:	2300      	movs	r3, #0
}
 801d592:	4618      	mov	r0, r3
 801d594:	3710      	adds	r7, #16
 801d596:	46bd      	mov	sp, r7
 801d598:	bd80      	pop	{r7, pc}

0801d59a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801d59a:	b580      	push	{r7, lr}
 801d59c:	b084      	sub	sp, #16
 801d59e:	af00      	add	r7, sp, #0
 801d5a0:	6078      	str	r0, [r7, #4]
 801d5a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801d5a4:	687b      	ldr	r3, [r7, #4]
 801d5a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801d5aa:	2b01      	cmp	r3, #1
 801d5ac:	d101      	bne.n	801d5b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801d5ae:	2302      	movs	r3, #2
 801d5b0:	e02d      	b.n	801d60e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	2201      	movs	r2, #1
 801d5b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	2224      	movs	r2, #36	; 0x24
 801d5be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	681b      	ldr	r3, [r3, #0]
 801d5c6:	681b      	ldr	r3, [r3, #0]
 801d5c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	681b      	ldr	r3, [r3, #0]
 801d5ce:	681a      	ldr	r2, [r3, #0]
 801d5d0:	687b      	ldr	r3, [r7, #4]
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	f022 0201 	bic.w	r2, r2, #1
 801d5d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	681b      	ldr	r3, [r3, #0]
 801d5de:	689b      	ldr	r3, [r3, #8]
 801d5e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801d5e4:	687b      	ldr	r3, [r7, #4]
 801d5e6:	681b      	ldr	r3, [r3, #0]
 801d5e8:	683a      	ldr	r2, [r7, #0]
 801d5ea:	430a      	orrs	r2, r1
 801d5ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801d5ee:	6878      	ldr	r0, [r7, #4]
 801d5f0:	f000 f812 	bl	801d618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801d5f4:	687b      	ldr	r3, [r7, #4]
 801d5f6:	681b      	ldr	r3, [r3, #0]
 801d5f8:	68fa      	ldr	r2, [r7, #12]
 801d5fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	2220      	movs	r2, #32
 801d600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801d604:	687b      	ldr	r3, [r7, #4]
 801d606:	2200      	movs	r2, #0
 801d608:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801d60c:	2300      	movs	r3, #0
}
 801d60e:	4618      	mov	r0, r3
 801d610:	3710      	adds	r7, #16
 801d612:	46bd      	mov	sp, r7
 801d614:	bd80      	pop	{r7, pc}
	...

0801d618 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801d618:	b480      	push	{r7}
 801d61a:	b085      	sub	sp, #20
 801d61c:	af00      	add	r7, sp, #0
 801d61e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d624:	2b00      	cmp	r3, #0
 801d626:	d108      	bne.n	801d63a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801d628:	687b      	ldr	r3, [r7, #4]
 801d62a:	2201      	movs	r2, #1
 801d62c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	2201      	movs	r2, #1
 801d634:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801d638:	e031      	b.n	801d69e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801d63a:	2308      	movs	r3, #8
 801d63c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801d63e:	2308      	movs	r3, #8
 801d640:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	681b      	ldr	r3, [r3, #0]
 801d646:	689b      	ldr	r3, [r3, #8]
 801d648:	0e5b      	lsrs	r3, r3, #25
 801d64a:	b2db      	uxtb	r3, r3
 801d64c:	f003 0307 	and.w	r3, r3, #7
 801d650:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	689b      	ldr	r3, [r3, #8]
 801d658:	0f5b      	lsrs	r3, r3, #29
 801d65a:	b2db      	uxtb	r3, r3
 801d65c:	f003 0307 	and.w	r3, r3, #7
 801d660:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801d662:	7bbb      	ldrb	r3, [r7, #14]
 801d664:	7b3a      	ldrb	r2, [r7, #12]
 801d666:	4911      	ldr	r1, [pc, #68]	; (801d6ac <UARTEx_SetNbDataToProcess+0x94>)
 801d668:	5c8a      	ldrb	r2, [r1, r2]
 801d66a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801d66e:	7b3a      	ldrb	r2, [r7, #12]
 801d670:	490f      	ldr	r1, [pc, #60]	; (801d6b0 <UARTEx_SetNbDataToProcess+0x98>)
 801d672:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801d674:	fb93 f3f2 	sdiv	r3, r3, r2
 801d678:	b29a      	uxth	r2, r3
 801d67a:	687b      	ldr	r3, [r7, #4]
 801d67c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801d680:	7bfb      	ldrb	r3, [r7, #15]
 801d682:	7b7a      	ldrb	r2, [r7, #13]
 801d684:	4909      	ldr	r1, [pc, #36]	; (801d6ac <UARTEx_SetNbDataToProcess+0x94>)
 801d686:	5c8a      	ldrb	r2, [r1, r2]
 801d688:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801d68c:	7b7a      	ldrb	r2, [r7, #13]
 801d68e:	4908      	ldr	r1, [pc, #32]	; (801d6b0 <UARTEx_SetNbDataToProcess+0x98>)
 801d690:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801d692:	fb93 f3f2 	sdiv	r3, r3, r2
 801d696:	b29a      	uxth	r2, r3
 801d698:	687b      	ldr	r3, [r7, #4]
 801d69a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801d69e:	bf00      	nop
 801d6a0:	3714      	adds	r7, #20
 801d6a2:	46bd      	mov	sp, r7
 801d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6a8:	4770      	bx	lr
 801d6aa:	bf00      	nop
 801d6ac:	080240b0 	.word	0x080240b0
 801d6b0:	080240b8 	.word	0x080240b8

0801d6b4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 801d6b4:	b480      	push	{r7}
 801d6b6:	b08b      	sub	sp, #44	; 0x2c
 801d6b8:	af00      	add	r7, sp, #0
 801d6ba:	60f8      	str	r0, [r7, #12]
 801d6bc:	60b9      	str	r1, [r7, #8]
 801d6be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801d6c0:	68fb      	ldr	r3, [r7, #12]
 801d6c2:	681a      	ldr	r2, [r3, #0]
 801d6c4:	68bb      	ldr	r3, [r7, #8]
 801d6c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d6c8:	697b      	ldr	r3, [r7, #20]
 801d6ca:	fa93 f3a3 	rbit	r3, r3
 801d6ce:	613b      	str	r3, [r7, #16]
  return result;
 801d6d0:	693b      	ldr	r3, [r7, #16]
 801d6d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801d6d4:	69bb      	ldr	r3, [r7, #24]
 801d6d6:	2b00      	cmp	r3, #0
 801d6d8:	d101      	bne.n	801d6de <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 801d6da:	2320      	movs	r3, #32
 801d6dc:	e003      	b.n	801d6e6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801d6de:	69bb      	ldr	r3, [r7, #24]
 801d6e0:	fab3 f383 	clz	r3, r3
 801d6e4:	b2db      	uxtb	r3, r3
 801d6e6:	005b      	lsls	r3, r3, #1
 801d6e8:	2103      	movs	r1, #3
 801d6ea:	fa01 f303 	lsl.w	r3, r1, r3
 801d6ee:	43db      	mvns	r3, r3
 801d6f0:	401a      	ands	r2, r3
 801d6f2:	68bb      	ldr	r3, [r7, #8]
 801d6f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d6f6:	6a3b      	ldr	r3, [r7, #32]
 801d6f8:	fa93 f3a3 	rbit	r3, r3
 801d6fc:	61fb      	str	r3, [r7, #28]
  return result;
 801d6fe:	69fb      	ldr	r3, [r7, #28]
 801d700:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801d702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d704:	2b00      	cmp	r3, #0
 801d706:	d101      	bne.n	801d70c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 801d708:	2320      	movs	r3, #32
 801d70a:	e003      	b.n	801d714 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 801d70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d70e:	fab3 f383 	clz	r3, r3
 801d712:	b2db      	uxtb	r3, r3
 801d714:	005b      	lsls	r3, r3, #1
 801d716:	6879      	ldr	r1, [r7, #4]
 801d718:	fa01 f303 	lsl.w	r3, r1, r3
 801d71c:	431a      	orrs	r2, r3
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	601a      	str	r2, [r3, #0]
}
 801d722:	bf00      	nop
 801d724:	372c      	adds	r7, #44	; 0x2c
 801d726:	46bd      	mov	sp, r7
 801d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d72c:	4770      	bx	lr

0801d72e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 801d72e:	b480      	push	{r7}
 801d730:	b085      	sub	sp, #20
 801d732:	af00      	add	r7, sp, #0
 801d734:	60f8      	str	r0, [r7, #12]
 801d736:	60b9      	str	r1, [r7, #8]
 801d738:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801d73a:	68fb      	ldr	r3, [r7, #12]
 801d73c:	685a      	ldr	r2, [r3, #4]
 801d73e:	68bb      	ldr	r3, [r7, #8]
 801d740:	43db      	mvns	r3, r3
 801d742:	401a      	ands	r2, r3
 801d744:	68bb      	ldr	r3, [r7, #8]
 801d746:	6879      	ldr	r1, [r7, #4]
 801d748:	fb01 f303 	mul.w	r3, r1, r3
 801d74c:	431a      	orrs	r2, r3
 801d74e:	68fb      	ldr	r3, [r7, #12]
 801d750:	605a      	str	r2, [r3, #4]
}
 801d752:	bf00      	nop
 801d754:	3714      	adds	r7, #20
 801d756:	46bd      	mov	sp, r7
 801d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d75c:	4770      	bx	lr

0801d75e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 801d75e:	b480      	push	{r7}
 801d760:	b08b      	sub	sp, #44	; 0x2c
 801d762:	af00      	add	r7, sp, #0
 801d764:	60f8      	str	r0, [r7, #12]
 801d766:	60b9      	str	r1, [r7, #8]
 801d768:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 801d76a:	68fb      	ldr	r3, [r7, #12]
 801d76c:	689a      	ldr	r2, [r3, #8]
 801d76e:	68bb      	ldr	r3, [r7, #8]
 801d770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d772:	697b      	ldr	r3, [r7, #20]
 801d774:	fa93 f3a3 	rbit	r3, r3
 801d778:	613b      	str	r3, [r7, #16]
  return result;
 801d77a:	693b      	ldr	r3, [r7, #16]
 801d77c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801d77e:	69bb      	ldr	r3, [r7, #24]
 801d780:	2b00      	cmp	r3, #0
 801d782:	d101      	bne.n	801d788 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 801d784:	2320      	movs	r3, #32
 801d786:	e003      	b.n	801d790 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 801d788:	69bb      	ldr	r3, [r7, #24]
 801d78a:	fab3 f383 	clz	r3, r3
 801d78e:	b2db      	uxtb	r3, r3
 801d790:	005b      	lsls	r3, r3, #1
 801d792:	2103      	movs	r1, #3
 801d794:	fa01 f303 	lsl.w	r3, r1, r3
 801d798:	43db      	mvns	r3, r3
 801d79a:	401a      	ands	r2, r3
 801d79c:	68bb      	ldr	r3, [r7, #8]
 801d79e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d7a0:	6a3b      	ldr	r3, [r7, #32]
 801d7a2:	fa93 f3a3 	rbit	r3, r3
 801d7a6:	61fb      	str	r3, [r7, #28]
  return result;
 801d7a8:	69fb      	ldr	r3, [r7, #28]
 801d7aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801d7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	d101      	bne.n	801d7b6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 801d7b2:	2320      	movs	r3, #32
 801d7b4:	e003      	b.n	801d7be <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 801d7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7b8:	fab3 f383 	clz	r3, r3
 801d7bc:	b2db      	uxtb	r3, r3
 801d7be:	005b      	lsls	r3, r3, #1
 801d7c0:	6879      	ldr	r1, [r7, #4]
 801d7c2:	fa01 f303 	lsl.w	r3, r1, r3
 801d7c6:	431a      	orrs	r2, r3
 801d7c8:	68fb      	ldr	r3, [r7, #12]
 801d7ca:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 801d7cc:	bf00      	nop
 801d7ce:	372c      	adds	r7, #44	; 0x2c
 801d7d0:	46bd      	mov	sp, r7
 801d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7d6:	4770      	bx	lr

0801d7d8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 801d7d8:	b480      	push	{r7}
 801d7da:	b08b      	sub	sp, #44	; 0x2c
 801d7dc:	af00      	add	r7, sp, #0
 801d7de:	60f8      	str	r0, [r7, #12]
 801d7e0:	60b9      	str	r1, [r7, #8]
 801d7e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801d7e4:	68fb      	ldr	r3, [r7, #12]
 801d7e6:	68da      	ldr	r2, [r3, #12]
 801d7e8:	68bb      	ldr	r3, [r7, #8]
 801d7ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d7ec:	697b      	ldr	r3, [r7, #20]
 801d7ee:	fa93 f3a3 	rbit	r3, r3
 801d7f2:	613b      	str	r3, [r7, #16]
  return result;
 801d7f4:	693b      	ldr	r3, [r7, #16]
 801d7f6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801d7f8:	69bb      	ldr	r3, [r7, #24]
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	d101      	bne.n	801d802 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 801d7fe:	2320      	movs	r3, #32
 801d800:	e003      	b.n	801d80a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801d802:	69bb      	ldr	r3, [r7, #24]
 801d804:	fab3 f383 	clz	r3, r3
 801d808:	b2db      	uxtb	r3, r3
 801d80a:	005b      	lsls	r3, r3, #1
 801d80c:	2103      	movs	r1, #3
 801d80e:	fa01 f303 	lsl.w	r3, r1, r3
 801d812:	43db      	mvns	r3, r3
 801d814:	401a      	ands	r2, r3
 801d816:	68bb      	ldr	r3, [r7, #8]
 801d818:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d81a:	6a3b      	ldr	r3, [r7, #32]
 801d81c:	fa93 f3a3 	rbit	r3, r3
 801d820:	61fb      	str	r3, [r7, #28]
  return result;
 801d822:	69fb      	ldr	r3, [r7, #28]
 801d824:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801d826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d828:	2b00      	cmp	r3, #0
 801d82a:	d101      	bne.n	801d830 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 801d82c:	2320      	movs	r3, #32
 801d82e:	e003      	b.n	801d838 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801d830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d832:	fab3 f383 	clz	r3, r3
 801d836:	b2db      	uxtb	r3, r3
 801d838:	005b      	lsls	r3, r3, #1
 801d83a:	6879      	ldr	r1, [r7, #4]
 801d83c:	fa01 f303 	lsl.w	r3, r1, r3
 801d840:	431a      	orrs	r2, r3
 801d842:	68fb      	ldr	r3, [r7, #12]
 801d844:	60da      	str	r2, [r3, #12]
}
 801d846:	bf00      	nop
 801d848:	372c      	adds	r7, #44	; 0x2c
 801d84a:	46bd      	mov	sp, r7
 801d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d850:	4770      	bx	lr

0801d852 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801d852:	b480      	push	{r7}
 801d854:	b08b      	sub	sp, #44	; 0x2c
 801d856:	af00      	add	r7, sp, #0
 801d858:	60f8      	str	r0, [r7, #12]
 801d85a:	60b9      	str	r1, [r7, #8]
 801d85c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801d85e:	68fb      	ldr	r3, [r7, #12]
 801d860:	6a1a      	ldr	r2, [r3, #32]
 801d862:	68bb      	ldr	r3, [r7, #8]
 801d864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d866:	697b      	ldr	r3, [r7, #20]
 801d868:	fa93 f3a3 	rbit	r3, r3
 801d86c:	613b      	str	r3, [r7, #16]
  return result;
 801d86e:	693b      	ldr	r3, [r7, #16]
 801d870:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801d872:	69bb      	ldr	r3, [r7, #24]
 801d874:	2b00      	cmp	r3, #0
 801d876:	d101      	bne.n	801d87c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 801d878:	2320      	movs	r3, #32
 801d87a:	e003      	b.n	801d884 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 801d87c:	69bb      	ldr	r3, [r7, #24]
 801d87e:	fab3 f383 	clz	r3, r3
 801d882:	b2db      	uxtb	r3, r3
 801d884:	009b      	lsls	r3, r3, #2
 801d886:	210f      	movs	r1, #15
 801d888:	fa01 f303 	lsl.w	r3, r1, r3
 801d88c:	43db      	mvns	r3, r3
 801d88e:	401a      	ands	r2, r3
 801d890:	68bb      	ldr	r3, [r7, #8]
 801d892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d894:	6a3b      	ldr	r3, [r7, #32]
 801d896:	fa93 f3a3 	rbit	r3, r3
 801d89a:	61fb      	str	r3, [r7, #28]
  return result;
 801d89c:	69fb      	ldr	r3, [r7, #28]
 801d89e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801d8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d101      	bne.n	801d8aa <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 801d8a6:	2320      	movs	r3, #32
 801d8a8:	e003      	b.n	801d8b2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 801d8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8ac:	fab3 f383 	clz	r3, r3
 801d8b0:	b2db      	uxtb	r3, r3
 801d8b2:	009b      	lsls	r3, r3, #2
 801d8b4:	6879      	ldr	r1, [r7, #4]
 801d8b6:	fa01 f303 	lsl.w	r3, r1, r3
 801d8ba:	431a      	orrs	r2, r3
 801d8bc:	68fb      	ldr	r3, [r7, #12]
 801d8be:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 801d8c0:	bf00      	nop
 801d8c2:	372c      	adds	r7, #44	; 0x2c
 801d8c4:	46bd      	mov	sp, r7
 801d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8ca:	4770      	bx	lr

0801d8cc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801d8cc:	b480      	push	{r7}
 801d8ce:	b08b      	sub	sp, #44	; 0x2c
 801d8d0:	af00      	add	r7, sp, #0
 801d8d2:	60f8      	str	r0, [r7, #12]
 801d8d4:	60b9      	str	r1, [r7, #8]
 801d8d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 801d8d8:	68fb      	ldr	r3, [r7, #12]
 801d8da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d8dc:	68bb      	ldr	r3, [r7, #8]
 801d8de:	0a1b      	lsrs	r3, r3, #8
 801d8e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d8e2:	697b      	ldr	r3, [r7, #20]
 801d8e4:	fa93 f3a3 	rbit	r3, r3
 801d8e8:	613b      	str	r3, [r7, #16]
  return result;
 801d8ea:	693b      	ldr	r3, [r7, #16]
 801d8ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801d8ee:	69bb      	ldr	r3, [r7, #24]
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	d101      	bne.n	801d8f8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 801d8f4:	2320      	movs	r3, #32
 801d8f6:	e003      	b.n	801d900 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 801d8f8:	69bb      	ldr	r3, [r7, #24]
 801d8fa:	fab3 f383 	clz	r3, r3
 801d8fe:	b2db      	uxtb	r3, r3
 801d900:	009b      	lsls	r3, r3, #2
 801d902:	210f      	movs	r1, #15
 801d904:	fa01 f303 	lsl.w	r3, r1, r3
 801d908:	43db      	mvns	r3, r3
 801d90a:	401a      	ands	r2, r3
 801d90c:	68bb      	ldr	r3, [r7, #8]
 801d90e:	0a1b      	lsrs	r3, r3, #8
 801d910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d912:	6a3b      	ldr	r3, [r7, #32]
 801d914:	fa93 f3a3 	rbit	r3, r3
 801d918:	61fb      	str	r3, [r7, #28]
  return result;
 801d91a:	69fb      	ldr	r3, [r7, #28]
 801d91c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801d91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d920:	2b00      	cmp	r3, #0
 801d922:	d101      	bne.n	801d928 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 801d924:	2320      	movs	r3, #32
 801d926:	e003      	b.n	801d930 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 801d928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d92a:	fab3 f383 	clz	r3, r3
 801d92e:	b2db      	uxtb	r3, r3
 801d930:	009b      	lsls	r3, r3, #2
 801d932:	6879      	ldr	r1, [r7, #4]
 801d934:	fa01 f303 	lsl.w	r3, r1, r3
 801d938:	431a      	orrs	r2, r3
 801d93a:	68fb      	ldr	r3, [r7, #12]
 801d93c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 801d93e:	bf00      	nop
 801d940:	372c      	adds	r7, #44	; 0x2c
 801d942:	46bd      	mov	sp, r7
 801d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d948:	4770      	bx	lr

0801d94a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801d94a:	b580      	push	{r7, lr}
 801d94c:	b088      	sub	sp, #32
 801d94e:	af00      	add	r7, sp, #0
 801d950:	6078      	str	r0, [r7, #4]
 801d952:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 801d954:	683b      	ldr	r3, [r7, #0]
 801d956:	681b      	ldr	r3, [r3, #0]
 801d958:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d95a:	693b      	ldr	r3, [r7, #16]
 801d95c:	fa93 f3a3 	rbit	r3, r3
 801d960:	60fb      	str	r3, [r7, #12]
  return result;
 801d962:	68fb      	ldr	r3, [r7, #12]
 801d964:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 801d966:	697b      	ldr	r3, [r7, #20]
 801d968:	2b00      	cmp	r3, #0
 801d96a:	d101      	bne.n	801d970 <LL_GPIO_Init+0x26>
    return 32U;
 801d96c:	2320      	movs	r3, #32
 801d96e:	e003      	b.n	801d978 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 801d970:	697b      	ldr	r3, [r7, #20]
 801d972:	fab3 f383 	clz	r3, r3
 801d976:	b2db      	uxtb	r3, r3
 801d978:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801d97a:	e047      	b.n	801da0c <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 801d97c:	683b      	ldr	r3, [r7, #0]
 801d97e:	681a      	ldr	r2, [r3, #0]
 801d980:	2101      	movs	r1, #1
 801d982:	69fb      	ldr	r3, [r7, #28]
 801d984:	fa01 f303 	lsl.w	r3, r1, r3
 801d988:	4013      	ands	r3, r2
 801d98a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 801d98c:	69bb      	ldr	r3, [r7, #24]
 801d98e:	2b00      	cmp	r3, #0
 801d990:	d039      	beq.n	801da06 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801d992:	683b      	ldr	r3, [r7, #0]
 801d994:	685b      	ldr	r3, [r3, #4]
 801d996:	2b01      	cmp	r3, #1
 801d998:	d003      	beq.n	801d9a2 <LL_GPIO_Init+0x58>
 801d99a:	683b      	ldr	r3, [r7, #0]
 801d99c:	685b      	ldr	r3, [r3, #4]
 801d99e:	2b02      	cmp	r3, #2
 801d9a0:	d10d      	bne.n	801d9be <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 801d9a2:	683b      	ldr	r3, [r7, #0]
 801d9a4:	689b      	ldr	r3, [r3, #8]
 801d9a6:	461a      	mov	r2, r3
 801d9a8:	69b9      	ldr	r1, [r7, #24]
 801d9aa:	6878      	ldr	r0, [r7, #4]
 801d9ac:	f7ff fed7 	bl	801d75e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 801d9b0:	683b      	ldr	r3, [r7, #0]
 801d9b2:	68db      	ldr	r3, [r3, #12]
 801d9b4:	461a      	mov	r2, r3
 801d9b6:	69b9      	ldr	r1, [r7, #24]
 801d9b8:	6878      	ldr	r0, [r7, #4]
 801d9ba:	f7ff feb8 	bl	801d72e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 801d9be:	683b      	ldr	r3, [r7, #0]
 801d9c0:	691b      	ldr	r3, [r3, #16]
 801d9c2:	461a      	mov	r2, r3
 801d9c4:	69b9      	ldr	r1, [r7, #24]
 801d9c6:	6878      	ldr	r0, [r7, #4]
 801d9c8:	f7ff ff06 	bl	801d7d8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 801d9cc:	683b      	ldr	r3, [r7, #0]
 801d9ce:	685b      	ldr	r3, [r3, #4]
 801d9d0:	2b02      	cmp	r3, #2
 801d9d2:	d111      	bne.n	801d9f8 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 801d9d4:	69bb      	ldr	r3, [r7, #24]
 801d9d6:	2bff      	cmp	r3, #255	; 0xff
 801d9d8:	d807      	bhi.n	801d9ea <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801d9da:	683b      	ldr	r3, [r7, #0]
 801d9dc:	695b      	ldr	r3, [r3, #20]
 801d9de:	461a      	mov	r2, r3
 801d9e0:	69b9      	ldr	r1, [r7, #24]
 801d9e2:	6878      	ldr	r0, [r7, #4]
 801d9e4:	f7ff ff35 	bl	801d852 <LL_GPIO_SetAFPin_0_7>
 801d9e8:	e006      	b.n	801d9f8 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801d9ea:	683b      	ldr	r3, [r7, #0]
 801d9ec:	695b      	ldr	r3, [r3, #20]
 801d9ee:	461a      	mov	r2, r3
 801d9f0:	69b9      	ldr	r1, [r7, #24]
 801d9f2:	6878      	ldr	r0, [r7, #4]
 801d9f4:	f7ff ff6a 	bl	801d8cc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 801d9f8:	683b      	ldr	r3, [r7, #0]
 801d9fa:	685b      	ldr	r3, [r3, #4]
 801d9fc:	461a      	mov	r2, r3
 801d9fe:	69b9      	ldr	r1, [r7, #24]
 801da00:	6878      	ldr	r0, [r7, #4]
 801da02:	f7ff fe57 	bl	801d6b4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 801da06:	69fb      	ldr	r3, [r7, #28]
 801da08:	3301      	adds	r3, #1
 801da0a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801da0c:	683b      	ldr	r3, [r7, #0]
 801da0e:	681a      	ldr	r2, [r3, #0]
 801da10:	69fb      	ldr	r3, [r7, #28]
 801da12:	fa22 f303 	lsr.w	r3, r2, r3
 801da16:	2b00      	cmp	r3, #0
 801da18:	d1b0      	bne.n	801d97c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 801da1a:	2300      	movs	r3, #0
}
 801da1c:	4618      	mov	r0, r3
 801da1e:	3720      	adds	r7, #32
 801da20:	46bd      	mov	sp, r7
 801da22:	bd80      	pop	{r7, pc}

0801da24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801da24:	b480      	push	{r7}
 801da26:	b085      	sub	sp, #20
 801da28:	af00      	add	r7, sp, #0
 801da2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801da2c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801da30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801da32:	687b      	ldr	r3, [r7, #4]
 801da34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801da38:	b29a      	uxth	r2, r3
 801da3a:	68fb      	ldr	r3, [r7, #12]
 801da3c:	b29b      	uxth	r3, r3
 801da3e:	43db      	mvns	r3, r3
 801da40:	b29b      	uxth	r3, r3
 801da42:	4013      	ands	r3, r2
 801da44:	b29a      	uxth	r2, r3
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801da4c:	2300      	movs	r3, #0
}
 801da4e:	4618      	mov	r0, r3
 801da50:	3714      	adds	r7, #20
 801da52:	46bd      	mov	sp, r7
 801da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da58:	4770      	bx	lr

0801da5a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801da5a:	b084      	sub	sp, #16
 801da5c:	b480      	push	{r7}
 801da5e:	b083      	sub	sp, #12
 801da60:	af00      	add	r7, sp, #0
 801da62:	6078      	str	r0, [r7, #4]
 801da64:	f107 0014 	add.w	r0, r7, #20
 801da68:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	2201      	movs	r2, #1
 801da70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	2200      	movs	r2, #0
 801da78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	2200      	movs	r2, #0
 801da80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	2200      	movs	r2, #0
 801da88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801da8c:	2300      	movs	r3, #0
}
 801da8e:	4618      	mov	r0, r3
 801da90:	370c      	adds	r7, #12
 801da92:	46bd      	mov	sp, r7
 801da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da98:	b004      	add	sp, #16
 801da9a:	4770      	bx	lr

0801da9c <__NVIC_SetPriority>:
{
 801da9c:	b480      	push	{r7}
 801da9e:	b083      	sub	sp, #12
 801daa0:	af00      	add	r7, sp, #0
 801daa2:	4603      	mov	r3, r0
 801daa4:	6039      	str	r1, [r7, #0]
 801daa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801daa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801daac:	2b00      	cmp	r3, #0
 801daae:	db0a      	blt.n	801dac6 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801dab0:	683b      	ldr	r3, [r7, #0]
 801dab2:	b2da      	uxtb	r2, r3
 801dab4:	490c      	ldr	r1, [pc, #48]	; (801dae8 <__NVIC_SetPriority+0x4c>)
 801dab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801daba:	0152      	lsls	r2, r2, #5
 801dabc:	b2d2      	uxtb	r2, r2
 801dabe:	440b      	add	r3, r1
 801dac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801dac4:	e00a      	b.n	801dadc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801dac6:	683b      	ldr	r3, [r7, #0]
 801dac8:	b2da      	uxtb	r2, r3
 801daca:	4908      	ldr	r1, [pc, #32]	; (801daec <__NVIC_SetPriority+0x50>)
 801dacc:	79fb      	ldrb	r3, [r7, #7]
 801dace:	f003 030f 	and.w	r3, r3, #15
 801dad2:	3b04      	subs	r3, #4
 801dad4:	0152      	lsls	r2, r2, #5
 801dad6:	b2d2      	uxtb	r2, r2
 801dad8:	440b      	add	r3, r1
 801dada:	761a      	strb	r2, [r3, #24]
}
 801dadc:	bf00      	nop
 801dade:	370c      	adds	r7, #12
 801dae0:	46bd      	mov	sp, r7
 801dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dae6:	4770      	bx	lr
 801dae8:	e000e100 	.word	0xe000e100
 801daec:	e000ed00 	.word	0xe000ed00

0801daf0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801daf0:	b580      	push	{r7, lr}
 801daf2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801daf4:	4b05      	ldr	r3, [pc, #20]	; (801db0c <SysTick_Handler+0x1c>)
 801daf6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801daf8:	f001 fcbc 	bl	801f474 <xTaskGetSchedulerState>
 801dafc:	4603      	mov	r3, r0
 801dafe:	2b01      	cmp	r3, #1
 801db00:	d001      	beq.n	801db06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801db02:	f002 f911 	bl	801fd28 <xPortSysTickHandler>
  }
}
 801db06:	bf00      	nop
 801db08:	bd80      	pop	{r7, pc}
 801db0a:	bf00      	nop
 801db0c:	e000e010 	.word	0xe000e010

0801db10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801db10:	b580      	push	{r7, lr}
 801db12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801db14:	2100      	movs	r1, #0
 801db16:	f06f 0004 	mvn.w	r0, #4
 801db1a:	f7ff ffbf 	bl	801da9c <__NVIC_SetPriority>
#endif
}
 801db1e:	bf00      	nop
 801db20:	bd80      	pop	{r7, pc}
	...

0801db24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801db24:	b480      	push	{r7}
 801db26:	b083      	sub	sp, #12
 801db28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801db2a:	f3ef 8305 	mrs	r3, IPSR
 801db2e:	603b      	str	r3, [r7, #0]
  return(result);
 801db30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801db32:	2b00      	cmp	r3, #0
 801db34:	d003      	beq.n	801db3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801db36:	f06f 0305 	mvn.w	r3, #5
 801db3a:	607b      	str	r3, [r7, #4]
 801db3c:	e00c      	b.n	801db58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801db3e:	4b0a      	ldr	r3, [pc, #40]	; (801db68 <osKernelInitialize+0x44>)
 801db40:	681b      	ldr	r3, [r3, #0]
 801db42:	2b00      	cmp	r3, #0
 801db44:	d105      	bne.n	801db52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801db46:	4b08      	ldr	r3, [pc, #32]	; (801db68 <osKernelInitialize+0x44>)
 801db48:	2201      	movs	r2, #1
 801db4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801db4c:	2300      	movs	r3, #0
 801db4e:	607b      	str	r3, [r7, #4]
 801db50:	e002      	b.n	801db58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801db52:	f04f 33ff 	mov.w	r3, #4294967295
 801db56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801db58:	687b      	ldr	r3, [r7, #4]
}
 801db5a:	4618      	mov	r0, r3
 801db5c:	370c      	adds	r7, #12
 801db5e:	46bd      	mov	sp, r7
 801db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db64:	4770      	bx	lr
 801db66:	bf00      	nop
 801db68:	20000fcc 	.word	0x20000fcc

0801db6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801db6c:	b580      	push	{r7, lr}
 801db6e:	b082      	sub	sp, #8
 801db70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801db72:	f3ef 8305 	mrs	r3, IPSR
 801db76:	603b      	str	r3, [r7, #0]
  return(result);
 801db78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801db7a:	2b00      	cmp	r3, #0
 801db7c:	d003      	beq.n	801db86 <osKernelStart+0x1a>
    stat = osErrorISR;
 801db7e:	f06f 0305 	mvn.w	r3, #5
 801db82:	607b      	str	r3, [r7, #4]
 801db84:	e010      	b.n	801dba8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801db86:	4b0b      	ldr	r3, [pc, #44]	; (801dbb4 <osKernelStart+0x48>)
 801db88:	681b      	ldr	r3, [r3, #0]
 801db8a:	2b01      	cmp	r3, #1
 801db8c:	d109      	bne.n	801dba2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801db8e:	f7ff ffbf 	bl	801db10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801db92:	4b08      	ldr	r3, [pc, #32]	; (801dbb4 <osKernelStart+0x48>)
 801db94:	2202      	movs	r2, #2
 801db96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801db98:	f001 f88e 	bl	801ecb8 <vTaskStartScheduler>
      stat = osOK;
 801db9c:	2300      	movs	r3, #0
 801db9e:	607b      	str	r3, [r7, #4]
 801dba0:	e002      	b.n	801dba8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801dba2:	f04f 33ff 	mov.w	r3, #4294967295
 801dba6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801dba8:	687b      	ldr	r3, [r7, #4]
}
 801dbaa:	4618      	mov	r0, r3
 801dbac:	3708      	adds	r7, #8
 801dbae:	46bd      	mov	sp, r7
 801dbb0:	bd80      	pop	{r7, pc}
 801dbb2:	bf00      	nop
 801dbb4:	20000fcc 	.word	0x20000fcc

0801dbb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801dbb8:	b580      	push	{r7, lr}
 801dbba:	b08e      	sub	sp, #56	; 0x38
 801dbbc:	af04      	add	r7, sp, #16
 801dbbe:	60f8      	str	r0, [r7, #12]
 801dbc0:	60b9      	str	r1, [r7, #8]
 801dbc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801dbc4:	2300      	movs	r3, #0
 801dbc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801dbc8:	f3ef 8305 	mrs	r3, IPSR
 801dbcc:	617b      	str	r3, [r7, #20]
  return(result);
 801dbce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	d17e      	bne.n	801dcd2 <osThreadNew+0x11a>
 801dbd4:	68fb      	ldr	r3, [r7, #12]
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	d07b      	beq.n	801dcd2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801dbda:	2380      	movs	r3, #128	; 0x80
 801dbdc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801dbde:	2318      	movs	r3, #24
 801dbe0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801dbe2:	2300      	movs	r3, #0
 801dbe4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801dbe6:	f04f 33ff 	mov.w	r3, #4294967295
 801dbea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d045      	beq.n	801dc7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	681b      	ldr	r3, [r3, #0]
 801dbf6:	2b00      	cmp	r3, #0
 801dbf8:	d002      	beq.n	801dc00 <osThreadNew+0x48>
        name = attr->name;
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	681b      	ldr	r3, [r3, #0]
 801dbfe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	699b      	ldr	r3, [r3, #24]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d002      	beq.n	801dc0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	699b      	ldr	r3, [r3, #24]
 801dc0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801dc0e:	69fb      	ldr	r3, [r7, #28]
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	d008      	beq.n	801dc26 <osThreadNew+0x6e>
 801dc14:	69fb      	ldr	r3, [r7, #28]
 801dc16:	2b38      	cmp	r3, #56	; 0x38
 801dc18:	d805      	bhi.n	801dc26 <osThreadNew+0x6e>
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	685b      	ldr	r3, [r3, #4]
 801dc1e:	f003 0301 	and.w	r3, r3, #1
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	d001      	beq.n	801dc2a <osThreadNew+0x72>
        return (NULL);
 801dc26:	2300      	movs	r3, #0
 801dc28:	e054      	b.n	801dcd4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	695b      	ldr	r3, [r3, #20]
 801dc2e:	2b00      	cmp	r3, #0
 801dc30:	d003      	beq.n	801dc3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801dc32:	687b      	ldr	r3, [r7, #4]
 801dc34:	695b      	ldr	r3, [r3, #20]
 801dc36:	089b      	lsrs	r3, r3, #2
 801dc38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801dc3a:	687b      	ldr	r3, [r7, #4]
 801dc3c:	689b      	ldr	r3, [r3, #8]
 801dc3e:	2b00      	cmp	r3, #0
 801dc40:	d00e      	beq.n	801dc60 <osThreadNew+0xa8>
 801dc42:	687b      	ldr	r3, [r7, #4]
 801dc44:	68db      	ldr	r3, [r3, #12]
 801dc46:	2b5b      	cmp	r3, #91	; 0x5b
 801dc48:	d90a      	bls.n	801dc60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801dc4e:	2b00      	cmp	r3, #0
 801dc50:	d006      	beq.n	801dc60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801dc52:	687b      	ldr	r3, [r7, #4]
 801dc54:	695b      	ldr	r3, [r3, #20]
 801dc56:	2b00      	cmp	r3, #0
 801dc58:	d002      	beq.n	801dc60 <osThreadNew+0xa8>
        mem = 1;
 801dc5a:	2301      	movs	r3, #1
 801dc5c:	61bb      	str	r3, [r7, #24]
 801dc5e:	e010      	b.n	801dc82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	689b      	ldr	r3, [r3, #8]
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	d10c      	bne.n	801dc82 <osThreadNew+0xca>
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	68db      	ldr	r3, [r3, #12]
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	d108      	bne.n	801dc82 <osThreadNew+0xca>
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	691b      	ldr	r3, [r3, #16]
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	d104      	bne.n	801dc82 <osThreadNew+0xca>
          mem = 0;
 801dc78:	2300      	movs	r3, #0
 801dc7a:	61bb      	str	r3, [r7, #24]
 801dc7c:	e001      	b.n	801dc82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801dc7e:	2300      	movs	r3, #0
 801dc80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801dc82:	69bb      	ldr	r3, [r7, #24]
 801dc84:	2b01      	cmp	r3, #1
 801dc86:	d110      	bne.n	801dcaa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801dc88:	687b      	ldr	r3, [r7, #4]
 801dc8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801dc8c:	687a      	ldr	r2, [r7, #4]
 801dc8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801dc90:	9202      	str	r2, [sp, #8]
 801dc92:	9301      	str	r3, [sp, #4]
 801dc94:	69fb      	ldr	r3, [r7, #28]
 801dc96:	9300      	str	r3, [sp, #0]
 801dc98:	68bb      	ldr	r3, [r7, #8]
 801dc9a:	6a3a      	ldr	r2, [r7, #32]
 801dc9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dc9e:	68f8      	ldr	r0, [r7, #12]
 801dca0:	f000 fd30 	bl	801e704 <xTaskCreateStatic>
 801dca4:	4603      	mov	r3, r0
 801dca6:	613b      	str	r3, [r7, #16]
 801dca8:	e013      	b.n	801dcd2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801dcaa:	69bb      	ldr	r3, [r7, #24]
 801dcac:	2b00      	cmp	r3, #0
 801dcae:	d110      	bne.n	801dcd2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801dcb0:	6a3b      	ldr	r3, [r7, #32]
 801dcb2:	b29a      	uxth	r2, r3
 801dcb4:	f107 0310 	add.w	r3, r7, #16
 801dcb8:	9301      	str	r3, [sp, #4]
 801dcba:	69fb      	ldr	r3, [r7, #28]
 801dcbc:	9300      	str	r3, [sp, #0]
 801dcbe:	68bb      	ldr	r3, [r7, #8]
 801dcc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dcc2:	68f8      	ldr	r0, [r7, #12]
 801dcc4:	f000 fd63 	bl	801e78e <xTaskCreate>
 801dcc8:	4603      	mov	r3, r0
 801dcca:	2b01      	cmp	r3, #1
 801dccc:	d001      	beq.n	801dcd2 <osThreadNew+0x11a>
            hTask = NULL;
 801dcce:	2300      	movs	r3, #0
 801dcd0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801dcd2:	693b      	ldr	r3, [r7, #16]
}
 801dcd4:	4618      	mov	r0, r3
 801dcd6:	3728      	adds	r7, #40	; 0x28
 801dcd8:	46bd      	mov	sp, r7
 801dcda:	bd80      	pop	{r7, pc}

0801dcdc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801dcdc:	b480      	push	{r7}
 801dcde:	b085      	sub	sp, #20
 801dce0:	af00      	add	r7, sp, #0
 801dce2:	60f8      	str	r0, [r7, #12]
 801dce4:	60b9      	str	r1, [r7, #8]
 801dce6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801dce8:	68fb      	ldr	r3, [r7, #12]
 801dcea:	4a07      	ldr	r2, [pc, #28]	; (801dd08 <vApplicationGetIdleTaskMemory+0x2c>)
 801dcec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801dcee:	68bb      	ldr	r3, [r7, #8]
 801dcf0:	4a06      	ldr	r2, [pc, #24]	; (801dd0c <vApplicationGetIdleTaskMemory+0x30>)
 801dcf2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	2280      	movs	r2, #128	; 0x80
 801dcf8:	601a      	str	r2, [r3, #0]
}
 801dcfa:	bf00      	nop
 801dcfc:	3714      	adds	r7, #20
 801dcfe:	46bd      	mov	sp, r7
 801dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd04:	4770      	bx	lr
 801dd06:	bf00      	nop
 801dd08:	20000fd0 	.word	0x20000fd0
 801dd0c:	2000102c 	.word	0x2000102c

0801dd10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801dd10:	b480      	push	{r7}
 801dd12:	b085      	sub	sp, #20
 801dd14:	af00      	add	r7, sp, #0
 801dd16:	60f8      	str	r0, [r7, #12]
 801dd18:	60b9      	str	r1, [r7, #8]
 801dd1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801dd1c:	68fb      	ldr	r3, [r7, #12]
 801dd1e:	4a07      	ldr	r2, [pc, #28]	; (801dd3c <vApplicationGetTimerTaskMemory+0x2c>)
 801dd20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801dd22:	68bb      	ldr	r3, [r7, #8]
 801dd24:	4a06      	ldr	r2, [pc, #24]	; (801dd40 <vApplicationGetTimerTaskMemory+0x30>)
 801dd26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801dd2e:	601a      	str	r2, [r3, #0]
}
 801dd30:	bf00      	nop
 801dd32:	3714      	adds	r7, #20
 801dd34:	46bd      	mov	sp, r7
 801dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd3a:	4770      	bx	lr
 801dd3c:	2000122c 	.word	0x2000122c
 801dd40:	20001288 	.word	0x20001288

0801dd44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801dd44:	b480      	push	{r7}
 801dd46:	b083      	sub	sp, #12
 801dd48:	af00      	add	r7, sp, #0
 801dd4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	f103 0208 	add.w	r2, r3, #8
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	f04f 32ff 	mov.w	r2, #4294967295
 801dd5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801dd5e:	687b      	ldr	r3, [r7, #4]
 801dd60:	f103 0208 	add.w	r2, r3, #8
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801dd68:	687b      	ldr	r3, [r7, #4]
 801dd6a:	f103 0208 	add.w	r2, r3, #8
 801dd6e:	687b      	ldr	r3, [r7, #4]
 801dd70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801dd72:	687b      	ldr	r3, [r7, #4]
 801dd74:	2200      	movs	r2, #0
 801dd76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801dd78:	bf00      	nop
 801dd7a:	370c      	adds	r7, #12
 801dd7c:	46bd      	mov	sp, r7
 801dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd82:	4770      	bx	lr

0801dd84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801dd84:	b480      	push	{r7}
 801dd86:	b083      	sub	sp, #12
 801dd88:	af00      	add	r7, sp, #0
 801dd8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	2200      	movs	r2, #0
 801dd90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801dd92:	bf00      	nop
 801dd94:	370c      	adds	r7, #12
 801dd96:	46bd      	mov	sp, r7
 801dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd9c:	4770      	bx	lr

0801dd9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801dd9e:	b480      	push	{r7}
 801dda0:	b085      	sub	sp, #20
 801dda2:	af00      	add	r7, sp, #0
 801dda4:	6078      	str	r0, [r7, #4]
 801dda6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	685b      	ldr	r3, [r3, #4]
 801ddac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801ddae:	683b      	ldr	r3, [r7, #0]
 801ddb0:	68fa      	ldr	r2, [r7, #12]
 801ddb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801ddb4:	68fb      	ldr	r3, [r7, #12]
 801ddb6:	689a      	ldr	r2, [r3, #8]
 801ddb8:	683b      	ldr	r3, [r7, #0]
 801ddba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801ddbc:	68fb      	ldr	r3, [r7, #12]
 801ddbe:	689b      	ldr	r3, [r3, #8]
 801ddc0:	683a      	ldr	r2, [r7, #0]
 801ddc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801ddc4:	68fb      	ldr	r3, [r7, #12]
 801ddc6:	683a      	ldr	r2, [r7, #0]
 801ddc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801ddca:	683b      	ldr	r3, [r7, #0]
 801ddcc:	687a      	ldr	r2, [r7, #4]
 801ddce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801ddd0:	687b      	ldr	r3, [r7, #4]
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	1c5a      	adds	r2, r3, #1
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	601a      	str	r2, [r3, #0]
}
 801ddda:	bf00      	nop
 801dddc:	3714      	adds	r7, #20
 801ddde:	46bd      	mov	sp, r7
 801dde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dde4:	4770      	bx	lr

0801dde6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801dde6:	b480      	push	{r7}
 801dde8:	b085      	sub	sp, #20
 801ddea:	af00      	add	r7, sp, #0
 801ddec:	6078      	str	r0, [r7, #4]
 801ddee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801ddf0:	683b      	ldr	r3, [r7, #0]
 801ddf2:	681b      	ldr	r3, [r3, #0]
 801ddf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801ddf6:	68bb      	ldr	r3, [r7, #8]
 801ddf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ddfc:	d103      	bne.n	801de06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801ddfe:	687b      	ldr	r3, [r7, #4]
 801de00:	691b      	ldr	r3, [r3, #16]
 801de02:	60fb      	str	r3, [r7, #12]
 801de04:	e00c      	b.n	801de20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801de06:	687b      	ldr	r3, [r7, #4]
 801de08:	3308      	adds	r3, #8
 801de0a:	60fb      	str	r3, [r7, #12]
 801de0c:	e002      	b.n	801de14 <vListInsert+0x2e>
 801de0e:	68fb      	ldr	r3, [r7, #12]
 801de10:	685b      	ldr	r3, [r3, #4]
 801de12:	60fb      	str	r3, [r7, #12]
 801de14:	68fb      	ldr	r3, [r7, #12]
 801de16:	685b      	ldr	r3, [r3, #4]
 801de18:	681b      	ldr	r3, [r3, #0]
 801de1a:	68ba      	ldr	r2, [r7, #8]
 801de1c:	429a      	cmp	r2, r3
 801de1e:	d2f6      	bcs.n	801de0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801de20:	68fb      	ldr	r3, [r7, #12]
 801de22:	685a      	ldr	r2, [r3, #4]
 801de24:	683b      	ldr	r3, [r7, #0]
 801de26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801de28:	683b      	ldr	r3, [r7, #0]
 801de2a:	685b      	ldr	r3, [r3, #4]
 801de2c:	683a      	ldr	r2, [r7, #0]
 801de2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801de30:	683b      	ldr	r3, [r7, #0]
 801de32:	68fa      	ldr	r2, [r7, #12]
 801de34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801de36:	68fb      	ldr	r3, [r7, #12]
 801de38:	683a      	ldr	r2, [r7, #0]
 801de3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801de3c:	683b      	ldr	r3, [r7, #0]
 801de3e:	687a      	ldr	r2, [r7, #4]
 801de40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801de42:	687b      	ldr	r3, [r7, #4]
 801de44:	681b      	ldr	r3, [r3, #0]
 801de46:	1c5a      	adds	r2, r3, #1
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	601a      	str	r2, [r3, #0]
}
 801de4c:	bf00      	nop
 801de4e:	3714      	adds	r7, #20
 801de50:	46bd      	mov	sp, r7
 801de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de56:	4770      	bx	lr

0801de58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801de58:	b480      	push	{r7}
 801de5a:	b085      	sub	sp, #20
 801de5c:	af00      	add	r7, sp, #0
 801de5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801de60:	687b      	ldr	r3, [r7, #4]
 801de62:	691b      	ldr	r3, [r3, #16]
 801de64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	685b      	ldr	r3, [r3, #4]
 801de6a:	687a      	ldr	r2, [r7, #4]
 801de6c:	6892      	ldr	r2, [r2, #8]
 801de6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	689b      	ldr	r3, [r3, #8]
 801de74:	687a      	ldr	r2, [r7, #4]
 801de76:	6852      	ldr	r2, [r2, #4]
 801de78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801de7a:	68fb      	ldr	r3, [r7, #12]
 801de7c:	685b      	ldr	r3, [r3, #4]
 801de7e:	687a      	ldr	r2, [r7, #4]
 801de80:	429a      	cmp	r2, r3
 801de82:	d103      	bne.n	801de8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801de84:	687b      	ldr	r3, [r7, #4]
 801de86:	689a      	ldr	r2, [r3, #8]
 801de88:	68fb      	ldr	r3, [r7, #12]
 801de8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	2200      	movs	r2, #0
 801de90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801de92:	68fb      	ldr	r3, [r7, #12]
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	1e5a      	subs	r2, r3, #1
 801de98:	68fb      	ldr	r3, [r7, #12]
 801de9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801de9c:	68fb      	ldr	r3, [r7, #12]
 801de9e:	681b      	ldr	r3, [r3, #0]
}
 801dea0:	4618      	mov	r0, r3
 801dea2:	3714      	adds	r7, #20
 801dea4:	46bd      	mov	sp, r7
 801dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deaa:	4770      	bx	lr

0801deac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801deac:	b580      	push	{r7, lr}
 801deae:	b084      	sub	sp, #16
 801deb0:	af00      	add	r7, sp, #0
 801deb2:	6078      	str	r0, [r7, #4]
 801deb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801deba:	68fb      	ldr	r3, [r7, #12]
 801debc:	2b00      	cmp	r3, #0
 801debe:	d102      	bne.n	801dec6 <xQueueGenericReset+0x1a>
 801dec0:	f002 f83a 	bl	801ff38 <ulSetInterruptMask>
 801dec4:	e7fe      	b.n	801dec4 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 801dec6:	f001 ff03 	bl	801fcd0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	681a      	ldr	r2, [r3, #0]
 801dece:	68fb      	ldr	r3, [r7, #12]
 801ded0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ded2:	68f9      	ldr	r1, [r7, #12]
 801ded4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801ded6:	fb01 f303 	mul.w	r3, r1, r3
 801deda:	441a      	add	r2, r3
 801dedc:	68fb      	ldr	r3, [r7, #12]
 801dede:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801dee0:	68fb      	ldr	r3, [r7, #12]
 801dee2:	2200      	movs	r2, #0
 801dee4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801dee6:	68fb      	ldr	r3, [r7, #12]
 801dee8:	681a      	ldr	r2, [r3, #0]
 801deea:	68fb      	ldr	r3, [r7, #12]
 801deec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801deee:	68fb      	ldr	r3, [r7, #12]
 801def0:	681a      	ldr	r2, [r3, #0]
 801def2:	68fb      	ldr	r3, [r7, #12]
 801def4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801def6:	3b01      	subs	r3, #1
 801def8:	68f9      	ldr	r1, [r7, #12]
 801defa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801defc:	fb01 f303 	mul.w	r3, r1, r3
 801df00:	441a      	add	r2, r3
 801df02:	68fb      	ldr	r3, [r7, #12]
 801df04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801df06:	68fb      	ldr	r3, [r7, #12]
 801df08:	22ff      	movs	r2, #255	; 0xff
 801df0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801df0e:	68fb      	ldr	r3, [r7, #12]
 801df10:	22ff      	movs	r2, #255	; 0xff
 801df12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801df16:	683b      	ldr	r3, [r7, #0]
 801df18:	2b00      	cmp	r3, #0
 801df1a:	d10e      	bne.n	801df3a <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801df1c:	68fb      	ldr	r3, [r7, #12]
 801df1e:	691b      	ldr	r3, [r3, #16]
 801df20:	2b00      	cmp	r3, #0
 801df22:	d014      	beq.n	801df4e <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	3310      	adds	r3, #16
 801df28:	4618      	mov	r0, r3
 801df2a:	f001 f90d 	bl	801f148 <xTaskRemoveFromEventList>
 801df2e:	4603      	mov	r3, r0
 801df30:	2b00      	cmp	r3, #0
 801df32:	d00c      	beq.n	801df4e <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801df34:	f001 feba 	bl	801fcac <vPortYield>
 801df38:	e009      	b.n	801df4e <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801df3a:	68fb      	ldr	r3, [r7, #12]
 801df3c:	3310      	adds	r3, #16
 801df3e:	4618      	mov	r0, r3
 801df40:	f7ff ff00 	bl	801dd44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801df44:	68fb      	ldr	r3, [r7, #12]
 801df46:	3324      	adds	r3, #36	; 0x24
 801df48:	4618      	mov	r0, r3
 801df4a:	f7ff fefb 	bl	801dd44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801df4e:	f001 fed1 	bl	801fcf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801df52:	2301      	movs	r3, #1
}
 801df54:	4618      	mov	r0, r3
 801df56:	3710      	adds	r7, #16
 801df58:	46bd      	mov	sp, r7
 801df5a:	bd80      	pop	{r7, pc}

0801df5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801df5c:	b580      	push	{r7, lr}
 801df5e:	b088      	sub	sp, #32
 801df60:	af02      	add	r7, sp, #8
 801df62:	60f8      	str	r0, [r7, #12]
 801df64:	60b9      	str	r1, [r7, #8]
 801df66:	607a      	str	r2, [r7, #4]
 801df68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801df6a:	68fb      	ldr	r3, [r7, #12]
 801df6c:	2b00      	cmp	r3, #0
 801df6e:	d102      	bne.n	801df76 <xQueueGenericCreateStatic+0x1a>
 801df70:	f001 ffe2 	bl	801ff38 <ulSetInterruptMask>
 801df74:	e7fe      	b.n	801df74 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801df76:	683b      	ldr	r3, [r7, #0]
 801df78:	2b00      	cmp	r3, #0
 801df7a:	d102      	bne.n	801df82 <xQueueGenericCreateStatic+0x26>
 801df7c:	f001 ffdc 	bl	801ff38 <ulSetInterruptMask>
 801df80:	e7fe      	b.n	801df80 <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801df82:	687b      	ldr	r3, [r7, #4]
 801df84:	2b00      	cmp	r3, #0
 801df86:	d002      	beq.n	801df8e <xQueueGenericCreateStatic+0x32>
 801df88:	68bb      	ldr	r3, [r7, #8]
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	d001      	beq.n	801df92 <xQueueGenericCreateStatic+0x36>
 801df8e:	2301      	movs	r3, #1
 801df90:	e000      	b.n	801df94 <xQueueGenericCreateStatic+0x38>
 801df92:	2300      	movs	r3, #0
 801df94:	2b00      	cmp	r3, #0
 801df96:	d102      	bne.n	801df9e <xQueueGenericCreateStatic+0x42>
 801df98:	f001 ffce 	bl	801ff38 <ulSetInterruptMask>
 801df9c:	e7fe      	b.n	801df9c <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	2b00      	cmp	r3, #0
 801dfa2:	d102      	bne.n	801dfaa <xQueueGenericCreateStatic+0x4e>
 801dfa4:	68bb      	ldr	r3, [r7, #8]
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	d101      	bne.n	801dfae <xQueueGenericCreateStatic+0x52>
 801dfaa:	2301      	movs	r3, #1
 801dfac:	e000      	b.n	801dfb0 <xQueueGenericCreateStatic+0x54>
 801dfae:	2300      	movs	r3, #0
 801dfb0:	2b00      	cmp	r3, #0
 801dfb2:	d102      	bne.n	801dfba <xQueueGenericCreateStatic+0x5e>
 801dfb4:	f001 ffc0 	bl	801ff38 <ulSetInterruptMask>
 801dfb8:	e7fe      	b.n	801dfb8 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801dfba:	2350      	movs	r3, #80	; 0x50
 801dfbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 801dfbe:	693b      	ldr	r3, [r7, #16]
 801dfc0:	2b50      	cmp	r3, #80	; 0x50
 801dfc2:	d002      	beq.n	801dfca <xQueueGenericCreateStatic+0x6e>
 801dfc4:	f001 ffb8 	bl	801ff38 <ulSetInterruptMask>
 801dfc8:	e7fe      	b.n	801dfc8 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801dfca:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801dfcc:	683b      	ldr	r3, [r7, #0]
 801dfce:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 801dfd0:	697b      	ldr	r3, [r7, #20]
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	d00d      	beq.n	801dff2 <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801dfd6:	697b      	ldr	r3, [r7, #20]
 801dfd8:	2201      	movs	r2, #1
 801dfda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801dfde:	f897 2020 	ldrb.w	r2, [r7, #32]
 801dfe2:	697b      	ldr	r3, [r7, #20]
 801dfe4:	9300      	str	r3, [sp, #0]
 801dfe6:	4613      	mov	r3, r2
 801dfe8:	687a      	ldr	r2, [r7, #4]
 801dfea:	68b9      	ldr	r1, [r7, #8]
 801dfec:	68f8      	ldr	r0, [r7, #12]
 801dfee:	f000 f805 	bl	801dffc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801dff2:	697b      	ldr	r3, [r7, #20]
	}
 801dff4:	4618      	mov	r0, r3
 801dff6:	3718      	adds	r7, #24
 801dff8:	46bd      	mov	sp, r7
 801dffa:	bd80      	pop	{r7, pc}

0801dffc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801dffc:	b580      	push	{r7, lr}
 801dffe:	b084      	sub	sp, #16
 801e000:	af00      	add	r7, sp, #0
 801e002:	60f8      	str	r0, [r7, #12]
 801e004:	60b9      	str	r1, [r7, #8]
 801e006:	607a      	str	r2, [r7, #4]
 801e008:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801e00a:	68bb      	ldr	r3, [r7, #8]
 801e00c:	2b00      	cmp	r3, #0
 801e00e:	d103      	bne.n	801e018 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801e010:	69bb      	ldr	r3, [r7, #24]
 801e012:	69ba      	ldr	r2, [r7, #24]
 801e014:	601a      	str	r2, [r3, #0]
 801e016:	e002      	b.n	801e01e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801e018:	69bb      	ldr	r3, [r7, #24]
 801e01a:	687a      	ldr	r2, [r7, #4]
 801e01c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801e01e:	69bb      	ldr	r3, [r7, #24]
 801e020:	68fa      	ldr	r2, [r7, #12]
 801e022:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801e024:	69bb      	ldr	r3, [r7, #24]
 801e026:	68ba      	ldr	r2, [r7, #8]
 801e028:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801e02a:	2101      	movs	r1, #1
 801e02c:	69b8      	ldr	r0, [r7, #24]
 801e02e:	f7ff ff3d 	bl	801deac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801e032:	69bb      	ldr	r3, [r7, #24]
 801e034:	78fa      	ldrb	r2, [r7, #3]
 801e036:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801e03a:	bf00      	nop
 801e03c:	3710      	adds	r7, #16
 801e03e:	46bd      	mov	sp, r7
 801e040:	bd80      	pop	{r7, pc}

0801e042 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801e042:	b580      	push	{r7, lr}
 801e044:	b08a      	sub	sp, #40	; 0x28
 801e046:	af00      	add	r7, sp, #0
 801e048:	60f8      	str	r0, [r7, #12]
 801e04a:	60b9      	str	r1, [r7, #8]
 801e04c:	607a      	str	r2, [r7, #4]
 801e04e:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801e050:	2300      	movs	r3, #0
 801e052:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801e054:	68fb      	ldr	r3, [r7, #12]
 801e056:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801e058:	6a3b      	ldr	r3, [r7, #32]
 801e05a:	2b00      	cmp	r3, #0
 801e05c:	d102      	bne.n	801e064 <xQueueGenericSend+0x22>
 801e05e:	f001 ff6b 	bl	801ff38 <ulSetInterruptMask>
 801e062:	e7fe      	b.n	801e062 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801e064:	68bb      	ldr	r3, [r7, #8]
 801e066:	2b00      	cmp	r3, #0
 801e068:	d103      	bne.n	801e072 <xQueueGenericSend+0x30>
 801e06a:	6a3b      	ldr	r3, [r7, #32]
 801e06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e06e:	2b00      	cmp	r3, #0
 801e070:	d101      	bne.n	801e076 <xQueueGenericSend+0x34>
 801e072:	2301      	movs	r3, #1
 801e074:	e000      	b.n	801e078 <xQueueGenericSend+0x36>
 801e076:	2300      	movs	r3, #0
 801e078:	2b00      	cmp	r3, #0
 801e07a:	d102      	bne.n	801e082 <xQueueGenericSend+0x40>
 801e07c:	f001 ff5c 	bl	801ff38 <ulSetInterruptMask>
 801e080:	e7fe      	b.n	801e080 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801e082:	683b      	ldr	r3, [r7, #0]
 801e084:	2b02      	cmp	r3, #2
 801e086:	d103      	bne.n	801e090 <xQueueGenericSend+0x4e>
 801e088:	6a3b      	ldr	r3, [r7, #32]
 801e08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e08c:	2b01      	cmp	r3, #1
 801e08e:	d101      	bne.n	801e094 <xQueueGenericSend+0x52>
 801e090:	2301      	movs	r3, #1
 801e092:	e000      	b.n	801e096 <xQueueGenericSend+0x54>
 801e094:	2300      	movs	r3, #0
 801e096:	2b00      	cmp	r3, #0
 801e098:	d102      	bne.n	801e0a0 <xQueueGenericSend+0x5e>
 801e09a:	f001 ff4d 	bl	801ff38 <ulSetInterruptMask>
 801e09e:	e7fe      	b.n	801e09e <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801e0a0:	f001 f9e8 	bl	801f474 <xTaskGetSchedulerState>
 801e0a4:	4603      	mov	r3, r0
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	d102      	bne.n	801e0b0 <xQueueGenericSend+0x6e>
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d101      	bne.n	801e0b4 <xQueueGenericSend+0x72>
 801e0b0:	2301      	movs	r3, #1
 801e0b2:	e000      	b.n	801e0b6 <xQueueGenericSend+0x74>
 801e0b4:	2300      	movs	r3, #0
 801e0b6:	2b00      	cmp	r3, #0
 801e0b8:	d102      	bne.n	801e0c0 <xQueueGenericSend+0x7e>
 801e0ba:	f001 ff3d 	bl	801ff38 <ulSetInterruptMask>
 801e0be:	e7fe      	b.n	801e0be <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801e0c0:	f001 fe06 	bl	801fcd0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801e0c4:	6a3b      	ldr	r3, [r7, #32]
 801e0c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e0c8:	6a3b      	ldr	r3, [r7, #32]
 801e0ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e0cc:	429a      	cmp	r2, r3
 801e0ce:	d302      	bcc.n	801e0d6 <xQueueGenericSend+0x94>
 801e0d0:	683b      	ldr	r3, [r7, #0]
 801e0d2:	2b02      	cmp	r3, #2
 801e0d4:	d11d      	bne.n	801e112 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801e0d6:	683a      	ldr	r2, [r7, #0]
 801e0d8:	68b9      	ldr	r1, [r7, #8]
 801e0da:	6a38      	ldr	r0, [r7, #32]
 801e0dc:	f000 f9a4 	bl	801e428 <prvCopyDataToQueue>
 801e0e0:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801e0e2:	6a3b      	ldr	r3, [r7, #32]
 801e0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d00a      	beq.n	801e100 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801e0ea:	6a3b      	ldr	r3, [r7, #32]
 801e0ec:	3324      	adds	r3, #36	; 0x24
 801e0ee:	4618      	mov	r0, r3
 801e0f0:	f001 f82a 	bl	801f148 <xTaskRemoveFromEventList>
 801e0f4:	4603      	mov	r3, r0
 801e0f6:	2b00      	cmp	r3, #0
 801e0f8:	d007      	beq.n	801e10a <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801e0fa:	f001 fdd7 	bl	801fcac <vPortYield>
 801e0fe:	e004      	b.n	801e10a <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801e100:	69fb      	ldr	r3, [r7, #28]
 801e102:	2b00      	cmp	r3, #0
 801e104:	d001      	beq.n	801e10a <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801e106:	f001 fdd1 	bl	801fcac <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801e10a:	f001 fdf3 	bl	801fcf4 <vPortExitCritical>
				return pdPASS;
 801e10e:	2301      	movs	r3, #1
 801e110:	e05c      	b.n	801e1cc <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801e112:	687b      	ldr	r3, [r7, #4]
 801e114:	2b00      	cmp	r3, #0
 801e116:	d103      	bne.n	801e120 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801e118:	f001 fdec 	bl	801fcf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801e11c:	2300      	movs	r3, #0
 801e11e:	e055      	b.n	801e1cc <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e122:	2b00      	cmp	r3, #0
 801e124:	d106      	bne.n	801e134 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801e126:	f107 0314 	add.w	r3, r7, #20
 801e12a:	4618      	mov	r0, r3
 801e12c:	f001 f868 	bl	801f200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801e130:	2301      	movs	r3, #1
 801e132:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801e134:	f001 fdde 	bl	801fcf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801e138:	f000 fe14 	bl	801ed64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801e13c:	f001 fdc8 	bl	801fcd0 <vPortEnterCritical>
 801e140:	6a3b      	ldr	r3, [r7, #32]
 801e142:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e146:	b25b      	sxtb	r3, r3
 801e148:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e14c:	d103      	bne.n	801e156 <xQueueGenericSend+0x114>
 801e14e:	6a3b      	ldr	r3, [r7, #32]
 801e150:	2200      	movs	r2, #0
 801e152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e156:	6a3b      	ldr	r3, [r7, #32]
 801e158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e15c:	b25b      	sxtb	r3, r3
 801e15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e162:	d103      	bne.n	801e16c <xQueueGenericSend+0x12a>
 801e164:	6a3b      	ldr	r3, [r7, #32]
 801e166:	2200      	movs	r2, #0
 801e168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e16c:	f001 fdc2 	bl	801fcf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801e170:	1d3a      	adds	r2, r7, #4
 801e172:	f107 0314 	add.w	r3, r7, #20
 801e176:	4611      	mov	r1, r2
 801e178:	4618      	mov	r0, r3
 801e17a:	f001 f857 	bl	801f22c <xTaskCheckForTimeOut>
 801e17e:	4603      	mov	r3, r0
 801e180:	2b00      	cmp	r3, #0
 801e182:	d11d      	bne.n	801e1c0 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801e184:	6a38      	ldr	r0, [r7, #32]
 801e186:	f000 fa47 	bl	801e618 <prvIsQueueFull>
 801e18a:	4603      	mov	r3, r0
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	d011      	beq.n	801e1b4 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801e190:	6a3b      	ldr	r3, [r7, #32]
 801e192:	3310      	adds	r3, #16
 801e194:	687a      	ldr	r2, [r7, #4]
 801e196:	4611      	mov	r1, r2
 801e198:	4618      	mov	r0, r3
 801e19a:	f000 ff95 	bl	801f0c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801e19e:	6a38      	ldr	r0, [r7, #32]
 801e1a0:	f000 f9d2 	bl	801e548 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801e1a4:	f000 fdec 	bl	801ed80 <xTaskResumeAll>
 801e1a8:	4603      	mov	r3, r0
 801e1aa:	2b00      	cmp	r3, #0
 801e1ac:	d188      	bne.n	801e0c0 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 801e1ae:	f001 fd7d 	bl	801fcac <vPortYield>
 801e1b2:	e785      	b.n	801e0c0 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801e1b4:	6a38      	ldr	r0, [r7, #32]
 801e1b6:	f000 f9c7 	bl	801e548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801e1ba:	f000 fde1 	bl	801ed80 <xTaskResumeAll>
 801e1be:	e77f      	b.n	801e0c0 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801e1c0:	6a38      	ldr	r0, [r7, #32]
 801e1c2:	f000 f9c1 	bl	801e548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801e1c6:	f000 fddb 	bl	801ed80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801e1ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801e1cc:	4618      	mov	r0, r3
 801e1ce:	3728      	adds	r7, #40	; 0x28
 801e1d0:	46bd      	mov	sp, r7
 801e1d2:	bd80      	pop	{r7, pc}

0801e1d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801e1d4:	b580      	push	{r7, lr}
 801e1d6:	b08a      	sub	sp, #40	; 0x28
 801e1d8:	af00      	add	r7, sp, #0
 801e1da:	60f8      	str	r0, [r7, #12]
 801e1dc:	60b9      	str	r1, [r7, #8]
 801e1de:	607a      	str	r2, [r7, #4]
 801e1e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801e1e2:	68fb      	ldr	r3, [r7, #12]
 801e1e4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801e1e6:	6a3b      	ldr	r3, [r7, #32]
 801e1e8:	2b00      	cmp	r3, #0
 801e1ea:	d102      	bne.n	801e1f2 <xQueueGenericSendFromISR+0x1e>
 801e1ec:	f001 fea4 	bl	801ff38 <ulSetInterruptMask>
 801e1f0:	e7fe      	b.n	801e1f0 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801e1f2:	68bb      	ldr	r3, [r7, #8]
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	d103      	bne.n	801e200 <xQueueGenericSendFromISR+0x2c>
 801e1f8:	6a3b      	ldr	r3, [r7, #32]
 801e1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e1fc:	2b00      	cmp	r3, #0
 801e1fe:	d101      	bne.n	801e204 <xQueueGenericSendFromISR+0x30>
 801e200:	2301      	movs	r3, #1
 801e202:	e000      	b.n	801e206 <xQueueGenericSendFromISR+0x32>
 801e204:	2300      	movs	r3, #0
 801e206:	2b00      	cmp	r3, #0
 801e208:	d102      	bne.n	801e210 <xQueueGenericSendFromISR+0x3c>
 801e20a:	f001 fe95 	bl	801ff38 <ulSetInterruptMask>
 801e20e:	e7fe      	b.n	801e20e <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801e210:	683b      	ldr	r3, [r7, #0]
 801e212:	2b02      	cmp	r3, #2
 801e214:	d103      	bne.n	801e21e <xQueueGenericSendFromISR+0x4a>
 801e216:	6a3b      	ldr	r3, [r7, #32]
 801e218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e21a:	2b01      	cmp	r3, #1
 801e21c:	d101      	bne.n	801e222 <xQueueGenericSendFromISR+0x4e>
 801e21e:	2301      	movs	r3, #1
 801e220:	e000      	b.n	801e224 <xQueueGenericSendFromISR+0x50>
 801e222:	2300      	movs	r3, #0
 801e224:	2b00      	cmp	r3, #0
 801e226:	d102      	bne.n	801e22e <xQueueGenericSendFromISR+0x5a>
 801e228:	f001 fe86 	bl	801ff38 <ulSetInterruptMask>
 801e22c:	e7fe      	b.n	801e22c <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801e22e:	f001 fe83 	bl	801ff38 <ulSetInterruptMask>
 801e232:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801e234:	6a3b      	ldr	r3, [r7, #32]
 801e236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e238:	6a3b      	ldr	r3, [r7, #32]
 801e23a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e23c:	429a      	cmp	r2, r3
 801e23e:	d302      	bcc.n	801e246 <xQueueGenericSendFromISR+0x72>
 801e240:	683b      	ldr	r3, [r7, #0]
 801e242:	2b02      	cmp	r3, #2
 801e244:	d12d      	bne.n	801e2a2 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801e246:	6a3b      	ldr	r3, [r7, #32]
 801e248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e24c:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801e24e:	6a3b      	ldr	r3, [r7, #32]
 801e250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e252:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801e254:	683a      	ldr	r2, [r7, #0]
 801e256:	68b9      	ldr	r1, [r7, #8]
 801e258:	6a38      	ldr	r0, [r7, #32]
 801e25a:	f000 f8e5 	bl	801e428 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801e25e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801e262:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e266:	d112      	bne.n	801e28e <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801e268:	6a3b      	ldr	r3, [r7, #32]
 801e26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	d015      	beq.n	801e29c <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801e270:	6a3b      	ldr	r3, [r7, #32]
 801e272:	3324      	adds	r3, #36	; 0x24
 801e274:	4618      	mov	r0, r3
 801e276:	f000 ff67 	bl	801f148 <xTaskRemoveFromEventList>
 801e27a:	4603      	mov	r3, r0
 801e27c:	2b00      	cmp	r3, #0
 801e27e:	d00d      	beq.n	801e29c <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801e280:	687b      	ldr	r3, [r7, #4]
 801e282:	2b00      	cmp	r3, #0
 801e284:	d00a      	beq.n	801e29c <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801e286:	687b      	ldr	r3, [r7, #4]
 801e288:	2201      	movs	r2, #1
 801e28a:	601a      	str	r2, [r3, #0]
 801e28c:	e006      	b.n	801e29c <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801e28e:	7efb      	ldrb	r3, [r7, #27]
 801e290:	3301      	adds	r3, #1
 801e292:	b2db      	uxtb	r3, r3
 801e294:	b25a      	sxtb	r2, r3
 801e296:	6a3b      	ldr	r3, [r7, #32]
 801e298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801e29c:	2301      	movs	r3, #1
 801e29e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 801e2a0:	e001      	b.n	801e2a6 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801e2a2:	2300      	movs	r3, #0
 801e2a4:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801e2a6:	69f8      	ldr	r0, [r7, #28]
 801e2a8:	f001 fe53 	bl	801ff52 <vClearInterruptMask>

	return xReturn;
 801e2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801e2ae:	4618      	mov	r0, r3
 801e2b0:	3728      	adds	r7, #40	; 0x28
 801e2b2:	46bd      	mov	sp, r7
 801e2b4:	bd80      	pop	{r7, pc}

0801e2b6 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801e2b6:	b580      	push	{r7, lr}
 801e2b8:	b08a      	sub	sp, #40	; 0x28
 801e2ba:	af00      	add	r7, sp, #0
 801e2bc:	60f8      	str	r0, [r7, #12]
 801e2be:	60b9      	str	r1, [r7, #8]
 801e2c0:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801e2c2:	2300      	movs	r3, #0
 801e2c4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801e2c6:	68fb      	ldr	r3, [r7, #12]
 801e2c8:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801e2ca:	6a3b      	ldr	r3, [r7, #32]
 801e2cc:	2b00      	cmp	r3, #0
 801e2ce:	d102      	bne.n	801e2d6 <xQueueReceive+0x20>
 801e2d0:	f001 fe32 	bl	801ff38 <ulSetInterruptMask>
 801e2d4:	e7fe      	b.n	801e2d4 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801e2d6:	68bb      	ldr	r3, [r7, #8]
 801e2d8:	2b00      	cmp	r3, #0
 801e2da:	d103      	bne.n	801e2e4 <xQueueReceive+0x2e>
 801e2dc:	6a3b      	ldr	r3, [r7, #32]
 801e2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	d101      	bne.n	801e2e8 <xQueueReceive+0x32>
 801e2e4:	2301      	movs	r3, #1
 801e2e6:	e000      	b.n	801e2ea <xQueueReceive+0x34>
 801e2e8:	2300      	movs	r3, #0
 801e2ea:	2b00      	cmp	r3, #0
 801e2ec:	d102      	bne.n	801e2f4 <xQueueReceive+0x3e>
 801e2ee:	f001 fe23 	bl	801ff38 <ulSetInterruptMask>
 801e2f2:	e7fe      	b.n	801e2f2 <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801e2f4:	f001 f8be 	bl	801f474 <xTaskGetSchedulerState>
 801e2f8:	4603      	mov	r3, r0
 801e2fa:	2b00      	cmp	r3, #0
 801e2fc:	d102      	bne.n	801e304 <xQueueReceive+0x4e>
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	2b00      	cmp	r3, #0
 801e302:	d101      	bne.n	801e308 <xQueueReceive+0x52>
 801e304:	2301      	movs	r3, #1
 801e306:	e000      	b.n	801e30a <xQueueReceive+0x54>
 801e308:	2300      	movs	r3, #0
 801e30a:	2b00      	cmp	r3, #0
 801e30c:	d102      	bne.n	801e314 <xQueueReceive+0x5e>
 801e30e:	f001 fe13 	bl	801ff38 <ulSetInterruptMask>
 801e312:	e7fe      	b.n	801e312 <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801e314:	f001 fcdc 	bl	801fcd0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801e318:	6a3b      	ldr	r3, [r7, #32]
 801e31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e31c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801e31e:	69fb      	ldr	r3, [r7, #28]
 801e320:	2b00      	cmp	r3, #0
 801e322:	d019      	beq.n	801e358 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801e324:	68b9      	ldr	r1, [r7, #8]
 801e326:	6a38      	ldr	r0, [r7, #32]
 801e328:	f000 f8e8 	bl	801e4fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801e32c:	69fb      	ldr	r3, [r7, #28]
 801e32e:	1e5a      	subs	r2, r3, #1
 801e330:	6a3b      	ldr	r3, [r7, #32]
 801e332:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e334:	6a3b      	ldr	r3, [r7, #32]
 801e336:	691b      	ldr	r3, [r3, #16]
 801e338:	2b00      	cmp	r3, #0
 801e33a:	d009      	beq.n	801e350 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801e33c:	6a3b      	ldr	r3, [r7, #32]
 801e33e:	3310      	adds	r3, #16
 801e340:	4618      	mov	r0, r3
 801e342:	f000 ff01 	bl	801f148 <xTaskRemoveFromEventList>
 801e346:	4603      	mov	r3, r0
 801e348:	2b00      	cmp	r3, #0
 801e34a:	d001      	beq.n	801e350 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801e34c:	f001 fcae 	bl	801fcac <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801e350:	f001 fcd0 	bl	801fcf4 <vPortExitCritical>
				return pdPASS;
 801e354:	2301      	movs	r3, #1
 801e356:	e063      	b.n	801e420 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	d103      	bne.n	801e366 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801e35e:	f001 fcc9 	bl	801fcf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801e362:	2300      	movs	r3, #0
 801e364:	e05c      	b.n	801e420 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801e366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e368:	2b00      	cmp	r3, #0
 801e36a:	d106      	bne.n	801e37a <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801e36c:	f107 0314 	add.w	r3, r7, #20
 801e370:	4618      	mov	r0, r3
 801e372:	f000 ff45 	bl	801f200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801e376:	2301      	movs	r3, #1
 801e378:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801e37a:	f001 fcbb 	bl	801fcf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801e37e:	f000 fcf1 	bl	801ed64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801e382:	f001 fca5 	bl	801fcd0 <vPortEnterCritical>
 801e386:	6a3b      	ldr	r3, [r7, #32]
 801e388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e38c:	b25b      	sxtb	r3, r3
 801e38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e392:	d103      	bne.n	801e39c <xQueueReceive+0xe6>
 801e394:	6a3b      	ldr	r3, [r7, #32]
 801e396:	2200      	movs	r2, #0
 801e398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e39c:	6a3b      	ldr	r3, [r7, #32]
 801e39e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e3a2:	b25b      	sxtb	r3, r3
 801e3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e3a8:	d103      	bne.n	801e3b2 <xQueueReceive+0xfc>
 801e3aa:	6a3b      	ldr	r3, [r7, #32]
 801e3ac:	2200      	movs	r2, #0
 801e3ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e3b2:	f001 fc9f 	bl	801fcf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801e3b6:	1d3a      	adds	r2, r7, #4
 801e3b8:	f107 0314 	add.w	r3, r7, #20
 801e3bc:	4611      	mov	r1, r2
 801e3be:	4618      	mov	r0, r3
 801e3c0:	f000 ff34 	bl	801f22c <xTaskCheckForTimeOut>
 801e3c4:	4603      	mov	r3, r0
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	d11d      	bne.n	801e406 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801e3ca:	6a38      	ldr	r0, [r7, #32]
 801e3cc:	f000 f90e 	bl	801e5ec <prvIsQueueEmpty>
 801e3d0:	4603      	mov	r3, r0
 801e3d2:	2b00      	cmp	r3, #0
 801e3d4:	d011      	beq.n	801e3fa <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801e3d6:	6a3b      	ldr	r3, [r7, #32]
 801e3d8:	3324      	adds	r3, #36	; 0x24
 801e3da:	687a      	ldr	r2, [r7, #4]
 801e3dc:	4611      	mov	r1, r2
 801e3de:	4618      	mov	r0, r3
 801e3e0:	f000 fe72 	bl	801f0c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801e3e4:	6a38      	ldr	r0, [r7, #32]
 801e3e6:	f000 f8af 	bl	801e548 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801e3ea:	f000 fcc9 	bl	801ed80 <xTaskResumeAll>
 801e3ee:	4603      	mov	r3, r0
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	d18f      	bne.n	801e314 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 801e3f4:	f001 fc5a 	bl	801fcac <vPortYield>
 801e3f8:	e78c      	b.n	801e314 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801e3fa:	6a38      	ldr	r0, [r7, #32]
 801e3fc:	f000 f8a4 	bl	801e548 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801e400:	f000 fcbe 	bl	801ed80 <xTaskResumeAll>
 801e404:	e786      	b.n	801e314 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801e406:	6a38      	ldr	r0, [r7, #32]
 801e408:	f000 f89e 	bl	801e548 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801e40c:	f000 fcb8 	bl	801ed80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801e410:	6a38      	ldr	r0, [r7, #32]
 801e412:	f000 f8eb 	bl	801e5ec <prvIsQueueEmpty>
 801e416:	4603      	mov	r3, r0
 801e418:	2b00      	cmp	r3, #0
 801e41a:	f43f af7b 	beq.w	801e314 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801e41e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801e420:	4618      	mov	r0, r3
 801e422:	3728      	adds	r7, #40	; 0x28
 801e424:	46bd      	mov	sp, r7
 801e426:	bd80      	pop	{r7, pc}

0801e428 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801e428:	b580      	push	{r7, lr}
 801e42a:	b086      	sub	sp, #24
 801e42c:	af00      	add	r7, sp, #0
 801e42e:	60f8      	str	r0, [r7, #12]
 801e430:	60b9      	str	r1, [r7, #8]
 801e432:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801e434:	2300      	movs	r3, #0
 801e436:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801e438:	68fb      	ldr	r3, [r7, #12]
 801e43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e43c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801e43e:	68fb      	ldr	r3, [r7, #12]
 801e440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e442:	2b00      	cmp	r3, #0
 801e444:	d10d      	bne.n	801e462 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801e446:	68fb      	ldr	r3, [r7, #12]
 801e448:	681b      	ldr	r3, [r3, #0]
 801e44a:	2b00      	cmp	r3, #0
 801e44c:	d14d      	bne.n	801e4ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801e44e:	68fb      	ldr	r3, [r7, #12]
 801e450:	689b      	ldr	r3, [r3, #8]
 801e452:	4618      	mov	r0, r3
 801e454:	f001 f82c 	bl	801f4b0 <xTaskPriorityDisinherit>
 801e458:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801e45a:	68fb      	ldr	r3, [r7, #12]
 801e45c:	2200      	movs	r2, #0
 801e45e:	609a      	str	r2, [r3, #8]
 801e460:	e043      	b.n	801e4ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801e462:	687b      	ldr	r3, [r7, #4]
 801e464:	2b00      	cmp	r3, #0
 801e466:	d119      	bne.n	801e49c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801e468:	68fb      	ldr	r3, [r7, #12]
 801e46a:	6858      	ldr	r0, [r3, #4]
 801e46c:	68fb      	ldr	r3, [r7, #12]
 801e46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e470:	461a      	mov	r2, r3
 801e472:	68b9      	ldr	r1, [r7, #8]
 801e474:	f003 ff4a 	bl	802230c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	685a      	ldr	r2, [r3, #4]
 801e47c:	68fb      	ldr	r3, [r7, #12]
 801e47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e480:	441a      	add	r2, r3
 801e482:	68fb      	ldr	r3, [r7, #12]
 801e484:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801e486:	68fb      	ldr	r3, [r7, #12]
 801e488:	685a      	ldr	r2, [r3, #4]
 801e48a:	68fb      	ldr	r3, [r7, #12]
 801e48c:	689b      	ldr	r3, [r3, #8]
 801e48e:	429a      	cmp	r2, r3
 801e490:	d32b      	bcc.n	801e4ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801e492:	68fb      	ldr	r3, [r7, #12]
 801e494:	681a      	ldr	r2, [r3, #0]
 801e496:	68fb      	ldr	r3, [r7, #12]
 801e498:	605a      	str	r2, [r3, #4]
 801e49a:	e026      	b.n	801e4ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801e49c:	68fb      	ldr	r3, [r7, #12]
 801e49e:	68d8      	ldr	r0, [r3, #12]
 801e4a0:	68fb      	ldr	r3, [r7, #12]
 801e4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4a4:	461a      	mov	r2, r3
 801e4a6:	68b9      	ldr	r1, [r7, #8]
 801e4a8:	f003 ff30 	bl	802230c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801e4ac:	68fb      	ldr	r3, [r7, #12]
 801e4ae:	68da      	ldr	r2, [r3, #12]
 801e4b0:	68fb      	ldr	r3, [r7, #12]
 801e4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4b4:	425b      	negs	r3, r3
 801e4b6:	441a      	add	r2, r3
 801e4b8:	68fb      	ldr	r3, [r7, #12]
 801e4ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801e4bc:	68fb      	ldr	r3, [r7, #12]
 801e4be:	68da      	ldr	r2, [r3, #12]
 801e4c0:	68fb      	ldr	r3, [r7, #12]
 801e4c2:	681b      	ldr	r3, [r3, #0]
 801e4c4:	429a      	cmp	r2, r3
 801e4c6:	d207      	bcs.n	801e4d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801e4c8:	68fb      	ldr	r3, [r7, #12]
 801e4ca:	689a      	ldr	r2, [r3, #8]
 801e4cc:	68fb      	ldr	r3, [r7, #12]
 801e4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4d0:	425b      	negs	r3, r3
 801e4d2:	441a      	add	r2, r3
 801e4d4:	68fb      	ldr	r3, [r7, #12]
 801e4d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	2b02      	cmp	r3, #2
 801e4dc:	d105      	bne.n	801e4ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801e4de:	693b      	ldr	r3, [r7, #16]
 801e4e0:	2b00      	cmp	r3, #0
 801e4e2:	d002      	beq.n	801e4ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801e4e4:	693b      	ldr	r3, [r7, #16]
 801e4e6:	3b01      	subs	r3, #1
 801e4e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801e4ea:	693b      	ldr	r3, [r7, #16]
 801e4ec:	1c5a      	adds	r2, r3, #1
 801e4ee:	68fb      	ldr	r3, [r7, #12]
 801e4f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801e4f2:	697b      	ldr	r3, [r7, #20]
}
 801e4f4:	4618      	mov	r0, r3
 801e4f6:	3718      	adds	r7, #24
 801e4f8:	46bd      	mov	sp, r7
 801e4fa:	bd80      	pop	{r7, pc}

0801e4fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801e4fc:	b580      	push	{r7, lr}
 801e4fe:	b082      	sub	sp, #8
 801e500:	af00      	add	r7, sp, #0
 801e502:	6078      	str	r0, [r7, #4]
 801e504:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801e506:	687b      	ldr	r3, [r7, #4]
 801e508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	d018      	beq.n	801e540 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801e50e:	687b      	ldr	r3, [r7, #4]
 801e510:	68da      	ldr	r2, [r3, #12]
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e516:	441a      	add	r2, r3
 801e518:	687b      	ldr	r3, [r7, #4]
 801e51a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	68da      	ldr	r2, [r3, #12]
 801e520:	687b      	ldr	r3, [r7, #4]
 801e522:	689b      	ldr	r3, [r3, #8]
 801e524:	429a      	cmp	r2, r3
 801e526:	d303      	bcc.n	801e530 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801e528:	687b      	ldr	r3, [r7, #4]
 801e52a:	681a      	ldr	r2, [r3, #0]
 801e52c:	687b      	ldr	r3, [r7, #4]
 801e52e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	68d9      	ldr	r1, [r3, #12]
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e538:	461a      	mov	r2, r3
 801e53a:	6838      	ldr	r0, [r7, #0]
 801e53c:	f003 fee6 	bl	802230c <memcpy>
	}
}
 801e540:	bf00      	nop
 801e542:	3708      	adds	r7, #8
 801e544:	46bd      	mov	sp, r7
 801e546:	bd80      	pop	{r7, pc}

0801e548 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801e548:	b580      	push	{r7, lr}
 801e54a:	b084      	sub	sp, #16
 801e54c:	af00      	add	r7, sp, #0
 801e54e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801e550:	f001 fbbe 	bl	801fcd0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801e554:	687b      	ldr	r3, [r7, #4]
 801e556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e55a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801e55c:	e011      	b.n	801e582 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801e55e:	687b      	ldr	r3, [r7, #4]
 801e560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e562:	2b00      	cmp	r3, #0
 801e564:	d012      	beq.n	801e58c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801e566:	687b      	ldr	r3, [r7, #4]
 801e568:	3324      	adds	r3, #36	; 0x24
 801e56a:	4618      	mov	r0, r3
 801e56c:	f000 fdec 	bl	801f148 <xTaskRemoveFromEventList>
 801e570:	4603      	mov	r3, r0
 801e572:	2b00      	cmp	r3, #0
 801e574:	d001      	beq.n	801e57a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801e576:	f000 feab 	bl	801f2d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801e57a:	7bfb      	ldrb	r3, [r7, #15]
 801e57c:	3b01      	subs	r3, #1
 801e57e:	b2db      	uxtb	r3, r3
 801e580:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801e582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e586:	2b00      	cmp	r3, #0
 801e588:	dce9      	bgt.n	801e55e <prvUnlockQueue+0x16>
 801e58a:	e000      	b.n	801e58e <prvUnlockQueue+0x46>
					break;
 801e58c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801e58e:	687b      	ldr	r3, [r7, #4]
 801e590:	22ff      	movs	r2, #255	; 0xff
 801e592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801e596:	f001 fbad 	bl	801fcf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801e59a:	f001 fb99 	bl	801fcd0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e5a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801e5a6:	e011      	b.n	801e5cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	691b      	ldr	r3, [r3, #16]
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	d012      	beq.n	801e5d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801e5b0:	687b      	ldr	r3, [r7, #4]
 801e5b2:	3310      	adds	r3, #16
 801e5b4:	4618      	mov	r0, r3
 801e5b6:	f000 fdc7 	bl	801f148 <xTaskRemoveFromEventList>
 801e5ba:	4603      	mov	r3, r0
 801e5bc:	2b00      	cmp	r3, #0
 801e5be:	d001      	beq.n	801e5c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801e5c0:	f000 fe86 	bl	801f2d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801e5c4:	7bbb      	ldrb	r3, [r7, #14]
 801e5c6:	3b01      	subs	r3, #1
 801e5c8:	b2db      	uxtb	r3, r3
 801e5ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801e5cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801e5d0:	2b00      	cmp	r3, #0
 801e5d2:	dce9      	bgt.n	801e5a8 <prvUnlockQueue+0x60>
 801e5d4:	e000      	b.n	801e5d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801e5d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801e5d8:	687b      	ldr	r3, [r7, #4]
 801e5da:	22ff      	movs	r2, #255	; 0xff
 801e5dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801e5e0:	f001 fb88 	bl	801fcf4 <vPortExitCritical>
}
 801e5e4:	bf00      	nop
 801e5e6:	3710      	adds	r7, #16
 801e5e8:	46bd      	mov	sp, r7
 801e5ea:	bd80      	pop	{r7, pc}

0801e5ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801e5ec:	b580      	push	{r7, lr}
 801e5ee:	b084      	sub	sp, #16
 801e5f0:	af00      	add	r7, sp, #0
 801e5f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801e5f4:	f001 fb6c 	bl	801fcd0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801e5f8:	687b      	ldr	r3, [r7, #4]
 801e5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d102      	bne.n	801e606 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801e600:	2301      	movs	r3, #1
 801e602:	60fb      	str	r3, [r7, #12]
 801e604:	e001      	b.n	801e60a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801e606:	2300      	movs	r3, #0
 801e608:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801e60a:	f001 fb73 	bl	801fcf4 <vPortExitCritical>

	return xReturn;
 801e60e:	68fb      	ldr	r3, [r7, #12]
}
 801e610:	4618      	mov	r0, r3
 801e612:	3710      	adds	r7, #16
 801e614:	46bd      	mov	sp, r7
 801e616:	bd80      	pop	{r7, pc}

0801e618 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801e618:	b580      	push	{r7, lr}
 801e61a:	b084      	sub	sp, #16
 801e61c:	af00      	add	r7, sp, #0
 801e61e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801e620:	f001 fb56 	bl	801fcd0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801e624:	687b      	ldr	r3, [r7, #4]
 801e626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e628:	687b      	ldr	r3, [r7, #4]
 801e62a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e62c:	429a      	cmp	r2, r3
 801e62e:	d102      	bne.n	801e636 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801e630:	2301      	movs	r3, #1
 801e632:	60fb      	str	r3, [r7, #12]
 801e634:	e001      	b.n	801e63a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801e636:	2300      	movs	r3, #0
 801e638:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801e63a:	f001 fb5b 	bl	801fcf4 <vPortExitCritical>

	return xReturn;
 801e63e:	68fb      	ldr	r3, [r7, #12]
}
 801e640:	4618      	mov	r0, r3
 801e642:	3710      	adds	r7, #16
 801e644:	46bd      	mov	sp, r7
 801e646:	bd80      	pop	{r7, pc}

0801e648 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801e648:	b480      	push	{r7}
 801e64a:	b085      	sub	sp, #20
 801e64c:	af00      	add	r7, sp, #0
 801e64e:	6078      	str	r0, [r7, #4]
 801e650:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801e652:	2300      	movs	r3, #0
 801e654:	60fb      	str	r3, [r7, #12]
 801e656:	e014      	b.n	801e682 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801e658:	4a0f      	ldr	r2, [pc, #60]	; (801e698 <vQueueAddToRegistry+0x50>)
 801e65a:	68fb      	ldr	r3, [r7, #12]
 801e65c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801e660:	2b00      	cmp	r3, #0
 801e662:	d10b      	bne.n	801e67c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801e664:	490c      	ldr	r1, [pc, #48]	; (801e698 <vQueueAddToRegistry+0x50>)
 801e666:	68fb      	ldr	r3, [r7, #12]
 801e668:	683a      	ldr	r2, [r7, #0]
 801e66a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801e66e:	4a0a      	ldr	r2, [pc, #40]	; (801e698 <vQueueAddToRegistry+0x50>)
 801e670:	68fb      	ldr	r3, [r7, #12]
 801e672:	00db      	lsls	r3, r3, #3
 801e674:	4413      	add	r3, r2
 801e676:	687a      	ldr	r2, [r7, #4]
 801e678:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801e67a:	e006      	b.n	801e68a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801e67c:	68fb      	ldr	r3, [r7, #12]
 801e67e:	3301      	adds	r3, #1
 801e680:	60fb      	str	r3, [r7, #12]
 801e682:	68fb      	ldr	r3, [r7, #12]
 801e684:	2b07      	cmp	r3, #7
 801e686:	d9e7      	bls.n	801e658 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801e688:	bf00      	nop
 801e68a:	bf00      	nop
 801e68c:	3714      	adds	r7, #20
 801e68e:	46bd      	mov	sp, r7
 801e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e694:	4770      	bx	lr
 801e696:	bf00      	nop
 801e698:	20001688 	.word	0x20001688

0801e69c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801e69c:	b580      	push	{r7, lr}
 801e69e:	b086      	sub	sp, #24
 801e6a0:	af00      	add	r7, sp, #0
 801e6a2:	60f8      	str	r0, [r7, #12]
 801e6a4:	60b9      	str	r1, [r7, #8]
 801e6a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801e6a8:	68fb      	ldr	r3, [r7, #12]
 801e6aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801e6ac:	f001 fb10 	bl	801fcd0 <vPortEnterCritical>
 801e6b0:	697b      	ldr	r3, [r7, #20]
 801e6b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e6b6:	b25b      	sxtb	r3, r3
 801e6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e6bc:	d103      	bne.n	801e6c6 <vQueueWaitForMessageRestricted+0x2a>
 801e6be:	697b      	ldr	r3, [r7, #20]
 801e6c0:	2200      	movs	r2, #0
 801e6c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e6c6:	697b      	ldr	r3, [r7, #20]
 801e6c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e6cc:	b25b      	sxtb	r3, r3
 801e6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e6d2:	d103      	bne.n	801e6dc <vQueueWaitForMessageRestricted+0x40>
 801e6d4:	697b      	ldr	r3, [r7, #20]
 801e6d6:	2200      	movs	r2, #0
 801e6d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e6dc:	f001 fb0a 	bl	801fcf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801e6e0:	697b      	ldr	r3, [r7, #20]
 801e6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e6e4:	2b00      	cmp	r3, #0
 801e6e6:	d106      	bne.n	801e6f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801e6e8:	697b      	ldr	r3, [r7, #20]
 801e6ea:	3324      	adds	r3, #36	; 0x24
 801e6ec:	687a      	ldr	r2, [r7, #4]
 801e6ee:	68b9      	ldr	r1, [r7, #8]
 801e6f0:	4618      	mov	r0, r3
 801e6f2:	f000 fd05 	bl	801f100 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801e6f6:	6978      	ldr	r0, [r7, #20]
 801e6f8:	f7ff ff26 	bl	801e548 <prvUnlockQueue>
	}
 801e6fc:	bf00      	nop
 801e6fe:	3718      	adds	r7, #24
 801e700:	46bd      	mov	sp, r7
 801e702:	bd80      	pop	{r7, pc}

0801e704 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801e704:	b580      	push	{r7, lr}
 801e706:	b08c      	sub	sp, #48	; 0x30
 801e708:	af04      	add	r7, sp, #16
 801e70a:	60f8      	str	r0, [r7, #12]
 801e70c:	60b9      	str	r1, [r7, #8]
 801e70e:	607a      	str	r2, [r7, #4]
 801e710:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801e712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e714:	2b00      	cmp	r3, #0
 801e716:	d102      	bne.n	801e71e <xTaskCreateStatic+0x1a>
 801e718:	f001 fc0e 	bl	801ff38 <ulSetInterruptMask>
 801e71c:	e7fe      	b.n	801e71c <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 801e71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e720:	2b00      	cmp	r3, #0
 801e722:	d102      	bne.n	801e72a <xTaskCreateStatic+0x26>
 801e724:	f001 fc08 	bl	801ff38 <ulSetInterruptMask>
 801e728:	e7fe      	b.n	801e728 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801e72a:	235c      	movs	r3, #92	; 0x5c
 801e72c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801e72e:	697b      	ldr	r3, [r7, #20]
 801e730:	2b5c      	cmp	r3, #92	; 0x5c
 801e732:	d002      	beq.n	801e73a <xTaskCreateStatic+0x36>
 801e734:	f001 fc00 	bl	801ff38 <ulSetInterruptMask>
 801e738:	e7fe      	b.n	801e738 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801e73a:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801e73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e73e:	2b00      	cmp	r3, #0
 801e740:	d01e      	beq.n	801e780 <xTaskCreateStatic+0x7c>
 801e742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e744:	2b00      	cmp	r3, #0
 801e746:	d01b      	beq.n	801e780 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801e748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e74a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801e74c:	69fb      	ldr	r3, [r7, #28]
 801e74e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e750:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801e752:	69fb      	ldr	r3, [r7, #28]
 801e754:	2202      	movs	r2, #2
 801e756:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801e75a:	2300      	movs	r3, #0
 801e75c:	9303      	str	r3, [sp, #12]
 801e75e:	69fb      	ldr	r3, [r7, #28]
 801e760:	9302      	str	r3, [sp, #8]
 801e762:	f107 0318 	add.w	r3, r7, #24
 801e766:	9301      	str	r3, [sp, #4]
 801e768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e76a:	9300      	str	r3, [sp, #0]
 801e76c:	683b      	ldr	r3, [r7, #0]
 801e76e:	687a      	ldr	r2, [r7, #4]
 801e770:	68b9      	ldr	r1, [r7, #8]
 801e772:	68f8      	ldr	r0, [r7, #12]
 801e774:	f000 f850 	bl	801e818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801e778:	69f8      	ldr	r0, [r7, #28]
 801e77a:	f000 f8d7 	bl	801e92c <prvAddNewTaskToReadyList>
 801e77e:	e001      	b.n	801e784 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 801e780:	2300      	movs	r3, #0
 801e782:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801e784:	69bb      	ldr	r3, [r7, #24]
	}
 801e786:	4618      	mov	r0, r3
 801e788:	3720      	adds	r7, #32
 801e78a:	46bd      	mov	sp, r7
 801e78c:	bd80      	pop	{r7, pc}

0801e78e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801e78e:	b580      	push	{r7, lr}
 801e790:	b08c      	sub	sp, #48	; 0x30
 801e792:	af04      	add	r7, sp, #16
 801e794:	60f8      	str	r0, [r7, #12]
 801e796:	60b9      	str	r1, [r7, #8]
 801e798:	603b      	str	r3, [r7, #0]
 801e79a:	4613      	mov	r3, r2
 801e79c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801e79e:	88fb      	ldrh	r3, [r7, #6]
 801e7a0:	009b      	lsls	r3, r3, #2
 801e7a2:	4618      	mov	r0, r3
 801e7a4:	f001 fc28 	bl	801fff8 <pvPortMalloc>
 801e7a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801e7aa:	697b      	ldr	r3, [r7, #20]
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	d00e      	beq.n	801e7ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801e7b0:	205c      	movs	r0, #92	; 0x5c
 801e7b2:	f001 fc21 	bl	801fff8 <pvPortMalloc>
 801e7b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801e7b8:	69fb      	ldr	r3, [r7, #28]
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	d003      	beq.n	801e7c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801e7be:	69fb      	ldr	r3, [r7, #28]
 801e7c0:	697a      	ldr	r2, [r7, #20]
 801e7c2:	631a      	str	r2, [r3, #48]	; 0x30
 801e7c4:	e005      	b.n	801e7d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801e7c6:	6978      	ldr	r0, [r7, #20]
 801e7c8:	f001 fcca 	bl	8020160 <vPortFree>
 801e7cc:	e001      	b.n	801e7d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801e7ce:	2300      	movs	r3, #0
 801e7d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801e7d2:	69fb      	ldr	r3, [r7, #28]
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	d017      	beq.n	801e808 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801e7d8:	69fb      	ldr	r3, [r7, #28]
 801e7da:	2200      	movs	r2, #0
 801e7dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801e7e0:	88fa      	ldrh	r2, [r7, #6]
 801e7e2:	2300      	movs	r3, #0
 801e7e4:	9303      	str	r3, [sp, #12]
 801e7e6:	69fb      	ldr	r3, [r7, #28]
 801e7e8:	9302      	str	r3, [sp, #8]
 801e7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e7ec:	9301      	str	r3, [sp, #4]
 801e7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7f0:	9300      	str	r3, [sp, #0]
 801e7f2:	683b      	ldr	r3, [r7, #0]
 801e7f4:	68b9      	ldr	r1, [r7, #8]
 801e7f6:	68f8      	ldr	r0, [r7, #12]
 801e7f8:	f000 f80e 	bl	801e818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801e7fc:	69f8      	ldr	r0, [r7, #28]
 801e7fe:	f000 f895 	bl	801e92c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801e802:	2301      	movs	r3, #1
 801e804:	61bb      	str	r3, [r7, #24]
 801e806:	e002      	b.n	801e80e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801e808:	f04f 33ff 	mov.w	r3, #4294967295
 801e80c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801e80e:	69bb      	ldr	r3, [r7, #24]
	}
 801e810:	4618      	mov	r0, r3
 801e812:	3720      	adds	r7, #32
 801e814:	46bd      	mov	sp, r7
 801e816:	bd80      	pop	{r7, pc}

0801e818 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801e818:	b580      	push	{r7, lr}
 801e81a:	b086      	sub	sp, #24
 801e81c:	af00      	add	r7, sp, #0
 801e81e:	60f8      	str	r0, [r7, #12]
 801e820:	60b9      	str	r1, [r7, #8]
 801e822:	607a      	str	r2, [r7, #4]
 801e824:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801e826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e828:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801e82a:	687b      	ldr	r3, [r7, #4]
 801e82c:	009b      	lsls	r3, r3, #2
 801e82e:	461a      	mov	r2, r3
 801e830:	21a5      	movs	r1, #165	; 0xa5
 801e832:	f003 fd92 	bl	802235a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801e836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801e840:	3b01      	subs	r3, #1
 801e842:	009b      	lsls	r3, r3, #2
 801e844:	4413      	add	r3, r2
 801e846:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801e848:	693b      	ldr	r3, [r7, #16]
 801e84a:	f023 0307 	bic.w	r3, r3, #7
 801e84e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801e850:	693b      	ldr	r3, [r7, #16]
 801e852:	f003 0307 	and.w	r3, r3, #7
 801e856:	2b00      	cmp	r3, #0
 801e858:	d002      	beq.n	801e860 <prvInitialiseNewTask+0x48>
 801e85a:	f001 fb6d 	bl	801ff38 <ulSetInterruptMask>
 801e85e:	e7fe      	b.n	801e85e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801e860:	68bb      	ldr	r3, [r7, #8]
 801e862:	2b00      	cmp	r3, #0
 801e864:	d01f      	beq.n	801e8a6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801e866:	2300      	movs	r3, #0
 801e868:	617b      	str	r3, [r7, #20]
 801e86a:	e012      	b.n	801e892 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e86c:	68ba      	ldr	r2, [r7, #8]
 801e86e:	697b      	ldr	r3, [r7, #20]
 801e870:	4413      	add	r3, r2
 801e872:	7819      	ldrb	r1, [r3, #0]
 801e874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e876:	697b      	ldr	r3, [r7, #20]
 801e878:	4413      	add	r3, r2
 801e87a:	3334      	adds	r3, #52	; 0x34
 801e87c:	460a      	mov	r2, r1
 801e87e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801e880:	68ba      	ldr	r2, [r7, #8]
 801e882:	697b      	ldr	r3, [r7, #20]
 801e884:	4413      	add	r3, r2
 801e886:	781b      	ldrb	r3, [r3, #0]
 801e888:	2b00      	cmp	r3, #0
 801e88a:	d006      	beq.n	801e89a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801e88c:	697b      	ldr	r3, [r7, #20]
 801e88e:	3301      	adds	r3, #1
 801e890:	617b      	str	r3, [r7, #20]
 801e892:	697b      	ldr	r3, [r7, #20]
 801e894:	2b0f      	cmp	r3, #15
 801e896:	d9e9      	bls.n	801e86c <prvInitialiseNewTask+0x54>
 801e898:	e000      	b.n	801e89c <prvInitialiseNewTask+0x84>
			{
				break;
 801e89a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801e89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e89e:	2200      	movs	r2, #0
 801e8a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801e8a4:	e003      	b.n	801e8ae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801e8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8a8:	2200      	movs	r2, #0
 801e8aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801e8ae:	6a3b      	ldr	r3, [r7, #32]
 801e8b0:	2b37      	cmp	r3, #55	; 0x37
 801e8b2:	d901      	bls.n	801e8b8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801e8b4:	2337      	movs	r3, #55	; 0x37
 801e8b6:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801e8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8ba:	6a3a      	ldr	r2, [r7, #32]
 801e8bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801e8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8c0:	6a3a      	ldr	r2, [r7, #32]
 801e8c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801e8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8c6:	2200      	movs	r2, #0
 801e8c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801e8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8cc:	3304      	adds	r3, #4
 801e8ce:	4618      	mov	r0, r3
 801e8d0:	f7ff fa58 	bl	801dd84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801e8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8d6:	3318      	adds	r3, #24
 801e8d8:	4618      	mov	r0, r3
 801e8da:	f7ff fa53 	bl	801dd84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801e8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e8e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e8e4:	6a3b      	ldr	r3, [r7, #32]
 801e8e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801e8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801e8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e8f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801e8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8f6:	2200      	movs	r2, #0
 801e8f8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801e8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8fc:	2200      	movs	r2, #0
 801e8fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 801e902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e904:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801e906:	683b      	ldr	r3, [r7, #0]
 801e908:	68fa      	ldr	r2, [r7, #12]
 801e90a:	6938      	ldr	r0, [r7, #16]
 801e90c:	f001 fa3c 	bl	801fd88 <pxPortInitialiseStack>
 801e910:	4602      	mov	r2, r0
 801e912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e914:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801e916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e918:	2b00      	cmp	r3, #0
 801e91a:	d002      	beq.n	801e922 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801e91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e91e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801e922:	bf00      	nop
 801e924:	3718      	adds	r7, #24
 801e926:	46bd      	mov	sp, r7
 801e928:	bd80      	pop	{r7, pc}
	...

0801e92c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801e92c:	b580      	push	{r7, lr}
 801e92e:	b082      	sub	sp, #8
 801e930:	af00      	add	r7, sp, #0
 801e932:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801e934:	f001 f9cc 	bl	801fcd0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801e938:	4b2a      	ldr	r3, [pc, #168]	; (801e9e4 <prvAddNewTaskToReadyList+0xb8>)
 801e93a:	681b      	ldr	r3, [r3, #0]
 801e93c:	3301      	adds	r3, #1
 801e93e:	4a29      	ldr	r2, [pc, #164]	; (801e9e4 <prvAddNewTaskToReadyList+0xb8>)
 801e940:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801e942:	4b29      	ldr	r3, [pc, #164]	; (801e9e8 <prvAddNewTaskToReadyList+0xbc>)
 801e944:	681b      	ldr	r3, [r3, #0]
 801e946:	2b00      	cmp	r3, #0
 801e948:	d109      	bne.n	801e95e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801e94a:	4a27      	ldr	r2, [pc, #156]	; (801e9e8 <prvAddNewTaskToReadyList+0xbc>)
 801e94c:	687b      	ldr	r3, [r7, #4]
 801e94e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801e950:	4b24      	ldr	r3, [pc, #144]	; (801e9e4 <prvAddNewTaskToReadyList+0xb8>)
 801e952:	681b      	ldr	r3, [r3, #0]
 801e954:	2b01      	cmp	r3, #1
 801e956:	d110      	bne.n	801e97a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801e958:	f000 fcd6 	bl	801f308 <prvInitialiseTaskLists>
 801e95c:	e00d      	b.n	801e97a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801e95e:	4b23      	ldr	r3, [pc, #140]	; (801e9ec <prvAddNewTaskToReadyList+0xc0>)
 801e960:	681b      	ldr	r3, [r3, #0]
 801e962:	2b00      	cmp	r3, #0
 801e964:	d109      	bne.n	801e97a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801e966:	4b20      	ldr	r3, [pc, #128]	; (801e9e8 <prvAddNewTaskToReadyList+0xbc>)
 801e968:	681b      	ldr	r3, [r3, #0]
 801e96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e96c:	687b      	ldr	r3, [r7, #4]
 801e96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e970:	429a      	cmp	r2, r3
 801e972:	d802      	bhi.n	801e97a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801e974:	4a1c      	ldr	r2, [pc, #112]	; (801e9e8 <prvAddNewTaskToReadyList+0xbc>)
 801e976:	687b      	ldr	r3, [r7, #4]
 801e978:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801e97a:	4b1d      	ldr	r3, [pc, #116]	; (801e9f0 <prvAddNewTaskToReadyList+0xc4>)
 801e97c:	681b      	ldr	r3, [r3, #0]
 801e97e:	3301      	adds	r3, #1
 801e980:	4a1b      	ldr	r2, [pc, #108]	; (801e9f0 <prvAddNewTaskToReadyList+0xc4>)
 801e982:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801e984:	4b1a      	ldr	r3, [pc, #104]	; (801e9f0 <prvAddNewTaskToReadyList+0xc4>)
 801e986:	681a      	ldr	r2, [r3, #0]
 801e988:	687b      	ldr	r3, [r7, #4]
 801e98a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801e98c:	687b      	ldr	r3, [r7, #4]
 801e98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e990:	4b18      	ldr	r3, [pc, #96]	; (801e9f4 <prvAddNewTaskToReadyList+0xc8>)
 801e992:	681b      	ldr	r3, [r3, #0]
 801e994:	429a      	cmp	r2, r3
 801e996:	d903      	bls.n	801e9a0 <prvAddNewTaskToReadyList+0x74>
 801e998:	687b      	ldr	r3, [r7, #4]
 801e99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e99c:	4a15      	ldr	r2, [pc, #84]	; (801e9f4 <prvAddNewTaskToReadyList+0xc8>)
 801e99e:	6013      	str	r3, [r2, #0]
 801e9a0:	687b      	ldr	r3, [r7, #4]
 801e9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e9a4:	4613      	mov	r3, r2
 801e9a6:	009b      	lsls	r3, r3, #2
 801e9a8:	4413      	add	r3, r2
 801e9aa:	009b      	lsls	r3, r3, #2
 801e9ac:	4a12      	ldr	r2, [pc, #72]	; (801e9f8 <prvAddNewTaskToReadyList+0xcc>)
 801e9ae:	441a      	add	r2, r3
 801e9b0:	687b      	ldr	r3, [r7, #4]
 801e9b2:	3304      	adds	r3, #4
 801e9b4:	4619      	mov	r1, r3
 801e9b6:	4610      	mov	r0, r2
 801e9b8:	f7ff f9f1 	bl	801dd9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801e9bc:	f001 f99a 	bl	801fcf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801e9c0:	4b0a      	ldr	r3, [pc, #40]	; (801e9ec <prvAddNewTaskToReadyList+0xc0>)
 801e9c2:	681b      	ldr	r3, [r3, #0]
 801e9c4:	2b00      	cmp	r3, #0
 801e9c6:	d008      	beq.n	801e9da <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801e9c8:	4b07      	ldr	r3, [pc, #28]	; (801e9e8 <prvAddNewTaskToReadyList+0xbc>)
 801e9ca:	681b      	ldr	r3, [r3, #0]
 801e9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e9ce:	687b      	ldr	r3, [r7, #4]
 801e9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e9d2:	429a      	cmp	r2, r3
 801e9d4:	d201      	bcs.n	801e9da <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801e9d6:	f001 f969 	bl	801fcac <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801e9da:	bf00      	nop
 801e9dc:	3708      	adds	r7, #8
 801e9de:	46bd      	mov	sp, r7
 801e9e0:	bd80      	pop	{r7, pc}
 801e9e2:	bf00      	nop
 801e9e4:	20001b9c 	.word	0x20001b9c
 801e9e8:	200016c8 	.word	0x200016c8
 801e9ec:	20001ba8 	.word	0x20001ba8
 801e9f0:	20001bb8 	.word	0x20001bb8
 801e9f4:	20001ba4 	.word	0x20001ba4
 801e9f8:	200016cc 	.word	0x200016cc

0801e9fc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801e9fc:	b580      	push	{r7, lr}
 801e9fe:	b086      	sub	sp, #24
 801ea00:	af00      	add	r7, sp, #0
 801ea02:	6078      	str	r0, [r7, #4]
 801ea04:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801ea06:	2300      	movs	r3, #0
 801ea08:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 801ea0a:	687b      	ldr	r3, [r7, #4]
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	d102      	bne.n	801ea16 <vTaskDelayUntil+0x1a>
 801ea10:	f001 fa92 	bl	801ff38 <ulSetInterruptMask>
 801ea14:	e7fe      	b.n	801ea14 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 801ea16:	683b      	ldr	r3, [r7, #0]
 801ea18:	2b00      	cmp	r3, #0
 801ea1a:	d102      	bne.n	801ea22 <vTaskDelayUntil+0x26>
 801ea1c:	f001 fa8c 	bl	801ff38 <ulSetInterruptMask>
 801ea20:	e7fe      	b.n	801ea20 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
 801ea22:	4b23      	ldr	r3, [pc, #140]	; (801eab0 <vTaskDelayUntil+0xb4>)
 801ea24:	681b      	ldr	r3, [r3, #0]
 801ea26:	2b00      	cmp	r3, #0
 801ea28:	d002      	beq.n	801ea30 <vTaskDelayUntil+0x34>
 801ea2a:	f001 fa85 	bl	801ff38 <ulSetInterruptMask>
 801ea2e:	e7fe      	b.n	801ea2e <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
 801ea30:	f000 f998 	bl	801ed64 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801ea34:	4b1f      	ldr	r3, [pc, #124]	; (801eab4 <vTaskDelayUntil+0xb8>)
 801ea36:	681b      	ldr	r3, [r3, #0]
 801ea38:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801ea3a:	687b      	ldr	r3, [r7, #4]
 801ea3c:	681b      	ldr	r3, [r3, #0]
 801ea3e:	683a      	ldr	r2, [r7, #0]
 801ea40:	4413      	add	r3, r2
 801ea42:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 801ea44:	687b      	ldr	r3, [r7, #4]
 801ea46:	681b      	ldr	r3, [r3, #0]
 801ea48:	693a      	ldr	r2, [r7, #16]
 801ea4a:	429a      	cmp	r2, r3
 801ea4c:	d20b      	bcs.n	801ea66 <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801ea4e:	687b      	ldr	r3, [r7, #4]
 801ea50:	681b      	ldr	r3, [r3, #0]
 801ea52:	68fa      	ldr	r2, [r7, #12]
 801ea54:	429a      	cmp	r2, r3
 801ea56:	d211      	bcs.n	801ea7c <vTaskDelayUntil+0x80>
 801ea58:	68fa      	ldr	r2, [r7, #12]
 801ea5a:	693b      	ldr	r3, [r7, #16]
 801ea5c:	429a      	cmp	r2, r3
 801ea5e:	d90d      	bls.n	801ea7c <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 801ea60:	2301      	movs	r3, #1
 801ea62:	617b      	str	r3, [r7, #20]
 801ea64:	e00a      	b.n	801ea7c <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801ea66:	687b      	ldr	r3, [r7, #4]
 801ea68:	681b      	ldr	r3, [r3, #0]
 801ea6a:	68fa      	ldr	r2, [r7, #12]
 801ea6c:	429a      	cmp	r2, r3
 801ea6e:	d303      	bcc.n	801ea78 <vTaskDelayUntil+0x7c>
 801ea70:	68fa      	ldr	r2, [r7, #12]
 801ea72:	693b      	ldr	r3, [r7, #16]
 801ea74:	429a      	cmp	r2, r3
 801ea76:	d901      	bls.n	801ea7c <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 801ea78:	2301      	movs	r3, #1
 801ea7a:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801ea7c:	687b      	ldr	r3, [r7, #4]
 801ea7e:	68fa      	ldr	r2, [r7, #12]
 801ea80:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801ea82:	697b      	ldr	r3, [r7, #20]
 801ea84:	2b00      	cmp	r3, #0
 801ea86:	d006      	beq.n	801ea96 <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801ea88:	68fa      	ldr	r2, [r7, #12]
 801ea8a:	693b      	ldr	r3, [r7, #16]
 801ea8c:	1ad3      	subs	r3, r2, r3
 801ea8e:	2100      	movs	r1, #0
 801ea90:	4618      	mov	r0, r3
 801ea92:	f000 fd6b 	bl	801f56c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801ea96:	f000 f973 	bl	801ed80 <xTaskResumeAll>
 801ea9a:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801ea9c:	68bb      	ldr	r3, [r7, #8]
 801ea9e:	2b00      	cmp	r3, #0
 801eaa0:	d101      	bne.n	801eaa6 <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 801eaa2:	f001 f903 	bl	801fcac <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801eaa6:	bf00      	nop
 801eaa8:	3718      	adds	r7, #24
 801eaaa:	46bd      	mov	sp, r7
 801eaac:	bd80      	pop	{r7, pc}
 801eaae:	bf00      	nop
 801eab0:	20001bc4 	.word	0x20001bc4
 801eab4:	20001ba0 	.word	0x20001ba0

0801eab8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801eab8:	b580      	push	{r7, lr}
 801eaba:	b084      	sub	sp, #16
 801eabc:	af00      	add	r7, sp, #0
 801eabe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801eac0:	2300      	movs	r3, #0
 801eac2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	d00f      	beq.n	801eaea <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801eaca:	4b0c      	ldr	r3, [pc, #48]	; (801eafc <vTaskDelay+0x44>)
 801eacc:	681b      	ldr	r3, [r3, #0]
 801eace:	2b00      	cmp	r3, #0
 801ead0:	d002      	beq.n	801ead8 <vTaskDelay+0x20>
 801ead2:	f001 fa31 	bl	801ff38 <ulSetInterruptMask>
 801ead6:	e7fe      	b.n	801ead6 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 801ead8:	f000 f944 	bl	801ed64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801eadc:	2100      	movs	r1, #0
 801eade:	6878      	ldr	r0, [r7, #4]
 801eae0:	f000 fd44 	bl	801f56c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801eae4:	f000 f94c 	bl	801ed80 <xTaskResumeAll>
 801eae8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801eaea:	68fb      	ldr	r3, [r7, #12]
 801eaec:	2b00      	cmp	r3, #0
 801eaee:	d101      	bne.n	801eaf4 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 801eaf0:	f001 f8dc 	bl	801fcac <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801eaf4:	bf00      	nop
 801eaf6:	3710      	adds	r7, #16
 801eaf8:	46bd      	mov	sp, r7
 801eafa:	bd80      	pop	{r7, pc}
 801eafc:	20001bc4 	.word	0x20001bc4

0801eb00 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801eb00:	b580      	push	{r7, lr}
 801eb02:	b084      	sub	sp, #16
 801eb04:	af00      	add	r7, sp, #0
 801eb06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801eb08:	f001 f8e2 	bl	801fcd0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801eb0c:	687b      	ldr	r3, [r7, #4]
 801eb0e:	2b00      	cmp	r3, #0
 801eb10:	d102      	bne.n	801eb18 <vTaskSuspend+0x18>
 801eb12:	4b29      	ldr	r3, [pc, #164]	; (801ebb8 <vTaskSuspend+0xb8>)
 801eb14:	681b      	ldr	r3, [r3, #0]
 801eb16:	e000      	b.n	801eb1a <vTaskSuspend+0x1a>
 801eb18:	687b      	ldr	r3, [r7, #4]
 801eb1a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801eb1c:	68fb      	ldr	r3, [r7, #12]
 801eb1e:	3304      	adds	r3, #4
 801eb20:	4618      	mov	r0, r3
 801eb22:	f7ff f999 	bl	801de58 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801eb26:	68fb      	ldr	r3, [r7, #12]
 801eb28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eb2a:	2b00      	cmp	r3, #0
 801eb2c:	d004      	beq.n	801eb38 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801eb2e:	68fb      	ldr	r3, [r7, #12]
 801eb30:	3318      	adds	r3, #24
 801eb32:	4618      	mov	r0, r3
 801eb34:	f7ff f990 	bl	801de58 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801eb38:	68fb      	ldr	r3, [r7, #12]
 801eb3a:	3304      	adds	r3, #4
 801eb3c:	4619      	mov	r1, r3
 801eb3e:	481f      	ldr	r0, [pc, #124]	; (801ebbc <vTaskSuspend+0xbc>)
 801eb40:	f7ff f92d 	bl	801dd9e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801eb44:	68fb      	ldr	r3, [r7, #12]
 801eb46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801eb4a:	b2db      	uxtb	r3, r3
 801eb4c:	2b01      	cmp	r3, #1
 801eb4e:	d103      	bne.n	801eb58 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801eb50:	68fb      	ldr	r3, [r7, #12]
 801eb52:	2200      	movs	r2, #0
 801eb54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801eb58:	f001 f8cc 	bl	801fcf4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801eb5c:	4b18      	ldr	r3, [pc, #96]	; (801ebc0 <vTaskSuspend+0xc0>)
 801eb5e:	681b      	ldr	r3, [r3, #0]
 801eb60:	2b00      	cmp	r3, #0
 801eb62:	d005      	beq.n	801eb70 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801eb64:	f001 f8b4 	bl	801fcd0 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801eb68:	f000 fc64 	bl	801f434 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801eb6c:	f001 f8c2 	bl	801fcf4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801eb70:	4b11      	ldr	r3, [pc, #68]	; (801ebb8 <vTaskSuspend+0xb8>)
 801eb72:	681b      	ldr	r3, [r3, #0]
 801eb74:	68fa      	ldr	r2, [r7, #12]
 801eb76:	429a      	cmp	r2, r3
 801eb78:	d119      	bne.n	801ebae <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 801eb7a:	4b11      	ldr	r3, [pc, #68]	; (801ebc0 <vTaskSuspend+0xc0>)
 801eb7c:	681b      	ldr	r3, [r3, #0]
 801eb7e:	2b00      	cmp	r3, #0
 801eb80:	d009      	beq.n	801eb96 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801eb82:	4b10      	ldr	r3, [pc, #64]	; (801ebc4 <vTaskSuspend+0xc4>)
 801eb84:	681b      	ldr	r3, [r3, #0]
 801eb86:	2b00      	cmp	r3, #0
 801eb88:	d002      	beq.n	801eb90 <vTaskSuspend+0x90>
 801eb8a:	f001 f9d5 	bl	801ff38 <ulSetInterruptMask>
 801eb8e:	e7fe      	b.n	801eb8e <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 801eb90:	f001 f88c 	bl	801fcac <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801eb94:	e00b      	b.n	801ebae <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801eb96:	4b09      	ldr	r3, [pc, #36]	; (801ebbc <vTaskSuspend+0xbc>)
 801eb98:	681a      	ldr	r2, [r3, #0]
 801eb9a:	4b0b      	ldr	r3, [pc, #44]	; (801ebc8 <vTaskSuspend+0xc8>)
 801eb9c:	681b      	ldr	r3, [r3, #0]
 801eb9e:	429a      	cmp	r2, r3
 801eba0:	d103      	bne.n	801ebaa <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 801eba2:	4b05      	ldr	r3, [pc, #20]	; (801ebb8 <vTaskSuspend+0xb8>)
 801eba4:	2200      	movs	r2, #0
 801eba6:	601a      	str	r2, [r3, #0]
	}
 801eba8:	e001      	b.n	801ebae <vTaskSuspend+0xae>
					vTaskSwitchContext();
 801ebaa:	f000 fa39 	bl	801f020 <vTaskSwitchContext>
	}
 801ebae:	bf00      	nop
 801ebb0:	3710      	adds	r7, #16
 801ebb2:	46bd      	mov	sp, r7
 801ebb4:	bd80      	pop	{r7, pc}
 801ebb6:	bf00      	nop
 801ebb8:	200016c8 	.word	0x200016c8
 801ebbc:	20001b88 	.word	0x20001b88
 801ebc0:	20001ba8 	.word	0x20001ba8
 801ebc4:	20001bc4 	.word	0x20001bc4
 801ebc8:	20001b9c 	.word	0x20001b9c

0801ebcc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801ebcc:	b580      	push	{r7, lr}
 801ebce:	b084      	sub	sp, #16
 801ebd0:	af00      	add	r7, sp, #0
 801ebd2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801ebd4:	2300      	movs	r3, #0
 801ebd6:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	2b00      	cmp	r3, #0
 801ebe0:	d102      	bne.n	801ebe8 <prvTaskIsTaskSuspended+0x1c>
 801ebe2:	f001 f9a9 	bl	801ff38 <ulSetInterruptMask>
 801ebe6:	e7fe      	b.n	801ebe6 <prvTaskIsTaskSuspended+0x1a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801ebe8:	68bb      	ldr	r3, [r7, #8]
 801ebea:	695b      	ldr	r3, [r3, #20]
 801ebec:	4a09      	ldr	r2, [pc, #36]	; (801ec14 <prvTaskIsTaskSuspended+0x48>)
 801ebee:	4293      	cmp	r3, r2
 801ebf0:	d10a      	bne.n	801ec08 <prvTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801ebf2:	68bb      	ldr	r3, [r7, #8]
 801ebf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ebf6:	4a08      	ldr	r2, [pc, #32]	; (801ec18 <prvTaskIsTaskSuspended+0x4c>)
 801ebf8:	4293      	cmp	r3, r2
 801ebfa:	d005      	beq.n	801ec08 <prvTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801ebfc:	68bb      	ldr	r3, [r7, #8]
 801ebfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ec00:	2b00      	cmp	r3, #0
 801ec02:	d101      	bne.n	801ec08 <prvTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
 801ec04:	2301      	movs	r3, #1
 801ec06:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801ec08:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801ec0a:	4618      	mov	r0, r3
 801ec0c:	3710      	adds	r7, #16
 801ec0e:	46bd      	mov	sp, r7
 801ec10:	bd80      	pop	{r7, pc}
 801ec12:	bf00      	nop
 801ec14:	20001b88 	.word	0x20001b88
 801ec18:	20001b5c 	.word	0x20001b5c

0801ec1c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801ec1c:	b580      	push	{r7, lr}
 801ec1e:	b084      	sub	sp, #16
 801ec20:	af00      	add	r7, sp, #0
 801ec22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801ec24:	687b      	ldr	r3, [r7, #4]
 801ec26:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801ec28:	687b      	ldr	r3, [r7, #4]
 801ec2a:	2b00      	cmp	r3, #0
 801ec2c:	d102      	bne.n	801ec34 <vTaskResume+0x18>
 801ec2e:	f001 f983 	bl	801ff38 <ulSetInterruptMask>
 801ec32:	e7fe      	b.n	801ec32 <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801ec34:	4b1d      	ldr	r3, [pc, #116]	; (801ecac <vTaskResume+0x90>)
 801ec36:	681b      	ldr	r3, [r3, #0]
 801ec38:	68fa      	ldr	r2, [r7, #12]
 801ec3a:	429a      	cmp	r2, r3
 801ec3c:	d032      	beq.n	801eca4 <vTaskResume+0x88>
 801ec3e:	68fb      	ldr	r3, [r7, #12]
 801ec40:	2b00      	cmp	r3, #0
 801ec42:	d02f      	beq.n	801eca4 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 801ec44:	f001 f844 	bl	801fcd0 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801ec48:	68f8      	ldr	r0, [r7, #12]
 801ec4a:	f7ff ffbf 	bl	801ebcc <prvTaskIsTaskSuspended>
 801ec4e:	4603      	mov	r3, r0
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	d025      	beq.n	801eca0 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801ec54:	68fb      	ldr	r3, [r7, #12]
 801ec56:	3304      	adds	r3, #4
 801ec58:	4618      	mov	r0, r3
 801ec5a:	f7ff f8fd 	bl	801de58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801ec5e:	68fb      	ldr	r3, [r7, #12]
 801ec60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ec62:	4b13      	ldr	r3, [pc, #76]	; (801ecb0 <vTaskResume+0x94>)
 801ec64:	681b      	ldr	r3, [r3, #0]
 801ec66:	429a      	cmp	r2, r3
 801ec68:	d903      	bls.n	801ec72 <vTaskResume+0x56>
 801ec6a:	68fb      	ldr	r3, [r7, #12]
 801ec6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec6e:	4a10      	ldr	r2, [pc, #64]	; (801ecb0 <vTaskResume+0x94>)
 801ec70:	6013      	str	r3, [r2, #0]
 801ec72:	68fb      	ldr	r3, [r7, #12]
 801ec74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ec76:	4613      	mov	r3, r2
 801ec78:	009b      	lsls	r3, r3, #2
 801ec7a:	4413      	add	r3, r2
 801ec7c:	009b      	lsls	r3, r3, #2
 801ec7e:	4a0d      	ldr	r2, [pc, #52]	; (801ecb4 <vTaskResume+0x98>)
 801ec80:	441a      	add	r2, r3
 801ec82:	68fb      	ldr	r3, [r7, #12]
 801ec84:	3304      	adds	r3, #4
 801ec86:	4619      	mov	r1, r3
 801ec88:	4610      	mov	r0, r2
 801ec8a:	f7ff f888 	bl	801dd9e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ec8e:	68fb      	ldr	r3, [r7, #12]
 801ec90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ec92:	4b06      	ldr	r3, [pc, #24]	; (801ecac <vTaskResume+0x90>)
 801ec94:	681b      	ldr	r3, [r3, #0]
 801ec96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec98:	429a      	cmp	r2, r3
 801ec9a:	d301      	bcc.n	801eca0 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801ec9c:	f001 f806 	bl	801fcac <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801eca0:	f001 f828 	bl	801fcf4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801eca4:	bf00      	nop
 801eca6:	3710      	adds	r7, #16
 801eca8:	46bd      	mov	sp, r7
 801ecaa:	bd80      	pop	{r7, pc}
 801ecac:	200016c8 	.word	0x200016c8
 801ecb0:	20001ba4 	.word	0x20001ba4
 801ecb4:	200016cc 	.word	0x200016cc

0801ecb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801ecb8:	b580      	push	{r7, lr}
 801ecba:	b088      	sub	sp, #32
 801ecbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801ecbe:	2300      	movs	r3, #0
 801ecc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801ecc2:	2300      	movs	r3, #0
 801ecc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801ecc6:	463a      	mov	r2, r7
 801ecc8:	1d39      	adds	r1, r7, #4
 801ecca:	f107 0308 	add.w	r3, r7, #8
 801ecce:	4618      	mov	r0, r3
 801ecd0:	f7ff f804 	bl	801dcdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801ecd4:	6839      	ldr	r1, [r7, #0]
 801ecd6:	687b      	ldr	r3, [r7, #4]
 801ecd8:	68ba      	ldr	r2, [r7, #8]
 801ecda:	9202      	str	r2, [sp, #8]
 801ecdc:	9301      	str	r3, [sp, #4]
 801ecde:	2300      	movs	r3, #0
 801ece0:	9300      	str	r3, [sp, #0]
 801ece2:	2300      	movs	r3, #0
 801ece4:	460a      	mov	r2, r1
 801ece6:	4919      	ldr	r1, [pc, #100]	; (801ed4c <vTaskStartScheduler+0x94>)
 801ece8:	4819      	ldr	r0, [pc, #100]	; (801ed50 <vTaskStartScheduler+0x98>)
 801ecea:	f7ff fd0b 	bl	801e704 <xTaskCreateStatic>
 801ecee:	4603      	mov	r3, r0
 801ecf0:	4a18      	ldr	r2, [pc, #96]	; (801ed54 <vTaskStartScheduler+0x9c>)
 801ecf2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801ecf4:	4b17      	ldr	r3, [pc, #92]	; (801ed54 <vTaskStartScheduler+0x9c>)
 801ecf6:	681b      	ldr	r3, [r3, #0]
 801ecf8:	2b00      	cmp	r3, #0
 801ecfa:	d002      	beq.n	801ed02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801ecfc:	2301      	movs	r3, #1
 801ecfe:	60fb      	str	r3, [r7, #12]
 801ed00:	e001      	b.n	801ed06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801ed02:	2300      	movs	r3, #0
 801ed04:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801ed06:	68fb      	ldr	r3, [r7, #12]
 801ed08:	2b01      	cmp	r3, #1
 801ed0a:	d102      	bne.n	801ed12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801ed0c:	f000 fc82 	bl	801f614 <xTimerCreateTimerTask>
 801ed10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801ed12:	68fb      	ldr	r3, [r7, #12]
 801ed14:	2b01      	cmp	r3, #1
 801ed16:	d10e      	bne.n	801ed36 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 801ed18:	f001 f90e 	bl	801ff38 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801ed1c:	4b0e      	ldr	r3, [pc, #56]	; (801ed58 <vTaskStartScheduler+0xa0>)
 801ed1e:	f04f 32ff 	mov.w	r2, #4294967295
 801ed22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801ed24:	4b0d      	ldr	r3, [pc, #52]	; (801ed5c <vTaskStartScheduler+0xa4>)
 801ed26:	2201      	movs	r2, #1
 801ed28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801ed2a:	4b0d      	ldr	r3, [pc, #52]	; (801ed60 <vTaskStartScheduler+0xa8>)
 801ed2c:	2200      	movs	r2, #0
 801ed2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801ed30:	f001 f8b4 	bl	801fe9c <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801ed34:	e006      	b.n	801ed44 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801ed36:	68fb      	ldr	r3, [r7, #12]
 801ed38:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ed3c:	d102      	bne.n	801ed44 <vTaskStartScheduler+0x8c>
 801ed3e:	f001 f8fb 	bl	801ff38 <ulSetInterruptMask>
 801ed42:	e7fe      	b.n	801ed42 <vTaskStartScheduler+0x8a>
}
 801ed44:	bf00      	nop
 801ed46:	3710      	adds	r7, #16
 801ed48:	46bd      	mov	sp, r7
 801ed4a:	bd80      	pop	{r7, pc}
 801ed4c:	08023f64 	.word	0x08023f64
 801ed50:	0801f2e9 	.word	0x0801f2e9
 801ed54:	20001bc0 	.word	0x20001bc0
 801ed58:	20001bbc 	.word	0x20001bbc
 801ed5c:	20001ba8 	.word	0x20001ba8
 801ed60:	20001ba0 	.word	0x20001ba0

0801ed64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801ed64:	b480      	push	{r7}
 801ed66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801ed68:	4b04      	ldr	r3, [pc, #16]	; (801ed7c <vTaskSuspendAll+0x18>)
 801ed6a:	681b      	ldr	r3, [r3, #0]
 801ed6c:	3301      	adds	r3, #1
 801ed6e:	4a03      	ldr	r2, [pc, #12]	; (801ed7c <vTaskSuspendAll+0x18>)
 801ed70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801ed72:	bf00      	nop
 801ed74:	46bd      	mov	sp, r7
 801ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed7a:	4770      	bx	lr
 801ed7c:	20001bc4 	.word	0x20001bc4

0801ed80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801ed80:	b580      	push	{r7, lr}
 801ed82:	b084      	sub	sp, #16
 801ed84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801ed86:	2300      	movs	r3, #0
 801ed88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801ed8a:	2300      	movs	r3, #0
 801ed8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801ed8e:	4b3b      	ldr	r3, [pc, #236]	; (801ee7c <xTaskResumeAll+0xfc>)
 801ed90:	681b      	ldr	r3, [r3, #0]
 801ed92:	2b00      	cmp	r3, #0
 801ed94:	d102      	bne.n	801ed9c <xTaskResumeAll+0x1c>
 801ed96:	f001 f8cf 	bl	801ff38 <ulSetInterruptMask>
 801ed9a:	e7fe      	b.n	801ed9a <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801ed9c:	f000 ff98 	bl	801fcd0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801eda0:	4b36      	ldr	r3, [pc, #216]	; (801ee7c <xTaskResumeAll+0xfc>)
 801eda2:	681b      	ldr	r3, [r3, #0]
 801eda4:	3b01      	subs	r3, #1
 801eda6:	4a35      	ldr	r2, [pc, #212]	; (801ee7c <xTaskResumeAll+0xfc>)
 801eda8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801edaa:	4b34      	ldr	r3, [pc, #208]	; (801ee7c <xTaskResumeAll+0xfc>)
 801edac:	681b      	ldr	r3, [r3, #0]
 801edae:	2b00      	cmp	r3, #0
 801edb0:	d15c      	bne.n	801ee6c <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801edb2:	4b33      	ldr	r3, [pc, #204]	; (801ee80 <xTaskResumeAll+0x100>)
 801edb4:	681b      	ldr	r3, [r3, #0]
 801edb6:	2b00      	cmp	r3, #0
 801edb8:	d058      	beq.n	801ee6c <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801edba:	e02f      	b.n	801ee1c <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801edbc:	4b31      	ldr	r3, [pc, #196]	; (801ee84 <xTaskResumeAll+0x104>)
 801edbe:	68db      	ldr	r3, [r3, #12]
 801edc0:	68db      	ldr	r3, [r3, #12]
 801edc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801edc4:	68fb      	ldr	r3, [r7, #12]
 801edc6:	3318      	adds	r3, #24
 801edc8:	4618      	mov	r0, r3
 801edca:	f7ff f845 	bl	801de58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801edce:	68fb      	ldr	r3, [r7, #12]
 801edd0:	3304      	adds	r3, #4
 801edd2:	4618      	mov	r0, r3
 801edd4:	f7ff f840 	bl	801de58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801edd8:	68fb      	ldr	r3, [r7, #12]
 801edda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801eddc:	4b2a      	ldr	r3, [pc, #168]	; (801ee88 <xTaskResumeAll+0x108>)
 801edde:	681b      	ldr	r3, [r3, #0]
 801ede0:	429a      	cmp	r2, r3
 801ede2:	d903      	bls.n	801edec <xTaskResumeAll+0x6c>
 801ede4:	68fb      	ldr	r3, [r7, #12]
 801ede6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ede8:	4a27      	ldr	r2, [pc, #156]	; (801ee88 <xTaskResumeAll+0x108>)
 801edea:	6013      	str	r3, [r2, #0]
 801edec:	68fb      	ldr	r3, [r7, #12]
 801edee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801edf0:	4613      	mov	r3, r2
 801edf2:	009b      	lsls	r3, r3, #2
 801edf4:	4413      	add	r3, r2
 801edf6:	009b      	lsls	r3, r3, #2
 801edf8:	4a24      	ldr	r2, [pc, #144]	; (801ee8c <xTaskResumeAll+0x10c>)
 801edfa:	441a      	add	r2, r3
 801edfc:	68fb      	ldr	r3, [r7, #12]
 801edfe:	3304      	adds	r3, #4
 801ee00:	4619      	mov	r1, r3
 801ee02:	4610      	mov	r0, r2
 801ee04:	f7fe ffcb 	bl	801dd9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ee08:	68fb      	ldr	r3, [r7, #12]
 801ee0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ee0c:	4b20      	ldr	r3, [pc, #128]	; (801ee90 <xTaskResumeAll+0x110>)
 801ee0e:	681b      	ldr	r3, [r3, #0]
 801ee10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ee12:	429a      	cmp	r2, r3
 801ee14:	d302      	bcc.n	801ee1c <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 801ee16:	4b1f      	ldr	r3, [pc, #124]	; (801ee94 <xTaskResumeAll+0x114>)
 801ee18:	2201      	movs	r2, #1
 801ee1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801ee1c:	4b19      	ldr	r3, [pc, #100]	; (801ee84 <xTaskResumeAll+0x104>)
 801ee1e:	681b      	ldr	r3, [r3, #0]
 801ee20:	2b00      	cmp	r3, #0
 801ee22:	d1cb      	bne.n	801edbc <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801ee24:	68fb      	ldr	r3, [r7, #12]
 801ee26:	2b00      	cmp	r3, #0
 801ee28:	d001      	beq.n	801ee2e <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801ee2a:	f000 fb03 	bl	801f434 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801ee2e:	4b1a      	ldr	r3, [pc, #104]	; (801ee98 <xTaskResumeAll+0x118>)
 801ee30:	681b      	ldr	r3, [r3, #0]
 801ee32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801ee34:	687b      	ldr	r3, [r7, #4]
 801ee36:	2b00      	cmp	r3, #0
 801ee38:	d010      	beq.n	801ee5c <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801ee3a:	f000 f83f 	bl	801eebc <xTaskIncrementTick>
 801ee3e:	4603      	mov	r3, r0
 801ee40:	2b00      	cmp	r3, #0
 801ee42:	d002      	beq.n	801ee4a <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 801ee44:	4b13      	ldr	r3, [pc, #76]	; (801ee94 <xTaskResumeAll+0x114>)
 801ee46:	2201      	movs	r2, #1
 801ee48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	3b01      	subs	r3, #1
 801ee4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801ee50:	687b      	ldr	r3, [r7, #4]
 801ee52:	2b00      	cmp	r3, #0
 801ee54:	d1f1      	bne.n	801ee3a <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 801ee56:	4b10      	ldr	r3, [pc, #64]	; (801ee98 <xTaskResumeAll+0x118>)
 801ee58:	2200      	movs	r2, #0
 801ee5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801ee5c:	4b0d      	ldr	r3, [pc, #52]	; (801ee94 <xTaskResumeAll+0x114>)
 801ee5e:	681b      	ldr	r3, [r3, #0]
 801ee60:	2b00      	cmp	r3, #0
 801ee62:	d003      	beq.n	801ee6c <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801ee64:	2301      	movs	r3, #1
 801ee66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801ee68:	f000 ff20 	bl	801fcac <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801ee6c:	f000 ff42 	bl	801fcf4 <vPortExitCritical>

	return xAlreadyYielded;
 801ee70:	68bb      	ldr	r3, [r7, #8]
}
 801ee72:	4618      	mov	r0, r3
 801ee74:	3710      	adds	r7, #16
 801ee76:	46bd      	mov	sp, r7
 801ee78:	bd80      	pop	{r7, pc}
 801ee7a:	bf00      	nop
 801ee7c:	20001bc4 	.word	0x20001bc4
 801ee80:	20001b9c 	.word	0x20001b9c
 801ee84:	20001b5c 	.word	0x20001b5c
 801ee88:	20001ba4 	.word	0x20001ba4
 801ee8c:	200016cc 	.word	0x200016cc
 801ee90:	200016c8 	.word	0x200016c8
 801ee94:	20001bb0 	.word	0x20001bb0
 801ee98:	20001bac 	.word	0x20001bac

0801ee9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801ee9c:	b480      	push	{r7}
 801ee9e:	b083      	sub	sp, #12
 801eea0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801eea2:	4b05      	ldr	r3, [pc, #20]	; (801eeb8 <xTaskGetTickCount+0x1c>)
 801eea4:	681b      	ldr	r3, [r3, #0]
 801eea6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801eea8:	687b      	ldr	r3, [r7, #4]
}
 801eeaa:	4618      	mov	r0, r3
 801eeac:	370c      	adds	r7, #12
 801eeae:	46bd      	mov	sp, r7
 801eeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eeb4:	4770      	bx	lr
 801eeb6:	bf00      	nop
 801eeb8:	20001ba0 	.word	0x20001ba0

0801eebc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801eebc:	b580      	push	{r7, lr}
 801eebe:	b086      	sub	sp, #24
 801eec0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801eec2:	2300      	movs	r3, #0
 801eec4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801eec6:	4b4b      	ldr	r3, [pc, #300]	; (801eff4 <xTaskIncrementTick+0x138>)
 801eec8:	681b      	ldr	r3, [r3, #0]
 801eeca:	2b00      	cmp	r3, #0
 801eecc:	f040 8087 	bne.w	801efde <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801eed0:	4b49      	ldr	r3, [pc, #292]	; (801eff8 <xTaskIncrementTick+0x13c>)
 801eed2:	681b      	ldr	r3, [r3, #0]
 801eed4:	3301      	adds	r3, #1
 801eed6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801eed8:	4a47      	ldr	r2, [pc, #284]	; (801eff8 <xTaskIncrementTick+0x13c>)
 801eeda:	693b      	ldr	r3, [r7, #16]
 801eedc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801eede:	693b      	ldr	r3, [r7, #16]
 801eee0:	2b00      	cmp	r3, #0
 801eee2:	d118      	bne.n	801ef16 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 801eee4:	4b45      	ldr	r3, [pc, #276]	; (801effc <xTaskIncrementTick+0x140>)
 801eee6:	681b      	ldr	r3, [r3, #0]
 801eee8:	681b      	ldr	r3, [r3, #0]
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d002      	beq.n	801eef4 <xTaskIncrementTick+0x38>
 801eeee:	f001 f823 	bl	801ff38 <ulSetInterruptMask>
 801eef2:	e7fe      	b.n	801eef2 <xTaskIncrementTick+0x36>
 801eef4:	4b41      	ldr	r3, [pc, #260]	; (801effc <xTaskIncrementTick+0x140>)
 801eef6:	681b      	ldr	r3, [r3, #0]
 801eef8:	60fb      	str	r3, [r7, #12]
 801eefa:	4b41      	ldr	r3, [pc, #260]	; (801f000 <xTaskIncrementTick+0x144>)
 801eefc:	681b      	ldr	r3, [r3, #0]
 801eefe:	4a3f      	ldr	r2, [pc, #252]	; (801effc <xTaskIncrementTick+0x140>)
 801ef00:	6013      	str	r3, [r2, #0]
 801ef02:	4a3f      	ldr	r2, [pc, #252]	; (801f000 <xTaskIncrementTick+0x144>)
 801ef04:	68fb      	ldr	r3, [r7, #12]
 801ef06:	6013      	str	r3, [r2, #0]
 801ef08:	4b3e      	ldr	r3, [pc, #248]	; (801f004 <xTaskIncrementTick+0x148>)
 801ef0a:	681b      	ldr	r3, [r3, #0]
 801ef0c:	3301      	adds	r3, #1
 801ef0e:	4a3d      	ldr	r2, [pc, #244]	; (801f004 <xTaskIncrementTick+0x148>)
 801ef10:	6013      	str	r3, [r2, #0]
 801ef12:	f000 fa8f 	bl	801f434 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801ef16:	4b3c      	ldr	r3, [pc, #240]	; (801f008 <xTaskIncrementTick+0x14c>)
 801ef18:	681b      	ldr	r3, [r3, #0]
 801ef1a:	693a      	ldr	r2, [r7, #16]
 801ef1c:	429a      	cmp	r2, r3
 801ef1e:	d349      	bcc.n	801efb4 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801ef20:	4b36      	ldr	r3, [pc, #216]	; (801effc <xTaskIncrementTick+0x140>)
 801ef22:	681b      	ldr	r3, [r3, #0]
 801ef24:	681b      	ldr	r3, [r3, #0]
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	d104      	bne.n	801ef34 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ef2a:	4b37      	ldr	r3, [pc, #220]	; (801f008 <xTaskIncrementTick+0x14c>)
 801ef2c:	f04f 32ff 	mov.w	r2, #4294967295
 801ef30:	601a      	str	r2, [r3, #0]
					break;
 801ef32:	e03f      	b.n	801efb4 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ef34:	4b31      	ldr	r3, [pc, #196]	; (801effc <xTaskIncrementTick+0x140>)
 801ef36:	681b      	ldr	r3, [r3, #0]
 801ef38:	68db      	ldr	r3, [r3, #12]
 801ef3a:	68db      	ldr	r3, [r3, #12]
 801ef3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801ef3e:	68bb      	ldr	r3, [r7, #8]
 801ef40:	685b      	ldr	r3, [r3, #4]
 801ef42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801ef44:	693a      	ldr	r2, [r7, #16]
 801ef46:	687b      	ldr	r3, [r7, #4]
 801ef48:	429a      	cmp	r2, r3
 801ef4a:	d203      	bcs.n	801ef54 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801ef4c:	4a2e      	ldr	r2, [pc, #184]	; (801f008 <xTaskIncrementTick+0x14c>)
 801ef4e:	687b      	ldr	r3, [r7, #4]
 801ef50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801ef52:	e02f      	b.n	801efb4 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ef54:	68bb      	ldr	r3, [r7, #8]
 801ef56:	3304      	adds	r3, #4
 801ef58:	4618      	mov	r0, r3
 801ef5a:	f7fe ff7d 	bl	801de58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801ef5e:	68bb      	ldr	r3, [r7, #8]
 801ef60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	d004      	beq.n	801ef70 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801ef66:	68bb      	ldr	r3, [r7, #8]
 801ef68:	3318      	adds	r3, #24
 801ef6a:	4618      	mov	r0, r3
 801ef6c:	f7fe ff74 	bl	801de58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801ef70:	68bb      	ldr	r3, [r7, #8]
 801ef72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ef74:	4b25      	ldr	r3, [pc, #148]	; (801f00c <xTaskIncrementTick+0x150>)
 801ef76:	681b      	ldr	r3, [r3, #0]
 801ef78:	429a      	cmp	r2, r3
 801ef7a:	d903      	bls.n	801ef84 <xTaskIncrementTick+0xc8>
 801ef7c:	68bb      	ldr	r3, [r7, #8]
 801ef7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ef80:	4a22      	ldr	r2, [pc, #136]	; (801f00c <xTaskIncrementTick+0x150>)
 801ef82:	6013      	str	r3, [r2, #0]
 801ef84:	68bb      	ldr	r3, [r7, #8]
 801ef86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ef88:	4613      	mov	r3, r2
 801ef8a:	009b      	lsls	r3, r3, #2
 801ef8c:	4413      	add	r3, r2
 801ef8e:	009b      	lsls	r3, r3, #2
 801ef90:	4a1f      	ldr	r2, [pc, #124]	; (801f010 <xTaskIncrementTick+0x154>)
 801ef92:	441a      	add	r2, r3
 801ef94:	68bb      	ldr	r3, [r7, #8]
 801ef96:	3304      	adds	r3, #4
 801ef98:	4619      	mov	r1, r3
 801ef9a:	4610      	mov	r0, r2
 801ef9c:	f7fe feff 	bl	801dd9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801efa0:	68bb      	ldr	r3, [r7, #8]
 801efa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801efa4:	4b1b      	ldr	r3, [pc, #108]	; (801f014 <xTaskIncrementTick+0x158>)
 801efa6:	681b      	ldr	r3, [r3, #0]
 801efa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801efaa:	429a      	cmp	r2, r3
 801efac:	d3b8      	bcc.n	801ef20 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 801efae:	2301      	movs	r3, #1
 801efb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801efb2:	e7b5      	b.n	801ef20 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801efb4:	4b17      	ldr	r3, [pc, #92]	; (801f014 <xTaskIncrementTick+0x158>)
 801efb6:	681b      	ldr	r3, [r3, #0]
 801efb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801efba:	4915      	ldr	r1, [pc, #84]	; (801f010 <xTaskIncrementTick+0x154>)
 801efbc:	4613      	mov	r3, r2
 801efbe:	009b      	lsls	r3, r3, #2
 801efc0:	4413      	add	r3, r2
 801efc2:	009b      	lsls	r3, r3, #2
 801efc4:	440b      	add	r3, r1
 801efc6:	681b      	ldr	r3, [r3, #0]
 801efc8:	2b01      	cmp	r3, #1
 801efca:	d901      	bls.n	801efd0 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 801efcc:	2301      	movs	r3, #1
 801efce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801efd0:	4b11      	ldr	r3, [pc, #68]	; (801f018 <xTaskIncrementTick+0x15c>)
 801efd2:	681b      	ldr	r3, [r3, #0]
 801efd4:	2b00      	cmp	r3, #0
 801efd6:	d007      	beq.n	801efe8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 801efd8:	2301      	movs	r3, #1
 801efda:	617b      	str	r3, [r7, #20]
 801efdc:	e004      	b.n	801efe8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801efde:	4b0f      	ldr	r3, [pc, #60]	; (801f01c <xTaskIncrementTick+0x160>)
 801efe0:	681b      	ldr	r3, [r3, #0]
 801efe2:	3301      	adds	r3, #1
 801efe4:	4a0d      	ldr	r2, [pc, #52]	; (801f01c <xTaskIncrementTick+0x160>)
 801efe6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801efe8:	697b      	ldr	r3, [r7, #20]
}
 801efea:	4618      	mov	r0, r3
 801efec:	3718      	adds	r7, #24
 801efee:	46bd      	mov	sp, r7
 801eff0:	bd80      	pop	{r7, pc}
 801eff2:	bf00      	nop
 801eff4:	20001bc4 	.word	0x20001bc4
 801eff8:	20001ba0 	.word	0x20001ba0
 801effc:	20001b54 	.word	0x20001b54
 801f000:	20001b58 	.word	0x20001b58
 801f004:	20001bb4 	.word	0x20001bb4
 801f008:	20001bbc 	.word	0x20001bbc
 801f00c:	20001ba4 	.word	0x20001ba4
 801f010:	200016cc 	.word	0x200016cc
 801f014:	200016c8 	.word	0x200016c8
 801f018:	20001bb0 	.word	0x20001bb0
 801f01c:	20001bac 	.word	0x20001bac

0801f020 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801f020:	b580      	push	{r7, lr}
 801f022:	b082      	sub	sp, #8
 801f024:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801f026:	4b23      	ldr	r3, [pc, #140]	; (801f0b4 <vTaskSwitchContext+0x94>)
 801f028:	681b      	ldr	r3, [r3, #0]
 801f02a:	2b00      	cmp	r3, #0
 801f02c:	d003      	beq.n	801f036 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801f02e:	4b22      	ldr	r3, [pc, #136]	; (801f0b8 <vTaskSwitchContext+0x98>)
 801f030:	2201      	movs	r2, #1
 801f032:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801f034:	e039      	b.n	801f0aa <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 801f036:	4b20      	ldr	r3, [pc, #128]	; (801f0b8 <vTaskSwitchContext+0x98>)
 801f038:	2200      	movs	r2, #0
 801f03a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f03c:	4b1f      	ldr	r3, [pc, #124]	; (801f0bc <vTaskSwitchContext+0x9c>)
 801f03e:	681b      	ldr	r3, [r3, #0]
 801f040:	607b      	str	r3, [r7, #4]
 801f042:	e008      	b.n	801f056 <vTaskSwitchContext+0x36>
 801f044:	687b      	ldr	r3, [r7, #4]
 801f046:	2b00      	cmp	r3, #0
 801f048:	d102      	bne.n	801f050 <vTaskSwitchContext+0x30>
 801f04a:	f000 ff75 	bl	801ff38 <ulSetInterruptMask>
 801f04e:	e7fe      	b.n	801f04e <vTaskSwitchContext+0x2e>
 801f050:	687b      	ldr	r3, [r7, #4]
 801f052:	3b01      	subs	r3, #1
 801f054:	607b      	str	r3, [r7, #4]
 801f056:	491a      	ldr	r1, [pc, #104]	; (801f0c0 <vTaskSwitchContext+0xa0>)
 801f058:	687a      	ldr	r2, [r7, #4]
 801f05a:	4613      	mov	r3, r2
 801f05c:	009b      	lsls	r3, r3, #2
 801f05e:	4413      	add	r3, r2
 801f060:	009b      	lsls	r3, r3, #2
 801f062:	440b      	add	r3, r1
 801f064:	681b      	ldr	r3, [r3, #0]
 801f066:	2b00      	cmp	r3, #0
 801f068:	d0ec      	beq.n	801f044 <vTaskSwitchContext+0x24>
 801f06a:	687a      	ldr	r2, [r7, #4]
 801f06c:	4613      	mov	r3, r2
 801f06e:	009b      	lsls	r3, r3, #2
 801f070:	4413      	add	r3, r2
 801f072:	009b      	lsls	r3, r3, #2
 801f074:	4a12      	ldr	r2, [pc, #72]	; (801f0c0 <vTaskSwitchContext+0xa0>)
 801f076:	4413      	add	r3, r2
 801f078:	603b      	str	r3, [r7, #0]
 801f07a:	683b      	ldr	r3, [r7, #0]
 801f07c:	685b      	ldr	r3, [r3, #4]
 801f07e:	685a      	ldr	r2, [r3, #4]
 801f080:	683b      	ldr	r3, [r7, #0]
 801f082:	605a      	str	r2, [r3, #4]
 801f084:	683b      	ldr	r3, [r7, #0]
 801f086:	685a      	ldr	r2, [r3, #4]
 801f088:	683b      	ldr	r3, [r7, #0]
 801f08a:	3308      	adds	r3, #8
 801f08c:	429a      	cmp	r2, r3
 801f08e:	d104      	bne.n	801f09a <vTaskSwitchContext+0x7a>
 801f090:	683b      	ldr	r3, [r7, #0]
 801f092:	685b      	ldr	r3, [r3, #4]
 801f094:	685a      	ldr	r2, [r3, #4]
 801f096:	683b      	ldr	r3, [r7, #0]
 801f098:	605a      	str	r2, [r3, #4]
 801f09a:	683b      	ldr	r3, [r7, #0]
 801f09c:	685b      	ldr	r3, [r3, #4]
 801f09e:	68db      	ldr	r3, [r3, #12]
 801f0a0:	4a08      	ldr	r2, [pc, #32]	; (801f0c4 <vTaskSwitchContext+0xa4>)
 801f0a2:	6013      	str	r3, [r2, #0]
 801f0a4:	4a05      	ldr	r2, [pc, #20]	; (801f0bc <vTaskSwitchContext+0x9c>)
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	6013      	str	r3, [r2, #0]
}
 801f0aa:	bf00      	nop
 801f0ac:	3708      	adds	r7, #8
 801f0ae:	46bd      	mov	sp, r7
 801f0b0:	bd80      	pop	{r7, pc}
 801f0b2:	bf00      	nop
 801f0b4:	20001bc4 	.word	0x20001bc4
 801f0b8:	20001bb0 	.word	0x20001bb0
 801f0bc:	20001ba4 	.word	0x20001ba4
 801f0c0:	200016cc 	.word	0x200016cc
 801f0c4:	200016c8 	.word	0x200016c8

0801f0c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801f0c8:	b580      	push	{r7, lr}
 801f0ca:	b082      	sub	sp, #8
 801f0cc:	af00      	add	r7, sp, #0
 801f0ce:	6078      	str	r0, [r7, #4]
 801f0d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	2b00      	cmp	r3, #0
 801f0d6:	d102      	bne.n	801f0de <vTaskPlaceOnEventList+0x16>
 801f0d8:	f000 ff2e 	bl	801ff38 <ulSetInterruptMask>
 801f0dc:	e7fe      	b.n	801f0dc <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801f0de:	4b07      	ldr	r3, [pc, #28]	; (801f0fc <vTaskPlaceOnEventList+0x34>)
 801f0e0:	681b      	ldr	r3, [r3, #0]
 801f0e2:	3318      	adds	r3, #24
 801f0e4:	4619      	mov	r1, r3
 801f0e6:	6878      	ldr	r0, [r7, #4]
 801f0e8:	f7fe fe7d 	bl	801dde6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801f0ec:	2101      	movs	r1, #1
 801f0ee:	6838      	ldr	r0, [r7, #0]
 801f0f0:	f000 fa3c 	bl	801f56c <prvAddCurrentTaskToDelayedList>
}
 801f0f4:	bf00      	nop
 801f0f6:	3708      	adds	r7, #8
 801f0f8:	46bd      	mov	sp, r7
 801f0fa:	bd80      	pop	{r7, pc}
 801f0fc:	200016c8 	.word	0x200016c8

0801f100 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801f100:	b580      	push	{r7, lr}
 801f102:	b084      	sub	sp, #16
 801f104:	af00      	add	r7, sp, #0
 801f106:	60f8      	str	r0, [r7, #12]
 801f108:	60b9      	str	r1, [r7, #8]
 801f10a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801f10c:	68fb      	ldr	r3, [r7, #12]
 801f10e:	2b00      	cmp	r3, #0
 801f110:	d102      	bne.n	801f118 <vTaskPlaceOnEventListRestricted+0x18>
 801f112:	f000 ff11 	bl	801ff38 <ulSetInterruptMask>
 801f116:	e7fe      	b.n	801f116 <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801f118:	4b0a      	ldr	r3, [pc, #40]	; (801f144 <vTaskPlaceOnEventListRestricted+0x44>)
 801f11a:	681b      	ldr	r3, [r3, #0]
 801f11c:	3318      	adds	r3, #24
 801f11e:	4619      	mov	r1, r3
 801f120:	68f8      	ldr	r0, [r7, #12]
 801f122:	f7fe fe3c 	bl	801dd9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	2b00      	cmp	r3, #0
 801f12a:	d002      	beq.n	801f132 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 801f12c:	f04f 33ff 	mov.w	r3, #4294967295
 801f130:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801f132:	6879      	ldr	r1, [r7, #4]
 801f134:	68b8      	ldr	r0, [r7, #8]
 801f136:	f000 fa19 	bl	801f56c <prvAddCurrentTaskToDelayedList>
	}
 801f13a:	bf00      	nop
 801f13c:	3710      	adds	r7, #16
 801f13e:	46bd      	mov	sp, r7
 801f140:	bd80      	pop	{r7, pc}
 801f142:	bf00      	nop
 801f144:	200016c8 	.word	0x200016c8

0801f148 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801f148:	b580      	push	{r7, lr}
 801f14a:	b084      	sub	sp, #16
 801f14c:	af00      	add	r7, sp, #0
 801f14e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	68db      	ldr	r3, [r3, #12]
 801f154:	68db      	ldr	r3, [r3, #12]
 801f156:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 801f158:	68bb      	ldr	r3, [r7, #8]
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	d102      	bne.n	801f164 <xTaskRemoveFromEventList+0x1c>
 801f15e:	f000 feeb 	bl	801ff38 <ulSetInterruptMask>
 801f162:	e7fe      	b.n	801f162 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801f164:	68bb      	ldr	r3, [r7, #8]
 801f166:	3318      	adds	r3, #24
 801f168:	4618      	mov	r0, r3
 801f16a:	f7fe fe75 	bl	801de58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801f16e:	4b1e      	ldr	r3, [pc, #120]	; (801f1e8 <xTaskRemoveFromEventList+0xa0>)
 801f170:	681b      	ldr	r3, [r3, #0]
 801f172:	2b00      	cmp	r3, #0
 801f174:	d11d      	bne.n	801f1b2 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801f176:	68bb      	ldr	r3, [r7, #8]
 801f178:	3304      	adds	r3, #4
 801f17a:	4618      	mov	r0, r3
 801f17c:	f7fe fe6c 	bl	801de58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801f180:	68bb      	ldr	r3, [r7, #8]
 801f182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f184:	4b19      	ldr	r3, [pc, #100]	; (801f1ec <xTaskRemoveFromEventList+0xa4>)
 801f186:	681b      	ldr	r3, [r3, #0]
 801f188:	429a      	cmp	r2, r3
 801f18a:	d903      	bls.n	801f194 <xTaskRemoveFromEventList+0x4c>
 801f18c:	68bb      	ldr	r3, [r7, #8]
 801f18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f190:	4a16      	ldr	r2, [pc, #88]	; (801f1ec <xTaskRemoveFromEventList+0xa4>)
 801f192:	6013      	str	r3, [r2, #0]
 801f194:	68bb      	ldr	r3, [r7, #8]
 801f196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f198:	4613      	mov	r3, r2
 801f19a:	009b      	lsls	r3, r3, #2
 801f19c:	4413      	add	r3, r2
 801f19e:	009b      	lsls	r3, r3, #2
 801f1a0:	4a13      	ldr	r2, [pc, #76]	; (801f1f0 <xTaskRemoveFromEventList+0xa8>)
 801f1a2:	441a      	add	r2, r3
 801f1a4:	68bb      	ldr	r3, [r7, #8]
 801f1a6:	3304      	adds	r3, #4
 801f1a8:	4619      	mov	r1, r3
 801f1aa:	4610      	mov	r0, r2
 801f1ac:	f7fe fdf7 	bl	801dd9e <vListInsertEnd>
 801f1b0:	e005      	b.n	801f1be <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801f1b2:	68bb      	ldr	r3, [r7, #8]
 801f1b4:	3318      	adds	r3, #24
 801f1b6:	4619      	mov	r1, r3
 801f1b8:	480e      	ldr	r0, [pc, #56]	; (801f1f4 <xTaskRemoveFromEventList+0xac>)
 801f1ba:	f7fe fdf0 	bl	801dd9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801f1be:	68bb      	ldr	r3, [r7, #8]
 801f1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f1c2:	4b0d      	ldr	r3, [pc, #52]	; (801f1f8 <xTaskRemoveFromEventList+0xb0>)
 801f1c4:	681b      	ldr	r3, [r3, #0]
 801f1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f1c8:	429a      	cmp	r2, r3
 801f1ca:	d905      	bls.n	801f1d8 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801f1cc:	2301      	movs	r3, #1
 801f1ce:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801f1d0:	4b0a      	ldr	r3, [pc, #40]	; (801f1fc <xTaskRemoveFromEventList+0xb4>)
 801f1d2:	2201      	movs	r2, #1
 801f1d4:	601a      	str	r2, [r3, #0]
 801f1d6:	e001      	b.n	801f1dc <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 801f1d8:	2300      	movs	r3, #0
 801f1da:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 801f1dc:	68fb      	ldr	r3, [r7, #12]
}
 801f1de:	4618      	mov	r0, r3
 801f1e0:	3710      	adds	r7, #16
 801f1e2:	46bd      	mov	sp, r7
 801f1e4:	bd80      	pop	{r7, pc}
 801f1e6:	bf00      	nop
 801f1e8:	20001bc4 	.word	0x20001bc4
 801f1ec:	20001ba4 	.word	0x20001ba4
 801f1f0:	200016cc 	.word	0x200016cc
 801f1f4:	20001b5c 	.word	0x20001b5c
 801f1f8:	200016c8 	.word	0x200016c8
 801f1fc:	20001bb0 	.word	0x20001bb0

0801f200 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801f200:	b480      	push	{r7}
 801f202:	b083      	sub	sp, #12
 801f204:	af00      	add	r7, sp, #0
 801f206:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801f208:	4b06      	ldr	r3, [pc, #24]	; (801f224 <vTaskInternalSetTimeOutState+0x24>)
 801f20a:	681a      	ldr	r2, [r3, #0]
 801f20c:	687b      	ldr	r3, [r7, #4]
 801f20e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801f210:	4b05      	ldr	r3, [pc, #20]	; (801f228 <vTaskInternalSetTimeOutState+0x28>)
 801f212:	681a      	ldr	r2, [r3, #0]
 801f214:	687b      	ldr	r3, [r7, #4]
 801f216:	605a      	str	r2, [r3, #4]
}
 801f218:	bf00      	nop
 801f21a:	370c      	adds	r7, #12
 801f21c:	46bd      	mov	sp, r7
 801f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f222:	4770      	bx	lr
 801f224:	20001bb4 	.word	0x20001bb4
 801f228:	20001ba0 	.word	0x20001ba0

0801f22c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801f22c:	b580      	push	{r7, lr}
 801f22e:	b086      	sub	sp, #24
 801f230:	af00      	add	r7, sp, #0
 801f232:	6078      	str	r0, [r7, #4]
 801f234:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801f236:	687b      	ldr	r3, [r7, #4]
 801f238:	2b00      	cmp	r3, #0
 801f23a:	d102      	bne.n	801f242 <xTaskCheckForTimeOut+0x16>
 801f23c:	f000 fe7c 	bl	801ff38 <ulSetInterruptMask>
 801f240:	e7fe      	b.n	801f240 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 801f242:	683b      	ldr	r3, [r7, #0]
 801f244:	2b00      	cmp	r3, #0
 801f246:	d102      	bne.n	801f24e <xTaskCheckForTimeOut+0x22>
 801f248:	f000 fe76 	bl	801ff38 <ulSetInterruptMask>
 801f24c:	e7fe      	b.n	801f24c <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 801f24e:	f000 fd3f 	bl	801fcd0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801f252:	4b1d      	ldr	r3, [pc, #116]	; (801f2c8 <xTaskCheckForTimeOut+0x9c>)
 801f254:	681b      	ldr	r3, [r3, #0]
 801f256:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801f258:	687b      	ldr	r3, [r7, #4]
 801f25a:	685b      	ldr	r3, [r3, #4]
 801f25c:	693a      	ldr	r2, [r7, #16]
 801f25e:	1ad3      	subs	r3, r2, r3
 801f260:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801f262:	683b      	ldr	r3, [r7, #0]
 801f264:	681b      	ldr	r3, [r3, #0]
 801f266:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f26a:	d102      	bne.n	801f272 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801f26c:	2300      	movs	r3, #0
 801f26e:	617b      	str	r3, [r7, #20]
 801f270:	e023      	b.n	801f2ba <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801f272:	687b      	ldr	r3, [r7, #4]
 801f274:	681a      	ldr	r2, [r3, #0]
 801f276:	4b15      	ldr	r3, [pc, #84]	; (801f2cc <xTaskCheckForTimeOut+0xa0>)
 801f278:	681b      	ldr	r3, [r3, #0]
 801f27a:	429a      	cmp	r2, r3
 801f27c:	d007      	beq.n	801f28e <xTaskCheckForTimeOut+0x62>
 801f27e:	687b      	ldr	r3, [r7, #4]
 801f280:	685b      	ldr	r3, [r3, #4]
 801f282:	693a      	ldr	r2, [r7, #16]
 801f284:	429a      	cmp	r2, r3
 801f286:	d302      	bcc.n	801f28e <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801f288:	2301      	movs	r3, #1
 801f28a:	617b      	str	r3, [r7, #20]
 801f28c:	e015      	b.n	801f2ba <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801f28e:	683b      	ldr	r3, [r7, #0]
 801f290:	681b      	ldr	r3, [r3, #0]
 801f292:	68fa      	ldr	r2, [r7, #12]
 801f294:	429a      	cmp	r2, r3
 801f296:	d20b      	bcs.n	801f2b0 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801f298:	683b      	ldr	r3, [r7, #0]
 801f29a:	681a      	ldr	r2, [r3, #0]
 801f29c:	68fb      	ldr	r3, [r7, #12]
 801f29e:	1ad2      	subs	r2, r2, r3
 801f2a0:	683b      	ldr	r3, [r7, #0]
 801f2a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801f2a4:	6878      	ldr	r0, [r7, #4]
 801f2a6:	f7ff ffab 	bl	801f200 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801f2aa:	2300      	movs	r3, #0
 801f2ac:	617b      	str	r3, [r7, #20]
 801f2ae:	e004      	b.n	801f2ba <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 801f2b0:	683b      	ldr	r3, [r7, #0]
 801f2b2:	2200      	movs	r2, #0
 801f2b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801f2b6:	2301      	movs	r3, #1
 801f2b8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 801f2ba:	f000 fd1b 	bl	801fcf4 <vPortExitCritical>

	return xReturn;
 801f2be:	697b      	ldr	r3, [r7, #20]
}
 801f2c0:	4618      	mov	r0, r3
 801f2c2:	3718      	adds	r7, #24
 801f2c4:	46bd      	mov	sp, r7
 801f2c6:	bd80      	pop	{r7, pc}
 801f2c8:	20001ba0 	.word	0x20001ba0
 801f2cc:	20001bb4 	.word	0x20001bb4

0801f2d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801f2d0:	b480      	push	{r7}
 801f2d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801f2d4:	4b03      	ldr	r3, [pc, #12]	; (801f2e4 <vTaskMissedYield+0x14>)
 801f2d6:	2201      	movs	r2, #1
 801f2d8:	601a      	str	r2, [r3, #0]
}
 801f2da:	bf00      	nop
 801f2dc:	46bd      	mov	sp, r7
 801f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2e2:	4770      	bx	lr
 801f2e4:	20001bb0 	.word	0x20001bb0

0801f2e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801f2e8:	b580      	push	{r7, lr}
 801f2ea:	b082      	sub	sp, #8
 801f2ec:	af00      	add	r7, sp, #0
 801f2ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801f2f0:	f000 f84a 	bl	801f388 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801f2f4:	4b03      	ldr	r3, [pc, #12]	; (801f304 <prvIdleTask+0x1c>)
 801f2f6:	681b      	ldr	r3, [r3, #0]
 801f2f8:	2b01      	cmp	r3, #1
 801f2fa:	d9f9      	bls.n	801f2f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 801f2fc:	f000 fcd6 	bl	801fcac <vPortYield>
		prvCheckTasksWaitingTermination();
 801f300:	e7f6      	b.n	801f2f0 <prvIdleTask+0x8>
 801f302:	bf00      	nop
 801f304:	200016cc 	.word	0x200016cc

0801f308 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801f308:	b580      	push	{r7, lr}
 801f30a:	b082      	sub	sp, #8
 801f30c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801f30e:	2300      	movs	r3, #0
 801f310:	607b      	str	r3, [r7, #4]
 801f312:	e00c      	b.n	801f32e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801f314:	687a      	ldr	r2, [r7, #4]
 801f316:	4613      	mov	r3, r2
 801f318:	009b      	lsls	r3, r3, #2
 801f31a:	4413      	add	r3, r2
 801f31c:	009b      	lsls	r3, r3, #2
 801f31e:	4a12      	ldr	r2, [pc, #72]	; (801f368 <prvInitialiseTaskLists+0x60>)
 801f320:	4413      	add	r3, r2
 801f322:	4618      	mov	r0, r3
 801f324:	f7fe fd0e 	bl	801dd44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801f328:	687b      	ldr	r3, [r7, #4]
 801f32a:	3301      	adds	r3, #1
 801f32c:	607b      	str	r3, [r7, #4]
 801f32e:	687b      	ldr	r3, [r7, #4]
 801f330:	2b37      	cmp	r3, #55	; 0x37
 801f332:	d9ef      	bls.n	801f314 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801f334:	480d      	ldr	r0, [pc, #52]	; (801f36c <prvInitialiseTaskLists+0x64>)
 801f336:	f7fe fd05 	bl	801dd44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801f33a:	480d      	ldr	r0, [pc, #52]	; (801f370 <prvInitialiseTaskLists+0x68>)
 801f33c:	f7fe fd02 	bl	801dd44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801f340:	480c      	ldr	r0, [pc, #48]	; (801f374 <prvInitialiseTaskLists+0x6c>)
 801f342:	f7fe fcff 	bl	801dd44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801f346:	480c      	ldr	r0, [pc, #48]	; (801f378 <prvInitialiseTaskLists+0x70>)
 801f348:	f7fe fcfc 	bl	801dd44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801f34c:	480b      	ldr	r0, [pc, #44]	; (801f37c <prvInitialiseTaskLists+0x74>)
 801f34e:	f7fe fcf9 	bl	801dd44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801f352:	4b0b      	ldr	r3, [pc, #44]	; (801f380 <prvInitialiseTaskLists+0x78>)
 801f354:	4a05      	ldr	r2, [pc, #20]	; (801f36c <prvInitialiseTaskLists+0x64>)
 801f356:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801f358:	4b0a      	ldr	r3, [pc, #40]	; (801f384 <prvInitialiseTaskLists+0x7c>)
 801f35a:	4a05      	ldr	r2, [pc, #20]	; (801f370 <prvInitialiseTaskLists+0x68>)
 801f35c:	601a      	str	r2, [r3, #0]
}
 801f35e:	bf00      	nop
 801f360:	3708      	adds	r7, #8
 801f362:	46bd      	mov	sp, r7
 801f364:	bd80      	pop	{r7, pc}
 801f366:	bf00      	nop
 801f368:	200016cc 	.word	0x200016cc
 801f36c:	20001b2c 	.word	0x20001b2c
 801f370:	20001b40 	.word	0x20001b40
 801f374:	20001b5c 	.word	0x20001b5c
 801f378:	20001b70 	.word	0x20001b70
 801f37c:	20001b88 	.word	0x20001b88
 801f380:	20001b54 	.word	0x20001b54
 801f384:	20001b58 	.word	0x20001b58

0801f388 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801f388:	b580      	push	{r7, lr}
 801f38a:	b082      	sub	sp, #8
 801f38c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801f38e:	e019      	b.n	801f3c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801f390:	f000 fc9e 	bl	801fcd0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f394:	4b10      	ldr	r3, [pc, #64]	; (801f3d8 <prvCheckTasksWaitingTermination+0x50>)
 801f396:	68db      	ldr	r3, [r3, #12]
 801f398:	68db      	ldr	r3, [r3, #12]
 801f39a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	3304      	adds	r3, #4
 801f3a0:	4618      	mov	r0, r3
 801f3a2:	f7fe fd59 	bl	801de58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801f3a6:	4b0d      	ldr	r3, [pc, #52]	; (801f3dc <prvCheckTasksWaitingTermination+0x54>)
 801f3a8:	681b      	ldr	r3, [r3, #0]
 801f3aa:	3b01      	subs	r3, #1
 801f3ac:	4a0b      	ldr	r2, [pc, #44]	; (801f3dc <prvCheckTasksWaitingTermination+0x54>)
 801f3ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801f3b0:	4b0b      	ldr	r3, [pc, #44]	; (801f3e0 <prvCheckTasksWaitingTermination+0x58>)
 801f3b2:	681b      	ldr	r3, [r3, #0]
 801f3b4:	3b01      	subs	r3, #1
 801f3b6:	4a0a      	ldr	r2, [pc, #40]	; (801f3e0 <prvCheckTasksWaitingTermination+0x58>)
 801f3b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801f3ba:	f000 fc9b 	bl	801fcf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801f3be:	6878      	ldr	r0, [r7, #4]
 801f3c0:	f000 f810 	bl	801f3e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801f3c4:	4b06      	ldr	r3, [pc, #24]	; (801f3e0 <prvCheckTasksWaitingTermination+0x58>)
 801f3c6:	681b      	ldr	r3, [r3, #0]
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	d1e1      	bne.n	801f390 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801f3cc:	bf00      	nop
 801f3ce:	bf00      	nop
 801f3d0:	3708      	adds	r7, #8
 801f3d2:	46bd      	mov	sp, r7
 801f3d4:	bd80      	pop	{r7, pc}
 801f3d6:	bf00      	nop
 801f3d8:	20001b70 	.word	0x20001b70
 801f3dc:	20001b9c 	.word	0x20001b9c
 801f3e0:	20001b84 	.word	0x20001b84

0801f3e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801f3e4:	b580      	push	{r7, lr}
 801f3e6:	b082      	sub	sp, #8
 801f3e8:	af00      	add	r7, sp, #0
 801f3ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801f3ec:	687b      	ldr	r3, [r7, #4]
 801f3ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801f3f2:	2b00      	cmp	r3, #0
 801f3f4:	d108      	bne.n	801f408 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801f3f6:	687b      	ldr	r3, [r7, #4]
 801f3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f3fa:	4618      	mov	r0, r3
 801f3fc:	f000 feb0 	bl	8020160 <vPortFree>
				vPortFree( pxTCB );
 801f400:	6878      	ldr	r0, [r7, #4]
 801f402:	f000 fead 	bl	8020160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801f406:	e010      	b.n	801f42a <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801f40e:	2b01      	cmp	r3, #1
 801f410:	d103      	bne.n	801f41a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801f412:	6878      	ldr	r0, [r7, #4]
 801f414:	f000 fea4 	bl	8020160 <vPortFree>
	}
 801f418:	e007      	b.n	801f42a <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801f41a:	687b      	ldr	r3, [r7, #4]
 801f41c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801f420:	2b02      	cmp	r3, #2
 801f422:	d002      	beq.n	801f42a <prvDeleteTCB+0x46>
 801f424:	f000 fd88 	bl	801ff38 <ulSetInterruptMask>
 801f428:	e7fe      	b.n	801f428 <prvDeleteTCB+0x44>
	}
 801f42a:	bf00      	nop
 801f42c:	3708      	adds	r7, #8
 801f42e:	46bd      	mov	sp, r7
 801f430:	bd80      	pop	{r7, pc}
	...

0801f434 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801f434:	b480      	push	{r7}
 801f436:	b083      	sub	sp, #12
 801f438:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801f43a:	4b0c      	ldr	r3, [pc, #48]	; (801f46c <prvResetNextTaskUnblockTime+0x38>)
 801f43c:	681b      	ldr	r3, [r3, #0]
 801f43e:	681b      	ldr	r3, [r3, #0]
 801f440:	2b00      	cmp	r3, #0
 801f442:	d104      	bne.n	801f44e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801f444:	4b0a      	ldr	r3, [pc, #40]	; (801f470 <prvResetNextTaskUnblockTime+0x3c>)
 801f446:	f04f 32ff 	mov.w	r2, #4294967295
 801f44a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801f44c:	e008      	b.n	801f460 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f44e:	4b07      	ldr	r3, [pc, #28]	; (801f46c <prvResetNextTaskUnblockTime+0x38>)
 801f450:	681b      	ldr	r3, [r3, #0]
 801f452:	68db      	ldr	r3, [r3, #12]
 801f454:	68db      	ldr	r3, [r3, #12]
 801f456:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801f458:	687b      	ldr	r3, [r7, #4]
 801f45a:	685b      	ldr	r3, [r3, #4]
 801f45c:	4a04      	ldr	r2, [pc, #16]	; (801f470 <prvResetNextTaskUnblockTime+0x3c>)
 801f45e:	6013      	str	r3, [r2, #0]
}
 801f460:	bf00      	nop
 801f462:	370c      	adds	r7, #12
 801f464:	46bd      	mov	sp, r7
 801f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f46a:	4770      	bx	lr
 801f46c:	20001b54 	.word	0x20001b54
 801f470:	20001bbc 	.word	0x20001bbc

0801f474 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801f474:	b480      	push	{r7}
 801f476:	b083      	sub	sp, #12
 801f478:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801f47a:	4b0b      	ldr	r3, [pc, #44]	; (801f4a8 <xTaskGetSchedulerState+0x34>)
 801f47c:	681b      	ldr	r3, [r3, #0]
 801f47e:	2b00      	cmp	r3, #0
 801f480:	d102      	bne.n	801f488 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801f482:	2301      	movs	r3, #1
 801f484:	607b      	str	r3, [r7, #4]
 801f486:	e008      	b.n	801f49a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801f488:	4b08      	ldr	r3, [pc, #32]	; (801f4ac <xTaskGetSchedulerState+0x38>)
 801f48a:	681b      	ldr	r3, [r3, #0]
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	d102      	bne.n	801f496 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801f490:	2302      	movs	r3, #2
 801f492:	607b      	str	r3, [r7, #4]
 801f494:	e001      	b.n	801f49a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801f496:	2300      	movs	r3, #0
 801f498:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801f49a:	687b      	ldr	r3, [r7, #4]
	}
 801f49c:	4618      	mov	r0, r3
 801f49e:	370c      	adds	r7, #12
 801f4a0:	46bd      	mov	sp, r7
 801f4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4a6:	4770      	bx	lr
 801f4a8:	20001ba8 	.word	0x20001ba8
 801f4ac:	20001bc4 	.word	0x20001bc4

0801f4b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801f4b0:	b580      	push	{r7, lr}
 801f4b2:	b084      	sub	sp, #16
 801f4b4:	af00      	add	r7, sp, #0
 801f4b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801f4b8:	687b      	ldr	r3, [r7, #4]
 801f4ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801f4bc:	2300      	movs	r3, #0
 801f4be:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	2b00      	cmp	r3, #0
 801f4c4:	d046      	beq.n	801f554 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801f4c6:	4b26      	ldr	r3, [pc, #152]	; (801f560 <xTaskPriorityDisinherit+0xb0>)
 801f4c8:	681b      	ldr	r3, [r3, #0]
 801f4ca:	68ba      	ldr	r2, [r7, #8]
 801f4cc:	429a      	cmp	r2, r3
 801f4ce:	d002      	beq.n	801f4d6 <xTaskPriorityDisinherit+0x26>
 801f4d0:	f000 fd32 	bl	801ff38 <ulSetInterruptMask>
 801f4d4:	e7fe      	b.n	801f4d4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 801f4d6:	68bb      	ldr	r3, [r7, #8]
 801f4d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	d102      	bne.n	801f4e4 <xTaskPriorityDisinherit+0x34>
 801f4de:	f000 fd2b 	bl	801ff38 <ulSetInterruptMask>
 801f4e2:	e7fe      	b.n	801f4e2 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 801f4e4:	68bb      	ldr	r3, [r7, #8]
 801f4e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f4e8:	1e5a      	subs	r2, r3, #1
 801f4ea:	68bb      	ldr	r3, [r7, #8]
 801f4ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801f4ee:	68bb      	ldr	r3, [r7, #8]
 801f4f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f4f2:	68bb      	ldr	r3, [r7, #8]
 801f4f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f4f6:	429a      	cmp	r2, r3
 801f4f8:	d02c      	beq.n	801f554 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801f4fa:	68bb      	ldr	r3, [r7, #8]
 801f4fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f4fe:	2b00      	cmp	r3, #0
 801f500:	d128      	bne.n	801f554 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801f502:	68bb      	ldr	r3, [r7, #8]
 801f504:	3304      	adds	r3, #4
 801f506:	4618      	mov	r0, r3
 801f508:	f7fe fca6 	bl	801de58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801f50c:	68bb      	ldr	r3, [r7, #8]
 801f50e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f510:	68bb      	ldr	r3, [r7, #8]
 801f512:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f514:	68bb      	ldr	r3, [r7, #8]
 801f516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f518:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801f51c:	68bb      	ldr	r3, [r7, #8]
 801f51e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801f520:	68bb      	ldr	r3, [r7, #8]
 801f522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f524:	4b0f      	ldr	r3, [pc, #60]	; (801f564 <xTaskPriorityDisinherit+0xb4>)
 801f526:	681b      	ldr	r3, [r3, #0]
 801f528:	429a      	cmp	r2, r3
 801f52a:	d903      	bls.n	801f534 <xTaskPriorityDisinherit+0x84>
 801f52c:	68bb      	ldr	r3, [r7, #8]
 801f52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f530:	4a0c      	ldr	r2, [pc, #48]	; (801f564 <xTaskPriorityDisinherit+0xb4>)
 801f532:	6013      	str	r3, [r2, #0]
 801f534:	68bb      	ldr	r3, [r7, #8]
 801f536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f538:	4613      	mov	r3, r2
 801f53a:	009b      	lsls	r3, r3, #2
 801f53c:	4413      	add	r3, r2
 801f53e:	009b      	lsls	r3, r3, #2
 801f540:	4a09      	ldr	r2, [pc, #36]	; (801f568 <xTaskPriorityDisinherit+0xb8>)
 801f542:	441a      	add	r2, r3
 801f544:	68bb      	ldr	r3, [r7, #8]
 801f546:	3304      	adds	r3, #4
 801f548:	4619      	mov	r1, r3
 801f54a:	4610      	mov	r0, r2
 801f54c:	f7fe fc27 	bl	801dd9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801f550:	2301      	movs	r3, #1
 801f552:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801f554:	68fb      	ldr	r3, [r7, #12]
	}
 801f556:	4618      	mov	r0, r3
 801f558:	3710      	adds	r7, #16
 801f55a:	46bd      	mov	sp, r7
 801f55c:	bd80      	pop	{r7, pc}
 801f55e:	bf00      	nop
 801f560:	200016c8 	.word	0x200016c8
 801f564:	20001ba4 	.word	0x20001ba4
 801f568:	200016cc 	.word	0x200016cc

0801f56c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801f56c:	b580      	push	{r7, lr}
 801f56e:	b084      	sub	sp, #16
 801f570:	af00      	add	r7, sp, #0
 801f572:	6078      	str	r0, [r7, #4]
 801f574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801f576:	4b21      	ldr	r3, [pc, #132]	; (801f5fc <prvAddCurrentTaskToDelayedList+0x90>)
 801f578:	681b      	ldr	r3, [r3, #0]
 801f57a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801f57c:	4b20      	ldr	r3, [pc, #128]	; (801f600 <prvAddCurrentTaskToDelayedList+0x94>)
 801f57e:	681b      	ldr	r3, [r3, #0]
 801f580:	3304      	adds	r3, #4
 801f582:	4618      	mov	r0, r3
 801f584:	f7fe fc68 	bl	801de58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801f588:	687b      	ldr	r3, [r7, #4]
 801f58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f58e:	d10a      	bne.n	801f5a6 <prvAddCurrentTaskToDelayedList+0x3a>
 801f590:	683b      	ldr	r3, [r7, #0]
 801f592:	2b00      	cmp	r3, #0
 801f594:	d007      	beq.n	801f5a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801f596:	4b1a      	ldr	r3, [pc, #104]	; (801f600 <prvAddCurrentTaskToDelayedList+0x94>)
 801f598:	681b      	ldr	r3, [r3, #0]
 801f59a:	3304      	adds	r3, #4
 801f59c:	4619      	mov	r1, r3
 801f59e:	4819      	ldr	r0, [pc, #100]	; (801f604 <prvAddCurrentTaskToDelayedList+0x98>)
 801f5a0:	f7fe fbfd 	bl	801dd9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801f5a4:	e026      	b.n	801f5f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801f5a6:	68fa      	ldr	r2, [r7, #12]
 801f5a8:	687b      	ldr	r3, [r7, #4]
 801f5aa:	4413      	add	r3, r2
 801f5ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801f5ae:	4b14      	ldr	r3, [pc, #80]	; (801f600 <prvAddCurrentTaskToDelayedList+0x94>)
 801f5b0:	681b      	ldr	r3, [r3, #0]
 801f5b2:	68ba      	ldr	r2, [r7, #8]
 801f5b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801f5b6:	68ba      	ldr	r2, [r7, #8]
 801f5b8:	68fb      	ldr	r3, [r7, #12]
 801f5ba:	429a      	cmp	r2, r3
 801f5bc:	d209      	bcs.n	801f5d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801f5be:	4b12      	ldr	r3, [pc, #72]	; (801f608 <prvAddCurrentTaskToDelayedList+0x9c>)
 801f5c0:	681a      	ldr	r2, [r3, #0]
 801f5c2:	4b0f      	ldr	r3, [pc, #60]	; (801f600 <prvAddCurrentTaskToDelayedList+0x94>)
 801f5c4:	681b      	ldr	r3, [r3, #0]
 801f5c6:	3304      	adds	r3, #4
 801f5c8:	4619      	mov	r1, r3
 801f5ca:	4610      	mov	r0, r2
 801f5cc:	f7fe fc0b 	bl	801dde6 <vListInsert>
}
 801f5d0:	e010      	b.n	801f5f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801f5d2:	4b0e      	ldr	r3, [pc, #56]	; (801f60c <prvAddCurrentTaskToDelayedList+0xa0>)
 801f5d4:	681a      	ldr	r2, [r3, #0]
 801f5d6:	4b0a      	ldr	r3, [pc, #40]	; (801f600 <prvAddCurrentTaskToDelayedList+0x94>)
 801f5d8:	681b      	ldr	r3, [r3, #0]
 801f5da:	3304      	adds	r3, #4
 801f5dc:	4619      	mov	r1, r3
 801f5de:	4610      	mov	r0, r2
 801f5e0:	f7fe fc01 	bl	801dde6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801f5e4:	4b0a      	ldr	r3, [pc, #40]	; (801f610 <prvAddCurrentTaskToDelayedList+0xa4>)
 801f5e6:	681b      	ldr	r3, [r3, #0]
 801f5e8:	68ba      	ldr	r2, [r7, #8]
 801f5ea:	429a      	cmp	r2, r3
 801f5ec:	d202      	bcs.n	801f5f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801f5ee:	4a08      	ldr	r2, [pc, #32]	; (801f610 <prvAddCurrentTaskToDelayedList+0xa4>)
 801f5f0:	68bb      	ldr	r3, [r7, #8]
 801f5f2:	6013      	str	r3, [r2, #0]
}
 801f5f4:	bf00      	nop
 801f5f6:	3710      	adds	r7, #16
 801f5f8:	46bd      	mov	sp, r7
 801f5fa:	bd80      	pop	{r7, pc}
 801f5fc:	20001ba0 	.word	0x20001ba0
 801f600:	200016c8 	.word	0x200016c8
 801f604:	20001b88 	.word	0x20001b88
 801f608:	20001b58 	.word	0x20001b58
 801f60c:	20001b54 	.word	0x20001b54
 801f610:	20001bbc 	.word	0x20001bbc

0801f614 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801f614:	b580      	push	{r7, lr}
 801f616:	b088      	sub	sp, #32
 801f618:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801f61a:	2300      	movs	r3, #0
 801f61c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801f61e:	f000 fac7 	bl	801fbb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801f622:	4b18      	ldr	r3, [pc, #96]	; (801f684 <xTimerCreateTimerTask+0x70>)
 801f624:	681b      	ldr	r3, [r3, #0]
 801f626:	2b00      	cmp	r3, #0
 801f628:	d020      	beq.n	801f66c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801f62a:	2300      	movs	r3, #0
 801f62c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801f62e:	2300      	movs	r3, #0
 801f630:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801f632:	463a      	mov	r2, r7
 801f634:	1d39      	adds	r1, r7, #4
 801f636:	f107 0308 	add.w	r3, r7, #8
 801f63a:	4618      	mov	r0, r3
 801f63c:	f7fe fb68 	bl	801dd10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801f640:	6839      	ldr	r1, [r7, #0]
 801f642:	687b      	ldr	r3, [r7, #4]
 801f644:	68ba      	ldr	r2, [r7, #8]
 801f646:	9202      	str	r2, [sp, #8]
 801f648:	9301      	str	r3, [sp, #4]
 801f64a:	2302      	movs	r3, #2
 801f64c:	9300      	str	r3, [sp, #0]
 801f64e:	2300      	movs	r3, #0
 801f650:	460a      	mov	r2, r1
 801f652:	490d      	ldr	r1, [pc, #52]	; (801f688 <xTimerCreateTimerTask+0x74>)
 801f654:	480d      	ldr	r0, [pc, #52]	; (801f68c <xTimerCreateTimerTask+0x78>)
 801f656:	f7ff f855 	bl	801e704 <xTaskCreateStatic>
 801f65a:	4603      	mov	r3, r0
 801f65c:	4a0c      	ldr	r2, [pc, #48]	; (801f690 <xTimerCreateTimerTask+0x7c>)
 801f65e:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801f660:	4b0b      	ldr	r3, [pc, #44]	; (801f690 <xTimerCreateTimerTask+0x7c>)
 801f662:	681b      	ldr	r3, [r3, #0]
 801f664:	2b00      	cmp	r3, #0
 801f666:	d001      	beq.n	801f66c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 801f668:	2301      	movs	r3, #1
 801f66a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801f66c:	68fb      	ldr	r3, [r7, #12]
 801f66e:	2b00      	cmp	r3, #0
 801f670:	d102      	bne.n	801f678 <xTimerCreateTimerTask+0x64>
 801f672:	f000 fc61 	bl	801ff38 <ulSetInterruptMask>
 801f676:	e7fe      	b.n	801f676 <xTimerCreateTimerTask+0x62>
	return xReturn;
 801f678:	68fb      	ldr	r3, [r7, #12]
}
 801f67a:	4618      	mov	r0, r3
 801f67c:	3710      	adds	r7, #16
 801f67e:	46bd      	mov	sp, r7
 801f680:	bd80      	pop	{r7, pc}
 801f682:	bf00      	nop
 801f684:	20001bf8 	.word	0x20001bf8
 801f688:	08023f6c 	.word	0x08023f6c
 801f68c:	0801f7a9 	.word	0x0801f7a9
 801f690:	20001bfc 	.word	0x20001bfc

0801f694 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801f694:	b580      	push	{r7, lr}
 801f696:	b08a      	sub	sp, #40	; 0x28
 801f698:	af00      	add	r7, sp, #0
 801f69a:	60f8      	str	r0, [r7, #12]
 801f69c:	60b9      	str	r1, [r7, #8]
 801f69e:	607a      	str	r2, [r7, #4]
 801f6a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801f6a2:	2300      	movs	r3, #0
 801f6a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801f6a6:	68fb      	ldr	r3, [r7, #12]
 801f6a8:	2b00      	cmp	r3, #0
 801f6aa:	d102      	bne.n	801f6b2 <xTimerGenericCommand+0x1e>
 801f6ac:	f000 fc44 	bl	801ff38 <ulSetInterruptMask>
 801f6b0:	e7fe      	b.n	801f6b0 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801f6b2:	4b1a      	ldr	r3, [pc, #104]	; (801f71c <xTimerGenericCommand+0x88>)
 801f6b4:	681b      	ldr	r3, [r3, #0]
 801f6b6:	2b00      	cmp	r3, #0
 801f6b8:	d02a      	beq.n	801f710 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801f6ba:	68bb      	ldr	r3, [r7, #8]
 801f6bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801f6be:	687b      	ldr	r3, [r7, #4]
 801f6c0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801f6c2:	68fb      	ldr	r3, [r7, #12]
 801f6c4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801f6c6:	68bb      	ldr	r3, [r7, #8]
 801f6c8:	2b05      	cmp	r3, #5
 801f6ca:	dc18      	bgt.n	801f6fe <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801f6cc:	f7ff fed2 	bl	801f474 <xTaskGetSchedulerState>
 801f6d0:	4603      	mov	r3, r0
 801f6d2:	2b02      	cmp	r3, #2
 801f6d4:	d109      	bne.n	801f6ea <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801f6d6:	4b11      	ldr	r3, [pc, #68]	; (801f71c <xTimerGenericCommand+0x88>)
 801f6d8:	6818      	ldr	r0, [r3, #0]
 801f6da:	f107 0114 	add.w	r1, r7, #20
 801f6de:	2300      	movs	r3, #0
 801f6e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f6e2:	f7fe fcae 	bl	801e042 <xQueueGenericSend>
 801f6e6:	6278      	str	r0, [r7, #36]	; 0x24
 801f6e8:	e012      	b.n	801f710 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801f6ea:	4b0c      	ldr	r3, [pc, #48]	; (801f71c <xTimerGenericCommand+0x88>)
 801f6ec:	6818      	ldr	r0, [r3, #0]
 801f6ee:	f107 0114 	add.w	r1, r7, #20
 801f6f2:	2300      	movs	r3, #0
 801f6f4:	2200      	movs	r2, #0
 801f6f6:	f7fe fca4 	bl	801e042 <xQueueGenericSend>
 801f6fa:	6278      	str	r0, [r7, #36]	; 0x24
 801f6fc:	e008      	b.n	801f710 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801f6fe:	4b07      	ldr	r3, [pc, #28]	; (801f71c <xTimerGenericCommand+0x88>)
 801f700:	6818      	ldr	r0, [r3, #0]
 801f702:	f107 0114 	add.w	r1, r7, #20
 801f706:	2300      	movs	r3, #0
 801f708:	683a      	ldr	r2, [r7, #0]
 801f70a:	f7fe fd63 	bl	801e1d4 <xQueueGenericSendFromISR>
 801f70e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801f710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801f712:	4618      	mov	r0, r3
 801f714:	3728      	adds	r7, #40	; 0x28
 801f716:	46bd      	mov	sp, r7
 801f718:	bd80      	pop	{r7, pc}
 801f71a:	bf00      	nop
 801f71c:	20001bf8 	.word	0x20001bf8

0801f720 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801f720:	b580      	push	{r7, lr}
 801f722:	b086      	sub	sp, #24
 801f724:	af02      	add	r7, sp, #8
 801f726:	6078      	str	r0, [r7, #4]
 801f728:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f72a:	4b1e      	ldr	r3, [pc, #120]	; (801f7a4 <prvProcessExpiredTimer+0x84>)
 801f72c:	681b      	ldr	r3, [r3, #0]
 801f72e:	68db      	ldr	r3, [r3, #12]
 801f730:	68db      	ldr	r3, [r3, #12]
 801f732:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801f734:	68fb      	ldr	r3, [r7, #12]
 801f736:	3304      	adds	r3, #4
 801f738:	4618      	mov	r0, r3
 801f73a:	f7fe fb8d 	bl	801de58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801f73e:	68fb      	ldr	r3, [r7, #12]
 801f740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f744:	f003 0304 	and.w	r3, r3, #4
 801f748:	2b00      	cmp	r3, #0
 801f74a:	d01a      	beq.n	801f782 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801f74c:	68fb      	ldr	r3, [r7, #12]
 801f74e:	699a      	ldr	r2, [r3, #24]
 801f750:	687b      	ldr	r3, [r7, #4]
 801f752:	18d1      	adds	r1, r2, r3
 801f754:	687b      	ldr	r3, [r7, #4]
 801f756:	683a      	ldr	r2, [r7, #0]
 801f758:	68f8      	ldr	r0, [r7, #12]
 801f75a:	f000 f8c1 	bl	801f8e0 <prvInsertTimerInActiveList>
 801f75e:	4603      	mov	r3, r0
 801f760:	2b00      	cmp	r3, #0
 801f762:	d017      	beq.n	801f794 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801f764:	2300      	movs	r3, #0
 801f766:	9300      	str	r3, [sp, #0]
 801f768:	2300      	movs	r3, #0
 801f76a:	687a      	ldr	r2, [r7, #4]
 801f76c:	2100      	movs	r1, #0
 801f76e:	68f8      	ldr	r0, [r7, #12]
 801f770:	f7ff ff90 	bl	801f694 <xTimerGenericCommand>
 801f774:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 801f776:	68bb      	ldr	r3, [r7, #8]
 801f778:	2b00      	cmp	r3, #0
 801f77a:	d10b      	bne.n	801f794 <prvProcessExpiredTimer+0x74>
 801f77c:	f000 fbdc 	bl	801ff38 <ulSetInterruptMask>
 801f780:	e7fe      	b.n	801f780 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801f782:	68fb      	ldr	r3, [r7, #12]
 801f784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f788:	f023 0301 	bic.w	r3, r3, #1
 801f78c:	b2da      	uxtb	r2, r3
 801f78e:	68fb      	ldr	r3, [r7, #12]
 801f790:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801f794:	68fb      	ldr	r3, [r7, #12]
 801f796:	6a1b      	ldr	r3, [r3, #32]
 801f798:	68f8      	ldr	r0, [r7, #12]
 801f79a:	4798      	blx	r3
}
 801f79c:	bf00      	nop
 801f79e:	3710      	adds	r7, #16
 801f7a0:	46bd      	mov	sp, r7
 801f7a2:	bd80      	pop	{r7, pc}
 801f7a4:	20001bf0 	.word	0x20001bf0

0801f7a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801f7a8:	b580      	push	{r7, lr}
 801f7aa:	b084      	sub	sp, #16
 801f7ac:	af00      	add	r7, sp, #0
 801f7ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801f7b0:	f107 0308 	add.w	r3, r7, #8
 801f7b4:	4618      	mov	r0, r3
 801f7b6:	f000 f84f 	bl	801f858 <prvGetNextExpireTime>
 801f7ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801f7bc:	68bb      	ldr	r3, [r7, #8]
 801f7be:	4619      	mov	r1, r3
 801f7c0:	68f8      	ldr	r0, [r7, #12]
 801f7c2:	f000 f803 	bl	801f7cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801f7c6:	f000 f8cd 	bl	801f964 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801f7ca:	e7f1      	b.n	801f7b0 <prvTimerTask+0x8>

0801f7cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801f7cc:	b580      	push	{r7, lr}
 801f7ce:	b084      	sub	sp, #16
 801f7d0:	af00      	add	r7, sp, #0
 801f7d2:	6078      	str	r0, [r7, #4]
 801f7d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801f7d6:	f7ff fac5 	bl	801ed64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801f7da:	f107 0308 	add.w	r3, r7, #8
 801f7de:	4618      	mov	r0, r3
 801f7e0:	f000 f85e 	bl	801f8a0 <prvSampleTimeNow>
 801f7e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801f7e6:	68bb      	ldr	r3, [r7, #8]
 801f7e8:	2b00      	cmp	r3, #0
 801f7ea:	d12a      	bne.n	801f842 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801f7ec:	683b      	ldr	r3, [r7, #0]
 801f7ee:	2b00      	cmp	r3, #0
 801f7f0:	d10a      	bne.n	801f808 <prvProcessTimerOrBlockTask+0x3c>
 801f7f2:	687a      	ldr	r2, [r7, #4]
 801f7f4:	68fb      	ldr	r3, [r7, #12]
 801f7f6:	429a      	cmp	r2, r3
 801f7f8:	d806      	bhi.n	801f808 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801f7fa:	f7ff fac1 	bl	801ed80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801f7fe:	68f9      	ldr	r1, [r7, #12]
 801f800:	6878      	ldr	r0, [r7, #4]
 801f802:	f7ff ff8d 	bl	801f720 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801f806:	e01e      	b.n	801f846 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 801f808:	683b      	ldr	r3, [r7, #0]
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	d008      	beq.n	801f820 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801f80e:	4b10      	ldr	r3, [pc, #64]	; (801f850 <prvProcessTimerOrBlockTask+0x84>)
 801f810:	681b      	ldr	r3, [r3, #0]
 801f812:	681b      	ldr	r3, [r3, #0]
 801f814:	2b00      	cmp	r3, #0
 801f816:	d101      	bne.n	801f81c <prvProcessTimerOrBlockTask+0x50>
 801f818:	2301      	movs	r3, #1
 801f81a:	e000      	b.n	801f81e <prvProcessTimerOrBlockTask+0x52>
 801f81c:	2300      	movs	r3, #0
 801f81e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801f820:	4b0c      	ldr	r3, [pc, #48]	; (801f854 <prvProcessTimerOrBlockTask+0x88>)
 801f822:	6818      	ldr	r0, [r3, #0]
 801f824:	687a      	ldr	r2, [r7, #4]
 801f826:	68fb      	ldr	r3, [r7, #12]
 801f828:	1ad3      	subs	r3, r2, r3
 801f82a:	683a      	ldr	r2, [r7, #0]
 801f82c:	4619      	mov	r1, r3
 801f82e:	f7fe ff35 	bl	801e69c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801f832:	f7ff faa5 	bl	801ed80 <xTaskResumeAll>
 801f836:	4603      	mov	r3, r0
 801f838:	2b00      	cmp	r3, #0
 801f83a:	d104      	bne.n	801f846 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 801f83c:	f000 fa36 	bl	801fcac <vPortYield>
}
 801f840:	e001      	b.n	801f846 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 801f842:	f7ff fa9d 	bl	801ed80 <xTaskResumeAll>
}
 801f846:	bf00      	nop
 801f848:	3710      	adds	r7, #16
 801f84a:	46bd      	mov	sp, r7
 801f84c:	bd80      	pop	{r7, pc}
 801f84e:	bf00      	nop
 801f850:	20001bf4 	.word	0x20001bf4
 801f854:	20001bf8 	.word	0x20001bf8

0801f858 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801f858:	b480      	push	{r7}
 801f85a:	b085      	sub	sp, #20
 801f85c:	af00      	add	r7, sp, #0
 801f85e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801f860:	4b0e      	ldr	r3, [pc, #56]	; (801f89c <prvGetNextExpireTime+0x44>)
 801f862:	681b      	ldr	r3, [r3, #0]
 801f864:	681b      	ldr	r3, [r3, #0]
 801f866:	2b00      	cmp	r3, #0
 801f868:	d101      	bne.n	801f86e <prvGetNextExpireTime+0x16>
 801f86a:	2201      	movs	r2, #1
 801f86c:	e000      	b.n	801f870 <prvGetNextExpireTime+0x18>
 801f86e:	2200      	movs	r2, #0
 801f870:	687b      	ldr	r3, [r7, #4]
 801f872:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801f874:	687b      	ldr	r3, [r7, #4]
 801f876:	681b      	ldr	r3, [r3, #0]
 801f878:	2b00      	cmp	r3, #0
 801f87a:	d105      	bne.n	801f888 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801f87c:	4b07      	ldr	r3, [pc, #28]	; (801f89c <prvGetNextExpireTime+0x44>)
 801f87e:	681b      	ldr	r3, [r3, #0]
 801f880:	68db      	ldr	r3, [r3, #12]
 801f882:	681b      	ldr	r3, [r3, #0]
 801f884:	60fb      	str	r3, [r7, #12]
 801f886:	e001      	b.n	801f88c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801f888:	2300      	movs	r3, #0
 801f88a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801f88c:	68fb      	ldr	r3, [r7, #12]
}
 801f88e:	4618      	mov	r0, r3
 801f890:	3714      	adds	r7, #20
 801f892:	46bd      	mov	sp, r7
 801f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f898:	4770      	bx	lr
 801f89a:	bf00      	nop
 801f89c:	20001bf0 	.word	0x20001bf0

0801f8a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801f8a0:	b580      	push	{r7, lr}
 801f8a2:	b084      	sub	sp, #16
 801f8a4:	af00      	add	r7, sp, #0
 801f8a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801f8a8:	f7ff faf8 	bl	801ee9c <xTaskGetTickCount>
 801f8ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801f8ae:	4b0b      	ldr	r3, [pc, #44]	; (801f8dc <prvSampleTimeNow+0x3c>)
 801f8b0:	681b      	ldr	r3, [r3, #0]
 801f8b2:	68fa      	ldr	r2, [r7, #12]
 801f8b4:	429a      	cmp	r2, r3
 801f8b6:	d205      	bcs.n	801f8c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801f8b8:	f000 f91e 	bl	801faf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801f8bc:	687b      	ldr	r3, [r7, #4]
 801f8be:	2201      	movs	r2, #1
 801f8c0:	601a      	str	r2, [r3, #0]
 801f8c2:	e002      	b.n	801f8ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	2200      	movs	r2, #0
 801f8c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801f8ca:	4a04      	ldr	r2, [pc, #16]	; (801f8dc <prvSampleTimeNow+0x3c>)
 801f8cc:	68fb      	ldr	r3, [r7, #12]
 801f8ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801f8d0:	68fb      	ldr	r3, [r7, #12]
}
 801f8d2:	4618      	mov	r0, r3
 801f8d4:	3710      	adds	r7, #16
 801f8d6:	46bd      	mov	sp, r7
 801f8d8:	bd80      	pop	{r7, pc}
 801f8da:	bf00      	nop
 801f8dc:	20001c00 	.word	0x20001c00

0801f8e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801f8e0:	b580      	push	{r7, lr}
 801f8e2:	b086      	sub	sp, #24
 801f8e4:	af00      	add	r7, sp, #0
 801f8e6:	60f8      	str	r0, [r7, #12]
 801f8e8:	60b9      	str	r1, [r7, #8]
 801f8ea:	607a      	str	r2, [r7, #4]
 801f8ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801f8ee:	2300      	movs	r3, #0
 801f8f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801f8f2:	68fb      	ldr	r3, [r7, #12]
 801f8f4:	68ba      	ldr	r2, [r7, #8]
 801f8f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801f8f8:	68fb      	ldr	r3, [r7, #12]
 801f8fa:	68fa      	ldr	r2, [r7, #12]
 801f8fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801f8fe:	68ba      	ldr	r2, [r7, #8]
 801f900:	687b      	ldr	r3, [r7, #4]
 801f902:	429a      	cmp	r2, r3
 801f904:	d812      	bhi.n	801f92c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f906:	687a      	ldr	r2, [r7, #4]
 801f908:	683b      	ldr	r3, [r7, #0]
 801f90a:	1ad2      	subs	r2, r2, r3
 801f90c:	68fb      	ldr	r3, [r7, #12]
 801f90e:	699b      	ldr	r3, [r3, #24]
 801f910:	429a      	cmp	r2, r3
 801f912:	d302      	bcc.n	801f91a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801f914:	2301      	movs	r3, #1
 801f916:	617b      	str	r3, [r7, #20]
 801f918:	e01b      	b.n	801f952 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801f91a:	4b10      	ldr	r3, [pc, #64]	; (801f95c <prvInsertTimerInActiveList+0x7c>)
 801f91c:	681a      	ldr	r2, [r3, #0]
 801f91e:	68fb      	ldr	r3, [r7, #12]
 801f920:	3304      	adds	r3, #4
 801f922:	4619      	mov	r1, r3
 801f924:	4610      	mov	r0, r2
 801f926:	f7fe fa5e 	bl	801dde6 <vListInsert>
 801f92a:	e012      	b.n	801f952 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801f92c:	687a      	ldr	r2, [r7, #4]
 801f92e:	683b      	ldr	r3, [r7, #0]
 801f930:	429a      	cmp	r2, r3
 801f932:	d206      	bcs.n	801f942 <prvInsertTimerInActiveList+0x62>
 801f934:	68ba      	ldr	r2, [r7, #8]
 801f936:	683b      	ldr	r3, [r7, #0]
 801f938:	429a      	cmp	r2, r3
 801f93a:	d302      	bcc.n	801f942 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801f93c:	2301      	movs	r3, #1
 801f93e:	617b      	str	r3, [r7, #20]
 801f940:	e007      	b.n	801f952 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801f942:	4b07      	ldr	r3, [pc, #28]	; (801f960 <prvInsertTimerInActiveList+0x80>)
 801f944:	681a      	ldr	r2, [r3, #0]
 801f946:	68fb      	ldr	r3, [r7, #12]
 801f948:	3304      	adds	r3, #4
 801f94a:	4619      	mov	r1, r3
 801f94c:	4610      	mov	r0, r2
 801f94e:	f7fe fa4a 	bl	801dde6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801f952:	697b      	ldr	r3, [r7, #20]
}
 801f954:	4618      	mov	r0, r3
 801f956:	3718      	adds	r7, #24
 801f958:	46bd      	mov	sp, r7
 801f95a:	bd80      	pop	{r7, pc}
 801f95c:	20001bf4 	.word	0x20001bf4
 801f960:	20001bf0 	.word	0x20001bf0

0801f964 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801f964:	b580      	push	{r7, lr}
 801f966:	b08c      	sub	sp, #48	; 0x30
 801f968:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801f96a:	e0b2      	b.n	801fad2 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801f96c:	68bb      	ldr	r3, [r7, #8]
 801f96e:	2b00      	cmp	r3, #0
 801f970:	da11      	bge.n	801f996 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801f972:	f107 0308 	add.w	r3, r7, #8
 801f976:	3304      	adds	r3, #4
 801f978:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801f97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	d102      	bne.n	801f986 <prvProcessReceivedCommands+0x22>
 801f980:	f000 fada 	bl	801ff38 <ulSetInterruptMask>
 801f984:	e7fe      	b.n	801f984 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801f986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f988:	681b      	ldr	r3, [r3, #0]
 801f98a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f98c:	6850      	ldr	r0, [r2, #4]
 801f98e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f990:	6892      	ldr	r2, [r2, #8]
 801f992:	4611      	mov	r1, r2
 801f994:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801f996:	68bb      	ldr	r3, [r7, #8]
 801f998:	2b00      	cmp	r3, #0
 801f99a:	f2c0 8099 	blt.w	801fad0 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801f99e:	693b      	ldr	r3, [r7, #16]
 801f9a0:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801f9a2:	6a3b      	ldr	r3, [r7, #32]
 801f9a4:	695b      	ldr	r3, [r3, #20]
 801f9a6:	2b00      	cmp	r3, #0
 801f9a8:	d004      	beq.n	801f9b4 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801f9aa:	6a3b      	ldr	r3, [r7, #32]
 801f9ac:	3304      	adds	r3, #4
 801f9ae:	4618      	mov	r0, r3
 801f9b0:	f7fe fa52 	bl	801de58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801f9b4:	1d3b      	adds	r3, r7, #4
 801f9b6:	4618      	mov	r0, r3
 801f9b8:	f7ff ff72 	bl	801f8a0 <prvSampleTimeNow>
 801f9bc:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 801f9be:	68bb      	ldr	r3, [r7, #8]
 801f9c0:	2b09      	cmp	r3, #9
 801f9c2:	f200 8086 	bhi.w	801fad2 <prvProcessReceivedCommands+0x16e>
 801f9c6:	a201      	add	r2, pc, #4	; (adr r2, 801f9cc <prvProcessReceivedCommands+0x68>)
 801f9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f9cc:	0801f9f5 	.word	0x0801f9f5
 801f9d0:	0801f9f5 	.word	0x0801f9f5
 801f9d4:	0801f9f5 	.word	0x0801f9f5
 801f9d8:	0801fa59 	.word	0x0801fa59
 801f9dc:	0801fa6d 	.word	0x0801fa6d
 801f9e0:	0801faa7 	.word	0x0801faa7
 801f9e4:	0801f9f5 	.word	0x0801f9f5
 801f9e8:	0801f9f5 	.word	0x0801f9f5
 801f9ec:	0801fa59 	.word	0x0801fa59
 801f9f0:	0801fa6d 	.word	0x0801fa6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801f9f4:	6a3b      	ldr	r3, [r7, #32]
 801f9f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f9fa:	f043 0301 	orr.w	r3, r3, #1
 801f9fe:	b2da      	uxtb	r2, r3
 801fa00:	6a3b      	ldr	r3, [r7, #32]
 801fa02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801fa06:	68fa      	ldr	r2, [r7, #12]
 801fa08:	6a3b      	ldr	r3, [r7, #32]
 801fa0a:	699b      	ldr	r3, [r3, #24]
 801fa0c:	18d1      	adds	r1, r2, r3
 801fa0e:	68fb      	ldr	r3, [r7, #12]
 801fa10:	69fa      	ldr	r2, [r7, #28]
 801fa12:	6a38      	ldr	r0, [r7, #32]
 801fa14:	f7ff ff64 	bl	801f8e0 <prvInsertTimerInActiveList>
 801fa18:	4603      	mov	r3, r0
 801fa1a:	2b00      	cmp	r3, #0
 801fa1c:	d059      	beq.n	801fad2 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801fa1e:	6a3b      	ldr	r3, [r7, #32]
 801fa20:	6a1b      	ldr	r3, [r3, #32]
 801fa22:	6a38      	ldr	r0, [r7, #32]
 801fa24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801fa26:	6a3b      	ldr	r3, [r7, #32]
 801fa28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fa2c:	f003 0304 	and.w	r3, r3, #4
 801fa30:	2b00      	cmp	r3, #0
 801fa32:	d04e      	beq.n	801fad2 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801fa34:	68fa      	ldr	r2, [r7, #12]
 801fa36:	6a3b      	ldr	r3, [r7, #32]
 801fa38:	699b      	ldr	r3, [r3, #24]
 801fa3a:	441a      	add	r2, r3
 801fa3c:	2300      	movs	r3, #0
 801fa3e:	9300      	str	r3, [sp, #0]
 801fa40:	2300      	movs	r3, #0
 801fa42:	2100      	movs	r1, #0
 801fa44:	6a38      	ldr	r0, [r7, #32]
 801fa46:	f7ff fe25 	bl	801f694 <xTimerGenericCommand>
 801fa4a:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 801fa4c:	69bb      	ldr	r3, [r7, #24]
 801fa4e:	2b00      	cmp	r3, #0
 801fa50:	d13f      	bne.n	801fad2 <prvProcessReceivedCommands+0x16e>
 801fa52:	f000 fa71 	bl	801ff38 <ulSetInterruptMask>
 801fa56:	e7fe      	b.n	801fa56 <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801fa58:	6a3b      	ldr	r3, [r7, #32]
 801fa5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fa5e:	f023 0301 	bic.w	r3, r3, #1
 801fa62:	b2da      	uxtb	r2, r3
 801fa64:	6a3b      	ldr	r3, [r7, #32]
 801fa66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801fa6a:	e032      	b.n	801fad2 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801fa6c:	6a3b      	ldr	r3, [r7, #32]
 801fa6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fa72:	f043 0301 	orr.w	r3, r3, #1
 801fa76:	b2da      	uxtb	r2, r3
 801fa78:	6a3b      	ldr	r3, [r7, #32]
 801fa7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801fa7e:	68fa      	ldr	r2, [r7, #12]
 801fa80:	6a3b      	ldr	r3, [r7, #32]
 801fa82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801fa84:	6a3b      	ldr	r3, [r7, #32]
 801fa86:	699b      	ldr	r3, [r3, #24]
 801fa88:	2b00      	cmp	r3, #0
 801fa8a:	d102      	bne.n	801fa92 <prvProcessReceivedCommands+0x12e>
 801fa8c:	f000 fa54 	bl	801ff38 <ulSetInterruptMask>
 801fa90:	e7fe      	b.n	801fa90 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801fa92:	6a3b      	ldr	r3, [r7, #32]
 801fa94:	699a      	ldr	r2, [r3, #24]
 801fa96:	69fb      	ldr	r3, [r7, #28]
 801fa98:	18d1      	adds	r1, r2, r3
 801fa9a:	69fb      	ldr	r3, [r7, #28]
 801fa9c:	69fa      	ldr	r2, [r7, #28]
 801fa9e:	6a38      	ldr	r0, [r7, #32]
 801faa0:	f7ff ff1e 	bl	801f8e0 <prvInsertTimerInActiveList>
					break;
 801faa4:	e015      	b.n	801fad2 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801faa6:	6a3b      	ldr	r3, [r7, #32]
 801faa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801faac:	f003 0302 	and.w	r3, r3, #2
 801fab0:	2b00      	cmp	r3, #0
 801fab2:	d103      	bne.n	801fabc <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 801fab4:	6a38      	ldr	r0, [r7, #32]
 801fab6:	f000 fb53 	bl	8020160 <vPortFree>
 801faba:	e00a      	b.n	801fad2 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801fabc:	6a3b      	ldr	r3, [r7, #32]
 801fabe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fac2:	f023 0301 	bic.w	r3, r3, #1
 801fac6:	b2da      	uxtb	r2, r3
 801fac8:	6a3b      	ldr	r3, [r7, #32]
 801faca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801face:	e000      	b.n	801fad2 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801fad0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801fad2:	4b08      	ldr	r3, [pc, #32]	; (801faf4 <prvProcessReceivedCommands+0x190>)
 801fad4:	681b      	ldr	r3, [r3, #0]
 801fad6:	f107 0108 	add.w	r1, r7, #8
 801fada:	2200      	movs	r2, #0
 801fadc:	4618      	mov	r0, r3
 801fade:	f7fe fbea 	bl	801e2b6 <xQueueReceive>
 801fae2:	4603      	mov	r3, r0
 801fae4:	2b00      	cmp	r3, #0
 801fae6:	f47f af41 	bne.w	801f96c <prvProcessReceivedCommands+0x8>
	}
}
 801faea:	bf00      	nop
 801faec:	bf00      	nop
 801faee:	3728      	adds	r7, #40	; 0x28
 801faf0:	46bd      	mov	sp, r7
 801faf2:	bd80      	pop	{r7, pc}
 801faf4:	20001bf8 	.word	0x20001bf8

0801faf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801faf8:	b580      	push	{r7, lr}
 801fafa:	b088      	sub	sp, #32
 801fafc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801fafe:	e040      	b.n	801fb82 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801fb00:	4b29      	ldr	r3, [pc, #164]	; (801fba8 <prvSwitchTimerLists+0xb0>)
 801fb02:	681b      	ldr	r3, [r3, #0]
 801fb04:	68db      	ldr	r3, [r3, #12]
 801fb06:	681b      	ldr	r3, [r3, #0]
 801fb08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fb0a:	4b27      	ldr	r3, [pc, #156]	; (801fba8 <prvSwitchTimerLists+0xb0>)
 801fb0c:	681b      	ldr	r3, [r3, #0]
 801fb0e:	68db      	ldr	r3, [r3, #12]
 801fb10:	68db      	ldr	r3, [r3, #12]
 801fb12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801fb14:	68fb      	ldr	r3, [r7, #12]
 801fb16:	3304      	adds	r3, #4
 801fb18:	4618      	mov	r0, r3
 801fb1a:	f7fe f99d 	bl	801de58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801fb1e:	68fb      	ldr	r3, [r7, #12]
 801fb20:	6a1b      	ldr	r3, [r3, #32]
 801fb22:	68f8      	ldr	r0, [r7, #12]
 801fb24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801fb26:	68fb      	ldr	r3, [r7, #12]
 801fb28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fb2c:	f003 0304 	and.w	r3, r3, #4
 801fb30:	2b00      	cmp	r3, #0
 801fb32:	d026      	beq.n	801fb82 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801fb34:	68fb      	ldr	r3, [r7, #12]
 801fb36:	699b      	ldr	r3, [r3, #24]
 801fb38:	693a      	ldr	r2, [r7, #16]
 801fb3a:	4413      	add	r3, r2
 801fb3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801fb3e:	68ba      	ldr	r2, [r7, #8]
 801fb40:	693b      	ldr	r3, [r7, #16]
 801fb42:	429a      	cmp	r2, r3
 801fb44:	d90e      	bls.n	801fb64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801fb46:	68fb      	ldr	r3, [r7, #12]
 801fb48:	68ba      	ldr	r2, [r7, #8]
 801fb4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801fb4c:	68fb      	ldr	r3, [r7, #12]
 801fb4e:	68fa      	ldr	r2, [r7, #12]
 801fb50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801fb52:	4b15      	ldr	r3, [pc, #84]	; (801fba8 <prvSwitchTimerLists+0xb0>)
 801fb54:	681a      	ldr	r2, [r3, #0]
 801fb56:	68fb      	ldr	r3, [r7, #12]
 801fb58:	3304      	adds	r3, #4
 801fb5a:	4619      	mov	r1, r3
 801fb5c:	4610      	mov	r0, r2
 801fb5e:	f7fe f942 	bl	801dde6 <vListInsert>
 801fb62:	e00e      	b.n	801fb82 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801fb64:	2300      	movs	r3, #0
 801fb66:	9300      	str	r3, [sp, #0]
 801fb68:	2300      	movs	r3, #0
 801fb6a:	693a      	ldr	r2, [r7, #16]
 801fb6c:	2100      	movs	r1, #0
 801fb6e:	68f8      	ldr	r0, [r7, #12]
 801fb70:	f7ff fd90 	bl	801f694 <xTimerGenericCommand>
 801fb74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801fb76:	687b      	ldr	r3, [r7, #4]
 801fb78:	2b00      	cmp	r3, #0
 801fb7a:	d102      	bne.n	801fb82 <prvSwitchTimerLists+0x8a>
 801fb7c:	f000 f9dc 	bl	801ff38 <ulSetInterruptMask>
 801fb80:	e7fe      	b.n	801fb80 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801fb82:	4b09      	ldr	r3, [pc, #36]	; (801fba8 <prvSwitchTimerLists+0xb0>)
 801fb84:	681b      	ldr	r3, [r3, #0]
 801fb86:	681b      	ldr	r3, [r3, #0]
 801fb88:	2b00      	cmp	r3, #0
 801fb8a:	d1b9      	bne.n	801fb00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801fb8c:	4b06      	ldr	r3, [pc, #24]	; (801fba8 <prvSwitchTimerLists+0xb0>)
 801fb8e:	681b      	ldr	r3, [r3, #0]
 801fb90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801fb92:	4b06      	ldr	r3, [pc, #24]	; (801fbac <prvSwitchTimerLists+0xb4>)
 801fb94:	681b      	ldr	r3, [r3, #0]
 801fb96:	4a04      	ldr	r2, [pc, #16]	; (801fba8 <prvSwitchTimerLists+0xb0>)
 801fb98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801fb9a:	4a04      	ldr	r2, [pc, #16]	; (801fbac <prvSwitchTimerLists+0xb4>)
 801fb9c:	697b      	ldr	r3, [r7, #20]
 801fb9e:	6013      	str	r3, [r2, #0]
}
 801fba0:	bf00      	nop
 801fba2:	3718      	adds	r7, #24
 801fba4:	46bd      	mov	sp, r7
 801fba6:	bd80      	pop	{r7, pc}
 801fba8:	20001bf0 	.word	0x20001bf0
 801fbac:	20001bf4 	.word	0x20001bf4

0801fbb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801fbb0:	b580      	push	{r7, lr}
 801fbb2:	b082      	sub	sp, #8
 801fbb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801fbb6:	f000 f88b 	bl	801fcd0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801fbba:	4b15      	ldr	r3, [pc, #84]	; (801fc10 <prvCheckForValidListAndQueue+0x60>)
 801fbbc:	681b      	ldr	r3, [r3, #0]
 801fbbe:	2b00      	cmp	r3, #0
 801fbc0:	d120      	bne.n	801fc04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801fbc2:	4814      	ldr	r0, [pc, #80]	; (801fc14 <prvCheckForValidListAndQueue+0x64>)
 801fbc4:	f7fe f8be 	bl	801dd44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801fbc8:	4813      	ldr	r0, [pc, #76]	; (801fc18 <prvCheckForValidListAndQueue+0x68>)
 801fbca:	f7fe f8bb 	bl	801dd44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801fbce:	4b13      	ldr	r3, [pc, #76]	; (801fc1c <prvCheckForValidListAndQueue+0x6c>)
 801fbd0:	4a10      	ldr	r2, [pc, #64]	; (801fc14 <prvCheckForValidListAndQueue+0x64>)
 801fbd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801fbd4:	4b12      	ldr	r3, [pc, #72]	; (801fc20 <prvCheckForValidListAndQueue+0x70>)
 801fbd6:	4a10      	ldr	r2, [pc, #64]	; (801fc18 <prvCheckForValidListAndQueue+0x68>)
 801fbd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801fbda:	2300      	movs	r3, #0
 801fbdc:	9300      	str	r3, [sp, #0]
 801fbde:	4b11      	ldr	r3, [pc, #68]	; (801fc24 <prvCheckForValidListAndQueue+0x74>)
 801fbe0:	4a11      	ldr	r2, [pc, #68]	; (801fc28 <prvCheckForValidListAndQueue+0x78>)
 801fbe2:	2110      	movs	r1, #16
 801fbe4:	200a      	movs	r0, #10
 801fbe6:	f7fe f9b9 	bl	801df5c <xQueueGenericCreateStatic>
 801fbea:	4603      	mov	r3, r0
 801fbec:	4a08      	ldr	r2, [pc, #32]	; (801fc10 <prvCheckForValidListAndQueue+0x60>)
 801fbee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801fbf0:	4b07      	ldr	r3, [pc, #28]	; (801fc10 <prvCheckForValidListAndQueue+0x60>)
 801fbf2:	681b      	ldr	r3, [r3, #0]
 801fbf4:	2b00      	cmp	r3, #0
 801fbf6:	d005      	beq.n	801fc04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801fbf8:	4b05      	ldr	r3, [pc, #20]	; (801fc10 <prvCheckForValidListAndQueue+0x60>)
 801fbfa:	681b      	ldr	r3, [r3, #0]
 801fbfc:	490b      	ldr	r1, [pc, #44]	; (801fc2c <prvCheckForValidListAndQueue+0x7c>)
 801fbfe:	4618      	mov	r0, r3
 801fc00:	f7fe fd22 	bl	801e648 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801fc04:	f000 f876 	bl	801fcf4 <vPortExitCritical>
}
 801fc08:	bf00      	nop
 801fc0a:	46bd      	mov	sp, r7
 801fc0c:	bd80      	pop	{r7, pc}
 801fc0e:	bf00      	nop
 801fc10:	20001bf8 	.word	0x20001bf8
 801fc14:	20001bc8 	.word	0x20001bc8
 801fc18:	20001bdc 	.word	0x20001bdc
 801fc1c:	20001bf0 	.word	0x20001bf0
 801fc20:	20001bf4 	.word	0x20001bf4
 801fc24:	20001ca4 	.word	0x20001ca4
 801fc28:	20001c04 	.word	0x20001c04
 801fc2c:	08023f74 	.word	0x08023f74

0801fc30 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 801fc30:	b480      	push	{r7}
 801fc32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801fc34:	4b0b      	ldr	r3, [pc, #44]	; (801fc64 <vPortSetupTimerInterrupt+0x34>)
 801fc36:	2200      	movs	r2, #0
 801fc38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801fc3a:	4b0b      	ldr	r3, [pc, #44]	; (801fc68 <vPortSetupTimerInterrupt+0x38>)
 801fc3c:	2200      	movs	r2, #0
 801fc3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801fc40:	4b0a      	ldr	r3, [pc, #40]	; (801fc6c <vPortSetupTimerInterrupt+0x3c>)
 801fc42:	681b      	ldr	r3, [r3, #0]
 801fc44:	4a0a      	ldr	r2, [pc, #40]	; (801fc70 <vPortSetupTimerInterrupt+0x40>)
 801fc46:	fba2 2303 	umull	r2, r3, r2, r3
 801fc4a:	099b      	lsrs	r3, r3, #6
 801fc4c:	4a09      	ldr	r2, [pc, #36]	; (801fc74 <vPortSetupTimerInterrupt+0x44>)
 801fc4e:	3b01      	subs	r3, #1
 801fc50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 801fc52:	4b04      	ldr	r3, [pc, #16]	; (801fc64 <vPortSetupTimerInterrupt+0x34>)
 801fc54:	2207      	movs	r2, #7
 801fc56:	601a      	str	r2, [r3, #0]
}
 801fc58:	bf00      	nop
 801fc5a:	46bd      	mov	sp, r7
 801fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc60:	4770      	bx	lr
 801fc62:	bf00      	nop
 801fc64:	e000e010 	.word	0xe000e010
 801fc68:	e000e018 	.word	0xe000e018
 801fc6c:	20000090 	.word	0x20000090
 801fc70:	10624dd3 	.word	0x10624dd3
 801fc74:	e000e014 	.word	0xe000e014

0801fc78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801fc78:	b580      	push	{r7, lr}
 801fc7a:	b082      	sub	sp, #8
 801fc7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801fc7e:	2300      	movs	r3, #0
 801fc80:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 801fc82:	4b09      	ldr	r3, [pc, #36]	; (801fca8 <prvTaskExitError+0x30>)
 801fc84:	681b      	ldr	r3, [r3, #0]
 801fc86:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fc8a:	d002      	beq.n	801fc92 <prvTaskExitError+0x1a>
 801fc8c:	f000 f954 	bl	801ff38 <ulSetInterruptMask>
 801fc90:	e7fe      	b.n	801fc90 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 801fc92:	f000 f951 	bl	801ff38 <ulSetInterruptMask>

	while( ulDummy == 0 )
 801fc96:	bf00      	nop
 801fc98:	687b      	ldr	r3, [r7, #4]
 801fc9a:	2b00      	cmp	r3, #0
 801fc9c:	d0fc      	beq.n	801fc98 <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 801fc9e:	bf00      	nop
 801fca0:	bf00      	nop
 801fca2:	3708      	adds	r7, #8
 801fca4:	46bd      	mov	sp, r7
 801fca6:	bd80      	pop	{r7, pc}
 801fca8:	2000009c 	.word	0x2000009c

0801fcac <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 801fcac:	b480      	push	{r7}
 801fcae:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801fcb0:	4b06      	ldr	r3, [pc, #24]	; (801fccc <vPortYield+0x20>)
 801fcb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fcb6:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801fcb8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801fcbc:	f3bf 8f6f 	isb	sy
}
 801fcc0:	bf00      	nop
 801fcc2:	46bd      	mov	sp, r7
 801fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcc8:	4770      	bx	lr
 801fcca:	bf00      	nop
 801fccc:	e000ed04 	.word	0xe000ed04

0801fcd0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 801fcd0:	b580      	push	{r7, lr}
 801fcd2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 801fcd4:	f000 f930 	bl	801ff38 <ulSetInterruptMask>
	ulCriticalNesting++;
 801fcd8:	4b05      	ldr	r3, [pc, #20]	; (801fcf0 <vPortEnterCritical+0x20>)
 801fcda:	681b      	ldr	r3, [r3, #0]
 801fcdc:	3301      	adds	r3, #1
 801fcde:	4a04      	ldr	r2, [pc, #16]	; (801fcf0 <vPortEnterCritical+0x20>)
 801fce0:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801fce2:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801fce6:	f3bf 8f6f 	isb	sy
}
 801fcea:	bf00      	nop
 801fcec:	bd80      	pop	{r7, pc}
 801fcee:	bf00      	nop
 801fcf0:	2000009c 	.word	0x2000009c

0801fcf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 801fcf4:	b580      	push	{r7, lr}
 801fcf6:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 801fcf8:	4b0a      	ldr	r3, [pc, #40]	; (801fd24 <vPortExitCritical+0x30>)
 801fcfa:	681b      	ldr	r3, [r3, #0]
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	d102      	bne.n	801fd06 <vPortExitCritical+0x12>
 801fd00:	f000 f91a 	bl	801ff38 <ulSetInterruptMask>
 801fd04:	e7fe      	b.n	801fd04 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 801fd06:	4b07      	ldr	r3, [pc, #28]	; (801fd24 <vPortExitCritical+0x30>)
 801fd08:	681b      	ldr	r3, [r3, #0]
 801fd0a:	3b01      	subs	r3, #1
 801fd0c:	4a05      	ldr	r2, [pc, #20]	; (801fd24 <vPortExitCritical+0x30>)
 801fd0e:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 801fd10:	4b04      	ldr	r3, [pc, #16]	; (801fd24 <vPortExitCritical+0x30>)
 801fd12:	681b      	ldr	r3, [r3, #0]
 801fd14:	2b00      	cmp	r3, #0
 801fd16:	d102      	bne.n	801fd1e <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 801fd18:	2000      	movs	r0, #0
 801fd1a:	f000 f91a 	bl	801ff52 <vClearInterruptMask>
	}
}
 801fd1e:	bf00      	nop
 801fd20:	bd80      	pop	{r7, pc}
 801fd22:	bf00      	nop
 801fd24:	2000009c 	.word	0x2000009c

0801fd28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 801fd28:	b580      	push	{r7, lr}
 801fd2a:	b082      	sub	sp, #8
 801fd2c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801fd2e:	f000 f903 	bl	801ff38 <ulSetInterruptMask>
 801fd32:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801fd34:	f7ff f8c2 	bl	801eebc <xTaskIncrementTick>
 801fd38:	4603      	mov	r3, r0
 801fd3a:	2b00      	cmp	r3, #0
 801fd3c:	d003      	beq.n	801fd46 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801fd3e:	4b05      	ldr	r3, [pc, #20]	; (801fd54 <xPortSysTickHandler+0x2c>)
 801fd40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fd44:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 801fd46:	6878      	ldr	r0, [r7, #4]
 801fd48:	f000 f903 	bl	801ff52 <vClearInterruptMask>
}
 801fd4c:	bf00      	nop
 801fd4e:	3708      	adds	r7, #8
 801fd50:	46bd      	mov	sp, r7
 801fd52:	bd80      	pop	{r7, pc}
 801fd54:	e000ed04 	.word	0xe000ed04

0801fd58 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 801fd58:	b580      	push	{r7, lr}
 801fd5a:	b084      	sub	sp, #16
 801fd5c:	af00      	add	r7, sp, #0
 801fd5e:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 801fd60:	687b      	ldr	r3, [r7, #4]
 801fd62:	699b      	ldr	r3, [r3, #24]
 801fd64:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 801fd66:	68fb      	ldr	r3, [r7, #12]
 801fd68:	3b02      	subs	r3, #2
 801fd6a:	781b      	ldrb	r3, [r3, #0]
 801fd6c:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 801fd6e:	7afb      	ldrb	r3, [r7, #11]
 801fd70:	2b02      	cmp	r3, #2
 801fd72:	d102      	bne.n	801fd7a <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 801fd74:	f000 f8b4 	bl	801fee0 <vRestoreContextOfFirstTask>
		}
		break;
 801fd78:	e002      	b.n	801fd80 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 801fd7a:	f000 f8dd 	bl	801ff38 <ulSetInterruptMask>
 801fd7e:	e7fe      	b.n	801fd7e <vPortSVCHandler_C+0x26>
		}
	}
}
 801fd80:	bf00      	nop
 801fd82:	3710      	adds	r7, #16
 801fd84:	46bd      	mov	sp, r7
 801fd86:	bd80      	pop	{r7, pc}

0801fd88 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 801fd88:	b480      	push	{r7}
 801fd8a:	b085      	sub	sp, #20
 801fd8c:	af00      	add	r7, sp, #0
 801fd8e:	60f8      	str	r0, [r7, #12]
 801fd90:	60b9      	str	r1, [r7, #8]
 801fd92:	607a      	str	r2, [r7, #4]
 801fd94:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 801fd96:	68fb      	ldr	r3, [r7, #12]
 801fd98:	3b04      	subs	r3, #4
 801fd9a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 801fd9c:	68fb      	ldr	r3, [r7, #12]
 801fd9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801fda2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fda4:	68fb      	ldr	r3, [r7, #12]
 801fda6:	3b04      	subs	r3, #4
 801fda8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 801fdaa:	687a      	ldr	r2, [r7, #4]
 801fdac:	68fb      	ldr	r3, [r7, #12]
 801fdae:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fdb0:	68fb      	ldr	r3, [r7, #12]
 801fdb2:	3b04      	subs	r3, #4
 801fdb4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801fdb6:	4a38      	ldr	r2, [pc, #224]	; (801fe98 <pxPortInitialiseStack+0x110>)
 801fdb8:	68fb      	ldr	r3, [r7, #12]
 801fdba:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fdbc:	68fb      	ldr	r3, [r7, #12]
 801fdbe:	3b04      	subs	r3, #4
 801fdc0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 801fdc2:	68fb      	ldr	r3, [r7, #12]
 801fdc4:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 801fdc8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fdca:	68fb      	ldr	r3, [r7, #12]
 801fdcc:	3b04      	subs	r3, #4
 801fdce:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 801fdd0:	68fb      	ldr	r3, [r7, #12]
 801fdd2:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 801fdd6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fdd8:	68fb      	ldr	r3, [r7, #12]
 801fdda:	3b04      	subs	r3, #4
 801fddc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 801fdde:	68fb      	ldr	r3, [r7, #12]
 801fde0:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 801fde4:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fde6:	68fb      	ldr	r3, [r7, #12]
 801fde8:	3b04      	subs	r3, #4
 801fdea:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 801fdec:	68fb      	ldr	r3, [r7, #12]
 801fdee:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 801fdf2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fdf4:	68fb      	ldr	r3, [r7, #12]
 801fdf6:	3b04      	subs	r3, #4
 801fdf8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 801fdfa:	683a      	ldr	r2, [r7, #0]
 801fdfc:	68fb      	ldr	r3, [r7, #12]
 801fdfe:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fe00:	68fb      	ldr	r3, [r7, #12]
 801fe02:	3b04      	subs	r3, #4
 801fe04:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 801fe06:	68fb      	ldr	r3, [r7, #12]
 801fe08:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 801fe0c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fe0e:	68fb      	ldr	r3, [r7, #12]
 801fe10:	3b04      	subs	r3, #4
 801fe12:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 801fe14:	68fb      	ldr	r3, [r7, #12]
 801fe16:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 801fe1a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fe1c:	68fb      	ldr	r3, [r7, #12]
 801fe1e:	3b04      	subs	r3, #4
 801fe20:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 801fe22:	68fb      	ldr	r3, [r7, #12]
 801fe24:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 801fe28:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fe2a:	68fb      	ldr	r3, [r7, #12]
 801fe2c:	3b04      	subs	r3, #4
 801fe2e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 801fe30:	68fb      	ldr	r3, [r7, #12]
 801fe32:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 801fe36:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fe38:	68fb      	ldr	r3, [r7, #12]
 801fe3a:	3b04      	subs	r3, #4
 801fe3c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 801fe3e:	68fb      	ldr	r3, [r7, #12]
 801fe40:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 801fe44:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fe46:	68fb      	ldr	r3, [r7, #12]
 801fe48:	3b04      	subs	r3, #4
 801fe4a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 801fe4c:	68fb      	ldr	r3, [r7, #12]
 801fe4e:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 801fe52:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fe54:	68fb      	ldr	r3, [r7, #12]
 801fe56:	3b04      	subs	r3, #4
 801fe58:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 801fe5a:	68fb      	ldr	r3, [r7, #12]
 801fe5c:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 801fe60:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fe62:	68fb      	ldr	r3, [r7, #12]
 801fe64:	3b04      	subs	r3, #4
 801fe66:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 801fe68:	68fb      	ldr	r3, [r7, #12]
 801fe6a:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 801fe6e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fe70:	68fb      	ldr	r3, [r7, #12]
 801fe72:	3b04      	subs	r3, #4
 801fe74:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 801fe76:	68fb      	ldr	r3, [r7, #12]
 801fe78:	f06f 0243 	mvn.w	r2, #67	; 0x43
 801fe7c:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 801fe7e:	68fb      	ldr	r3, [r7, #12]
 801fe80:	3b04      	subs	r3, #4
 801fe82:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 801fe84:	68ba      	ldr	r2, [r7, #8]
 801fe86:	68fb      	ldr	r3, [r7, #12]
 801fe88:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 801fe8a:	68fb      	ldr	r3, [r7, #12]
}
 801fe8c:	4618      	mov	r0, r3
 801fe8e:	3714      	adds	r7, #20
 801fe90:	46bd      	mov	sp, r7
 801fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe96:	4770      	bx	lr
 801fe98:	0801fc79 	.word	0x0801fc79

0801fe9c <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 801fe9c:	b580      	push	{r7, lr}
 801fe9e:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801fea0:	4b0c      	ldr	r3, [pc, #48]	; (801fed4 <xPortStartScheduler+0x38>)
 801fea2:	681b      	ldr	r3, [r3, #0]
 801fea4:	4a0b      	ldr	r2, [pc, #44]	; (801fed4 <xPortStartScheduler+0x38>)
 801fea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801feaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801feac:	4b09      	ldr	r3, [pc, #36]	; (801fed4 <xPortStartScheduler+0x38>)
 801feae:	681b      	ldr	r3, [r3, #0]
 801feb0:	4a08      	ldr	r2, [pc, #32]	; (801fed4 <xPortStartScheduler+0x38>)
 801feb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801feb6:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 801feb8:	f7ff feba 	bl	801fc30 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 801febc:	4b06      	ldr	r3, [pc, #24]	; (801fed8 <xPortStartScheduler+0x3c>)
 801febe:	2200      	movs	r2, #0
 801fec0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 801fec2:	f000 f825 	bl	801ff10 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 801fec6:	f7ff f8ab 	bl	801f020 <vTaskSwitchContext>
	prvTaskExitError();
 801feca:	f7ff fed5 	bl	801fc78 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 801fece:	2300      	movs	r3, #0
}
 801fed0:	4618      	mov	r0, r3
 801fed2:	bd80      	pop	{r7, pc}
 801fed4:	e000ed20 	.word	0xe000ed20
 801fed8:	2000009c 	.word	0x2000009c
 801fedc:	00000000 	.word	0x00000000

0801fee0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801fee0:	4a07      	ldr	r2, [pc, #28]	; (801ff00 <pxCurrentTCBConst2>)
 801fee2:	6811      	ldr	r1, [r2, #0]
 801fee4:	6808      	ldr	r0, [r1, #0]
 801fee6:	c806      	ldmia	r0!, {r1, r2}
 801fee8:	f381 880b 	msr	PSPLIM, r1
 801feec:	2102      	movs	r1, #2
 801feee:	f381 8814 	msr	CONTROL, r1
 801fef2:	3020      	adds	r0, #32
 801fef4:	f380 8809 	msr	PSP, r0
 801fef8:	f3bf 8f6f 	isb	sy
 801fefc:	4710      	bx	r2
 801fefe:	bf00      	nop

0801ff00 <pxCurrentTCBConst2>:
 801ff00:	200016c8 	.word	0x200016c8
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 801ff04:	bf00      	nop
 801ff06:	bf00      	nop
	...

0801ff10 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801ff10:	4807      	ldr	r0, [pc, #28]	; (801ff30 <xVTORConst>)
 801ff12:	6800      	ldr	r0, [r0, #0]
 801ff14:	6800      	ldr	r0, [r0, #0]
 801ff16:	f380 8808 	msr	MSP, r0
 801ff1a:	b662      	cpsie	i
 801ff1c:	b661      	cpsie	f
 801ff1e:	f3bf 8f4f 	dsb	sy
 801ff22:	f3bf 8f6f 	isb	sy
 801ff26:	df02      	svc	2
 801ff28:	bf00      	nop
 801ff2a:	bf00      	nop
 801ff2c:	f3af 8000 	nop.w

0801ff30 <xVTORConst>:
 801ff30:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 801ff34:	bf00      	nop
 801ff36:	bf00      	nop

0801ff38 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801ff38:	f3ef 8011 	mrs	r0, BASEPRI
 801ff3c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 801ff40:	f381 8811 	msr	BASEPRI, r1
 801ff44:	f3bf 8f4f 	dsb	sy
 801ff48:	f3bf 8f6f 	isb	sy
 801ff4c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801ff4e:	bf00      	nop
 801ff50:	4618      	mov	r0, r3

0801ff52 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801ff52:	f380 8811 	msr	BASEPRI, r0
 801ff56:	f3bf 8f4f 	dsb	sy
 801ff5a:	f3bf 8f6f 	isb	sy
 801ff5e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 801ff60:	bf00      	nop
	...

0801ff70 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801ff70:	f3ef 8009 	mrs	r0, PSP
 801ff74:	f3ef 820b 	mrs	r2, PSPLIM
 801ff78:	4673      	mov	r3, lr
 801ff7a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801ff7e:	4a10      	ldr	r2, [pc, #64]	; (801ffc0 <pxCurrentTCBConst>)
 801ff80:	6811      	ldr	r1, [r2, #0]
 801ff82:	6008      	str	r0, [r1, #0]
 801ff84:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 801ff88:	f380 8811 	msr	BASEPRI, r0
 801ff8c:	f3bf 8f4f 	dsb	sy
 801ff90:	f3bf 8f6f 	isb	sy
 801ff94:	f7ff f844 	bl	801f020 <vTaskSwitchContext>
 801ff98:	f04f 0000 	mov.w	r0, #0
 801ff9c:	f380 8811 	msr	BASEPRI, r0
 801ffa0:	4a07      	ldr	r2, [pc, #28]	; (801ffc0 <pxCurrentTCBConst>)
 801ffa2:	6811      	ldr	r1, [r2, #0]
 801ffa4:	6808      	ldr	r0, [r1, #0]
 801ffa6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801ffaa:	f382 880b 	msr	PSPLIM, r2
 801ffae:	f380 8809 	msr	PSP, r0
 801ffb2:	4718      	bx	r3
 801ffb4:	f3af 8000 	nop.w
 801ffb8:	f3af 8000 	nop.w
 801ffbc:	f3af 8000 	nop.w

0801ffc0 <pxCurrentTCBConst>:
 801ffc0:	200016c8 	.word	0x200016c8
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 801ffc4:	bf00      	nop
 801ffc6:	bf00      	nop
	...

0801ffd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801ffd0:	f01e 0f04 	tst.w	lr, #4
 801ffd4:	bf0c      	ite	eq
 801ffd6:	f3ef 8008 	mrseq	r0, MSP
 801ffda:	f3ef 8009 	mrsne	r0, PSP
 801ffde:	4904      	ldr	r1, [pc, #16]	; (801fff0 <svchandler_address_const>)
 801ffe0:	4708      	bx	r1
 801ffe2:	bf00      	nop
 801ffe4:	f3af 8000 	nop.w
 801ffe8:	f3af 8000 	nop.w
 801ffec:	f3af 8000 	nop.w

0801fff0 <svchandler_address_const>:
 801fff0:	0801fd59 	.word	0x0801fd59
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 801fff4:	bf00      	nop
 801fff6:	bf00      	nop

0801fff8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801fff8:	b580      	push	{r7, lr}
 801fffa:	b086      	sub	sp, #24
 801fffc:	af00      	add	r7, sp, #0
 801fffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8020000:	2300      	movs	r3, #0
 8020002:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8020004:	f7fe feae 	bl	801ed64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8020008:	4b4f      	ldr	r3, [pc, #316]	; (8020148 <pvPortMalloc+0x150>)
 802000a:	681b      	ldr	r3, [r3, #0]
 802000c:	2b00      	cmp	r3, #0
 802000e:	d101      	bne.n	8020014 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8020010:	f000 f8f8 	bl	8020204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8020014:	4b4d      	ldr	r3, [pc, #308]	; (802014c <pvPortMalloc+0x154>)
 8020016:	681a      	ldr	r2, [r3, #0]
 8020018:	687b      	ldr	r3, [r7, #4]
 802001a:	4013      	ands	r3, r2
 802001c:	2b00      	cmp	r3, #0
 802001e:	f040 8083 	bne.w	8020128 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8020022:	687b      	ldr	r3, [r7, #4]
 8020024:	2b00      	cmp	r3, #0
 8020026:	d015      	beq.n	8020054 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8020028:	2208      	movs	r2, #8
 802002a:	687b      	ldr	r3, [r7, #4]
 802002c:	4413      	add	r3, r2
 802002e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8020030:	687b      	ldr	r3, [r7, #4]
 8020032:	f003 0307 	and.w	r3, r3, #7
 8020036:	2b00      	cmp	r3, #0
 8020038:	d00c      	beq.n	8020054 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 802003a:	687b      	ldr	r3, [r7, #4]
 802003c:	f023 0307 	bic.w	r3, r3, #7
 8020040:	3308      	adds	r3, #8
 8020042:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8020044:	687b      	ldr	r3, [r7, #4]
 8020046:	f003 0307 	and.w	r3, r3, #7
 802004a:	2b00      	cmp	r3, #0
 802004c:	d002      	beq.n	8020054 <pvPortMalloc+0x5c>
 802004e:	f7ff ff73 	bl	801ff38 <ulSetInterruptMask>
 8020052:	e7fe      	b.n	8020052 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8020054:	687b      	ldr	r3, [r7, #4]
 8020056:	2b00      	cmp	r3, #0
 8020058:	d066      	beq.n	8020128 <pvPortMalloc+0x130>
 802005a:	4b3d      	ldr	r3, [pc, #244]	; (8020150 <pvPortMalloc+0x158>)
 802005c:	681b      	ldr	r3, [r3, #0]
 802005e:	687a      	ldr	r2, [r7, #4]
 8020060:	429a      	cmp	r2, r3
 8020062:	d861      	bhi.n	8020128 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8020064:	4b3b      	ldr	r3, [pc, #236]	; (8020154 <pvPortMalloc+0x15c>)
 8020066:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8020068:	4b3a      	ldr	r3, [pc, #232]	; (8020154 <pvPortMalloc+0x15c>)
 802006a:	681b      	ldr	r3, [r3, #0]
 802006c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802006e:	e004      	b.n	802007a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8020070:	697b      	ldr	r3, [r7, #20]
 8020072:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8020074:	697b      	ldr	r3, [r7, #20]
 8020076:	681b      	ldr	r3, [r3, #0]
 8020078:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802007a:	697b      	ldr	r3, [r7, #20]
 802007c:	685b      	ldr	r3, [r3, #4]
 802007e:	687a      	ldr	r2, [r7, #4]
 8020080:	429a      	cmp	r2, r3
 8020082:	d903      	bls.n	802008c <pvPortMalloc+0x94>
 8020084:	697b      	ldr	r3, [r7, #20]
 8020086:	681b      	ldr	r3, [r3, #0]
 8020088:	2b00      	cmp	r3, #0
 802008a:	d1f1      	bne.n	8020070 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 802008c:	4b2e      	ldr	r3, [pc, #184]	; (8020148 <pvPortMalloc+0x150>)
 802008e:	681b      	ldr	r3, [r3, #0]
 8020090:	697a      	ldr	r2, [r7, #20]
 8020092:	429a      	cmp	r2, r3
 8020094:	d048      	beq.n	8020128 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8020096:	693b      	ldr	r3, [r7, #16]
 8020098:	681b      	ldr	r3, [r3, #0]
 802009a:	2208      	movs	r2, #8
 802009c:	4413      	add	r3, r2
 802009e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80200a0:	697b      	ldr	r3, [r7, #20]
 80200a2:	681a      	ldr	r2, [r3, #0]
 80200a4:	693b      	ldr	r3, [r7, #16]
 80200a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80200a8:	697b      	ldr	r3, [r7, #20]
 80200aa:	685a      	ldr	r2, [r3, #4]
 80200ac:	687b      	ldr	r3, [r7, #4]
 80200ae:	1ad2      	subs	r2, r2, r3
 80200b0:	2308      	movs	r3, #8
 80200b2:	005b      	lsls	r3, r3, #1
 80200b4:	429a      	cmp	r2, r3
 80200b6:	d917      	bls.n	80200e8 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80200b8:	697a      	ldr	r2, [r7, #20]
 80200ba:	687b      	ldr	r3, [r7, #4]
 80200bc:	4413      	add	r3, r2
 80200be:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80200c0:	68bb      	ldr	r3, [r7, #8]
 80200c2:	f003 0307 	and.w	r3, r3, #7
 80200c6:	2b00      	cmp	r3, #0
 80200c8:	d002      	beq.n	80200d0 <pvPortMalloc+0xd8>
 80200ca:	f7ff ff35 	bl	801ff38 <ulSetInterruptMask>
 80200ce:	e7fe      	b.n	80200ce <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80200d0:	697b      	ldr	r3, [r7, #20]
 80200d2:	685a      	ldr	r2, [r3, #4]
 80200d4:	687b      	ldr	r3, [r7, #4]
 80200d6:	1ad2      	subs	r2, r2, r3
 80200d8:	68bb      	ldr	r3, [r7, #8]
 80200da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80200dc:	697b      	ldr	r3, [r7, #20]
 80200de:	687a      	ldr	r2, [r7, #4]
 80200e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80200e2:	68b8      	ldr	r0, [r7, #8]
 80200e4:	f000 f8f0 	bl	80202c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80200e8:	4b19      	ldr	r3, [pc, #100]	; (8020150 <pvPortMalloc+0x158>)
 80200ea:	681a      	ldr	r2, [r3, #0]
 80200ec:	697b      	ldr	r3, [r7, #20]
 80200ee:	685b      	ldr	r3, [r3, #4]
 80200f0:	1ad3      	subs	r3, r2, r3
 80200f2:	4a17      	ldr	r2, [pc, #92]	; (8020150 <pvPortMalloc+0x158>)
 80200f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80200f6:	4b16      	ldr	r3, [pc, #88]	; (8020150 <pvPortMalloc+0x158>)
 80200f8:	681a      	ldr	r2, [r3, #0]
 80200fa:	4b17      	ldr	r3, [pc, #92]	; (8020158 <pvPortMalloc+0x160>)
 80200fc:	681b      	ldr	r3, [r3, #0]
 80200fe:	429a      	cmp	r2, r3
 8020100:	d203      	bcs.n	802010a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8020102:	4b13      	ldr	r3, [pc, #76]	; (8020150 <pvPortMalloc+0x158>)
 8020104:	681b      	ldr	r3, [r3, #0]
 8020106:	4a14      	ldr	r2, [pc, #80]	; (8020158 <pvPortMalloc+0x160>)
 8020108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 802010a:	697b      	ldr	r3, [r7, #20]
 802010c:	685a      	ldr	r2, [r3, #4]
 802010e:	4b0f      	ldr	r3, [pc, #60]	; (802014c <pvPortMalloc+0x154>)
 8020110:	681b      	ldr	r3, [r3, #0]
 8020112:	431a      	orrs	r2, r3
 8020114:	697b      	ldr	r3, [r7, #20]
 8020116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8020118:	697b      	ldr	r3, [r7, #20]
 802011a:	2200      	movs	r2, #0
 802011c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 802011e:	4b0f      	ldr	r3, [pc, #60]	; (802015c <pvPortMalloc+0x164>)
 8020120:	681b      	ldr	r3, [r3, #0]
 8020122:	3301      	adds	r3, #1
 8020124:	4a0d      	ldr	r2, [pc, #52]	; (802015c <pvPortMalloc+0x164>)
 8020126:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8020128:	f7fe fe2a 	bl	801ed80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 802012c:	68fb      	ldr	r3, [r7, #12]
 802012e:	f003 0307 	and.w	r3, r3, #7
 8020132:	2b00      	cmp	r3, #0
 8020134:	d002      	beq.n	802013c <pvPortMalloc+0x144>
 8020136:	f7ff feff 	bl	801ff38 <ulSetInterruptMask>
 802013a:	e7fe      	b.n	802013a <pvPortMalloc+0x142>
	return pvReturn;
 802013c:	68fb      	ldr	r3, [r7, #12]
}
 802013e:	4618      	mov	r0, r3
 8020140:	3718      	adds	r7, #24
 8020142:	46bd      	mov	sp, r7
 8020144:	bd80      	pop	{r7, pc}
 8020146:	bf00      	nop
 8020148:	20003cfc 	.word	0x20003cfc
 802014c:	20003d10 	.word	0x20003d10
 8020150:	20003d00 	.word	0x20003d00
 8020154:	20003cf4 	.word	0x20003cf4
 8020158:	20003d04 	.word	0x20003d04
 802015c:	20003d08 	.word	0x20003d08

08020160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8020160:	b580      	push	{r7, lr}
 8020162:	b084      	sub	sp, #16
 8020164:	af00      	add	r7, sp, #0
 8020166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8020168:	687b      	ldr	r3, [r7, #4]
 802016a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 802016c:	687b      	ldr	r3, [r7, #4]
 802016e:	2b00      	cmp	r3, #0
 8020170:	d03d      	beq.n	80201ee <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8020172:	2308      	movs	r3, #8
 8020174:	425b      	negs	r3, r3
 8020176:	68fa      	ldr	r2, [r7, #12]
 8020178:	4413      	add	r3, r2
 802017a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 802017c:	68fb      	ldr	r3, [r7, #12]
 802017e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8020180:	68bb      	ldr	r3, [r7, #8]
 8020182:	685a      	ldr	r2, [r3, #4]
 8020184:	4b1c      	ldr	r3, [pc, #112]	; (80201f8 <vPortFree+0x98>)
 8020186:	681b      	ldr	r3, [r3, #0]
 8020188:	4013      	ands	r3, r2
 802018a:	2b00      	cmp	r3, #0
 802018c:	d102      	bne.n	8020194 <vPortFree+0x34>
 802018e:	f7ff fed3 	bl	801ff38 <ulSetInterruptMask>
 8020192:	e7fe      	b.n	8020192 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8020194:	68bb      	ldr	r3, [r7, #8]
 8020196:	681b      	ldr	r3, [r3, #0]
 8020198:	2b00      	cmp	r3, #0
 802019a:	d002      	beq.n	80201a2 <vPortFree+0x42>
 802019c:	f7ff fecc 	bl	801ff38 <ulSetInterruptMask>
 80201a0:	e7fe      	b.n	80201a0 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80201a2:	68bb      	ldr	r3, [r7, #8]
 80201a4:	685a      	ldr	r2, [r3, #4]
 80201a6:	4b14      	ldr	r3, [pc, #80]	; (80201f8 <vPortFree+0x98>)
 80201a8:	681b      	ldr	r3, [r3, #0]
 80201aa:	4013      	ands	r3, r2
 80201ac:	2b00      	cmp	r3, #0
 80201ae:	d01e      	beq.n	80201ee <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80201b0:	68bb      	ldr	r3, [r7, #8]
 80201b2:	681b      	ldr	r3, [r3, #0]
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	d11a      	bne.n	80201ee <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80201b8:	68bb      	ldr	r3, [r7, #8]
 80201ba:	685a      	ldr	r2, [r3, #4]
 80201bc:	4b0e      	ldr	r3, [pc, #56]	; (80201f8 <vPortFree+0x98>)
 80201be:	681b      	ldr	r3, [r3, #0]
 80201c0:	43db      	mvns	r3, r3
 80201c2:	401a      	ands	r2, r3
 80201c4:	68bb      	ldr	r3, [r7, #8]
 80201c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80201c8:	f7fe fdcc 	bl	801ed64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80201cc:	68bb      	ldr	r3, [r7, #8]
 80201ce:	685a      	ldr	r2, [r3, #4]
 80201d0:	4b0a      	ldr	r3, [pc, #40]	; (80201fc <vPortFree+0x9c>)
 80201d2:	681b      	ldr	r3, [r3, #0]
 80201d4:	4413      	add	r3, r2
 80201d6:	4a09      	ldr	r2, [pc, #36]	; (80201fc <vPortFree+0x9c>)
 80201d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80201da:	68b8      	ldr	r0, [r7, #8]
 80201dc:	f000 f874 	bl	80202c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80201e0:	4b07      	ldr	r3, [pc, #28]	; (8020200 <vPortFree+0xa0>)
 80201e2:	681b      	ldr	r3, [r3, #0]
 80201e4:	3301      	adds	r3, #1
 80201e6:	4a06      	ldr	r2, [pc, #24]	; (8020200 <vPortFree+0xa0>)
 80201e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80201ea:	f7fe fdc9 	bl	801ed80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80201ee:	bf00      	nop
 80201f0:	3710      	adds	r7, #16
 80201f2:	46bd      	mov	sp, r7
 80201f4:	bd80      	pop	{r7, pc}
 80201f6:	bf00      	nop
 80201f8:	20003d10 	.word	0x20003d10
 80201fc:	20003d00 	.word	0x20003d00
 8020200:	20003d0c 	.word	0x20003d0c

08020204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8020204:	b480      	push	{r7}
 8020206:	b085      	sub	sp, #20
 8020208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 802020a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802020e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8020210:	4b27      	ldr	r3, [pc, #156]	; (80202b0 <prvHeapInit+0xac>)
 8020212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8020214:	68fb      	ldr	r3, [r7, #12]
 8020216:	f003 0307 	and.w	r3, r3, #7
 802021a:	2b00      	cmp	r3, #0
 802021c:	d00c      	beq.n	8020238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802021e:	68fb      	ldr	r3, [r7, #12]
 8020220:	3307      	adds	r3, #7
 8020222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8020224:	68fb      	ldr	r3, [r7, #12]
 8020226:	f023 0307 	bic.w	r3, r3, #7
 802022a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 802022c:	68ba      	ldr	r2, [r7, #8]
 802022e:	68fb      	ldr	r3, [r7, #12]
 8020230:	1ad3      	subs	r3, r2, r3
 8020232:	4a1f      	ldr	r2, [pc, #124]	; (80202b0 <prvHeapInit+0xac>)
 8020234:	4413      	add	r3, r2
 8020236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8020238:	68fb      	ldr	r3, [r7, #12]
 802023a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 802023c:	4a1d      	ldr	r2, [pc, #116]	; (80202b4 <prvHeapInit+0xb0>)
 802023e:	687b      	ldr	r3, [r7, #4]
 8020240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8020242:	4b1c      	ldr	r3, [pc, #112]	; (80202b4 <prvHeapInit+0xb0>)
 8020244:	2200      	movs	r2, #0
 8020246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8020248:	687b      	ldr	r3, [r7, #4]
 802024a:	68ba      	ldr	r2, [r7, #8]
 802024c:	4413      	add	r3, r2
 802024e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8020250:	2208      	movs	r2, #8
 8020252:	68fb      	ldr	r3, [r7, #12]
 8020254:	1a9b      	subs	r3, r3, r2
 8020256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8020258:	68fb      	ldr	r3, [r7, #12]
 802025a:	f023 0307 	bic.w	r3, r3, #7
 802025e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8020260:	68fb      	ldr	r3, [r7, #12]
 8020262:	4a15      	ldr	r2, [pc, #84]	; (80202b8 <prvHeapInit+0xb4>)
 8020264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8020266:	4b14      	ldr	r3, [pc, #80]	; (80202b8 <prvHeapInit+0xb4>)
 8020268:	681b      	ldr	r3, [r3, #0]
 802026a:	2200      	movs	r2, #0
 802026c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 802026e:	4b12      	ldr	r3, [pc, #72]	; (80202b8 <prvHeapInit+0xb4>)
 8020270:	681b      	ldr	r3, [r3, #0]
 8020272:	2200      	movs	r2, #0
 8020274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8020276:	687b      	ldr	r3, [r7, #4]
 8020278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 802027a:	683b      	ldr	r3, [r7, #0]
 802027c:	68fa      	ldr	r2, [r7, #12]
 802027e:	1ad2      	subs	r2, r2, r3
 8020280:	683b      	ldr	r3, [r7, #0]
 8020282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8020284:	4b0c      	ldr	r3, [pc, #48]	; (80202b8 <prvHeapInit+0xb4>)
 8020286:	681a      	ldr	r2, [r3, #0]
 8020288:	683b      	ldr	r3, [r7, #0]
 802028a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802028c:	683b      	ldr	r3, [r7, #0]
 802028e:	685b      	ldr	r3, [r3, #4]
 8020290:	4a0a      	ldr	r2, [pc, #40]	; (80202bc <prvHeapInit+0xb8>)
 8020292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8020294:	683b      	ldr	r3, [r7, #0]
 8020296:	685b      	ldr	r3, [r3, #4]
 8020298:	4a09      	ldr	r2, [pc, #36]	; (80202c0 <prvHeapInit+0xbc>)
 802029a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 802029c:	4b09      	ldr	r3, [pc, #36]	; (80202c4 <prvHeapInit+0xc0>)
 802029e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80202a2:	601a      	str	r2, [r3, #0]
}
 80202a4:	bf00      	nop
 80202a6:	3714      	adds	r7, #20
 80202a8:	46bd      	mov	sp, r7
 80202aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202ae:	4770      	bx	lr
 80202b0:	20001cf4 	.word	0x20001cf4
 80202b4:	20003cf4 	.word	0x20003cf4
 80202b8:	20003cfc 	.word	0x20003cfc
 80202bc:	20003d04 	.word	0x20003d04
 80202c0:	20003d00 	.word	0x20003d00
 80202c4:	20003d10 	.word	0x20003d10

080202c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80202c8:	b480      	push	{r7}
 80202ca:	b085      	sub	sp, #20
 80202cc:	af00      	add	r7, sp, #0
 80202ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80202d0:	4b28      	ldr	r3, [pc, #160]	; (8020374 <prvInsertBlockIntoFreeList+0xac>)
 80202d2:	60fb      	str	r3, [r7, #12]
 80202d4:	e002      	b.n	80202dc <prvInsertBlockIntoFreeList+0x14>
 80202d6:	68fb      	ldr	r3, [r7, #12]
 80202d8:	681b      	ldr	r3, [r3, #0]
 80202da:	60fb      	str	r3, [r7, #12]
 80202dc:	68fb      	ldr	r3, [r7, #12]
 80202de:	681b      	ldr	r3, [r3, #0]
 80202e0:	687a      	ldr	r2, [r7, #4]
 80202e2:	429a      	cmp	r2, r3
 80202e4:	d8f7      	bhi.n	80202d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80202e6:	68fb      	ldr	r3, [r7, #12]
 80202e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80202ea:	68fb      	ldr	r3, [r7, #12]
 80202ec:	685b      	ldr	r3, [r3, #4]
 80202ee:	68ba      	ldr	r2, [r7, #8]
 80202f0:	4413      	add	r3, r2
 80202f2:	687a      	ldr	r2, [r7, #4]
 80202f4:	429a      	cmp	r2, r3
 80202f6:	d108      	bne.n	802030a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80202f8:	68fb      	ldr	r3, [r7, #12]
 80202fa:	685a      	ldr	r2, [r3, #4]
 80202fc:	687b      	ldr	r3, [r7, #4]
 80202fe:	685b      	ldr	r3, [r3, #4]
 8020300:	441a      	add	r2, r3
 8020302:	68fb      	ldr	r3, [r7, #12]
 8020304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8020306:	68fb      	ldr	r3, [r7, #12]
 8020308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 802030a:	687b      	ldr	r3, [r7, #4]
 802030c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 802030e:	687b      	ldr	r3, [r7, #4]
 8020310:	685b      	ldr	r3, [r3, #4]
 8020312:	68ba      	ldr	r2, [r7, #8]
 8020314:	441a      	add	r2, r3
 8020316:	68fb      	ldr	r3, [r7, #12]
 8020318:	681b      	ldr	r3, [r3, #0]
 802031a:	429a      	cmp	r2, r3
 802031c:	d118      	bne.n	8020350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802031e:	68fb      	ldr	r3, [r7, #12]
 8020320:	681a      	ldr	r2, [r3, #0]
 8020322:	4b15      	ldr	r3, [pc, #84]	; (8020378 <prvInsertBlockIntoFreeList+0xb0>)
 8020324:	681b      	ldr	r3, [r3, #0]
 8020326:	429a      	cmp	r2, r3
 8020328:	d00d      	beq.n	8020346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 802032a:	687b      	ldr	r3, [r7, #4]
 802032c:	685a      	ldr	r2, [r3, #4]
 802032e:	68fb      	ldr	r3, [r7, #12]
 8020330:	681b      	ldr	r3, [r3, #0]
 8020332:	685b      	ldr	r3, [r3, #4]
 8020334:	441a      	add	r2, r3
 8020336:	687b      	ldr	r3, [r7, #4]
 8020338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 802033a:	68fb      	ldr	r3, [r7, #12]
 802033c:	681b      	ldr	r3, [r3, #0]
 802033e:	681a      	ldr	r2, [r3, #0]
 8020340:	687b      	ldr	r3, [r7, #4]
 8020342:	601a      	str	r2, [r3, #0]
 8020344:	e008      	b.n	8020358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8020346:	4b0c      	ldr	r3, [pc, #48]	; (8020378 <prvInsertBlockIntoFreeList+0xb0>)
 8020348:	681a      	ldr	r2, [r3, #0]
 802034a:	687b      	ldr	r3, [r7, #4]
 802034c:	601a      	str	r2, [r3, #0]
 802034e:	e003      	b.n	8020358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8020350:	68fb      	ldr	r3, [r7, #12]
 8020352:	681a      	ldr	r2, [r3, #0]
 8020354:	687b      	ldr	r3, [r7, #4]
 8020356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8020358:	68fa      	ldr	r2, [r7, #12]
 802035a:	687b      	ldr	r3, [r7, #4]
 802035c:	429a      	cmp	r2, r3
 802035e:	d002      	beq.n	8020366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8020360:	68fb      	ldr	r3, [r7, #12]
 8020362:	687a      	ldr	r2, [r7, #4]
 8020364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8020366:	bf00      	nop
 8020368:	3714      	adds	r7, #20
 802036a:	46bd      	mov	sp, r7
 802036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020370:	4770      	bx	lr
 8020372:	bf00      	nop
 8020374:	20003cf4 	.word	0x20003cf4
 8020378:	20003cfc 	.word	0x20003cfc

0802037c <_ZdlPv>:
 802037c:	f001 bfbe 	b.w	80222fc <free>

08020380 <_ZdlPvj>:
 8020380:	f7ff bffc 	b.w	802037c <_ZdlPv>

08020384 <_Znwj>:
 8020384:	2801      	cmp	r0, #1
 8020386:	bf38      	it	cc
 8020388:	2001      	movcc	r0, #1
 802038a:	b510      	push	{r4, lr}
 802038c:	4604      	mov	r4, r0
 802038e:	4620      	mov	r0, r4
 8020390:	f001 ffac 	bl	80222ec <malloc>
 8020394:	b930      	cbnz	r0, 80203a4 <_Znwj+0x20>
 8020396:	f000 f80f 	bl	80203b8 <_ZSt15get_new_handlerv>
 802039a:	b908      	cbnz	r0, 80203a0 <_Znwj+0x1c>
 802039c:	f001 ff74 	bl	8022288 <abort>
 80203a0:	4780      	blx	r0
 80203a2:	e7f4      	b.n	802038e <_Znwj+0xa>
 80203a4:	bd10      	pop	{r4, pc}

080203a6 <_ZNSaIcEC1Ev>:
 80203a6:	4770      	bx	lr

080203a8 <_ZNSaIcEC1ERKS_>:
 80203a8:	4770      	bx	lr

080203aa <_ZNSaIcED1Ev>:
 80203aa:	4770      	bx	lr

080203ac <_ZSt17__throw_bad_allocv>:
 80203ac:	b508      	push	{r3, lr}
 80203ae:	f001 ff6b 	bl	8022288 <abort>

080203b2 <_ZSt20__throw_length_errorPKc>:
 80203b2:	b508      	push	{r3, lr}
 80203b4:	f001 ff68 	bl	8022288 <abort>

080203b8 <_ZSt15get_new_handlerv>:
 80203b8:	4b01      	ldr	r3, [pc, #4]	; (80203c0 <_ZSt15get_new_handlerv+0x8>)
 80203ba:	e8d3 0faf 	lda	r0, [r3]
 80203be:	4770      	bx	lr
 80203c0:	20003d14 	.word	0x20003d14

080203c4 <cosf>:
 80203c4:	ee10 3a10 	vmov	r3, s0
 80203c8:	b507      	push	{r0, r1, r2, lr}
 80203ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80203ce:	4a1d      	ldr	r2, [pc, #116]	; (8020444 <cosf+0x80>)
 80203d0:	4293      	cmp	r3, r2
 80203d2:	dc06      	bgt.n	80203e2 <cosf+0x1e>
 80203d4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8020448 <cosf+0x84>
 80203d8:	b003      	add	sp, #12
 80203da:	f85d eb04 	ldr.w	lr, [sp], #4
 80203de:	f001 ba1b 	b.w	8021818 <__kernel_cosf>
 80203e2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80203e6:	db04      	blt.n	80203f2 <cosf+0x2e>
 80203e8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80203ec:	b003      	add	sp, #12
 80203ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80203f2:	4668      	mov	r0, sp
 80203f4:	f001 f8d4 	bl	80215a0 <__ieee754_rem_pio2f>
 80203f8:	f000 0003 	and.w	r0, r0, #3
 80203fc:	2801      	cmp	r0, #1
 80203fe:	d009      	beq.n	8020414 <cosf+0x50>
 8020400:	2802      	cmp	r0, #2
 8020402:	d010      	beq.n	8020426 <cosf+0x62>
 8020404:	b9b0      	cbnz	r0, 8020434 <cosf+0x70>
 8020406:	eddd 0a01 	vldr	s1, [sp, #4]
 802040a:	ed9d 0a00 	vldr	s0, [sp]
 802040e:	f001 fa03 	bl	8021818 <__kernel_cosf>
 8020412:	e7eb      	b.n	80203ec <cosf+0x28>
 8020414:	eddd 0a01 	vldr	s1, [sp, #4]
 8020418:	ed9d 0a00 	vldr	s0, [sp]
 802041c:	f001 fcd4 	bl	8021dc8 <__kernel_sinf>
 8020420:	eeb1 0a40 	vneg.f32	s0, s0
 8020424:	e7e2      	b.n	80203ec <cosf+0x28>
 8020426:	eddd 0a01 	vldr	s1, [sp, #4]
 802042a:	ed9d 0a00 	vldr	s0, [sp]
 802042e:	f001 f9f3 	bl	8021818 <__kernel_cosf>
 8020432:	e7f5      	b.n	8020420 <cosf+0x5c>
 8020434:	2001      	movs	r0, #1
 8020436:	eddd 0a01 	vldr	s1, [sp, #4]
 802043a:	ed9d 0a00 	vldr	s0, [sp]
 802043e:	f001 fcc3 	bl	8021dc8 <__kernel_sinf>
 8020442:	e7d3      	b.n	80203ec <cosf+0x28>
 8020444:	3f490fd8 	.word	0x3f490fd8
 8020448:	00000000 	.word	0x00000000

0802044c <sinf>:
 802044c:	ee10 3a10 	vmov	r3, s0
 8020450:	b507      	push	{r0, r1, r2, lr}
 8020452:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020456:	4a1e      	ldr	r2, [pc, #120]	; (80204d0 <sinf+0x84>)
 8020458:	4293      	cmp	r3, r2
 802045a:	dc07      	bgt.n	802046c <sinf+0x20>
 802045c:	2000      	movs	r0, #0
 802045e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80204d4 <sinf+0x88>
 8020462:	b003      	add	sp, #12
 8020464:	f85d eb04 	ldr.w	lr, [sp], #4
 8020468:	f001 bcae 	b.w	8021dc8 <__kernel_sinf>
 802046c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8020470:	db04      	blt.n	802047c <sinf+0x30>
 8020472:	ee30 0a40 	vsub.f32	s0, s0, s0
 8020476:	b003      	add	sp, #12
 8020478:	f85d fb04 	ldr.w	pc, [sp], #4
 802047c:	4668      	mov	r0, sp
 802047e:	f001 f88f 	bl	80215a0 <__ieee754_rem_pio2f>
 8020482:	f000 0003 	and.w	r0, r0, #3
 8020486:	2801      	cmp	r0, #1
 8020488:	d00a      	beq.n	80204a0 <sinf+0x54>
 802048a:	2802      	cmp	r0, #2
 802048c:	d00f      	beq.n	80204ae <sinf+0x62>
 802048e:	b9c0      	cbnz	r0, 80204c2 <sinf+0x76>
 8020490:	2001      	movs	r0, #1
 8020492:	eddd 0a01 	vldr	s1, [sp, #4]
 8020496:	ed9d 0a00 	vldr	s0, [sp]
 802049a:	f001 fc95 	bl	8021dc8 <__kernel_sinf>
 802049e:	e7ea      	b.n	8020476 <sinf+0x2a>
 80204a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80204a4:	ed9d 0a00 	vldr	s0, [sp]
 80204a8:	f001 f9b6 	bl	8021818 <__kernel_cosf>
 80204ac:	e7e3      	b.n	8020476 <sinf+0x2a>
 80204ae:	2001      	movs	r0, #1
 80204b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80204b4:	ed9d 0a00 	vldr	s0, [sp]
 80204b8:	f001 fc86 	bl	8021dc8 <__kernel_sinf>
 80204bc:	eeb1 0a40 	vneg.f32	s0, s0
 80204c0:	e7d9      	b.n	8020476 <sinf+0x2a>
 80204c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80204c6:	ed9d 0a00 	vldr	s0, [sp]
 80204ca:	f001 f9a5 	bl	8021818 <__kernel_cosf>
 80204ce:	e7f5      	b.n	80204bc <sinf+0x70>
 80204d0:	3f490fd8 	.word	0x3f490fd8
 80204d4:	00000000 	.word	0x00000000

080204d8 <fmod>:
 80204d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80204da:	ec57 6b10 	vmov	r6, r7, d0
 80204de:	ec55 4b11 	vmov	r4, r5, d1
 80204e2:	ed2d 8b02 	vpush	{d8}
 80204e6:	f000 f8c3 	bl	8020670 <__ieee754_fmod>
 80204ea:	4622      	mov	r2, r4
 80204ec:	462b      	mov	r3, r5
 80204ee:	4630      	mov	r0, r6
 80204f0:	4639      	mov	r1, r7
 80204f2:	eeb0 8a40 	vmov.f32	s16, s0
 80204f6:	eef0 8a60 	vmov.f32	s17, s1
 80204fa:	f7e0 fb09 	bl	8000b10 <__aeabi_dcmpun>
 80204fe:	b990      	cbnz	r0, 8020526 <fmod+0x4e>
 8020500:	2200      	movs	r2, #0
 8020502:	2300      	movs	r3, #0
 8020504:	4620      	mov	r0, r4
 8020506:	4629      	mov	r1, r5
 8020508:	f7e0 fad0 	bl	8000aac <__aeabi_dcmpeq>
 802050c:	b158      	cbz	r0, 8020526 <fmod+0x4e>
 802050e:	f001 fec3 	bl	8022298 <__errno>
 8020512:	2321      	movs	r3, #33	; 0x21
 8020514:	2200      	movs	r2, #0
 8020516:	6003      	str	r3, [r0, #0]
 8020518:	2300      	movs	r3, #0
 802051a:	4610      	mov	r0, r2
 802051c:	4619      	mov	r1, r3
 802051e:	f7e0 f987 	bl	8000830 <__aeabi_ddiv>
 8020522:	ec41 0b18 	vmov	d8, r0, r1
 8020526:	eeb0 0a48 	vmov.f32	s0, s16
 802052a:	eef0 0a68 	vmov.f32	s1, s17
 802052e:	ecbd 8b02 	vpop	{d8}
 8020532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020534 <pow>:
 8020534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020536:	ec55 4b11 	vmov	r4, r5, d1
 802053a:	ed2d 8b02 	vpush	{d8}
 802053e:	eeb0 8a40 	vmov.f32	s16, s0
 8020542:	eef0 8a60 	vmov.f32	s17, s1
 8020546:	f000 f9a7 	bl	8020898 <__ieee754_pow>
 802054a:	4622      	mov	r2, r4
 802054c:	462b      	mov	r3, r5
 802054e:	4620      	mov	r0, r4
 8020550:	4629      	mov	r1, r5
 8020552:	ec57 6b10 	vmov	r6, r7, d0
 8020556:	f7e0 fadb 	bl	8000b10 <__aeabi_dcmpun>
 802055a:	2800      	cmp	r0, #0
 802055c:	d13b      	bne.n	80205d6 <pow+0xa2>
 802055e:	2200      	movs	r2, #0
 8020560:	2300      	movs	r3, #0
 8020562:	ec51 0b18 	vmov	r0, r1, d8
 8020566:	f7e0 faa1 	bl	8000aac <__aeabi_dcmpeq>
 802056a:	b1b8      	cbz	r0, 802059c <pow+0x68>
 802056c:	2200      	movs	r2, #0
 802056e:	2300      	movs	r3, #0
 8020570:	4620      	mov	r0, r4
 8020572:	4629      	mov	r1, r5
 8020574:	f7e0 fa9a 	bl	8000aac <__aeabi_dcmpeq>
 8020578:	2800      	cmp	r0, #0
 802057a:	d146      	bne.n	802060a <pow+0xd6>
 802057c:	ec45 4b10 	vmov	d0, r4, r5
 8020580:	f001 fca3 	bl	8021eca <finite>
 8020584:	b338      	cbz	r0, 80205d6 <pow+0xa2>
 8020586:	2200      	movs	r2, #0
 8020588:	2300      	movs	r3, #0
 802058a:	4620      	mov	r0, r4
 802058c:	4629      	mov	r1, r5
 802058e:	f7e0 fa97 	bl	8000ac0 <__aeabi_dcmplt>
 8020592:	b300      	cbz	r0, 80205d6 <pow+0xa2>
 8020594:	f001 fe80 	bl	8022298 <__errno>
 8020598:	2322      	movs	r3, #34	; 0x22
 802059a:	e01b      	b.n	80205d4 <pow+0xa0>
 802059c:	ec47 6b10 	vmov	d0, r6, r7
 80205a0:	f001 fc93 	bl	8021eca <finite>
 80205a4:	b9e0      	cbnz	r0, 80205e0 <pow+0xac>
 80205a6:	eeb0 0a48 	vmov.f32	s0, s16
 80205aa:	eef0 0a68 	vmov.f32	s1, s17
 80205ae:	f001 fc8c 	bl	8021eca <finite>
 80205b2:	b1a8      	cbz	r0, 80205e0 <pow+0xac>
 80205b4:	ec45 4b10 	vmov	d0, r4, r5
 80205b8:	f001 fc87 	bl	8021eca <finite>
 80205bc:	b180      	cbz	r0, 80205e0 <pow+0xac>
 80205be:	4632      	mov	r2, r6
 80205c0:	463b      	mov	r3, r7
 80205c2:	4630      	mov	r0, r6
 80205c4:	4639      	mov	r1, r7
 80205c6:	f7e0 faa3 	bl	8000b10 <__aeabi_dcmpun>
 80205ca:	2800      	cmp	r0, #0
 80205cc:	d0e2      	beq.n	8020594 <pow+0x60>
 80205ce:	f001 fe63 	bl	8022298 <__errno>
 80205d2:	2321      	movs	r3, #33	; 0x21
 80205d4:	6003      	str	r3, [r0, #0]
 80205d6:	ecbd 8b02 	vpop	{d8}
 80205da:	ec47 6b10 	vmov	d0, r6, r7
 80205de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80205e0:	2200      	movs	r2, #0
 80205e2:	2300      	movs	r3, #0
 80205e4:	4630      	mov	r0, r6
 80205e6:	4639      	mov	r1, r7
 80205e8:	f7e0 fa60 	bl	8000aac <__aeabi_dcmpeq>
 80205ec:	2800      	cmp	r0, #0
 80205ee:	d0f2      	beq.n	80205d6 <pow+0xa2>
 80205f0:	eeb0 0a48 	vmov.f32	s0, s16
 80205f4:	eef0 0a68 	vmov.f32	s1, s17
 80205f8:	f001 fc67 	bl	8021eca <finite>
 80205fc:	2800      	cmp	r0, #0
 80205fe:	d0ea      	beq.n	80205d6 <pow+0xa2>
 8020600:	ec45 4b10 	vmov	d0, r4, r5
 8020604:	f001 fc61 	bl	8021eca <finite>
 8020608:	e7c3      	b.n	8020592 <pow+0x5e>
 802060a:	2600      	movs	r6, #0
 802060c:	4f00      	ldr	r7, [pc, #0]	; (8020610 <pow+0xdc>)
 802060e:	e7e2      	b.n	80205d6 <pow+0xa2>
 8020610:	3ff00000 	.word	0x3ff00000

08020614 <sqrt>:
 8020614:	b538      	push	{r3, r4, r5, lr}
 8020616:	ec55 4b10 	vmov	r4, r5, d0
 802061a:	ed2d 8b02 	vpush	{d8}
 802061e:	f000 fe69 	bl	80212f4 <__ieee754_sqrt>
 8020622:	4622      	mov	r2, r4
 8020624:	462b      	mov	r3, r5
 8020626:	4620      	mov	r0, r4
 8020628:	4629      	mov	r1, r5
 802062a:	eeb0 8a40 	vmov.f32	s16, s0
 802062e:	eef0 8a60 	vmov.f32	s17, s1
 8020632:	f7e0 fa6d 	bl	8000b10 <__aeabi_dcmpun>
 8020636:	b990      	cbnz	r0, 802065e <sqrt+0x4a>
 8020638:	2200      	movs	r2, #0
 802063a:	2300      	movs	r3, #0
 802063c:	4620      	mov	r0, r4
 802063e:	4629      	mov	r1, r5
 8020640:	f7e0 fa3e 	bl	8000ac0 <__aeabi_dcmplt>
 8020644:	b158      	cbz	r0, 802065e <sqrt+0x4a>
 8020646:	f001 fe27 	bl	8022298 <__errno>
 802064a:	2321      	movs	r3, #33	; 0x21
 802064c:	2200      	movs	r2, #0
 802064e:	6003      	str	r3, [r0, #0]
 8020650:	2300      	movs	r3, #0
 8020652:	4610      	mov	r0, r2
 8020654:	4619      	mov	r1, r3
 8020656:	f7e0 f8eb 	bl	8000830 <__aeabi_ddiv>
 802065a:	ec41 0b18 	vmov	d8, r0, r1
 802065e:	eeb0 0a48 	vmov.f32	s0, s16
 8020662:	eef0 0a68 	vmov.f32	s1, s17
 8020666:	ecbd 8b02 	vpop	{d8}
 802066a:	bd38      	pop	{r3, r4, r5, pc}

0802066c <atan2f>:
 802066c:	f000 befa 	b.w	8021464 <__ieee754_atan2f>

08020670 <__ieee754_fmod>:
 8020670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020674:	ec53 2b11 	vmov	r2, r3, d1
 8020678:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 802067c:	461e      	mov	r6, r3
 802067e:	ee11 7a10 	vmov	r7, s2
 8020682:	ee11 ca10 	vmov	ip, s2
 8020686:	ea5e 0402 	orrs.w	r4, lr, r2
 802068a:	ec51 0b10 	vmov	r0, r1, d0
 802068e:	d00d      	beq.n	80206ac <__ieee754_fmod+0x3c>
 8020690:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8020694:	4c79      	ldr	r4, [pc, #484]	; (802087c <__ieee754_fmod+0x20c>)
 8020696:	4689      	mov	r9, r1
 8020698:	45a0      	cmp	r8, r4
 802069a:	dc07      	bgt.n	80206ac <__ieee754_fmod+0x3c>
 802069c:	4254      	negs	r4, r2
 802069e:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8020888 <__ieee754_fmod+0x218>
 80206a2:	4314      	orrs	r4, r2
 80206a4:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 80206a8:	455c      	cmp	r4, fp
 80206aa:	d909      	bls.n	80206c0 <__ieee754_fmod+0x50>
 80206ac:	f7df ff96 	bl	80005dc <__aeabi_dmul>
 80206b0:	4602      	mov	r2, r0
 80206b2:	460b      	mov	r3, r1
 80206b4:	f7e0 f8bc 	bl	8000830 <__aeabi_ddiv>
 80206b8:	ec41 0b10 	vmov	d0, r0, r1
 80206bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206c0:	45f0      	cmp	r8, lr
 80206c2:	ee10 aa10 	vmov	sl, s0
 80206c6:	ee10 4a10 	vmov	r4, s0
 80206ca:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80206ce:	dc09      	bgt.n	80206e4 <__ieee754_fmod+0x74>
 80206d0:	dbf2      	blt.n	80206b8 <__ieee754_fmod+0x48>
 80206d2:	4290      	cmp	r0, r2
 80206d4:	d3f0      	bcc.n	80206b8 <__ieee754_fmod+0x48>
 80206d6:	d105      	bne.n	80206e4 <__ieee754_fmod+0x74>
 80206d8:	4b69      	ldr	r3, [pc, #420]	; (8020880 <__ieee754_fmod+0x210>)
 80206da:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 80206de:	e9d5 0100 	ldrd	r0, r1, [r5]
 80206e2:	e7e9      	b.n	80206b8 <__ieee754_fmod+0x48>
 80206e4:	ea19 0f0b 	tst.w	r9, fp
 80206e8:	d14a      	bne.n	8020780 <__ieee754_fmod+0x110>
 80206ea:	f1b8 0f00 	cmp.w	r8, #0
 80206ee:	d13f      	bne.n	8020770 <__ieee754_fmod+0x100>
 80206f0:	4653      	mov	r3, sl
 80206f2:	4964      	ldr	r1, [pc, #400]	; (8020884 <__ieee754_fmod+0x214>)
 80206f4:	2b00      	cmp	r3, #0
 80206f6:	dc38      	bgt.n	802076a <__ieee754_fmod+0xfa>
 80206f8:	4b63      	ldr	r3, [pc, #396]	; (8020888 <__ieee754_fmod+0x218>)
 80206fa:	4033      	ands	r3, r6
 80206fc:	2b00      	cmp	r3, #0
 80206fe:	d14f      	bne.n	80207a0 <__ieee754_fmod+0x130>
 8020700:	f1be 0f00 	cmp.w	lr, #0
 8020704:	d144      	bne.n	8020790 <__ieee754_fmod+0x120>
 8020706:	463b      	mov	r3, r7
 8020708:	4a5e      	ldr	r2, [pc, #376]	; (8020884 <__ieee754_fmod+0x214>)
 802070a:	2b00      	cmp	r3, #0
 802070c:	dc3d      	bgt.n	802078a <__ieee754_fmod+0x11a>
 802070e:	4b5f      	ldr	r3, [pc, #380]	; (802088c <__ieee754_fmod+0x21c>)
 8020710:	4299      	cmp	r1, r3
 8020712:	db4a      	blt.n	80207aa <__ieee754_fmod+0x13a>
 8020714:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802071c:	485b      	ldr	r0, [pc, #364]	; (802088c <__ieee754_fmod+0x21c>)
 802071e:	4282      	cmp	r2, r0
 8020720:	db57      	blt.n	80207d2 <__ieee754_fmod+0x162>
 8020722:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8020726:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 802072a:	1a89      	subs	r1, r1, r2
 802072c:	1b98      	subs	r0, r3, r6
 802072e:	eba4 070c 	sub.w	r7, r4, ip
 8020732:	2900      	cmp	r1, #0
 8020734:	d164      	bne.n	8020800 <__ieee754_fmod+0x190>
 8020736:	4564      	cmp	r4, ip
 8020738:	bf38      	it	cc
 802073a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 802073e:	2800      	cmp	r0, #0
 8020740:	bfa4      	itt	ge
 8020742:	463c      	movge	r4, r7
 8020744:	4603      	movge	r3, r0
 8020746:	ea53 0104 	orrs.w	r1, r3, r4
 802074a:	d0c5      	beq.n	80206d8 <__ieee754_fmod+0x68>
 802074c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8020750:	db6b      	blt.n	802082a <__ieee754_fmod+0x1ba>
 8020752:	494e      	ldr	r1, [pc, #312]	; (802088c <__ieee754_fmod+0x21c>)
 8020754:	428a      	cmp	r2, r1
 8020756:	db6e      	blt.n	8020836 <__ieee754_fmod+0x1c6>
 8020758:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802075c:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8020760:	4620      	mov	r0, r4
 8020762:	431d      	orrs	r5, r3
 8020764:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8020768:	e7a6      	b.n	80206b8 <__ieee754_fmod+0x48>
 802076a:	3901      	subs	r1, #1
 802076c:	005b      	lsls	r3, r3, #1
 802076e:	e7c1      	b.n	80206f4 <__ieee754_fmod+0x84>
 8020770:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8020774:	4945      	ldr	r1, [pc, #276]	; (802088c <__ieee754_fmod+0x21c>)
 8020776:	2b00      	cmp	r3, #0
 8020778:	ddbe      	ble.n	80206f8 <__ieee754_fmod+0x88>
 802077a:	3901      	subs	r1, #1
 802077c:	005b      	lsls	r3, r3, #1
 802077e:	e7fa      	b.n	8020776 <__ieee754_fmod+0x106>
 8020780:	ea4f 5128 	mov.w	r1, r8, asr #20
 8020784:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8020788:	e7b6      	b.n	80206f8 <__ieee754_fmod+0x88>
 802078a:	3a01      	subs	r2, #1
 802078c:	005b      	lsls	r3, r3, #1
 802078e:	e7bc      	b.n	802070a <__ieee754_fmod+0x9a>
 8020790:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8020794:	4a3d      	ldr	r2, [pc, #244]	; (802088c <__ieee754_fmod+0x21c>)
 8020796:	2b00      	cmp	r3, #0
 8020798:	ddb9      	ble.n	802070e <__ieee754_fmod+0x9e>
 802079a:	3a01      	subs	r2, #1
 802079c:	005b      	lsls	r3, r3, #1
 802079e:	e7fa      	b.n	8020796 <__ieee754_fmod+0x126>
 80207a0:	ea4f 522e 	mov.w	r2, lr, asr #20
 80207a4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80207a8:	e7b1      	b.n	802070e <__ieee754_fmod+0x9e>
 80207aa:	1a5c      	subs	r4, r3, r1
 80207ac:	2c1f      	cmp	r4, #31
 80207ae:	dc0a      	bgt.n	80207c6 <__ieee754_fmod+0x156>
 80207b0:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80207b4:	fa08 f804 	lsl.w	r8, r8, r4
 80207b8:	fa0a f404 	lsl.w	r4, sl, r4
 80207bc:	fa2a f303 	lsr.w	r3, sl, r3
 80207c0:	ea43 0308 	orr.w	r3, r3, r8
 80207c4:	e7aa      	b.n	802071c <__ieee754_fmod+0xac>
 80207c6:	4b32      	ldr	r3, [pc, #200]	; (8020890 <__ieee754_fmod+0x220>)
 80207c8:	2400      	movs	r4, #0
 80207ca:	1a5b      	subs	r3, r3, r1
 80207cc:	fa0a f303 	lsl.w	r3, sl, r3
 80207d0:	e7a4      	b.n	802071c <__ieee754_fmod+0xac>
 80207d2:	eba0 0c02 	sub.w	ip, r0, r2
 80207d6:	f1bc 0f1f 	cmp.w	ip, #31
 80207da:	dc0a      	bgt.n	80207f2 <__ieee754_fmod+0x182>
 80207dc:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80207e0:	fa0e fe0c 	lsl.w	lr, lr, ip
 80207e4:	fa07 fc0c 	lsl.w	ip, r7, ip
 80207e8:	fa27 f606 	lsr.w	r6, r7, r6
 80207ec:	ea46 060e 	orr.w	r6, r6, lr
 80207f0:	e79b      	b.n	802072a <__ieee754_fmod+0xba>
 80207f2:	4e27      	ldr	r6, [pc, #156]	; (8020890 <__ieee754_fmod+0x220>)
 80207f4:	f04f 0c00 	mov.w	ip, #0
 80207f8:	1ab6      	subs	r6, r6, r2
 80207fa:	fa07 f606 	lsl.w	r6, r7, r6
 80207fe:	e794      	b.n	802072a <__ieee754_fmod+0xba>
 8020800:	4564      	cmp	r4, ip
 8020802:	bf38      	it	cc
 8020804:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8020808:	2800      	cmp	r0, #0
 802080a:	da05      	bge.n	8020818 <__ieee754_fmod+0x1a8>
 802080c:	0fe0      	lsrs	r0, r4, #31
 802080e:	0064      	lsls	r4, r4, #1
 8020810:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020814:	3901      	subs	r1, #1
 8020816:	e789      	b.n	802072c <__ieee754_fmod+0xbc>
 8020818:	ea50 0307 	orrs.w	r3, r0, r7
 802081c:	f43f af5c 	beq.w	80206d8 <__ieee754_fmod+0x68>
 8020820:	0ffb      	lsrs	r3, r7, #31
 8020822:	007c      	lsls	r4, r7, #1
 8020824:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8020828:	e7f4      	b.n	8020814 <__ieee754_fmod+0x1a4>
 802082a:	0fe1      	lsrs	r1, r4, #31
 802082c:	3a01      	subs	r2, #1
 802082e:	0064      	lsls	r4, r4, #1
 8020830:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8020834:	e78a      	b.n	802074c <__ieee754_fmod+0xdc>
 8020836:	1a89      	subs	r1, r1, r2
 8020838:	2914      	cmp	r1, #20
 802083a:	dc0a      	bgt.n	8020852 <__ieee754_fmod+0x1e2>
 802083c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8020840:	40cc      	lsrs	r4, r1
 8020842:	fa03 f202 	lsl.w	r2, r3, r2
 8020846:	410b      	asrs	r3, r1
 8020848:	4322      	orrs	r2, r4
 802084a:	ea43 0105 	orr.w	r1, r3, r5
 802084e:	4610      	mov	r0, r2
 8020850:	e732      	b.n	80206b8 <__ieee754_fmod+0x48>
 8020852:	291f      	cmp	r1, #31
 8020854:	dc07      	bgt.n	8020866 <__ieee754_fmod+0x1f6>
 8020856:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 802085a:	40cc      	lsrs	r4, r1
 802085c:	fa03 f202 	lsl.w	r2, r3, r2
 8020860:	4322      	orrs	r2, r4
 8020862:	462b      	mov	r3, r5
 8020864:	e7f1      	b.n	802084a <__ieee754_fmod+0x1da>
 8020866:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 802086a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802086e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8020872:	32e2      	adds	r2, #226	; 0xe2
 8020874:	fa43 f202 	asr.w	r2, r3, r2
 8020878:	e7f3      	b.n	8020862 <__ieee754_fmod+0x1f2>
 802087a:	bf00      	nop
 802087c:	7fefffff 	.word	0x7fefffff
 8020880:	080240c0 	.word	0x080240c0
 8020884:	fffffbed 	.word	0xfffffbed
 8020888:	7ff00000 	.word	0x7ff00000
 802088c:	fffffc02 	.word	0xfffffc02
 8020890:	fffffbe2 	.word	0xfffffbe2
 8020894:	00000000 	.word	0x00000000

08020898 <__ieee754_pow>:
 8020898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802089c:	ed2d 8b06 	vpush	{d8-d10}
 80208a0:	b089      	sub	sp, #36	; 0x24
 80208a2:	ed8d 1b00 	vstr	d1, [sp]
 80208a6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80208aa:	ec57 6b10 	vmov	r6, r7, d0
 80208ae:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80208b2:	ea58 0102 	orrs.w	r1, r8, r2
 80208b6:	d115      	bne.n	80208e4 <__ieee754_pow+0x4c>
 80208b8:	19b3      	adds	r3, r6, r6
 80208ba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80208be:	4152      	adcs	r2, r2
 80208c0:	4299      	cmp	r1, r3
 80208c2:	4b89      	ldr	r3, [pc, #548]	; (8020ae8 <__ieee754_pow+0x250>)
 80208c4:	4193      	sbcs	r3, r2
 80208c6:	f080 84d3 	bcs.w	8021270 <__ieee754_pow+0x9d8>
 80208ca:	4630      	mov	r0, r6
 80208cc:	4639      	mov	r1, r7
 80208ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80208d2:	f7df fccd 	bl	8000270 <__adddf3>
 80208d6:	ec41 0b10 	vmov	d0, r0, r1
 80208da:	b009      	add	sp, #36	; 0x24
 80208dc:	ecbd 8b06 	vpop	{d8-d10}
 80208e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80208e4:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80208e8:	4b80      	ldr	r3, [pc, #512]	; (8020aec <__ieee754_pow+0x254>)
 80208ea:	463d      	mov	r5, r7
 80208ec:	ee10 aa10 	vmov	sl, s0
 80208f0:	429c      	cmp	r4, r3
 80208f2:	dc06      	bgt.n	8020902 <__ieee754_pow+0x6a>
 80208f4:	d101      	bne.n	80208fa <__ieee754_pow+0x62>
 80208f6:	2e00      	cmp	r6, #0
 80208f8:	d1e7      	bne.n	80208ca <__ieee754_pow+0x32>
 80208fa:	4598      	cmp	r8, r3
 80208fc:	dc01      	bgt.n	8020902 <__ieee754_pow+0x6a>
 80208fe:	d10f      	bne.n	8020920 <__ieee754_pow+0x88>
 8020900:	b172      	cbz	r2, 8020920 <__ieee754_pow+0x88>
 8020902:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8020906:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 802090a:	ea55 050a 	orrs.w	r5, r5, sl
 802090e:	d1dc      	bne.n	80208ca <__ieee754_pow+0x32>
 8020910:	e9dd 3200 	ldrd	r3, r2, [sp]
 8020914:	18db      	adds	r3, r3, r3
 8020916:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 802091a:	4152      	adcs	r2, r2
 802091c:	429d      	cmp	r5, r3
 802091e:	e7d0      	b.n	80208c2 <__ieee754_pow+0x2a>
 8020920:	2d00      	cmp	r5, #0
 8020922:	da3b      	bge.n	802099c <__ieee754_pow+0x104>
 8020924:	4b72      	ldr	r3, [pc, #456]	; (8020af0 <__ieee754_pow+0x258>)
 8020926:	4598      	cmp	r8, r3
 8020928:	dc51      	bgt.n	80209ce <__ieee754_pow+0x136>
 802092a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802092e:	4598      	cmp	r8, r3
 8020930:	f340 84ad 	ble.w	802128e <__ieee754_pow+0x9f6>
 8020934:	ea4f 5328 	mov.w	r3, r8, asr #20
 8020938:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802093c:	2b14      	cmp	r3, #20
 802093e:	dd0f      	ble.n	8020960 <__ieee754_pow+0xc8>
 8020940:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8020944:	fa22 f103 	lsr.w	r1, r2, r3
 8020948:	fa01 f303 	lsl.w	r3, r1, r3
 802094c:	4293      	cmp	r3, r2
 802094e:	f040 849e 	bne.w	802128e <__ieee754_pow+0x9f6>
 8020952:	f001 0101 	and.w	r1, r1, #1
 8020956:	f1c1 0302 	rsb	r3, r1, #2
 802095a:	9304      	str	r3, [sp, #16]
 802095c:	b182      	cbz	r2, 8020980 <__ieee754_pow+0xe8>
 802095e:	e05f      	b.n	8020a20 <__ieee754_pow+0x188>
 8020960:	2a00      	cmp	r2, #0
 8020962:	d15b      	bne.n	8020a1c <__ieee754_pow+0x184>
 8020964:	f1c3 0314 	rsb	r3, r3, #20
 8020968:	fa48 f103 	asr.w	r1, r8, r3
 802096c:	fa01 f303 	lsl.w	r3, r1, r3
 8020970:	4543      	cmp	r3, r8
 8020972:	f040 8489 	bne.w	8021288 <__ieee754_pow+0x9f0>
 8020976:	f001 0101 	and.w	r1, r1, #1
 802097a:	f1c1 0302 	rsb	r3, r1, #2
 802097e:	9304      	str	r3, [sp, #16]
 8020980:	4b5c      	ldr	r3, [pc, #368]	; (8020af4 <__ieee754_pow+0x25c>)
 8020982:	4598      	cmp	r8, r3
 8020984:	d132      	bne.n	80209ec <__ieee754_pow+0x154>
 8020986:	f1b9 0f00 	cmp.w	r9, #0
 802098a:	f280 8479 	bge.w	8021280 <__ieee754_pow+0x9e8>
 802098e:	4632      	mov	r2, r6
 8020990:	463b      	mov	r3, r7
 8020992:	2000      	movs	r0, #0
 8020994:	4957      	ldr	r1, [pc, #348]	; (8020af4 <__ieee754_pow+0x25c>)
 8020996:	f7df ff4b 	bl	8000830 <__aeabi_ddiv>
 802099a:	e79c      	b.n	80208d6 <__ieee754_pow+0x3e>
 802099c:	2300      	movs	r3, #0
 802099e:	9304      	str	r3, [sp, #16]
 80209a0:	2a00      	cmp	r2, #0
 80209a2:	d13d      	bne.n	8020a20 <__ieee754_pow+0x188>
 80209a4:	4b51      	ldr	r3, [pc, #324]	; (8020aec <__ieee754_pow+0x254>)
 80209a6:	4598      	cmp	r8, r3
 80209a8:	d1ea      	bne.n	8020980 <__ieee754_pow+0xe8>
 80209aa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80209ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80209b2:	ea53 030a 	orrs.w	r3, r3, sl
 80209b6:	f000 845b 	beq.w	8021270 <__ieee754_pow+0x9d8>
 80209ba:	4b4f      	ldr	r3, [pc, #316]	; (8020af8 <__ieee754_pow+0x260>)
 80209bc:	429c      	cmp	r4, r3
 80209be:	dd08      	ble.n	80209d2 <__ieee754_pow+0x13a>
 80209c0:	f1b9 0f00 	cmp.w	r9, #0
 80209c4:	f2c0 8458 	blt.w	8021278 <__ieee754_pow+0x9e0>
 80209c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80209cc:	e783      	b.n	80208d6 <__ieee754_pow+0x3e>
 80209ce:	2302      	movs	r3, #2
 80209d0:	e7e5      	b.n	802099e <__ieee754_pow+0x106>
 80209d2:	f1b9 0f00 	cmp.w	r9, #0
 80209d6:	f04f 0000 	mov.w	r0, #0
 80209da:	f04f 0100 	mov.w	r1, #0
 80209de:	f6bf af7a 	bge.w	80208d6 <__ieee754_pow+0x3e>
 80209e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80209e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80209ea:	e774      	b.n	80208d6 <__ieee754_pow+0x3e>
 80209ec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80209f0:	d106      	bne.n	8020a00 <__ieee754_pow+0x168>
 80209f2:	4632      	mov	r2, r6
 80209f4:	463b      	mov	r3, r7
 80209f6:	4630      	mov	r0, r6
 80209f8:	4639      	mov	r1, r7
 80209fa:	f7df fdef 	bl	80005dc <__aeabi_dmul>
 80209fe:	e76a      	b.n	80208d6 <__ieee754_pow+0x3e>
 8020a00:	4b3e      	ldr	r3, [pc, #248]	; (8020afc <__ieee754_pow+0x264>)
 8020a02:	4599      	cmp	r9, r3
 8020a04:	d10c      	bne.n	8020a20 <__ieee754_pow+0x188>
 8020a06:	2d00      	cmp	r5, #0
 8020a08:	db0a      	blt.n	8020a20 <__ieee754_pow+0x188>
 8020a0a:	ec47 6b10 	vmov	d0, r6, r7
 8020a0e:	b009      	add	sp, #36	; 0x24
 8020a10:	ecbd 8b06 	vpop	{d8-d10}
 8020a14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a18:	f000 bc6c 	b.w	80212f4 <__ieee754_sqrt>
 8020a1c:	2300      	movs	r3, #0
 8020a1e:	9304      	str	r3, [sp, #16]
 8020a20:	ec47 6b10 	vmov	d0, r6, r7
 8020a24:	f001 fa48 	bl	8021eb8 <fabs>
 8020a28:	ec51 0b10 	vmov	r0, r1, d0
 8020a2c:	f1ba 0f00 	cmp.w	sl, #0
 8020a30:	d129      	bne.n	8020a86 <__ieee754_pow+0x1ee>
 8020a32:	b124      	cbz	r4, 8020a3e <__ieee754_pow+0x1a6>
 8020a34:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8020a38:	4b2e      	ldr	r3, [pc, #184]	; (8020af4 <__ieee754_pow+0x25c>)
 8020a3a:	429a      	cmp	r2, r3
 8020a3c:	d123      	bne.n	8020a86 <__ieee754_pow+0x1ee>
 8020a3e:	f1b9 0f00 	cmp.w	r9, #0
 8020a42:	da05      	bge.n	8020a50 <__ieee754_pow+0x1b8>
 8020a44:	4602      	mov	r2, r0
 8020a46:	460b      	mov	r3, r1
 8020a48:	2000      	movs	r0, #0
 8020a4a:	492a      	ldr	r1, [pc, #168]	; (8020af4 <__ieee754_pow+0x25c>)
 8020a4c:	f7df fef0 	bl	8000830 <__aeabi_ddiv>
 8020a50:	2d00      	cmp	r5, #0
 8020a52:	f6bf af40 	bge.w	80208d6 <__ieee754_pow+0x3e>
 8020a56:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8020a5a:	9b04      	ldr	r3, [sp, #16]
 8020a5c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8020a60:	4323      	orrs	r3, r4
 8020a62:	d108      	bne.n	8020a76 <__ieee754_pow+0x1de>
 8020a64:	4602      	mov	r2, r0
 8020a66:	460b      	mov	r3, r1
 8020a68:	4610      	mov	r0, r2
 8020a6a:	4619      	mov	r1, r3
 8020a6c:	f7df fbfe 	bl	800026c <__aeabi_dsub>
 8020a70:	4602      	mov	r2, r0
 8020a72:	460b      	mov	r3, r1
 8020a74:	e78f      	b.n	8020996 <__ieee754_pow+0xfe>
 8020a76:	9b04      	ldr	r3, [sp, #16]
 8020a78:	2b01      	cmp	r3, #1
 8020a7a:	f47f af2c 	bne.w	80208d6 <__ieee754_pow+0x3e>
 8020a7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020a82:	4619      	mov	r1, r3
 8020a84:	e727      	b.n	80208d6 <__ieee754_pow+0x3e>
 8020a86:	0feb      	lsrs	r3, r5, #31
 8020a88:	3b01      	subs	r3, #1
 8020a8a:	9306      	str	r3, [sp, #24]
 8020a8c:	9a06      	ldr	r2, [sp, #24]
 8020a8e:	9b04      	ldr	r3, [sp, #16]
 8020a90:	4313      	orrs	r3, r2
 8020a92:	d102      	bne.n	8020a9a <__ieee754_pow+0x202>
 8020a94:	4632      	mov	r2, r6
 8020a96:	463b      	mov	r3, r7
 8020a98:	e7e6      	b.n	8020a68 <__ieee754_pow+0x1d0>
 8020a9a:	4b19      	ldr	r3, [pc, #100]	; (8020b00 <__ieee754_pow+0x268>)
 8020a9c:	4598      	cmp	r8, r3
 8020a9e:	f340 80fb 	ble.w	8020c98 <__ieee754_pow+0x400>
 8020aa2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8020aa6:	4598      	cmp	r8, r3
 8020aa8:	4b13      	ldr	r3, [pc, #76]	; (8020af8 <__ieee754_pow+0x260>)
 8020aaa:	dd0c      	ble.n	8020ac6 <__ieee754_pow+0x22e>
 8020aac:	429c      	cmp	r4, r3
 8020aae:	dc0f      	bgt.n	8020ad0 <__ieee754_pow+0x238>
 8020ab0:	f1b9 0f00 	cmp.w	r9, #0
 8020ab4:	da0f      	bge.n	8020ad6 <__ieee754_pow+0x23e>
 8020ab6:	2000      	movs	r0, #0
 8020ab8:	b009      	add	sp, #36	; 0x24
 8020aba:	ecbd 8b06 	vpop	{d8-d10}
 8020abe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ac2:	f001 b9f0 	b.w	8021ea6 <__math_oflow>
 8020ac6:	429c      	cmp	r4, r3
 8020ac8:	dbf2      	blt.n	8020ab0 <__ieee754_pow+0x218>
 8020aca:	4b0a      	ldr	r3, [pc, #40]	; (8020af4 <__ieee754_pow+0x25c>)
 8020acc:	429c      	cmp	r4, r3
 8020ace:	dd19      	ble.n	8020b04 <__ieee754_pow+0x26c>
 8020ad0:	f1b9 0f00 	cmp.w	r9, #0
 8020ad4:	dcef      	bgt.n	8020ab6 <__ieee754_pow+0x21e>
 8020ad6:	2000      	movs	r0, #0
 8020ad8:	b009      	add	sp, #36	; 0x24
 8020ada:	ecbd 8b06 	vpop	{d8-d10}
 8020ade:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ae2:	f001 b9d7 	b.w	8021e94 <__math_uflow>
 8020ae6:	bf00      	nop
 8020ae8:	fff00000 	.word	0xfff00000
 8020aec:	7ff00000 	.word	0x7ff00000
 8020af0:	433fffff 	.word	0x433fffff
 8020af4:	3ff00000 	.word	0x3ff00000
 8020af8:	3fefffff 	.word	0x3fefffff
 8020afc:	3fe00000 	.word	0x3fe00000
 8020b00:	41e00000 	.word	0x41e00000
 8020b04:	2200      	movs	r2, #0
 8020b06:	4b60      	ldr	r3, [pc, #384]	; (8020c88 <__ieee754_pow+0x3f0>)
 8020b08:	f7df fbb0 	bl	800026c <__aeabi_dsub>
 8020b0c:	4604      	mov	r4, r0
 8020b0e:	460d      	mov	r5, r1
 8020b10:	a353      	add	r3, pc, #332	; (adr r3, 8020c60 <__ieee754_pow+0x3c8>)
 8020b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b16:	f7df fd61 	bl	80005dc <__aeabi_dmul>
 8020b1a:	4606      	mov	r6, r0
 8020b1c:	460f      	mov	r7, r1
 8020b1e:	4620      	mov	r0, r4
 8020b20:	4629      	mov	r1, r5
 8020b22:	a351      	add	r3, pc, #324	; (adr r3, 8020c68 <__ieee754_pow+0x3d0>)
 8020b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b28:	f7df fd58 	bl	80005dc <__aeabi_dmul>
 8020b2c:	2200      	movs	r2, #0
 8020b2e:	4682      	mov	sl, r0
 8020b30:	468b      	mov	fp, r1
 8020b32:	4b56      	ldr	r3, [pc, #344]	; (8020c8c <__ieee754_pow+0x3f4>)
 8020b34:	4620      	mov	r0, r4
 8020b36:	4629      	mov	r1, r5
 8020b38:	f7df fd50 	bl	80005dc <__aeabi_dmul>
 8020b3c:	4602      	mov	r2, r0
 8020b3e:	460b      	mov	r3, r1
 8020b40:	a14b      	add	r1, pc, #300	; (adr r1, 8020c70 <__ieee754_pow+0x3d8>)
 8020b42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020b46:	f7df fb91 	bl	800026c <__aeabi_dsub>
 8020b4a:	4622      	mov	r2, r4
 8020b4c:	462b      	mov	r3, r5
 8020b4e:	f7df fd45 	bl	80005dc <__aeabi_dmul>
 8020b52:	4602      	mov	r2, r0
 8020b54:	460b      	mov	r3, r1
 8020b56:	2000      	movs	r0, #0
 8020b58:	494d      	ldr	r1, [pc, #308]	; (8020c90 <__ieee754_pow+0x3f8>)
 8020b5a:	f7df fb87 	bl	800026c <__aeabi_dsub>
 8020b5e:	4680      	mov	r8, r0
 8020b60:	4689      	mov	r9, r1
 8020b62:	4622      	mov	r2, r4
 8020b64:	462b      	mov	r3, r5
 8020b66:	4620      	mov	r0, r4
 8020b68:	4629      	mov	r1, r5
 8020b6a:	f7df fd37 	bl	80005dc <__aeabi_dmul>
 8020b6e:	4602      	mov	r2, r0
 8020b70:	460b      	mov	r3, r1
 8020b72:	4640      	mov	r0, r8
 8020b74:	4649      	mov	r1, r9
 8020b76:	f7df fd31 	bl	80005dc <__aeabi_dmul>
 8020b7a:	a33f      	add	r3, pc, #252	; (adr r3, 8020c78 <__ieee754_pow+0x3e0>)
 8020b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b80:	f7df fd2c 	bl	80005dc <__aeabi_dmul>
 8020b84:	4602      	mov	r2, r0
 8020b86:	460b      	mov	r3, r1
 8020b88:	4650      	mov	r0, sl
 8020b8a:	4659      	mov	r1, fp
 8020b8c:	f7df fb6e 	bl	800026c <__aeabi_dsub>
 8020b90:	4602      	mov	r2, r0
 8020b92:	460b      	mov	r3, r1
 8020b94:	4680      	mov	r8, r0
 8020b96:	4689      	mov	r9, r1
 8020b98:	4630      	mov	r0, r6
 8020b9a:	4639      	mov	r1, r7
 8020b9c:	f7df fb68 	bl	8000270 <__adddf3>
 8020ba0:	2000      	movs	r0, #0
 8020ba2:	4632      	mov	r2, r6
 8020ba4:	463b      	mov	r3, r7
 8020ba6:	4604      	mov	r4, r0
 8020ba8:	460d      	mov	r5, r1
 8020baa:	f7df fb5f 	bl	800026c <__aeabi_dsub>
 8020bae:	4602      	mov	r2, r0
 8020bb0:	460b      	mov	r3, r1
 8020bb2:	4640      	mov	r0, r8
 8020bb4:	4649      	mov	r1, r9
 8020bb6:	f7df fb59 	bl	800026c <__aeabi_dsub>
 8020bba:	9b04      	ldr	r3, [sp, #16]
 8020bbc:	9a06      	ldr	r2, [sp, #24]
 8020bbe:	4682      	mov	sl, r0
 8020bc0:	3b01      	subs	r3, #1
 8020bc2:	468b      	mov	fp, r1
 8020bc4:	4313      	orrs	r3, r2
 8020bc6:	f040 81e7 	bne.w	8020f98 <__ieee754_pow+0x700>
 8020bca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8020c80 <__ieee754_pow+0x3e8>
 8020bce:	e9dd 6700 	ldrd	r6, r7, [sp]
 8020bd2:	2600      	movs	r6, #0
 8020bd4:	eeb0 8a47 	vmov.f32	s16, s14
 8020bd8:	eef0 8a67 	vmov.f32	s17, s15
 8020bdc:	463b      	mov	r3, r7
 8020bde:	4632      	mov	r2, r6
 8020be0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020be4:	f7df fb42 	bl	800026c <__aeabi_dsub>
 8020be8:	4622      	mov	r2, r4
 8020bea:	462b      	mov	r3, r5
 8020bec:	f7df fcf6 	bl	80005dc <__aeabi_dmul>
 8020bf0:	4680      	mov	r8, r0
 8020bf2:	4689      	mov	r9, r1
 8020bf4:	4650      	mov	r0, sl
 8020bf6:	4659      	mov	r1, fp
 8020bf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020bfc:	f7df fcee 	bl	80005dc <__aeabi_dmul>
 8020c00:	4602      	mov	r2, r0
 8020c02:	460b      	mov	r3, r1
 8020c04:	4640      	mov	r0, r8
 8020c06:	4649      	mov	r1, r9
 8020c08:	f7df fb32 	bl	8000270 <__adddf3>
 8020c0c:	4680      	mov	r8, r0
 8020c0e:	4689      	mov	r9, r1
 8020c10:	4632      	mov	r2, r6
 8020c12:	463b      	mov	r3, r7
 8020c14:	4620      	mov	r0, r4
 8020c16:	4629      	mov	r1, r5
 8020c18:	f7df fce0 	bl	80005dc <__aeabi_dmul>
 8020c1c:	460b      	mov	r3, r1
 8020c1e:	4604      	mov	r4, r0
 8020c20:	460d      	mov	r5, r1
 8020c22:	4602      	mov	r2, r0
 8020c24:	4649      	mov	r1, r9
 8020c26:	4640      	mov	r0, r8
 8020c28:	f7df fb22 	bl	8000270 <__adddf3>
 8020c2c:	4b19      	ldr	r3, [pc, #100]	; (8020c94 <__ieee754_pow+0x3fc>)
 8020c2e:	4606      	mov	r6, r0
 8020c30:	460f      	mov	r7, r1
 8020c32:	4299      	cmp	r1, r3
 8020c34:	468b      	mov	fp, r1
 8020c36:	ec45 4b19 	vmov	d9, r4, r5
 8020c3a:	f340 82f2 	ble.w	8021222 <__ieee754_pow+0x98a>
 8020c3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8020c42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8020c46:	4303      	orrs	r3, r0
 8020c48:	f000 81e4 	beq.w	8021014 <__ieee754_pow+0x77c>
 8020c4c:	2200      	movs	r2, #0
 8020c4e:	2300      	movs	r3, #0
 8020c50:	ec51 0b18 	vmov	r0, r1, d8
 8020c54:	f7df ff34 	bl	8000ac0 <__aeabi_dcmplt>
 8020c58:	3800      	subs	r0, #0
 8020c5a:	bf18      	it	ne
 8020c5c:	2001      	movne	r0, #1
 8020c5e:	e72b      	b.n	8020ab8 <__ieee754_pow+0x220>
 8020c60:	60000000 	.word	0x60000000
 8020c64:	3ff71547 	.word	0x3ff71547
 8020c68:	f85ddf44 	.word	0xf85ddf44
 8020c6c:	3e54ae0b 	.word	0x3e54ae0b
 8020c70:	55555555 	.word	0x55555555
 8020c74:	3fd55555 	.word	0x3fd55555
 8020c78:	652b82fe 	.word	0x652b82fe
 8020c7c:	3ff71547 	.word	0x3ff71547
 8020c80:	00000000 	.word	0x00000000
 8020c84:	bff00000 	.word	0xbff00000
 8020c88:	3ff00000 	.word	0x3ff00000
 8020c8c:	3fd00000 	.word	0x3fd00000
 8020c90:	3fe00000 	.word	0x3fe00000
 8020c94:	408fffff 	.word	0x408fffff
 8020c98:	4bd5      	ldr	r3, [pc, #852]	; (8020ff0 <__ieee754_pow+0x758>)
 8020c9a:	2200      	movs	r2, #0
 8020c9c:	402b      	ands	r3, r5
 8020c9e:	b92b      	cbnz	r3, 8020cac <__ieee754_pow+0x414>
 8020ca0:	4bd4      	ldr	r3, [pc, #848]	; (8020ff4 <__ieee754_pow+0x75c>)
 8020ca2:	f7df fc9b 	bl	80005dc <__aeabi_dmul>
 8020ca6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8020caa:	460c      	mov	r4, r1
 8020cac:	1523      	asrs	r3, r4, #20
 8020cae:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8020cb2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020cb6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8020cba:	4413      	add	r3, r2
 8020cbc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8020cc0:	9305      	str	r3, [sp, #20]
 8020cc2:	4bcd      	ldr	r3, [pc, #820]	; (8020ff8 <__ieee754_pow+0x760>)
 8020cc4:	429c      	cmp	r4, r3
 8020cc6:	dd08      	ble.n	8020cda <__ieee754_pow+0x442>
 8020cc8:	4bcc      	ldr	r3, [pc, #816]	; (8020ffc <__ieee754_pow+0x764>)
 8020cca:	429c      	cmp	r4, r3
 8020ccc:	f340 8162 	ble.w	8020f94 <__ieee754_pow+0x6fc>
 8020cd0:	9b05      	ldr	r3, [sp, #20]
 8020cd2:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8020cd6:	3301      	adds	r3, #1
 8020cd8:	9305      	str	r3, [sp, #20]
 8020cda:	2400      	movs	r4, #0
 8020cdc:	00e3      	lsls	r3, r4, #3
 8020cde:	4682      	mov	sl, r0
 8020ce0:	4629      	mov	r1, r5
 8020ce2:	46ab      	mov	fp, r5
 8020ce4:	9307      	str	r3, [sp, #28]
 8020ce6:	4bc6      	ldr	r3, [pc, #792]	; (8021000 <__ieee754_pow+0x768>)
 8020ce8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020cec:	ed93 7b00 	vldr	d7, [r3]
 8020cf0:	eeb0 9a47 	vmov.f32	s18, s14
 8020cf4:	eef0 9a67 	vmov.f32	s19, s15
 8020cf8:	ec53 2b17 	vmov	r2, r3, d7
 8020cfc:	f7df fab6 	bl	800026c <__aeabi_dsub>
 8020d00:	4652      	mov	r2, sl
 8020d02:	4606      	mov	r6, r0
 8020d04:	460f      	mov	r7, r1
 8020d06:	462b      	mov	r3, r5
 8020d08:	106d      	asrs	r5, r5, #1
 8020d0a:	ec51 0b19 	vmov	r0, r1, d9
 8020d0e:	f7df faaf 	bl	8000270 <__adddf3>
 8020d12:	4602      	mov	r2, r0
 8020d14:	460b      	mov	r3, r1
 8020d16:	2000      	movs	r0, #0
 8020d18:	49ba      	ldr	r1, [pc, #744]	; (8021004 <__ieee754_pow+0x76c>)
 8020d1a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8020d1e:	f7df fd87 	bl	8000830 <__aeabi_ddiv>
 8020d22:	4602      	mov	r2, r0
 8020d24:	460b      	mov	r3, r1
 8020d26:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8020d2a:	ec41 0b1a 	vmov	d10, r0, r1
 8020d2e:	4630      	mov	r0, r6
 8020d30:	4639      	mov	r1, r7
 8020d32:	f7df fc53 	bl	80005dc <__aeabi_dmul>
 8020d36:	2300      	movs	r3, #0
 8020d38:	2200      	movs	r2, #0
 8020d3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020d3e:	9302      	str	r3, [sp, #8]
 8020d40:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8020d44:	4614      	mov	r4, r2
 8020d46:	461d      	mov	r5, r3
 8020d48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8020d4c:	ec41 0b18 	vmov	d8, r0, r1
 8020d50:	4640      	mov	r0, r8
 8020d52:	4649      	mov	r1, r9
 8020d54:	f7df fc42 	bl	80005dc <__aeabi_dmul>
 8020d58:	4602      	mov	r2, r0
 8020d5a:	460b      	mov	r3, r1
 8020d5c:	4630      	mov	r0, r6
 8020d5e:	4639      	mov	r1, r7
 8020d60:	f7df fa84 	bl	800026c <__aeabi_dsub>
 8020d64:	4606      	mov	r6, r0
 8020d66:	460f      	mov	r7, r1
 8020d68:	4620      	mov	r0, r4
 8020d6a:	4629      	mov	r1, r5
 8020d6c:	ec53 2b19 	vmov	r2, r3, d9
 8020d70:	f7df fa7c 	bl	800026c <__aeabi_dsub>
 8020d74:	4602      	mov	r2, r0
 8020d76:	460b      	mov	r3, r1
 8020d78:	4650      	mov	r0, sl
 8020d7a:	4659      	mov	r1, fp
 8020d7c:	f7df fa76 	bl	800026c <__aeabi_dsub>
 8020d80:	4642      	mov	r2, r8
 8020d82:	464b      	mov	r3, r9
 8020d84:	f7df fc2a 	bl	80005dc <__aeabi_dmul>
 8020d88:	4602      	mov	r2, r0
 8020d8a:	460b      	mov	r3, r1
 8020d8c:	4630      	mov	r0, r6
 8020d8e:	4639      	mov	r1, r7
 8020d90:	f7df fa6c 	bl	800026c <__aeabi_dsub>
 8020d94:	ec53 2b1a 	vmov	r2, r3, d10
 8020d98:	f7df fc20 	bl	80005dc <__aeabi_dmul>
 8020d9c:	ec53 2b18 	vmov	r2, r3, d8
 8020da0:	ec41 0b19 	vmov	d9, r0, r1
 8020da4:	ec51 0b18 	vmov	r0, r1, d8
 8020da8:	f7df fc18 	bl	80005dc <__aeabi_dmul>
 8020dac:	4604      	mov	r4, r0
 8020dae:	460d      	mov	r5, r1
 8020db0:	a37b      	add	r3, pc, #492	; (adr r3, 8020fa0 <__ieee754_pow+0x708>)
 8020db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020db6:	f7df fc11 	bl	80005dc <__aeabi_dmul>
 8020dba:	a37b      	add	r3, pc, #492	; (adr r3, 8020fa8 <__ieee754_pow+0x710>)
 8020dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dc0:	f7df fa56 	bl	8000270 <__adddf3>
 8020dc4:	4622      	mov	r2, r4
 8020dc6:	462b      	mov	r3, r5
 8020dc8:	f7df fc08 	bl	80005dc <__aeabi_dmul>
 8020dcc:	a378      	add	r3, pc, #480	; (adr r3, 8020fb0 <__ieee754_pow+0x718>)
 8020dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dd2:	f7df fa4d 	bl	8000270 <__adddf3>
 8020dd6:	4622      	mov	r2, r4
 8020dd8:	462b      	mov	r3, r5
 8020dda:	f7df fbff 	bl	80005dc <__aeabi_dmul>
 8020dde:	a376      	add	r3, pc, #472	; (adr r3, 8020fb8 <__ieee754_pow+0x720>)
 8020de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020de4:	f7df fa44 	bl	8000270 <__adddf3>
 8020de8:	4622      	mov	r2, r4
 8020dea:	462b      	mov	r3, r5
 8020dec:	f7df fbf6 	bl	80005dc <__aeabi_dmul>
 8020df0:	a373      	add	r3, pc, #460	; (adr r3, 8020fc0 <__ieee754_pow+0x728>)
 8020df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020df6:	f7df fa3b 	bl	8000270 <__adddf3>
 8020dfa:	4622      	mov	r2, r4
 8020dfc:	462b      	mov	r3, r5
 8020dfe:	f7df fbed 	bl	80005dc <__aeabi_dmul>
 8020e02:	a371      	add	r3, pc, #452	; (adr r3, 8020fc8 <__ieee754_pow+0x730>)
 8020e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e08:	f7df fa32 	bl	8000270 <__adddf3>
 8020e0c:	4606      	mov	r6, r0
 8020e0e:	460f      	mov	r7, r1
 8020e10:	4622      	mov	r2, r4
 8020e12:	462b      	mov	r3, r5
 8020e14:	4620      	mov	r0, r4
 8020e16:	4629      	mov	r1, r5
 8020e18:	f7df fbe0 	bl	80005dc <__aeabi_dmul>
 8020e1c:	4602      	mov	r2, r0
 8020e1e:	460b      	mov	r3, r1
 8020e20:	4630      	mov	r0, r6
 8020e22:	4639      	mov	r1, r7
 8020e24:	f7df fbda 	bl	80005dc <__aeabi_dmul>
 8020e28:	4642      	mov	r2, r8
 8020e2a:	4604      	mov	r4, r0
 8020e2c:	460d      	mov	r5, r1
 8020e2e:	464b      	mov	r3, r9
 8020e30:	ec51 0b18 	vmov	r0, r1, d8
 8020e34:	f7df fa1c 	bl	8000270 <__adddf3>
 8020e38:	ec53 2b19 	vmov	r2, r3, d9
 8020e3c:	f7df fbce 	bl	80005dc <__aeabi_dmul>
 8020e40:	4622      	mov	r2, r4
 8020e42:	462b      	mov	r3, r5
 8020e44:	f7df fa14 	bl	8000270 <__adddf3>
 8020e48:	4642      	mov	r2, r8
 8020e4a:	4682      	mov	sl, r0
 8020e4c:	468b      	mov	fp, r1
 8020e4e:	464b      	mov	r3, r9
 8020e50:	4640      	mov	r0, r8
 8020e52:	4649      	mov	r1, r9
 8020e54:	f7df fbc2 	bl	80005dc <__aeabi_dmul>
 8020e58:	2200      	movs	r2, #0
 8020e5a:	4b6b      	ldr	r3, [pc, #428]	; (8021008 <__ieee754_pow+0x770>)
 8020e5c:	4606      	mov	r6, r0
 8020e5e:	460f      	mov	r7, r1
 8020e60:	f7df fa06 	bl	8000270 <__adddf3>
 8020e64:	4652      	mov	r2, sl
 8020e66:	465b      	mov	r3, fp
 8020e68:	f7df fa02 	bl	8000270 <__adddf3>
 8020e6c:	2000      	movs	r0, #0
 8020e6e:	460d      	mov	r5, r1
 8020e70:	460b      	mov	r3, r1
 8020e72:	4604      	mov	r4, r0
 8020e74:	4602      	mov	r2, r0
 8020e76:	4649      	mov	r1, r9
 8020e78:	4640      	mov	r0, r8
 8020e7a:	f7df fbaf 	bl	80005dc <__aeabi_dmul>
 8020e7e:	2200      	movs	r2, #0
 8020e80:	4680      	mov	r8, r0
 8020e82:	4689      	mov	r9, r1
 8020e84:	4b60      	ldr	r3, [pc, #384]	; (8021008 <__ieee754_pow+0x770>)
 8020e86:	4620      	mov	r0, r4
 8020e88:	4629      	mov	r1, r5
 8020e8a:	f7df f9ef 	bl	800026c <__aeabi_dsub>
 8020e8e:	4632      	mov	r2, r6
 8020e90:	463b      	mov	r3, r7
 8020e92:	f7df f9eb 	bl	800026c <__aeabi_dsub>
 8020e96:	4602      	mov	r2, r0
 8020e98:	460b      	mov	r3, r1
 8020e9a:	4650      	mov	r0, sl
 8020e9c:	4659      	mov	r1, fp
 8020e9e:	f7df f9e5 	bl	800026c <__aeabi_dsub>
 8020ea2:	ec53 2b18 	vmov	r2, r3, d8
 8020ea6:	f7df fb99 	bl	80005dc <__aeabi_dmul>
 8020eaa:	4606      	mov	r6, r0
 8020eac:	460f      	mov	r7, r1
 8020eae:	4622      	mov	r2, r4
 8020eb0:	462b      	mov	r3, r5
 8020eb2:	ec51 0b19 	vmov	r0, r1, d9
 8020eb6:	f7df fb91 	bl	80005dc <__aeabi_dmul>
 8020eba:	4602      	mov	r2, r0
 8020ebc:	460b      	mov	r3, r1
 8020ebe:	4630      	mov	r0, r6
 8020ec0:	4639      	mov	r1, r7
 8020ec2:	f7df f9d5 	bl	8000270 <__adddf3>
 8020ec6:	4606      	mov	r6, r0
 8020ec8:	460f      	mov	r7, r1
 8020eca:	4602      	mov	r2, r0
 8020ecc:	460b      	mov	r3, r1
 8020ece:	4640      	mov	r0, r8
 8020ed0:	4649      	mov	r1, r9
 8020ed2:	f7df f9cd 	bl	8000270 <__adddf3>
 8020ed6:	2000      	movs	r0, #0
 8020ed8:	460d      	mov	r5, r1
 8020eda:	4604      	mov	r4, r0
 8020edc:	a33c      	add	r3, pc, #240	; (adr r3, 8020fd0 <__ieee754_pow+0x738>)
 8020ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ee2:	f7df fb7b 	bl	80005dc <__aeabi_dmul>
 8020ee6:	4642      	mov	r2, r8
 8020ee8:	464b      	mov	r3, r9
 8020eea:	ec41 0b18 	vmov	d8, r0, r1
 8020eee:	4620      	mov	r0, r4
 8020ef0:	4629      	mov	r1, r5
 8020ef2:	f7df f9bb 	bl	800026c <__aeabi_dsub>
 8020ef6:	4602      	mov	r2, r0
 8020ef8:	460b      	mov	r3, r1
 8020efa:	4630      	mov	r0, r6
 8020efc:	4639      	mov	r1, r7
 8020efe:	f7df f9b5 	bl	800026c <__aeabi_dsub>
 8020f02:	a335      	add	r3, pc, #212	; (adr r3, 8020fd8 <__ieee754_pow+0x740>)
 8020f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f08:	f7df fb68 	bl	80005dc <__aeabi_dmul>
 8020f0c:	4606      	mov	r6, r0
 8020f0e:	460f      	mov	r7, r1
 8020f10:	4620      	mov	r0, r4
 8020f12:	4629      	mov	r1, r5
 8020f14:	a332      	add	r3, pc, #200	; (adr r3, 8020fe0 <__ieee754_pow+0x748>)
 8020f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f1a:	f7df fb5f 	bl	80005dc <__aeabi_dmul>
 8020f1e:	4602      	mov	r2, r0
 8020f20:	460b      	mov	r3, r1
 8020f22:	4630      	mov	r0, r6
 8020f24:	4639      	mov	r1, r7
 8020f26:	f7df f9a3 	bl	8000270 <__adddf3>
 8020f2a:	9a07      	ldr	r2, [sp, #28]
 8020f2c:	4b37      	ldr	r3, [pc, #220]	; (802100c <__ieee754_pow+0x774>)
 8020f2e:	4413      	add	r3, r2
 8020f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f34:	f7df f99c 	bl	8000270 <__adddf3>
 8020f38:	4682      	mov	sl, r0
 8020f3a:	9805      	ldr	r0, [sp, #20]
 8020f3c:	468b      	mov	fp, r1
 8020f3e:	f7df fae3 	bl	8000508 <__aeabi_i2d>
 8020f42:	9a07      	ldr	r2, [sp, #28]
 8020f44:	4b32      	ldr	r3, [pc, #200]	; (8021010 <__ieee754_pow+0x778>)
 8020f46:	4606      	mov	r6, r0
 8020f48:	460f      	mov	r7, r1
 8020f4a:	4413      	add	r3, r2
 8020f4c:	4652      	mov	r2, sl
 8020f4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020f52:	ec51 0b18 	vmov	r0, r1, d8
 8020f56:	465b      	mov	r3, fp
 8020f58:	f7df f98a 	bl	8000270 <__adddf3>
 8020f5c:	4642      	mov	r2, r8
 8020f5e:	464b      	mov	r3, r9
 8020f60:	f7df f986 	bl	8000270 <__adddf3>
 8020f64:	4632      	mov	r2, r6
 8020f66:	463b      	mov	r3, r7
 8020f68:	f7df f982 	bl	8000270 <__adddf3>
 8020f6c:	2000      	movs	r0, #0
 8020f6e:	4632      	mov	r2, r6
 8020f70:	463b      	mov	r3, r7
 8020f72:	4604      	mov	r4, r0
 8020f74:	460d      	mov	r5, r1
 8020f76:	f7df f979 	bl	800026c <__aeabi_dsub>
 8020f7a:	4642      	mov	r2, r8
 8020f7c:	464b      	mov	r3, r9
 8020f7e:	f7df f975 	bl	800026c <__aeabi_dsub>
 8020f82:	ec53 2b18 	vmov	r2, r3, d8
 8020f86:	f7df f971 	bl	800026c <__aeabi_dsub>
 8020f8a:	4602      	mov	r2, r0
 8020f8c:	460b      	mov	r3, r1
 8020f8e:	4650      	mov	r0, sl
 8020f90:	4659      	mov	r1, fp
 8020f92:	e610      	b.n	8020bb6 <__ieee754_pow+0x31e>
 8020f94:	2401      	movs	r4, #1
 8020f96:	e6a1      	b.n	8020cdc <__ieee754_pow+0x444>
 8020f98:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8020fe8 <__ieee754_pow+0x750>
 8020f9c:	e617      	b.n	8020bce <__ieee754_pow+0x336>
 8020f9e:	bf00      	nop
 8020fa0:	4a454eef 	.word	0x4a454eef
 8020fa4:	3fca7e28 	.word	0x3fca7e28
 8020fa8:	93c9db65 	.word	0x93c9db65
 8020fac:	3fcd864a 	.word	0x3fcd864a
 8020fb0:	a91d4101 	.word	0xa91d4101
 8020fb4:	3fd17460 	.word	0x3fd17460
 8020fb8:	518f264d 	.word	0x518f264d
 8020fbc:	3fd55555 	.word	0x3fd55555
 8020fc0:	db6fabff 	.word	0xdb6fabff
 8020fc4:	3fdb6db6 	.word	0x3fdb6db6
 8020fc8:	33333303 	.word	0x33333303
 8020fcc:	3fe33333 	.word	0x3fe33333
 8020fd0:	e0000000 	.word	0xe0000000
 8020fd4:	3feec709 	.word	0x3feec709
 8020fd8:	dc3a03fd 	.word	0xdc3a03fd
 8020fdc:	3feec709 	.word	0x3feec709
 8020fe0:	145b01f5 	.word	0x145b01f5
 8020fe4:	be3e2fe0 	.word	0xbe3e2fe0
 8020fe8:	00000000 	.word	0x00000000
 8020fec:	3ff00000 	.word	0x3ff00000
 8020ff0:	7ff00000 	.word	0x7ff00000
 8020ff4:	43400000 	.word	0x43400000
 8020ff8:	0003988e 	.word	0x0003988e
 8020ffc:	000bb679 	.word	0x000bb679
 8021000:	080240d0 	.word	0x080240d0
 8021004:	3ff00000 	.word	0x3ff00000
 8021008:	40080000 	.word	0x40080000
 802100c:	080240f0 	.word	0x080240f0
 8021010:	080240e0 	.word	0x080240e0
 8021014:	a3b5      	add	r3, pc, #724	; (adr r3, 80212ec <__ieee754_pow+0xa54>)
 8021016:	e9d3 2300 	ldrd	r2, r3, [r3]
 802101a:	4640      	mov	r0, r8
 802101c:	4649      	mov	r1, r9
 802101e:	f7df f927 	bl	8000270 <__adddf3>
 8021022:	4622      	mov	r2, r4
 8021024:	462b      	mov	r3, r5
 8021026:	ec41 0b1a 	vmov	d10, r0, r1
 802102a:	4630      	mov	r0, r6
 802102c:	4639      	mov	r1, r7
 802102e:	f7df f91d 	bl	800026c <__aeabi_dsub>
 8021032:	4602      	mov	r2, r0
 8021034:	460b      	mov	r3, r1
 8021036:	ec51 0b1a 	vmov	r0, r1, d10
 802103a:	f7df fd5f 	bl	8000afc <__aeabi_dcmpgt>
 802103e:	2800      	cmp	r0, #0
 8021040:	f47f ae04 	bne.w	8020c4c <__ieee754_pow+0x3b4>
 8021044:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8021048:	4aa3      	ldr	r2, [pc, #652]	; (80212d8 <__ieee754_pow+0xa40>)
 802104a:	4293      	cmp	r3, r2
 802104c:	f340 8109 	ble.w	8021262 <__ieee754_pow+0x9ca>
 8021050:	151b      	asrs	r3, r3, #20
 8021052:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8021056:	4ea1      	ldr	r6, [pc, #644]	; (80212dc <__ieee754_pow+0xa44>)
 8021058:	2000      	movs	r0, #0
 802105a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802105e:	f1bb 0f00 	cmp.w	fp, #0
 8021062:	fa4a f303 	asr.w	r3, sl, r3
 8021066:	445b      	add	r3, fp
 8021068:	f3c3 520a 	ubfx	r2, r3, #20, #11
 802106c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8021070:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8021074:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8021078:	fa46 f602 	asr.w	r6, r6, r2
 802107c:	f1c2 0214 	rsb	r2, r2, #20
 8021080:	ea23 0106 	bic.w	r1, r3, r6
 8021084:	fa4a fa02 	asr.w	sl, sl, r2
 8021088:	4602      	mov	r2, r0
 802108a:	4620      	mov	r0, r4
 802108c:	460b      	mov	r3, r1
 802108e:	4629      	mov	r1, r5
 8021090:	bfb8      	it	lt
 8021092:	f1ca 0a00 	rsblt	sl, sl, #0
 8021096:	f7df f8e9 	bl	800026c <__aeabi_dsub>
 802109a:	ec41 0b19 	vmov	d9, r0, r1
 802109e:	4642      	mov	r2, r8
 80210a0:	464b      	mov	r3, r9
 80210a2:	ec51 0b19 	vmov	r0, r1, d9
 80210a6:	f7df f8e3 	bl	8000270 <__adddf3>
 80210aa:	2000      	movs	r0, #0
 80210ac:	460d      	mov	r5, r1
 80210ae:	4604      	mov	r4, r0
 80210b0:	a379      	add	r3, pc, #484	; (adr r3, 8021298 <__ieee754_pow+0xa00>)
 80210b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210b6:	f7df fa91 	bl	80005dc <__aeabi_dmul>
 80210ba:	4606      	mov	r6, r0
 80210bc:	460f      	mov	r7, r1
 80210be:	4620      	mov	r0, r4
 80210c0:	4629      	mov	r1, r5
 80210c2:	ec53 2b19 	vmov	r2, r3, d9
 80210c6:	f7df f8d1 	bl	800026c <__aeabi_dsub>
 80210ca:	4602      	mov	r2, r0
 80210cc:	460b      	mov	r3, r1
 80210ce:	4640      	mov	r0, r8
 80210d0:	4649      	mov	r1, r9
 80210d2:	f7df f8cb 	bl	800026c <__aeabi_dsub>
 80210d6:	a372      	add	r3, pc, #456	; (adr r3, 80212a0 <__ieee754_pow+0xa08>)
 80210d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210dc:	f7df fa7e 	bl	80005dc <__aeabi_dmul>
 80210e0:	4680      	mov	r8, r0
 80210e2:	4689      	mov	r9, r1
 80210e4:	4620      	mov	r0, r4
 80210e6:	4629      	mov	r1, r5
 80210e8:	a36f      	add	r3, pc, #444	; (adr r3, 80212a8 <__ieee754_pow+0xa10>)
 80210ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210ee:	f7df fa75 	bl	80005dc <__aeabi_dmul>
 80210f2:	4602      	mov	r2, r0
 80210f4:	460b      	mov	r3, r1
 80210f6:	4640      	mov	r0, r8
 80210f8:	4649      	mov	r1, r9
 80210fa:	f7df f8b9 	bl	8000270 <__adddf3>
 80210fe:	4604      	mov	r4, r0
 8021100:	460d      	mov	r5, r1
 8021102:	4602      	mov	r2, r0
 8021104:	460b      	mov	r3, r1
 8021106:	4630      	mov	r0, r6
 8021108:	4639      	mov	r1, r7
 802110a:	f7df f8b1 	bl	8000270 <__adddf3>
 802110e:	4632      	mov	r2, r6
 8021110:	4680      	mov	r8, r0
 8021112:	4689      	mov	r9, r1
 8021114:	463b      	mov	r3, r7
 8021116:	f7df f8a9 	bl	800026c <__aeabi_dsub>
 802111a:	4602      	mov	r2, r0
 802111c:	460b      	mov	r3, r1
 802111e:	4620      	mov	r0, r4
 8021120:	4629      	mov	r1, r5
 8021122:	f7df f8a3 	bl	800026c <__aeabi_dsub>
 8021126:	4642      	mov	r2, r8
 8021128:	4606      	mov	r6, r0
 802112a:	460f      	mov	r7, r1
 802112c:	464b      	mov	r3, r9
 802112e:	4640      	mov	r0, r8
 8021130:	4649      	mov	r1, r9
 8021132:	f7df fa53 	bl	80005dc <__aeabi_dmul>
 8021136:	4604      	mov	r4, r0
 8021138:	460d      	mov	r5, r1
 802113a:	a35d      	add	r3, pc, #372	; (adr r3, 80212b0 <__ieee754_pow+0xa18>)
 802113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021140:	f7df fa4c 	bl	80005dc <__aeabi_dmul>
 8021144:	a35c      	add	r3, pc, #368	; (adr r3, 80212b8 <__ieee754_pow+0xa20>)
 8021146:	e9d3 2300 	ldrd	r2, r3, [r3]
 802114a:	f7df f88f 	bl	800026c <__aeabi_dsub>
 802114e:	4622      	mov	r2, r4
 8021150:	462b      	mov	r3, r5
 8021152:	f7df fa43 	bl	80005dc <__aeabi_dmul>
 8021156:	a35a      	add	r3, pc, #360	; (adr r3, 80212c0 <__ieee754_pow+0xa28>)
 8021158:	e9d3 2300 	ldrd	r2, r3, [r3]
 802115c:	f7df f888 	bl	8000270 <__adddf3>
 8021160:	4622      	mov	r2, r4
 8021162:	462b      	mov	r3, r5
 8021164:	f7df fa3a 	bl	80005dc <__aeabi_dmul>
 8021168:	a357      	add	r3, pc, #348	; (adr r3, 80212c8 <__ieee754_pow+0xa30>)
 802116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802116e:	f7df f87d 	bl	800026c <__aeabi_dsub>
 8021172:	4622      	mov	r2, r4
 8021174:	462b      	mov	r3, r5
 8021176:	f7df fa31 	bl	80005dc <__aeabi_dmul>
 802117a:	a355      	add	r3, pc, #340	; (adr r3, 80212d0 <__ieee754_pow+0xa38>)
 802117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021180:	f7df f876 	bl	8000270 <__adddf3>
 8021184:	4622      	mov	r2, r4
 8021186:	462b      	mov	r3, r5
 8021188:	f7df fa28 	bl	80005dc <__aeabi_dmul>
 802118c:	4602      	mov	r2, r0
 802118e:	460b      	mov	r3, r1
 8021190:	4640      	mov	r0, r8
 8021192:	4649      	mov	r1, r9
 8021194:	f7df f86a 	bl	800026c <__aeabi_dsub>
 8021198:	4604      	mov	r4, r0
 802119a:	460d      	mov	r5, r1
 802119c:	4602      	mov	r2, r0
 802119e:	460b      	mov	r3, r1
 80211a0:	4640      	mov	r0, r8
 80211a2:	4649      	mov	r1, r9
 80211a4:	f7df fa1a 	bl	80005dc <__aeabi_dmul>
 80211a8:	2200      	movs	r2, #0
 80211aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80211ae:	ec41 0b19 	vmov	d9, r0, r1
 80211b2:	4620      	mov	r0, r4
 80211b4:	4629      	mov	r1, r5
 80211b6:	f7df f859 	bl	800026c <__aeabi_dsub>
 80211ba:	4602      	mov	r2, r0
 80211bc:	460b      	mov	r3, r1
 80211be:	ec51 0b19 	vmov	r0, r1, d9
 80211c2:	f7df fb35 	bl	8000830 <__aeabi_ddiv>
 80211c6:	4632      	mov	r2, r6
 80211c8:	4604      	mov	r4, r0
 80211ca:	460d      	mov	r5, r1
 80211cc:	463b      	mov	r3, r7
 80211ce:	4640      	mov	r0, r8
 80211d0:	4649      	mov	r1, r9
 80211d2:	f7df fa03 	bl	80005dc <__aeabi_dmul>
 80211d6:	4632      	mov	r2, r6
 80211d8:	463b      	mov	r3, r7
 80211da:	f7df f849 	bl	8000270 <__adddf3>
 80211de:	4602      	mov	r2, r0
 80211e0:	460b      	mov	r3, r1
 80211e2:	4620      	mov	r0, r4
 80211e4:	4629      	mov	r1, r5
 80211e6:	f7df f841 	bl	800026c <__aeabi_dsub>
 80211ea:	4642      	mov	r2, r8
 80211ec:	464b      	mov	r3, r9
 80211ee:	f7df f83d 	bl	800026c <__aeabi_dsub>
 80211f2:	460b      	mov	r3, r1
 80211f4:	4602      	mov	r2, r0
 80211f6:	493a      	ldr	r1, [pc, #232]	; (80212e0 <__ieee754_pow+0xa48>)
 80211f8:	2000      	movs	r0, #0
 80211fa:	f7df f837 	bl	800026c <__aeabi_dsub>
 80211fe:	ec41 0b10 	vmov	d0, r0, r1
 8021202:	ee10 3a90 	vmov	r3, s1
 8021206:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 802120a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802120e:	da2b      	bge.n	8021268 <__ieee754_pow+0x9d0>
 8021210:	4650      	mov	r0, sl
 8021212:	f000 fe65 	bl	8021ee0 <scalbn>
 8021216:	ec51 0b10 	vmov	r0, r1, d0
 802121a:	ec53 2b18 	vmov	r2, r3, d8
 802121e:	f7ff bbec 	b.w	80209fa <__ieee754_pow+0x162>
 8021222:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8021226:	4b2f      	ldr	r3, [pc, #188]	; (80212e4 <__ieee754_pow+0xa4c>)
 8021228:	429e      	cmp	r6, r3
 802122a:	f77f af0b 	ble.w	8021044 <__ieee754_pow+0x7ac>
 802122e:	4b2e      	ldr	r3, [pc, #184]	; (80212e8 <__ieee754_pow+0xa50>)
 8021230:	440b      	add	r3, r1
 8021232:	4303      	orrs	r3, r0
 8021234:	d009      	beq.n	802124a <__ieee754_pow+0x9b2>
 8021236:	2200      	movs	r2, #0
 8021238:	2300      	movs	r3, #0
 802123a:	ec51 0b18 	vmov	r0, r1, d8
 802123e:	f7df fc3f 	bl	8000ac0 <__aeabi_dcmplt>
 8021242:	3800      	subs	r0, #0
 8021244:	bf18      	it	ne
 8021246:	2001      	movne	r0, #1
 8021248:	e446      	b.n	8020ad8 <__ieee754_pow+0x240>
 802124a:	4622      	mov	r2, r4
 802124c:	462b      	mov	r3, r5
 802124e:	f7df f80d 	bl	800026c <__aeabi_dsub>
 8021252:	4642      	mov	r2, r8
 8021254:	464b      	mov	r3, r9
 8021256:	f7df fc47 	bl	8000ae8 <__aeabi_dcmpge>
 802125a:	2800      	cmp	r0, #0
 802125c:	f43f aef2 	beq.w	8021044 <__ieee754_pow+0x7ac>
 8021260:	e7e9      	b.n	8021236 <__ieee754_pow+0x99e>
 8021262:	f04f 0a00 	mov.w	sl, #0
 8021266:	e71a      	b.n	802109e <__ieee754_pow+0x806>
 8021268:	ec51 0b10 	vmov	r0, r1, d0
 802126c:	4619      	mov	r1, r3
 802126e:	e7d4      	b.n	802121a <__ieee754_pow+0x982>
 8021270:	2000      	movs	r0, #0
 8021272:	491b      	ldr	r1, [pc, #108]	; (80212e0 <__ieee754_pow+0xa48>)
 8021274:	f7ff bb2f 	b.w	80208d6 <__ieee754_pow+0x3e>
 8021278:	2000      	movs	r0, #0
 802127a:	2100      	movs	r1, #0
 802127c:	f7ff bb2b 	b.w	80208d6 <__ieee754_pow+0x3e>
 8021280:	4630      	mov	r0, r6
 8021282:	4639      	mov	r1, r7
 8021284:	f7ff bb27 	b.w	80208d6 <__ieee754_pow+0x3e>
 8021288:	9204      	str	r2, [sp, #16]
 802128a:	f7ff bb79 	b.w	8020980 <__ieee754_pow+0xe8>
 802128e:	2300      	movs	r3, #0
 8021290:	f7ff bb63 	b.w	802095a <__ieee754_pow+0xc2>
 8021294:	f3af 8000 	nop.w
 8021298:	00000000 	.word	0x00000000
 802129c:	3fe62e43 	.word	0x3fe62e43
 80212a0:	fefa39ef 	.word	0xfefa39ef
 80212a4:	3fe62e42 	.word	0x3fe62e42
 80212a8:	0ca86c39 	.word	0x0ca86c39
 80212ac:	be205c61 	.word	0xbe205c61
 80212b0:	72bea4d0 	.word	0x72bea4d0
 80212b4:	3e663769 	.word	0x3e663769
 80212b8:	c5d26bf1 	.word	0xc5d26bf1
 80212bc:	3ebbbd41 	.word	0x3ebbbd41
 80212c0:	af25de2c 	.word	0xaf25de2c
 80212c4:	3f11566a 	.word	0x3f11566a
 80212c8:	16bebd93 	.word	0x16bebd93
 80212cc:	3f66c16c 	.word	0x3f66c16c
 80212d0:	5555553e 	.word	0x5555553e
 80212d4:	3fc55555 	.word	0x3fc55555
 80212d8:	3fe00000 	.word	0x3fe00000
 80212dc:	000fffff 	.word	0x000fffff
 80212e0:	3ff00000 	.word	0x3ff00000
 80212e4:	4090cbff 	.word	0x4090cbff
 80212e8:	3f6f3400 	.word	0x3f6f3400
 80212ec:	652b82fe 	.word	0x652b82fe
 80212f0:	3c971547 	.word	0x3c971547

080212f4 <__ieee754_sqrt>:
 80212f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80212f8:	4e59      	ldr	r6, [pc, #356]	; (8021460 <__ieee754_sqrt+0x16c>)
 80212fa:	ee10 0a10 	vmov	r0, s0
 80212fe:	ee10 3a10 	vmov	r3, s0
 8021302:	ec55 4b10 	vmov	r4, r5, d0
 8021306:	43ae      	bics	r6, r5
 8021308:	462a      	mov	r2, r5
 802130a:	4629      	mov	r1, r5
 802130c:	d110      	bne.n	8021330 <__ieee754_sqrt+0x3c>
 802130e:	ee10 2a10 	vmov	r2, s0
 8021312:	462b      	mov	r3, r5
 8021314:	f7df f962 	bl	80005dc <__aeabi_dmul>
 8021318:	4602      	mov	r2, r0
 802131a:	460b      	mov	r3, r1
 802131c:	4620      	mov	r0, r4
 802131e:	4629      	mov	r1, r5
 8021320:	f7de ffa6 	bl	8000270 <__adddf3>
 8021324:	4604      	mov	r4, r0
 8021326:	460d      	mov	r5, r1
 8021328:	ec45 4b10 	vmov	d0, r4, r5
 802132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021330:	2d00      	cmp	r5, #0
 8021332:	dc10      	bgt.n	8021356 <__ieee754_sqrt+0x62>
 8021334:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8021338:	4330      	orrs	r0, r6
 802133a:	d0f5      	beq.n	8021328 <__ieee754_sqrt+0x34>
 802133c:	b15d      	cbz	r5, 8021356 <__ieee754_sqrt+0x62>
 802133e:	ee10 2a10 	vmov	r2, s0
 8021342:	462b      	mov	r3, r5
 8021344:	ee10 0a10 	vmov	r0, s0
 8021348:	f7de ff90 	bl	800026c <__aeabi_dsub>
 802134c:	4602      	mov	r2, r0
 802134e:	460b      	mov	r3, r1
 8021350:	f7df fa6e 	bl	8000830 <__aeabi_ddiv>
 8021354:	e7e6      	b.n	8021324 <__ieee754_sqrt+0x30>
 8021356:	1512      	asrs	r2, r2, #20
 8021358:	d07a      	beq.n	8021450 <__ieee754_sqrt+0x15c>
 802135a:	07d4      	lsls	r4, r2, #31
 802135c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8021360:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8021364:	f04f 0400 	mov.w	r4, #0
 8021368:	bf58      	it	pl
 802136a:	0fda      	lsrpl	r2, r3, #31
 802136c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8021370:	bf58      	it	pl
 8021372:	005b      	lslpl	r3, r3, #1
 8021374:	f04f 0516 	mov.w	r5, #22
 8021378:	bf58      	it	pl
 802137a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 802137e:	4620      	mov	r0, r4
 8021380:	0fda      	lsrs	r2, r3, #31
 8021382:	107f      	asrs	r7, r7, #1
 8021384:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8021388:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 802138c:	005b      	lsls	r3, r3, #1
 802138e:	1886      	adds	r6, r0, r2
 8021390:	428e      	cmp	r6, r1
 8021392:	bfde      	ittt	le
 8021394:	1b89      	suble	r1, r1, r6
 8021396:	18b0      	addle	r0, r6, r2
 8021398:	18a4      	addle	r4, r4, r2
 802139a:	3d01      	subs	r5, #1
 802139c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80213a0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80213a4:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80213a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80213ac:	d1ef      	bne.n	802138e <__ieee754_sqrt+0x9a>
 80213ae:	462a      	mov	r2, r5
 80213b0:	f04f 0e20 	mov.w	lr, #32
 80213b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80213b8:	4281      	cmp	r1, r0
 80213ba:	eb06 0c05 	add.w	ip, r6, r5
 80213be:	dc02      	bgt.n	80213c6 <__ieee754_sqrt+0xd2>
 80213c0:	d113      	bne.n	80213ea <__ieee754_sqrt+0xf6>
 80213c2:	459c      	cmp	ip, r3
 80213c4:	d811      	bhi.n	80213ea <__ieee754_sqrt+0xf6>
 80213c6:	f1bc 0f00 	cmp.w	ip, #0
 80213ca:	eb0c 0506 	add.w	r5, ip, r6
 80213ce:	da44      	bge.n	802145a <__ieee754_sqrt+0x166>
 80213d0:	2d00      	cmp	r5, #0
 80213d2:	db42      	blt.n	802145a <__ieee754_sqrt+0x166>
 80213d4:	f100 0801 	add.w	r8, r0, #1
 80213d8:	1a09      	subs	r1, r1, r0
 80213da:	459c      	cmp	ip, r3
 80213dc:	4432      	add	r2, r6
 80213de:	eba3 030c 	sub.w	r3, r3, ip
 80213e2:	bf88      	it	hi
 80213e4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80213e8:	4640      	mov	r0, r8
 80213ea:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80213ee:	f1be 0e01 	subs.w	lr, lr, #1
 80213f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80213f6:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80213fa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80213fe:	d1db      	bne.n	80213b8 <__ieee754_sqrt+0xc4>
 8021400:	430b      	orrs	r3, r1
 8021402:	d006      	beq.n	8021412 <__ieee754_sqrt+0x11e>
 8021404:	1c50      	adds	r0, r2, #1
 8021406:	bf13      	iteet	ne
 8021408:	3201      	addne	r2, #1
 802140a:	3401      	addeq	r4, #1
 802140c:	4672      	moveq	r2, lr
 802140e:	f022 0201 	bicne.w	r2, r2, #1
 8021412:	1063      	asrs	r3, r4, #1
 8021414:	07e1      	lsls	r1, r4, #31
 8021416:	ea4f 0252 	mov.w	r2, r2, lsr #1
 802141a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 802141e:	bf48      	it	mi
 8021420:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8021424:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8021428:	4614      	mov	r4, r2
 802142a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 802142e:	e77b      	b.n	8021328 <__ieee754_sqrt+0x34>
 8021430:	0ad9      	lsrs	r1, r3, #11
 8021432:	3815      	subs	r0, #21
 8021434:	055b      	lsls	r3, r3, #21
 8021436:	2900      	cmp	r1, #0
 8021438:	d0fa      	beq.n	8021430 <__ieee754_sqrt+0x13c>
 802143a:	02cd      	lsls	r5, r1, #11
 802143c:	d50a      	bpl.n	8021454 <__ieee754_sqrt+0x160>
 802143e:	f1c2 0420 	rsb	r4, r2, #32
 8021442:	1e55      	subs	r5, r2, #1
 8021444:	fa23 f404 	lsr.w	r4, r3, r4
 8021448:	4093      	lsls	r3, r2
 802144a:	1b42      	subs	r2, r0, r5
 802144c:	4321      	orrs	r1, r4
 802144e:	e784      	b.n	802135a <__ieee754_sqrt+0x66>
 8021450:	4610      	mov	r0, r2
 8021452:	e7f0      	b.n	8021436 <__ieee754_sqrt+0x142>
 8021454:	0049      	lsls	r1, r1, #1
 8021456:	3201      	adds	r2, #1
 8021458:	e7ef      	b.n	802143a <__ieee754_sqrt+0x146>
 802145a:	4680      	mov	r8, r0
 802145c:	e7bc      	b.n	80213d8 <__ieee754_sqrt+0xe4>
 802145e:	bf00      	nop
 8021460:	7ff00000 	.word	0x7ff00000

08021464 <__ieee754_atan2f>:
 8021464:	ee10 2a90 	vmov	r2, s1
 8021468:	eef0 7a40 	vmov.f32	s15, s0
 802146c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8021470:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8021474:	b510      	push	{r4, lr}
 8021476:	dc06      	bgt.n	8021486 <__ieee754_atan2f+0x22>
 8021478:	ee10 0a10 	vmov	r0, s0
 802147c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8021480:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8021484:	dd04      	ble.n	8021490 <__ieee754_atan2f+0x2c>
 8021486:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802148a:	eeb0 0a67 	vmov.f32	s0, s15
 802148e:	bd10      	pop	{r4, pc}
 8021490:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8021494:	d103      	bne.n	802149e <__ieee754_atan2f+0x3a>
 8021496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802149a:	f000 bda7 	b.w	8021fec <atanf>
 802149e:	1794      	asrs	r4, r2, #30
 80214a0:	f004 0402 	and.w	r4, r4, #2
 80214a4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80214a8:	b93b      	cbnz	r3, 80214ba <__ieee754_atan2f+0x56>
 80214aa:	2c02      	cmp	r4, #2
 80214ac:	d05c      	beq.n	8021568 <__ieee754_atan2f+0x104>
 80214ae:	2c03      	cmp	r4, #3
 80214b0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 802157c <__ieee754_atan2f+0x118>
 80214b4:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80214b8:	e7e7      	b.n	802148a <__ieee754_atan2f+0x26>
 80214ba:	b939      	cbnz	r1, 80214cc <__ieee754_atan2f+0x68>
 80214bc:	2800      	cmp	r0, #0
 80214be:	eddf 7a30 	vldr	s15, [pc, #192]	; 8021580 <__ieee754_atan2f+0x11c>
 80214c2:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8021584 <__ieee754_atan2f+0x120>
 80214c6:	fe67 7a80 	vselge.f32	s15, s15, s0
 80214ca:	e7de      	b.n	802148a <__ieee754_atan2f+0x26>
 80214cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80214d0:	d110      	bne.n	80214f4 <__ieee754_atan2f+0x90>
 80214d2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80214d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80214da:	d107      	bne.n	80214ec <__ieee754_atan2f+0x88>
 80214dc:	2c02      	cmp	r4, #2
 80214de:	d846      	bhi.n	802156e <__ieee754_atan2f+0x10a>
 80214e0:	4b29      	ldr	r3, [pc, #164]	; (8021588 <__ieee754_atan2f+0x124>)
 80214e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80214e6:	edd4 7a00 	vldr	s15, [r4]
 80214ea:	e7ce      	b.n	802148a <__ieee754_atan2f+0x26>
 80214ec:	2c02      	cmp	r4, #2
 80214ee:	d841      	bhi.n	8021574 <__ieee754_atan2f+0x110>
 80214f0:	4b26      	ldr	r3, [pc, #152]	; (802158c <__ieee754_atan2f+0x128>)
 80214f2:	e7f6      	b.n	80214e2 <__ieee754_atan2f+0x7e>
 80214f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80214f8:	d0e0      	beq.n	80214bc <__ieee754_atan2f+0x58>
 80214fa:	1a5b      	subs	r3, r3, r1
 80214fc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8021500:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8021504:	da1a      	bge.n	802153c <__ieee754_atan2f+0xd8>
 8021506:	2a00      	cmp	r2, #0
 8021508:	da01      	bge.n	802150e <__ieee754_atan2f+0xaa>
 802150a:	313c      	adds	r1, #60	; 0x3c
 802150c:	db19      	blt.n	8021542 <__ieee754_atan2f+0xde>
 802150e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8021512:	f000 fe3f 	bl	8022194 <fabsf>
 8021516:	f000 fd69 	bl	8021fec <atanf>
 802151a:	eef0 7a40 	vmov.f32	s15, s0
 802151e:	2c01      	cmp	r4, #1
 8021520:	d012      	beq.n	8021548 <__ieee754_atan2f+0xe4>
 8021522:	2c02      	cmp	r4, #2
 8021524:	d017      	beq.n	8021556 <__ieee754_atan2f+0xf2>
 8021526:	2c00      	cmp	r4, #0
 8021528:	d0af      	beq.n	802148a <__ieee754_atan2f+0x26>
 802152a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8021590 <__ieee754_atan2f+0x12c>
 802152e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8021532:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8021594 <__ieee754_atan2f+0x130>
 8021536:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802153a:	e7a6      	b.n	802148a <__ieee754_atan2f+0x26>
 802153c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8021580 <__ieee754_atan2f+0x11c>
 8021540:	e7ed      	b.n	802151e <__ieee754_atan2f+0xba>
 8021542:	eddf 7a15 	vldr	s15, [pc, #84]	; 8021598 <__ieee754_atan2f+0x134>
 8021546:	e7ea      	b.n	802151e <__ieee754_atan2f+0xba>
 8021548:	ee17 3a90 	vmov	r3, s15
 802154c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8021550:	ee07 3a90 	vmov	s15, r3
 8021554:	e799      	b.n	802148a <__ieee754_atan2f+0x26>
 8021556:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8021590 <__ieee754_atan2f+0x12c>
 802155a:	ee77 7a80 	vadd.f32	s15, s15, s0
 802155e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8021594 <__ieee754_atan2f+0x130>
 8021562:	ee70 7a67 	vsub.f32	s15, s0, s15
 8021566:	e790      	b.n	802148a <__ieee754_atan2f+0x26>
 8021568:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8021594 <__ieee754_atan2f+0x130>
 802156c:	e78d      	b.n	802148a <__ieee754_atan2f+0x26>
 802156e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 802159c <__ieee754_atan2f+0x138>
 8021572:	e78a      	b.n	802148a <__ieee754_atan2f+0x26>
 8021574:	eddf 7a08 	vldr	s15, [pc, #32]	; 8021598 <__ieee754_atan2f+0x134>
 8021578:	e787      	b.n	802148a <__ieee754_atan2f+0x26>
 802157a:	bf00      	nop
 802157c:	c0490fdb 	.word	0xc0490fdb
 8021580:	3fc90fdb 	.word	0x3fc90fdb
 8021584:	bfc90fdb 	.word	0xbfc90fdb
 8021588:	08024100 	.word	0x08024100
 802158c:	0802410c 	.word	0x0802410c
 8021590:	33bbbd2e 	.word	0x33bbbd2e
 8021594:	40490fdb 	.word	0x40490fdb
 8021598:	00000000 	.word	0x00000000
 802159c:	3f490fdb 	.word	0x3f490fdb

080215a0 <__ieee754_rem_pio2f>:
 80215a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80215a2:	ee10 6a10 	vmov	r6, s0
 80215a6:	4b8e      	ldr	r3, [pc, #568]	; (80217e0 <__ieee754_rem_pio2f+0x240>)
 80215a8:	eef0 7a40 	vmov.f32	s15, s0
 80215ac:	b087      	sub	sp, #28
 80215ae:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80215b2:	4604      	mov	r4, r0
 80215b4:	429d      	cmp	r5, r3
 80215b6:	dc05      	bgt.n	80215c4 <__ieee754_rem_pio2f+0x24>
 80215b8:	2300      	movs	r3, #0
 80215ba:	ed80 0a00 	vstr	s0, [r0]
 80215be:	6043      	str	r3, [r0, #4]
 80215c0:	2000      	movs	r0, #0
 80215c2:	e01a      	b.n	80215fa <__ieee754_rem_pio2f+0x5a>
 80215c4:	4b87      	ldr	r3, [pc, #540]	; (80217e4 <__ieee754_rem_pio2f+0x244>)
 80215c6:	429d      	cmp	r5, r3
 80215c8:	dc46      	bgt.n	8021658 <__ieee754_rem_pio2f+0xb8>
 80215ca:	2e00      	cmp	r6, #0
 80215cc:	f025 050f 	bic.w	r5, r5, #15
 80215d0:	ed9f 0a85 	vldr	s0, [pc, #532]	; 80217e8 <__ieee754_rem_pio2f+0x248>
 80215d4:	4b85      	ldr	r3, [pc, #532]	; (80217ec <__ieee754_rem_pio2f+0x24c>)
 80215d6:	dd1f      	ble.n	8021618 <__ieee754_rem_pio2f+0x78>
 80215d8:	429d      	cmp	r5, r3
 80215da:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80215de:	d00e      	beq.n	80215fe <__ieee754_rem_pio2f+0x5e>
 80215e0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80217f0 <__ieee754_rem_pio2f+0x250>
 80215e4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80215e8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80215ec:	ed80 0a00 	vstr	s0, [r0]
 80215f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80215f4:	2001      	movs	r0, #1
 80215f6:	edc4 7a01 	vstr	s15, [r4, #4]
 80215fa:	b007      	add	sp, #28
 80215fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80215fe:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80217f4 <__ieee754_rem_pio2f+0x254>
 8021602:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80217f8 <__ieee754_rem_pio2f+0x258>
 8021606:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802160a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802160e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8021612:	edc0 6a00 	vstr	s13, [r0]
 8021616:	e7eb      	b.n	80215f0 <__ieee754_rem_pio2f+0x50>
 8021618:	429d      	cmp	r5, r3
 802161a:	ee77 7a80 	vadd.f32	s15, s15, s0
 802161e:	d00e      	beq.n	802163e <__ieee754_rem_pio2f+0x9e>
 8021620:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80217f0 <__ieee754_rem_pio2f+0x250>
 8021624:	ee37 0a87 	vadd.f32	s0, s15, s14
 8021628:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802162c:	ed80 0a00 	vstr	s0, [r0]
 8021630:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021634:	f04f 30ff 	mov.w	r0, #4294967295
 8021638:	edc4 7a01 	vstr	s15, [r4, #4]
 802163c:	e7dd      	b.n	80215fa <__ieee754_rem_pio2f+0x5a>
 802163e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80217f4 <__ieee754_rem_pio2f+0x254>
 8021642:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80217f8 <__ieee754_rem_pio2f+0x258>
 8021646:	ee77 7a80 	vadd.f32	s15, s15, s0
 802164a:	ee77 6a87 	vadd.f32	s13, s15, s14
 802164e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8021652:	edc0 6a00 	vstr	s13, [r0]
 8021656:	e7eb      	b.n	8021630 <__ieee754_rem_pio2f+0x90>
 8021658:	4b68      	ldr	r3, [pc, #416]	; (80217fc <__ieee754_rem_pio2f+0x25c>)
 802165a:	429d      	cmp	r5, r3
 802165c:	dc72      	bgt.n	8021744 <__ieee754_rem_pio2f+0x1a4>
 802165e:	f000 fd99 	bl	8022194 <fabsf>
 8021662:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8021666:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8021800 <__ieee754_rem_pio2f+0x260>
 802166a:	eee0 7a07 	vfma.f32	s15, s0, s14
 802166e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021676:	ee17 0a90 	vmov	r0, s15
 802167a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80217e8 <__ieee754_rem_pio2f+0x248>
 802167e:	281f      	cmp	r0, #31
 8021680:	eea7 0a67 	vfms.f32	s0, s14, s15
 8021684:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80217f0 <__ieee754_rem_pio2f+0x250>
 8021688:	eeb1 6a47 	vneg.f32	s12, s14
 802168c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021690:	ee70 6a67 	vsub.f32	s13, s0, s15
 8021694:	ee16 2a90 	vmov	r2, s13
 8021698:	dc1c      	bgt.n	80216d4 <__ieee754_rem_pio2f+0x134>
 802169a:	1e47      	subs	r7, r0, #1
 802169c:	4959      	ldr	r1, [pc, #356]	; (8021804 <__ieee754_rem_pio2f+0x264>)
 802169e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80216a2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80216a6:	428b      	cmp	r3, r1
 80216a8:	d014      	beq.n	80216d4 <__ieee754_rem_pio2f+0x134>
 80216aa:	6022      	str	r2, [r4, #0]
 80216ac:	ed94 7a00 	vldr	s14, [r4]
 80216b0:	2e00      	cmp	r6, #0
 80216b2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80216b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80216ba:	ed84 0a01 	vstr	s0, [r4, #4]
 80216be:	da9c      	bge.n	80215fa <__ieee754_rem_pio2f+0x5a>
 80216c0:	eeb1 7a47 	vneg.f32	s14, s14
 80216c4:	eeb1 0a40 	vneg.f32	s0, s0
 80216c8:	ed84 7a00 	vstr	s14, [r4]
 80216cc:	ed84 0a01 	vstr	s0, [r4, #4]
 80216d0:	4240      	negs	r0, r0
 80216d2:	e792      	b.n	80215fa <__ieee754_rem_pio2f+0x5a>
 80216d4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80216d8:	15eb      	asrs	r3, r5, #23
 80216da:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80216de:	2d08      	cmp	r5, #8
 80216e0:	dde3      	ble.n	80216aa <__ieee754_rem_pio2f+0x10a>
 80216e2:	eef0 6a40 	vmov.f32	s13, s0
 80216e6:	eddf 7a43 	vldr	s15, [pc, #268]	; 80217f4 <__ieee754_rem_pio2f+0x254>
 80216ea:	eddf 5a43 	vldr	s11, [pc, #268]	; 80217f8 <__ieee754_rem_pio2f+0x258>
 80216ee:	eee6 6a27 	vfma.f32	s13, s12, s15
 80216f2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80216f6:	eea6 0a27 	vfma.f32	s0, s12, s15
 80216fa:	eef0 7a40 	vmov.f32	s15, s0
 80216fe:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8021702:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8021706:	ee15 2a90 	vmov	r2, s11
 802170a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802170e:	1a5b      	subs	r3, r3, r1
 8021710:	2b19      	cmp	r3, #25
 8021712:	dc04      	bgt.n	802171e <__ieee754_rem_pio2f+0x17e>
 8021714:	eeb0 0a66 	vmov.f32	s0, s13
 8021718:	edc4 5a00 	vstr	s11, [r4]
 802171c:	e7c6      	b.n	80216ac <__ieee754_rem_pio2f+0x10c>
 802171e:	eeb0 0a66 	vmov.f32	s0, s13
 8021722:	eddf 5a39 	vldr	s11, [pc, #228]	; 8021808 <__ieee754_rem_pio2f+0x268>
 8021726:	eea6 0a25 	vfma.f32	s0, s12, s11
 802172a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802172e:	eddf 6a37 	vldr	s13, [pc, #220]	; 802180c <__ieee754_rem_pio2f+0x26c>
 8021732:	eee6 7a25 	vfma.f32	s15, s12, s11
 8021736:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802173a:	ee30 7a67 	vsub.f32	s14, s0, s15
 802173e:	ed84 7a00 	vstr	s14, [r4]
 8021742:	e7b3      	b.n	80216ac <__ieee754_rem_pio2f+0x10c>
 8021744:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8021748:	db06      	blt.n	8021758 <__ieee754_rem_pio2f+0x1b8>
 802174a:	ee70 7a40 	vsub.f32	s15, s0, s0
 802174e:	edc0 7a01 	vstr	s15, [r0, #4]
 8021752:	edc0 7a00 	vstr	s15, [r0]
 8021756:	e733      	b.n	80215c0 <__ieee754_rem_pio2f+0x20>
 8021758:	15ea      	asrs	r2, r5, #23
 802175a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8021810 <__ieee754_rem_pio2f+0x270>
 802175e:	3a86      	subs	r2, #134	; 0x86
 8021760:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8021764:	ee07 3a90 	vmov	s15, r3
 8021768:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802176c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021770:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021774:	ed8d 7a03 	vstr	s14, [sp, #12]
 8021778:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802177c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8021780:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021784:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021788:	ed8d 7a04 	vstr	s14, [sp, #16]
 802178c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8021790:	eef5 7a40 	vcmp.f32	s15, #0.0
 8021794:	edcd 7a05 	vstr	s15, [sp, #20]
 8021798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802179c:	d11e      	bne.n	80217dc <__ieee754_rem_pio2f+0x23c>
 802179e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80217a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217a6:	bf14      	ite	ne
 80217a8:	2302      	movne	r3, #2
 80217aa:	2301      	moveq	r3, #1
 80217ac:	4919      	ldr	r1, [pc, #100]	; (8021814 <__ieee754_rem_pio2f+0x274>)
 80217ae:	a803      	add	r0, sp, #12
 80217b0:	9101      	str	r1, [sp, #4]
 80217b2:	2102      	movs	r1, #2
 80217b4:	9100      	str	r1, [sp, #0]
 80217b6:	4621      	mov	r1, r4
 80217b8:	f000 f88e 	bl	80218d8 <__kernel_rem_pio2f>
 80217bc:	2e00      	cmp	r6, #0
 80217be:	f6bf af1c 	bge.w	80215fa <__ieee754_rem_pio2f+0x5a>
 80217c2:	edd4 7a00 	vldr	s15, [r4]
 80217c6:	eef1 7a67 	vneg.f32	s15, s15
 80217ca:	edc4 7a00 	vstr	s15, [r4]
 80217ce:	edd4 7a01 	vldr	s15, [r4, #4]
 80217d2:	eef1 7a67 	vneg.f32	s15, s15
 80217d6:	edc4 7a01 	vstr	s15, [r4, #4]
 80217da:	e779      	b.n	80216d0 <__ieee754_rem_pio2f+0x130>
 80217dc:	2303      	movs	r3, #3
 80217de:	e7e5      	b.n	80217ac <__ieee754_rem_pio2f+0x20c>
 80217e0:	3f490fd8 	.word	0x3f490fd8
 80217e4:	4016cbe3 	.word	0x4016cbe3
 80217e8:	3fc90f80 	.word	0x3fc90f80
 80217ec:	3fc90fd0 	.word	0x3fc90fd0
 80217f0:	37354443 	.word	0x37354443
 80217f4:	37354400 	.word	0x37354400
 80217f8:	2e85a308 	.word	0x2e85a308
 80217fc:	43490f80 	.word	0x43490f80
 8021800:	3f22f984 	.word	0x3f22f984
 8021804:	08024118 	.word	0x08024118
 8021808:	2e85a300 	.word	0x2e85a300
 802180c:	248d3132 	.word	0x248d3132
 8021810:	43800000 	.word	0x43800000
 8021814:	08024198 	.word	0x08024198

08021818 <__kernel_cosf>:
 8021818:	ee10 3a10 	vmov	r3, s0
 802181c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8021820:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021824:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8021828:	da05      	bge.n	8021836 <__kernel_cosf+0x1e>
 802182a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802182e:	ee17 2a90 	vmov	r2, s15
 8021832:	2a00      	cmp	r2, #0
 8021834:	d03d      	beq.n	80218b2 <__kernel_cosf+0x9a>
 8021836:	ee60 5a00 	vmul.f32	s11, s0, s0
 802183a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80218b8 <__kernel_cosf+0xa0>
 802183e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80218bc <__kernel_cosf+0xa4>
 8021842:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80218c0 <__kernel_cosf+0xa8>
 8021846:	eea5 7aa7 	vfma.f32	s14, s11, s15
 802184a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80218c4 <__kernel_cosf+0xac>
 802184e:	4a1e      	ldr	r2, [pc, #120]	; (80218c8 <__kernel_cosf+0xb0>)
 8021850:	4293      	cmp	r3, r2
 8021852:	eee7 7a25 	vfma.f32	s15, s14, s11
 8021856:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80218cc <__kernel_cosf+0xb4>
 802185a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802185e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80218d0 <__kernel_cosf+0xb8>
 8021862:	eee7 7a25 	vfma.f32	s15, s14, s11
 8021866:	eeb0 7a66 	vmov.f32	s14, s13
 802186a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 802186e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8021872:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8021876:	ee67 6a25 	vmul.f32	s13, s14, s11
 802187a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 802187e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8021882:	dc04      	bgt.n	802188e <__kernel_cosf+0x76>
 8021884:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8021888:	ee36 0a47 	vsub.f32	s0, s12, s14
 802188c:	4770      	bx	lr
 802188e:	4a11      	ldr	r2, [pc, #68]	; (80218d4 <__kernel_cosf+0xbc>)
 8021890:	4293      	cmp	r3, r2
 8021892:	bfd6      	itet	le
 8021894:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8021898:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 802189c:	ee06 3a90 	vmovle	s13, r3
 80218a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80218a4:	ee36 0a66 	vsub.f32	s0, s12, s13
 80218a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80218ac:	ee30 0a67 	vsub.f32	s0, s0, s15
 80218b0:	4770      	bx	lr
 80218b2:	eeb0 0a46 	vmov.f32	s0, s12
 80218b6:	4770      	bx	lr
 80218b8:	ad47d74e 	.word	0xad47d74e
 80218bc:	310f74f6 	.word	0x310f74f6
 80218c0:	3d2aaaab 	.word	0x3d2aaaab
 80218c4:	b493f27c 	.word	0xb493f27c
 80218c8:	3e999999 	.word	0x3e999999
 80218cc:	37d00d01 	.word	0x37d00d01
 80218d0:	bab60b61 	.word	0xbab60b61
 80218d4:	3f480000 	.word	0x3f480000

080218d8 <__kernel_rem_pio2f>:
 80218d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218dc:	ed2d 8b04 	vpush	{d8-d9}
 80218e0:	b0d9      	sub	sp, #356	; 0x164
 80218e2:	4688      	mov	r8, r1
 80218e4:	49bc      	ldr	r1, [pc, #752]	; (8021bd8 <__kernel_rem_pio2f+0x300>)
 80218e6:	9002      	str	r0, [sp, #8]
 80218e8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80218ea:	9301      	str	r3, [sp, #4]
 80218ec:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80218f0:	1e59      	subs	r1, r3, #1
 80218f2:	1d13      	adds	r3, r2, #4
 80218f4:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80218f8:	db27      	blt.n	802194a <__kernel_rem_pio2f+0x72>
 80218fa:	f1b2 0b03 	subs.w	fp, r2, #3
 80218fe:	bf48      	it	mi
 8021900:	f102 0b04 	addmi.w	fp, r2, #4
 8021904:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8021908:	1c45      	adds	r5, r0, #1
 802190a:	1a47      	subs	r7, r0, r1
 802190c:	eb0a 0c01 	add.w	ip, sl, r1
 8021910:	ae1c      	add	r6, sp, #112	; 0x70
 8021912:	00ec      	lsls	r4, r5, #3
 8021914:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8021be8 <__kernel_rem_pio2f+0x310>
 8021918:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 802191c:	9403      	str	r4, [sp, #12]
 802191e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8021922:	2400      	movs	r4, #0
 8021924:	4564      	cmp	r4, ip
 8021926:	dd12      	ble.n	802194e <__kernel_rem_pio2f+0x76>
 8021928:	ac1c      	add	r4, sp, #112	; 0x70
 802192a:	9b01      	ldr	r3, [sp, #4]
 802192c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8021930:	f04f 0c00 	mov.w	ip, #0
 8021934:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8021938:	45d4      	cmp	ip, sl
 802193a:	dc29      	bgt.n	8021990 <__kernel_rem_pio2f+0xb8>
 802193c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8021940:	4627      	mov	r7, r4
 8021942:	eddf 7aa9 	vldr	s15, [pc, #676]	; 8021be8 <__kernel_rem_pio2f+0x310>
 8021946:	2600      	movs	r6, #0
 8021948:	e018      	b.n	802197c <__kernel_rem_pio2f+0xa4>
 802194a:	2000      	movs	r0, #0
 802194c:	e7dc      	b.n	8021908 <__kernel_rem_pio2f+0x30>
 802194e:	42e7      	cmn	r7, r4
 8021950:	bf54      	ite	pl
 8021952:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8021956:	eef0 7a47 	vmovmi.f32	s15, s14
 802195a:	f104 0401 	add.w	r4, r4, #1
 802195e:	bf5c      	itt	pl
 8021960:	ee07 3a90 	vmovpl	s15, r3
 8021964:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8021968:	ece6 7a01 	vstmia	r6!, {s15}
 802196c:	e7da      	b.n	8021924 <__kernel_rem_pio2f+0x4c>
 802196e:	ecf9 6a01 	vldmia	r9!, {s13}
 8021972:	3601      	adds	r6, #1
 8021974:	ed97 7a00 	vldr	s14, [r7]
 8021978:	eee6 7a87 	vfma.f32	s15, s13, s14
 802197c:	428e      	cmp	r6, r1
 802197e:	f1a7 0704 	sub.w	r7, r7, #4
 8021982:	ddf4      	ble.n	802196e <__kernel_rem_pio2f+0x96>
 8021984:	f10c 0c01 	add.w	ip, ip, #1
 8021988:	3404      	adds	r4, #4
 802198a:	eceb 7a01 	vstmia	fp!, {s15}
 802198e:	e7d3      	b.n	8021938 <__kernel_rem_pio2f+0x60>
 8021990:	ab08      	add	r3, sp, #32
 8021992:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8021996:	4656      	mov	r6, sl
 8021998:	eddf 8a92 	vldr	s17, [pc, #584]	; 8021be4 <__kernel_rem_pio2f+0x30c>
 802199c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80219a0:	ed9f 9a8f 	vldr	s18, [pc, #572]	; 8021be0 <__kernel_rem_pio2f+0x308>
 80219a4:	9304      	str	r3, [sp, #16]
 80219a6:	00b3      	lsls	r3, r6, #2
 80219a8:	ac08      	add	r4, sp, #32
 80219aa:	4637      	mov	r7, r6
 80219ac:	9305      	str	r3, [sp, #20]
 80219ae:	ab58      	add	r3, sp, #352	; 0x160
 80219b0:	46a4      	mov	ip, r4
 80219b2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80219b6:	ab44      	add	r3, sp, #272	; 0x110
 80219b8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80219bc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80219c0:	2f00      	cmp	r7, #0
 80219c2:	f1a0 0004 	sub.w	r0, r0, #4
 80219c6:	dc4f      	bgt.n	8021a68 <__kernel_rem_pio2f+0x190>
 80219c8:	4628      	mov	r0, r5
 80219ca:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80219ce:	f000 fbeb 	bl	80221a8 <scalbnf>
 80219d2:	eeb0 8a40 	vmov.f32	s16, s0
 80219d6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80219da:	ee28 0a00 	vmul.f32	s0, s16, s0
 80219de:	f000 fbe0 	bl	80221a2 <floorf>
 80219e2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80219e6:	2d00      	cmp	r5, #0
 80219e8:	eea0 8a67 	vfms.f32	s16, s0, s15
 80219ec:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80219f0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80219f4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80219f8:	ee17 9a90 	vmov	r9, s15
 80219fc:	ee38 8a40 	vsub.f32	s16, s16, s0
 8021a00:	dd44      	ble.n	8021a8c <__kernel_rem_pio2f+0x1b4>
 8021a02:	f106 3cff 	add.w	ip, r6, #4294967295
 8021a06:	ab08      	add	r3, sp, #32
 8021a08:	f1c5 0e08 	rsb	lr, r5, #8
 8021a0c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8021a10:	fa47 f00e 	asr.w	r0, r7, lr
 8021a14:	4481      	add	r9, r0
 8021a16:	fa00 f00e 	lsl.w	r0, r0, lr
 8021a1a:	1a3f      	subs	r7, r7, r0
 8021a1c:	f1c5 0007 	rsb	r0, r5, #7
 8021a20:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8021a24:	4107      	asrs	r7, r0
 8021a26:	2f00      	cmp	r7, #0
 8021a28:	dd3f      	ble.n	8021aaa <__kernel_rem_pio2f+0x1d2>
 8021a2a:	f04f 0e00 	mov.w	lr, #0
 8021a2e:	f109 0901 	add.w	r9, r9, #1
 8021a32:	4673      	mov	r3, lr
 8021a34:	4576      	cmp	r6, lr
 8021a36:	dc6b      	bgt.n	8021b10 <__kernel_rem_pio2f+0x238>
 8021a38:	2d00      	cmp	r5, #0
 8021a3a:	dd04      	ble.n	8021a46 <__kernel_rem_pio2f+0x16e>
 8021a3c:	2d01      	cmp	r5, #1
 8021a3e:	d078      	beq.n	8021b32 <__kernel_rem_pio2f+0x25a>
 8021a40:	2d02      	cmp	r5, #2
 8021a42:	f000 8081 	beq.w	8021b48 <__kernel_rem_pio2f+0x270>
 8021a46:	2f02      	cmp	r7, #2
 8021a48:	d12f      	bne.n	8021aaa <__kernel_rem_pio2f+0x1d2>
 8021a4a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8021a4e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8021a52:	b353      	cbz	r3, 8021aaa <__kernel_rem_pio2f+0x1d2>
 8021a54:	4628      	mov	r0, r5
 8021a56:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8021a5a:	f000 fba5 	bl	80221a8 <scalbnf>
 8021a5e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8021a62:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8021a66:	e020      	b.n	8021aaa <__kernel_rem_pio2f+0x1d2>
 8021a68:	ee60 7a28 	vmul.f32	s15, s0, s17
 8021a6c:	3f01      	subs	r7, #1
 8021a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021a76:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8021a7a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8021a7e:	ecac 0a01 	vstmia	ip!, {s0}
 8021a82:	ed90 0a00 	vldr	s0, [r0]
 8021a86:	ee37 0a80 	vadd.f32	s0, s15, s0
 8021a8a:	e799      	b.n	80219c0 <__kernel_rem_pio2f+0xe8>
 8021a8c:	d105      	bne.n	8021a9a <__kernel_rem_pio2f+0x1c2>
 8021a8e:	1e70      	subs	r0, r6, #1
 8021a90:	ab08      	add	r3, sp, #32
 8021a92:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8021a96:	11ff      	asrs	r7, r7, #7
 8021a98:	e7c5      	b.n	8021a26 <__kernel_rem_pio2f+0x14e>
 8021a9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8021a9e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8021aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021aa6:	da31      	bge.n	8021b0c <__kernel_rem_pio2f+0x234>
 8021aa8:	2700      	movs	r7, #0
 8021aaa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8021aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ab2:	f040 809b 	bne.w	8021bec <__kernel_rem_pio2f+0x314>
 8021ab6:	1e74      	subs	r4, r6, #1
 8021ab8:	2000      	movs	r0, #0
 8021aba:	46a4      	mov	ip, r4
 8021abc:	45d4      	cmp	ip, sl
 8021abe:	da4a      	bge.n	8021b56 <__kernel_rem_pio2f+0x27e>
 8021ac0:	2800      	cmp	r0, #0
 8021ac2:	d07a      	beq.n	8021bba <__kernel_rem_pio2f+0x2e2>
 8021ac4:	ab08      	add	r3, sp, #32
 8021ac6:	3d08      	subs	r5, #8
 8021ac8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8021acc:	2b00      	cmp	r3, #0
 8021ace:	f000 8081 	beq.w	8021bd4 <__kernel_rem_pio2f+0x2fc>
 8021ad2:	4628      	mov	r0, r5
 8021ad4:	00a5      	lsls	r5, r4, #2
 8021ad6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8021ada:	f000 fb65 	bl	80221a8 <scalbnf>
 8021ade:	aa44      	add	r2, sp, #272	; 0x110
 8021ae0:	1d2b      	adds	r3, r5, #4
 8021ae2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8021be4 <__kernel_rem_pio2f+0x30c>
 8021ae6:	18d1      	adds	r1, r2, r3
 8021ae8:	4622      	mov	r2, r4
 8021aea:	2a00      	cmp	r2, #0
 8021aec:	f280 80ae 	bge.w	8021c4c <__kernel_rem_pio2f+0x374>
 8021af0:	4622      	mov	r2, r4
 8021af2:	2a00      	cmp	r2, #0
 8021af4:	f2c0 80cc 	blt.w	8021c90 <__kernel_rem_pio2f+0x3b8>
 8021af8:	a944      	add	r1, sp, #272	; 0x110
 8021afa:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8021bdc <__kernel_rem_pio2f+0x304>
 8021afe:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8021be8 <__kernel_rem_pio2f+0x310>
 8021b02:	2000      	movs	r0, #0
 8021b04:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8021b08:	1aa1      	subs	r1, r4, r2
 8021b0a:	e0b6      	b.n	8021c7a <__kernel_rem_pio2f+0x3a2>
 8021b0c:	2702      	movs	r7, #2
 8021b0e:	e78c      	b.n	8021a2a <__kernel_rem_pio2f+0x152>
 8021b10:	6820      	ldr	r0, [r4, #0]
 8021b12:	b94b      	cbnz	r3, 8021b28 <__kernel_rem_pio2f+0x250>
 8021b14:	b118      	cbz	r0, 8021b1e <__kernel_rem_pio2f+0x246>
 8021b16:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8021b1a:	6020      	str	r0, [r4, #0]
 8021b1c:	2001      	movs	r0, #1
 8021b1e:	f10e 0e01 	add.w	lr, lr, #1
 8021b22:	3404      	adds	r4, #4
 8021b24:	4603      	mov	r3, r0
 8021b26:	e785      	b.n	8021a34 <__kernel_rem_pio2f+0x15c>
 8021b28:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8021b2c:	6020      	str	r0, [r4, #0]
 8021b2e:	4618      	mov	r0, r3
 8021b30:	e7f5      	b.n	8021b1e <__kernel_rem_pio2f+0x246>
 8021b32:	1e74      	subs	r4, r6, #1
 8021b34:	a808      	add	r0, sp, #32
 8021b36:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8021b3a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8021b3e:	f10d 0c20 	add.w	ip, sp, #32
 8021b42:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8021b46:	e77e      	b.n	8021a46 <__kernel_rem_pio2f+0x16e>
 8021b48:	1e74      	subs	r4, r6, #1
 8021b4a:	a808      	add	r0, sp, #32
 8021b4c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8021b50:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8021b54:	e7f3      	b.n	8021b3e <__kernel_rem_pio2f+0x266>
 8021b56:	ab08      	add	r3, sp, #32
 8021b58:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021b5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021b60:	4318      	orrs	r0, r3
 8021b62:	e7ab      	b.n	8021abc <__kernel_rem_pio2f+0x1e4>
 8021b64:	f10c 0c01 	add.w	ip, ip, #1
 8021b68:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8021b6c:	2c00      	cmp	r4, #0
 8021b6e:	d0f9      	beq.n	8021b64 <__kernel_rem_pio2f+0x28c>
 8021b70:	9b05      	ldr	r3, [sp, #20]
 8021b72:	1c77      	adds	r7, r6, #1
 8021b74:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8021b78:	eb0d 0003 	add.w	r0, sp, r3
 8021b7c:	9b01      	ldr	r3, [sp, #4]
 8021b7e:	18f4      	adds	r4, r6, r3
 8021b80:	ab1c      	add	r3, sp, #112	; 0x70
 8021b82:	384c      	subs	r0, #76	; 0x4c
 8021b84:	4466      	add	r6, ip
 8021b86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8021b8a:	42be      	cmp	r6, r7
 8021b8c:	f6ff af0b 	blt.w	80219a6 <__kernel_rem_pio2f+0xce>
 8021b90:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8021b94:	f04f 0c00 	mov.w	ip, #0
 8021b98:	f8dd e008 	ldr.w	lr, [sp, #8]
 8021b9c:	ee07 3a90 	vmov	s15, r3
 8021ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021ba4:	ece4 7a01 	vstmia	r4!, {s15}
 8021ba8:	46a1      	mov	r9, r4
 8021baa:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8021be8 <__kernel_rem_pio2f+0x310>
 8021bae:	458c      	cmp	ip, r1
 8021bb0:	dd07      	ble.n	8021bc2 <__kernel_rem_pio2f+0x2ea>
 8021bb2:	3701      	adds	r7, #1
 8021bb4:	ece0 7a01 	vstmia	r0!, {s15}
 8021bb8:	e7e7      	b.n	8021b8a <__kernel_rem_pio2f+0x2b2>
 8021bba:	9804      	ldr	r0, [sp, #16]
 8021bbc:	f04f 0c01 	mov.w	ip, #1
 8021bc0:	e7d2      	b.n	8021b68 <__kernel_rem_pio2f+0x290>
 8021bc2:	ecfe 6a01 	vldmia	lr!, {s13}
 8021bc6:	f10c 0c01 	add.w	ip, ip, #1
 8021bca:	ed39 7a01 	vldmdb	r9!, {s14}
 8021bce:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021bd2:	e7ec      	b.n	8021bae <__kernel_rem_pio2f+0x2d6>
 8021bd4:	3c01      	subs	r4, #1
 8021bd6:	e775      	b.n	8021ac4 <__kernel_rem_pio2f+0x1ec>
 8021bd8:	080244dc 	.word	0x080244dc
 8021bdc:	080244b0 	.word	0x080244b0
 8021be0:	43800000 	.word	0x43800000
 8021be4:	3b800000 	.word	0x3b800000
 8021be8:	00000000 	.word	0x00000000
 8021bec:	9b03      	ldr	r3, [sp, #12]
 8021bee:	eeb0 0a48 	vmov.f32	s0, s16
 8021bf2:	1a98      	subs	r0, r3, r2
 8021bf4:	f000 fad8 	bl	80221a8 <scalbnf>
 8021bf8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8021be0 <__kernel_rem_pio2f+0x308>
 8021bfc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8021c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c04:	db19      	blt.n	8021c3a <__kernel_rem_pio2f+0x362>
 8021c06:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8021be4 <__kernel_rem_pio2f+0x30c>
 8021c0a:	aa08      	add	r2, sp, #32
 8021c0c:	1c74      	adds	r4, r6, #1
 8021c0e:	3508      	adds	r5, #8
 8021c10:	ee60 7a27 	vmul.f32	s15, s0, s15
 8021c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021c1c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8021c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021c24:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8021c28:	ee10 3a10 	vmov	r3, s0
 8021c2c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8021c30:	ee17 3a90 	vmov	r3, s15
 8021c34:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8021c38:	e74b      	b.n	8021ad2 <__kernel_rem_pio2f+0x1fa>
 8021c3a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8021c3e:	aa08      	add	r2, sp, #32
 8021c40:	4634      	mov	r4, r6
 8021c42:	ee10 3a10 	vmov	r3, s0
 8021c46:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8021c4a:	e742      	b.n	8021ad2 <__kernel_rem_pio2f+0x1fa>
 8021c4c:	a808      	add	r0, sp, #32
 8021c4e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8021c52:	3a01      	subs	r2, #1
 8021c54:	ee07 0a90 	vmov	s15, r0
 8021c58:	9001      	str	r0, [sp, #4]
 8021c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021c5e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8021c62:	ee20 0a07 	vmul.f32	s0, s0, s14
 8021c66:	ed61 7a01 	vstmdb	r1!, {s15}
 8021c6a:	e73e      	b.n	8021aea <__kernel_rem_pio2f+0x212>
 8021c6c:	ecfc 6a01 	vldmia	ip!, {s13}
 8021c70:	3001      	adds	r0, #1
 8021c72:	ecb6 7a01 	vldmia	r6!, {s14}
 8021c76:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021c7a:	4550      	cmp	r0, sl
 8021c7c:	dc01      	bgt.n	8021c82 <__kernel_rem_pio2f+0x3aa>
 8021c7e:	4288      	cmp	r0, r1
 8021c80:	ddf4      	ble.n	8021c6c <__kernel_rem_pio2f+0x394>
 8021c82:	a858      	add	r0, sp, #352	; 0x160
 8021c84:	3a01      	subs	r2, #1
 8021c86:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8021c8a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8021c8e:	e730      	b.n	8021af2 <__kernel_rem_pio2f+0x21a>
 8021c90:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8021c92:	2a02      	cmp	r2, #2
 8021c94:	dc09      	bgt.n	8021caa <__kernel_rem_pio2f+0x3d2>
 8021c96:	2a00      	cmp	r2, #0
 8021c98:	dc2a      	bgt.n	8021cf0 <__kernel_rem_pio2f+0x418>
 8021c9a:	d043      	beq.n	8021d24 <__kernel_rem_pio2f+0x44c>
 8021c9c:	f009 0007 	and.w	r0, r9, #7
 8021ca0:	b059      	add	sp, #356	; 0x164
 8021ca2:	ecbd 8b04 	vpop	{d8-d9}
 8021ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021caa:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8021cac:	2b03      	cmp	r3, #3
 8021cae:	d1f5      	bne.n	8021c9c <__kernel_rem_pio2f+0x3c4>
 8021cb0:	ab30      	add	r3, sp, #192	; 0xc0
 8021cb2:	4620      	mov	r0, r4
 8021cb4:	442b      	add	r3, r5
 8021cb6:	461a      	mov	r2, r3
 8021cb8:	4619      	mov	r1, r3
 8021cba:	2800      	cmp	r0, #0
 8021cbc:	f1a1 0104 	sub.w	r1, r1, #4
 8021cc0:	dc51      	bgt.n	8021d66 <__kernel_rem_pio2f+0x48e>
 8021cc2:	4621      	mov	r1, r4
 8021cc4:	2901      	cmp	r1, #1
 8021cc6:	f1a2 0204 	sub.w	r2, r2, #4
 8021cca:	dc5c      	bgt.n	8021d86 <__kernel_rem_pio2f+0x4ae>
 8021ccc:	3304      	adds	r3, #4
 8021cce:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8021be8 <__kernel_rem_pio2f+0x310>
 8021cd2:	2c01      	cmp	r4, #1
 8021cd4:	dc67      	bgt.n	8021da6 <__kernel_rem_pio2f+0x4ce>
 8021cd6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8021cda:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8021cde:	2f00      	cmp	r7, #0
 8021ce0:	d167      	bne.n	8021db2 <__kernel_rem_pio2f+0x4da>
 8021ce2:	edc8 6a00 	vstr	s13, [r8]
 8021ce6:	ed88 7a01 	vstr	s14, [r8, #4]
 8021cea:	edc8 7a02 	vstr	s15, [r8, #8]
 8021cee:	e7d5      	b.n	8021c9c <__kernel_rem_pio2f+0x3c4>
 8021cf0:	aa30      	add	r2, sp, #192	; 0xc0
 8021cf2:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8021be8 <__kernel_rem_pio2f+0x310>
 8021cf6:	4413      	add	r3, r2
 8021cf8:	4622      	mov	r2, r4
 8021cfa:	2a00      	cmp	r2, #0
 8021cfc:	da24      	bge.n	8021d48 <__kernel_rem_pio2f+0x470>
 8021cfe:	b34f      	cbz	r7, 8021d54 <__kernel_rem_pio2f+0x47c>
 8021d00:	eef1 7a47 	vneg.f32	s15, s14
 8021d04:	edc8 7a00 	vstr	s15, [r8]
 8021d08:	aa31      	add	r2, sp, #196	; 0xc4
 8021d0a:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8021d0e:	2301      	movs	r3, #1
 8021d10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021d14:	429c      	cmp	r4, r3
 8021d16:	da20      	bge.n	8021d5a <__kernel_rem_pio2f+0x482>
 8021d18:	b10f      	cbz	r7, 8021d1e <__kernel_rem_pio2f+0x446>
 8021d1a:	eef1 7a67 	vneg.f32	s15, s15
 8021d1e:	edc8 7a01 	vstr	s15, [r8, #4]
 8021d22:	e7bb      	b.n	8021c9c <__kernel_rem_pio2f+0x3c4>
 8021d24:	aa30      	add	r2, sp, #192	; 0xc0
 8021d26:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8021be8 <__kernel_rem_pio2f+0x310>
 8021d2a:	4413      	add	r3, r2
 8021d2c:	2c00      	cmp	r4, #0
 8021d2e:	da05      	bge.n	8021d3c <__kernel_rem_pio2f+0x464>
 8021d30:	b10f      	cbz	r7, 8021d36 <__kernel_rem_pio2f+0x45e>
 8021d32:	eef1 7a67 	vneg.f32	s15, s15
 8021d36:	edc8 7a00 	vstr	s15, [r8]
 8021d3a:	e7af      	b.n	8021c9c <__kernel_rem_pio2f+0x3c4>
 8021d3c:	ed33 7a01 	vldmdb	r3!, {s14}
 8021d40:	3c01      	subs	r4, #1
 8021d42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021d46:	e7f1      	b.n	8021d2c <__kernel_rem_pio2f+0x454>
 8021d48:	ed73 7a01 	vldmdb	r3!, {s15}
 8021d4c:	3a01      	subs	r2, #1
 8021d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021d52:	e7d2      	b.n	8021cfa <__kernel_rem_pio2f+0x422>
 8021d54:	eef0 7a47 	vmov.f32	s15, s14
 8021d58:	e7d4      	b.n	8021d04 <__kernel_rem_pio2f+0x42c>
 8021d5a:	ecb2 7a01 	vldmia	r2!, {s14}
 8021d5e:	3301      	adds	r3, #1
 8021d60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021d64:	e7d6      	b.n	8021d14 <__kernel_rem_pio2f+0x43c>
 8021d66:	edd1 7a00 	vldr	s15, [r1]
 8021d6a:	3801      	subs	r0, #1
 8021d6c:	edd1 6a01 	vldr	s13, [r1, #4]
 8021d70:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8021d74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021d78:	ed81 7a00 	vstr	s14, [r1]
 8021d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021d80:	edc1 7a01 	vstr	s15, [r1, #4]
 8021d84:	e799      	b.n	8021cba <__kernel_rem_pio2f+0x3e2>
 8021d86:	edd2 7a00 	vldr	s15, [r2]
 8021d8a:	3901      	subs	r1, #1
 8021d8c:	edd2 6a01 	vldr	s13, [r2, #4]
 8021d90:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8021d94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021d98:	ed82 7a00 	vstr	s14, [r2]
 8021d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021da0:	edc2 7a01 	vstr	s15, [r2, #4]
 8021da4:	e78e      	b.n	8021cc4 <__kernel_rem_pio2f+0x3ec>
 8021da6:	ed33 7a01 	vldmdb	r3!, {s14}
 8021daa:	3c01      	subs	r4, #1
 8021dac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021db0:	e78f      	b.n	8021cd2 <__kernel_rem_pio2f+0x3fa>
 8021db2:	eef1 6a66 	vneg.f32	s13, s13
 8021db6:	eeb1 7a47 	vneg.f32	s14, s14
 8021dba:	eef1 7a67 	vneg.f32	s15, s15
 8021dbe:	edc8 6a00 	vstr	s13, [r8]
 8021dc2:	ed88 7a01 	vstr	s14, [r8, #4]
 8021dc6:	e790      	b.n	8021cea <__kernel_rem_pio2f+0x412>

08021dc8 <__kernel_sinf>:
 8021dc8:	ee10 3a10 	vmov	r3, s0
 8021dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021dd0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8021dd4:	da04      	bge.n	8021de0 <__kernel_sinf+0x18>
 8021dd6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8021dda:	ee17 3a90 	vmov	r3, s15
 8021dde:	b35b      	cbz	r3, 8021e38 <__kernel_sinf+0x70>
 8021de0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8021de4:	eddf 7a15 	vldr	s15, [pc, #84]	; 8021e3c <__kernel_sinf+0x74>
 8021de8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8021e40 <__kernel_sinf+0x78>
 8021dec:	eea7 6a27 	vfma.f32	s12, s14, s15
 8021df0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8021e44 <__kernel_sinf+0x7c>
 8021df4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8021df8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8021dfc:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8021e48 <__kernel_sinf+0x80>
 8021e00:	eea7 6a87 	vfma.f32	s12, s15, s14
 8021e04:	eddf 7a11 	vldr	s15, [pc, #68]	; 8021e4c <__kernel_sinf+0x84>
 8021e08:	eee6 7a07 	vfma.f32	s15, s12, s14
 8021e0c:	b930      	cbnz	r0, 8021e1c <__kernel_sinf+0x54>
 8021e0e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8021e50 <__kernel_sinf+0x88>
 8021e12:	eea7 6a27 	vfma.f32	s12, s14, s15
 8021e16:	eea6 0a26 	vfma.f32	s0, s12, s13
 8021e1a:	4770      	bx	lr
 8021e1c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8021e20:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8021e24:	eee0 7a86 	vfma.f32	s15, s1, s12
 8021e28:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8021e2c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8021e54 <__kernel_sinf+0x8c>
 8021e30:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8021e34:	ee30 0a60 	vsub.f32	s0, s0, s1
 8021e38:	4770      	bx	lr
 8021e3a:	bf00      	nop
 8021e3c:	2f2ec9d3 	.word	0x2f2ec9d3
 8021e40:	b2d72f34 	.word	0xb2d72f34
 8021e44:	3638ef1b 	.word	0x3638ef1b
 8021e48:	b9500d01 	.word	0xb9500d01
 8021e4c:	3c088889 	.word	0x3c088889
 8021e50:	be2aaaab 	.word	0xbe2aaaab
 8021e54:	3e2aaaab 	.word	0x3e2aaaab

08021e58 <with_errno>:
 8021e58:	b570      	push	{r4, r5, r6, lr}
 8021e5a:	4604      	mov	r4, r0
 8021e5c:	460d      	mov	r5, r1
 8021e5e:	4616      	mov	r6, r2
 8021e60:	f000 fa1a 	bl	8022298 <__errno>
 8021e64:	4629      	mov	r1, r5
 8021e66:	6006      	str	r6, [r0, #0]
 8021e68:	4620      	mov	r0, r4
 8021e6a:	bd70      	pop	{r4, r5, r6, pc}

08021e6c <xflow>:
 8021e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021e6e:	4614      	mov	r4, r2
 8021e70:	461d      	mov	r5, r3
 8021e72:	b108      	cbz	r0, 8021e78 <xflow+0xc>
 8021e74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8021e78:	4620      	mov	r0, r4
 8021e7a:	4629      	mov	r1, r5
 8021e7c:	e9cd 2300 	strd	r2, r3, [sp]
 8021e80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021e84:	f7de fbaa 	bl	80005dc <__aeabi_dmul>
 8021e88:	2222      	movs	r2, #34	; 0x22
 8021e8a:	b003      	add	sp, #12
 8021e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021e90:	f7ff bfe2 	b.w	8021e58 <with_errno>

08021e94 <__math_uflow>:
 8021e94:	b508      	push	{r3, lr}
 8021e96:	2200      	movs	r2, #0
 8021e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8021e9c:	f7ff ffe6 	bl	8021e6c <xflow>
 8021ea0:	ec41 0b10 	vmov	d0, r0, r1
 8021ea4:	bd08      	pop	{r3, pc}

08021ea6 <__math_oflow>:
 8021ea6:	b508      	push	{r3, lr}
 8021ea8:	2200      	movs	r2, #0
 8021eaa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8021eae:	f7ff ffdd 	bl	8021e6c <xflow>
 8021eb2:	ec41 0b10 	vmov	d0, r0, r1
 8021eb6:	bd08      	pop	{r3, pc}

08021eb8 <fabs>:
 8021eb8:	ec51 0b10 	vmov	r0, r1, d0
 8021ebc:	ee10 2a10 	vmov	r2, s0
 8021ec0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8021ec4:	ec43 2b10 	vmov	d0, r2, r3
 8021ec8:	4770      	bx	lr

08021eca <finite>:
 8021eca:	b082      	sub	sp, #8
 8021ecc:	ed8d 0b00 	vstr	d0, [sp]
 8021ed0:	9801      	ldr	r0, [sp, #4]
 8021ed2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8021ed6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8021eda:	0fc0      	lsrs	r0, r0, #31
 8021edc:	b002      	add	sp, #8
 8021ede:	4770      	bx	lr

08021ee0 <scalbn>:
 8021ee0:	b570      	push	{r4, r5, r6, lr}
 8021ee2:	ec55 4b10 	vmov	r4, r5, d0
 8021ee6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8021eea:	4606      	mov	r6, r0
 8021eec:	462b      	mov	r3, r5
 8021eee:	b99a      	cbnz	r2, 8021f18 <scalbn+0x38>
 8021ef0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8021ef4:	4323      	orrs	r3, r4
 8021ef6:	d036      	beq.n	8021f66 <scalbn+0x86>
 8021ef8:	4b39      	ldr	r3, [pc, #228]	; (8021fe0 <scalbn+0x100>)
 8021efa:	4629      	mov	r1, r5
 8021efc:	2200      	movs	r2, #0
 8021efe:	ee10 0a10 	vmov	r0, s0
 8021f02:	f7de fb6b 	bl	80005dc <__aeabi_dmul>
 8021f06:	4b37      	ldr	r3, [pc, #220]	; (8021fe4 <scalbn+0x104>)
 8021f08:	4604      	mov	r4, r0
 8021f0a:	460d      	mov	r5, r1
 8021f0c:	429e      	cmp	r6, r3
 8021f0e:	da10      	bge.n	8021f32 <scalbn+0x52>
 8021f10:	a32b      	add	r3, pc, #172	; (adr r3, 8021fc0 <scalbn+0xe0>)
 8021f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f16:	e03a      	b.n	8021f8e <scalbn+0xae>
 8021f18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8021f1c:	428a      	cmp	r2, r1
 8021f1e:	d10c      	bne.n	8021f3a <scalbn+0x5a>
 8021f20:	ee10 2a10 	vmov	r2, s0
 8021f24:	4620      	mov	r0, r4
 8021f26:	4629      	mov	r1, r5
 8021f28:	f7de f9a2 	bl	8000270 <__adddf3>
 8021f2c:	4604      	mov	r4, r0
 8021f2e:	460d      	mov	r5, r1
 8021f30:	e019      	b.n	8021f66 <scalbn+0x86>
 8021f32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8021f36:	460b      	mov	r3, r1
 8021f38:	3a36      	subs	r2, #54	; 0x36
 8021f3a:	4432      	add	r2, r6
 8021f3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8021f40:	428a      	cmp	r2, r1
 8021f42:	dd08      	ble.n	8021f56 <scalbn+0x76>
 8021f44:	2d00      	cmp	r5, #0
 8021f46:	a120      	add	r1, pc, #128	; (adr r1, 8021fc8 <scalbn+0xe8>)
 8021f48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021f4c:	da1c      	bge.n	8021f88 <scalbn+0xa8>
 8021f4e:	a120      	add	r1, pc, #128	; (adr r1, 8021fd0 <scalbn+0xf0>)
 8021f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021f54:	e018      	b.n	8021f88 <scalbn+0xa8>
 8021f56:	2a00      	cmp	r2, #0
 8021f58:	dd08      	ble.n	8021f6c <scalbn+0x8c>
 8021f5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8021f5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8021f62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8021f66:	ec45 4b10 	vmov	d0, r4, r5
 8021f6a:	bd70      	pop	{r4, r5, r6, pc}
 8021f6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8021f70:	da19      	bge.n	8021fa6 <scalbn+0xc6>
 8021f72:	f24c 3350 	movw	r3, #50000	; 0xc350
 8021f76:	429e      	cmp	r6, r3
 8021f78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8021f7c:	dd0a      	ble.n	8021f94 <scalbn+0xb4>
 8021f7e:	a112      	add	r1, pc, #72	; (adr r1, 8021fc8 <scalbn+0xe8>)
 8021f80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021f84:	2b00      	cmp	r3, #0
 8021f86:	d1e2      	bne.n	8021f4e <scalbn+0x6e>
 8021f88:	a30f      	add	r3, pc, #60	; (adr r3, 8021fc8 <scalbn+0xe8>)
 8021f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f8e:	f7de fb25 	bl	80005dc <__aeabi_dmul>
 8021f92:	e7cb      	b.n	8021f2c <scalbn+0x4c>
 8021f94:	a10a      	add	r1, pc, #40	; (adr r1, 8021fc0 <scalbn+0xe0>)
 8021f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021f9a:	2b00      	cmp	r3, #0
 8021f9c:	d0b8      	beq.n	8021f10 <scalbn+0x30>
 8021f9e:	a10e      	add	r1, pc, #56	; (adr r1, 8021fd8 <scalbn+0xf8>)
 8021fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021fa4:	e7b4      	b.n	8021f10 <scalbn+0x30>
 8021fa6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8021faa:	3236      	adds	r2, #54	; 0x36
 8021fac:	4620      	mov	r0, r4
 8021fae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8021fb2:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8021fb6:	2200      	movs	r2, #0
 8021fb8:	4b0b      	ldr	r3, [pc, #44]	; (8021fe8 <scalbn+0x108>)
 8021fba:	e7e8      	b.n	8021f8e <scalbn+0xae>
 8021fbc:	f3af 8000 	nop.w
 8021fc0:	c2f8f359 	.word	0xc2f8f359
 8021fc4:	01a56e1f 	.word	0x01a56e1f
 8021fc8:	8800759c 	.word	0x8800759c
 8021fcc:	7e37e43c 	.word	0x7e37e43c
 8021fd0:	8800759c 	.word	0x8800759c
 8021fd4:	fe37e43c 	.word	0xfe37e43c
 8021fd8:	c2f8f359 	.word	0xc2f8f359
 8021fdc:	81a56e1f 	.word	0x81a56e1f
 8021fe0:	43500000 	.word	0x43500000
 8021fe4:	ffff3cb0 	.word	0xffff3cb0
 8021fe8:	3c900000 	.word	0x3c900000

08021fec <atanf>:
 8021fec:	b538      	push	{r3, r4, r5, lr}
 8021fee:	ee10 5a10 	vmov	r5, s0
 8021ff2:	eef0 7a40 	vmov.f32	s15, s0
 8021ff6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8021ffa:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8021ffe:	db0f      	blt.n	8022020 <atanf+0x34>
 8022000:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8022004:	dd04      	ble.n	8022010 <atanf+0x24>
 8022006:	ee70 7a00 	vadd.f32	s15, s0, s0
 802200a:	eeb0 0a67 	vmov.f32	s0, s15
 802200e:	bd38      	pop	{r3, r4, r5, pc}
 8022010:	2d00      	cmp	r5, #0
 8022012:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8022148 <atanf+0x15c>
 8022016:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 802214c <atanf+0x160>
 802201a:	fe77 7a80 	vselgt.f32	s15, s15, s0
 802201e:	e7f4      	b.n	802200a <atanf+0x1e>
 8022020:	4b4b      	ldr	r3, [pc, #300]	; (8022150 <atanf+0x164>)
 8022022:	429c      	cmp	r4, r3
 8022024:	dc10      	bgt.n	8022048 <atanf+0x5c>
 8022026:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 802202a:	da0a      	bge.n	8022042 <atanf+0x56>
 802202c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8022154 <atanf+0x168>
 8022030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022034:	ee30 7a07 	vadd.f32	s14, s0, s14
 8022038:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802203c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022040:	dce3      	bgt.n	802200a <atanf+0x1e>
 8022042:	f04f 33ff 	mov.w	r3, #4294967295
 8022046:	e013      	b.n	8022070 <atanf+0x84>
 8022048:	f000 f8a4 	bl	8022194 <fabsf>
 802204c:	4b42      	ldr	r3, [pc, #264]	; (8022158 <atanf+0x16c>)
 802204e:	429c      	cmp	r4, r3
 8022050:	dc4f      	bgt.n	80220f2 <atanf+0x106>
 8022052:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8022056:	429c      	cmp	r4, r3
 8022058:	dc41      	bgt.n	80220de <atanf+0xf2>
 802205a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 802205e:	2300      	movs	r3, #0
 8022060:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8022064:	eea0 7a27 	vfma.f32	s14, s0, s15
 8022068:	ee30 0a27 	vadd.f32	s0, s0, s15
 802206c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022070:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 802215c <atanf+0x170>
 8022074:	1c5a      	adds	r2, r3, #1
 8022076:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8022160 <atanf+0x174>
 802207a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8022164 <atanf+0x178>
 802207e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8022082:	ee66 6a06 	vmul.f32	s13, s12, s12
 8022086:	eee6 5a87 	vfma.f32	s11, s13, s14
 802208a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8022168 <atanf+0x17c>
 802208e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8022092:	eddf 5a36 	vldr	s11, [pc, #216]	; 802216c <atanf+0x180>
 8022096:	eee7 5a26 	vfma.f32	s11, s14, s13
 802209a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8022170 <atanf+0x184>
 802209e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80220a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8022174 <atanf+0x188>
 80220a6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80220aa:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8022178 <atanf+0x18c>
 80220ae:	eea6 5a87 	vfma.f32	s10, s13, s14
 80220b2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 802217c <atanf+0x190>
 80220b6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80220ba:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8022180 <atanf+0x194>
 80220be:	eea7 5a26 	vfma.f32	s10, s14, s13
 80220c2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8022184 <atanf+0x198>
 80220c6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80220ca:	ee27 7a26 	vmul.f32	s14, s14, s13
 80220ce:	eea5 7a86 	vfma.f32	s14, s11, s12
 80220d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80220d6:	d121      	bne.n	802211c <atanf+0x130>
 80220d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80220dc:	e795      	b.n	802200a <atanf+0x1e>
 80220de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80220e2:	2301      	movs	r3, #1
 80220e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80220e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80220ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80220f0:	e7be      	b.n	8022070 <atanf+0x84>
 80220f2:	4b25      	ldr	r3, [pc, #148]	; (8022188 <atanf+0x19c>)
 80220f4:	429c      	cmp	r4, r3
 80220f6:	dc0b      	bgt.n	8022110 <atanf+0x124>
 80220f8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80220fc:	2302      	movs	r3, #2
 80220fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022102:	ee70 6a67 	vsub.f32	s13, s0, s15
 8022106:	eea0 7a27 	vfma.f32	s14, s0, s15
 802210a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802210e:	e7af      	b.n	8022070 <atanf+0x84>
 8022110:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8022114:	2303      	movs	r3, #3
 8022116:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802211a:	e7a9      	b.n	8022070 <atanf+0x84>
 802211c:	4a1b      	ldr	r2, [pc, #108]	; (802218c <atanf+0x1a0>)
 802211e:	2d00      	cmp	r5, #0
 8022120:	491b      	ldr	r1, [pc, #108]	; (8022190 <atanf+0x1a4>)
 8022122:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8022126:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802212a:	ed93 0a00 	vldr	s0, [r3]
 802212e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8022132:	ed92 0a00 	vldr	s0, [r2]
 8022136:	ee77 7a67 	vsub.f32	s15, s14, s15
 802213a:	ee70 7a67 	vsub.f32	s15, s0, s15
 802213e:	bfb8      	it	lt
 8022140:	eef1 7a67 	vneglt.f32	s15, s15
 8022144:	e761      	b.n	802200a <atanf+0x1e>
 8022146:	bf00      	nop
 8022148:	3fc90fdb 	.word	0x3fc90fdb
 802214c:	bfc90fdb 	.word	0xbfc90fdb
 8022150:	3edfffff 	.word	0x3edfffff
 8022154:	7149f2ca 	.word	0x7149f2ca
 8022158:	3f97ffff 	.word	0x3f97ffff
 802215c:	3c8569d7 	.word	0x3c8569d7
 8022160:	3d4bda59 	.word	0x3d4bda59
 8022164:	bd6ef16b 	.word	0xbd6ef16b
 8022168:	3d886b35 	.word	0x3d886b35
 802216c:	3dba2e6e 	.word	0x3dba2e6e
 8022170:	3e124925 	.word	0x3e124925
 8022174:	3eaaaaab 	.word	0x3eaaaaab
 8022178:	bd15a221 	.word	0xbd15a221
 802217c:	bd9d8795 	.word	0xbd9d8795
 8022180:	bde38e38 	.word	0xbde38e38
 8022184:	be4ccccd 	.word	0xbe4ccccd
 8022188:	401bffff 	.word	0x401bffff
 802218c:	080244e8 	.word	0x080244e8
 8022190:	080244f8 	.word	0x080244f8

08022194 <fabsf>:
 8022194:	ee10 3a10 	vmov	r3, s0
 8022198:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802219c:	ee00 3a10 	vmov	s0, r3
 80221a0:	4770      	bx	lr

080221a2 <floorf>:
 80221a2:	febb 0a40 	vrintm.f32	s0, s0
 80221a6:	4770      	bx	lr

080221a8 <scalbnf>:
 80221a8:	ee10 3a10 	vmov	r3, s0
 80221ac:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80221b0:	d024      	beq.n	80221fc <scalbnf+0x54>
 80221b2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80221b6:	d302      	bcc.n	80221be <scalbnf+0x16>
 80221b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80221bc:	4770      	bx	lr
 80221be:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80221c2:	d121      	bne.n	8022208 <scalbnf+0x60>
 80221c4:	4b29      	ldr	r3, [pc, #164]	; (802226c <scalbnf+0xc4>)
 80221c6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8022270 <scalbnf+0xc8>
 80221ca:	4298      	cmp	r0, r3
 80221cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80221d0:	db15      	blt.n	80221fe <scalbnf+0x56>
 80221d2:	ee10 3a10 	vmov	r3, s0
 80221d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80221da:	3a19      	subs	r2, #25
 80221dc:	4402      	add	r2, r0
 80221de:	2afe      	cmp	r2, #254	; 0xfe
 80221e0:	dd14      	ble.n	802220c <scalbnf+0x64>
 80221e2:	ee10 3a10 	vmov	r3, s0
 80221e6:	eddf 7a23 	vldr	s15, [pc, #140]	; 8022274 <scalbnf+0xcc>
 80221ea:	eddf 6a23 	vldr	s13, [pc, #140]	; 8022278 <scalbnf+0xd0>
 80221ee:	2b00      	cmp	r3, #0
 80221f0:	eeb0 7a67 	vmov.f32	s14, s15
 80221f4:	fe67 7aa6 	vselge.f32	s15, s15, s13
 80221f8:	ee27 0a27 	vmul.f32	s0, s14, s15
 80221fc:	4770      	bx	lr
 80221fe:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802227c <scalbnf+0xd4>
 8022202:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022206:	4770      	bx	lr
 8022208:	0dd2      	lsrs	r2, r2, #23
 802220a:	e7e7      	b.n	80221dc <scalbnf+0x34>
 802220c:	2a00      	cmp	r2, #0
 802220e:	dd06      	ble.n	802221e <scalbnf+0x76>
 8022210:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8022214:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8022218:	ee00 3a10 	vmov	s0, r3
 802221c:	4770      	bx	lr
 802221e:	f112 0f16 	cmn.w	r2, #22
 8022222:	da19      	bge.n	8022258 <scalbnf+0xb0>
 8022224:	f24c 3350 	movw	r3, #50000	; 0xc350
 8022228:	4298      	cmp	r0, r3
 802222a:	ee10 3a10 	vmov	r3, s0
 802222e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8022232:	dd09      	ble.n	8022248 <scalbnf+0xa0>
 8022234:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8022274 <scalbnf+0xcc>
 8022238:	2b00      	cmp	r3, #0
 802223a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8022278 <scalbnf+0xd0>
 802223e:	eef0 7a40 	vmov.f32	s15, s0
 8022242:	fe00 0a07 	vseleq.f32	s0, s0, s14
 8022246:	e7dc      	b.n	8022202 <scalbnf+0x5a>
 8022248:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 802227c <scalbnf+0xd4>
 802224c:	2b00      	cmp	r3, #0
 802224e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8022280 <scalbnf+0xd8>
 8022252:	eef0 7a40 	vmov.f32	s15, s0
 8022256:	e7f4      	b.n	8022242 <scalbnf+0x9a>
 8022258:	3219      	adds	r2, #25
 802225a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802225e:	eddf 7a09 	vldr	s15, [pc, #36]	; 8022284 <scalbnf+0xdc>
 8022262:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8022266:	ee07 3a10 	vmov	s14, r3
 802226a:	e7c5      	b.n	80221f8 <scalbnf+0x50>
 802226c:	ffff3cb0 	.word	0xffff3cb0
 8022270:	4c000000 	.word	0x4c000000
 8022274:	7149f2ca 	.word	0x7149f2ca
 8022278:	f149f2ca 	.word	0xf149f2ca
 802227c:	0da24260 	.word	0x0da24260
 8022280:	8da24260 	.word	0x8da24260
 8022284:	33000000 	.word	0x33000000

08022288 <abort>:
 8022288:	2006      	movs	r0, #6
 802228a:	b508      	push	{r3, lr}
 802228c:	f000 f9c4 	bl	8022618 <raise>
 8022290:	2001      	movs	r0, #1
 8022292:	f7f0 ffb9 	bl	8013208 <_exit>
	...

08022298 <__errno>:
 8022298:	4b01      	ldr	r3, [pc, #4]	; (80222a0 <__errno+0x8>)
 802229a:	6818      	ldr	r0, [r3, #0]
 802229c:	4770      	bx	lr
 802229e:	bf00      	nop
 80222a0:	200000a0 	.word	0x200000a0

080222a4 <__libc_init_array>:
 80222a4:	b570      	push	{r4, r5, r6, lr}
 80222a6:	4d0d      	ldr	r5, [pc, #52]	; (80222dc <__libc_init_array+0x38>)
 80222a8:	2600      	movs	r6, #0
 80222aa:	4c0d      	ldr	r4, [pc, #52]	; (80222e0 <__libc_init_array+0x3c>)
 80222ac:	1b64      	subs	r4, r4, r5
 80222ae:	10a4      	asrs	r4, r4, #2
 80222b0:	42a6      	cmp	r6, r4
 80222b2:	d109      	bne.n	80222c8 <__libc_init_array+0x24>
 80222b4:	4d0b      	ldr	r5, [pc, #44]	; (80222e4 <__libc_init_array+0x40>)
 80222b6:	2600      	movs	r6, #0
 80222b8:	4c0b      	ldr	r4, [pc, #44]	; (80222e8 <__libc_init_array+0x44>)
 80222ba:	f001 fd83 	bl	8023dc4 <_init>
 80222be:	1b64      	subs	r4, r4, r5
 80222c0:	10a4      	asrs	r4, r4, #2
 80222c2:	42a6      	cmp	r6, r4
 80222c4:	d105      	bne.n	80222d2 <__libc_init_array+0x2e>
 80222c6:	bd70      	pop	{r4, r5, r6, pc}
 80222c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80222cc:	3601      	adds	r6, #1
 80222ce:	4798      	blx	r3
 80222d0:	e7ee      	b.n	80222b0 <__libc_init_array+0xc>
 80222d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80222d6:	3601      	adds	r6, #1
 80222d8:	4798      	blx	r3
 80222da:	e7f2      	b.n	80222c2 <__libc_init_array+0x1e>
 80222dc:	08024774 	.word	0x08024774
 80222e0:	08024774 	.word	0x08024774
 80222e4:	08024774 	.word	0x08024774
 80222e8:	08024784 	.word	0x08024784

080222ec <malloc>:
 80222ec:	4b02      	ldr	r3, [pc, #8]	; (80222f8 <malloc+0xc>)
 80222ee:	4601      	mov	r1, r0
 80222f0:	6818      	ldr	r0, [r3, #0]
 80222f2:	f000 b8a7 	b.w	8022444 <_malloc_r>
 80222f6:	bf00      	nop
 80222f8:	200000a0 	.word	0x200000a0

080222fc <free>:
 80222fc:	4b02      	ldr	r3, [pc, #8]	; (8022308 <free+0xc>)
 80222fe:	4601      	mov	r1, r0
 8022300:	6818      	ldr	r0, [r3, #0]
 8022302:	f000 b833 	b.w	802236c <_free_r>
 8022306:	bf00      	nop
 8022308:	200000a0 	.word	0x200000a0

0802230c <memcpy>:
 802230c:	440a      	add	r2, r1
 802230e:	1e43      	subs	r3, r0, #1
 8022310:	4291      	cmp	r1, r2
 8022312:	d100      	bne.n	8022316 <memcpy+0xa>
 8022314:	4770      	bx	lr
 8022316:	b510      	push	{r4, lr}
 8022318:	f811 4b01 	ldrb.w	r4, [r1], #1
 802231c:	4291      	cmp	r1, r2
 802231e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022322:	d1f9      	bne.n	8022318 <memcpy+0xc>
 8022324:	bd10      	pop	{r4, pc}

08022326 <memmove>:
 8022326:	4288      	cmp	r0, r1
 8022328:	b510      	push	{r4, lr}
 802232a:	eb01 0402 	add.w	r4, r1, r2
 802232e:	d902      	bls.n	8022336 <memmove+0x10>
 8022330:	4284      	cmp	r4, r0
 8022332:	4623      	mov	r3, r4
 8022334:	d807      	bhi.n	8022346 <memmove+0x20>
 8022336:	1e43      	subs	r3, r0, #1
 8022338:	42a1      	cmp	r1, r4
 802233a:	d008      	beq.n	802234e <memmove+0x28>
 802233c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022340:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022344:	e7f8      	b.n	8022338 <memmove+0x12>
 8022346:	4402      	add	r2, r0
 8022348:	4601      	mov	r1, r0
 802234a:	428a      	cmp	r2, r1
 802234c:	d100      	bne.n	8022350 <memmove+0x2a>
 802234e:	bd10      	pop	{r4, pc}
 8022350:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022354:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022358:	e7f7      	b.n	802234a <memmove+0x24>

0802235a <memset>:
 802235a:	4402      	add	r2, r0
 802235c:	4603      	mov	r3, r0
 802235e:	4293      	cmp	r3, r2
 8022360:	d100      	bne.n	8022364 <memset+0xa>
 8022362:	4770      	bx	lr
 8022364:	f803 1b01 	strb.w	r1, [r3], #1
 8022368:	e7f9      	b.n	802235e <memset+0x4>
	...

0802236c <_free_r>:
 802236c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802236e:	2900      	cmp	r1, #0
 8022370:	d043      	beq.n	80223fa <_free_r+0x8e>
 8022372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022376:	1f0c      	subs	r4, r1, #4
 8022378:	9001      	str	r0, [sp, #4]
 802237a:	2b00      	cmp	r3, #0
 802237c:	bfb8      	it	lt
 802237e:	18e4      	addlt	r4, r4, r3
 8022380:	f000 fa3c 	bl	80227fc <__malloc_lock>
 8022384:	4a1e      	ldr	r2, [pc, #120]	; (8022400 <_free_r+0x94>)
 8022386:	9801      	ldr	r0, [sp, #4]
 8022388:	6813      	ldr	r3, [r2, #0]
 802238a:	b933      	cbnz	r3, 802239a <_free_r+0x2e>
 802238c:	6063      	str	r3, [r4, #4]
 802238e:	6014      	str	r4, [r2, #0]
 8022390:	b003      	add	sp, #12
 8022392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022396:	f000 ba37 	b.w	8022808 <__malloc_unlock>
 802239a:	42a3      	cmp	r3, r4
 802239c:	d908      	bls.n	80223b0 <_free_r+0x44>
 802239e:	6825      	ldr	r5, [r4, #0]
 80223a0:	1961      	adds	r1, r4, r5
 80223a2:	428b      	cmp	r3, r1
 80223a4:	bf01      	itttt	eq
 80223a6:	6819      	ldreq	r1, [r3, #0]
 80223a8:	685b      	ldreq	r3, [r3, #4]
 80223aa:	1949      	addeq	r1, r1, r5
 80223ac:	6021      	streq	r1, [r4, #0]
 80223ae:	e7ed      	b.n	802238c <_free_r+0x20>
 80223b0:	461a      	mov	r2, r3
 80223b2:	685b      	ldr	r3, [r3, #4]
 80223b4:	b10b      	cbz	r3, 80223ba <_free_r+0x4e>
 80223b6:	42a3      	cmp	r3, r4
 80223b8:	d9fa      	bls.n	80223b0 <_free_r+0x44>
 80223ba:	6811      	ldr	r1, [r2, #0]
 80223bc:	1855      	adds	r5, r2, r1
 80223be:	42a5      	cmp	r5, r4
 80223c0:	d10b      	bne.n	80223da <_free_r+0x6e>
 80223c2:	6824      	ldr	r4, [r4, #0]
 80223c4:	4421      	add	r1, r4
 80223c6:	1854      	adds	r4, r2, r1
 80223c8:	6011      	str	r1, [r2, #0]
 80223ca:	42a3      	cmp	r3, r4
 80223cc:	d1e0      	bne.n	8022390 <_free_r+0x24>
 80223ce:	681c      	ldr	r4, [r3, #0]
 80223d0:	685b      	ldr	r3, [r3, #4]
 80223d2:	4421      	add	r1, r4
 80223d4:	6053      	str	r3, [r2, #4]
 80223d6:	6011      	str	r1, [r2, #0]
 80223d8:	e7da      	b.n	8022390 <_free_r+0x24>
 80223da:	d902      	bls.n	80223e2 <_free_r+0x76>
 80223dc:	230c      	movs	r3, #12
 80223de:	6003      	str	r3, [r0, #0]
 80223e0:	e7d6      	b.n	8022390 <_free_r+0x24>
 80223e2:	6825      	ldr	r5, [r4, #0]
 80223e4:	1961      	adds	r1, r4, r5
 80223e6:	428b      	cmp	r3, r1
 80223e8:	bf02      	ittt	eq
 80223ea:	6819      	ldreq	r1, [r3, #0]
 80223ec:	685b      	ldreq	r3, [r3, #4]
 80223ee:	1949      	addeq	r1, r1, r5
 80223f0:	6063      	str	r3, [r4, #4]
 80223f2:	bf08      	it	eq
 80223f4:	6021      	streq	r1, [r4, #0]
 80223f6:	6054      	str	r4, [r2, #4]
 80223f8:	e7ca      	b.n	8022390 <_free_r+0x24>
 80223fa:	b003      	add	sp, #12
 80223fc:	bd30      	pop	{r4, r5, pc}
 80223fe:	bf00      	nop
 8022400:	20003d18 	.word	0x20003d18

08022404 <sbrk_aligned>:
 8022404:	b570      	push	{r4, r5, r6, lr}
 8022406:	4e0e      	ldr	r6, [pc, #56]	; (8022440 <sbrk_aligned+0x3c>)
 8022408:	460c      	mov	r4, r1
 802240a:	4605      	mov	r5, r0
 802240c:	6831      	ldr	r1, [r6, #0]
 802240e:	b911      	cbnz	r1, 8022416 <sbrk_aligned+0x12>
 8022410:	f000 f8ca 	bl	80225a8 <_sbrk_r>
 8022414:	6030      	str	r0, [r6, #0]
 8022416:	4621      	mov	r1, r4
 8022418:	4628      	mov	r0, r5
 802241a:	f000 f8c5 	bl	80225a8 <_sbrk_r>
 802241e:	1c43      	adds	r3, r0, #1
 8022420:	d00a      	beq.n	8022438 <sbrk_aligned+0x34>
 8022422:	1cc4      	adds	r4, r0, #3
 8022424:	f024 0403 	bic.w	r4, r4, #3
 8022428:	42a0      	cmp	r0, r4
 802242a:	d007      	beq.n	802243c <sbrk_aligned+0x38>
 802242c:	1a21      	subs	r1, r4, r0
 802242e:	4628      	mov	r0, r5
 8022430:	f000 f8ba 	bl	80225a8 <_sbrk_r>
 8022434:	3001      	adds	r0, #1
 8022436:	d101      	bne.n	802243c <sbrk_aligned+0x38>
 8022438:	f04f 34ff 	mov.w	r4, #4294967295
 802243c:	4620      	mov	r0, r4
 802243e:	bd70      	pop	{r4, r5, r6, pc}
 8022440:	20003d1c 	.word	0x20003d1c

08022444 <_malloc_r>:
 8022444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022448:	1ccd      	adds	r5, r1, #3
 802244a:	4607      	mov	r7, r0
 802244c:	f025 0503 	bic.w	r5, r5, #3
 8022450:	3508      	adds	r5, #8
 8022452:	2d0c      	cmp	r5, #12
 8022454:	bf38      	it	cc
 8022456:	250c      	movcc	r5, #12
 8022458:	2d00      	cmp	r5, #0
 802245a:	db01      	blt.n	8022460 <_malloc_r+0x1c>
 802245c:	42a9      	cmp	r1, r5
 802245e:	d905      	bls.n	802246c <_malloc_r+0x28>
 8022460:	230c      	movs	r3, #12
 8022462:	2600      	movs	r6, #0
 8022464:	603b      	str	r3, [r7, #0]
 8022466:	4630      	mov	r0, r6
 8022468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802246c:	4e2e      	ldr	r6, [pc, #184]	; (8022528 <_malloc_r+0xe4>)
 802246e:	f000 f9c5 	bl	80227fc <__malloc_lock>
 8022472:	6833      	ldr	r3, [r6, #0]
 8022474:	461c      	mov	r4, r3
 8022476:	bb34      	cbnz	r4, 80224c6 <_malloc_r+0x82>
 8022478:	4629      	mov	r1, r5
 802247a:	4638      	mov	r0, r7
 802247c:	f7ff ffc2 	bl	8022404 <sbrk_aligned>
 8022480:	1c43      	adds	r3, r0, #1
 8022482:	4604      	mov	r4, r0
 8022484:	d14d      	bne.n	8022522 <_malloc_r+0xde>
 8022486:	6834      	ldr	r4, [r6, #0]
 8022488:	4626      	mov	r6, r4
 802248a:	2e00      	cmp	r6, #0
 802248c:	d140      	bne.n	8022510 <_malloc_r+0xcc>
 802248e:	6823      	ldr	r3, [r4, #0]
 8022490:	4631      	mov	r1, r6
 8022492:	4638      	mov	r0, r7
 8022494:	eb04 0803 	add.w	r8, r4, r3
 8022498:	f000 f886 	bl	80225a8 <_sbrk_r>
 802249c:	4580      	cmp	r8, r0
 802249e:	d13a      	bne.n	8022516 <_malloc_r+0xd2>
 80224a0:	6821      	ldr	r1, [r4, #0]
 80224a2:	3503      	adds	r5, #3
 80224a4:	4638      	mov	r0, r7
 80224a6:	1a6d      	subs	r5, r5, r1
 80224a8:	f025 0503 	bic.w	r5, r5, #3
 80224ac:	3508      	adds	r5, #8
 80224ae:	2d0c      	cmp	r5, #12
 80224b0:	bf38      	it	cc
 80224b2:	250c      	movcc	r5, #12
 80224b4:	4629      	mov	r1, r5
 80224b6:	f7ff ffa5 	bl	8022404 <sbrk_aligned>
 80224ba:	3001      	adds	r0, #1
 80224bc:	d02b      	beq.n	8022516 <_malloc_r+0xd2>
 80224be:	6823      	ldr	r3, [r4, #0]
 80224c0:	442b      	add	r3, r5
 80224c2:	6023      	str	r3, [r4, #0]
 80224c4:	e00e      	b.n	80224e4 <_malloc_r+0xa0>
 80224c6:	6822      	ldr	r2, [r4, #0]
 80224c8:	1b52      	subs	r2, r2, r5
 80224ca:	d41e      	bmi.n	802250a <_malloc_r+0xc6>
 80224cc:	2a0b      	cmp	r2, #11
 80224ce:	d916      	bls.n	80224fe <_malloc_r+0xba>
 80224d0:	1961      	adds	r1, r4, r5
 80224d2:	42a3      	cmp	r3, r4
 80224d4:	6025      	str	r5, [r4, #0]
 80224d6:	bf18      	it	ne
 80224d8:	6059      	strne	r1, [r3, #4]
 80224da:	6863      	ldr	r3, [r4, #4]
 80224dc:	bf08      	it	eq
 80224de:	6031      	streq	r1, [r6, #0]
 80224e0:	5162      	str	r2, [r4, r5]
 80224e2:	604b      	str	r3, [r1, #4]
 80224e4:	f104 060b 	add.w	r6, r4, #11
 80224e8:	4638      	mov	r0, r7
 80224ea:	f000 f98d 	bl	8022808 <__malloc_unlock>
 80224ee:	1d23      	adds	r3, r4, #4
 80224f0:	f026 0607 	bic.w	r6, r6, #7
 80224f4:	1af2      	subs	r2, r6, r3
 80224f6:	d0b6      	beq.n	8022466 <_malloc_r+0x22>
 80224f8:	1b9b      	subs	r3, r3, r6
 80224fa:	50a3      	str	r3, [r4, r2]
 80224fc:	e7b3      	b.n	8022466 <_malloc_r+0x22>
 80224fe:	6862      	ldr	r2, [r4, #4]
 8022500:	42a3      	cmp	r3, r4
 8022502:	bf0c      	ite	eq
 8022504:	6032      	streq	r2, [r6, #0]
 8022506:	605a      	strne	r2, [r3, #4]
 8022508:	e7ec      	b.n	80224e4 <_malloc_r+0xa0>
 802250a:	4623      	mov	r3, r4
 802250c:	6864      	ldr	r4, [r4, #4]
 802250e:	e7b2      	b.n	8022476 <_malloc_r+0x32>
 8022510:	4634      	mov	r4, r6
 8022512:	6876      	ldr	r6, [r6, #4]
 8022514:	e7b9      	b.n	802248a <_malloc_r+0x46>
 8022516:	230c      	movs	r3, #12
 8022518:	4638      	mov	r0, r7
 802251a:	603b      	str	r3, [r7, #0]
 802251c:	f000 f974 	bl	8022808 <__malloc_unlock>
 8022520:	e7a1      	b.n	8022466 <_malloc_r+0x22>
 8022522:	6025      	str	r5, [r4, #0]
 8022524:	e7de      	b.n	80224e4 <_malloc_r+0xa0>
 8022526:	bf00      	nop
 8022528:	20003d18 	.word	0x20003d18

0802252c <rand>:
 802252c:	4b16      	ldr	r3, [pc, #88]	; (8022588 <rand+0x5c>)
 802252e:	b510      	push	{r4, lr}
 8022530:	681c      	ldr	r4, [r3, #0]
 8022532:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022534:	b9b3      	cbnz	r3, 8022564 <rand+0x38>
 8022536:	2018      	movs	r0, #24
 8022538:	f7ff fed8 	bl	80222ec <malloc>
 802253c:	63a0      	str	r0, [r4, #56]	; 0x38
 802253e:	b928      	cbnz	r0, 802254c <rand+0x20>
 8022540:	4602      	mov	r2, r0
 8022542:	4b12      	ldr	r3, [pc, #72]	; (802258c <rand+0x60>)
 8022544:	214e      	movs	r1, #78	; 0x4e
 8022546:	4812      	ldr	r0, [pc, #72]	; (8022590 <rand+0x64>)
 8022548:	f000 f906 	bl	8022758 <__assert_func>
 802254c:	4a11      	ldr	r2, [pc, #68]	; (8022594 <rand+0x68>)
 802254e:	4b12      	ldr	r3, [pc, #72]	; (8022598 <rand+0x6c>)
 8022550:	e9c0 2300 	strd	r2, r3, [r0]
 8022554:	4b11      	ldr	r3, [pc, #68]	; (802259c <rand+0x70>)
 8022556:	2201      	movs	r2, #1
 8022558:	6083      	str	r3, [r0, #8]
 802255a:	230b      	movs	r3, #11
 802255c:	8183      	strh	r3, [r0, #12]
 802255e:	2300      	movs	r3, #0
 8022560:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8022564:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8022566:	4a0e      	ldr	r2, [pc, #56]	; (80225a0 <rand+0x74>)
 8022568:	6920      	ldr	r0, [r4, #16]
 802256a:	6963      	ldr	r3, [r4, #20]
 802256c:	490d      	ldr	r1, [pc, #52]	; (80225a4 <rand+0x78>)
 802256e:	4342      	muls	r2, r0
 8022570:	fb01 2203 	mla	r2, r1, r3, r2
 8022574:	fba0 0101 	umull	r0, r1, r0, r1
 8022578:	1c43      	adds	r3, r0, #1
 802257a:	eb42 0001 	adc.w	r0, r2, r1
 802257e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8022582:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022586:	bd10      	pop	{r4, pc}
 8022588:	200000a0 	.word	0x200000a0
 802258c:	0802450c 	.word	0x0802450c
 8022590:	08024523 	.word	0x08024523
 8022594:	abcd330e 	.word	0xabcd330e
 8022598:	e66d1234 	.word	0xe66d1234
 802259c:	0005deec 	.word	0x0005deec
 80225a0:	5851f42d 	.word	0x5851f42d
 80225a4:	4c957f2d 	.word	0x4c957f2d

080225a8 <_sbrk_r>:
 80225a8:	b538      	push	{r3, r4, r5, lr}
 80225aa:	2300      	movs	r3, #0
 80225ac:	4d05      	ldr	r5, [pc, #20]	; (80225c4 <_sbrk_r+0x1c>)
 80225ae:	4604      	mov	r4, r0
 80225b0:	4608      	mov	r0, r1
 80225b2:	602b      	str	r3, [r5, #0]
 80225b4:	f7f0 fea0 	bl	80132f8 <_sbrk>
 80225b8:	1c43      	adds	r3, r0, #1
 80225ba:	d102      	bne.n	80225c2 <_sbrk_r+0x1a>
 80225bc:	682b      	ldr	r3, [r5, #0]
 80225be:	b103      	cbz	r3, 80225c2 <_sbrk_r+0x1a>
 80225c0:	6023      	str	r3, [r4, #0]
 80225c2:	bd38      	pop	{r3, r4, r5, pc}
 80225c4:	20003d20 	.word	0x20003d20

080225c8 <_raise_r>:
 80225c8:	291f      	cmp	r1, #31
 80225ca:	b538      	push	{r3, r4, r5, lr}
 80225cc:	4604      	mov	r4, r0
 80225ce:	460d      	mov	r5, r1
 80225d0:	d904      	bls.n	80225dc <_raise_r+0x14>
 80225d2:	2316      	movs	r3, #22
 80225d4:	6003      	str	r3, [r0, #0]
 80225d6:	f04f 30ff 	mov.w	r0, #4294967295
 80225da:	bd38      	pop	{r3, r4, r5, pc}
 80225dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80225de:	b112      	cbz	r2, 80225e6 <_raise_r+0x1e>
 80225e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80225e4:	b94b      	cbnz	r3, 80225fa <_raise_r+0x32>
 80225e6:	4620      	mov	r0, r4
 80225e8:	f000 f830 	bl	802264c <_getpid_r>
 80225ec:	462a      	mov	r2, r5
 80225ee:	4601      	mov	r1, r0
 80225f0:	4620      	mov	r0, r4
 80225f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80225f6:	f000 b817 	b.w	8022628 <_kill_r>
 80225fa:	2b01      	cmp	r3, #1
 80225fc:	d00a      	beq.n	8022614 <_raise_r+0x4c>
 80225fe:	1c59      	adds	r1, r3, #1
 8022600:	d103      	bne.n	802260a <_raise_r+0x42>
 8022602:	2316      	movs	r3, #22
 8022604:	6003      	str	r3, [r0, #0]
 8022606:	2001      	movs	r0, #1
 8022608:	e7e7      	b.n	80225da <_raise_r+0x12>
 802260a:	2400      	movs	r4, #0
 802260c:	4628      	mov	r0, r5
 802260e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022612:	4798      	blx	r3
 8022614:	2000      	movs	r0, #0
 8022616:	e7e0      	b.n	80225da <_raise_r+0x12>

08022618 <raise>:
 8022618:	4b02      	ldr	r3, [pc, #8]	; (8022624 <raise+0xc>)
 802261a:	4601      	mov	r1, r0
 802261c:	6818      	ldr	r0, [r3, #0]
 802261e:	f7ff bfd3 	b.w	80225c8 <_raise_r>
 8022622:	bf00      	nop
 8022624:	200000a0 	.word	0x200000a0

08022628 <_kill_r>:
 8022628:	b538      	push	{r3, r4, r5, lr}
 802262a:	2300      	movs	r3, #0
 802262c:	4d06      	ldr	r5, [pc, #24]	; (8022648 <_kill_r+0x20>)
 802262e:	4604      	mov	r4, r0
 8022630:	4608      	mov	r0, r1
 8022632:	4611      	mov	r1, r2
 8022634:	602b      	str	r3, [r5, #0]
 8022636:	f7f0 fdd7 	bl	80131e8 <_kill>
 802263a:	1c43      	adds	r3, r0, #1
 802263c:	d102      	bne.n	8022644 <_kill_r+0x1c>
 802263e:	682b      	ldr	r3, [r5, #0]
 8022640:	b103      	cbz	r3, 8022644 <_kill_r+0x1c>
 8022642:	6023      	str	r3, [r4, #0]
 8022644:	bd38      	pop	{r3, r4, r5, pc}
 8022646:	bf00      	nop
 8022648:	20003d20 	.word	0x20003d20

0802264c <_getpid_r>:
 802264c:	f7f0 bdc4 	b.w	80131d8 <_getpid>

08022650 <siscanf>:
 8022650:	b40e      	push	{r1, r2, r3}
 8022652:	b510      	push	{r4, lr}
 8022654:	b09f      	sub	sp, #124	; 0x7c
 8022656:	f44f 7101 	mov.w	r1, #516	; 0x204
 802265a:	ac21      	add	r4, sp, #132	; 0x84
 802265c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022660:	9004      	str	r0, [sp, #16]
 8022662:	f854 2b04 	ldr.w	r2, [r4], #4
 8022666:	9008      	str	r0, [sp, #32]
 8022668:	9201      	str	r2, [sp, #4]
 802266a:	f7dd fdf3 	bl	8000254 <strlen>
 802266e:	4b0c      	ldr	r3, [pc, #48]	; (80226a0 <siscanf+0x50>)
 8022670:	a904      	add	r1, sp, #16
 8022672:	9005      	str	r0, [sp, #20]
 8022674:	930d      	str	r3, [sp, #52]	; 0x34
 8022676:	2300      	movs	r3, #0
 8022678:	9009      	str	r0, [sp, #36]	; 0x24
 802267a:	9311      	str	r3, [sp, #68]	; 0x44
 802267c:	9316      	str	r3, [sp, #88]	; 0x58
 802267e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022682:	4808      	ldr	r0, [pc, #32]	; (80226a4 <siscanf+0x54>)
 8022684:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022688:	4623      	mov	r3, r4
 802268a:	9a01      	ldr	r2, [sp, #4]
 802268c:	6800      	ldr	r0, [r0, #0]
 802268e:	9403      	str	r4, [sp, #12]
 8022690:	f000 f91a 	bl	80228c8 <__ssvfiscanf_r>
 8022694:	b01f      	add	sp, #124	; 0x7c
 8022696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802269a:	b003      	add	sp, #12
 802269c:	4770      	bx	lr
 802269e:	bf00      	nop
 80226a0:	080226cb 	.word	0x080226cb
 80226a4:	200000a0 	.word	0x200000a0

080226a8 <__sread>:
 80226a8:	b510      	push	{r4, lr}
 80226aa:	460c      	mov	r4, r1
 80226ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80226b0:	f000 fec8 	bl	8023444 <_read_r>
 80226b4:	2800      	cmp	r0, #0
 80226b6:	bfab      	itete	ge
 80226b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80226ba:	89a3      	ldrhlt	r3, [r4, #12]
 80226bc:	181b      	addge	r3, r3, r0
 80226be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80226c2:	bfac      	ite	ge
 80226c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80226c6:	81a3      	strhlt	r3, [r4, #12]
 80226c8:	bd10      	pop	{r4, pc}

080226ca <__seofread>:
 80226ca:	2000      	movs	r0, #0
 80226cc:	4770      	bx	lr

080226ce <__swrite>:
 80226ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80226d2:	461f      	mov	r7, r3
 80226d4:	898b      	ldrh	r3, [r1, #12]
 80226d6:	4605      	mov	r5, r0
 80226d8:	460c      	mov	r4, r1
 80226da:	05db      	lsls	r3, r3, #23
 80226dc:	4616      	mov	r6, r2
 80226de:	d505      	bpl.n	80226ec <__swrite+0x1e>
 80226e0:	2302      	movs	r3, #2
 80226e2:	2200      	movs	r2, #0
 80226e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80226e8:	f000 f876 	bl	80227d8 <_lseek_r>
 80226ec:	89a3      	ldrh	r3, [r4, #12]
 80226ee:	4632      	mov	r2, r6
 80226f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80226f4:	4628      	mov	r0, r5
 80226f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80226fa:	81a3      	strh	r3, [r4, #12]
 80226fc:	463b      	mov	r3, r7
 80226fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022702:	f000 b817 	b.w	8022734 <_write_r>

08022706 <__sseek>:
 8022706:	b510      	push	{r4, lr}
 8022708:	460c      	mov	r4, r1
 802270a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802270e:	f000 f863 	bl	80227d8 <_lseek_r>
 8022712:	1c43      	adds	r3, r0, #1
 8022714:	89a3      	ldrh	r3, [r4, #12]
 8022716:	bf15      	itete	ne
 8022718:	6560      	strne	r0, [r4, #84]	; 0x54
 802271a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802271e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022722:	81a3      	strheq	r3, [r4, #12]
 8022724:	bf18      	it	ne
 8022726:	81a3      	strhne	r3, [r4, #12]
 8022728:	bd10      	pop	{r4, pc}

0802272a <__sclose>:
 802272a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802272e:	f000 b831 	b.w	8022794 <_close_r>
	...

08022734 <_write_r>:
 8022734:	b538      	push	{r3, r4, r5, lr}
 8022736:	4604      	mov	r4, r0
 8022738:	4d06      	ldr	r5, [pc, #24]	; (8022754 <_write_r+0x20>)
 802273a:	4608      	mov	r0, r1
 802273c:	4611      	mov	r1, r2
 802273e:	2200      	movs	r2, #0
 8022740:	602a      	str	r2, [r5, #0]
 8022742:	461a      	mov	r2, r3
 8022744:	f7f0 fd87 	bl	8013256 <_write>
 8022748:	1c43      	adds	r3, r0, #1
 802274a:	d102      	bne.n	8022752 <_write_r+0x1e>
 802274c:	682b      	ldr	r3, [r5, #0]
 802274e:	b103      	cbz	r3, 8022752 <_write_r+0x1e>
 8022750:	6023      	str	r3, [r4, #0]
 8022752:	bd38      	pop	{r3, r4, r5, pc}
 8022754:	20003d20 	.word	0x20003d20

08022758 <__assert_func>:
 8022758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802275a:	4614      	mov	r4, r2
 802275c:	461a      	mov	r2, r3
 802275e:	4b09      	ldr	r3, [pc, #36]	; (8022784 <__assert_func+0x2c>)
 8022760:	4605      	mov	r5, r0
 8022762:	681b      	ldr	r3, [r3, #0]
 8022764:	68d8      	ldr	r0, [r3, #12]
 8022766:	b14c      	cbz	r4, 802277c <__assert_func+0x24>
 8022768:	4b07      	ldr	r3, [pc, #28]	; (8022788 <__assert_func+0x30>)
 802276a:	9100      	str	r1, [sp, #0]
 802276c:	4907      	ldr	r1, [pc, #28]	; (802278c <__assert_func+0x34>)
 802276e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022772:	462b      	mov	r3, r5
 8022774:	f000 f81e 	bl	80227b4 <fiprintf>
 8022778:	f7ff fd86 	bl	8022288 <abort>
 802277c:	4b04      	ldr	r3, [pc, #16]	; (8022790 <__assert_func+0x38>)
 802277e:	461c      	mov	r4, r3
 8022780:	e7f3      	b.n	802276a <__assert_func+0x12>
 8022782:	bf00      	nop
 8022784:	200000a0 	.word	0x200000a0
 8022788:	0802457e 	.word	0x0802457e
 802278c:	0802458b 	.word	0x0802458b
 8022790:	080245b9 	.word	0x080245b9

08022794 <_close_r>:
 8022794:	b538      	push	{r3, r4, r5, lr}
 8022796:	2300      	movs	r3, #0
 8022798:	4d05      	ldr	r5, [pc, #20]	; (80227b0 <_close_r+0x1c>)
 802279a:	4604      	mov	r4, r0
 802279c:	4608      	mov	r0, r1
 802279e:	602b      	str	r3, [r5, #0]
 80227a0:	f7f0 fd75 	bl	801328e <_close>
 80227a4:	1c43      	adds	r3, r0, #1
 80227a6:	d102      	bne.n	80227ae <_close_r+0x1a>
 80227a8:	682b      	ldr	r3, [r5, #0]
 80227aa:	b103      	cbz	r3, 80227ae <_close_r+0x1a>
 80227ac:	6023      	str	r3, [r4, #0]
 80227ae:	bd38      	pop	{r3, r4, r5, pc}
 80227b0:	20003d20 	.word	0x20003d20

080227b4 <fiprintf>:
 80227b4:	b40e      	push	{r1, r2, r3}
 80227b6:	b503      	push	{r0, r1, lr}
 80227b8:	ab03      	add	r3, sp, #12
 80227ba:	4601      	mov	r1, r0
 80227bc:	4805      	ldr	r0, [pc, #20]	; (80227d4 <fiprintf+0x20>)
 80227be:	f853 2b04 	ldr.w	r2, [r3], #4
 80227c2:	6800      	ldr	r0, [r0, #0]
 80227c4:	9301      	str	r3, [sp, #4]
 80227c6:	f000 fa25 	bl	8022c14 <_vfiprintf_r>
 80227ca:	b002      	add	sp, #8
 80227cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80227d0:	b003      	add	sp, #12
 80227d2:	4770      	bx	lr
 80227d4:	200000a0 	.word	0x200000a0

080227d8 <_lseek_r>:
 80227d8:	b538      	push	{r3, r4, r5, lr}
 80227da:	4604      	mov	r4, r0
 80227dc:	4d06      	ldr	r5, [pc, #24]	; (80227f8 <_lseek_r+0x20>)
 80227de:	4608      	mov	r0, r1
 80227e0:	4611      	mov	r1, r2
 80227e2:	2200      	movs	r2, #0
 80227e4:	602a      	str	r2, [r5, #0]
 80227e6:	461a      	mov	r2, r3
 80227e8:	f7f0 fd78 	bl	80132dc <_lseek>
 80227ec:	1c43      	adds	r3, r0, #1
 80227ee:	d102      	bne.n	80227f6 <_lseek_r+0x1e>
 80227f0:	682b      	ldr	r3, [r5, #0]
 80227f2:	b103      	cbz	r3, 80227f6 <_lseek_r+0x1e>
 80227f4:	6023      	str	r3, [r4, #0]
 80227f6:	bd38      	pop	{r3, r4, r5, pc}
 80227f8:	20003d20 	.word	0x20003d20

080227fc <__malloc_lock>:
 80227fc:	4801      	ldr	r0, [pc, #4]	; (8022804 <__malloc_lock+0x8>)
 80227fe:	f001 ba11 	b.w	8023c24 <__retarget_lock_acquire_recursive>
 8022802:	bf00      	nop
 8022804:	20003d24 	.word	0x20003d24

08022808 <__malloc_unlock>:
 8022808:	4801      	ldr	r0, [pc, #4]	; (8022810 <__malloc_unlock+0x8>)
 802280a:	f001 ba0c 	b.w	8023c26 <__retarget_lock_release_recursive>
 802280e:	bf00      	nop
 8022810:	20003d24 	.word	0x20003d24

08022814 <_sungetc_r>:
 8022814:	b538      	push	{r3, r4, r5, lr}
 8022816:	1c4b      	adds	r3, r1, #1
 8022818:	4614      	mov	r4, r2
 802281a:	d103      	bne.n	8022824 <_sungetc_r+0x10>
 802281c:	f04f 35ff 	mov.w	r5, #4294967295
 8022820:	4628      	mov	r0, r5
 8022822:	bd38      	pop	{r3, r4, r5, pc}
 8022824:	8993      	ldrh	r3, [r2, #12]
 8022826:	b2cd      	uxtb	r5, r1
 8022828:	f023 0320 	bic.w	r3, r3, #32
 802282c:	8193      	strh	r3, [r2, #12]
 802282e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022830:	6852      	ldr	r2, [r2, #4]
 8022832:	b18b      	cbz	r3, 8022858 <_sungetc_r+0x44>
 8022834:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022836:	4293      	cmp	r3, r2
 8022838:	dd08      	ble.n	802284c <_sungetc_r+0x38>
 802283a:	6823      	ldr	r3, [r4, #0]
 802283c:	1e5a      	subs	r2, r3, #1
 802283e:	6022      	str	r2, [r4, #0]
 8022840:	f803 5c01 	strb.w	r5, [r3, #-1]
 8022844:	6863      	ldr	r3, [r4, #4]
 8022846:	3301      	adds	r3, #1
 8022848:	6063      	str	r3, [r4, #4]
 802284a:	e7e9      	b.n	8022820 <_sungetc_r+0xc>
 802284c:	4621      	mov	r1, r4
 802284e:	f000 ff3b 	bl	80236c8 <__submore>
 8022852:	2800      	cmp	r0, #0
 8022854:	d0f1      	beq.n	802283a <_sungetc_r+0x26>
 8022856:	e7e1      	b.n	802281c <_sungetc_r+0x8>
 8022858:	6921      	ldr	r1, [r4, #16]
 802285a:	6823      	ldr	r3, [r4, #0]
 802285c:	b151      	cbz	r1, 8022874 <_sungetc_r+0x60>
 802285e:	4299      	cmp	r1, r3
 8022860:	d208      	bcs.n	8022874 <_sungetc_r+0x60>
 8022862:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8022866:	42a9      	cmp	r1, r5
 8022868:	d104      	bne.n	8022874 <_sungetc_r+0x60>
 802286a:	3b01      	subs	r3, #1
 802286c:	3201      	adds	r2, #1
 802286e:	6023      	str	r3, [r4, #0]
 8022870:	6062      	str	r2, [r4, #4]
 8022872:	e7d5      	b.n	8022820 <_sungetc_r+0xc>
 8022874:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8022878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802287c:	6363      	str	r3, [r4, #52]	; 0x34
 802287e:	2303      	movs	r3, #3
 8022880:	63a3      	str	r3, [r4, #56]	; 0x38
 8022882:	4623      	mov	r3, r4
 8022884:	f803 5f46 	strb.w	r5, [r3, #70]!
 8022888:	6023      	str	r3, [r4, #0]
 802288a:	2301      	movs	r3, #1
 802288c:	e7dc      	b.n	8022848 <_sungetc_r+0x34>

0802288e <__ssrefill_r>:
 802288e:	b510      	push	{r4, lr}
 8022890:	460c      	mov	r4, r1
 8022892:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8022894:	b169      	cbz	r1, 80228b2 <__ssrefill_r+0x24>
 8022896:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802289a:	4299      	cmp	r1, r3
 802289c:	d001      	beq.n	80228a2 <__ssrefill_r+0x14>
 802289e:	f7ff fd65 	bl	802236c <_free_r>
 80228a2:	2000      	movs	r0, #0
 80228a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80228a6:	6360      	str	r0, [r4, #52]	; 0x34
 80228a8:	6063      	str	r3, [r4, #4]
 80228aa:	b113      	cbz	r3, 80228b2 <__ssrefill_r+0x24>
 80228ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80228ae:	6023      	str	r3, [r4, #0]
 80228b0:	bd10      	pop	{r4, pc}
 80228b2:	6923      	ldr	r3, [r4, #16]
 80228b4:	f04f 30ff 	mov.w	r0, #4294967295
 80228b8:	6023      	str	r3, [r4, #0]
 80228ba:	2300      	movs	r3, #0
 80228bc:	6063      	str	r3, [r4, #4]
 80228be:	89a3      	ldrh	r3, [r4, #12]
 80228c0:	f043 0320 	orr.w	r3, r3, #32
 80228c4:	81a3      	strh	r3, [r4, #12]
 80228c6:	e7f3      	b.n	80228b0 <__ssrefill_r+0x22>

080228c8 <__ssvfiscanf_r>:
 80228c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80228cc:	460c      	mov	r4, r1
 80228ce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80228d2:	2100      	movs	r1, #0
 80228d4:	4606      	mov	r6, r0
 80228d6:	f10d 0804 	add.w	r8, sp, #4
 80228da:	4fa8      	ldr	r7, [pc, #672]	; (8022b7c <__ssvfiscanf_r+0x2b4>)
 80228dc:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8022b88 <__ssvfiscanf_r+0x2c0>
 80228e0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80228e4:	9300      	str	r3, [sp, #0]
 80228e6:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80228ea:	49a5      	ldr	r1, [pc, #660]	; (8022b80 <__ssvfiscanf_r+0x2b8>)
 80228ec:	91a0      	str	r1, [sp, #640]	; 0x280
 80228ee:	49a5      	ldr	r1, [pc, #660]	; (8022b84 <__ssvfiscanf_r+0x2bc>)
 80228f0:	91a1      	str	r1, [sp, #644]	; 0x284
 80228f2:	7813      	ldrb	r3, [r2, #0]
 80228f4:	2b00      	cmp	r3, #0
 80228f6:	f000 815e 	beq.w	8022bb6 <__ssvfiscanf_r+0x2ee>
 80228fa:	5dd9      	ldrb	r1, [r3, r7]
 80228fc:	1c55      	adds	r5, r2, #1
 80228fe:	f011 0108 	ands.w	r1, r1, #8
 8022902:	d019      	beq.n	8022938 <__ssvfiscanf_r+0x70>
 8022904:	6863      	ldr	r3, [r4, #4]
 8022906:	2b00      	cmp	r3, #0
 8022908:	dd0f      	ble.n	802292a <__ssvfiscanf_r+0x62>
 802290a:	6823      	ldr	r3, [r4, #0]
 802290c:	781a      	ldrb	r2, [r3, #0]
 802290e:	5cba      	ldrb	r2, [r7, r2]
 8022910:	0712      	lsls	r2, r2, #28
 8022912:	d401      	bmi.n	8022918 <__ssvfiscanf_r+0x50>
 8022914:	462a      	mov	r2, r5
 8022916:	e7ec      	b.n	80228f2 <__ssvfiscanf_r+0x2a>
 8022918:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802291a:	3301      	adds	r3, #1
 802291c:	3201      	adds	r2, #1
 802291e:	6023      	str	r3, [r4, #0]
 8022920:	9245      	str	r2, [sp, #276]	; 0x114
 8022922:	6862      	ldr	r2, [r4, #4]
 8022924:	3a01      	subs	r2, #1
 8022926:	6062      	str	r2, [r4, #4]
 8022928:	e7ec      	b.n	8022904 <__ssvfiscanf_r+0x3c>
 802292a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802292c:	4621      	mov	r1, r4
 802292e:	4630      	mov	r0, r6
 8022930:	4798      	blx	r3
 8022932:	2800      	cmp	r0, #0
 8022934:	d0e9      	beq.n	802290a <__ssvfiscanf_r+0x42>
 8022936:	e7ed      	b.n	8022914 <__ssvfiscanf_r+0x4c>
 8022938:	2b25      	cmp	r3, #37	; 0x25
 802293a:	d012      	beq.n	8022962 <__ssvfiscanf_r+0x9a>
 802293c:	469a      	mov	sl, r3
 802293e:	6863      	ldr	r3, [r4, #4]
 8022940:	2b00      	cmp	r3, #0
 8022942:	f340 8094 	ble.w	8022a6e <__ssvfiscanf_r+0x1a6>
 8022946:	6822      	ldr	r2, [r4, #0]
 8022948:	7813      	ldrb	r3, [r2, #0]
 802294a:	4553      	cmp	r3, sl
 802294c:	f040 8133 	bne.w	8022bb6 <__ssvfiscanf_r+0x2ee>
 8022950:	6863      	ldr	r3, [r4, #4]
 8022952:	3201      	adds	r2, #1
 8022954:	3b01      	subs	r3, #1
 8022956:	6022      	str	r2, [r4, #0]
 8022958:	6063      	str	r3, [r4, #4]
 802295a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802295c:	3301      	adds	r3, #1
 802295e:	9345      	str	r3, [sp, #276]	; 0x114
 8022960:	e7d8      	b.n	8022914 <__ssvfiscanf_r+0x4c>
 8022962:	9141      	str	r1, [sp, #260]	; 0x104
 8022964:	9143      	str	r1, [sp, #268]	; 0x10c
 8022966:	7853      	ldrb	r3, [r2, #1]
 8022968:	2b2a      	cmp	r3, #42	; 0x2a
 802296a:	bf04      	itt	eq
 802296c:	2310      	moveq	r3, #16
 802296e:	1c95      	addeq	r5, r2, #2
 8022970:	f04f 020a 	mov.w	r2, #10
 8022974:	bf08      	it	eq
 8022976:	9341      	streq	r3, [sp, #260]	; 0x104
 8022978:	46aa      	mov	sl, r5
 802297a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 802297e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8022982:	2b09      	cmp	r3, #9
 8022984:	d91d      	bls.n	80229c2 <__ssvfiscanf_r+0xfa>
 8022986:	2203      	movs	r2, #3
 8022988:	487f      	ldr	r0, [pc, #508]	; (8022b88 <__ssvfiscanf_r+0x2c0>)
 802298a:	f001 f9b3 	bl	8023cf4 <memchr>
 802298e:	b140      	cbz	r0, 80229a2 <__ssvfiscanf_r+0xda>
 8022990:	2301      	movs	r3, #1
 8022992:	eba0 0009 	sub.w	r0, r0, r9
 8022996:	4655      	mov	r5, sl
 8022998:	fa03 f000 	lsl.w	r0, r3, r0
 802299c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802299e:	4318      	orrs	r0, r3
 80229a0:	9041      	str	r0, [sp, #260]	; 0x104
 80229a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80229a6:	2b78      	cmp	r3, #120	; 0x78
 80229a8:	d806      	bhi.n	80229b8 <__ssvfiscanf_r+0xf0>
 80229aa:	2b57      	cmp	r3, #87	; 0x57
 80229ac:	d810      	bhi.n	80229d0 <__ssvfiscanf_r+0x108>
 80229ae:	2b25      	cmp	r3, #37	; 0x25
 80229b0:	d0c4      	beq.n	802293c <__ssvfiscanf_r+0x74>
 80229b2:	d857      	bhi.n	8022a64 <__ssvfiscanf_r+0x19c>
 80229b4:	2b00      	cmp	r3, #0
 80229b6:	d065      	beq.n	8022a84 <__ssvfiscanf_r+0x1bc>
 80229b8:	2303      	movs	r3, #3
 80229ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80229bc:	230a      	movs	r3, #10
 80229be:	9342      	str	r3, [sp, #264]	; 0x108
 80229c0:	e072      	b.n	8022aa8 <__ssvfiscanf_r+0x1e0>
 80229c2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80229c4:	4655      	mov	r5, sl
 80229c6:	fb02 1103 	mla	r1, r2, r3, r1
 80229ca:	3930      	subs	r1, #48	; 0x30
 80229cc:	9143      	str	r1, [sp, #268]	; 0x10c
 80229ce:	e7d3      	b.n	8022978 <__ssvfiscanf_r+0xb0>
 80229d0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80229d4:	2a20      	cmp	r2, #32
 80229d6:	d8ef      	bhi.n	80229b8 <__ssvfiscanf_r+0xf0>
 80229d8:	a101      	add	r1, pc, #4	; (adr r1, 80229e0 <__ssvfiscanf_r+0x118>)
 80229da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80229de:	bf00      	nop
 80229e0:	08022a93 	.word	0x08022a93
 80229e4:	080229b9 	.word	0x080229b9
 80229e8:	080229b9 	.word	0x080229b9
 80229ec:	08022af1 	.word	0x08022af1
 80229f0:	080229b9 	.word	0x080229b9
 80229f4:	080229b9 	.word	0x080229b9
 80229f8:	080229b9 	.word	0x080229b9
 80229fc:	080229b9 	.word	0x080229b9
 8022a00:	080229b9 	.word	0x080229b9
 8022a04:	080229b9 	.word	0x080229b9
 8022a08:	080229b9 	.word	0x080229b9
 8022a0c:	08022b07 	.word	0x08022b07
 8022a10:	08022add 	.word	0x08022add
 8022a14:	08022a6b 	.word	0x08022a6b
 8022a18:	08022a6b 	.word	0x08022a6b
 8022a1c:	08022a6b 	.word	0x08022a6b
 8022a20:	080229b9 	.word	0x080229b9
 8022a24:	08022ae1 	.word	0x08022ae1
 8022a28:	080229b9 	.word	0x080229b9
 8022a2c:	080229b9 	.word	0x080229b9
 8022a30:	080229b9 	.word	0x080229b9
 8022a34:	080229b9 	.word	0x080229b9
 8022a38:	08022b17 	.word	0x08022b17
 8022a3c:	08022ae9 	.word	0x08022ae9
 8022a40:	08022a8b 	.word	0x08022a8b
 8022a44:	080229b9 	.word	0x080229b9
 8022a48:	080229b9 	.word	0x080229b9
 8022a4c:	08022b13 	.word	0x08022b13
 8022a50:	080229b9 	.word	0x080229b9
 8022a54:	08022add 	.word	0x08022add
 8022a58:	080229b9 	.word	0x080229b9
 8022a5c:	080229b9 	.word	0x080229b9
 8022a60:	08022a93 	.word	0x08022a93
 8022a64:	3b45      	subs	r3, #69	; 0x45
 8022a66:	2b02      	cmp	r3, #2
 8022a68:	d8a6      	bhi.n	80229b8 <__ssvfiscanf_r+0xf0>
 8022a6a:	2305      	movs	r3, #5
 8022a6c:	e01b      	b.n	8022aa6 <__ssvfiscanf_r+0x1de>
 8022a6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022a70:	4621      	mov	r1, r4
 8022a72:	4630      	mov	r0, r6
 8022a74:	4798      	blx	r3
 8022a76:	2800      	cmp	r0, #0
 8022a78:	f43f af65 	beq.w	8022946 <__ssvfiscanf_r+0x7e>
 8022a7c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8022a7e:	2800      	cmp	r0, #0
 8022a80:	f040 808f 	bne.w	8022ba2 <__ssvfiscanf_r+0x2da>
 8022a84:	f04f 30ff 	mov.w	r0, #4294967295
 8022a88:	e091      	b.n	8022bae <__ssvfiscanf_r+0x2e6>
 8022a8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022a8c:	f042 0220 	orr.w	r2, r2, #32
 8022a90:	9241      	str	r2, [sp, #260]	; 0x104
 8022a92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022a98:	9241      	str	r2, [sp, #260]	; 0x104
 8022a9a:	2210      	movs	r2, #16
 8022a9c:	2b6f      	cmp	r3, #111	; 0x6f
 8022a9e:	9242      	str	r2, [sp, #264]	; 0x108
 8022aa0:	bf34      	ite	cc
 8022aa2:	2303      	movcc	r3, #3
 8022aa4:	2304      	movcs	r3, #4
 8022aa6:	9347      	str	r3, [sp, #284]	; 0x11c
 8022aa8:	6863      	ldr	r3, [r4, #4]
 8022aaa:	2b00      	cmp	r3, #0
 8022aac:	dd43      	ble.n	8022b36 <__ssvfiscanf_r+0x26e>
 8022aae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022ab0:	0659      	lsls	r1, r3, #25
 8022ab2:	d404      	bmi.n	8022abe <__ssvfiscanf_r+0x1f6>
 8022ab4:	6823      	ldr	r3, [r4, #0]
 8022ab6:	781a      	ldrb	r2, [r3, #0]
 8022ab8:	5cba      	ldrb	r2, [r7, r2]
 8022aba:	0712      	lsls	r2, r2, #28
 8022abc:	d442      	bmi.n	8022b44 <__ssvfiscanf_r+0x27c>
 8022abe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8022ac0:	2b02      	cmp	r3, #2
 8022ac2:	dc51      	bgt.n	8022b68 <__ssvfiscanf_r+0x2a0>
 8022ac4:	466b      	mov	r3, sp
 8022ac6:	4622      	mov	r2, r4
 8022ac8:	a941      	add	r1, sp, #260	; 0x104
 8022aca:	4630      	mov	r0, r6
 8022acc:	f000 fb68 	bl	80231a0 <_scanf_chars>
 8022ad0:	2801      	cmp	r0, #1
 8022ad2:	d070      	beq.n	8022bb6 <__ssvfiscanf_r+0x2ee>
 8022ad4:	2802      	cmp	r0, #2
 8022ad6:	f47f af1d 	bne.w	8022914 <__ssvfiscanf_r+0x4c>
 8022ada:	e7cf      	b.n	8022a7c <__ssvfiscanf_r+0x1b4>
 8022adc:	220a      	movs	r2, #10
 8022ade:	e7dd      	b.n	8022a9c <__ssvfiscanf_r+0x1d4>
 8022ae0:	2300      	movs	r3, #0
 8022ae2:	9342      	str	r3, [sp, #264]	; 0x108
 8022ae4:	2303      	movs	r3, #3
 8022ae6:	e7de      	b.n	8022aa6 <__ssvfiscanf_r+0x1de>
 8022ae8:	2308      	movs	r3, #8
 8022aea:	9342      	str	r3, [sp, #264]	; 0x108
 8022aec:	2304      	movs	r3, #4
 8022aee:	e7da      	b.n	8022aa6 <__ssvfiscanf_r+0x1de>
 8022af0:	4629      	mov	r1, r5
 8022af2:	4640      	mov	r0, r8
 8022af4:	f000 fcb8 	bl	8023468 <__sccl>
 8022af8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022afa:	4605      	mov	r5, r0
 8022afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022b00:	9341      	str	r3, [sp, #260]	; 0x104
 8022b02:	2301      	movs	r3, #1
 8022b04:	e7cf      	b.n	8022aa6 <__ssvfiscanf_r+0x1de>
 8022b06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022b0c:	9341      	str	r3, [sp, #260]	; 0x104
 8022b0e:	2300      	movs	r3, #0
 8022b10:	e7c9      	b.n	8022aa6 <__ssvfiscanf_r+0x1de>
 8022b12:	2302      	movs	r3, #2
 8022b14:	e7c7      	b.n	8022aa6 <__ssvfiscanf_r+0x1de>
 8022b16:	9841      	ldr	r0, [sp, #260]	; 0x104
 8022b18:	06c3      	lsls	r3, r0, #27
 8022b1a:	f53f aefb 	bmi.w	8022914 <__ssvfiscanf_r+0x4c>
 8022b1e:	9b00      	ldr	r3, [sp, #0]
 8022b20:	f010 0f01 	tst.w	r0, #1
 8022b24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022b26:	f103 0104 	add.w	r1, r3, #4
 8022b2a:	9100      	str	r1, [sp, #0]
 8022b2c:	681b      	ldr	r3, [r3, #0]
 8022b2e:	bf14      	ite	ne
 8022b30:	801a      	strhne	r2, [r3, #0]
 8022b32:	601a      	streq	r2, [r3, #0]
 8022b34:	e6ee      	b.n	8022914 <__ssvfiscanf_r+0x4c>
 8022b36:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022b38:	4621      	mov	r1, r4
 8022b3a:	4630      	mov	r0, r6
 8022b3c:	4798      	blx	r3
 8022b3e:	2800      	cmp	r0, #0
 8022b40:	d0b5      	beq.n	8022aae <__ssvfiscanf_r+0x1e6>
 8022b42:	e79b      	b.n	8022a7c <__ssvfiscanf_r+0x1b4>
 8022b44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022b46:	3201      	adds	r2, #1
 8022b48:	9245      	str	r2, [sp, #276]	; 0x114
 8022b4a:	6862      	ldr	r2, [r4, #4]
 8022b4c:	3a01      	subs	r2, #1
 8022b4e:	2a00      	cmp	r2, #0
 8022b50:	6062      	str	r2, [r4, #4]
 8022b52:	dd02      	ble.n	8022b5a <__ssvfiscanf_r+0x292>
 8022b54:	3301      	adds	r3, #1
 8022b56:	6023      	str	r3, [r4, #0]
 8022b58:	e7ac      	b.n	8022ab4 <__ssvfiscanf_r+0x1ec>
 8022b5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022b5c:	4621      	mov	r1, r4
 8022b5e:	4630      	mov	r0, r6
 8022b60:	4798      	blx	r3
 8022b62:	2800      	cmp	r0, #0
 8022b64:	d0a6      	beq.n	8022ab4 <__ssvfiscanf_r+0x1ec>
 8022b66:	e789      	b.n	8022a7c <__ssvfiscanf_r+0x1b4>
 8022b68:	2b04      	cmp	r3, #4
 8022b6a:	dc0f      	bgt.n	8022b8c <__ssvfiscanf_r+0x2c4>
 8022b6c:	466b      	mov	r3, sp
 8022b6e:	4622      	mov	r2, r4
 8022b70:	a941      	add	r1, sp, #260	; 0x104
 8022b72:	4630      	mov	r0, r6
 8022b74:	f000 fb6e 	bl	8023254 <_scanf_i>
 8022b78:	e7aa      	b.n	8022ad0 <__ssvfiscanf_r+0x208>
 8022b7a:	bf00      	nop
 8022b7c:	08024609 	.word	0x08024609
 8022b80:	08022815 	.word	0x08022815
 8022b84:	0802288f 	.word	0x0802288f
 8022b88:	080245ba 	.word	0x080245ba
 8022b8c:	4b0b      	ldr	r3, [pc, #44]	; (8022bbc <__ssvfiscanf_r+0x2f4>)
 8022b8e:	2b00      	cmp	r3, #0
 8022b90:	f43f aec0 	beq.w	8022914 <__ssvfiscanf_r+0x4c>
 8022b94:	466b      	mov	r3, sp
 8022b96:	4622      	mov	r2, r4
 8022b98:	a941      	add	r1, sp, #260	; 0x104
 8022b9a:	4630      	mov	r0, r6
 8022b9c:	e000      	b.n	8022ba0 <__ssvfiscanf_r+0x2d8>
 8022b9e:	bf00      	nop
 8022ba0:	e796      	b.n	8022ad0 <__ssvfiscanf_r+0x208>
 8022ba2:	89a3      	ldrh	r3, [r4, #12]
 8022ba4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8022ba8:	bf18      	it	ne
 8022baa:	f04f 30ff 	movne.w	r0, #4294967295
 8022bae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8022bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022bb6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8022bb8:	e7f9      	b.n	8022bae <__ssvfiscanf_r+0x2e6>
 8022bba:	bf00      	nop
 8022bbc:	00000000 	.word	0x00000000

08022bc0 <__sfputc_r>:
 8022bc0:	6893      	ldr	r3, [r2, #8]
 8022bc2:	3b01      	subs	r3, #1
 8022bc4:	2b00      	cmp	r3, #0
 8022bc6:	6093      	str	r3, [r2, #8]
 8022bc8:	b410      	push	{r4}
 8022bca:	da08      	bge.n	8022bde <__sfputc_r+0x1e>
 8022bcc:	6994      	ldr	r4, [r2, #24]
 8022bce:	42a3      	cmp	r3, r4
 8022bd0:	db01      	blt.n	8022bd6 <__sfputc_r+0x16>
 8022bd2:	290a      	cmp	r1, #10
 8022bd4:	d103      	bne.n	8022bde <__sfputc_r+0x1e>
 8022bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022bda:	f000 bdad 	b.w	8023738 <__swbuf_r>
 8022bde:	6813      	ldr	r3, [r2, #0]
 8022be0:	1c58      	adds	r0, r3, #1
 8022be2:	6010      	str	r0, [r2, #0]
 8022be4:	4608      	mov	r0, r1
 8022be6:	7019      	strb	r1, [r3, #0]
 8022be8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022bec:	4770      	bx	lr

08022bee <__sfputs_r>:
 8022bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022bf0:	4606      	mov	r6, r0
 8022bf2:	460f      	mov	r7, r1
 8022bf4:	4614      	mov	r4, r2
 8022bf6:	18d5      	adds	r5, r2, r3
 8022bf8:	42ac      	cmp	r4, r5
 8022bfa:	d101      	bne.n	8022c00 <__sfputs_r+0x12>
 8022bfc:	2000      	movs	r0, #0
 8022bfe:	e007      	b.n	8022c10 <__sfputs_r+0x22>
 8022c00:	463a      	mov	r2, r7
 8022c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022c06:	4630      	mov	r0, r6
 8022c08:	f7ff ffda 	bl	8022bc0 <__sfputc_r>
 8022c0c:	1c43      	adds	r3, r0, #1
 8022c0e:	d1f3      	bne.n	8022bf8 <__sfputs_r+0xa>
 8022c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022c14 <_vfiprintf_r>:
 8022c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c18:	460d      	mov	r5, r1
 8022c1a:	b09d      	sub	sp, #116	; 0x74
 8022c1c:	4614      	mov	r4, r2
 8022c1e:	4698      	mov	r8, r3
 8022c20:	4606      	mov	r6, r0
 8022c22:	b118      	cbz	r0, 8022c2c <_vfiprintf_r+0x18>
 8022c24:	6983      	ldr	r3, [r0, #24]
 8022c26:	b90b      	cbnz	r3, 8022c2c <_vfiprintf_r+0x18>
 8022c28:	f000 ff5e 	bl	8023ae8 <__sinit>
 8022c2c:	4b89      	ldr	r3, [pc, #548]	; (8022e54 <_vfiprintf_r+0x240>)
 8022c2e:	429d      	cmp	r5, r3
 8022c30:	d11b      	bne.n	8022c6a <_vfiprintf_r+0x56>
 8022c32:	6875      	ldr	r5, [r6, #4]
 8022c34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022c36:	07d9      	lsls	r1, r3, #31
 8022c38:	d405      	bmi.n	8022c46 <_vfiprintf_r+0x32>
 8022c3a:	89ab      	ldrh	r3, [r5, #12]
 8022c3c:	059a      	lsls	r2, r3, #22
 8022c3e:	d402      	bmi.n	8022c46 <_vfiprintf_r+0x32>
 8022c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022c42:	f000 ffef 	bl	8023c24 <__retarget_lock_acquire_recursive>
 8022c46:	89ab      	ldrh	r3, [r5, #12]
 8022c48:	071b      	lsls	r3, r3, #28
 8022c4a:	d501      	bpl.n	8022c50 <_vfiprintf_r+0x3c>
 8022c4c:	692b      	ldr	r3, [r5, #16]
 8022c4e:	b9eb      	cbnz	r3, 8022c8c <_vfiprintf_r+0x78>
 8022c50:	4629      	mov	r1, r5
 8022c52:	4630      	mov	r0, r6
 8022c54:	f000 fdc2 	bl	80237dc <__swsetup_r>
 8022c58:	b1c0      	cbz	r0, 8022c8c <_vfiprintf_r+0x78>
 8022c5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022c5c:	07dc      	lsls	r4, r3, #31
 8022c5e:	d50e      	bpl.n	8022c7e <_vfiprintf_r+0x6a>
 8022c60:	f04f 30ff 	mov.w	r0, #4294967295
 8022c64:	b01d      	add	sp, #116	; 0x74
 8022c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c6a:	4b7b      	ldr	r3, [pc, #492]	; (8022e58 <_vfiprintf_r+0x244>)
 8022c6c:	429d      	cmp	r5, r3
 8022c6e:	d101      	bne.n	8022c74 <_vfiprintf_r+0x60>
 8022c70:	68b5      	ldr	r5, [r6, #8]
 8022c72:	e7df      	b.n	8022c34 <_vfiprintf_r+0x20>
 8022c74:	4b79      	ldr	r3, [pc, #484]	; (8022e5c <_vfiprintf_r+0x248>)
 8022c76:	429d      	cmp	r5, r3
 8022c78:	bf08      	it	eq
 8022c7a:	68f5      	ldreq	r5, [r6, #12]
 8022c7c:	e7da      	b.n	8022c34 <_vfiprintf_r+0x20>
 8022c7e:	89ab      	ldrh	r3, [r5, #12]
 8022c80:	0598      	lsls	r0, r3, #22
 8022c82:	d4ed      	bmi.n	8022c60 <_vfiprintf_r+0x4c>
 8022c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022c86:	f000 ffce 	bl	8023c26 <__retarget_lock_release_recursive>
 8022c8a:	e7e9      	b.n	8022c60 <_vfiprintf_r+0x4c>
 8022c8c:	2300      	movs	r3, #0
 8022c8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8022c92:	f04f 0901 	mov.w	r9, #1
 8022c96:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8022e60 <_vfiprintf_r+0x24c>
 8022c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8022c9c:	2320      	movs	r3, #32
 8022c9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022ca2:	2330      	movs	r3, #48	; 0x30
 8022ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022ca8:	4623      	mov	r3, r4
 8022caa:	469a      	mov	sl, r3
 8022cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022cb0:	b10a      	cbz	r2, 8022cb6 <_vfiprintf_r+0xa2>
 8022cb2:	2a25      	cmp	r2, #37	; 0x25
 8022cb4:	d1f9      	bne.n	8022caa <_vfiprintf_r+0x96>
 8022cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8022cba:	d00b      	beq.n	8022cd4 <_vfiprintf_r+0xc0>
 8022cbc:	465b      	mov	r3, fp
 8022cbe:	4622      	mov	r2, r4
 8022cc0:	4629      	mov	r1, r5
 8022cc2:	4630      	mov	r0, r6
 8022cc4:	f7ff ff93 	bl	8022bee <__sfputs_r>
 8022cc8:	3001      	adds	r0, #1
 8022cca:	f000 80aa 	beq.w	8022e22 <_vfiprintf_r+0x20e>
 8022cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022cd0:	445a      	add	r2, fp
 8022cd2:	9209      	str	r2, [sp, #36]	; 0x24
 8022cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8022cd8:	2b00      	cmp	r3, #0
 8022cda:	f000 80a2 	beq.w	8022e22 <_vfiprintf_r+0x20e>
 8022cde:	2300      	movs	r3, #0
 8022ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8022ce4:	f10a 0a01 	add.w	sl, sl, #1
 8022ce8:	9304      	str	r3, [sp, #16]
 8022cea:	9307      	str	r3, [sp, #28]
 8022cec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022cf0:	931a      	str	r3, [sp, #104]	; 0x68
 8022cf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022cf6:	4654      	mov	r4, sl
 8022cf8:	2205      	movs	r2, #5
 8022cfa:	4859      	ldr	r0, [pc, #356]	; (8022e60 <_vfiprintf_r+0x24c>)
 8022cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022d00:	f000 fff8 	bl	8023cf4 <memchr>
 8022d04:	9a04      	ldr	r2, [sp, #16]
 8022d06:	b9d8      	cbnz	r0, 8022d40 <_vfiprintf_r+0x12c>
 8022d08:	06d1      	lsls	r1, r2, #27
 8022d0a:	bf44      	itt	mi
 8022d0c:	2320      	movmi	r3, #32
 8022d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022d12:	0713      	lsls	r3, r2, #28
 8022d14:	bf44      	itt	mi
 8022d16:	232b      	movmi	r3, #43	; 0x2b
 8022d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8022d20:	2b2a      	cmp	r3, #42	; 0x2a
 8022d22:	d015      	beq.n	8022d50 <_vfiprintf_r+0x13c>
 8022d24:	9a07      	ldr	r2, [sp, #28]
 8022d26:	4654      	mov	r4, sl
 8022d28:	2000      	movs	r0, #0
 8022d2a:	f04f 0c0a 	mov.w	ip, #10
 8022d2e:	4621      	mov	r1, r4
 8022d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022d34:	3b30      	subs	r3, #48	; 0x30
 8022d36:	2b09      	cmp	r3, #9
 8022d38:	d94e      	bls.n	8022dd8 <_vfiprintf_r+0x1c4>
 8022d3a:	b1b0      	cbz	r0, 8022d6a <_vfiprintf_r+0x156>
 8022d3c:	9207      	str	r2, [sp, #28]
 8022d3e:	e014      	b.n	8022d6a <_vfiprintf_r+0x156>
 8022d40:	eba0 0308 	sub.w	r3, r0, r8
 8022d44:	46a2      	mov	sl, r4
 8022d46:	fa09 f303 	lsl.w	r3, r9, r3
 8022d4a:	4313      	orrs	r3, r2
 8022d4c:	9304      	str	r3, [sp, #16]
 8022d4e:	e7d2      	b.n	8022cf6 <_vfiprintf_r+0xe2>
 8022d50:	9b03      	ldr	r3, [sp, #12]
 8022d52:	1d19      	adds	r1, r3, #4
 8022d54:	681b      	ldr	r3, [r3, #0]
 8022d56:	2b00      	cmp	r3, #0
 8022d58:	9103      	str	r1, [sp, #12]
 8022d5a:	bfbb      	ittet	lt
 8022d5c:	425b      	neglt	r3, r3
 8022d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8022d62:	9307      	strge	r3, [sp, #28]
 8022d64:	9307      	strlt	r3, [sp, #28]
 8022d66:	bfb8      	it	lt
 8022d68:	9204      	strlt	r2, [sp, #16]
 8022d6a:	7823      	ldrb	r3, [r4, #0]
 8022d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8022d6e:	d10c      	bne.n	8022d8a <_vfiprintf_r+0x176>
 8022d70:	7863      	ldrb	r3, [r4, #1]
 8022d72:	2b2a      	cmp	r3, #42	; 0x2a
 8022d74:	d135      	bne.n	8022de2 <_vfiprintf_r+0x1ce>
 8022d76:	9b03      	ldr	r3, [sp, #12]
 8022d78:	3402      	adds	r4, #2
 8022d7a:	1d1a      	adds	r2, r3, #4
 8022d7c:	681b      	ldr	r3, [r3, #0]
 8022d7e:	2b00      	cmp	r3, #0
 8022d80:	9203      	str	r2, [sp, #12]
 8022d82:	bfb8      	it	lt
 8022d84:	f04f 33ff 	movlt.w	r3, #4294967295
 8022d88:	9305      	str	r3, [sp, #20]
 8022d8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022e70 <_vfiprintf_r+0x25c>
 8022d8e:	2203      	movs	r2, #3
 8022d90:	7821      	ldrb	r1, [r4, #0]
 8022d92:	4650      	mov	r0, sl
 8022d94:	f000 ffae 	bl	8023cf4 <memchr>
 8022d98:	b140      	cbz	r0, 8022dac <_vfiprintf_r+0x198>
 8022d9a:	2340      	movs	r3, #64	; 0x40
 8022d9c:	eba0 000a 	sub.w	r0, r0, sl
 8022da0:	3401      	adds	r4, #1
 8022da2:	fa03 f000 	lsl.w	r0, r3, r0
 8022da6:	9b04      	ldr	r3, [sp, #16]
 8022da8:	4303      	orrs	r3, r0
 8022daa:	9304      	str	r3, [sp, #16]
 8022dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022db0:	2206      	movs	r2, #6
 8022db2:	482c      	ldr	r0, [pc, #176]	; (8022e64 <_vfiprintf_r+0x250>)
 8022db4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022db8:	f000 ff9c 	bl	8023cf4 <memchr>
 8022dbc:	2800      	cmp	r0, #0
 8022dbe:	d03f      	beq.n	8022e40 <_vfiprintf_r+0x22c>
 8022dc0:	4b29      	ldr	r3, [pc, #164]	; (8022e68 <_vfiprintf_r+0x254>)
 8022dc2:	bb1b      	cbnz	r3, 8022e0c <_vfiprintf_r+0x1f8>
 8022dc4:	9b03      	ldr	r3, [sp, #12]
 8022dc6:	3307      	adds	r3, #7
 8022dc8:	f023 0307 	bic.w	r3, r3, #7
 8022dcc:	3308      	adds	r3, #8
 8022dce:	9303      	str	r3, [sp, #12]
 8022dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022dd2:	443b      	add	r3, r7
 8022dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8022dd6:	e767      	b.n	8022ca8 <_vfiprintf_r+0x94>
 8022dd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8022ddc:	460c      	mov	r4, r1
 8022dde:	2001      	movs	r0, #1
 8022de0:	e7a5      	b.n	8022d2e <_vfiprintf_r+0x11a>
 8022de2:	2300      	movs	r3, #0
 8022de4:	3401      	adds	r4, #1
 8022de6:	f04f 0c0a 	mov.w	ip, #10
 8022dea:	4619      	mov	r1, r3
 8022dec:	9305      	str	r3, [sp, #20]
 8022dee:	4620      	mov	r0, r4
 8022df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022df4:	3a30      	subs	r2, #48	; 0x30
 8022df6:	2a09      	cmp	r2, #9
 8022df8:	d903      	bls.n	8022e02 <_vfiprintf_r+0x1ee>
 8022dfa:	2b00      	cmp	r3, #0
 8022dfc:	d0c5      	beq.n	8022d8a <_vfiprintf_r+0x176>
 8022dfe:	9105      	str	r1, [sp, #20]
 8022e00:	e7c3      	b.n	8022d8a <_vfiprintf_r+0x176>
 8022e02:	fb0c 2101 	mla	r1, ip, r1, r2
 8022e06:	4604      	mov	r4, r0
 8022e08:	2301      	movs	r3, #1
 8022e0a:	e7f0      	b.n	8022dee <_vfiprintf_r+0x1da>
 8022e0c:	ab03      	add	r3, sp, #12
 8022e0e:	462a      	mov	r2, r5
 8022e10:	a904      	add	r1, sp, #16
 8022e12:	4630      	mov	r0, r6
 8022e14:	9300      	str	r3, [sp, #0]
 8022e16:	4b15      	ldr	r3, [pc, #84]	; (8022e6c <_vfiprintf_r+0x258>)
 8022e18:	e000      	b.n	8022e1c <_vfiprintf_r+0x208>
 8022e1a:	bf00      	nop
 8022e1c:	4607      	mov	r7, r0
 8022e1e:	1c78      	adds	r0, r7, #1
 8022e20:	d1d6      	bne.n	8022dd0 <_vfiprintf_r+0x1bc>
 8022e22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022e24:	07d9      	lsls	r1, r3, #31
 8022e26:	d405      	bmi.n	8022e34 <_vfiprintf_r+0x220>
 8022e28:	89ab      	ldrh	r3, [r5, #12]
 8022e2a:	059a      	lsls	r2, r3, #22
 8022e2c:	d402      	bmi.n	8022e34 <_vfiprintf_r+0x220>
 8022e2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022e30:	f000 fef9 	bl	8023c26 <__retarget_lock_release_recursive>
 8022e34:	89ab      	ldrh	r3, [r5, #12]
 8022e36:	065b      	lsls	r3, r3, #25
 8022e38:	f53f af12 	bmi.w	8022c60 <_vfiprintf_r+0x4c>
 8022e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022e3e:	e711      	b.n	8022c64 <_vfiprintf_r+0x50>
 8022e40:	ab03      	add	r3, sp, #12
 8022e42:	462a      	mov	r2, r5
 8022e44:	a904      	add	r1, sp, #16
 8022e46:	4630      	mov	r0, r6
 8022e48:	9300      	str	r3, [sp, #0]
 8022e4a:	4b08      	ldr	r3, [pc, #32]	; (8022e6c <_vfiprintf_r+0x258>)
 8022e4c:	f000 f882 	bl	8022f54 <_printf_i>
 8022e50:	e7e4      	b.n	8022e1c <_vfiprintf_r+0x208>
 8022e52:	bf00      	nop
 8022e54:	0802472c 	.word	0x0802472c
 8022e58:	0802474c 	.word	0x0802474c
 8022e5c:	0802470c 	.word	0x0802470c
 8022e60:	080245be 	.word	0x080245be
 8022e64:	080245c4 	.word	0x080245c4
 8022e68:	00000000 	.word	0x00000000
 8022e6c:	08022bef 	.word	0x08022bef
 8022e70:	080245ba 	.word	0x080245ba

08022e74 <_printf_common>:
 8022e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022e78:	4616      	mov	r6, r2
 8022e7a:	4699      	mov	r9, r3
 8022e7c:	688a      	ldr	r2, [r1, #8]
 8022e7e:	4607      	mov	r7, r0
 8022e80:	690b      	ldr	r3, [r1, #16]
 8022e82:	460c      	mov	r4, r1
 8022e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022e88:	4293      	cmp	r3, r2
 8022e8a:	bfb8      	it	lt
 8022e8c:	4613      	movlt	r3, r2
 8022e8e:	6033      	str	r3, [r6, #0]
 8022e90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022e94:	b10a      	cbz	r2, 8022e9a <_printf_common+0x26>
 8022e96:	3301      	adds	r3, #1
 8022e98:	6033      	str	r3, [r6, #0]
 8022e9a:	6823      	ldr	r3, [r4, #0]
 8022e9c:	0699      	lsls	r1, r3, #26
 8022e9e:	bf42      	ittt	mi
 8022ea0:	6833      	ldrmi	r3, [r6, #0]
 8022ea2:	3302      	addmi	r3, #2
 8022ea4:	6033      	strmi	r3, [r6, #0]
 8022ea6:	6825      	ldr	r5, [r4, #0]
 8022ea8:	f015 0506 	ands.w	r5, r5, #6
 8022eac:	d106      	bne.n	8022ebc <_printf_common+0x48>
 8022eae:	f104 0a19 	add.w	sl, r4, #25
 8022eb2:	68e3      	ldr	r3, [r4, #12]
 8022eb4:	6832      	ldr	r2, [r6, #0]
 8022eb6:	1a9b      	subs	r3, r3, r2
 8022eb8:	42ab      	cmp	r3, r5
 8022eba:	dc29      	bgt.n	8022f10 <_printf_common+0x9c>
 8022ebc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022ec0:	1e13      	subs	r3, r2, #0
 8022ec2:	6822      	ldr	r2, [r4, #0]
 8022ec4:	bf18      	it	ne
 8022ec6:	2301      	movne	r3, #1
 8022ec8:	0692      	lsls	r2, r2, #26
 8022eca:	d42e      	bmi.n	8022f2a <_printf_common+0xb6>
 8022ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022ed0:	4649      	mov	r1, r9
 8022ed2:	4638      	mov	r0, r7
 8022ed4:	47c0      	blx	r8
 8022ed6:	3001      	adds	r0, #1
 8022ed8:	d021      	beq.n	8022f1e <_printf_common+0xaa>
 8022eda:	6823      	ldr	r3, [r4, #0]
 8022edc:	341a      	adds	r4, #26
 8022ede:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8022ee2:	f003 0306 	and.w	r3, r3, #6
 8022ee6:	6832      	ldr	r2, [r6, #0]
 8022ee8:	2600      	movs	r6, #0
 8022eea:	2b04      	cmp	r3, #4
 8022eec:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8022ef0:	bf08      	it	eq
 8022ef2:	1aad      	subeq	r5, r5, r2
 8022ef4:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8022ef8:	bf14      	ite	ne
 8022efa:	2500      	movne	r5, #0
 8022efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022f00:	4293      	cmp	r3, r2
 8022f02:	bfc4      	itt	gt
 8022f04:	1a9b      	subgt	r3, r3, r2
 8022f06:	18ed      	addgt	r5, r5, r3
 8022f08:	42b5      	cmp	r5, r6
 8022f0a:	d11a      	bne.n	8022f42 <_printf_common+0xce>
 8022f0c:	2000      	movs	r0, #0
 8022f0e:	e008      	b.n	8022f22 <_printf_common+0xae>
 8022f10:	2301      	movs	r3, #1
 8022f12:	4652      	mov	r2, sl
 8022f14:	4649      	mov	r1, r9
 8022f16:	4638      	mov	r0, r7
 8022f18:	47c0      	blx	r8
 8022f1a:	3001      	adds	r0, #1
 8022f1c:	d103      	bne.n	8022f26 <_printf_common+0xb2>
 8022f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8022f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022f26:	3501      	adds	r5, #1
 8022f28:	e7c3      	b.n	8022eb2 <_printf_common+0x3e>
 8022f2a:	18e1      	adds	r1, r4, r3
 8022f2c:	1c5a      	adds	r2, r3, #1
 8022f2e:	2030      	movs	r0, #48	; 0x30
 8022f30:	3302      	adds	r3, #2
 8022f32:	4422      	add	r2, r4
 8022f34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022f38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022f3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022f40:	e7c4      	b.n	8022ecc <_printf_common+0x58>
 8022f42:	2301      	movs	r3, #1
 8022f44:	4622      	mov	r2, r4
 8022f46:	4649      	mov	r1, r9
 8022f48:	4638      	mov	r0, r7
 8022f4a:	47c0      	blx	r8
 8022f4c:	3001      	adds	r0, #1
 8022f4e:	d0e6      	beq.n	8022f1e <_printf_common+0xaa>
 8022f50:	3601      	adds	r6, #1
 8022f52:	e7d9      	b.n	8022f08 <_printf_common+0x94>

08022f54 <_printf_i>:
 8022f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022f58:	7e0f      	ldrb	r7, [r1, #24]
 8022f5a:	4691      	mov	r9, r2
 8022f5c:	4680      	mov	r8, r0
 8022f5e:	460c      	mov	r4, r1
 8022f60:	2f78      	cmp	r7, #120	; 0x78
 8022f62:	469a      	mov	sl, r3
 8022f64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022f66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8022f6a:	d807      	bhi.n	8022f7c <_printf_i+0x28>
 8022f6c:	2f62      	cmp	r7, #98	; 0x62
 8022f6e:	d80a      	bhi.n	8022f86 <_printf_i+0x32>
 8022f70:	2f00      	cmp	r7, #0
 8022f72:	f000 80d8 	beq.w	8023126 <_printf_i+0x1d2>
 8022f76:	2f58      	cmp	r7, #88	; 0x58
 8022f78:	f000 80a3 	beq.w	80230c2 <_printf_i+0x16e>
 8022f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022f84:	e03a      	b.n	8022ffc <_printf_i+0xa8>
 8022f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022f8a:	2b15      	cmp	r3, #21
 8022f8c:	d8f6      	bhi.n	8022f7c <_printf_i+0x28>
 8022f8e:	a101      	add	r1, pc, #4	; (adr r1, 8022f94 <_printf_i+0x40>)
 8022f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022f94:	08022fed 	.word	0x08022fed
 8022f98:	08023001 	.word	0x08023001
 8022f9c:	08022f7d 	.word	0x08022f7d
 8022fa0:	08022f7d 	.word	0x08022f7d
 8022fa4:	08022f7d 	.word	0x08022f7d
 8022fa8:	08022f7d 	.word	0x08022f7d
 8022fac:	08023001 	.word	0x08023001
 8022fb0:	08022f7d 	.word	0x08022f7d
 8022fb4:	08022f7d 	.word	0x08022f7d
 8022fb8:	08022f7d 	.word	0x08022f7d
 8022fbc:	08022f7d 	.word	0x08022f7d
 8022fc0:	0802310d 	.word	0x0802310d
 8022fc4:	08023031 	.word	0x08023031
 8022fc8:	080230ef 	.word	0x080230ef
 8022fcc:	08022f7d 	.word	0x08022f7d
 8022fd0:	08022f7d 	.word	0x08022f7d
 8022fd4:	0802312f 	.word	0x0802312f
 8022fd8:	08022f7d 	.word	0x08022f7d
 8022fdc:	08023031 	.word	0x08023031
 8022fe0:	08022f7d 	.word	0x08022f7d
 8022fe4:	08022f7d 	.word	0x08022f7d
 8022fe8:	080230f7 	.word	0x080230f7
 8022fec:	682b      	ldr	r3, [r5, #0]
 8022fee:	1d1a      	adds	r2, r3, #4
 8022ff0:	681b      	ldr	r3, [r3, #0]
 8022ff2:	602a      	str	r2, [r5, #0]
 8022ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022ffc:	2301      	movs	r3, #1
 8022ffe:	e0a3      	b.n	8023148 <_printf_i+0x1f4>
 8023000:	6820      	ldr	r0, [r4, #0]
 8023002:	6829      	ldr	r1, [r5, #0]
 8023004:	0606      	lsls	r6, r0, #24
 8023006:	f101 0304 	add.w	r3, r1, #4
 802300a:	d50a      	bpl.n	8023022 <_printf_i+0xce>
 802300c:	680e      	ldr	r6, [r1, #0]
 802300e:	602b      	str	r3, [r5, #0]
 8023010:	2e00      	cmp	r6, #0
 8023012:	da03      	bge.n	802301c <_printf_i+0xc8>
 8023014:	232d      	movs	r3, #45	; 0x2d
 8023016:	4276      	negs	r6, r6
 8023018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802301c:	485e      	ldr	r0, [pc, #376]	; (8023198 <_printf_i+0x244>)
 802301e:	230a      	movs	r3, #10
 8023020:	e019      	b.n	8023056 <_printf_i+0x102>
 8023022:	680e      	ldr	r6, [r1, #0]
 8023024:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023028:	602b      	str	r3, [r5, #0]
 802302a:	bf18      	it	ne
 802302c:	b236      	sxthne	r6, r6
 802302e:	e7ef      	b.n	8023010 <_printf_i+0xbc>
 8023030:	682b      	ldr	r3, [r5, #0]
 8023032:	6820      	ldr	r0, [r4, #0]
 8023034:	1d19      	adds	r1, r3, #4
 8023036:	6029      	str	r1, [r5, #0]
 8023038:	0601      	lsls	r1, r0, #24
 802303a:	d501      	bpl.n	8023040 <_printf_i+0xec>
 802303c:	681e      	ldr	r6, [r3, #0]
 802303e:	e002      	b.n	8023046 <_printf_i+0xf2>
 8023040:	0646      	lsls	r6, r0, #25
 8023042:	d5fb      	bpl.n	802303c <_printf_i+0xe8>
 8023044:	881e      	ldrh	r6, [r3, #0]
 8023046:	2f6f      	cmp	r7, #111	; 0x6f
 8023048:	4853      	ldr	r0, [pc, #332]	; (8023198 <_printf_i+0x244>)
 802304a:	bf0c      	ite	eq
 802304c:	2308      	moveq	r3, #8
 802304e:	230a      	movne	r3, #10
 8023050:	2100      	movs	r1, #0
 8023052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023056:	6865      	ldr	r5, [r4, #4]
 8023058:	2d00      	cmp	r5, #0
 802305a:	60a5      	str	r5, [r4, #8]
 802305c:	bfa2      	ittt	ge
 802305e:	6821      	ldrge	r1, [r4, #0]
 8023060:	f021 0104 	bicge.w	r1, r1, #4
 8023064:	6021      	strge	r1, [r4, #0]
 8023066:	b90e      	cbnz	r6, 802306c <_printf_i+0x118>
 8023068:	2d00      	cmp	r5, #0
 802306a:	d04d      	beq.n	8023108 <_printf_i+0x1b4>
 802306c:	4615      	mov	r5, r2
 802306e:	fbb6 f1f3 	udiv	r1, r6, r3
 8023072:	fb03 6711 	mls	r7, r3, r1, r6
 8023076:	5dc7      	ldrb	r7, [r0, r7]
 8023078:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802307c:	4637      	mov	r7, r6
 802307e:	460e      	mov	r6, r1
 8023080:	42bb      	cmp	r3, r7
 8023082:	d9f4      	bls.n	802306e <_printf_i+0x11a>
 8023084:	2b08      	cmp	r3, #8
 8023086:	d10b      	bne.n	80230a0 <_printf_i+0x14c>
 8023088:	6823      	ldr	r3, [r4, #0]
 802308a:	07de      	lsls	r6, r3, #31
 802308c:	d508      	bpl.n	80230a0 <_printf_i+0x14c>
 802308e:	6923      	ldr	r3, [r4, #16]
 8023090:	6861      	ldr	r1, [r4, #4]
 8023092:	4299      	cmp	r1, r3
 8023094:	bfde      	ittt	le
 8023096:	2330      	movle	r3, #48	; 0x30
 8023098:	f805 3c01 	strble.w	r3, [r5, #-1]
 802309c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80230a0:	1b52      	subs	r2, r2, r5
 80230a2:	6122      	str	r2, [r4, #16]
 80230a4:	464b      	mov	r3, r9
 80230a6:	aa03      	add	r2, sp, #12
 80230a8:	4621      	mov	r1, r4
 80230aa:	4640      	mov	r0, r8
 80230ac:	f8cd a000 	str.w	sl, [sp]
 80230b0:	f7ff fee0 	bl	8022e74 <_printf_common>
 80230b4:	3001      	adds	r0, #1
 80230b6:	d14c      	bne.n	8023152 <_printf_i+0x1fe>
 80230b8:	f04f 30ff 	mov.w	r0, #4294967295
 80230bc:	b004      	add	sp, #16
 80230be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80230c2:	4835      	ldr	r0, [pc, #212]	; (8023198 <_printf_i+0x244>)
 80230c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80230c8:	6829      	ldr	r1, [r5, #0]
 80230ca:	6823      	ldr	r3, [r4, #0]
 80230cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80230d0:	6029      	str	r1, [r5, #0]
 80230d2:	061d      	lsls	r5, r3, #24
 80230d4:	d514      	bpl.n	8023100 <_printf_i+0x1ac>
 80230d6:	07df      	lsls	r7, r3, #31
 80230d8:	bf44      	itt	mi
 80230da:	f043 0320 	orrmi.w	r3, r3, #32
 80230de:	6023      	strmi	r3, [r4, #0]
 80230e0:	b91e      	cbnz	r6, 80230ea <_printf_i+0x196>
 80230e2:	6823      	ldr	r3, [r4, #0]
 80230e4:	f023 0320 	bic.w	r3, r3, #32
 80230e8:	6023      	str	r3, [r4, #0]
 80230ea:	2310      	movs	r3, #16
 80230ec:	e7b0      	b.n	8023050 <_printf_i+0xfc>
 80230ee:	6823      	ldr	r3, [r4, #0]
 80230f0:	f043 0320 	orr.w	r3, r3, #32
 80230f4:	6023      	str	r3, [r4, #0]
 80230f6:	2378      	movs	r3, #120	; 0x78
 80230f8:	4828      	ldr	r0, [pc, #160]	; (802319c <_printf_i+0x248>)
 80230fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80230fe:	e7e3      	b.n	80230c8 <_printf_i+0x174>
 8023100:	0659      	lsls	r1, r3, #25
 8023102:	bf48      	it	mi
 8023104:	b2b6      	uxthmi	r6, r6
 8023106:	e7e6      	b.n	80230d6 <_printf_i+0x182>
 8023108:	4615      	mov	r5, r2
 802310a:	e7bb      	b.n	8023084 <_printf_i+0x130>
 802310c:	682b      	ldr	r3, [r5, #0]
 802310e:	6826      	ldr	r6, [r4, #0]
 8023110:	1d18      	adds	r0, r3, #4
 8023112:	6961      	ldr	r1, [r4, #20]
 8023114:	6028      	str	r0, [r5, #0]
 8023116:	0635      	lsls	r5, r6, #24
 8023118:	681b      	ldr	r3, [r3, #0]
 802311a:	d501      	bpl.n	8023120 <_printf_i+0x1cc>
 802311c:	6019      	str	r1, [r3, #0]
 802311e:	e002      	b.n	8023126 <_printf_i+0x1d2>
 8023120:	0670      	lsls	r0, r6, #25
 8023122:	d5fb      	bpl.n	802311c <_printf_i+0x1c8>
 8023124:	8019      	strh	r1, [r3, #0]
 8023126:	2300      	movs	r3, #0
 8023128:	4615      	mov	r5, r2
 802312a:	6123      	str	r3, [r4, #16]
 802312c:	e7ba      	b.n	80230a4 <_printf_i+0x150>
 802312e:	682b      	ldr	r3, [r5, #0]
 8023130:	2100      	movs	r1, #0
 8023132:	1d1a      	adds	r2, r3, #4
 8023134:	602a      	str	r2, [r5, #0]
 8023136:	681d      	ldr	r5, [r3, #0]
 8023138:	6862      	ldr	r2, [r4, #4]
 802313a:	4628      	mov	r0, r5
 802313c:	f000 fdda 	bl	8023cf4 <memchr>
 8023140:	b108      	cbz	r0, 8023146 <_printf_i+0x1f2>
 8023142:	1b40      	subs	r0, r0, r5
 8023144:	6060      	str	r0, [r4, #4]
 8023146:	6863      	ldr	r3, [r4, #4]
 8023148:	6123      	str	r3, [r4, #16]
 802314a:	2300      	movs	r3, #0
 802314c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023150:	e7a8      	b.n	80230a4 <_printf_i+0x150>
 8023152:	6923      	ldr	r3, [r4, #16]
 8023154:	462a      	mov	r2, r5
 8023156:	4649      	mov	r1, r9
 8023158:	4640      	mov	r0, r8
 802315a:	47d0      	blx	sl
 802315c:	3001      	adds	r0, #1
 802315e:	d0ab      	beq.n	80230b8 <_printf_i+0x164>
 8023160:	6823      	ldr	r3, [r4, #0]
 8023162:	079b      	lsls	r3, r3, #30
 8023164:	d413      	bmi.n	802318e <_printf_i+0x23a>
 8023166:	68e0      	ldr	r0, [r4, #12]
 8023168:	9b03      	ldr	r3, [sp, #12]
 802316a:	4298      	cmp	r0, r3
 802316c:	bfb8      	it	lt
 802316e:	4618      	movlt	r0, r3
 8023170:	e7a4      	b.n	80230bc <_printf_i+0x168>
 8023172:	2301      	movs	r3, #1
 8023174:	4632      	mov	r2, r6
 8023176:	4649      	mov	r1, r9
 8023178:	4640      	mov	r0, r8
 802317a:	47d0      	blx	sl
 802317c:	3001      	adds	r0, #1
 802317e:	d09b      	beq.n	80230b8 <_printf_i+0x164>
 8023180:	3501      	adds	r5, #1
 8023182:	68e3      	ldr	r3, [r4, #12]
 8023184:	9903      	ldr	r1, [sp, #12]
 8023186:	1a5b      	subs	r3, r3, r1
 8023188:	42ab      	cmp	r3, r5
 802318a:	dcf2      	bgt.n	8023172 <_printf_i+0x21e>
 802318c:	e7eb      	b.n	8023166 <_printf_i+0x212>
 802318e:	2500      	movs	r5, #0
 8023190:	f104 0619 	add.w	r6, r4, #25
 8023194:	e7f5      	b.n	8023182 <_printf_i+0x22e>
 8023196:	bf00      	nop
 8023198:	080245cb 	.word	0x080245cb
 802319c:	080245dc 	.word	0x080245dc

080231a0 <_scanf_chars>:
 80231a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80231a4:	4615      	mov	r5, r2
 80231a6:	688a      	ldr	r2, [r1, #8]
 80231a8:	4680      	mov	r8, r0
 80231aa:	460c      	mov	r4, r1
 80231ac:	b932      	cbnz	r2, 80231bc <_scanf_chars+0x1c>
 80231ae:	698a      	ldr	r2, [r1, #24]
 80231b0:	2a00      	cmp	r2, #0
 80231b2:	bf0c      	ite	eq
 80231b4:	2201      	moveq	r2, #1
 80231b6:	f04f 32ff 	movne.w	r2, #4294967295
 80231ba:	608a      	str	r2, [r1, #8]
 80231bc:	6822      	ldr	r2, [r4, #0]
 80231be:	2700      	movs	r7, #0
 80231c0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8023250 <_scanf_chars+0xb0>
 80231c4:	06d1      	lsls	r1, r2, #27
 80231c6:	bf5f      	itttt	pl
 80231c8:	681a      	ldrpl	r2, [r3, #0]
 80231ca:	1d11      	addpl	r1, r2, #4
 80231cc:	6019      	strpl	r1, [r3, #0]
 80231ce:	6816      	ldrpl	r6, [r2, #0]
 80231d0:	69a0      	ldr	r0, [r4, #24]
 80231d2:	b188      	cbz	r0, 80231f8 <_scanf_chars+0x58>
 80231d4:	2801      	cmp	r0, #1
 80231d6:	d107      	bne.n	80231e8 <_scanf_chars+0x48>
 80231d8:	682a      	ldr	r2, [r5, #0]
 80231da:	7811      	ldrb	r1, [r2, #0]
 80231dc:	6962      	ldr	r2, [r4, #20]
 80231de:	5c52      	ldrb	r2, [r2, r1]
 80231e0:	b952      	cbnz	r2, 80231f8 <_scanf_chars+0x58>
 80231e2:	2f00      	cmp	r7, #0
 80231e4:	d031      	beq.n	802324a <_scanf_chars+0xaa>
 80231e6:	e022      	b.n	802322e <_scanf_chars+0x8e>
 80231e8:	2802      	cmp	r0, #2
 80231ea:	d120      	bne.n	802322e <_scanf_chars+0x8e>
 80231ec:	682b      	ldr	r3, [r5, #0]
 80231ee:	781b      	ldrb	r3, [r3, #0]
 80231f0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80231f4:	071b      	lsls	r3, r3, #28
 80231f6:	d41a      	bmi.n	802322e <_scanf_chars+0x8e>
 80231f8:	6823      	ldr	r3, [r4, #0]
 80231fa:	3701      	adds	r7, #1
 80231fc:	06da      	lsls	r2, r3, #27
 80231fe:	bf5e      	ittt	pl
 8023200:	682b      	ldrpl	r3, [r5, #0]
 8023202:	781b      	ldrbpl	r3, [r3, #0]
 8023204:	f806 3b01 	strbpl.w	r3, [r6], #1
 8023208:	682a      	ldr	r2, [r5, #0]
 802320a:	686b      	ldr	r3, [r5, #4]
 802320c:	3201      	adds	r2, #1
 802320e:	3b01      	subs	r3, #1
 8023210:	602a      	str	r2, [r5, #0]
 8023212:	68a2      	ldr	r2, [r4, #8]
 8023214:	606b      	str	r3, [r5, #4]
 8023216:	3a01      	subs	r2, #1
 8023218:	60a2      	str	r2, [r4, #8]
 802321a:	b142      	cbz	r2, 802322e <_scanf_chars+0x8e>
 802321c:	2b00      	cmp	r3, #0
 802321e:	dcd7      	bgt.n	80231d0 <_scanf_chars+0x30>
 8023220:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023224:	4629      	mov	r1, r5
 8023226:	4640      	mov	r0, r8
 8023228:	4798      	blx	r3
 802322a:	2800      	cmp	r0, #0
 802322c:	d0d0      	beq.n	80231d0 <_scanf_chars+0x30>
 802322e:	6823      	ldr	r3, [r4, #0]
 8023230:	f013 0310 	ands.w	r3, r3, #16
 8023234:	d105      	bne.n	8023242 <_scanf_chars+0xa2>
 8023236:	68e2      	ldr	r2, [r4, #12]
 8023238:	3201      	adds	r2, #1
 802323a:	60e2      	str	r2, [r4, #12]
 802323c:	69a2      	ldr	r2, [r4, #24]
 802323e:	b102      	cbz	r2, 8023242 <_scanf_chars+0xa2>
 8023240:	7033      	strb	r3, [r6, #0]
 8023242:	6923      	ldr	r3, [r4, #16]
 8023244:	2000      	movs	r0, #0
 8023246:	443b      	add	r3, r7
 8023248:	6123      	str	r3, [r4, #16]
 802324a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802324e:	bf00      	nop
 8023250:	08024609 	.word	0x08024609

08023254 <_scanf_i>:
 8023254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023258:	4698      	mov	r8, r3
 802325a:	b087      	sub	sp, #28
 802325c:	4b75      	ldr	r3, [pc, #468]	; (8023434 <_scanf_i+0x1e0>)
 802325e:	460c      	mov	r4, r1
 8023260:	4682      	mov	sl, r0
 8023262:	4616      	mov	r6, r2
 8023264:	4627      	mov	r7, r4
 8023266:	f04f 0b00 	mov.w	fp, #0
 802326a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802326e:	ab03      	add	r3, sp, #12
 8023270:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8023274:	4b70      	ldr	r3, [pc, #448]	; (8023438 <_scanf_i+0x1e4>)
 8023276:	69a1      	ldr	r1, [r4, #24]
 8023278:	4a70      	ldr	r2, [pc, #448]	; (802343c <_scanf_i+0x1e8>)
 802327a:	2903      	cmp	r1, #3
 802327c:	bf18      	it	ne
 802327e:	461a      	movne	r2, r3
 8023280:	68a3      	ldr	r3, [r4, #8]
 8023282:	9201      	str	r2, [sp, #4]
 8023284:	1e5a      	subs	r2, r3, #1
 8023286:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802328a:	bf89      	itett	hi
 802328c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8023290:	f04f 0900 	movls.w	r9, #0
 8023294:	eb03 0905 	addhi.w	r9, r3, r5
 8023298:	f240 135d 	movwhi	r3, #349	; 0x15d
 802329c:	bf88      	it	hi
 802329e:	60a3      	strhi	r3, [r4, #8]
 80232a0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80232a4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80232a8:	463d      	mov	r5, r7
 80232aa:	6023      	str	r3, [r4, #0]
 80232ac:	6831      	ldr	r1, [r6, #0]
 80232ae:	ab03      	add	r3, sp, #12
 80232b0:	2202      	movs	r2, #2
 80232b2:	7809      	ldrb	r1, [r1, #0]
 80232b4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80232b8:	f000 fd1c 	bl	8023cf4 <memchr>
 80232bc:	b328      	cbz	r0, 802330a <_scanf_i+0xb6>
 80232be:	f1bb 0f01 	cmp.w	fp, #1
 80232c2:	d159      	bne.n	8023378 <_scanf_i+0x124>
 80232c4:	6862      	ldr	r2, [r4, #4]
 80232c6:	b92a      	cbnz	r2, 80232d4 <_scanf_i+0x80>
 80232c8:	6822      	ldr	r2, [r4, #0]
 80232ca:	2308      	movs	r3, #8
 80232cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80232d0:	6063      	str	r3, [r4, #4]
 80232d2:	6022      	str	r2, [r4, #0]
 80232d4:	6822      	ldr	r2, [r4, #0]
 80232d6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80232da:	6022      	str	r2, [r4, #0]
 80232dc:	68a2      	ldr	r2, [r4, #8]
 80232de:	1e51      	subs	r1, r2, #1
 80232e0:	60a1      	str	r1, [r4, #8]
 80232e2:	b192      	cbz	r2, 802330a <_scanf_i+0xb6>
 80232e4:	6832      	ldr	r2, [r6, #0]
 80232e6:	1c51      	adds	r1, r2, #1
 80232e8:	6031      	str	r1, [r6, #0]
 80232ea:	7812      	ldrb	r2, [r2, #0]
 80232ec:	f805 2b01 	strb.w	r2, [r5], #1
 80232f0:	6872      	ldr	r2, [r6, #4]
 80232f2:	3a01      	subs	r2, #1
 80232f4:	2a00      	cmp	r2, #0
 80232f6:	6072      	str	r2, [r6, #4]
 80232f8:	dc07      	bgt.n	802330a <_scanf_i+0xb6>
 80232fa:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80232fe:	4631      	mov	r1, r6
 8023300:	4650      	mov	r0, sl
 8023302:	4790      	blx	r2
 8023304:	2800      	cmp	r0, #0
 8023306:	f040 8085 	bne.w	8023414 <_scanf_i+0x1c0>
 802330a:	f10b 0b01 	add.w	fp, fp, #1
 802330e:	f1bb 0f03 	cmp.w	fp, #3
 8023312:	d1cb      	bne.n	80232ac <_scanf_i+0x58>
 8023314:	6863      	ldr	r3, [r4, #4]
 8023316:	b90b      	cbnz	r3, 802331c <_scanf_i+0xc8>
 8023318:	230a      	movs	r3, #10
 802331a:	6063      	str	r3, [r4, #4]
 802331c:	6863      	ldr	r3, [r4, #4]
 802331e:	f04f 0b00 	mov.w	fp, #0
 8023322:	4947      	ldr	r1, [pc, #284]	; (8023440 <_scanf_i+0x1ec>)
 8023324:	6960      	ldr	r0, [r4, #20]
 8023326:	1ac9      	subs	r1, r1, r3
 8023328:	f000 f89e 	bl	8023468 <__sccl>
 802332c:	68a3      	ldr	r3, [r4, #8]
 802332e:	6822      	ldr	r2, [r4, #0]
 8023330:	2b00      	cmp	r3, #0
 8023332:	d03d      	beq.n	80233b0 <_scanf_i+0x15c>
 8023334:	6831      	ldr	r1, [r6, #0]
 8023336:	6960      	ldr	r0, [r4, #20]
 8023338:	f891 c000 	ldrb.w	ip, [r1]
 802333c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8023340:	2800      	cmp	r0, #0
 8023342:	d035      	beq.n	80233b0 <_scanf_i+0x15c>
 8023344:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8023348:	d124      	bne.n	8023394 <_scanf_i+0x140>
 802334a:	0510      	lsls	r0, r2, #20
 802334c:	d522      	bpl.n	8023394 <_scanf_i+0x140>
 802334e:	f10b 0b01 	add.w	fp, fp, #1
 8023352:	f1b9 0f00 	cmp.w	r9, #0
 8023356:	d003      	beq.n	8023360 <_scanf_i+0x10c>
 8023358:	3301      	adds	r3, #1
 802335a:	f109 39ff 	add.w	r9, r9, #4294967295
 802335e:	60a3      	str	r3, [r4, #8]
 8023360:	6873      	ldr	r3, [r6, #4]
 8023362:	3b01      	subs	r3, #1
 8023364:	2b00      	cmp	r3, #0
 8023366:	6073      	str	r3, [r6, #4]
 8023368:	dd1b      	ble.n	80233a2 <_scanf_i+0x14e>
 802336a:	6833      	ldr	r3, [r6, #0]
 802336c:	3301      	adds	r3, #1
 802336e:	6033      	str	r3, [r6, #0]
 8023370:	68a3      	ldr	r3, [r4, #8]
 8023372:	3b01      	subs	r3, #1
 8023374:	60a3      	str	r3, [r4, #8]
 8023376:	e7d9      	b.n	802332c <_scanf_i+0xd8>
 8023378:	f1bb 0f02 	cmp.w	fp, #2
 802337c:	d1ae      	bne.n	80232dc <_scanf_i+0x88>
 802337e:	6822      	ldr	r2, [r4, #0]
 8023380:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8023384:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8023388:	d1bf      	bne.n	802330a <_scanf_i+0xb6>
 802338a:	2310      	movs	r3, #16
 802338c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8023390:	6063      	str	r3, [r4, #4]
 8023392:	e7a2      	b.n	80232da <_scanf_i+0x86>
 8023394:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8023398:	6022      	str	r2, [r4, #0]
 802339a:	780b      	ldrb	r3, [r1, #0]
 802339c:	f805 3b01 	strb.w	r3, [r5], #1
 80233a0:	e7de      	b.n	8023360 <_scanf_i+0x10c>
 80233a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80233a6:	4631      	mov	r1, r6
 80233a8:	4650      	mov	r0, sl
 80233aa:	4798      	blx	r3
 80233ac:	2800      	cmp	r0, #0
 80233ae:	d0df      	beq.n	8023370 <_scanf_i+0x11c>
 80233b0:	6823      	ldr	r3, [r4, #0]
 80233b2:	05db      	lsls	r3, r3, #23
 80233b4:	d50d      	bpl.n	80233d2 <_scanf_i+0x17e>
 80233b6:	42bd      	cmp	r5, r7
 80233b8:	d909      	bls.n	80233ce <_scanf_i+0x17a>
 80233ba:	f105 39ff 	add.w	r9, r5, #4294967295
 80233be:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80233c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80233c6:	4632      	mov	r2, r6
 80233c8:	464d      	mov	r5, r9
 80233ca:	4650      	mov	r0, sl
 80233cc:	4798      	blx	r3
 80233ce:	42bd      	cmp	r5, r7
 80233d0:	d02d      	beq.n	802342e <_scanf_i+0x1da>
 80233d2:	6822      	ldr	r2, [r4, #0]
 80233d4:	f012 0210 	ands.w	r2, r2, #16
 80233d8:	d113      	bne.n	8023402 <_scanf_i+0x1ae>
 80233da:	4639      	mov	r1, r7
 80233dc:	702a      	strb	r2, [r5, #0]
 80233de:	4650      	mov	r0, sl
 80233e0:	6863      	ldr	r3, [r4, #4]
 80233e2:	9e01      	ldr	r6, [sp, #4]
 80233e4:	47b0      	blx	r6
 80233e6:	6821      	ldr	r1, [r4, #0]
 80233e8:	f8d8 3000 	ldr.w	r3, [r8]
 80233ec:	f011 0f20 	tst.w	r1, #32
 80233f0:	d013      	beq.n	802341a <_scanf_i+0x1c6>
 80233f2:	1d1a      	adds	r2, r3, #4
 80233f4:	f8c8 2000 	str.w	r2, [r8]
 80233f8:	681b      	ldr	r3, [r3, #0]
 80233fa:	6018      	str	r0, [r3, #0]
 80233fc:	68e3      	ldr	r3, [r4, #12]
 80233fe:	3301      	adds	r3, #1
 8023400:	60e3      	str	r3, [r4, #12]
 8023402:	1bed      	subs	r5, r5, r7
 8023404:	2000      	movs	r0, #0
 8023406:	44ab      	add	fp, r5
 8023408:	6925      	ldr	r5, [r4, #16]
 802340a:	445d      	add	r5, fp
 802340c:	6125      	str	r5, [r4, #16]
 802340e:	b007      	add	sp, #28
 8023410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023414:	f04f 0b00 	mov.w	fp, #0
 8023418:	e7ca      	b.n	80233b0 <_scanf_i+0x15c>
 802341a:	1d1a      	adds	r2, r3, #4
 802341c:	f011 0f01 	tst.w	r1, #1
 8023420:	f8c8 2000 	str.w	r2, [r8]
 8023424:	681b      	ldr	r3, [r3, #0]
 8023426:	bf14      	ite	ne
 8023428:	8018      	strhne	r0, [r3, #0]
 802342a:	6018      	streq	r0, [r3, #0]
 802342c:	e7e6      	b.n	80233fc <_scanf_i+0x1a8>
 802342e:	2001      	movs	r0, #1
 8023430:	e7ed      	b.n	802340e <_scanf_i+0x1ba>
 8023432:	bf00      	nop
 8023434:	08023f7c 	.word	0x08023f7c
 8023438:	080236c5 	.word	0x080236c5
 802343c:	080235dd 	.word	0x080235dd
 8023440:	08024606 	.word	0x08024606

08023444 <_read_r>:
 8023444:	b538      	push	{r3, r4, r5, lr}
 8023446:	4604      	mov	r4, r0
 8023448:	4d06      	ldr	r5, [pc, #24]	; (8023464 <_read_r+0x20>)
 802344a:	4608      	mov	r0, r1
 802344c:	4611      	mov	r1, r2
 802344e:	2200      	movs	r2, #0
 8023450:	602a      	str	r2, [r5, #0]
 8023452:	461a      	mov	r2, r3
 8023454:	f7ef fee2 	bl	801321c <_read>
 8023458:	1c43      	adds	r3, r0, #1
 802345a:	d102      	bne.n	8023462 <_read_r+0x1e>
 802345c:	682b      	ldr	r3, [r5, #0]
 802345e:	b103      	cbz	r3, 8023462 <_read_r+0x1e>
 8023460:	6023      	str	r3, [r4, #0]
 8023462:	bd38      	pop	{r3, r4, r5, pc}
 8023464:	20003d20 	.word	0x20003d20

08023468 <__sccl>:
 8023468:	b570      	push	{r4, r5, r6, lr}
 802346a:	780b      	ldrb	r3, [r1, #0]
 802346c:	4604      	mov	r4, r0
 802346e:	2b5e      	cmp	r3, #94	; 0x5e
 8023470:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8023474:	bf13      	iteet	ne
 8023476:	1c48      	addne	r0, r1, #1
 8023478:	1c88      	addeq	r0, r1, #2
 802347a:	784b      	ldrbeq	r3, [r1, #1]
 802347c:	2200      	movne	r2, #0
 802347e:	bf08      	it	eq
 8023480:	2201      	moveq	r2, #1
 8023482:	1e61      	subs	r1, r4, #1
 8023484:	f801 2f01 	strb.w	r2, [r1, #1]!
 8023488:	42a9      	cmp	r1, r5
 802348a:	d1fb      	bne.n	8023484 <__sccl+0x1c>
 802348c:	b90b      	cbnz	r3, 8023492 <__sccl+0x2a>
 802348e:	3801      	subs	r0, #1
 8023490:	bd70      	pop	{r4, r5, r6, pc}
 8023492:	f082 0201 	eor.w	r2, r2, #1
 8023496:	4605      	mov	r5, r0
 8023498:	54e2      	strb	r2, [r4, r3]
 802349a:	4628      	mov	r0, r5
 802349c:	f810 1b01 	ldrb.w	r1, [r0], #1
 80234a0:	292d      	cmp	r1, #45	; 0x2d
 80234a2:	d006      	beq.n	80234b2 <__sccl+0x4a>
 80234a4:	295d      	cmp	r1, #93	; 0x5d
 80234a6:	d0f3      	beq.n	8023490 <__sccl+0x28>
 80234a8:	b909      	cbnz	r1, 80234ae <__sccl+0x46>
 80234aa:	4628      	mov	r0, r5
 80234ac:	e7f0      	b.n	8023490 <__sccl+0x28>
 80234ae:	460b      	mov	r3, r1
 80234b0:	e7f1      	b.n	8023496 <__sccl+0x2e>
 80234b2:	786e      	ldrb	r6, [r5, #1]
 80234b4:	2e5d      	cmp	r6, #93	; 0x5d
 80234b6:	d0fa      	beq.n	80234ae <__sccl+0x46>
 80234b8:	42b3      	cmp	r3, r6
 80234ba:	dcf8      	bgt.n	80234ae <__sccl+0x46>
 80234bc:	3502      	adds	r5, #2
 80234be:	4619      	mov	r1, r3
 80234c0:	3101      	adds	r1, #1
 80234c2:	428e      	cmp	r6, r1
 80234c4:	5462      	strb	r2, [r4, r1]
 80234c6:	dcfb      	bgt.n	80234c0 <__sccl+0x58>
 80234c8:	1af1      	subs	r1, r6, r3
 80234ca:	1c58      	adds	r0, r3, #1
 80234cc:	3901      	subs	r1, #1
 80234ce:	42b3      	cmp	r3, r6
 80234d0:	bfa8      	it	ge
 80234d2:	2100      	movge	r1, #0
 80234d4:	1843      	adds	r3, r0, r1
 80234d6:	e7e0      	b.n	802349a <__sccl+0x32>

080234d8 <_strtol_l.constprop.0>:
 80234d8:	2b01      	cmp	r3, #1
 80234da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80234de:	d001      	beq.n	80234e4 <_strtol_l.constprop.0+0xc>
 80234e0:	2b24      	cmp	r3, #36	; 0x24
 80234e2:	d906      	bls.n	80234f2 <_strtol_l.constprop.0+0x1a>
 80234e4:	f7fe fed8 	bl	8022298 <__errno>
 80234e8:	2316      	movs	r3, #22
 80234ea:	6003      	str	r3, [r0, #0]
 80234ec:	2000      	movs	r0, #0
 80234ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80234f2:	460d      	mov	r5, r1
 80234f4:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 80235d8 <_strtol_l.constprop.0+0x100>
 80234f8:	462e      	mov	r6, r5
 80234fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80234fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8023502:	f017 0708 	ands.w	r7, r7, #8
 8023506:	d1f7      	bne.n	80234f8 <_strtol_l.constprop.0+0x20>
 8023508:	2c2d      	cmp	r4, #45	; 0x2d
 802350a:	d132      	bne.n	8023572 <_strtol_l.constprop.0+0x9a>
 802350c:	782c      	ldrb	r4, [r5, #0]
 802350e:	2701      	movs	r7, #1
 8023510:	1cb5      	adds	r5, r6, #2
 8023512:	2b00      	cmp	r3, #0
 8023514:	d05b      	beq.n	80235ce <_strtol_l.constprop.0+0xf6>
 8023516:	2b10      	cmp	r3, #16
 8023518:	d109      	bne.n	802352e <_strtol_l.constprop.0+0x56>
 802351a:	2c30      	cmp	r4, #48	; 0x30
 802351c:	d107      	bne.n	802352e <_strtol_l.constprop.0+0x56>
 802351e:	782c      	ldrb	r4, [r5, #0]
 8023520:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8023524:	2c58      	cmp	r4, #88	; 0x58
 8023526:	d14d      	bne.n	80235c4 <_strtol_l.constprop.0+0xec>
 8023528:	786c      	ldrb	r4, [r5, #1]
 802352a:	2310      	movs	r3, #16
 802352c:	3502      	adds	r5, #2
 802352e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8023532:	f04f 0c00 	mov.w	ip, #0
 8023536:	f108 38ff 	add.w	r8, r8, #4294967295
 802353a:	4666      	mov	r6, ip
 802353c:	fbb8 f9f3 	udiv	r9, r8, r3
 8023540:	fb03 8a19 	mls	sl, r3, r9, r8
 8023544:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8023548:	f1be 0f09 	cmp.w	lr, #9
 802354c:	d816      	bhi.n	802357c <_strtol_l.constprop.0+0xa4>
 802354e:	4674      	mov	r4, lr
 8023550:	42a3      	cmp	r3, r4
 8023552:	dd24      	ble.n	802359e <_strtol_l.constprop.0+0xc6>
 8023554:	f1bc 0f00 	cmp.w	ip, #0
 8023558:	db1e      	blt.n	8023598 <_strtol_l.constprop.0+0xc0>
 802355a:	45b1      	cmp	r9, r6
 802355c:	d31c      	bcc.n	8023598 <_strtol_l.constprop.0+0xc0>
 802355e:	d101      	bne.n	8023564 <_strtol_l.constprop.0+0x8c>
 8023560:	45a2      	cmp	sl, r4
 8023562:	db19      	blt.n	8023598 <_strtol_l.constprop.0+0xc0>
 8023564:	fb06 4603 	mla	r6, r6, r3, r4
 8023568:	f04f 0c01 	mov.w	ip, #1
 802356c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023570:	e7e8      	b.n	8023544 <_strtol_l.constprop.0+0x6c>
 8023572:	2c2b      	cmp	r4, #43	; 0x2b
 8023574:	bf04      	itt	eq
 8023576:	782c      	ldrbeq	r4, [r5, #0]
 8023578:	1cb5      	addeq	r5, r6, #2
 802357a:	e7ca      	b.n	8023512 <_strtol_l.constprop.0+0x3a>
 802357c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8023580:	f1be 0f19 	cmp.w	lr, #25
 8023584:	d801      	bhi.n	802358a <_strtol_l.constprop.0+0xb2>
 8023586:	3c37      	subs	r4, #55	; 0x37
 8023588:	e7e2      	b.n	8023550 <_strtol_l.constprop.0+0x78>
 802358a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 802358e:	f1be 0f19 	cmp.w	lr, #25
 8023592:	d804      	bhi.n	802359e <_strtol_l.constprop.0+0xc6>
 8023594:	3c57      	subs	r4, #87	; 0x57
 8023596:	e7db      	b.n	8023550 <_strtol_l.constprop.0+0x78>
 8023598:	f04f 3cff 	mov.w	ip, #4294967295
 802359c:	e7e6      	b.n	802356c <_strtol_l.constprop.0+0x94>
 802359e:	f1bc 0f00 	cmp.w	ip, #0
 80235a2:	da05      	bge.n	80235b0 <_strtol_l.constprop.0+0xd8>
 80235a4:	2322      	movs	r3, #34	; 0x22
 80235a6:	4646      	mov	r6, r8
 80235a8:	6003      	str	r3, [r0, #0]
 80235aa:	b942      	cbnz	r2, 80235be <_strtol_l.constprop.0+0xe6>
 80235ac:	4630      	mov	r0, r6
 80235ae:	e79e      	b.n	80234ee <_strtol_l.constprop.0+0x16>
 80235b0:	b107      	cbz	r7, 80235b4 <_strtol_l.constprop.0+0xdc>
 80235b2:	4276      	negs	r6, r6
 80235b4:	2a00      	cmp	r2, #0
 80235b6:	d0f9      	beq.n	80235ac <_strtol_l.constprop.0+0xd4>
 80235b8:	f1bc 0f00 	cmp.w	ip, #0
 80235bc:	d000      	beq.n	80235c0 <_strtol_l.constprop.0+0xe8>
 80235be:	1e69      	subs	r1, r5, #1
 80235c0:	6011      	str	r1, [r2, #0]
 80235c2:	e7f3      	b.n	80235ac <_strtol_l.constprop.0+0xd4>
 80235c4:	2430      	movs	r4, #48	; 0x30
 80235c6:	2b00      	cmp	r3, #0
 80235c8:	d1b1      	bne.n	802352e <_strtol_l.constprop.0+0x56>
 80235ca:	2308      	movs	r3, #8
 80235cc:	e7af      	b.n	802352e <_strtol_l.constprop.0+0x56>
 80235ce:	2c30      	cmp	r4, #48	; 0x30
 80235d0:	d0a5      	beq.n	802351e <_strtol_l.constprop.0+0x46>
 80235d2:	230a      	movs	r3, #10
 80235d4:	e7ab      	b.n	802352e <_strtol_l.constprop.0+0x56>
 80235d6:	bf00      	nop
 80235d8:	08024609 	.word	0x08024609

080235dc <_strtol_r>:
 80235dc:	f7ff bf7c 	b.w	80234d8 <_strtol_l.constprop.0>

080235e0 <_strtoul_l.constprop.0>:
 80235e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80235e4:	4686      	mov	lr, r0
 80235e6:	460d      	mov	r5, r1
 80235e8:	4f35      	ldr	r7, [pc, #212]	; (80236c0 <_strtoul_l.constprop.0+0xe0>)
 80235ea:	4628      	mov	r0, r5
 80235ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80235f0:	5de6      	ldrb	r6, [r4, r7]
 80235f2:	f016 0608 	ands.w	r6, r6, #8
 80235f6:	d1f8      	bne.n	80235ea <_strtoul_l.constprop.0+0xa>
 80235f8:	2c2d      	cmp	r4, #45	; 0x2d
 80235fa:	d12f      	bne.n	802365c <_strtoul_l.constprop.0+0x7c>
 80235fc:	782c      	ldrb	r4, [r5, #0]
 80235fe:	2601      	movs	r6, #1
 8023600:	1c85      	adds	r5, r0, #2
 8023602:	2b00      	cmp	r3, #0
 8023604:	d057      	beq.n	80236b6 <_strtoul_l.constprop.0+0xd6>
 8023606:	2b10      	cmp	r3, #16
 8023608:	d109      	bne.n	802361e <_strtoul_l.constprop.0+0x3e>
 802360a:	2c30      	cmp	r4, #48	; 0x30
 802360c:	d107      	bne.n	802361e <_strtoul_l.constprop.0+0x3e>
 802360e:	7828      	ldrb	r0, [r5, #0]
 8023610:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8023614:	2858      	cmp	r0, #88	; 0x58
 8023616:	d149      	bne.n	80236ac <_strtoul_l.constprop.0+0xcc>
 8023618:	786c      	ldrb	r4, [r5, #1]
 802361a:	2310      	movs	r3, #16
 802361c:	3502      	adds	r5, #2
 802361e:	f04f 38ff 	mov.w	r8, #4294967295
 8023622:	2700      	movs	r7, #0
 8023624:	fbb8 f8f3 	udiv	r8, r8, r3
 8023628:	fb03 f908 	mul.w	r9, r3, r8
 802362c:	4638      	mov	r0, r7
 802362e:	ea6f 0909 	mvn.w	r9, r9
 8023632:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8023636:	f1bc 0f09 	cmp.w	ip, #9
 802363a:	d814      	bhi.n	8023666 <_strtoul_l.constprop.0+0x86>
 802363c:	4664      	mov	r4, ip
 802363e:	42a3      	cmp	r3, r4
 8023640:	dd22      	ble.n	8023688 <_strtoul_l.constprop.0+0xa8>
 8023642:	2f00      	cmp	r7, #0
 8023644:	db1d      	blt.n	8023682 <_strtoul_l.constprop.0+0xa2>
 8023646:	4580      	cmp	r8, r0
 8023648:	d31b      	bcc.n	8023682 <_strtoul_l.constprop.0+0xa2>
 802364a:	d101      	bne.n	8023650 <_strtoul_l.constprop.0+0x70>
 802364c:	45a1      	cmp	r9, r4
 802364e:	db18      	blt.n	8023682 <_strtoul_l.constprop.0+0xa2>
 8023650:	fb00 4003 	mla	r0, r0, r3, r4
 8023654:	2701      	movs	r7, #1
 8023656:	f815 4b01 	ldrb.w	r4, [r5], #1
 802365a:	e7ea      	b.n	8023632 <_strtoul_l.constprop.0+0x52>
 802365c:	2c2b      	cmp	r4, #43	; 0x2b
 802365e:	bf04      	itt	eq
 8023660:	782c      	ldrbeq	r4, [r5, #0]
 8023662:	1c85      	addeq	r5, r0, #2
 8023664:	e7cd      	b.n	8023602 <_strtoul_l.constprop.0+0x22>
 8023666:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802366a:	f1bc 0f19 	cmp.w	ip, #25
 802366e:	d801      	bhi.n	8023674 <_strtoul_l.constprop.0+0x94>
 8023670:	3c37      	subs	r4, #55	; 0x37
 8023672:	e7e4      	b.n	802363e <_strtoul_l.constprop.0+0x5e>
 8023674:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8023678:	f1bc 0f19 	cmp.w	ip, #25
 802367c:	d804      	bhi.n	8023688 <_strtoul_l.constprop.0+0xa8>
 802367e:	3c57      	subs	r4, #87	; 0x57
 8023680:	e7dd      	b.n	802363e <_strtoul_l.constprop.0+0x5e>
 8023682:	f04f 37ff 	mov.w	r7, #4294967295
 8023686:	e7e6      	b.n	8023656 <_strtoul_l.constprop.0+0x76>
 8023688:	2f00      	cmp	r7, #0
 802368a:	da07      	bge.n	802369c <_strtoul_l.constprop.0+0xbc>
 802368c:	2322      	movs	r3, #34	; 0x22
 802368e:	f04f 30ff 	mov.w	r0, #4294967295
 8023692:	f8ce 3000 	str.w	r3, [lr]
 8023696:	b932      	cbnz	r2, 80236a6 <_strtoul_l.constprop.0+0xc6>
 8023698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802369c:	b106      	cbz	r6, 80236a0 <_strtoul_l.constprop.0+0xc0>
 802369e:	4240      	negs	r0, r0
 80236a0:	2a00      	cmp	r2, #0
 80236a2:	d0f9      	beq.n	8023698 <_strtoul_l.constprop.0+0xb8>
 80236a4:	b107      	cbz	r7, 80236a8 <_strtoul_l.constprop.0+0xc8>
 80236a6:	1e69      	subs	r1, r5, #1
 80236a8:	6011      	str	r1, [r2, #0]
 80236aa:	e7f5      	b.n	8023698 <_strtoul_l.constprop.0+0xb8>
 80236ac:	2430      	movs	r4, #48	; 0x30
 80236ae:	2b00      	cmp	r3, #0
 80236b0:	d1b5      	bne.n	802361e <_strtoul_l.constprop.0+0x3e>
 80236b2:	2308      	movs	r3, #8
 80236b4:	e7b3      	b.n	802361e <_strtoul_l.constprop.0+0x3e>
 80236b6:	2c30      	cmp	r4, #48	; 0x30
 80236b8:	d0a9      	beq.n	802360e <_strtoul_l.constprop.0+0x2e>
 80236ba:	230a      	movs	r3, #10
 80236bc:	e7af      	b.n	802361e <_strtoul_l.constprop.0+0x3e>
 80236be:	bf00      	nop
 80236c0:	08024609 	.word	0x08024609

080236c4 <_strtoul_r>:
 80236c4:	f7ff bf8c 	b.w	80235e0 <_strtoul_l.constprop.0>

080236c8 <__submore>:
 80236c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80236cc:	460c      	mov	r4, r1
 80236ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80236d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80236d4:	4299      	cmp	r1, r3
 80236d6:	d11a      	bne.n	802370e <__submore+0x46>
 80236d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80236dc:	f7fe feb2 	bl	8022444 <_malloc_r>
 80236e0:	b918      	cbnz	r0, 80236ea <__submore+0x22>
 80236e2:	f04f 30ff 	mov.w	r0, #4294967295
 80236e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80236ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80236ee:	6360      	str	r0, [r4, #52]	; 0x34
 80236f0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80236f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80236f6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80236fa:	7083      	strb	r3, [r0, #2]
 80236fc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8023700:	7043      	strb	r3, [r0, #1]
 8023702:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8023706:	7003      	strb	r3, [r0, #0]
 8023708:	6020      	str	r0, [r4, #0]
 802370a:	2000      	movs	r0, #0
 802370c:	e7eb      	b.n	80236e6 <__submore+0x1e>
 802370e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8023710:	0077      	lsls	r7, r6, #1
 8023712:	463a      	mov	r2, r7
 8023714:	f000 fafc 	bl	8023d10 <_realloc_r>
 8023718:	4605      	mov	r5, r0
 802371a:	2800      	cmp	r0, #0
 802371c:	d0e1      	beq.n	80236e2 <__submore+0x1a>
 802371e:	eb00 0806 	add.w	r8, r0, r6
 8023722:	4601      	mov	r1, r0
 8023724:	4632      	mov	r2, r6
 8023726:	4640      	mov	r0, r8
 8023728:	f7fe fdf0 	bl	802230c <memcpy>
 802372c:	f8c4 8000 	str.w	r8, [r4]
 8023730:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8023734:	e7e9      	b.n	802370a <__submore+0x42>
	...

08023738 <__swbuf_r>:
 8023738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802373a:	460e      	mov	r6, r1
 802373c:	4614      	mov	r4, r2
 802373e:	4605      	mov	r5, r0
 8023740:	b118      	cbz	r0, 802374a <__swbuf_r+0x12>
 8023742:	6983      	ldr	r3, [r0, #24]
 8023744:	b90b      	cbnz	r3, 802374a <__swbuf_r+0x12>
 8023746:	f000 f9cf 	bl	8023ae8 <__sinit>
 802374a:	4b21      	ldr	r3, [pc, #132]	; (80237d0 <__swbuf_r+0x98>)
 802374c:	429c      	cmp	r4, r3
 802374e:	d12b      	bne.n	80237a8 <__swbuf_r+0x70>
 8023750:	686c      	ldr	r4, [r5, #4]
 8023752:	69a3      	ldr	r3, [r4, #24]
 8023754:	60a3      	str	r3, [r4, #8]
 8023756:	89a3      	ldrh	r3, [r4, #12]
 8023758:	071a      	lsls	r2, r3, #28
 802375a:	d52f      	bpl.n	80237bc <__swbuf_r+0x84>
 802375c:	6923      	ldr	r3, [r4, #16]
 802375e:	b36b      	cbz	r3, 80237bc <__swbuf_r+0x84>
 8023760:	6923      	ldr	r3, [r4, #16]
 8023762:	b2f6      	uxtb	r6, r6
 8023764:	6820      	ldr	r0, [r4, #0]
 8023766:	4637      	mov	r7, r6
 8023768:	1ac0      	subs	r0, r0, r3
 802376a:	6963      	ldr	r3, [r4, #20]
 802376c:	4283      	cmp	r3, r0
 802376e:	dc04      	bgt.n	802377a <__swbuf_r+0x42>
 8023770:	4621      	mov	r1, r4
 8023772:	4628      	mov	r0, r5
 8023774:	f000 f924 	bl	80239c0 <_fflush_r>
 8023778:	bb30      	cbnz	r0, 80237c8 <__swbuf_r+0x90>
 802377a:	68a3      	ldr	r3, [r4, #8]
 802377c:	3001      	adds	r0, #1
 802377e:	3b01      	subs	r3, #1
 8023780:	60a3      	str	r3, [r4, #8]
 8023782:	6823      	ldr	r3, [r4, #0]
 8023784:	1c5a      	adds	r2, r3, #1
 8023786:	6022      	str	r2, [r4, #0]
 8023788:	701e      	strb	r6, [r3, #0]
 802378a:	6963      	ldr	r3, [r4, #20]
 802378c:	4283      	cmp	r3, r0
 802378e:	d004      	beq.n	802379a <__swbuf_r+0x62>
 8023790:	89a3      	ldrh	r3, [r4, #12]
 8023792:	07db      	lsls	r3, r3, #31
 8023794:	d506      	bpl.n	80237a4 <__swbuf_r+0x6c>
 8023796:	2e0a      	cmp	r6, #10
 8023798:	d104      	bne.n	80237a4 <__swbuf_r+0x6c>
 802379a:	4621      	mov	r1, r4
 802379c:	4628      	mov	r0, r5
 802379e:	f000 f90f 	bl	80239c0 <_fflush_r>
 80237a2:	b988      	cbnz	r0, 80237c8 <__swbuf_r+0x90>
 80237a4:	4638      	mov	r0, r7
 80237a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80237a8:	4b0a      	ldr	r3, [pc, #40]	; (80237d4 <__swbuf_r+0x9c>)
 80237aa:	429c      	cmp	r4, r3
 80237ac:	d101      	bne.n	80237b2 <__swbuf_r+0x7a>
 80237ae:	68ac      	ldr	r4, [r5, #8]
 80237b0:	e7cf      	b.n	8023752 <__swbuf_r+0x1a>
 80237b2:	4b09      	ldr	r3, [pc, #36]	; (80237d8 <__swbuf_r+0xa0>)
 80237b4:	429c      	cmp	r4, r3
 80237b6:	bf08      	it	eq
 80237b8:	68ec      	ldreq	r4, [r5, #12]
 80237ba:	e7ca      	b.n	8023752 <__swbuf_r+0x1a>
 80237bc:	4621      	mov	r1, r4
 80237be:	4628      	mov	r0, r5
 80237c0:	f000 f80c 	bl	80237dc <__swsetup_r>
 80237c4:	2800      	cmp	r0, #0
 80237c6:	d0cb      	beq.n	8023760 <__swbuf_r+0x28>
 80237c8:	f04f 37ff 	mov.w	r7, #4294967295
 80237cc:	e7ea      	b.n	80237a4 <__swbuf_r+0x6c>
 80237ce:	bf00      	nop
 80237d0:	0802472c 	.word	0x0802472c
 80237d4:	0802474c 	.word	0x0802474c
 80237d8:	0802470c 	.word	0x0802470c

080237dc <__swsetup_r>:
 80237dc:	4b32      	ldr	r3, [pc, #200]	; (80238a8 <__swsetup_r+0xcc>)
 80237de:	b570      	push	{r4, r5, r6, lr}
 80237e0:	681d      	ldr	r5, [r3, #0]
 80237e2:	4606      	mov	r6, r0
 80237e4:	460c      	mov	r4, r1
 80237e6:	b125      	cbz	r5, 80237f2 <__swsetup_r+0x16>
 80237e8:	69ab      	ldr	r3, [r5, #24]
 80237ea:	b913      	cbnz	r3, 80237f2 <__swsetup_r+0x16>
 80237ec:	4628      	mov	r0, r5
 80237ee:	f000 f97b 	bl	8023ae8 <__sinit>
 80237f2:	4b2e      	ldr	r3, [pc, #184]	; (80238ac <__swsetup_r+0xd0>)
 80237f4:	429c      	cmp	r4, r3
 80237f6:	d10f      	bne.n	8023818 <__swsetup_r+0x3c>
 80237f8:	686c      	ldr	r4, [r5, #4]
 80237fa:	89a3      	ldrh	r3, [r4, #12]
 80237fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023800:	0719      	lsls	r1, r3, #28
 8023802:	d42c      	bmi.n	802385e <__swsetup_r+0x82>
 8023804:	06dd      	lsls	r5, r3, #27
 8023806:	d411      	bmi.n	802382c <__swsetup_r+0x50>
 8023808:	2309      	movs	r3, #9
 802380a:	6033      	str	r3, [r6, #0]
 802380c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023810:	f04f 30ff 	mov.w	r0, #4294967295
 8023814:	81a3      	strh	r3, [r4, #12]
 8023816:	e03e      	b.n	8023896 <__swsetup_r+0xba>
 8023818:	4b25      	ldr	r3, [pc, #148]	; (80238b0 <__swsetup_r+0xd4>)
 802381a:	429c      	cmp	r4, r3
 802381c:	d101      	bne.n	8023822 <__swsetup_r+0x46>
 802381e:	68ac      	ldr	r4, [r5, #8]
 8023820:	e7eb      	b.n	80237fa <__swsetup_r+0x1e>
 8023822:	4b24      	ldr	r3, [pc, #144]	; (80238b4 <__swsetup_r+0xd8>)
 8023824:	429c      	cmp	r4, r3
 8023826:	bf08      	it	eq
 8023828:	68ec      	ldreq	r4, [r5, #12]
 802382a:	e7e6      	b.n	80237fa <__swsetup_r+0x1e>
 802382c:	0758      	lsls	r0, r3, #29
 802382e:	d512      	bpl.n	8023856 <__swsetup_r+0x7a>
 8023830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023832:	b141      	cbz	r1, 8023846 <__swsetup_r+0x6a>
 8023834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023838:	4299      	cmp	r1, r3
 802383a:	d002      	beq.n	8023842 <__swsetup_r+0x66>
 802383c:	4630      	mov	r0, r6
 802383e:	f7fe fd95 	bl	802236c <_free_r>
 8023842:	2300      	movs	r3, #0
 8023844:	6363      	str	r3, [r4, #52]	; 0x34
 8023846:	89a3      	ldrh	r3, [r4, #12]
 8023848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802384c:	81a3      	strh	r3, [r4, #12]
 802384e:	2300      	movs	r3, #0
 8023850:	6063      	str	r3, [r4, #4]
 8023852:	6923      	ldr	r3, [r4, #16]
 8023854:	6023      	str	r3, [r4, #0]
 8023856:	89a3      	ldrh	r3, [r4, #12]
 8023858:	f043 0308 	orr.w	r3, r3, #8
 802385c:	81a3      	strh	r3, [r4, #12]
 802385e:	6923      	ldr	r3, [r4, #16]
 8023860:	b94b      	cbnz	r3, 8023876 <__swsetup_r+0x9a>
 8023862:	89a3      	ldrh	r3, [r4, #12]
 8023864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802386c:	d003      	beq.n	8023876 <__swsetup_r+0x9a>
 802386e:	4621      	mov	r1, r4
 8023870:	4630      	mov	r0, r6
 8023872:	f000 f9ff 	bl	8023c74 <__smakebuf_r>
 8023876:	89a0      	ldrh	r0, [r4, #12]
 8023878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802387c:	f010 0301 	ands.w	r3, r0, #1
 8023880:	d00a      	beq.n	8023898 <__swsetup_r+0xbc>
 8023882:	2300      	movs	r3, #0
 8023884:	60a3      	str	r3, [r4, #8]
 8023886:	6963      	ldr	r3, [r4, #20]
 8023888:	425b      	negs	r3, r3
 802388a:	61a3      	str	r3, [r4, #24]
 802388c:	6923      	ldr	r3, [r4, #16]
 802388e:	b943      	cbnz	r3, 80238a2 <__swsetup_r+0xc6>
 8023890:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023894:	d1ba      	bne.n	802380c <__swsetup_r+0x30>
 8023896:	bd70      	pop	{r4, r5, r6, pc}
 8023898:	0781      	lsls	r1, r0, #30
 802389a:	bf58      	it	pl
 802389c:	6963      	ldrpl	r3, [r4, #20]
 802389e:	60a3      	str	r3, [r4, #8]
 80238a0:	e7f4      	b.n	802388c <__swsetup_r+0xb0>
 80238a2:	2000      	movs	r0, #0
 80238a4:	e7f7      	b.n	8023896 <__swsetup_r+0xba>
 80238a6:	bf00      	nop
 80238a8:	200000a0 	.word	0x200000a0
 80238ac:	0802472c 	.word	0x0802472c
 80238b0:	0802474c 	.word	0x0802474c
 80238b4:	0802470c 	.word	0x0802470c

080238b8 <__sflush_r>:
 80238b8:	898a      	ldrh	r2, [r1, #12]
 80238ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80238be:	4605      	mov	r5, r0
 80238c0:	0710      	lsls	r0, r2, #28
 80238c2:	460c      	mov	r4, r1
 80238c4:	d458      	bmi.n	8023978 <__sflush_r+0xc0>
 80238c6:	684b      	ldr	r3, [r1, #4]
 80238c8:	2b00      	cmp	r3, #0
 80238ca:	dc05      	bgt.n	80238d8 <__sflush_r+0x20>
 80238cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80238ce:	2b00      	cmp	r3, #0
 80238d0:	dc02      	bgt.n	80238d8 <__sflush_r+0x20>
 80238d2:	2000      	movs	r0, #0
 80238d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80238d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80238da:	2e00      	cmp	r6, #0
 80238dc:	d0f9      	beq.n	80238d2 <__sflush_r+0x1a>
 80238de:	2300      	movs	r3, #0
 80238e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80238e4:	682f      	ldr	r7, [r5, #0]
 80238e6:	602b      	str	r3, [r5, #0]
 80238e8:	d032      	beq.n	8023950 <__sflush_r+0x98>
 80238ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80238ec:	89a3      	ldrh	r3, [r4, #12]
 80238ee:	075a      	lsls	r2, r3, #29
 80238f0:	d505      	bpl.n	80238fe <__sflush_r+0x46>
 80238f2:	6863      	ldr	r3, [r4, #4]
 80238f4:	1ac0      	subs	r0, r0, r3
 80238f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80238f8:	b10b      	cbz	r3, 80238fe <__sflush_r+0x46>
 80238fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80238fc:	1ac0      	subs	r0, r0, r3
 80238fe:	2300      	movs	r3, #0
 8023900:	4602      	mov	r2, r0
 8023902:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023904:	4628      	mov	r0, r5
 8023906:	6a21      	ldr	r1, [r4, #32]
 8023908:	47b0      	blx	r6
 802390a:	1c43      	adds	r3, r0, #1
 802390c:	89a3      	ldrh	r3, [r4, #12]
 802390e:	d106      	bne.n	802391e <__sflush_r+0x66>
 8023910:	6829      	ldr	r1, [r5, #0]
 8023912:	291d      	cmp	r1, #29
 8023914:	d82c      	bhi.n	8023970 <__sflush_r+0xb8>
 8023916:	4a29      	ldr	r2, [pc, #164]	; (80239bc <__sflush_r+0x104>)
 8023918:	40ca      	lsrs	r2, r1
 802391a:	07d6      	lsls	r6, r2, #31
 802391c:	d528      	bpl.n	8023970 <__sflush_r+0xb8>
 802391e:	2200      	movs	r2, #0
 8023920:	04d9      	lsls	r1, r3, #19
 8023922:	6062      	str	r2, [r4, #4]
 8023924:	6922      	ldr	r2, [r4, #16]
 8023926:	6022      	str	r2, [r4, #0]
 8023928:	d504      	bpl.n	8023934 <__sflush_r+0x7c>
 802392a:	1c42      	adds	r2, r0, #1
 802392c:	d101      	bne.n	8023932 <__sflush_r+0x7a>
 802392e:	682b      	ldr	r3, [r5, #0]
 8023930:	b903      	cbnz	r3, 8023934 <__sflush_r+0x7c>
 8023932:	6560      	str	r0, [r4, #84]	; 0x54
 8023934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023936:	602f      	str	r7, [r5, #0]
 8023938:	2900      	cmp	r1, #0
 802393a:	d0ca      	beq.n	80238d2 <__sflush_r+0x1a>
 802393c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023940:	4299      	cmp	r1, r3
 8023942:	d002      	beq.n	802394a <__sflush_r+0x92>
 8023944:	4628      	mov	r0, r5
 8023946:	f7fe fd11 	bl	802236c <_free_r>
 802394a:	2000      	movs	r0, #0
 802394c:	6360      	str	r0, [r4, #52]	; 0x34
 802394e:	e7c1      	b.n	80238d4 <__sflush_r+0x1c>
 8023950:	6a21      	ldr	r1, [r4, #32]
 8023952:	2301      	movs	r3, #1
 8023954:	4628      	mov	r0, r5
 8023956:	47b0      	blx	r6
 8023958:	1c41      	adds	r1, r0, #1
 802395a:	d1c7      	bne.n	80238ec <__sflush_r+0x34>
 802395c:	682b      	ldr	r3, [r5, #0]
 802395e:	2b00      	cmp	r3, #0
 8023960:	d0c4      	beq.n	80238ec <__sflush_r+0x34>
 8023962:	2b1d      	cmp	r3, #29
 8023964:	d001      	beq.n	802396a <__sflush_r+0xb2>
 8023966:	2b16      	cmp	r3, #22
 8023968:	d101      	bne.n	802396e <__sflush_r+0xb6>
 802396a:	602f      	str	r7, [r5, #0]
 802396c:	e7b1      	b.n	80238d2 <__sflush_r+0x1a>
 802396e:	89a3      	ldrh	r3, [r4, #12]
 8023970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023974:	81a3      	strh	r3, [r4, #12]
 8023976:	e7ad      	b.n	80238d4 <__sflush_r+0x1c>
 8023978:	690f      	ldr	r7, [r1, #16]
 802397a:	2f00      	cmp	r7, #0
 802397c:	d0a9      	beq.n	80238d2 <__sflush_r+0x1a>
 802397e:	0793      	lsls	r3, r2, #30
 8023980:	680e      	ldr	r6, [r1, #0]
 8023982:	600f      	str	r7, [r1, #0]
 8023984:	bf0c      	ite	eq
 8023986:	694b      	ldreq	r3, [r1, #20]
 8023988:	2300      	movne	r3, #0
 802398a:	eba6 0807 	sub.w	r8, r6, r7
 802398e:	608b      	str	r3, [r1, #8]
 8023990:	f1b8 0f00 	cmp.w	r8, #0
 8023994:	dd9d      	ble.n	80238d2 <__sflush_r+0x1a>
 8023996:	4643      	mov	r3, r8
 8023998:	463a      	mov	r2, r7
 802399a:	6a21      	ldr	r1, [r4, #32]
 802399c:	4628      	mov	r0, r5
 802399e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80239a0:	47b0      	blx	r6
 80239a2:	2800      	cmp	r0, #0
 80239a4:	dc06      	bgt.n	80239b4 <__sflush_r+0xfc>
 80239a6:	89a3      	ldrh	r3, [r4, #12]
 80239a8:	f04f 30ff 	mov.w	r0, #4294967295
 80239ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80239b0:	81a3      	strh	r3, [r4, #12]
 80239b2:	e78f      	b.n	80238d4 <__sflush_r+0x1c>
 80239b4:	4407      	add	r7, r0
 80239b6:	eba8 0800 	sub.w	r8, r8, r0
 80239ba:	e7e9      	b.n	8023990 <__sflush_r+0xd8>
 80239bc:	20400001 	.word	0x20400001

080239c0 <_fflush_r>:
 80239c0:	b538      	push	{r3, r4, r5, lr}
 80239c2:	690b      	ldr	r3, [r1, #16]
 80239c4:	4605      	mov	r5, r0
 80239c6:	460c      	mov	r4, r1
 80239c8:	b913      	cbnz	r3, 80239d0 <_fflush_r+0x10>
 80239ca:	2500      	movs	r5, #0
 80239cc:	4628      	mov	r0, r5
 80239ce:	bd38      	pop	{r3, r4, r5, pc}
 80239d0:	b118      	cbz	r0, 80239da <_fflush_r+0x1a>
 80239d2:	6983      	ldr	r3, [r0, #24]
 80239d4:	b90b      	cbnz	r3, 80239da <_fflush_r+0x1a>
 80239d6:	f000 f887 	bl	8023ae8 <__sinit>
 80239da:	4b14      	ldr	r3, [pc, #80]	; (8023a2c <_fflush_r+0x6c>)
 80239dc:	429c      	cmp	r4, r3
 80239de:	d11b      	bne.n	8023a18 <_fflush_r+0x58>
 80239e0:	686c      	ldr	r4, [r5, #4]
 80239e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80239e6:	2b00      	cmp	r3, #0
 80239e8:	d0ef      	beq.n	80239ca <_fflush_r+0xa>
 80239ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80239ec:	07d0      	lsls	r0, r2, #31
 80239ee:	d404      	bmi.n	80239fa <_fflush_r+0x3a>
 80239f0:	0599      	lsls	r1, r3, #22
 80239f2:	d402      	bmi.n	80239fa <_fflush_r+0x3a>
 80239f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80239f6:	f000 f915 	bl	8023c24 <__retarget_lock_acquire_recursive>
 80239fa:	4628      	mov	r0, r5
 80239fc:	4621      	mov	r1, r4
 80239fe:	f7ff ff5b 	bl	80238b8 <__sflush_r>
 8023a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023a04:	4605      	mov	r5, r0
 8023a06:	07da      	lsls	r2, r3, #31
 8023a08:	d4e0      	bmi.n	80239cc <_fflush_r+0xc>
 8023a0a:	89a3      	ldrh	r3, [r4, #12]
 8023a0c:	059b      	lsls	r3, r3, #22
 8023a0e:	d4dd      	bmi.n	80239cc <_fflush_r+0xc>
 8023a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023a12:	f000 f908 	bl	8023c26 <__retarget_lock_release_recursive>
 8023a16:	e7d9      	b.n	80239cc <_fflush_r+0xc>
 8023a18:	4b05      	ldr	r3, [pc, #20]	; (8023a30 <_fflush_r+0x70>)
 8023a1a:	429c      	cmp	r4, r3
 8023a1c:	d101      	bne.n	8023a22 <_fflush_r+0x62>
 8023a1e:	68ac      	ldr	r4, [r5, #8]
 8023a20:	e7df      	b.n	80239e2 <_fflush_r+0x22>
 8023a22:	4b04      	ldr	r3, [pc, #16]	; (8023a34 <_fflush_r+0x74>)
 8023a24:	429c      	cmp	r4, r3
 8023a26:	bf08      	it	eq
 8023a28:	68ec      	ldreq	r4, [r5, #12]
 8023a2a:	e7da      	b.n	80239e2 <_fflush_r+0x22>
 8023a2c:	0802472c 	.word	0x0802472c
 8023a30:	0802474c 	.word	0x0802474c
 8023a34:	0802470c 	.word	0x0802470c

08023a38 <std>:
 8023a38:	2300      	movs	r3, #0
 8023a3a:	b510      	push	{r4, lr}
 8023a3c:	4604      	mov	r4, r0
 8023a3e:	6083      	str	r3, [r0, #8]
 8023a40:	8181      	strh	r1, [r0, #12]
 8023a42:	4619      	mov	r1, r3
 8023a44:	6643      	str	r3, [r0, #100]	; 0x64
 8023a46:	81c2      	strh	r2, [r0, #14]
 8023a48:	2208      	movs	r2, #8
 8023a4a:	6183      	str	r3, [r0, #24]
 8023a4c:	e9c0 3300 	strd	r3, r3, [r0]
 8023a50:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023a54:	305c      	adds	r0, #92	; 0x5c
 8023a56:	f7fe fc80 	bl	802235a <memset>
 8023a5a:	4b05      	ldr	r3, [pc, #20]	; (8023a70 <std+0x38>)
 8023a5c:	6224      	str	r4, [r4, #32]
 8023a5e:	6263      	str	r3, [r4, #36]	; 0x24
 8023a60:	4b04      	ldr	r3, [pc, #16]	; (8023a74 <std+0x3c>)
 8023a62:	62a3      	str	r3, [r4, #40]	; 0x28
 8023a64:	4b04      	ldr	r3, [pc, #16]	; (8023a78 <std+0x40>)
 8023a66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023a68:	4b04      	ldr	r3, [pc, #16]	; (8023a7c <std+0x44>)
 8023a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8023a6c:	bd10      	pop	{r4, pc}
 8023a6e:	bf00      	nop
 8023a70:	080226a9 	.word	0x080226a9
 8023a74:	080226cf 	.word	0x080226cf
 8023a78:	08022707 	.word	0x08022707
 8023a7c:	0802272b 	.word	0x0802272b

08023a80 <_cleanup_r>:
 8023a80:	4901      	ldr	r1, [pc, #4]	; (8023a88 <_cleanup_r+0x8>)
 8023a82:	f000 b8af 	b.w	8023be4 <_fwalk_reent>
 8023a86:	bf00      	nop
 8023a88:	080239c1 	.word	0x080239c1

08023a8c <__sfmoreglue>:
 8023a8c:	b570      	push	{r4, r5, r6, lr}
 8023a8e:	2268      	movs	r2, #104	; 0x68
 8023a90:	1e4d      	subs	r5, r1, #1
 8023a92:	460e      	mov	r6, r1
 8023a94:	4355      	muls	r5, r2
 8023a96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023a9a:	f7fe fcd3 	bl	8022444 <_malloc_r>
 8023a9e:	4604      	mov	r4, r0
 8023aa0:	b140      	cbz	r0, 8023ab4 <__sfmoreglue+0x28>
 8023aa2:	2100      	movs	r1, #0
 8023aa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023aa8:	e9c0 1600 	strd	r1, r6, [r0]
 8023aac:	300c      	adds	r0, #12
 8023aae:	60a0      	str	r0, [r4, #8]
 8023ab0:	f7fe fc53 	bl	802235a <memset>
 8023ab4:	4620      	mov	r0, r4
 8023ab6:	bd70      	pop	{r4, r5, r6, pc}

08023ab8 <__sfp_lock_acquire>:
 8023ab8:	4801      	ldr	r0, [pc, #4]	; (8023ac0 <__sfp_lock_acquire+0x8>)
 8023aba:	f000 b8b3 	b.w	8023c24 <__retarget_lock_acquire_recursive>
 8023abe:	bf00      	nop
 8023ac0:	20003d25 	.word	0x20003d25

08023ac4 <__sfp_lock_release>:
 8023ac4:	4801      	ldr	r0, [pc, #4]	; (8023acc <__sfp_lock_release+0x8>)
 8023ac6:	f000 b8ae 	b.w	8023c26 <__retarget_lock_release_recursive>
 8023aca:	bf00      	nop
 8023acc:	20003d25 	.word	0x20003d25

08023ad0 <__sinit_lock_acquire>:
 8023ad0:	4801      	ldr	r0, [pc, #4]	; (8023ad8 <__sinit_lock_acquire+0x8>)
 8023ad2:	f000 b8a7 	b.w	8023c24 <__retarget_lock_acquire_recursive>
 8023ad6:	bf00      	nop
 8023ad8:	20003d26 	.word	0x20003d26

08023adc <__sinit_lock_release>:
 8023adc:	4801      	ldr	r0, [pc, #4]	; (8023ae4 <__sinit_lock_release+0x8>)
 8023ade:	f000 b8a2 	b.w	8023c26 <__retarget_lock_release_recursive>
 8023ae2:	bf00      	nop
 8023ae4:	20003d26 	.word	0x20003d26

08023ae8 <__sinit>:
 8023ae8:	b510      	push	{r4, lr}
 8023aea:	4604      	mov	r4, r0
 8023aec:	f7ff fff0 	bl	8023ad0 <__sinit_lock_acquire>
 8023af0:	69a3      	ldr	r3, [r4, #24]
 8023af2:	b11b      	cbz	r3, 8023afc <__sinit+0x14>
 8023af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023af8:	f7ff bff0 	b.w	8023adc <__sinit_lock_release>
 8023afc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023b00:	6523      	str	r3, [r4, #80]	; 0x50
 8023b02:	4620      	mov	r0, r4
 8023b04:	4b12      	ldr	r3, [pc, #72]	; (8023b50 <__sinit+0x68>)
 8023b06:	4a13      	ldr	r2, [pc, #76]	; (8023b54 <__sinit+0x6c>)
 8023b08:	681b      	ldr	r3, [r3, #0]
 8023b0a:	62a2      	str	r2, [r4, #40]	; 0x28
 8023b0c:	42a3      	cmp	r3, r4
 8023b0e:	bf04      	itt	eq
 8023b10:	2301      	moveq	r3, #1
 8023b12:	61a3      	streq	r3, [r4, #24]
 8023b14:	f000 f820 	bl	8023b58 <__sfp>
 8023b18:	6060      	str	r0, [r4, #4]
 8023b1a:	4620      	mov	r0, r4
 8023b1c:	f000 f81c 	bl	8023b58 <__sfp>
 8023b20:	60a0      	str	r0, [r4, #8]
 8023b22:	4620      	mov	r0, r4
 8023b24:	f000 f818 	bl	8023b58 <__sfp>
 8023b28:	2200      	movs	r2, #0
 8023b2a:	2104      	movs	r1, #4
 8023b2c:	60e0      	str	r0, [r4, #12]
 8023b2e:	6860      	ldr	r0, [r4, #4]
 8023b30:	f7ff ff82 	bl	8023a38 <std>
 8023b34:	2201      	movs	r2, #1
 8023b36:	2109      	movs	r1, #9
 8023b38:	68a0      	ldr	r0, [r4, #8]
 8023b3a:	f7ff ff7d 	bl	8023a38 <std>
 8023b3e:	2202      	movs	r2, #2
 8023b40:	2112      	movs	r1, #18
 8023b42:	68e0      	ldr	r0, [r4, #12]
 8023b44:	f7ff ff78 	bl	8023a38 <std>
 8023b48:	2301      	movs	r3, #1
 8023b4a:	61a3      	str	r3, [r4, #24]
 8023b4c:	e7d2      	b.n	8023af4 <__sinit+0xc>
 8023b4e:	bf00      	nop
 8023b50:	08024508 	.word	0x08024508
 8023b54:	08023a81 	.word	0x08023a81

08023b58 <__sfp>:
 8023b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b5a:	4607      	mov	r7, r0
 8023b5c:	f7ff ffac 	bl	8023ab8 <__sfp_lock_acquire>
 8023b60:	4b1e      	ldr	r3, [pc, #120]	; (8023bdc <__sfp+0x84>)
 8023b62:	681e      	ldr	r6, [r3, #0]
 8023b64:	69b3      	ldr	r3, [r6, #24]
 8023b66:	b913      	cbnz	r3, 8023b6e <__sfp+0x16>
 8023b68:	4630      	mov	r0, r6
 8023b6a:	f7ff ffbd 	bl	8023ae8 <__sinit>
 8023b6e:	3648      	adds	r6, #72	; 0x48
 8023b70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023b74:	3b01      	subs	r3, #1
 8023b76:	d503      	bpl.n	8023b80 <__sfp+0x28>
 8023b78:	6833      	ldr	r3, [r6, #0]
 8023b7a:	b30b      	cbz	r3, 8023bc0 <__sfp+0x68>
 8023b7c:	6836      	ldr	r6, [r6, #0]
 8023b7e:	e7f7      	b.n	8023b70 <__sfp+0x18>
 8023b80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023b84:	b9d5      	cbnz	r5, 8023bbc <__sfp+0x64>
 8023b86:	4b16      	ldr	r3, [pc, #88]	; (8023be0 <__sfp+0x88>)
 8023b88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023b8c:	6665      	str	r5, [r4, #100]	; 0x64
 8023b8e:	60e3      	str	r3, [r4, #12]
 8023b90:	f000 f847 	bl	8023c22 <__retarget_lock_init_recursive>
 8023b94:	f7ff ff96 	bl	8023ac4 <__sfp_lock_release>
 8023b98:	2208      	movs	r2, #8
 8023b9a:	4629      	mov	r1, r5
 8023b9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023ba0:	6025      	str	r5, [r4, #0]
 8023ba2:	61a5      	str	r5, [r4, #24]
 8023ba4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023ba8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023bac:	f7fe fbd5 	bl	802235a <memset>
 8023bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023bb8:	4620      	mov	r0, r4
 8023bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023bbc:	3468      	adds	r4, #104	; 0x68
 8023bbe:	e7d9      	b.n	8023b74 <__sfp+0x1c>
 8023bc0:	2104      	movs	r1, #4
 8023bc2:	4638      	mov	r0, r7
 8023bc4:	f7ff ff62 	bl	8023a8c <__sfmoreglue>
 8023bc8:	4604      	mov	r4, r0
 8023bca:	6030      	str	r0, [r6, #0]
 8023bcc:	2800      	cmp	r0, #0
 8023bce:	d1d5      	bne.n	8023b7c <__sfp+0x24>
 8023bd0:	f7ff ff78 	bl	8023ac4 <__sfp_lock_release>
 8023bd4:	230c      	movs	r3, #12
 8023bd6:	603b      	str	r3, [r7, #0]
 8023bd8:	e7ee      	b.n	8023bb8 <__sfp+0x60>
 8023bda:	bf00      	nop
 8023bdc:	08024508 	.word	0x08024508
 8023be0:	ffff0001 	.word	0xffff0001

08023be4 <_fwalk_reent>:
 8023be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023be8:	4606      	mov	r6, r0
 8023bea:	4688      	mov	r8, r1
 8023bec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023bf0:	2700      	movs	r7, #0
 8023bf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023bf6:	f1b9 0901 	subs.w	r9, r9, #1
 8023bfa:	d505      	bpl.n	8023c08 <_fwalk_reent+0x24>
 8023bfc:	6824      	ldr	r4, [r4, #0]
 8023bfe:	2c00      	cmp	r4, #0
 8023c00:	d1f7      	bne.n	8023bf2 <_fwalk_reent+0xe>
 8023c02:	4638      	mov	r0, r7
 8023c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023c08:	89ab      	ldrh	r3, [r5, #12]
 8023c0a:	2b01      	cmp	r3, #1
 8023c0c:	d907      	bls.n	8023c1e <_fwalk_reent+0x3a>
 8023c0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023c12:	3301      	adds	r3, #1
 8023c14:	d003      	beq.n	8023c1e <_fwalk_reent+0x3a>
 8023c16:	4629      	mov	r1, r5
 8023c18:	4630      	mov	r0, r6
 8023c1a:	47c0      	blx	r8
 8023c1c:	4307      	orrs	r7, r0
 8023c1e:	3568      	adds	r5, #104	; 0x68
 8023c20:	e7e9      	b.n	8023bf6 <_fwalk_reent+0x12>

08023c22 <__retarget_lock_init_recursive>:
 8023c22:	4770      	bx	lr

08023c24 <__retarget_lock_acquire_recursive>:
 8023c24:	4770      	bx	lr

08023c26 <__retarget_lock_release_recursive>:
 8023c26:	4770      	bx	lr

08023c28 <__swhatbuf_r>:
 8023c28:	b570      	push	{r4, r5, r6, lr}
 8023c2a:	460e      	mov	r6, r1
 8023c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023c30:	b096      	sub	sp, #88	; 0x58
 8023c32:	4614      	mov	r4, r2
 8023c34:	2900      	cmp	r1, #0
 8023c36:	461d      	mov	r5, r3
 8023c38:	da08      	bge.n	8023c4c <__swhatbuf_r+0x24>
 8023c3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8023c3e:	2200      	movs	r2, #0
 8023c40:	602a      	str	r2, [r5, #0]
 8023c42:	061a      	lsls	r2, r3, #24
 8023c44:	d410      	bmi.n	8023c68 <__swhatbuf_r+0x40>
 8023c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023c4a:	e00e      	b.n	8023c6a <__swhatbuf_r+0x42>
 8023c4c:	466a      	mov	r2, sp
 8023c4e:	f000 f88f 	bl	8023d70 <_fstat_r>
 8023c52:	2800      	cmp	r0, #0
 8023c54:	dbf1      	blt.n	8023c3a <__swhatbuf_r+0x12>
 8023c56:	9a01      	ldr	r2, [sp, #4]
 8023c58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023c5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8023c60:	425a      	negs	r2, r3
 8023c62:	415a      	adcs	r2, r3
 8023c64:	602a      	str	r2, [r5, #0]
 8023c66:	e7ee      	b.n	8023c46 <__swhatbuf_r+0x1e>
 8023c68:	2340      	movs	r3, #64	; 0x40
 8023c6a:	2000      	movs	r0, #0
 8023c6c:	6023      	str	r3, [r4, #0]
 8023c6e:	b016      	add	sp, #88	; 0x58
 8023c70:	bd70      	pop	{r4, r5, r6, pc}
	...

08023c74 <__smakebuf_r>:
 8023c74:	898b      	ldrh	r3, [r1, #12]
 8023c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023c78:	079d      	lsls	r5, r3, #30
 8023c7a:	4606      	mov	r6, r0
 8023c7c:	460c      	mov	r4, r1
 8023c7e:	d507      	bpl.n	8023c90 <__smakebuf_r+0x1c>
 8023c80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023c84:	6023      	str	r3, [r4, #0]
 8023c86:	6123      	str	r3, [r4, #16]
 8023c88:	2301      	movs	r3, #1
 8023c8a:	6163      	str	r3, [r4, #20]
 8023c8c:	b002      	add	sp, #8
 8023c8e:	bd70      	pop	{r4, r5, r6, pc}
 8023c90:	ab01      	add	r3, sp, #4
 8023c92:	466a      	mov	r2, sp
 8023c94:	f7ff ffc8 	bl	8023c28 <__swhatbuf_r>
 8023c98:	9900      	ldr	r1, [sp, #0]
 8023c9a:	4605      	mov	r5, r0
 8023c9c:	4630      	mov	r0, r6
 8023c9e:	f7fe fbd1 	bl	8022444 <_malloc_r>
 8023ca2:	b948      	cbnz	r0, 8023cb8 <__smakebuf_r+0x44>
 8023ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023ca8:	059a      	lsls	r2, r3, #22
 8023caa:	d4ef      	bmi.n	8023c8c <__smakebuf_r+0x18>
 8023cac:	f023 0303 	bic.w	r3, r3, #3
 8023cb0:	f043 0302 	orr.w	r3, r3, #2
 8023cb4:	81a3      	strh	r3, [r4, #12]
 8023cb6:	e7e3      	b.n	8023c80 <__smakebuf_r+0xc>
 8023cb8:	4b0d      	ldr	r3, [pc, #52]	; (8023cf0 <__smakebuf_r+0x7c>)
 8023cba:	62b3      	str	r3, [r6, #40]	; 0x28
 8023cbc:	89a3      	ldrh	r3, [r4, #12]
 8023cbe:	6020      	str	r0, [r4, #0]
 8023cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023cc4:	6120      	str	r0, [r4, #16]
 8023cc6:	81a3      	strh	r3, [r4, #12]
 8023cc8:	9b00      	ldr	r3, [sp, #0]
 8023cca:	6163      	str	r3, [r4, #20]
 8023ccc:	9b01      	ldr	r3, [sp, #4]
 8023cce:	b15b      	cbz	r3, 8023ce8 <__smakebuf_r+0x74>
 8023cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023cd4:	4630      	mov	r0, r6
 8023cd6:	f000 f85d 	bl	8023d94 <_isatty_r>
 8023cda:	b128      	cbz	r0, 8023ce8 <__smakebuf_r+0x74>
 8023cdc:	89a3      	ldrh	r3, [r4, #12]
 8023cde:	f023 0303 	bic.w	r3, r3, #3
 8023ce2:	f043 0301 	orr.w	r3, r3, #1
 8023ce6:	81a3      	strh	r3, [r4, #12]
 8023ce8:	89a0      	ldrh	r0, [r4, #12]
 8023cea:	4305      	orrs	r5, r0
 8023cec:	81a5      	strh	r5, [r4, #12]
 8023cee:	e7cd      	b.n	8023c8c <__smakebuf_r+0x18>
 8023cf0:	08023a81 	.word	0x08023a81

08023cf4 <memchr>:
 8023cf4:	b2c9      	uxtb	r1, r1
 8023cf6:	4402      	add	r2, r0
 8023cf8:	b510      	push	{r4, lr}
 8023cfa:	4290      	cmp	r0, r2
 8023cfc:	4603      	mov	r3, r0
 8023cfe:	d101      	bne.n	8023d04 <memchr+0x10>
 8023d00:	2300      	movs	r3, #0
 8023d02:	e003      	b.n	8023d0c <memchr+0x18>
 8023d04:	781c      	ldrb	r4, [r3, #0]
 8023d06:	3001      	adds	r0, #1
 8023d08:	428c      	cmp	r4, r1
 8023d0a:	d1f6      	bne.n	8023cfa <memchr+0x6>
 8023d0c:	4618      	mov	r0, r3
 8023d0e:	bd10      	pop	{r4, pc}

08023d10 <_realloc_r>:
 8023d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023d14:	4680      	mov	r8, r0
 8023d16:	4614      	mov	r4, r2
 8023d18:	460e      	mov	r6, r1
 8023d1a:	b921      	cbnz	r1, 8023d26 <_realloc_r+0x16>
 8023d1c:	4611      	mov	r1, r2
 8023d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023d22:	f7fe bb8f 	b.w	8022444 <_malloc_r>
 8023d26:	b92a      	cbnz	r2, 8023d34 <_realloc_r+0x24>
 8023d28:	4625      	mov	r5, r4
 8023d2a:	f7fe fb1f 	bl	802236c <_free_r>
 8023d2e:	4628      	mov	r0, r5
 8023d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023d34:	f000 f83e 	bl	8023db4 <_malloc_usable_size_r>
 8023d38:	4284      	cmp	r4, r0
 8023d3a:	4607      	mov	r7, r0
 8023d3c:	d802      	bhi.n	8023d44 <_realloc_r+0x34>
 8023d3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8023d42:	d812      	bhi.n	8023d6a <_realloc_r+0x5a>
 8023d44:	4621      	mov	r1, r4
 8023d46:	4640      	mov	r0, r8
 8023d48:	f7fe fb7c 	bl	8022444 <_malloc_r>
 8023d4c:	4605      	mov	r5, r0
 8023d4e:	2800      	cmp	r0, #0
 8023d50:	d0ed      	beq.n	8023d2e <_realloc_r+0x1e>
 8023d52:	42bc      	cmp	r4, r7
 8023d54:	4622      	mov	r2, r4
 8023d56:	4631      	mov	r1, r6
 8023d58:	bf28      	it	cs
 8023d5a:	463a      	movcs	r2, r7
 8023d5c:	f7fe fad6 	bl	802230c <memcpy>
 8023d60:	4631      	mov	r1, r6
 8023d62:	4640      	mov	r0, r8
 8023d64:	f7fe fb02 	bl	802236c <_free_r>
 8023d68:	e7e1      	b.n	8023d2e <_realloc_r+0x1e>
 8023d6a:	4635      	mov	r5, r6
 8023d6c:	e7df      	b.n	8023d2e <_realloc_r+0x1e>
	...

08023d70 <_fstat_r>:
 8023d70:	b538      	push	{r3, r4, r5, lr}
 8023d72:	2300      	movs	r3, #0
 8023d74:	4d06      	ldr	r5, [pc, #24]	; (8023d90 <_fstat_r+0x20>)
 8023d76:	4604      	mov	r4, r0
 8023d78:	4608      	mov	r0, r1
 8023d7a:	4611      	mov	r1, r2
 8023d7c:	602b      	str	r3, [r5, #0]
 8023d7e:	f7ef fa92 	bl	80132a6 <_fstat>
 8023d82:	1c43      	adds	r3, r0, #1
 8023d84:	d102      	bne.n	8023d8c <_fstat_r+0x1c>
 8023d86:	682b      	ldr	r3, [r5, #0]
 8023d88:	b103      	cbz	r3, 8023d8c <_fstat_r+0x1c>
 8023d8a:	6023      	str	r3, [r4, #0]
 8023d8c:	bd38      	pop	{r3, r4, r5, pc}
 8023d8e:	bf00      	nop
 8023d90:	20003d20 	.word	0x20003d20

08023d94 <_isatty_r>:
 8023d94:	b538      	push	{r3, r4, r5, lr}
 8023d96:	2300      	movs	r3, #0
 8023d98:	4d05      	ldr	r5, [pc, #20]	; (8023db0 <_isatty_r+0x1c>)
 8023d9a:	4604      	mov	r4, r0
 8023d9c:	4608      	mov	r0, r1
 8023d9e:	602b      	str	r3, [r5, #0]
 8023da0:	f7ef fa91 	bl	80132c6 <_isatty>
 8023da4:	1c43      	adds	r3, r0, #1
 8023da6:	d102      	bne.n	8023dae <_isatty_r+0x1a>
 8023da8:	682b      	ldr	r3, [r5, #0]
 8023daa:	b103      	cbz	r3, 8023dae <_isatty_r+0x1a>
 8023dac:	6023      	str	r3, [r4, #0]
 8023dae:	bd38      	pop	{r3, r4, r5, pc}
 8023db0:	20003d20 	.word	0x20003d20

08023db4 <_malloc_usable_size_r>:
 8023db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023db8:	1f18      	subs	r0, r3, #4
 8023dba:	2b00      	cmp	r3, #0
 8023dbc:	bfbc      	itt	lt
 8023dbe:	580b      	ldrlt	r3, [r1, r0]
 8023dc0:	18c0      	addlt	r0, r0, r3
 8023dc2:	4770      	bx	lr

08023dc4 <_init>:
 8023dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023dc6:	bf00      	nop
 8023dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023dca:	bc08      	pop	{r3}
 8023dcc:	469e      	mov	lr, r3
 8023dce:	4770      	bx	lr

08023dd0 <_fini>:
 8023dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023dd2:	bf00      	nop
 8023dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023dd6:	bc08      	pop	{r3}
 8023dd8:	469e      	mov	lr, r3
 8023dda:	4770      	bx	lr
