
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da4c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  0800dc4c  0800dc4c  0001dc4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de84  0800de84  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800de84  0800de84  0001de84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de8c  0800de8c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de8c  0800de8c  0001de8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de90  0800de90  0001de90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800de94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003724  20000064  0800def8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003788  0800def8  00023788  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031771  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e55  00000000  00000000  0005184e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a30  00000000  00000000  000576a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000020bf  00000000  00000000  0005a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032628  00000000  00000000  0005c197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031acb  00000000  00000000  0008e7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001458a0  00000000  00000000  000c028a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bbd0  00000000  00000000  00205b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  002116fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000064 	.word	0x20000064
 800021c:	00000000 	.word	0x00000000
 8000220:	0800dc34 	.word	0x0800dc34

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000068 	.word	0x20000068
 800023c:	0800dc34 	.word	0x0800dc34

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b982 	b.w	8000580 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000298:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800029a:	460d      	mov	r5, r1
 800029c:	4604      	mov	r4, r0
 800029e:	460f      	mov	r7, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d146      	bne.n	8000332 <__udivmoddi4+0x9e>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4694      	mov	ip, r2
 80002a8:	d95e      	bls.n	8000368 <__udivmoddi4+0xd4>
 80002aa:	fab2 f382 	clz	r3, r2
 80002ae:	b143      	cbz	r3, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002b4:	f1c3 0220 	rsb	r2, r3, #32
 80002b8:	409f      	lsls	r7, r3
 80002ba:	409c      	lsls	r4, r3
 80002bc:	fa20 f202 	lsr.w	r2, r0, r2
 80002c0:	4317      	orrs	r7, r2
 80002c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002c6:	fa1f f58c 	uxth.w	r5, ip
 80002ca:	0c22      	lsrs	r2, r4, #16
 80002cc:	fbb7 f1fe 	udiv	r1, r7, lr
 80002d0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002d4:	fb01 f005 	mul.w	r0, r1, r5
 80002d8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002dc:	4290      	cmp	r0, r2
 80002de:	d908      	bls.n	80002f2 <__udivmoddi4+0x5e>
 80002e0:	eb1c 0202 	adds.w	r2, ip, r2
 80002e4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002e8:	d202      	bcs.n	80002f0 <__udivmoddi4+0x5c>
 80002ea:	4290      	cmp	r0, r2
 80002ec:	f200 8134 	bhi.w	8000558 <__udivmoddi4+0x2c4>
 80002f0:	4639      	mov	r1, r7
 80002f2:	1a12      	subs	r2, r2, r0
 80002f4:	b2a4      	uxth	r4, r4
 80002f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002fe:	fb00 f505 	mul.w	r5, r0, r5
 8000302:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000306:	42a5      	cmp	r5, r4
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x88>
 800030a:	eb1c 0404 	adds.w	r4, ip, r4
 800030e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x86>
 8000314:	42a5      	cmp	r5, r4
 8000316:	f200 8119 	bhi.w	800054c <__udivmoddi4+0x2b8>
 800031a:	4610      	mov	r0, r2
 800031c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000320:	1b64      	subs	r4, r4, r5
 8000322:	2100      	movs	r1, #0
 8000324:	b11e      	cbz	r6, 800032e <__udivmoddi4+0x9a>
 8000326:	40dc      	lsrs	r4, r3
 8000328:	2300      	movs	r3, #0
 800032a:	e9c6 4300 	strd	r4, r3, [r6]
 800032e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000332:	428b      	cmp	r3, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0xb4>
 8000336:	2e00      	cmp	r6, #0
 8000338:	f000 80fc 	beq.w	8000534 <__udivmoddi4+0x2a0>
 800033c:	2100      	movs	r1, #0
 800033e:	e9c6 0500 	strd	r0, r5, [r6]
 8000342:	4608      	mov	r0, r1
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	fab3 f183 	clz	r1, r3
 800034c:	2900      	cmp	r1, #0
 800034e:	d14c      	bne.n	80003ea <__udivmoddi4+0x156>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f0c0 80f2 	bcc.w	800053a <__udivmoddi4+0x2a6>
 8000356:	4282      	cmp	r2, r0
 8000358:	f240 80ef 	bls.w	800053a <__udivmoddi4+0x2a6>
 800035c:	4608      	mov	r0, r1
 800035e:	2e00      	cmp	r6, #0
 8000360:	d0e5      	beq.n	800032e <__udivmoddi4+0x9a>
 8000362:	e9c6 4700 	strd	r4, r7, [r6]
 8000366:	e7e2      	b.n	800032e <__udivmoddi4+0x9a>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xd8>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f382 	clz	r3, r2
 8000370:	2b00      	cmp	r3, #0
 8000372:	f040 809f 	bne.w	80004b4 <__udivmoddi4+0x220>
 8000376:	1a8a      	subs	r2, r1, r2
 8000378:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800037c:	fa1f f78c 	uxth.w	r7, ip
 8000380:	2101      	movs	r1, #1
 8000382:	fbb2 f5fe 	udiv	r5, r2, lr
 8000386:	fb0e 2015 	mls	r0, lr, r5, r2
 800038a:	0c22      	lsrs	r2, r4, #16
 800038c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000390:	fb07 f005 	mul.w	r0, r7, r5
 8000394:	4290      	cmp	r0, r2
 8000396:	d90f      	bls.n	80003b8 <__udivmoddi4+0x124>
 8000398:	eb1c 0202 	adds.w	r2, ip, r2
 800039c:	f105 38ff 	add.w	r8, r5, #4294967295
 80003a0:	bf2c      	ite	cs
 80003a2:	f04f 0901 	movcs.w	r9, #1
 80003a6:	f04f 0900 	movcc.w	r9, #0
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d903      	bls.n	80003b6 <__udivmoddi4+0x122>
 80003ae:	f1b9 0f00 	cmp.w	r9, #0
 80003b2:	f000 80ce 	beq.w	8000552 <__udivmoddi4+0x2be>
 80003b6:	4645      	mov	r5, r8
 80003b8:	1a12      	subs	r2, r2, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb2 f0fe 	udiv	r0, r2, lr
 80003c0:	fb0e 2210 	mls	r2, lr, r0, r2
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003cc:	42a7      	cmp	r7, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x14e>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x14c>
 80003da:	42a7      	cmp	r7, r4
 80003dc:	f200 80b3 	bhi.w	8000546 <__udivmoddi4+0x2b2>
 80003e0:	4610      	mov	r0, r2
 80003e2:	1be4      	subs	r4, r4, r7
 80003e4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003e8:	e79c      	b.n	8000324 <__udivmoddi4+0x90>
 80003ea:	f1c1 0420 	rsb	r4, r1, #32
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003f4:	fa22 f704 	lsr.w	r7, r2, r4
 80003f8:	40e5      	lsrs	r5, r4
 80003fa:	408a      	lsls	r2, r1
 80003fc:	431f      	orrs	r7, r3
 80003fe:	fa20 f304 	lsr.w	r3, r0, r4
 8000402:	4088      	lsls	r0, r1
 8000404:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb5 fef8 	udiv	lr, r5, r8
 8000418:	fb08 551e 	mls	r5, r8, lr, r5
 800041c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000420:	fb0e f90c 	mul.w	r9, lr, ip
 8000424:	45a9      	cmp	r9, r5
 8000426:	d90e      	bls.n	8000446 <__udivmoddi4+0x1b2>
 8000428:	197d      	adds	r5, r7, r5
 800042a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042e:	bf2c      	ite	cs
 8000430:	f04f 0b01 	movcs.w	fp, #1
 8000434:	f04f 0b00 	movcc.w	fp, #0
 8000438:	45a9      	cmp	r9, r5
 800043a:	d903      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800043c:	f1bb 0f00 	cmp.w	fp, #0
 8000440:	f000 808d 	beq.w	800055e <__udivmoddi4+0x2ca>
 8000444:	46d6      	mov	lr, sl
 8000446:	eba5 0509 	sub.w	r5, r5, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000452:	fb08 5513 	mls	r5, r8, r3, r5
 8000456:	fb03 fc0c 	mul.w	ip, r3, ip
 800045a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800045e:	45ac      	cmp	ip, r5
 8000460:	d906      	bls.n	8000470 <__udivmoddi4+0x1dc>
 8000462:	197d      	adds	r5, r7, r5
 8000464:	f103 38ff 	add.w	r8, r3, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x1da>
 800046a:	45ac      	cmp	ip, r5
 800046c:	d87e      	bhi.n	800056c <__udivmoddi4+0x2d8>
 800046e:	4643      	mov	r3, r8
 8000470:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000474:	eba5 050c 	sub.w	r5, r5, ip
 8000478:	fba3 9802 	umull	r9, r8, r3, r2
 800047c:	4545      	cmp	r5, r8
 800047e:	46ce      	mov	lr, r9
 8000480:	46c4      	mov	ip, r8
 8000482:	d302      	bcc.n	800048a <__udivmoddi4+0x1f6>
 8000484:	d106      	bne.n	8000494 <__udivmoddi4+0x200>
 8000486:	4548      	cmp	r0, r9
 8000488:	d204      	bcs.n	8000494 <__udivmoddi4+0x200>
 800048a:	3b01      	subs	r3, #1
 800048c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000490:	eb68 0c07 	sbc.w	ip, r8, r7
 8000494:	2e00      	cmp	r6, #0
 8000496:	d06f      	beq.n	8000578 <__udivmoddi4+0x2e4>
 8000498:	ebb0 020e 	subs.w	r2, r0, lr
 800049c:	eb65 050c 	sbc.w	r5, r5, ip
 80004a0:	40ca      	lsrs	r2, r1
 80004a2:	fa05 f404 	lsl.w	r4, r5, r4
 80004a6:	40cd      	lsrs	r5, r1
 80004a8:	4618      	mov	r0, r3
 80004aa:	4314      	orrs	r4, r2
 80004ac:	2100      	movs	r1, #0
 80004ae:	e9c6 4500 	strd	r4, r5, [r6]
 80004b2:	e73c      	b.n	800032e <__udivmoddi4+0x9a>
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	f1c3 0220 	rsb	r2, r3, #32
 80004bc:	4099      	lsls	r1, r3
 80004be:	409c      	lsls	r4, r3
 80004c0:	40d5      	lsrs	r5, r2
 80004c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004c6:	fa20 f202 	lsr.w	r2, r0, r2
 80004ca:	fa1f f78c 	uxth.w	r7, ip
 80004ce:	fbb5 f0fe 	udiv	r0, r5, lr
 80004d2:	430a      	orrs	r2, r1
 80004d4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004d8:	0c11      	lsrs	r1, r2, #16
 80004da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004de:	fb00 f507 	mul.w	r5, r0, r7
 80004e2:	428d      	cmp	r5, r1
 80004e4:	d90e      	bls.n	8000504 <__udivmoddi4+0x270>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	bf2c      	ite	cs
 80004f0:	f04f 0901 	movcs.w	r9, #1
 80004f4:	f04f 0900 	movcc.w	r9, #0
 80004f8:	428d      	cmp	r5, r1
 80004fa:	d902      	bls.n	8000502 <__udivmoddi4+0x26e>
 80004fc:	f1b9 0f00 	cmp.w	r9, #0
 8000500:	d031      	beq.n	8000566 <__udivmoddi4+0x2d2>
 8000502:	4640      	mov	r0, r8
 8000504:	1b49      	subs	r1, r1, r5
 8000506:	b292      	uxth	r2, r2
 8000508:	fbb1 f5fe 	udiv	r5, r1, lr
 800050c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000510:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000514:	fb05 f107 	mul.w	r1, r5, r7
 8000518:	4291      	cmp	r1, r2
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0x298>
 800051c:	eb1c 0202 	adds.w	r2, ip, r2
 8000520:	f105 38ff 	add.w	r8, r5, #4294967295
 8000524:	d201      	bcs.n	800052a <__udivmoddi4+0x296>
 8000526:	4291      	cmp	r1, r2
 8000528:	d823      	bhi.n	8000572 <__udivmoddi4+0x2de>
 800052a:	4645      	mov	r5, r8
 800052c:	1a52      	subs	r2, r2, r1
 800052e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000532:	e726      	b.n	8000382 <__udivmoddi4+0xee>
 8000534:	4631      	mov	r1, r6
 8000536:	4630      	mov	r0, r6
 8000538:	e6f9      	b.n	800032e <__udivmoddi4+0x9a>
 800053a:	1a84      	subs	r4, r0, r2
 800053c:	eb65 0203 	sbc.w	r2, r5, r3
 8000540:	2001      	movs	r0, #1
 8000542:	4617      	mov	r7, r2
 8000544:	e70b      	b.n	800035e <__udivmoddi4+0xca>
 8000546:	4464      	add	r4, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74a      	b.n	80003e2 <__udivmoddi4+0x14e>
 800054c:	4464      	add	r4, ip
 800054e:	3802      	subs	r0, #2
 8000550:	e6e4      	b.n	800031c <__udivmoddi4+0x88>
 8000552:	3d02      	subs	r5, #2
 8000554:	4462      	add	r2, ip
 8000556:	e72f      	b.n	80003b8 <__udivmoddi4+0x124>
 8000558:	3902      	subs	r1, #2
 800055a:	4462      	add	r2, ip
 800055c:	e6c9      	b.n	80002f2 <__udivmoddi4+0x5e>
 800055e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000562:	443d      	add	r5, r7
 8000564:	e76f      	b.n	8000446 <__udivmoddi4+0x1b2>
 8000566:	3802      	subs	r0, #2
 8000568:	4461      	add	r1, ip
 800056a:	e7cb      	b.n	8000504 <__udivmoddi4+0x270>
 800056c:	3b02      	subs	r3, #2
 800056e:	443d      	add	r5, r7
 8000570:	e77e      	b.n	8000470 <__udivmoddi4+0x1dc>
 8000572:	3d02      	subs	r5, #2
 8000574:	4462      	add	r2, ip
 8000576:	e7d9      	b.n	800052c <__udivmoddi4+0x298>
 8000578:	4618      	mov	r0, r3
 800057a:	4631      	mov	r1, r6
 800057c:	e6d7      	b.n	800032e <__udivmoddi4+0x9a>
 800057e:	bf00      	nop

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_ADC_ConvCpltCallback>:
extern ADC_HandleTypeDef hadc1;
analog_signals_s adc_values = {0u};
uint8_t channel_idx = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 800058c:	480e      	ldr	r0, [pc, #56]	; (80005c8 <HAL_ADC_ConvCpltCallback+0x44>)
 800058e:	f002 fbcf 	bl	8002d30 <HAL_ADC_GetValue>
 8000592:	60f8      	str	r0, [r7, #12]
	adc_values.values_raw[channel_idx] = adc_value;
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <HAL_ADC_ConvCpltCallback+0x48>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	b299      	uxth	r1, r3
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80005a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	channel_idx++;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <HAL_ADC_ConvCpltCallback+0x48>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <HAL_ADC_ConvCpltCallback+0x48>)
 80005ae:	701a      	strb	r2, [r3, #0]
	if(channel_idx == 8)
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_ADC_ConvCpltCallback+0x48>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b08      	cmp	r3, #8
 80005b6:	d102      	bne.n	80005be <HAL_ADC_ConvCpltCallback+0x3a>
	{
		channel_idx = 0;
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <HAL_ADC_ConvCpltCallback+0x48>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
	}

	//TODO: enable run in  analog signal dependent tasks
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000ac 	.word	0x200000ac
 80005cc:	20000090 	.word	0x20000090
 80005d0:	20000080 	.word	0x20000080

080005d4 <Radio_Init>:
bool flood_active = false;
uint8_t flood_counter = 0;
char pirate_from, pirate_to, pirate_next;
int pirate_percentage = 0;
void Radio_Init()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT (&huart4, radio_rxBuffer, 12);
 80005d8:	220c      	movs	r2, #12
 80005da:	4903      	ldr	r1, [pc, #12]	; (80005e8 <Radio_Init+0x14>)
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <Radio_Init+0x18>)
 80005de:	f007 ff55 	bl	800848c <HAL_UART_Receive_IT>

}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000094 	.word	0x20000094
 80005ec:	200001fc 	.word	0x200001fc

080005f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	6078      	str	r0, [r7, #4]
	uint8_t i, length;
    HAL_UART_Receive_IT(&huart4, radio_rxBuffer, 12);
 80005f8:	220c      	movs	r2, #12
 80005fa:	4922      	ldr	r1, [pc, #136]	; (8000684 <HAL_UART_RxCpltCallback+0x94>)
 80005fc:	4822      	ldr	r0, [pc, #136]	; (8000688 <HAL_UART_RxCpltCallback+0x98>)
 80005fe:	f007 ff45 	bl	800848c <HAL_UART_Receive_IT>
    // Check to see where is the termination character to determine what type of message is received
    for(i = 0; i < 12; ++i)
 8000602:	2300      	movs	r3, #0
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	e009      	b.n	800061c <HAL_UART_RxCpltCallback+0x2c>
    {
    	if(radio_rxBuffer[i] == '\r')
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	4a1e      	ldr	r2, [pc, #120]	; (8000684 <HAL_UART_RxCpltCallback+0x94>)
 800060c:	5cd3      	ldrb	r3, [r2, r3]
 800060e:	2b0d      	cmp	r3, #13
 8000610:	d101      	bne.n	8000616 <HAL_UART_RxCpltCallback+0x26>
    	{
    		length = i;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < 12; ++i)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	3301      	adds	r3, #1
 800061a:	73fb      	strb	r3, [r7, #15]
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	2b0b      	cmp	r3, #11
 8000620:	d9f2      	bls.n	8000608 <HAL_UART_RxCpltCallback+0x18>
    	}
    }
    // Labirinth countdown message received
    if(length == 1)
 8000622:	7bbb      	ldrb	r3, [r7, #14]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d103      	bne.n	8000630 <HAL_UART_RxCpltCallback+0x40>
    {
    	countdown_value = radio_rxBuffer[0];
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <HAL_UART_RxCpltCallback+0x94>)
 800062a:	781a      	ldrb	r2, [r3, #0]
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <HAL_UART_RxCpltCallback+0x9c>)
 800062e:	701a      	strb	r2, [r3, #0]
    }
    if(length == 6)
 8000630:	7bbb      	ldrb	r3, [r7, #14]
 8000632:	2b06      	cmp	r3, #6
 8000634:	d115      	bne.n	8000662 <HAL_UART_RxCpltCallback+0x72>
    {
    	//FLOOD message received
    	if(!strcmp("FLOOD!\r", radio_rxBuffer))
 8000636:	4913      	ldr	r1, [pc, #76]	; (8000684 <HAL_UART_RxCpltCallback+0x94>)
 8000638:	4815      	ldr	r0, [pc, #84]	; (8000690 <HAL_UART_RxCpltCallback+0xa0>)
 800063a:	f7ff fe01 	bl	8000240 <strcmp>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d103      	bne.n	800064c <HAL_UART_RxCpltCallback+0x5c>
    	{
    		flood_active = true;
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <HAL_UART_RxCpltCallback+0xa4>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
 800064a:	e010      	b.n	800066e <HAL_UART_RxCpltCallback+0x7e>
    	}
    	else
    	{
    		sscanf(radio_rxBuffer, "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_UART_RxCpltCallback+0xa8>)
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_UART_RxCpltCallback+0xac>)
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_UART_RxCpltCallback+0xb0>)
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <HAL_UART_RxCpltCallback+0xb4>)
 8000658:	4913      	ldr	r1, [pc, #76]	; (80006a8 <HAL_UART_RxCpltCallback+0xb8>)
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <HAL_UART_RxCpltCallback+0x94>)
 800065c:	f00c fca6 	bl	800cfac <siscanf>
 8000660:	e005      	b.n	800066e <HAL_UART_RxCpltCallback+0x7e>
    	}
    }

    else
    {
    	flood_counter++;
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_UART_RxCpltCallback+0xbc>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <HAL_UART_RxCpltCallback+0xbc>)
 800066c:	701a      	strb	r2, [r3, #0]
    }

    if(flood_counter > 10)
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <HAL_UART_RxCpltCallback+0xbc>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b0a      	cmp	r3, #10
 8000674:	d902      	bls.n	800067c <HAL_UART_RxCpltCallback+0x8c>
    {
    	flood_active = false;
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <HAL_UART_RxCpltCallback+0xa4>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
    }

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000094 	.word	0x20000094
 8000688:	200001fc 	.word	0x200001fc
 800068c:	20000000 	.word	0x20000000
 8000690:	0800dc4c 	.word	0x0800dc4c
 8000694:	200000a0 	.word	0x200000a0
 8000698:	200000a8 	.word	0x200000a8
 800069c:	200000a4 	.word	0x200000a4
 80006a0:	200000a3 	.word	0x200000a3
 80006a4:	200000a2 	.word	0x200000a2
 80006a8:	0800dc54 	.word	0x0800dc54
 80006ac:	200000a1 	.word	0x200000a1

080006b0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006bc:	4907      	ldr	r1, [pc, #28]	; (80006dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4013      	ands	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ce:	68fb      	ldr	r3, [r7, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000

080006e0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <LL_APB1_GRP2_EnableClock+0x2c>)
 80006ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80006ec:	4907      	ldr	r1, [pc, #28]	; (800070c <LL_APB1_GRP2_EnableClock+0x2c>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <LL_APB1_GRP2_EnableClock+0x2c>)
 80006f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4013      	ands	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006fe:	68fb      	ldr	r3, [r7, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	40021000 	.word	0x40021000

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f001 fe27 	bl	8002366 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f850 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f000 fe2a 	bl	8001374 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000720:	f000 f9de 	bl	8000ae0 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 8000724:	f000 f9f0 	bl	8000b08 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000728:	f000 fad4 	bl	8000cd4 <MX_RTC_Init>
  MX_UCPD1_Init();
 800072c:	f000 fdc4 	bl	80012b8 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000730:	f000 fdf8 	bl	8001324 <MX_USB_PCD_Init>
  MX_UART4_Init();
 8000734:	f000 fa36 	bl	8000ba4 <MX_UART4_Init>
  MX_SPI1_Init();
 8000738:	f000 fb16 	bl	8000d68 <MX_SPI1_Init>
  MX_SPI2_Init();
 800073c:	f000 fb52 	bl	8000de4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000740:	f000 fb8e 	bl	8000e60 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000744:	f000 fbca 	bl	8000edc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000748:	f000 fca8 	bl	800109c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800074c:	f000 fa76 	bl	8000c3c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000750:	f000 f896 	bl	8000880 <MX_ADC1_Init>
  MX_TIM5_Init();
 8000754:	f000 fcf8 	bl	8001148 <MX_TIM5_Init>
  MX_I2C1_Init();
 8000758:	f000 f982 	bl	8000a60 <MX_I2C1_Init>
  MX_TIM6_Init();
 800075c:	f000 fd76 	bl	800124c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  Radio_Init();
 8000760:	f7ff ff38 	bl	80005d4 <Radio_Init>
  HAL_ADC_Start_IT(&hadc1);
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <main+0x8c>)
 8000766:	f002 f9b5 	bl	8002ad4 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800076a:	2100      	movs	r1, #0
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <main+0x90>)
 800076e:	f006 f9d3 	bl	8006b18 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000772:	f00a f90f 	bl	800a994 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000776:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <main+0x94>)
 8000778:	2100      	movs	r1, #0
 800077a:	480b      	ldr	r0, [pc, #44]	; (80007a8 <main+0x98>)
 800077c:	f00a f954 	bl	800aa28 <osThreadNew>
 8000780:	4603      	mov	r3, r0
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <main+0x9c>)
 8000784:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  testTaskHandle = osThreadNew(TestTask, NULL, &testTask_attributes);
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <main+0xa0>)
 8000788:	2100      	movs	r1, #0
 800078a:	480a      	ldr	r0, [pc, #40]	; (80007b4 <main+0xa4>)
 800078c:	f00a f94c 	bl	800aa28 <osThreadNew>
 8000790:	4603      	mov	r3, r0
 8000792:	4a09      	ldr	r2, [pc, #36]	; (80007b8 <main+0xa8>)
 8000794:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000796:	f00a f921 	bl	800a9dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079a:	e7fe      	b.n	800079a <main+0x8a>
 800079c:	200000ac 	.word	0x200000ac
 80007a0:	20000478 	.word	0x20000478
 80007a4:	0800dc9c 	.word	0x0800dc9c
 80007a8:	080015f5 	.word	0x080015f5
 80007ac:	2000089c 	.word	0x2000089c
 80007b0:	0800dcc0 	.word	0x0800dcc0
 80007b4:	080015d9 	.word	0x080015d9
 80007b8:	200008a0 	.word	0x200008a0

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b098      	sub	sp, #96	; 0x60
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	2248      	movs	r2, #72	; 0x48
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f00c fc1c 	bl	800d008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80007de:	2000      	movs	r0, #0
 80007e0:	f004 f902 	bl	80049e8 <HAL_PWREx_ControlVoltageScaling>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x32>
  {
    Error_Handler();
 80007ea:	f000 ff22 	bl	8001632 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ee:	f004 f8dd 	bl	80049ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <SystemClock_Config+0xc0>)
 80007f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007f8:	4a20      	ldr	r2, [pc, #128]	; (800087c <SystemClock_Config+0xc0>)
 80007fa:	f023 0318 	bic.w	r3, r3, #24
 80007fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8000802:	2334      	movs	r3, #52	; 0x34
 8000804:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000806:	2381      	movs	r3, #129	; 0x81
 8000808:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800080a:	2301      	movs	r3, #1
 800080c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800080e:	2301      	movs	r3, #1
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000812:	2300      	movs	r3, #0
 8000814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000816:	2360      	movs	r3, #96	; 0x60
 8000818:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800081e:	2301      	movs	r3, #1
 8000820:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000826:	2337      	movs	r3, #55	; 0x37
 8000828:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800082a:	2307      	movs	r3, #7
 800082c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0318 	add.w	r3, r7, #24
 800083a:	4618      	mov	r0, r3
 800083c:	f004 f964 	bl	8004b08 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000846:	f000 fef4 	bl	8001632 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2303      	movs	r3, #3
 8000850:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2105      	movs	r1, #5
 8000862:	4618      	mov	r0, r3
 8000864:	f004 fe26 	bl	80054b4 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800086e:	f000 fee0 	bl	8001632 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3760      	adds	r7, #96	; 0x60
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
 80008a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008a2:	4b65      	ldr	r3, [pc, #404]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80008a4:	4a65      	ldr	r2, [pc, #404]	; (8000a3c <MX_ADC1_Init+0x1bc>)
 80008a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80008a8:	4b63      	ldr	r3, [pc, #396]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80008aa:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 80008ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008b0:	4b61      	ldr	r3, [pc, #388]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b6:	4b60      	ldr	r3, [pc, #384]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008bc:	4b5e      	ldr	r3, [pc, #376]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80008be:	2201      	movs	r2, #1
 80008c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c2:	4b5d      	ldr	r3, [pc, #372]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80008c4:	2204      	movs	r2, #4
 80008c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008c8:	4b5b      	ldr	r3, [pc, #364]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ce:	4b5a      	ldr	r3, [pc, #360]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 80008d4:	4b58      	ldr	r3, [pc, #352]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80008d6:	2208      	movs	r2, #8
 80008d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008da:	4b57      	ldr	r3, [pc, #348]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e2:	4b55      	ldr	r3, [pc, #340]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e8:	4b53      	ldr	r3, [pc, #332]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ee:	4b52      	ldr	r3, [pc, #328]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008f6:	4b50      	ldr	r3, [pc, #320]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80008f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008fe:	4b4e      	ldr	r3, [pc, #312]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000906:	484c      	ldr	r0, [pc, #304]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 8000908:	f001 ff98 	bl	800283c <HAL_ADC_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000912:	f000 fe8e 	bl	8001632 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4845      	ldr	r0, [pc, #276]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 8000922:	f003 f9f7 	bl	8003d14 <HAL_ADCEx_MultiModeConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800092c:	f000 fe81 	bl	8001632 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000930:	4b43      	ldr	r3, [pc, #268]	; (8000a40 <MX_ADC1_Init+0x1c0>)
 8000932:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000934:	2306      	movs	r3, #6
 8000936:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000938:	2305      	movs	r3, #5
 800093a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800093c:	237f      	movs	r3, #127	; 0x7f
 800093e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000940:	2304      	movs	r3, #4
 8000942:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	4619      	mov	r1, r3
 800094c:	483a      	ldr	r0, [pc, #232]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 800094e:	f002 fc2b 	bl	80031a8 <HAL_ADC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000958:	f000 fe6b 	bl	8001632 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800095c:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <MX_ADC1_Init+0x1c4>)
 800095e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000960:	230c      	movs	r3, #12
 8000962:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	4619      	mov	r1, r3
 8000968:	4833      	ldr	r0, [pc, #204]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 800096a:	f002 fc1d 	bl	80031a8 <HAL_ADC_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000974:	f000 fe5d 	bl	8001632 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000978:	4b33      	ldr	r3, [pc, #204]	; (8000a48 <MX_ADC1_Init+0x1c8>)
 800097a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800097c:	2312      	movs	r3, #18
 800097e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	4619      	mov	r1, r3
 8000984:	482c      	ldr	r0, [pc, #176]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 8000986:	f002 fc0f 	bl	80031a8 <HAL_ADC_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000990:	f000 fe4f 	bl	8001632 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <MX_ADC1_Init+0x1cc>)
 8000996:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000998:	2318      	movs	r3, #24
 800099a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	4619      	mov	r1, r3
 80009a0:	4825      	ldr	r0, [pc, #148]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80009a2:	f002 fc01 	bl	80031a8 <HAL_ADC_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 80009ac:	f000 fe41 	bl	8001632 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009b0:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <MX_ADC1_Init+0x1d0>)
 80009b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	481e      	ldr	r0, [pc, #120]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80009c0:	f002 fbf2 	bl	80031a8 <HAL_ADC_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80009ca:	f000 fe32 	bl	8001632 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_ADC1_Init+0x1d4>)
 80009d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009d2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80009d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	4619      	mov	r1, r3
 80009dc:	4816      	ldr	r0, [pc, #88]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80009de:	f002 fbe3 	bl	80031a8 <HAL_ADC_ConfigChannel>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC1_Init+0x16c>
  {
    Error_Handler();
 80009e8:	f000 fe23 	bl	8001632 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_ADC1_Init+0x1d8>)
 80009ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009f0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80009f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	480f      	ldr	r0, [pc, #60]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 80009fc:	f002 fbd4 	bl	80031a8 <HAL_ADC_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8000a06:	f000 fe14 	bl	8001632 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_ADC1_Init+0x1dc>)
 8000a0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a0e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000a12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	4619      	mov	r1, r3
 8000a18:	4807      	ldr	r0, [pc, #28]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 8000a1a:	f002 fbc5 	bl	80031a8 <HAL_ADC_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8000a24:	f000 fe05 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000a28:	217f      	movs	r1, #127	; 0x7f
 8000a2a:	4803      	ldr	r0, [pc, #12]	; (8000a38 <MX_ADC1_Init+0x1b8>)
 8000a2c:	f003 f8de 	bl	8003bec <HAL_ADCEx_Calibration_Start>
  /* USER CODE END ADC1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000ac 	.word	0x200000ac
 8000a3c:	42028000 	.word	0x42028000
 8000a40:	04300002 	.word	0x04300002
 8000a44:	08600004 	.word	0x08600004
 8000a48:	0c900008 	.word	0x0c900008
 8000a4c:	1d500080 	.word	0x1d500080
 8000a50:	21800100 	.word	0x21800100
 8000a54:	25b00200 	.word	0x25b00200
 8000a58:	32601000 	.word	0x32601000
 8000a5c:	43210000 	.word	0x43210000

08000a60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <MX_I2C1_Init+0x78>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A21D58;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <MX_I2C1_Init+0x7c>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a9a:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000a9c:	f003 fd2c 	bl	80044f8 <HAL_I2C_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aa6:	f000 fdc4 	bl	8001632 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000aae:	f003 fdb2 	bl	8004616 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ab8:	f000 fdbb 	bl	8001632 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000abc:	2100      	movs	r1, #0
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_I2C1_Init+0x74>)
 8000ac0:	f003 fdf4 	bl	80046ac <HAL_I2CEx_ConfigDigitalFilter>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aca:	f000 fdb2 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000114 	.word	0x20000114
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	10a21d58 	.word	0x10a21d58

08000ae0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f003 fe2d 	bl	8004744 <HAL_ICACHE_ConfigAssociativityMode>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000af0:	f000 fd9f 	bl	8001632 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000af4:	f003 fe46 	bl	8004784 <HAL_ICACHE_Enable>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000afe:	f000 fd98 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b0e:	4a23      	ldr	r2, [pc, #140]	; (8000b9c <MX_LPUART1_UART_Init+0x94>)
 8000b10:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b14:	4a22      	ldr	r2, [pc, #136]	; (8000ba0 <MX_LPUART1_UART_Init+0x98>)
 8000b16:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b2c:	220c      	movs	r2, #12
 8000b2e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b4e:	4812      	ldr	r0, [pc, #72]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b50:	f007 fc4c 	bl	80083ec <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000b5a:	f000 fd6a 	bl	8001632 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b62:	f009 fc14 	bl	800a38e <HAL_UARTEx_SetTxFifoThreshold>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000b6c:	f000 fd61 	bl	8001632 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b70:	2100      	movs	r1, #0
 8000b72:	4809      	ldr	r0, [pc, #36]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b74:	f009 fc49 	bl	800a40a <HAL_UARTEx_SetRxFifoThreshold>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000b7e:	f000 fd58 	bl	8001632 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_LPUART1_UART_Init+0x90>)
 8000b84:	f009 fbca 	bl	800a31c <HAL_UARTEx_DisableFifoMode>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000b8e:	f000 fd50 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000168 	.word	0x20000168
 8000b9c:	40008000 	.word	0x40008000
 8000ba0:	00033324 	.word	0x00033324

08000ba4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_UART4_Init+0x90>)
 8000baa:	4a23      	ldr	r2, [pc, #140]	; (8000c38 <MX_UART4_Init+0x94>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_UART4_Init+0x90>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_UART4_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <MX_UART4_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_UART4_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_UART4_Init+0x90>)
 8000bca:	2204      	movs	r2, #4
 8000bcc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_UART4_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_UART4_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_UART4_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_UART4_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_UART4_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bec:	4811      	ldr	r0, [pc, #68]	; (8000c34 <MX_UART4_Init+0x90>)
 8000bee:	f007 fbfd 	bl	80083ec <HAL_UART_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000bf8:	f000 fd1b 	bl	8001632 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <MX_UART4_Init+0x90>)
 8000c00:	f009 fbc5 	bl	800a38e <HAL_UARTEx_SetTxFifoThreshold>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000c0a:	f000 fd12 	bl	8001632 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <MX_UART4_Init+0x90>)
 8000c12:	f009 fbfa 	bl	800a40a <HAL_UARTEx_SetRxFifoThreshold>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000c1c:	f000 fd09 	bl	8001632 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_UART4_Init+0x90>)
 8000c22:	f009 fb7b 	bl	800a31c <HAL_UARTEx_DisableFifoMode>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c2c:	f000 fd01 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200001fc 	.word	0x200001fc
 8000c38:	40004c00 	.word	0x40004c00

08000c3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c40:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <MX_USART2_UART_Init+0x90>)
 8000c42:	4a23      	ldr	r2, [pc, #140]	; (8000cd0 <MX_USART2_UART_Init+0x94>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <MX_USART2_UART_Init+0x90>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <MX_USART2_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <MX_USART2_UART_Init+0x90>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <MX_USART2_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_USART2_UART_Init+0x90>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <MX_USART2_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <MX_USART2_UART_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_USART2_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_USART2_UART_Init+0x90>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_USART2_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c84:	4811      	ldr	r0, [pc, #68]	; (8000ccc <MX_USART2_UART_Init+0x90>)
 8000c86:	f007 fbb1 	bl	80083ec <HAL_UART_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c90:	f000 fccf 	bl	8001632 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c94:	2100      	movs	r1, #0
 8000c96:	480d      	ldr	r0, [pc, #52]	; (8000ccc <MX_USART2_UART_Init+0x90>)
 8000c98:	f009 fb79 	bl	800a38e <HAL_UARTEx_SetTxFifoThreshold>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ca2:	f000 fcc6 	bl	8001632 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4808      	ldr	r0, [pc, #32]	; (8000ccc <MX_USART2_UART_Init+0x90>)
 8000caa:	f009 fbae 	bl	800a40a <HAL_UARTEx_SetRxFifoThreshold>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000cb4:	f000 fcbd 	bl	8001632 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_USART2_UART_Init+0x90>)
 8000cba:	f009 fb2f 	bl	800a31c <HAL_UARTEx_DisableFifoMode>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000cc4:	f000 fcb5 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000290 	.word	0x20000290
 8000cd0:	40004400 	.word	0x40004400

08000cd4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000cda:	463b      	mov	r3, r7
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cea:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <MX_RTC_Init+0x8c>)
 8000cec:	4a1d      	ldr	r2, [pc, #116]	; (8000d64 <MX_RTC_Init+0x90>)
 8000cee:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_RTC_Init+0x8c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_RTC_Init+0x8c>)
 8000cf8:	227f      	movs	r2, #127	; 0x7f
 8000cfa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_RTC_Init+0x8c>)
 8000cfe:	22ff      	movs	r2, #255	; 0xff
 8000d00:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_RTC_Init+0x8c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_RTC_Init+0x8c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_RTC_Init+0x8c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_RTC_Init+0x8c>)
 8000d16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d1a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000d1c:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <MX_RTC_Init+0x8c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d22:	480f      	ldr	r0, [pc, #60]	; (8000d60 <MX_RTC_Init+0x8c>)
 8000d24:	f005 fbf2 	bl	800650c <HAL_RTC_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000d2e:	f000 fc80 	bl	8001632 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000d42:	463b      	mov	r3, r7
 8000d44:	4619      	mov	r1, r3
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <MX_RTC_Init+0x8c>)
 8000d48:	f005 fcee 	bl	8006728 <HAL_RTCEx_PrivilegeModeSet>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000d52:	f000 fc6e 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000324 	.word	0x20000324
 8000d64:	40002800 	.word	0x40002800

08000d68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <MX_SPI1_Init+0x78>)
 8000d70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000d74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000d82:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000d9e:	2210      	movs	r2, #16
 8000da0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000db6:	2207      	movs	r2, #7
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_SPI1_Init+0x74>)
 8000dc8:	f005 fcda 	bl	8006780 <HAL_SPI_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000dd2:	f000 fc2e 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000034c 	.word	0x2000034c
 8000de0:	40013000 	.word	0x40013000

08000de4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000dea:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <MX_SPI2_Init+0x78>)
 8000dec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000df0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000df4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000dfe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e16:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e1a:	2218      	movs	r2, #24
 8000e1c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e32:	2207      	movs	r2, #7
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e3e:	2208      	movs	r2, #8
 8000e40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_SPI2_Init+0x74>)
 8000e44:	f005 fc9c 	bl	8006780 <HAL_SPI_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 fbf0 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200003b0 	.word	0x200003b0
 8000e5c:	40003800 	.word	0x40003800

08000e60 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <MX_SPI3_Init+0x74>)
 8000e66:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <MX_SPI3_Init+0x78>)
 8000e68:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_SPI3_Init+0x74>)
 8000e6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e70:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_SPI3_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_SPI3_Init+0x74>)
 8000e7a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e7e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_SPI3_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <MX_SPI3_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_SPI3_Init+0x74>)
 8000e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e92:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_SPI3_Init+0x74>)
 8000e96:	2218      	movs	r2, #24
 8000e98:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_SPI3_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_SPI3_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_SPI3_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_SPI3_Init+0x74>)
 8000eae:	2207      	movs	r2, #7
 8000eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_SPI3_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_SPI3_Init+0x74>)
 8000eba:	2208      	movs	r2, #8
 8000ebc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_SPI3_Init+0x74>)
 8000ec0:	f005 fc5e 	bl	8006780 <HAL_SPI_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000eca:	f000 fbb2 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000414 	.word	0x20000414
 8000ed8:	40003c00 	.word	0x40003c00

08000edc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0a0      	sub	sp, #128	; 0x80
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]
 8000f0e:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2234      	movs	r2, #52	; 0x34
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f00c f86f 	bl	800d008 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f2a:	4b5a      	ldr	r3, [pc, #360]	; (8001094 <MX_TIM1_Init+0x1b8>)
 8000f2c:	4a5a      	ldr	r2, [pc, #360]	; (8001098 <MX_TIM1_Init+0x1bc>)
 8000f2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 110-1;
 8000f30:	4b58      	ldr	r3, [pc, #352]	; (8001094 <MX_TIM1_Init+0x1b8>)
 8000f32:	226d      	movs	r2, #109	; 0x6d
 8000f34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b57      	ldr	r3, [pc, #348]	; (8001094 <MX_TIM1_Init+0x1b8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000f3c:	4b55      	ldr	r3, [pc, #340]	; (8001094 <MX_TIM1_Init+0x1b8>)
 8000f3e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000f42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f44:	4b53      	ldr	r3, [pc, #332]	; (8001094 <MX_TIM1_Init+0x1b8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f4a:	4b52      	ldr	r3, [pc, #328]	; (8001094 <MX_TIM1_Init+0x1b8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f50:	4b50      	ldr	r3, [pc, #320]	; (8001094 <MX_TIM1_Init+0x1b8>)
 8000f52:	2280      	movs	r2, #128	; 0x80
 8000f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f56:	484f      	ldr	r0, [pc, #316]	; (8001094 <MX_TIM1_Init+0x1b8>)
 8000f58:	f005 fcb5 	bl	80068c6 <HAL_TIM_Base_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000f62:	f000 fb66 	bl	8001632 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6a:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f6c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f70:	4619      	mov	r1, r3
 8000f72:	4848      	ldr	r0, [pc, #288]	; (8001094 <MX_TIM1_Init+0x1b8>)
 8000f74:	f006 faac 	bl	80074d0 <HAL_TIM_ConfigClockSource>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f7e:	f000 fb58 	bl	8001632 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f82:	4844      	ldr	r0, [pc, #272]	; (8001094 <MX_TIM1_Init+0x1b8>)
 8000f84:	f005 fd66 	bl	8006a54 <HAL_TIM_PWM_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000f8e:	f000 fb50 	bl	8001632 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f92:	4840      	ldr	r0, [pc, #256]	; (8001094 <MX_TIM1_Init+0x1b8>)
 8000f94:	f005 fec6 	bl	8006d24 <HAL_TIM_IC_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000f9e:	f000 fb48 	bl	8001632 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	66bb      	str	r3, [r7, #104]	; 0x68
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4837      	ldr	r0, [pc, #220]	; (8001094 <MX_TIM1_Init+0x1b8>)
 8000fb6:	f007 f8d3 	bl	8008160 <HAL_TIMEx_MasterConfigSynchronization>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8000fc0:	f000 fb37 	bl	8001632 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc4:	2360      	movs	r3, #96	; 0x60
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.Pulse = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	482a      	ldr	r0, [pc, #168]	; (8001094 <MX_TIM1_Init+0x1b8>)
 8000fea:	f006 f95d 	bl	80072a8 <HAL_TIM_PWM_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8000ff4:	f000 fb1d 	bl	8001632 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICFilter = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001008:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800100c:	2208      	movs	r2, #8
 800100e:	4619      	mov	r1, r3
 8001010:	4820      	ldr	r0, [pc, #128]	; (8001094 <MX_TIM1_Init+0x1b8>)
 8001012:	f006 f8ad 	bl	8007170 <HAL_TIM_IC_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800101c:	f000 fb09 	bl	8001632 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001020:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001024:	220c      	movs	r2, #12
 8001026:	4619      	mov	r1, r3
 8001028:	481a      	ldr	r0, [pc, #104]	; (8001094 <MX_TIM1_Init+0x1b8>)
 800102a:	f006 f8a1 	bl	8007170 <HAL_TIM_IC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001034:	f000 fafd 	bl	8001632 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800104c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001050:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800105e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001068:	2300      	movs	r3, #0
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	4619      	mov	r1, r3
 8001074:	4807      	ldr	r0, [pc, #28]	; (8001094 <MX_TIM1_Init+0x1b8>)
 8001076:	f007 f8fb 	bl	8008270 <HAL_TIMEx_ConfigBreakDeadTime>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 8001080:	f000 fad7 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <MX_TIM1_Init+0x1b8>)
 8001086:	f000 fef1 	bl	8001e6c <HAL_TIM_MspPostInit>

}
 800108a:	bf00      	nop
 800108c:	3780      	adds	r7, #128	; 0x80
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000478 	.word	0x20000478
 8001098:	40012c00 	.word	0x40012c00

0800109c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08c      	sub	sp, #48	; 0x30
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	2224      	movs	r2, #36	; 0x24
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f00b ffac 	bl	800d008 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <MX_TIM3_Init+0xa4>)
 80010bc:	4a21      	ldr	r2, [pc, #132]	; (8001144 <MX_TIM3_Init+0xa8>)
 80010be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <MX_TIM3_Init+0xa4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <MX_TIM3_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <MX_TIM3_Init+0xa4>)
 80010ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_TIM3_Init+0xa4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <MX_TIM3_Init+0xa4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010e0:	2303      	movs	r3, #3
 80010e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010e8:	2301      	movs	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010f8:	2301      	movs	r3, #1
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4619      	mov	r1, r3
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_TIM3_Init+0xa4>)
 800110c:	f005 fe6b 	bl	8006de6 <HAL_TIM_Encoder_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001116:	f000 fa8c 	bl	8001632 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <MX_TIM3_Init+0xa4>)
 8001128:	f007 f81a 	bl	8008160 <HAL_TIMEx_MasterConfigSynchronization>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001132:	f000 fa7e 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	; 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200004c4 	.word	0x200004c4
 8001144:	40000400 	.word	0x40000400

08001148 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08e      	sub	sp, #56	; 0x38
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001168:	463b      	mov	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800117a:	4b32      	ldr	r3, [pc, #200]	; (8001244 <MX_TIM5_Init+0xfc>)
 800117c:	4a32      	ldr	r2, [pc, #200]	; (8001248 <MX_TIM5_Init+0x100>)
 800117e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 11;
 8001180:	4b30      	ldr	r3, [pc, #192]	; (8001244 <MX_TIM5_Init+0xfc>)
 8001182:	220b      	movs	r2, #11
 8001184:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <MX_TIM5_Init+0xfc>)
 8001188:	2220      	movs	r2, #32
 800118a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1834;
 800118c:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <MX_TIM5_Init+0xfc>)
 800118e:	f240 722a 	movw	r2, #1834	; 0x72a
 8001192:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <MX_TIM5_Init+0xfc>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <MX_TIM5_Init+0xfc>)
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011a0:	4828      	ldr	r0, [pc, #160]	; (8001244 <MX_TIM5_Init+0xfc>)
 80011a2:	f005 fb90 	bl	80068c6 <HAL_TIM_Base_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80011ac:	f000 fa41 	bl	8001632 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ba:	4619      	mov	r1, r3
 80011bc:	4821      	ldr	r0, [pc, #132]	; (8001244 <MX_TIM5_Init+0xfc>)
 80011be:	f006 f987 	bl	80074d0 <HAL_TIM_ConfigClockSource>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80011c8:	f000 fa33 	bl	8001632 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80011cc:	481d      	ldr	r0, [pc, #116]	; (8001244 <MX_TIM5_Init+0xfc>)
 80011ce:	f005 fc41 	bl	8006a54 <HAL_TIM_PWM_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80011d8:	f000 fa2b 	bl	8001632 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4816      	ldr	r0, [pc, #88]	; (8001244 <MX_TIM5_Init+0xfc>)
 80011ec:	f006 ffb8 	bl	8008160 <HAL_TIMEx_MasterConfigSynchronization>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80011f6:	f000 fa1c 	bl	8001632 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fa:	2360      	movs	r3, #96	; 0x60
 80011fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	2200      	movs	r2, #0
 800120e:	4619      	mov	r1, r3
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <MX_TIM5_Init+0xfc>)
 8001212:	f006 f849 	bl	80072a8 <HAL_TIM_PWM_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800121c:	f000 fa09 	bl	8001632 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001220:	463b      	mov	r3, r7
 8001222:	220c      	movs	r2, #12
 8001224:	4619      	mov	r1, r3
 8001226:	4807      	ldr	r0, [pc, #28]	; (8001244 <MX_TIM5_Init+0xfc>)
 8001228:	f006 f83e 	bl	80072a8 <HAL_TIM_PWM_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8001232:	f000 f9fe 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001236:	4803      	ldr	r0, [pc, #12]	; (8001244 <MX_TIM5_Init+0xfc>)
 8001238:	f000 fe18 	bl	8001e6c <HAL_TIM_MspPostInit>

}
 800123c:	bf00      	nop
 800123e:	3738      	adds	r7, #56	; 0x38
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000510 	.word	0x20000510
 8001248:	40000c00 	.word	0x40000c00

0800124c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_TIM6_Init+0x64>)
 800125e:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <MX_TIM6_Init+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 110;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <MX_TIM6_Init+0x64>)
 8001264:	226e      	movs	r2, #110	; 0x6e
 8001266:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_TIM6_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <MX_TIM6_Init+0x64>)
 8001270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001274:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_TIM6_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <MX_TIM6_Init+0x64>)
 800127e:	f005 fb22 	bl	80068c6 <HAL_TIM_Base_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001288:	f000 f9d3 	bl	8001632 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_TIM6_Init+0x64>)
 800129a:	f006 ff61 	bl	8008160 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80012a4:	f000 f9c5 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	2000055c 	.word	0x2000055c
 80012b4:	40001000 	.word	0x40001000

080012b8 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	463b      	mov	r3, r7
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
 80012cc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80012ce:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80012d2:	f7ff fa05 	bl	80006e0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80012d6:	2002      	movs	r0, #2
 80012d8:	f7ff f9ea 	bl	80006b0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80012dc:	2001      	movs	r0, #1
 80012de:	f7ff f9e7 	bl	80006b0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80012e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012e6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80012e8:	2303      	movs	r3, #3
 80012ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	463b      	mov	r3, r7
 80012f2:	4619      	mov	r1, r3
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <MX_UCPD1_Init+0x64>)
 80012f6:	f009 fa60 	bl	800a7ba <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80012fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012fe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001300:	2303      	movs	r3, #3
 8001302:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_UCPD1_Init+0x68>)
 800130e:	f009 fa54 	bl	800a7ba <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	42020400 	.word	0x42020400
 8001320:	42020000 	.word	0x42020000

08001324 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <MX_USB_PCD_Init+0x48>)
 800132a:	4a11      	ldr	r2, [pc, #68]	; (8001370 <MX_USB_PCD_Init+0x4c>)
 800132c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_USB_PCD_Init+0x48>)
 8001330:	2208      	movs	r2, #8
 8001332:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <MX_USB_PCD_Init+0x48>)
 8001336:	2202      	movs	r2, #2
 8001338:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_USB_PCD_Init+0x48>)
 800133c:	2202      	movs	r2, #2
 800133e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <MX_USB_PCD_Init+0x48>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_USB_PCD_Init+0x48>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <MX_USB_PCD_Init+0x48>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_USB_PCD_Init+0x48>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_USB_PCD_Init+0x48>)
 800135a:	f003 fa23 	bl	80047a4 <HAL_PCD_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001364:	f000 f965 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200005a8 	.word	0x200005a8
 8001370:	4000d400 	.word	0x4000d400

08001374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	; 0x30
 8001378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800138a:	4b8b      	ldr	r3, [pc, #556]	; (80015b8 <MX_GPIO_Init+0x244>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a8a      	ldr	r2, [pc, #552]	; (80015b8 <MX_GPIO_Init+0x244>)
 8001390:	f043 0310 	orr.w	r3, r3, #16
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b88      	ldr	r3, [pc, #544]	; (80015b8 <MX_GPIO_Init+0x244>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a2:	4b85      	ldr	r3, [pc, #532]	; (80015b8 <MX_GPIO_Init+0x244>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a84      	ldr	r2, [pc, #528]	; (80015b8 <MX_GPIO_Init+0x244>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b82      	ldr	r3, [pc, #520]	; (80015b8 <MX_GPIO_Init+0x244>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ba:	4b7f      	ldr	r3, [pc, #508]	; (80015b8 <MX_GPIO_Init+0x244>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a7e      	ldr	r2, [pc, #504]	; (80015b8 <MX_GPIO_Init+0x244>)
 80013c0:	f043 0320 	orr.w	r3, r3, #32
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b7c      	ldr	r3, [pc, #496]	; (80015b8 <MX_GPIO_Init+0x244>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0320 	and.w	r3, r3, #32
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	4b79      	ldr	r3, [pc, #484]	; (80015b8 <MX_GPIO_Init+0x244>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4a78      	ldr	r2, [pc, #480]	; (80015b8 <MX_GPIO_Init+0x244>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4b76      	ldr	r3, [pc, #472]	; (80015b8 <MX_GPIO_Init+0x244>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	4b73      	ldr	r3, [pc, #460]	; (80015b8 <MX_GPIO_Init+0x244>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4a72      	ldr	r2, [pc, #456]	; (80015b8 <MX_GPIO_Init+0x244>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4b70      	ldr	r3, [pc, #448]	; (80015b8 <MX_GPIO_Init+0x244>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001402:	4b6d      	ldr	r3, [pc, #436]	; (80015b8 <MX_GPIO_Init+0x244>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a6c      	ldr	r2, [pc, #432]	; (80015b8 <MX_GPIO_Init+0x244>)
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b6a      	ldr	r3, [pc, #424]	; (80015b8 <MX_GPIO_Init+0x244>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800141a:	4b67      	ldr	r3, [pc, #412]	; (80015b8 <MX_GPIO_Init+0x244>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a66      	ldr	r2, [pc, #408]	; (80015b8 <MX_GPIO_Init+0x244>)
 8001420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b64      	ldr	r3, [pc, #400]	; (80015b8 <MX_GPIO_Init+0x244>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8001432:	f003 fb35 	bl	8004aa0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DRIVE_E_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f24e 0108 	movw	r1, #57352	; 0xe008
 800143c:	485f      	ldr	r0, [pc, #380]	; (80015bc <MX_GPIO_Init+0x248>)
 800143e:	f003 f829 	bl	8004494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	21a4      	movs	r1, #164	; 0xa4
 8001446:	485e      	ldr	r0, [pc, #376]	; (80015c0 <MX_GPIO_Init+0x24c>)
 8001448:	f003 f824 	bl	8004494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 800144c:	2200      	movs	r2, #0
 800144e:	f64f 7187 	movw	r1, #65415	; 0xff87
 8001452:	485c      	ldr	r0, [pc, #368]	; (80015c4 <MX_GPIO_Init+0x250>)
 8001454:	f003 f81e 	bl	8004494 <HAL_GPIO_WritePin>
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |LED_LE_F_Pin|INFRA_LE_F_Pin|LED_OE_F_Pin|INFRA_OE_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	485a      	ldr	r0, [pc, #360]	; (80015c8 <MX_GPIO_Init+0x254>)
 800145e:	f003 f819 	bl	8004494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001468:	4858      	ldr	r0, [pc, #352]	; (80015cc <MX_GPIO_Init+0x258>)
 800146a:	f003 f813 	bl	8004494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_LE_R_Pin|INFRA_LE_R_Pin|LED_OE_R_Pin|INFRA_OE_R_Pin
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 8001474:	4856      	ldr	r0, [pc, #344]	; (80015d0 <MX_GPIO_Init+0x25c>)
 8001476:	f003 f80d 	bl	8004494 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DRIVE_E_Pin */
  GPIO_InitStruct.Pin = DRIVE_E_Pin;
 800147a:	2308      	movs	r3, #8
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_E_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	484a      	ldr	r0, [pc, #296]	; (80015bc <MX_GPIO_Init+0x248>)
 8001492:	f002 fe7f 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FB_Pin REMOTE_GAS_Pin REMOTE_STEER_Pin */
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 8001496:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	4844      	ldr	r0, [pc, #272]	; (80015bc <MX_GPIO_Init+0x248>)
 80014ac:	f002 fe72 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_CS_Pin UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 80014b0:	23a4      	movs	r3, #164	; 0xa4
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	483e      	ldr	r0, [pc, #248]	; (80015c0 <MX_GPIO_Init+0x24c>)
 80014c8:	f002 fe64 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin MOT_BATT_L_Pin LV_BATT_L_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 80014cc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80014d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	4835      	ldr	r0, [pc, #212]	; (80015bc <MX_GPIO_Init+0x248>)
 80014e6:	f002 fe55 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin ROTARY1_Pin ROTARY2_Pin ROTARY3_Pin
                           ROTARY4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 80014ea:	f643 6301 	movw	r3, #15873	; 0x3e01
 80014ee:	61fb      	str	r3, [r7, #28]
                          |ROTARY4_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	4835      	ldr	r0, [pc, #212]	; (80015d4 <MX_GPIO_Init+0x260>)
 8001500:	f002 fe48 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001504:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800150a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800150e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	4829      	ldr	r0, [pc, #164]	; (80015c0 <MX_GPIO_Init+0x24c>)
 800151c:	f002 fe3a 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCF1_CS_Pin ADCF2_CS_Pin ADCF3_CS_Pin ADCF4_CS_Pin
                           ADCR1_CS_Pin ADCR2_CS_Pin ADCR3_CS_Pin ADCR4_CS_Pin
                           LED_LE_F_Pin INFRA_LE_F_Pin LED_OE_F_Pin INFRA_OE_F_Pin */
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8001520:	f64f 7387 	movw	r3, #65415	; 0xff87
 8001524:	61fb      	str	r3, [r7, #28]
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |LED_LE_F_Pin|INFRA_LE_F_Pin|LED_OE_F_Pin|INFRA_OE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4619      	mov	r1, r3
 8001538:	4822      	ldr	r0, [pc, #136]	; (80015c4 <MX_GPIO_Init+0x250>)
 800153a:	f002 fe2b 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin SET_BUTTON_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 800153e:	2370      	movs	r3, #112	; 0x70
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	481f      	ldr	r0, [pc, #124]	; (80015d0 <MX_GPIO_Init+0x25c>)
 8001552:	f002 fe1f 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	4816      	ldr	r0, [pc, #88]	; (80015c8 <MX_GPIO_Init+0x254>)
 800156e:	f002 fe11 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4810      	ldr	r0, [pc, #64]	; (80015cc <MX_GPIO_Init+0x258>)
 800158c:	f002 fe02 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_LE_R_Pin INFRA_LE_R_Pin LED_OE_R_Pin INFRA_OE_R_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED_LE_R_Pin|INFRA_LE_R_Pin|LED_OE_R_Pin|INFRA_OE_R_Pin
 8001590:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 8001594:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	4809      	ldr	r0, [pc, #36]	; (80015d0 <MX_GPIO_Init+0x25c>)
 80015aa:	f002 fdf3 	bl	8004194 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ae:	bf00      	nop
 80015b0:	3730      	adds	r7, #48	; 0x30
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	42021400 	.word	0x42021400
 80015c0:	42020400 	.word	0x42020400
 80015c4:	42020c00 	.word	0x42020c00
 80015c8:	42020800 	.word	0x42020800
 80015cc:	42020000 	.word	0x42020000
 80015d0:	42021800 	.word	0x42021800
 80015d4:	42021000 	.word	0x42021000

080015d8 <TestTask>:

/* USER CODE BEGIN 4 */
void TestTask(void *argument)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	4803      	ldr	r0, [pc, #12]	; (80015f0 <TestTask+0x18>)
 80015e4:	f002 ff6e 	bl	80044c4 <HAL_GPIO_TogglePin>
	    osDelay(250);
 80015e8:	20fa      	movs	r0, #250	; 0xfa
 80015ea:	f009 faaf 	bl	800ab4c <osDelay>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80015ee:	e7f7      	b.n	80015e0 <TestTask+0x8>
 80015f0:	42020400 	.word	0x42020400

080015f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80015fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001600:	4803      	ldr	r0, [pc, #12]	; (8001610 <StartDefaultTask+0x1c>)
 8001602:	f002 ff5f 	bl	80044c4 <HAL_GPIO_TogglePin>
    osDelay(250);
 8001606:	20fa      	movs	r0, #250	; 0xfa
 8001608:	f009 faa0 	bl	800ab4c <osDelay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800160c:	e7f6      	b.n	80015fc <StartDefaultTask+0x8>
 800160e:	bf00      	nop
 8001610:	42020000 	.word	0x42020000

08001614 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001624:	d101      	bne.n	800162a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001626:	f000 feb9 	bl	800239c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001636:	b672      	cpsid	i
}
 8001638:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800163a:	e7fe      	b.n	800163a <Error_Handler+0x8>

0800163c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_MspInit+0x4c>)
 8001644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_MspInit+0x4c>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6613      	str	r3, [r2, #96]	; 0x60
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_MspInit+0x4c>)
 8001650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_MspInit+0x4c>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_MspInit+0x4c>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	6593      	str	r3, [r2, #88]	; 0x58
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_MspInit+0x4c>)
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2107      	movs	r1, #7
 8001676:	f06f 0001 	mvn.w	r0, #1
 800167a:	f002 fca7 	bl	8003fcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000

0800168c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b0b0      	sub	sp, #192	; 0xc0
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a4:	f107 0318 	add.w	r3, r7, #24
 80016a8:	2294      	movs	r2, #148	; 0x94
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00b fcab 	bl	800d008 <memset>
  if(hadc->Instance==ADC1)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a3e      	ldr	r2, [pc, #248]	; (80017b0 <HAL_ADC_MspInit+0x124>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d175      	bne.n	80017a8 <HAL_ADC_MspInit+0x11c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80016c2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80016c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ca:	f107 0318 	add.w	r3, r7, #24
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 fa06 	bl	8005ae0 <HAL_RCCEx_PeriphCLKConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80016da:	f7ff ffaa 	bl	8001632 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016de:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <HAL_ADC_MspInit+0x128>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	4a34      	ldr	r2, [pc, #208]	; (80017b4 <HAL_ADC_MspInit+0x128>)
 80016e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ea:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <HAL_ADC_MspInit+0x128>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <HAL_ADC_MspInit+0x128>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	4a2e      	ldr	r2, [pc, #184]	; (80017b4 <HAL_ADC_MspInit+0x128>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001702:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <HAL_ADC_MspInit+0x128>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <HAL_ADC_MspInit+0x128>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	4a28      	ldr	r2, [pc, #160]	; (80017b4 <HAL_ADC_MspInit+0x128>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <HAL_ADC_MspInit+0x128>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <HAL_ADC_MspInit+0x128>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	4a22      	ldr	r2, [pc, #136]	; (80017b4 <HAL_ADC_MspInit+0x128>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <HAL_ADC_MspInit+0x128>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 800173e:	230f      	movs	r3, #15
 8001740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001744:	2303      	movs	r3, #3
 8001746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001750:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001754:	4619      	mov	r1, r3
 8001756:	4818      	ldr	r0, [pc, #96]	; (80017b8 <HAL_ADC_MspInit+0x12c>)
 8001758:	f002 fd1c 	bl	8004194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 800175c:	239c      	movs	r3, #156	; 0x9c
 800175e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001762:	2303      	movs	r3, #3
 8001764:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001772:	4619      	mov	r1, r3
 8001774:	4811      	ldr	r0, [pc, #68]	; (80017bc <HAL_ADC_MspInit+0x130>)
 8001776:	f002 fd0d 	bl	8004194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHBB0_Pin|DISTANCE4_ADC_Pin;
 800177a:	2303      	movs	r3, #3
 800177c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001780:	2303      	movs	r3, #3
 8001782:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001790:	4619      	mov	r1, r3
 8001792:	480b      	ldr	r0, [pc, #44]	; (80017c0 <HAL_ADC_MspInit+0x134>)
 8001794:	f002 fcfe 	bl	8004194 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2105      	movs	r1, #5
 800179c:	2025      	movs	r0, #37	; 0x25
 800179e:	f002 fc15 	bl	8003fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80017a2:	2025      	movs	r0, #37	; 0x25
 80017a4:	f002 fc2c 	bl	8004000 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017a8:	bf00      	nop
 80017aa:	37c0      	adds	r7, #192	; 0xc0
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	42028000 	.word	0x42028000
 80017b4:	40021000 	.word	0x40021000
 80017b8:	42020800 	.word	0x42020800
 80017bc:	42020000 	.word	0x42020000
 80017c0:	42020400 	.word	0x42020400

080017c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b0ae      	sub	sp, #184	; 0xb8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	2294      	movs	r2, #148	; 0x94
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f00b fc0f 	bl	800d008 <memset>
  if(hi2c->Instance==I2C1)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a21      	ldr	r2, [pc, #132]	; (8001874 <HAL_I2C_MspInit+0xb0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d13b      	bne.n	800186c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017f4:	2340      	movs	r3, #64	; 0x40
 80017f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4618      	mov	r0, r3
 8001802:	f004 f96d 	bl	8005ae0 <HAL_RCCEx_PeriphCLKConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800180c:	f7ff ff11 	bl	8001632 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_I2C_MspInit+0xb4>)
 8001812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001814:	4a18      	ldr	r2, [pc, #96]	; (8001878 <HAL_I2C_MspInit+0xb4>)
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_I2C_MspInit+0xb4>)
 800181e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001828:	f44f 7340 	mov.w	r3, #768	; 0x300
 800182c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001830:	2312      	movs	r3, #18
 8001832:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001842:	2304      	movs	r3, #4
 8001844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001848:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800184c:	4619      	mov	r1, r3
 800184e:	480b      	ldr	r0, [pc, #44]	; (800187c <HAL_I2C_MspInit+0xb8>)
 8001850:	f002 fca0 	bl	8004194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <HAL_I2C_MspInit+0xb4>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_I2C_MspInit+0xb4>)
 800185a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800185e:	6593      	str	r3, [r2, #88]	; 0x58
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_I2C_MspInit+0xb4>)
 8001862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800186c:	bf00      	nop
 800186e:	37b8      	adds	r7, #184	; 0xb8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40005400 	.word	0x40005400
 8001878:	40021000 	.word	0x40021000
 800187c:	42020400 	.word	0x42020400

08001880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b0b2      	sub	sp, #200	; 0xc8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001898:	f107 0320 	add.w	r3, r7, #32
 800189c:	2294      	movs	r2, #148	; 0x94
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f00b fbb1 	bl	800d008 <memset>
  if(huart->Instance==LPUART1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a67      	ldr	r2, [pc, #412]	; (8001a48 <HAL_UART_MspInit+0x1c8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d13e      	bne.n	800192e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018b0:	2320      	movs	r3, #32
 80018b2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b8:	f107 0320 	add.w	r3, r7, #32
 80018bc:	4618      	mov	r0, r3
 80018be:	f004 f90f 	bl	8005ae0 <HAL_RCCEx_PeriphCLKConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018c8:	f7ff feb3 	bl	8001632 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018cc:	4b5f      	ldr	r3, [pc, #380]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	4a5e      	ldr	r2, [pc, #376]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80018d8:	4b5c      	ldr	r3, [pc, #368]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 80018da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018e4:	4b59      	ldr	r3, [pc, #356]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 80018e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e8:	4a58      	ldr	r2, [pc, #352]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 80018ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f0:	4b56      	ldr	r3, [pc, #344]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 80018f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 80018fc:	f003 f8d0 	bl	8004aa0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8001900:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800191a:	2308      	movs	r3, #8
 800191c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001920:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001924:	4619      	mov	r1, r3
 8001926:	484a      	ldr	r0, [pc, #296]	; (8001a50 <HAL_UART_MspInit+0x1d0>)
 8001928:	f002 fc34 	bl	8004194 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800192c:	e088      	b.n	8001a40 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a48      	ldr	r2, [pc, #288]	; (8001a54 <HAL_UART_MspInit+0x1d4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d143      	bne.n	80019c0 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001938:	2308      	movs	r3, #8
 800193a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800193c:	2300      	movs	r3, #0
 800193e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001940:	f107 0320 	add.w	r3, r7, #32
 8001944:	4618      	mov	r0, r3
 8001946:	f004 f8cb 	bl	8005ae0 <HAL_RCCEx_PeriphCLKConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001950:	f7ff fe6f 	bl	8001632 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001954:	4b3d      	ldr	r3, [pc, #244]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	4a3c      	ldr	r2, [pc, #240]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 800195a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800195e:	6593      	str	r3, [r2, #88]	; 0x58
 8001960:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	4b37      	ldr	r3, [pc, #220]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 800196e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001970:	4a36      	ldr	r2, [pc, #216]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001978:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 800197a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001984:	2303      	movs	r3, #3
 8001986:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800199c:	2308      	movs	r3, #8
 800199e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019a6:	4619      	mov	r1, r3
 80019a8:	482b      	ldr	r0, [pc, #172]	; (8001a58 <HAL_UART_MspInit+0x1d8>)
 80019aa:	f002 fbf3 	bl	8004194 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2105      	movs	r1, #5
 80019b2:	2040      	movs	r0, #64	; 0x40
 80019b4:	f002 fb0a 	bl	8003fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80019b8:	2040      	movs	r0, #64	; 0x40
 80019ba:	f002 fb21 	bl	8004000 <HAL_NVIC_EnableIRQ>
}
 80019be:	e03f      	b.n	8001a40 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a25      	ldr	r2, [pc, #148]	; (8001a5c <HAL_UART_MspInit+0x1dc>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d13a      	bne.n	8001a40 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019ca:	2302      	movs	r3, #2
 80019cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d2:	f107 0320 	add.w	r3, r7, #32
 80019d6:	4618      	mov	r0, r3
 80019d8:	f004 f882 	bl	8005ae0 <HAL_RCCEx_PeriphCLKConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_UART_MspInit+0x166>
      Error_Handler();
 80019e2:	f7ff fe26 	bl	8001632 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 80019e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ea:	4a18      	ldr	r2, [pc, #96]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	6593      	str	r3, [r2, #88]	; 0x58
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 8001a04:	f043 0308 	orr.w	r3, r3, #8
 8001a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_UART_MspInit+0x1cc>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 8001a16:	2360      	movs	r3, #96	; 0x60
 8001a18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a2e:	2307      	movs	r3, #7
 8001a30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a34:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4809      	ldr	r0, [pc, #36]	; (8001a60 <HAL_UART_MspInit+0x1e0>)
 8001a3c:	f002 fbaa 	bl	8004194 <HAL_GPIO_Init>
}
 8001a40:	bf00      	nop
 8001a42:	37c8      	adds	r7, #200	; 0xc8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40008000 	.word	0x40008000
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	42021800 	.word	0x42021800
 8001a54:	40004c00 	.word	0x40004c00
 8001a58:	42020000 	.word	0x42020000
 8001a5c:	40004400 	.word	0x40004400
 8001a60:	42020c00 	.word	0x42020c00

08001a64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b0a8      	sub	sp, #160	; 0xa0
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	2294      	movs	r2, #148	; 0x94
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f00b fac7 	bl	800d008 <memset>
  if(hrtc->Instance==RTC)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <HAL_RTC_MspInit+0x74>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d124      	bne.n	8001ace <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a88:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	4618      	mov	r0, r3
 8001a98:	f004 f822 	bl	8005ae0 <HAL_RCCEx_PeriphCLKConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001aa2:	f7ff fdc6 	bl	8001632 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_RTC_MspInit+0x78>)
 8001aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aac:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <HAL_RTC_MspInit+0x78>)
 8001aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_RTC_MspInit+0x78>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	4a08      	ldr	r2, [pc, #32]	; (8001adc <HAL_RTC_MspInit+0x78>)
 8001abc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_RTC_MspInit+0x78>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	37a0      	adds	r7, #160	; 0xa0
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40002800 	.word	0x40002800
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b090      	sub	sp, #64	; 0x40
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a62      	ldr	r2, [pc, #392]	; (8001c88 <HAL_SPI_MspInit+0x1a8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d145      	bne.n	8001b8e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b02:	4b62      	ldr	r3, [pc, #392]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b06:	4a61      	ldr	r2, [pc, #388]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001b08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b0e:	4b5f      	ldr	r3, [pc, #380]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b18:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	4b5c      	ldr	r3, [pc, #368]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	4a5b      	ldr	r2, [pc, #364]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b26:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b32:	4b56      	ldr	r3, [pc, #344]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	4a55      	ldr	r2, [pc, #340]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001b38:	f043 0310 	orr.w	r3, r3, #16
 8001b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3e:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	623b      	str	r3, [r7, #32]
 8001b48:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 8001b4a:	2360      	movs	r3, #96	; 0x60
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b62:	4619      	mov	r1, r3
 8001b64:	484a      	ldr	r0, [pc, #296]	; (8001c90 <HAL_SPI_MspInit+0x1b0>)
 8001b66:	f002 fb15 	bl	8004194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 8001b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b7c:	2305      	movs	r3, #5
 8001b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b84:	4619      	mov	r1, r3
 8001b86:	4843      	ldr	r0, [pc, #268]	; (8001c94 <HAL_SPI_MspInit+0x1b4>)
 8001b88:	f002 fb04 	bl	8004194 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b8c:	e078      	b.n	8001c80 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a41      	ldr	r2, [pc, #260]	; (8001c98 <HAL_SPI_MspInit+0x1b8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d145      	bne.n	8001c24 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b98:	4b3c      	ldr	r3, [pc, #240]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	4a3b      	ldr	r2, [pc, #236]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba4:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb0:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb4:	4a35      	ldr	r2, [pc, #212]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbc:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc8:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bcc:	4a2f      	ldr	r2, [pc, #188]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001bce:	f043 0308 	orr.w	r3, r3, #8
 8001bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bf2:	2305      	movs	r3, #5
 8001bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4827      	ldr	r0, [pc, #156]	; (8001c9c <HAL_SPI_MspInit+0x1bc>)
 8001bfe:	f002 fac9 	bl	8004194 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001c02:	2318      	movs	r3, #24
 8001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c12:	2305      	movs	r3, #5
 8001c14:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4820      	ldr	r0, [pc, #128]	; (8001ca0 <HAL_SPI_MspInit+0x1c0>)
 8001c1e:	f002 fab9 	bl	8004194 <HAL_GPIO_Init>
}
 8001c22:	e02d      	b.n	8001c80 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <HAL_SPI_MspInit+0x1c4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d128      	bne.n	8001c80 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c2e:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	4a16      	ldr	r2, [pc, #88]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c38:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	4a10      	ldr	r2, [pc, #64]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_SPI_MspInit+0x1ac>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c5e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c70:	2306      	movs	r3, #6
 8001c72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480b      	ldr	r0, [pc, #44]	; (8001ca8 <HAL_SPI_MspInit+0x1c8>)
 8001c7c:	f002 fa8a 	bl	8004194 <HAL_GPIO_Init>
}
 8001c80:	bf00      	nop
 8001c82:	3740      	adds	r7, #64	; 0x40
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40013000 	.word	0x40013000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	42020000 	.word	0x42020000
 8001c94:	42021000 	.word	0x42021000
 8001c98:	40003800 	.word	0x40003800
 8001c9c:	42020400 	.word	0x42020400
 8001ca0:	42020c00 	.word	0x42020c00
 8001ca4:	40003c00 	.word	0x40003c00
 8001ca8:	42020800 	.word	0x42020800

08001cac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	; 0x30
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a3c      	ldr	r2, [pc, #240]	; (8001dbc <HAL_TIM_Base_MspInit+0x110>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d146      	bne.n	8001d5c <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cce:	4b3c      	ldr	r3, [pc, #240]	; (8001dc0 <HAL_TIM_Base_MspInit+0x114>)
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd2:	4a3b      	ldr	r2, [pc, #236]	; (8001dc0 <HAL_TIM_Base_MspInit+0x114>)
 8001cd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cda:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <HAL_TIM_Base_MspInit+0x114>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ce6:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <HAL_TIM_Base_MspInit+0x114>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	4a35      	ldr	r2, [pc, #212]	; (8001dc0 <HAL_TIM_Base_MspInit+0x114>)
 8001cec:	f043 0310 	orr.w	r3, r3, #16
 8001cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf2:	4b33      	ldr	r3, [pc, #204]	; (8001dc0 <HAL_TIM_Base_MspInit+0x114>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b30      	ldr	r3, [pc, #192]	; (8001dc0 <HAL_TIM_Base_MspInit+0x114>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	4a2f      	ldr	r2, [pc, #188]	; (8001dc0 <HAL_TIM_Base_MspInit+0x114>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0a:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_TIM_Base_MspInit+0x114>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_IN_Pin;
 8001d16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_STEERING_IN_GPIO_Port, &GPIO_InitStruct);
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	4619      	mov	r1, r3
 8001d32:	4824      	ldr	r0, [pc, #144]	; (8001dc4 <HAL_TIM_Base_MspInit+0x118>)
 8001d34:	f002 fa2e 	bl	8004194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_PWM_THROTTLE_IN_Pin;
 8001d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_THROTTLE_IN_GPIO_Port, &GPIO_InitStruct);
 8001d4e:	f107 031c 	add.w	r3, r7, #28
 8001d52:	4619      	mov	r1, r3
 8001d54:	481c      	ldr	r0, [pc, #112]	; (8001dc8 <HAL_TIM_Base_MspInit+0x11c>)
 8001d56:	f002 fa1d 	bl	8004194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001d5a:	e02a      	b.n	8001db2 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1a      	ldr	r2, [pc, #104]	; (8001dcc <HAL_TIM_Base_MspInit+0x120>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d10c      	bne.n	8001d80 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <HAL_TIM_Base_MspInit+0x114>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	4a15      	ldr	r2, [pc, #84]	; (8001dc0 <HAL_TIM_Base_MspInit+0x114>)
 8001d6c:	f043 0308 	orr.w	r3, r3, #8
 8001d70:	6593      	str	r3, [r2, #88]	; 0x58
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_TIM_Base_MspInit+0x114>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
}
 8001d7e:	e018      	b.n	8001db2 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM6)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <HAL_TIM_Base_MspInit+0x124>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d113      	bne.n	8001db2 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_TIM_Base_MspInit+0x114>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <HAL_TIM_Base_MspInit+0x114>)
 8001d90:	f043 0310 	orr.w	r3, r3, #16
 8001d94:	6593      	str	r3, [r2, #88]	; 0x58
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_TIM_Base_MspInit+0x114>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2105      	movs	r1, #5
 8001da6:	2031      	movs	r0, #49	; 0x31
 8001da8:	f002 f910 	bl	8003fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001dac:	2031      	movs	r0, #49	; 0x31
 8001dae:	f002 f927 	bl	8004000 <HAL_NVIC_EnableIRQ>
}
 8001db2:	bf00      	nop
 8001db4:	3730      	adds	r7, #48	; 0x30
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40012c00 	.word	0x40012c00
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	42021000 	.word	0x42021000
 8001dc8:	42020000 	.word	0x42020000
 8001dcc:	40000c00 	.word	0x40000c00
 8001dd0:	40001000 	.word	0x40001000

08001dd4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d12f      	bne.n	8001e56 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001df6:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_TIM_Encoder_MspInit+0x90>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	4a1a      	ldr	r2, [pc, #104]	; (8001e64 <HAL_TIM_Encoder_MspInit+0x90>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	6593      	str	r3, [r2, #88]	; 0x58
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_TIM_Encoder_MspInit+0x90>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_TIM_Encoder_MspInit+0x90>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <HAL_TIM_Encoder_MspInit+0x90>)
 8001e14:	f043 0310 	orr.w	r3, r3, #16
 8001e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_TIM_Encoder_MspInit+0x90>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CHB_Pin;
 8001e26:	2318      	movs	r3, #24
 8001e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e36:	2302      	movs	r3, #2
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4809      	ldr	r0, [pc, #36]	; (8001e68 <HAL_TIM_Encoder_MspInit+0x94>)
 8001e42:	f002 f9a7 	bl	8004194 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2105      	movs	r1, #5
 8001e4a:	202e      	movs	r0, #46	; 0x2e
 8001e4c:	f002 f8be 	bl	8003fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e50:	202e      	movs	r0, #46	; 0x2e
 8001e52:	f002 f8d5 	bl	8004000 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e56:	bf00      	nop
 8001e58:	3728      	adds	r7, #40	; 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40000400 	.word	0x40000400
 8001e64:	40021000 	.word	0x40021000
 8001e68:	42021000 	.word	0x42021000

08001e6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a23      	ldr	r2, [pc, #140]	; (8001f18 <HAL_TIM_MspPostInit+0xac>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d11d      	bne.n	8001eca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <HAL_TIM_MspPostInit+0xb0>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <HAL_TIM_MspPostInit+0xb0>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_TIM_MspPostInit+0xb0>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_Pin;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RC_PWM_STEERING_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4817      	ldr	r0, [pc, #92]	; (8001f20 <HAL_TIM_MspPostInit+0xb4>)
 8001ec4:	f002 f966 	bl	8004194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001ec8:	e021      	b.n	8001f0e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM5)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a15      	ldr	r2, [pc, #84]	; (8001f24 <HAL_TIM_MspPostInit+0xb8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d11c      	bne.n	8001f0e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_TIM_MspPostInit+0xb0>)
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed8:	4a10      	ldr	r2, [pc, #64]	; (8001f1c <HAL_TIM_MspPostInit+0xb0>)
 8001eda:	f043 0320 	orr.w	r3, r3, #32
 8001ede:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <HAL_TIM_MspPostInit+0xb0>)
 8001ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_PWM1_Pin|MOTOR_PWM2_Pin;
 8001eec:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001efe:	2302      	movs	r3, #2
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	4807      	ldr	r0, [pc, #28]	; (8001f28 <HAL_TIM_MspPostInit+0xbc>)
 8001f0a:	f002 f943 	bl	8004194 <HAL_GPIO_Init>
}
 8001f0e:	bf00      	nop
 8001f10:	3728      	adds	r7, #40	; 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40012c00 	.word	0x40012c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	42020000 	.word	0x42020000
 8001f24:	40000c00 	.word	0x40000c00
 8001f28:	42021400 	.word	0x42021400

08001f2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b0ae      	sub	sp, #184	; 0xb8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	2294      	movs	r2, #148	; 0x94
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f00b f85b 	bl	800d008 <memset>
  if(hpcd->Instance==USB)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <HAL_PCD_MspInit+0xb4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d13d      	bne.n	8001fd8 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f60:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f68:	f107 0310 	add.w	r3, r7, #16
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f003 fdb7 	bl	8005ae0 <HAL_RCCEx_PeriphCLKConfig>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001f78:	f7ff fb5b 	bl	8001632 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_PCD_MspInit+0xb8>)
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f80:	4a18      	ldr	r2, [pc, #96]	; (8001fe4 <HAL_PCD_MspInit+0xb8>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f88:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <HAL_PCD_MspInit+0xb8>)
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001fae:	230a      	movs	r3, #10
 8001fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <HAL_PCD_MspInit+0xbc>)
 8001fbc:	f002 f8ea 	bl	8004194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_PCD_MspInit+0xb8>)
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <HAL_PCD_MspInit+0xb8>)
 8001fc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fca:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_PCD_MspInit+0xb8>)
 8001fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001fd8:	bf00      	nop
 8001fda:	37b8      	adds	r7, #184	; 0xb8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	4000d400 	.word	0x4000d400
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	42020000 	.word	0x42020000

08001fec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08c      	sub	sp, #48	; 0x30
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	202d      	movs	r0, #45	; 0x2d
 8002002:	f001 ffe3 	bl	8003fcc <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002006:	202d      	movs	r0, #45	; 0x2d
 8002008:	f001 fffa 	bl	8004000 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <HAL_InitTick+0xa0>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	4a1e      	ldr	r2, [pc, #120]	; (800208c <HAL_InitTick+0xa0>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6593      	str	r3, [r2, #88]	; 0x58
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <HAL_InitTick+0xa0>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002024:	f107 0210 	add.w	r2, r7, #16
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f003 fc52 	bl	80058d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002034:	f003 fc28 	bl	8005888 <HAL_RCC_GetPCLK1Freq>
 8002038:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800203a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203c:	4a14      	ldr	r2, [pc, #80]	; (8002090 <HAL_InitTick+0xa4>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	0c9b      	lsrs	r3, r3, #18
 8002044:	3b01      	subs	r3, #1
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0xa8>)
 800204a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800204e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <HAL_InitTick+0xa8>)
 8002052:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002056:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002058:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <HAL_InitTick+0xa8>)
 800205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_InitTick+0xa8>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_InitTick+0xa8>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800206a:	480a      	ldr	r0, [pc, #40]	; (8002094 <HAL_InitTick+0xa8>)
 800206c:	f004 fc2b 	bl	80068c6 <HAL_TIM_Base_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d104      	bne.n	8002080 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8002076:	4807      	ldr	r0, [pc, #28]	; (8002094 <HAL_InitTick+0xa8>)
 8002078:	f004 fc7c 	bl	8006974 <HAL_TIM_Base_Start_IT>
 800207c:	4603      	mov	r3, r0
 800207e:	e000      	b.n	8002082 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
}
 8002082:	4618      	mov	r0, r3
 8002084:	3730      	adds	r7, #48	; 0x30
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	431bde83 	.word	0x431bde83
 8002094:	200008a4 	.word	0x200008a4

08002098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800209c:	e7fe      	b.n	800209c <NMI_Handler+0x4>

0800209e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <MemManage_Handler+0x4>

080020aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <BusFault_Handler+0x4>

080020b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <UsageFault_Handler+0x4>

080020b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <ADC1_2_IRQHandler+0x10>)
 80020ca:	f000 fe3f 	bl	8002d4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200000ac 	.word	0x200000ac

080020d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <TIM2_IRQHandler+0x10>)
 80020de:	f004 ff28 	bl	8006f32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200008a4 	.word	0x200008a4

080020ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <TIM3_IRQHandler+0x10>)
 80020f2:	f004 ff1e 	bl	8006f32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200004c4 	.word	0x200004c4

08002100 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <TIM6_IRQHandler+0x10>)
 8002106:	f004 ff14 	bl	8006f32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000055c 	.word	0x2000055c

08002114 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <UART4_IRQHandler+0x10>)
 800211a:	f006 fa03 	bl	8008524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200001fc 	.word	0x200001fc

08002128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002130:	4a14      	ldr	r2, [pc, #80]	; (8002184 <_sbrk+0x5c>)
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <_sbrk+0x60>)
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <_sbrk+0x64>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d102      	bne.n	800214a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <_sbrk+0x64>)
 8002146:	4a12      	ldr	r2, [pc, #72]	; (8002190 <_sbrk+0x68>)
 8002148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	429a      	cmp	r2, r3
 8002156:	d207      	bcs.n	8002168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002158:	f00a ff5e 	bl	800d018 <__errno>
 800215c:	4603      	mov	r3, r0
 800215e:	220c      	movs	r2, #12
 8002160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	e009      	b.n	800217c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <_sbrk+0x64>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <_sbrk+0x64>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	4a05      	ldr	r2, [pc, #20]	; (800218c <_sbrk+0x64>)
 8002178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800217a:	68fb      	ldr	r3, [r7, #12]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20030000 	.word	0x20030000
 8002188:	00000400 	.word	0x00000400
 800218c:	200008f0 	.word	0x200008f0
 8002190:	20003788 	.word	0x20003788

08002194 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <SystemInit+0x20>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	4a05      	ldr	r2, [pc, #20]	; (80021b4 <SystemInit+0x20>)
 80021a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80021be:	4b4f      	ldr	r3, [pc, #316]	; (80022fc <SystemCoreClockUpdate+0x144>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d107      	bne.n	80021da <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80021ca:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <SystemCoreClockUpdate+0x144>)
 80021cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	e005      	b.n	80021e6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80021da:	4b48      	ldr	r3, [pc, #288]	; (80022fc <SystemCoreClockUpdate+0x144>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	091b      	lsrs	r3, r3, #4
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80021e6:	4a46      	ldr	r2, [pc, #280]	; (8002300 <SystemCoreClockUpdate+0x148>)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f0:	4b42      	ldr	r3, [pc, #264]	; (80022fc <SystemCoreClockUpdate+0x144>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b0c      	cmp	r3, #12
 80021fa:	d866      	bhi.n	80022ca <SystemCoreClockUpdate+0x112>
 80021fc:	a201      	add	r2, pc, #4	; (adr r2, 8002204 <SystemCoreClockUpdate+0x4c>)
 80021fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002202:	bf00      	nop
 8002204:	08002239 	.word	0x08002239
 8002208:	080022cb 	.word	0x080022cb
 800220c:	080022cb 	.word	0x080022cb
 8002210:	080022cb 	.word	0x080022cb
 8002214:	08002241 	.word	0x08002241
 8002218:	080022cb 	.word	0x080022cb
 800221c:	080022cb 	.word	0x080022cb
 8002220:	080022cb 	.word	0x080022cb
 8002224:	08002249 	.word	0x08002249
 8002228:	080022cb 	.word	0x080022cb
 800222c:	080022cb 	.word	0x080022cb
 8002230:	080022cb 	.word	0x080022cb
 8002234:	08002251 	.word	0x08002251
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002238:	4a32      	ldr	r2, [pc, #200]	; (8002304 <SystemCoreClockUpdate+0x14c>)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	6013      	str	r3, [r2, #0]
      break;
 800223e:	e048      	b.n	80022d2 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002240:	4b30      	ldr	r3, [pc, #192]	; (8002304 <SystemCoreClockUpdate+0x14c>)
 8002242:	4a31      	ldr	r2, [pc, #196]	; (8002308 <SystemCoreClockUpdate+0x150>)
 8002244:	601a      	str	r2, [r3, #0]
      break;
 8002246:	e044      	b.n	80022d2 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002248:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <SystemCoreClockUpdate+0x14c>)
 800224a:	4a30      	ldr	r2, [pc, #192]	; (800230c <SystemCoreClockUpdate+0x154>)
 800224c:	601a      	str	r2, [r3, #0]
      break;
 800224e:	e040      	b.n	80022d2 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <SystemCoreClockUpdate+0x144>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800225a:	4b28      	ldr	r3, [pc, #160]	; (80022fc <SystemCoreClockUpdate+0x144>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	3301      	adds	r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d003      	beq.n	8002276 <SystemCoreClockUpdate+0xbe>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b03      	cmp	r3, #3
 8002272:	d006      	beq.n	8002282 <SystemCoreClockUpdate+0xca>
 8002274:	e00b      	b.n	800228e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8002276:	4a24      	ldr	r2, [pc, #144]	; (8002308 <SystemCoreClockUpdate+0x150>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	fbb2 f3f3 	udiv	r3, r2, r3
 800227e:	613b      	str	r3, [r7, #16]
          break;
 8002280:	e00b      	b.n	800229a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8002282:	4a22      	ldr	r2, [pc, #136]	; (800230c <SystemCoreClockUpdate+0x154>)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	fbb2 f3f3 	udiv	r3, r2, r3
 800228a:	613b      	str	r3, [r7, #16]
          break;
 800228c:	e005      	b.n	800229a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	613b      	str	r3, [r7, #16]
          break;
 8002298:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <SystemCoreClockUpdate+0x144>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <SystemCoreClockUpdate+0x144>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0e5b      	lsrs	r3, r3, #25
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	3301      	adds	r3, #1
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c4:	4a0f      	ldr	r2, [pc, #60]	; (8002304 <SystemCoreClockUpdate+0x14c>)
 80022c6:	6013      	str	r3, [r2, #0]
      break;
 80022c8:	e003      	b.n	80022d2 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80022ca:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <SystemCoreClockUpdate+0x14c>)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	6013      	str	r3, [r2, #0]
      break;
 80022d0:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <SystemCoreClockUpdate+0x144>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <SystemCoreClockUpdate+0x158>)
 80022de:	5cd3      	ldrb	r3, [r2, r3]
 80022e0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <SystemCoreClockUpdate+0x14c>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ec:	4a05      	ldr	r2, [pc, #20]	; (8002304 <SystemCoreClockUpdate+0x14c>)
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	40021000 	.word	0x40021000
 8002300:	0800dcfc 	.word	0x0800dcfc
 8002304:	20000004 	.word	0x20000004
 8002308:	00f42400 	.word	0x00f42400
 800230c:	007a1200 	.word	0x007a1200
 8002310:	0800dce4 	.word	0x0800dce4

08002314 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800234c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002318:	f7ff ff3c 	bl	8002194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800231c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800231e:	e003      	b.n	8002328 <LoopCopyDataInit>

08002320 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002322:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002324:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002326:	3104      	adds	r1, #4

08002328 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002328:	480a      	ldr	r0, [pc, #40]	; (8002354 <LoopForever+0xa>)
	ldr	r3, =_edata
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <LoopForever+0xe>)
	adds	r2, r0, r1
 800232c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800232e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002330:	d3f6      	bcc.n	8002320 <CopyDataInit>
	ldr	r2, =_sbss
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002334:	e002      	b.n	800233c <LoopFillZerobss>

08002336 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002336:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002338:	f842 3b04 	str.w	r3, [r2], #4

0800233c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <LoopForever+0x16>)
	cmp	r2, r3
 800233e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002340:	d3f9      	bcc.n	8002336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002342:	f00a fe6f 	bl	800d024 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002346:	f7fe f9e3 	bl	8000710 <main>

0800234a <LoopForever>:

LoopForever:
    b LoopForever
 800234a:	e7fe      	b.n	800234a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800234c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8002350:	0800de94 	.word	0x0800de94
	ldr	r0, =_sdata
 8002354:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002358:	20000064 	.word	0x20000064
	ldr	r2, =_sbss
 800235c:	20000064 	.word	0x20000064
	ldr	r3, = _ebss
 8002360:	20003788 	.word	0x20003788

08002364 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002364:	e7fe      	b.n	8002364 <COMP_IRQHandler>

08002366 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002370:	2004      	movs	r0, #4
 8002372:	f001 fe20 	bl	8003fb6 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8002376:	f7ff ff1f 	bl	80021b8 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800237a:	2007      	movs	r0, #7
 800237c:	f7ff fe36 	bl	8001fec <HAL_InitTick>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	71fb      	strb	r3, [r7, #7]
 800238a:	e001      	b.n	8002390 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800238c:	f7ff f956 	bl	800163c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002390:	79fb      	ldrb	r3, [r7, #7]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_IncTick+0x20>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_IncTick+0x24>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4413      	add	r3, r2
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <HAL_IncTick+0x24>)
 80023ae:	6013      	str	r3, [r2, #0]
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	2000000c 	.word	0x2000000c
 80023c0:	200008f4 	.word	0x200008f4

080023c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return uwTick;
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <HAL_GetTick+0x14>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	200008f4 	.word	0x200008f4

080023dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	609a      	str	r2, [r3, #8]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	609a      	str	r2, [r3, #8]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	3360      	adds	r3, #96	; 0x60
 8002456:	461a      	mov	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <LL_ADC_SetOffset+0x44>)
 8002466:	4013      	ands	r3, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	4313      	orrs	r3, r2
 8002474:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800247c:	bf00      	nop
 800247e:	371c      	adds	r7, #28
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	03fff000 	.word	0x03fff000

0800248c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3360      	adds	r3, #96	; 0x60
 800249a:	461a      	mov	r2, r3
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	3360      	adds	r3, #96	; 0x60
 80024c8:	461a      	mov	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	431a      	orrs	r2, r3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024e2:	bf00      	nop
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	615a      	str	r2, [r3, #20]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800253a:	b480      	push	{r7}
 800253c:	b087      	sub	sp, #28
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3330      	adds	r3, #48	; 0x30
 800254a:	461a      	mov	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	0a1b      	lsrs	r3, r3, #8
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	4413      	add	r3, r2
 8002558:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	211f      	movs	r1, #31
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	401a      	ands	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	0e9b      	lsrs	r3, r3, #26
 8002572:	f003 011f 	and.w	r1, r3, #31
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	431a      	orrs	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002586:	bf00      	nop
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3314      	adds	r3, #20
 80025c8:	461a      	mov	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	0e5b      	lsrs	r3, r3, #25
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	4413      	add	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	0d1b      	lsrs	r3, r3, #20
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	2107      	movs	r1, #7
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	401a      	ands	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	0d1b      	lsrs	r3, r3, #20
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
 80025fc:	431a      	orrs	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002602:	bf00      	nop
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002628:	43db      	mvns	r3, r3
 800262a:	401a      	ands	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0318 	and.w	r3, r3, #24
 8002632:	4908      	ldr	r1, [pc, #32]	; (8002654 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002634:	40d9      	lsrs	r1, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	400b      	ands	r3, r1
 800263a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263e:	431a      	orrs	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	0007ffff 	.word	0x0007ffff

08002658 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 031f 	and.w	r3, r3, #31
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80026a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6093      	str	r3, [r2, #8]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c8:	d101      	bne.n	80026ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002714:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002718:	d101      	bne.n	800271e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800273c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002764:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002768:	f043 0202 	orr.w	r2, r3, #2
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <LL_ADC_IsEnabled+0x18>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <LL_ADC_IsEnabled+0x1a>
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d101      	bne.n	80027ba <LL_ADC_IsDisableOngoing+0x18>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <LL_ADC_IsDisableOngoing+0x1a>
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027dc:	f043 0204 	orr.w	r2, r3, #4
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b04      	cmp	r3, #4
 8002802:	d101      	bne.n	8002808 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b08      	cmp	r3, #8
 8002828:	d101      	bne.n	800282e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b089      	sub	sp, #36	; 0x24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e12e      	b.n	8002ab4 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	2b00      	cmp	r3, #0
 8002862:	d109      	bne.n	8002878 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7fe ff11 	bl	800168c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff19 	bl	80026b4 <LL_ADC_IsDeepPowerDownEnabled>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff feff 	bl	8002690 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ff34 	bl	8002704 <LL_ADC_IsInternalRegulatorEnabled>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d115      	bne.n	80028ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ff18 	bl	80026dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028ac:	4b83      	ldr	r3, [pc, #524]	; (8002abc <HAL_ADC_Init+0x280>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	099b      	lsrs	r3, r3, #6
 80028b2:	4a83      	ldr	r2, [pc, #524]	; (8002ac0 <HAL_ADC_Init+0x284>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	3301      	adds	r3, #1
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028c0:	e002      	b.n	80028c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f9      	bne.n	80028c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ff16 	bl	8002704 <LL_ADC_IsInternalRegulatorEnabled>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10d      	bne.n	80028fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	f043 0210 	orr.w	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ee:	f043 0201 	orr.w	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ff76 	bl	80027f0 <LL_ADC_REG_IsConversionOngoing>
 8002904:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 80c7 	bne.w	8002aa2 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 80c3 	bne.w	8002aa2 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002924:	f043 0202 	orr.w	r2, r3, #2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff23 	bl	800277c <LL_ADC_IsEnabled>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d110      	bne.n	800295e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800293c:	4861      	ldr	r0, [pc, #388]	; (8002ac4 <HAL_ADC_Init+0x288>)
 800293e:	f7ff ff1d 	bl	800277c <LL_ADC_IsEnabled>
 8002942:	4604      	mov	r4, r0
 8002944:	4860      	ldr	r0, [pc, #384]	; (8002ac8 <HAL_ADC_Init+0x28c>)
 8002946:	f7ff ff19 	bl	800277c <LL_ADC_IsEnabled>
 800294a:	4603      	mov	r3, r0
 800294c:	4323      	orrs	r3, r4
 800294e:	2b00      	cmp	r3, #0
 8002950:	d105      	bne.n	800295e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4619      	mov	r1, r3
 8002958:	485c      	ldr	r0, [pc, #368]	; (8002acc <HAL_ADC_Init+0x290>)
 800295a:	f7ff fd3f 	bl	80023dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7e5b      	ldrb	r3, [r3, #25]
 8002962:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002968:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800296e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002974:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800297c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d106      	bne.n	800299a <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	3b01      	subs	r3, #1
 8002992:	045b      	lsls	r3, r3, #17
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	4b44      	ldr	r3, [pc, #272]	; (8002ad0 <HAL_ADC_Init+0x294>)
 80029be:	4013      	ands	r3, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	69b9      	ldr	r1, [r7, #24]
 80029c6:	430b      	orrs	r3, r1
 80029c8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff ff21 	bl	8002816 <LL_ADC_INJ_IsConversionOngoing>
 80029d4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d140      	bne.n	8002a5e <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d13d      	bne.n	8002a5e <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	7e1b      	ldrb	r3, [r3, #24]
 80029ea:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029ec:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029f4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a04:	f023 0306 	bic.w	r3, r3, #6
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	69b9      	ldr	r1, [r7, #24]
 8002a0e:	430b      	orrs	r3, r1
 8002a10:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d118      	bne.n	8002a4e <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a26:	f023 0304 	bic.w	r3, r3, #4
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a32:	4311      	orrs	r1, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a38:	4311      	orrs	r1, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	611a      	str	r2, [r3, #16]
 8002a4c:	e007      	b.n	8002a5e <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d10c      	bne.n	8002a80 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	f023 010f 	bic.w	r1, r3, #15
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	1e5a      	subs	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a7e:	e007      	b.n	8002a90 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 020f 	bic.w	r2, r2, #15
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	f023 0303 	bic.w	r3, r3, #3
 8002a98:	f043 0201 	orr.w	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	659a      	str	r2, [r3, #88]	; 0x58
 8002aa0:	e007      	b.n	8002ab2 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	f043 0210 	orr.w	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ab2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3724      	adds	r7, #36	; 0x24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd90      	pop	{r4, r7, pc}
 8002abc:	20000004 	.word	0x20000004
 8002ac0:	053e2d63 	.word	0x053e2d63
 8002ac4:	42028000 	.word	0x42028000
 8002ac8:	42028100 	.word	0x42028100
 8002acc:	42028300 	.word	0x42028300
 8002ad0:	fff0c007 	.word	0xfff0c007

08002ad4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002adc:	4891      	ldr	r0, [pc, #580]	; (8002d24 <HAL_ADC_Start_IT+0x250>)
 8002ade:	f7ff fdbb 	bl	8002658 <LL_ADC_GetMultimode>
 8002ae2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fe81 	bl	80027f0 <LL_ADC_REG_IsConversionOngoing>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 8110 	bne.w	8002d16 <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_ADC_Start_IT+0x30>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e10b      	b.n	8002d1c <HAL_ADC_Start_IT+0x248>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 ff35 	bl	800397c <ADC_Enable>
 8002b12:	4603      	mov	r3, r0
 8002b14:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f040 80f7 	bne.w	8002d0c <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a7c      	ldr	r2, [pc, #496]	; (8002d28 <HAL_ADC_Start_IT+0x254>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d002      	beq.n	8002b42 <HAL_ADC_Start_IT+0x6e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	e000      	b.n	8002b44 <HAL_ADC_Start_IT+0x70>
 8002b42:	4b7a      	ldr	r3, [pc, #488]	; (8002d2c <HAL_ADC_Start_IT+0x258>)
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d002      	beq.n	8002b52 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d105      	bne.n	8002b5e <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d006      	beq.n	8002b78 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6e:	f023 0206 	bic.w	r2, r3, #6
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b76:	e002      	b.n	8002b7e <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	221c      	movs	r2, #28
 8002b84:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 021c 	bic.w	r2, r2, #28
 8002b9c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d108      	bne.n	8002bb8 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0208 	orr.w	r2, r2, #8
 8002bb4:	605a      	str	r2, [r3, #4]
          break;
 8002bb6:	e008      	b.n	8002bca <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0204 	orr.w	r2, r2, #4
 8002bc6:	605a      	str	r2, [r3, #4]
          break;
 8002bc8:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d107      	bne.n	8002be2 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0210 	orr.w	r2, r2, #16
 8002be0:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a50      	ldr	r2, [pc, #320]	; (8002d28 <HAL_ADC_Start_IT+0x254>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d002      	beq.n	8002bf2 <HAL_ADC_Start_IT+0x11e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	e000      	b.n	8002bf4 <HAL_ADC_Start_IT+0x120>
 8002bf2:	4b4e      	ldr	r3, [pc, #312]	; (8002d2c <HAL_ADC_Start_IT+0x258>)
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d008      	beq.n	8002c0e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d002      	beq.n	8002c0e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b09      	cmp	r3, #9
 8002c0c:	d13a      	bne.n	8002c84 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d02d      	beq.n	8002c78 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d110      	bne.n	8002c56 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0220 	bic.w	r2, r2, #32
 8002c42:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c52:	605a      	str	r2, [r3, #4]
              break;
 8002c54:	e010      	b.n	8002c78 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c64:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0220 	orr.w	r2, r2, #32
 8002c74:	605a      	str	r2, [r3, #4]
              break;
 8002c76:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fda3 	bl	80027c8 <LL_ADC_REG_StartConversion>
 8002c82:	e04a      	b.n	8002d1a <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c88:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a24      	ldr	r2, [pc, #144]	; (8002d28 <HAL_ADC_Start_IT+0x254>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d002      	beq.n	8002ca0 <HAL_ADC_Start_IT+0x1cc>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	e000      	b.n	8002ca2 <HAL_ADC_Start_IT+0x1ce>
 8002ca0:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <HAL_ADC_Start_IT+0x258>)
 8002ca2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d034      	beq.n	8002d1a <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	659a      	str	r2, [r3, #88]	; 0x58
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d110      	bne.n	8002cea <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0220 	bic.w	r2, r2, #32
 8002cd6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce6:	605a      	str	r2, [r3, #4]
              break;
 8002ce8:	e017      	b.n	8002d1a <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0220 	orr.w	r2, r2, #32
 8002d08:	605a      	str	r2, [r3, #4]
              break;
 8002d0a:	e006      	b.n	8002d1a <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002d14:	e001      	b.n	8002d1a <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
 8002d18:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	42028300 	.word	0x42028300
 8002d28:	42028100 	.word	0x42028100
 8002d2c:	42028000 	.word	0x42028000

08002d30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	; 0x28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002d54:	2300      	movs	r3, #0
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d68:	4882      	ldr	r0, [pc, #520]	; (8002f74 <HAL_ADC_IRQHandler+0x228>)
 8002d6a:	f7ff fc75 	bl	8002658 <LL_ADC_GetMultimode>
 8002d6e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d017      	beq.n	8002daa <HAL_ADC_IRQHandler+0x5e>
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d012      	beq.n	8002daa <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 ffaf 	bl	8003d00 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2202      	movs	r2, #2
 8002da8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d004      	beq.n	8002dbe <HAL_ADC_IRQHandler+0x72>
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10a      	bne.n	8002dd4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8083 	beq.w	8002ed0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d07d      	beq.n	8002ed0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fb8f 	bl	8002514 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d062      	beq.n	8002ec2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a5d      	ldr	r2, [pc, #372]	; (8002f78 <HAL_ADC_IRQHandler+0x22c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d002      	beq.n	8002e0c <HAL_ADC_IRQHandler+0xc0>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	e000      	b.n	8002e0e <HAL_ADC_IRQHandler+0xc2>
 8002e0c:	4b5b      	ldr	r3, [pc, #364]	; (8002f7c <HAL_ADC_IRQHandler+0x230>)
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d008      	beq.n	8002e28 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2b05      	cmp	r3, #5
 8002e20:	d002      	beq.n	8002e28 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b09      	cmp	r3, #9
 8002e26:	d104      	bne.n	8002e32 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	623b      	str	r3, [r7, #32]
 8002e30:	e00c      	b.n	8002e4c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a50      	ldr	r2, [pc, #320]	; (8002f78 <HAL_ADC_IRQHandler+0x22c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d002      	beq.n	8002e42 <HAL_ADC_IRQHandler+0xf6>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	e000      	b.n	8002e44 <HAL_ADC_IRQHandler+0xf8>
 8002e42:	4b4e      	ldr	r3, [pc, #312]	; (8002f7c <HAL_ADC_IRQHandler+0x230>)
 8002e44:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d135      	bne.n	8002ec2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d12e      	bne.n	8002ec2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fcc1 	bl	80027f0 <LL_ADC_REG_IsConversionOngoing>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d11a      	bne.n	8002eaa <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 020c 	bic.w	r2, r2, #12
 8002e82:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d112      	bne.n	8002ec2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ea8:	e00b      	b.n	8002ec2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	f043 0210 	orr.w	r2, r3, #16
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	f043 0201 	orr.w	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fd fb5e 	bl	8000584 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	220c      	movs	r2, #12
 8002ece:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d004      	beq.n	8002ee4 <HAL_ADC_IRQHandler+0x198>
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 809f 	beq.w	800302e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 8099 	beq.w	800302e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d105      	bne.n	8002f14 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fb3a 	bl	8002592 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f1e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff faf5 	bl	8002514 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f2a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a11      	ldr	r2, [pc, #68]	; (8002f78 <HAL_ADC_IRQHandler+0x22c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d002      	beq.n	8002f3c <HAL_ADC_IRQHandler+0x1f0>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	e000      	b.n	8002f3e <HAL_ADC_IRQHandler+0x1f2>
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <HAL_ADC_IRQHandler+0x230>)
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d008      	beq.n	8002f58 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b06      	cmp	r3, #6
 8002f50:	d002      	beq.n	8002f58 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b07      	cmp	r3, #7
 8002f56:	d104      	bne.n	8002f62 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	623b      	str	r3, [r7, #32]
 8002f60:	e013      	b.n	8002f8a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a04      	ldr	r2, [pc, #16]	; (8002f78 <HAL_ADC_IRQHandler+0x22c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d009      	beq.n	8002f80 <HAL_ADC_IRQHandler+0x234>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	e007      	b.n	8002f82 <HAL_ADC_IRQHandler+0x236>
 8002f72:	bf00      	nop
 8002f74:	42028300 	.word	0x42028300
 8002f78:	42028100 	.word	0x42028100
 8002f7c:	42028000 	.word	0x42028000
 8002f80:	4b7d      	ldr	r3, [pc, #500]	; (8003178 <HAL_ADC_IRQHandler+0x42c>)
 8002f82:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d047      	beq.n	8003020 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <HAL_ADC_IRQHandler+0x25e>
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d03f      	beq.n	8003020 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d13a      	bne.n	8003020 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb4:	2b40      	cmp	r3, #64	; 0x40
 8002fb6:	d133      	bne.n	8003020 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d12e      	bne.n	8003020 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fc25 	bl	8002816 <LL_ADC_INJ_IsConversionOngoing>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d11a      	bne.n	8003008 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fe0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d112      	bne.n	8003020 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	659a      	str	r2, [r3, #88]	; 0x58
 8003006:	e00b      	b.n	8003020 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300c:	f043 0210 	orr.w	r2, r3, #16
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003018:	f043 0201 	orr.w	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fe45 	bl	8003cb0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2260      	movs	r2, #96	; 0x60
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003034:	2b00      	cmp	r3, #0
 8003036:	d011      	beq.n	800305c <HAL_ADC_IRQHandler+0x310>
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00c      	beq.n	800305c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f896 	bl	8003180 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2280      	movs	r2, #128	; 0x80
 800305a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d012      	beq.n	800308c <HAL_ADC_IRQHandler+0x340>
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00d      	beq.n	800308c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003074:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fe2b 	bl	8003cd8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800308a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003092:	2b00      	cmp	r3, #0
 8003094:	d012      	beq.n	80030bc <HAL_ADC_IRQHandler+0x370>
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00d      	beq.n	80030bc <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fe1d 	bl	8003cec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d036      	beq.n	8003134 <HAL_ADC_IRQHandler+0x3e8>
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d031      	beq.n	8003134 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80030d8:	2301      	movs	r3, #1
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
 80030dc:	e014      	b.n	8003108 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80030e4:	4825      	ldr	r0, [pc, #148]	; (800317c <HAL_ADC_IRQHandler+0x430>)
 80030e6:	f7ff fac5 	bl	8002674 <LL_ADC_GetMultiDMATransfer>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00b      	beq.n	8003108 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80030f0:	2301      	movs	r3, #1
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
 80030f4:	e008      	b.n	8003108 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003104:	2301      	movs	r3, #1
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	2b01      	cmp	r3, #1
 800310c:	d10e      	bne.n	800312c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003112:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	f043 0202 	orr.w	r2, r3, #2
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f834 	bl	8003194 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2210      	movs	r2, #16
 8003132:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313a:	2b00      	cmp	r3, #0
 800313c:	d018      	beq.n	8003170 <HAL_ADC_IRQHandler+0x424>
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003144:	2b00      	cmp	r3, #0
 8003146:	d013      	beq.n	8003170 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003158:	f043 0208 	orr.w	r2, r3, #8
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003168:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fdaa 	bl	8003cc4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003170:	bf00      	nop
 8003172:	3728      	adds	r7, #40	; 0x28
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	42028000 	.word	0x42028000
 800317c:	42028300 	.word	0x42028300

08003180 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b0b7      	sub	sp, #220	; 0xdc
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x22>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e3c1      	b.n	800394e <HAL_ADC_ConfigChannel+0x7a6>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fb0a 	bl	80027f0 <LL_ADC_REG_IsConversionOngoing>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 83a6 	bne.w	8003930 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	f7ff f9a2 	bl	800253a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff faf8 	bl	80027f0 <LL_ADC_REG_IsConversionOngoing>
 8003200:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fb04 	bl	8002816 <LL_ADC_INJ_IsConversionOngoing>
 800320e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003212:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003216:	2b00      	cmp	r3, #0
 8003218:	f040 81c1 	bne.w	800359e <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800321c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003220:	2b00      	cmp	r3, #0
 8003222:	f040 81bc 	bne.w	800359e <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800322e:	d10f      	bne.n	8003250 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2200      	movs	r2, #0
 800323a:	4619      	mov	r1, r3
 800323c:	f7ff f9bc 	bl	80025b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff f950 	bl	80024ee <LL_ADC_SetSamplingTimeCommonConfig>
 800324e:	e00e      	b.n	800326e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6819      	ldr	r1, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	461a      	mov	r2, r3
 800325e:	f7ff f9ab 	bl	80025b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff f940 	bl	80024ee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	08db      	lsrs	r3, r3, #3
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b04      	cmp	r3, #4
 800328e:	d00a      	beq.n	80032a6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	6919      	ldr	r1, [r3, #16]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032a0:	f7ff f8d0 	bl	8002444 <LL_ADC_SetOffset>
 80032a4:	e17b      	b.n	800359e <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2100      	movs	r1, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff f8ed 	bl	800248c <LL_ADC_GetOffsetChannel>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10a      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x12a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff f8e2 	bl	800248c <LL_ADC_GetOffsetChannel>
 80032c8:	4603      	mov	r3, r0
 80032ca:	0e9b      	lsrs	r3, r3, #26
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	e01e      	b.n	8003310 <HAL_ADC_ConfigChannel+0x168>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff f8d7 	bl	800248c <LL_ADC_GetOffsetChannel>
 80032de:	4603      	mov	r3, r0
 80032e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8003300:	2320      	movs	r3, #32
 8003302:	e004      	b.n	800330e <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8003304:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003308:	fab3 f383 	clz	r3, r3
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x180>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	0e9b      	lsrs	r3, r3, #26
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	e018      	b.n	800335a <HAL_ADC_ConfigChannel+0x1b2>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800333c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003344:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 800334c:	2320      	movs	r3, #32
 800334e:	e004      	b.n	800335a <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8003350:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003354:	fab3 f383 	clz	r3, r3
 8003358:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800335a:	429a      	cmp	r2, r3
 800335c:	d106      	bne.n	800336c <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2200      	movs	r2, #0
 8003364:	2100      	movs	r1, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff f8a6 	bl	80024b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2101      	movs	r1, #1
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff f88a 	bl	800248c <LL_ADC_GetOffsetChannel>
 8003378:	4603      	mov	r3, r0
 800337a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10a      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x1f0>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2101      	movs	r1, #1
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff f87f 	bl	800248c <LL_ADC_GetOffsetChannel>
 800338e:	4603      	mov	r3, r0
 8003390:	0e9b      	lsrs	r3, r3, #26
 8003392:	f003 021f 	and.w	r2, r3, #31
 8003396:	e01e      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x22e>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2101      	movs	r1, #1
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff f874 	bl	800248c <LL_ADC_GetOffsetChannel>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80033b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80033be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80033c6:	2320      	movs	r3, #32
 80033c8:	e004      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80033ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d105      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x246>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	0e9b      	lsrs	r3, r3, #26
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	e018      	b.n	8003420 <HAL_ADC_ConfigChannel+0x278>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033fa:	fa93 f3a3 	rbit	r3, r3
 80033fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003402:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003406:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800340a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8003412:	2320      	movs	r3, #32
 8003414:	e004      	b.n	8003420 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8003416:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003420:	429a      	cmp	r2, r3
 8003422:	d106      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2200      	movs	r2, #0
 800342a:	2101      	movs	r1, #1
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff f843 	bl	80024b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2102      	movs	r1, #2
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff f827 	bl	800248c <LL_ADC_GetOffsetChannel>
 800343e:	4603      	mov	r3, r0
 8003440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10a      	bne.n	800345e <HAL_ADC_ConfigChannel+0x2b6>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2102      	movs	r1, #2
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff f81c 	bl	800248c <LL_ADC_GetOffsetChannel>
 8003454:	4603      	mov	r3, r0
 8003456:	0e9b      	lsrs	r3, r3, #26
 8003458:	f003 021f 	and.w	r2, r3, #31
 800345c:	e01e      	b.n	800349c <HAL_ADC_ConfigChannel+0x2f4>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2102      	movs	r1, #2
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff f811 	bl	800248c <LL_ADC_GetOffsetChannel>
 800346a:	4603      	mov	r3, r0
 800346c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800347c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003480:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003484:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 800348c:	2320      	movs	r3, #32
 800348e:	e004      	b.n	800349a <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8003490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003494:	fab3 f383 	clz	r3, r3
 8003498:	b2db      	uxtb	r3, r3
 800349a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d105      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x30c>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	0e9b      	lsrs	r3, r3, #26
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	e016      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x33a>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80034c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80034cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80034d4:	2320      	movs	r3, #32
 80034d6:	e004      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80034d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034dc:	fab3 f383 	clz	r3, r3
 80034e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d106      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2200      	movs	r2, #0
 80034ec:	2102      	movs	r1, #2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe ffe2 	bl	80024b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2103      	movs	r1, #3
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe ffc6 	bl	800248c <LL_ADC_GetOffsetChannel>
 8003500:	4603      	mov	r3, r0
 8003502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10a      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x378>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2103      	movs	r1, #3
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe ffbb 	bl	800248c <LL_ADC_GetOffsetChannel>
 8003516:	4603      	mov	r3, r0
 8003518:	0e9b      	lsrs	r3, r3, #26
 800351a:	f003 021f 	and.w	r2, r3, #31
 800351e:	e017      	b.n	8003550 <HAL_ADC_ConfigChannel+0x3a8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2103      	movs	r1, #3
 8003526:	4618      	mov	r0, r3
 8003528:	f7fe ffb0 	bl	800248c <LL_ADC_GetOffsetChannel>
 800352c:	4603      	mov	r3, r0
 800352e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003532:	fa93 f3a3 	rbit	r3, r3
 8003536:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800353a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800353c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8003542:	2320      	movs	r3, #32
 8003544:	e003      	b.n	800354e <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8003546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003548:	fab3 f383 	clz	r3, r3
 800354c:	b2db      	uxtb	r3, r3
 800354e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003558:	2b00      	cmp	r3, #0
 800355a:	d105      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x3c0>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	0e9b      	lsrs	r3, r3, #26
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	e011      	b.n	800358c <HAL_ADC_ConfigChannel+0x3e4>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003570:	fa93 f3a3 	rbit	r3, r3
 8003574:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003578:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800357a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8003580:	2320      	movs	r3, #32
 8003582:	e003      	b.n	800358c <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8003584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003586:	fab3 f383 	clz	r3, r3
 800358a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800358c:	429a      	cmp	r2, r3
 800358e:	d106      	bne.n	800359e <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2200      	movs	r2, #0
 8003596:	2103      	movs	r1, #3
 8003598:	4618      	mov	r0, r3
 800359a:	f7fe ff8d 	bl	80024b8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff f8ea 	bl	800277c <LL_ADC_IsEnabled>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f040 81c9 	bne.w	8003942 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6819      	ldr	r1, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	461a      	mov	r2, r3
 80035be:	f7ff f827 	bl	8002610 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	4a8f      	ldr	r2, [pc, #572]	; (8003804 <HAL_ADC_ConfigChannel+0x65c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	f040 8131 	bne.w	8003830 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x44e>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	0e9b      	lsrs	r3, r3, #26
 80035e4:	3301      	adds	r3, #1
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2b09      	cmp	r3, #9
 80035ec:	bf94      	ite	ls
 80035ee:	2301      	movls	r3, #1
 80035f0:	2300      	movhi	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e019      	b.n	800362a <HAL_ADC_ConfigChannel+0x482>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003606:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800360e:	2320      	movs	r3, #32
 8003610:	e003      	b.n	800361a <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8003612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	3301      	adds	r3, #1
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2b09      	cmp	r3, #9
 8003622:	bf94      	ite	ls
 8003624:	2301      	movls	r3, #1
 8003626:	2300      	movhi	r3, #0
 8003628:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800362a:	2b00      	cmp	r3, #0
 800362c:	d079      	beq.n	8003722 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003636:	2b00      	cmp	r3, #0
 8003638:	d107      	bne.n	800364a <HAL_ADC_ConfigChannel+0x4a2>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	0e9b      	lsrs	r3, r3, #26
 8003640:	3301      	adds	r3, #1
 8003642:	069b      	lsls	r3, r3, #26
 8003644:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003648:	e015      	b.n	8003676 <HAL_ADC_ConfigChannel+0x4ce>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003652:	fa93 f3a3 	rbit	r3, r3
 8003656:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800365a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800365c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003662:	2320      	movs	r3, #32
 8003664:	e003      	b.n	800366e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003668:	fab3 f383 	clz	r3, r3
 800366c:	b2db      	uxtb	r3, r3
 800366e:	3301      	adds	r3, #1
 8003670:	069b      	lsls	r3, r3, #26
 8003672:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x4ee>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	0e9b      	lsrs	r3, r3, #26
 8003688:	3301      	adds	r3, #1
 800368a:	f003 031f 	and.w	r3, r3, #31
 800368e:	2101      	movs	r1, #1
 8003690:	fa01 f303 	lsl.w	r3, r1, r3
 8003694:	e017      	b.n	80036c6 <HAL_ADC_ConfigChannel+0x51e>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80036a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80036a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80036ae:	2320      	movs	r3, #32
 80036b0:	e003      	b.n	80036ba <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80036b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b4:	fab3 f383 	clz	r3, r3
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	2101      	movs	r1, #1
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	ea42 0103 	orr.w	r1, r2, r3
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x544>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	0e9b      	lsrs	r3, r3, #26
 80036dc:	3301      	adds	r3, #1
 80036de:	f003 021f 	and.w	r2, r3, #31
 80036e2:	4613      	mov	r3, r2
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	4413      	add	r3, r2
 80036e8:	051b      	lsls	r3, r3, #20
 80036ea:	e018      	b.n	800371e <HAL_ADC_ConfigChannel+0x576>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80036fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003704:	2320      	movs	r3, #32
 8003706:	e003      	b.n	8003710 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	3301      	adds	r3, #1
 8003712:	f003 021f 	and.w	r2, r3, #31
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800371e:	430b      	orrs	r3, r1
 8003720:	e081      	b.n	8003826 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372a:	2b00      	cmp	r3, #0
 800372c:	d107      	bne.n	800373e <HAL_ADC_ConfigChannel+0x596>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	0e9b      	lsrs	r3, r3, #26
 8003734:	3301      	adds	r3, #1
 8003736:	069b      	lsls	r3, r3, #26
 8003738:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800373c:	e015      	b.n	800376a <HAL_ADC_ConfigChannel+0x5c2>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8003756:	2320      	movs	r3, #32
 8003758:	e003      	b.n	8003762 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	fab3 f383 	clz	r3, r3
 8003760:	b2db      	uxtb	r3, r3
 8003762:	3301      	adds	r3, #1
 8003764:	069b      	lsls	r3, r3, #26
 8003766:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_ADC_ConfigChannel+0x5e2>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	0e9b      	lsrs	r3, r3, #26
 800377c:	3301      	adds	r3, #1
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	2101      	movs	r1, #1
 8003784:	fa01 f303 	lsl.w	r3, r1, r3
 8003788:	e017      	b.n	80037ba <HAL_ADC_ConfigChannel+0x612>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	fa93 f3a3 	rbit	r3, r3
 8003796:	61fb      	str	r3, [r7, #28]
  return result;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80037a2:	2320      	movs	r3, #32
 80037a4:	e003      	b.n	80037ae <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	3301      	adds	r3, #1
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	2101      	movs	r1, #1
 80037b6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ba:	ea42 0103 	orr.w	r1, r2, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10d      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x63e>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	0e9b      	lsrs	r3, r3, #26
 80037d0:	3301      	adds	r3, #1
 80037d2:	f003 021f 	and.w	r2, r3, #31
 80037d6:	4613      	mov	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	3b1e      	subs	r3, #30
 80037de:	051b      	lsls	r3, r3, #20
 80037e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037e4:	e01e      	b.n	8003824 <HAL_ADC_ConfigChannel+0x67c>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	613b      	str	r3, [r7, #16]
  return result;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80037fe:	2320      	movs	r3, #32
 8003800:	e006      	b.n	8003810 <HAL_ADC_ConfigChannel+0x668>
 8003802:	bf00      	nop
 8003804:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	3301      	adds	r3, #1
 8003812:	f003 021f 	and.w	r2, r3, #31
 8003816:	4613      	mov	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	4413      	add	r3, r2
 800381c:	3b1e      	subs	r3, #30
 800381e:	051b      	lsls	r3, r3, #20
 8003820:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003824:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800382a:	4619      	mov	r1, r3
 800382c:	f7fe fec4 	bl	80025b8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b48      	ldr	r3, [pc, #288]	; (8003958 <HAL_ADC_ConfigChannel+0x7b0>)
 8003836:	4013      	ands	r3, r2
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8082 	beq.w	8003942 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800383e:	4847      	ldr	r0, [pc, #284]	; (800395c <HAL_ADC_ConfigChannel+0x7b4>)
 8003840:	f7fe fdf2 	bl	8002428 <LL_ADC_GetCommonPathInternalCh>
 8003844:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003848:	4845      	ldr	r0, [pc, #276]	; (8003960 <HAL_ADC_ConfigChannel+0x7b8>)
 800384a:	f7fe ff97 	bl	800277c <LL_ADC_IsEnabled>
 800384e:	4604      	mov	r4, r0
 8003850:	4844      	ldr	r0, [pc, #272]	; (8003964 <HAL_ADC_ConfigChannel+0x7bc>)
 8003852:	f7fe ff93 	bl	800277c <LL_ADC_IsEnabled>
 8003856:	4603      	mov	r3, r0
 8003858:	4323      	orrs	r3, r4
 800385a:	2b00      	cmp	r3, #0
 800385c:	d15e      	bne.n	800391c <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a41      	ldr	r2, [pc, #260]	; (8003968 <HAL_ADC_ConfigChannel+0x7c0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d127      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800386c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d121      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a39      	ldr	r2, [pc, #228]	; (8003960 <HAL_ADC_ConfigChannel+0x7b8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d161      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800387e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003882:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003886:	4619      	mov	r1, r3
 8003888:	4834      	ldr	r0, [pc, #208]	; (800395c <HAL_ADC_ConfigChannel+0x7b4>)
 800388a:	f7fe fdba 	bl	8002402 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800388e:	4b37      	ldr	r3, [pc, #220]	; (800396c <HAL_ADC_ConfigChannel+0x7c4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	099b      	lsrs	r3, r3, #6
 8003894:	4a36      	ldr	r2, [pc, #216]	; (8003970 <HAL_ADC_ConfigChannel+0x7c8>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	099b      	lsrs	r3, r3, #6
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	4613      	mov	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80038a6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80038a8:	e002      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f9      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038b6:	e044      	b.n	8003942 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2d      	ldr	r2, [pc, #180]	; (8003974 <HAL_ADC_ConfigChannel+0x7cc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d113      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10d      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a23      	ldr	r2, [pc, #140]	; (8003960 <HAL_ADC_ConfigChannel+0x7b8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d134      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038e0:	4619      	mov	r1, r3
 80038e2:	481e      	ldr	r0, [pc, #120]	; (800395c <HAL_ADC_ConfigChannel+0x7b4>)
 80038e4:	f7fe fd8d 	bl	8002402 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038e8:	e02b      	b.n	8003942 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a22      	ldr	r2, [pc, #136]	; (8003978 <HAL_ADC_ConfigChannel+0x7d0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d126      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d120      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a16      	ldr	r2, [pc, #88]	; (8003960 <HAL_ADC_ConfigChannel+0x7b8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d11b      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800390a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800390e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003912:	4619      	mov	r1, r3
 8003914:	4811      	ldr	r0, [pc, #68]	; (800395c <HAL_ADC_ConfigChannel+0x7b4>)
 8003916:	f7fe fd74 	bl	8002402 <LL_ADC_SetCommonPathInternalCh>
 800391a:	e012      	b.n	8003942 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	f043 0220 	orr.w	r2, r3, #32
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800392e:	e008      	b.n	8003942 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800394a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800394e:	4618      	mov	r0, r3
 8003950:	37dc      	adds	r7, #220	; 0xdc
 8003952:	46bd      	mov	sp, r7
 8003954:	bd90      	pop	{r4, r7, pc}
 8003956:	bf00      	nop
 8003958:	80080000 	.word	0x80080000
 800395c:	42028300 	.word	0x42028300
 8003960:	42028000 	.word	0x42028000
 8003964:	42028100 	.word	0x42028100
 8003968:	c7520000 	.word	0xc7520000
 800396c:	20000004 	.word	0x20000004
 8003970:	053e2d63 	.word	0x053e2d63
 8003974:	cb840000 	.word	0xcb840000
 8003978:	80000001 	.word	0x80000001

0800397c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003984:	2300      	movs	r3, #0
 8003986:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7fe fef5 	bl	800277c <LL_ADC_IsEnabled>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d169      	bne.n	8003a6c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <ADC_Enable+0xfc>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00d      	beq.n	80039c2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	f043 0210 	orr.w	r2, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b6:	f043 0201 	orr.w	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e055      	b.n	8003a6e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe feb0 	bl	800272c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039cc:	482b      	ldr	r0, [pc, #172]	; (8003a7c <ADC_Enable+0x100>)
 80039ce:	f7fe fd2b 	bl	8002428 <LL_ADC_GetCommonPathInternalCh>
 80039d2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80039d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d013      	beq.n	8003a04 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039dc:	4b28      	ldr	r3, [pc, #160]	; (8003a80 <ADC_Enable+0x104>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	099b      	lsrs	r3, r3, #6
 80039e2:	4a28      	ldr	r2, [pc, #160]	; (8003a84 <ADC_Enable+0x108>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	099b      	lsrs	r3, r3, #6
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039f6:	e002      	b.n	80039fe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f9      	bne.n	80039f8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a04:	f7fe fcde 	bl	80023c4 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a0a:	e028      	b.n	8003a5e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe feb3 	bl	800277c <LL_ADC_IsEnabled>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d104      	bne.n	8003a26 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe fe83 	bl	800272c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a26:	f7fe fccd 	bl	80023c4 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d914      	bls.n	8003a5e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d00d      	beq.n	8003a5e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	f043 0210 	orr.w	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	f043 0201 	orr.w	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e007      	b.n	8003a6e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d1cf      	bne.n	8003a0c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	8000003f 	.word	0x8000003f
 8003a7c:	42028300 	.word	0x42028300
 8003a80:	20000004 	.word	0x20000004
 8003a84:	053e2d63 	.word	0x053e2d63

08003a88 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fe fe84 	bl	80027a2 <LL_ADC_IsDisableOngoing>
 8003a9a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe fe6b 	bl	800277c <LL_ADC_IsEnabled>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d047      	beq.n	8003b3c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d144      	bne.n	8003b3c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 030d 	and.w	r3, r3, #13
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10c      	bne.n	8003ada <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fe fe45 	bl	8002754 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2203      	movs	r2, #3
 8003ad0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ad2:	f7fe fc77 	bl	80023c4 <HAL_GetTick>
 8003ad6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ad8:	e029      	b.n	8003b2e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ade:	f043 0210 	orr.w	r2, r3, #16
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	f043 0201 	orr.w	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e023      	b.n	8003b3e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003af6:	f7fe fc65 	bl	80023c4 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d914      	bls.n	8003b2e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00d      	beq.n	8003b2e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b16:	f043 0210 	orr.w	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b22:	f043 0201 	orr.w	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e007      	b.n	8003b3e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1dc      	bne.n	8003af6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <LL_ADC_IsEnabled>:
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <LL_ADC_IsEnabled+0x18>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <LL_ADC_IsEnabled+0x1a>
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <LL_ADC_StartCalibration>:
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003b7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	609a      	str	r2, [r3, #8]
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <LL_ADC_IsCalibrationOnGoing>:
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bb2:	d101      	bne.n	8003bb8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <LL_ADC_REG_IsConversionOngoing>:
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d101      	bne.n	8003bde <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_ADCEx_Calibration_Start+0x1c>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e04d      	b.n	8003ca4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff ff39 	bl	8003a88 <ADC_Disable>
 8003c16:	4603      	mov	r3, r0
 8003c18:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d136      	bne.n	8003c8e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c28:	f023 0302 	bic.w	r3, r3, #2
 8003c2c:	f043 0202 	orr.w	r2, r3, #2
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6839      	ldr	r1, [r7, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff ff96 	bl	8003b6c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c40:	e014      	b.n	8003c6c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	3301      	adds	r3, #1
 8003c46:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4a18      	ldr	r2, [pc, #96]	; (8003cac <HAL_ADCEx_Calibration_Start+0xc0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d90d      	bls.n	8003c6c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	f023 0312 	bic.w	r3, r3, #18
 8003c58:	f043 0210 	orr.w	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e01b      	b.n	8003ca4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff ff94 	bl	8003b9e <LL_ADC_IsCalibrationOnGoing>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e2      	bne.n	8003c42 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	f023 0303 	bic.w	r3, r3, #3
 8003c84:	f043 0201 	orr.w	r2, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c8c:	e005      	b.n	8003c9a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c92:	f043 0210 	orr.w	r2, r3, #16
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	0006cbff 	.word	0x0006cbff

08003cb0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003d14:	b590      	push	{r4, r7, lr}
 8003d16:	b0a1      	sub	sp, #132	; 0x84
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e089      	b.n	8003e46 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a42      	ldr	r2, [pc, #264]	; (8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d102      	bne.n	8003d52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d4c:	4b41      	ldr	r3, [pc, #260]	; (8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e001      	b.n	8003d56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10b      	bne.n	8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d60:	f043 0220 	orr.w	r2, r3, #32
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e068      	b.n	8003e46 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff ff25 	bl	8003bc6 <LL_ADC_REG_IsConversionOngoing>
 8003d7c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff ff1f 	bl	8003bc6 <LL_ADC_REG_IsConversionOngoing>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d14a      	bne.n	8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003d8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d147      	bne.n	8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d94:	4b30      	ldr	r3, [pc, #192]	; (8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003d96:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d027      	beq.n	8003df0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003da0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	6859      	ldr	r1, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003db2:	035b      	lsls	r3, r3, #13
 8003db4:	430b      	orrs	r3, r1
 8003db6:	431a      	orrs	r2, r3
 8003db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dbc:	4824      	ldr	r0, [pc, #144]	; (8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003dbe:	f7ff fec2 	bl	8003b46 <LL_ADC_IsEnabled>
 8003dc2:	4604      	mov	r4, r0
 8003dc4:	4823      	ldr	r0, [pc, #140]	; (8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003dc6:	f7ff febe 	bl	8003b46 <LL_ADC_IsEnabled>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4323      	orrs	r3, r4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d132      	bne.n	8003e38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003dda:	f023 030f 	bic.w	r3, r3, #15
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	6811      	ldr	r1, [r2, #0]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	6892      	ldr	r2, [r2, #8]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	431a      	orrs	r2, r3
 8003dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dec:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003dee:	e023      	b.n	8003e38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dfa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dfc:	4814      	ldr	r0, [pc, #80]	; (8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003dfe:	f7ff fea2 	bl	8003b46 <LL_ADC_IsEnabled>
 8003e02:	4604      	mov	r4, r0
 8003e04:	4813      	ldr	r0, [pc, #76]	; (8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003e06:	f7ff fe9e 	bl	8003b46 <LL_ADC_IsEnabled>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4323      	orrs	r3, r4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d112      	bne.n	8003e38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e1a:	f023 030f 	bic.w	r3, r3, #15
 8003e1e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e20:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e22:	e009      	b.n	8003e38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e28:	f043 0220 	orr.w	r2, r3, #32
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003e36:	e000      	b.n	8003e3a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003e42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3784      	adds	r7, #132	; 0x84
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd90      	pop	{r4, r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	42028000 	.word	0x42028000
 8003e54:	42028100 	.word	0x42028100
 8003e58:	42028300 	.word	0x42028300

08003e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e8e:	4a04      	ldr	r2, [pc, #16]	; (8003ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	60d3      	str	r3, [r2, #12]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	e000ed00 	.word	0xe000ed00

08003ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <__NVIC_GetPriorityGrouping+0x18>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	f003 0307 	and.w	r3, r3, #7
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	db0b      	blt.n	8003eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	f003 021f 	and.w	r2, r3, #31
 8003ed8:	4907      	ldr	r1, [pc, #28]	; (8003ef8 <__NVIC_EnableIRQ+0x38>)
 8003eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	e000e100 	.word	0xe000e100

08003efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	6039      	str	r1, [r7, #0]
 8003f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	db0a      	blt.n	8003f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	490c      	ldr	r1, [pc, #48]	; (8003f48 <__NVIC_SetPriority+0x4c>)
 8003f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1a:	0152      	lsls	r2, r2, #5
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	440b      	add	r3, r1
 8003f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f24:	e00a      	b.n	8003f3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	4908      	ldr	r1, [pc, #32]	; (8003f4c <__NVIC_SetPriority+0x50>)
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	3b04      	subs	r3, #4
 8003f34:	0152      	lsls	r2, r2, #5
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	440b      	add	r3, r1
 8003f3a:	761a      	strb	r2, [r3, #24]
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	e000e100 	.word	0xe000e100
 8003f4c:	e000ed00 	.word	0xe000ed00

08003f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b089      	sub	sp, #36	; 0x24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f1c3 0307 	rsb	r3, r3, #7
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	bf28      	it	cs
 8003f6e:	2303      	movcs	r3, #3
 8003f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	3303      	adds	r3, #3
 8003f76:	2b06      	cmp	r3, #6
 8003f78:	d902      	bls.n	8003f80 <NVIC_EncodePriority+0x30>
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3b04      	subs	r3, #4
 8003f7e:	e000      	b.n	8003f82 <NVIC_EncodePriority+0x32>
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f84:	f04f 32ff 	mov.w	r2, #4294967295
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43da      	mvns	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	401a      	ands	r2, r3
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f98:	f04f 31ff 	mov.w	r1, #4294967295
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa2:	43d9      	mvns	r1, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa8:	4313      	orrs	r3, r2
         );
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3724      	adds	r7, #36	; 0x24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff ff4c 	bl	8003e5c <__NVIC_SetPriorityGrouping>
}
 8003fc4:	bf00      	nop
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fda:	f7ff ff63 	bl	8003ea4 <__NVIC_GetPriorityGrouping>
 8003fde:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	6978      	ldr	r0, [r7, #20]
 8003fe6:	f7ff ffb3 	bl	8003f50 <NVIC_EncodePriority>
 8003fea:	4602      	mov	r2, r0
 8003fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff ff82 	bl	8003efc <__NVIC_SetPriority>
}
 8003ff8:	bf00      	nop
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800400a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff ff56 	bl	8003ec0 <__NVIC_EnableIRQ>
}
 8004014:	bf00      	nop
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d008      	beq.n	8004046 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2204      	movs	r2, #4
 8004038:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e040      	b.n	80040c8 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 020e 	bic.w	r2, r2, #14
 8004054:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004064:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407a:	f003 021c 	and.w	r2, r3, #28
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004082:	2101      	movs	r1, #1
 8004084:	fa01 f202 	lsl.w	r2, r1, r2
 8004088:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004092:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00c      	beq.n	80040b6 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80040b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d005      	beq.n	80040f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2204      	movs	r2, #4
 80040f0:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
 80040f6:	e047      	b.n	8004188 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 020e 	bic.w	r2, r2, #14
 8004106:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0201 	bic.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004126:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412c:	f003 021c 	and.w	r2, r3, #28
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004134:	2101      	movs	r1, #1
 8004136:	fa01 f202 	lsl.w	r2, r1, r2
 800413a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004144:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800415c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004166:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	4798      	blx	r3
    }
  }
  return status;
 8004188:	7bfb      	ldrb	r3, [r7, #15]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041a2:	e158      	b.n	8004456 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	2101      	movs	r1, #1
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	fa01 f303 	lsl.w	r3, r1, r3
 80041b0:	4013      	ands	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 814a 	beq.w	8004450 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d005      	beq.n	80041d4 <HAL_GPIO_Init+0x40>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d130      	bne.n	8004236 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	2203      	movs	r2, #3
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800420a:	2201      	movs	r2, #1
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	43db      	mvns	r3, r3
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4013      	ands	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	f003 0201 	and.w	r2, r3, #1
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	2b03      	cmp	r3, #3
 8004240:	d017      	beq.n	8004272 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	2203      	movs	r2, #3
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	43db      	mvns	r3, r3
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4013      	ands	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d123      	bne.n	80042c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	08da      	lsrs	r2, r3, #3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3208      	adds	r2, #8
 8004286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800428a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	220f      	movs	r2, #15
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43db      	mvns	r3, r3
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4013      	ands	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	08da      	lsrs	r2, r3, #3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3208      	adds	r2, #8
 80042c0:	6939      	ldr	r1, [r7, #16]
 80042c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2203      	movs	r2, #3
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4013      	ands	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f003 0203 	and.w	r2, r3, #3
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80a4 	beq.w	8004450 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8004308:	4a5a      	ldr	r2, [pc, #360]	; (8004474 <HAL_GPIO_Init+0x2e0>)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	089b      	lsrs	r3, r3, #2
 800430e:	3318      	adds	r3, #24
 8004310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 0303 	and.w	r3, r3, #3
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	220f      	movs	r2, #15
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4013      	ands	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a52      	ldr	r2, [pc, #328]	; (8004478 <HAL_GPIO_Init+0x2e4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d025      	beq.n	8004380 <HAL_GPIO_Init+0x1ec>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a51      	ldr	r2, [pc, #324]	; (800447c <HAL_GPIO_Init+0x2e8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d01f      	beq.n	800437c <HAL_GPIO_Init+0x1e8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a50      	ldr	r2, [pc, #320]	; (8004480 <HAL_GPIO_Init+0x2ec>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d019      	beq.n	8004378 <HAL_GPIO_Init+0x1e4>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a4f      	ldr	r2, [pc, #316]	; (8004484 <HAL_GPIO_Init+0x2f0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d013      	beq.n	8004374 <HAL_GPIO_Init+0x1e0>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a4e      	ldr	r2, [pc, #312]	; (8004488 <HAL_GPIO_Init+0x2f4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00d      	beq.n	8004370 <HAL_GPIO_Init+0x1dc>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a4d      	ldr	r2, [pc, #308]	; (800448c <HAL_GPIO_Init+0x2f8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <HAL_GPIO_Init+0x1d8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a4c      	ldr	r2, [pc, #304]	; (8004490 <HAL_GPIO_Init+0x2fc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d101      	bne.n	8004368 <HAL_GPIO_Init+0x1d4>
 8004364:	2306      	movs	r3, #6
 8004366:	e00c      	b.n	8004382 <HAL_GPIO_Init+0x1ee>
 8004368:	2307      	movs	r3, #7
 800436a:	e00a      	b.n	8004382 <HAL_GPIO_Init+0x1ee>
 800436c:	2305      	movs	r3, #5
 800436e:	e008      	b.n	8004382 <HAL_GPIO_Init+0x1ee>
 8004370:	2304      	movs	r3, #4
 8004372:	e006      	b.n	8004382 <HAL_GPIO_Init+0x1ee>
 8004374:	2303      	movs	r3, #3
 8004376:	e004      	b.n	8004382 <HAL_GPIO_Init+0x1ee>
 8004378:	2302      	movs	r3, #2
 800437a:	e002      	b.n	8004382 <HAL_GPIO_Init+0x1ee>
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <HAL_GPIO_Init+0x1ee>
 8004380:	2300      	movs	r3, #0
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	f002 0203 	and.w	r2, r2, #3
 8004388:	00d2      	lsls	r2, r2, #3
 800438a:	4093      	lsls	r3, r2
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004392:	4938      	ldr	r1, [pc, #224]	; (8004474 <HAL_GPIO_Init+0x2e0>)
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	089b      	lsrs	r3, r3, #2
 8004398:	3318      	adds	r3, #24
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043a0:	4b34      	ldr	r3, [pc, #208]	; (8004474 <HAL_GPIO_Init+0x2e0>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	43db      	mvns	r3, r3
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4013      	ands	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043c4:	4a2b      	ldr	r2, [pc, #172]	; (8004474 <HAL_GPIO_Init+0x2e0>)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80043ca:	4b2a      	ldr	r3, [pc, #168]	; (8004474 <HAL_GPIO_Init+0x2e0>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	43db      	mvns	r3, r3
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4013      	ands	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043ee:	4a21      	ldr	r2, [pc, #132]	; (8004474 <HAL_GPIO_Init+0x2e0>)
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80043f4:	4b1f      	ldr	r3, [pc, #124]	; (8004474 <HAL_GPIO_Init+0x2e0>)
 80043f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	43db      	mvns	r3, r3
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	4013      	ands	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800441a:	4a16      	ldr	r2, [pc, #88]	; (8004474 <HAL_GPIO_Init+0x2e0>)
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8004422:	4b14      	ldr	r3, [pc, #80]	; (8004474 <HAL_GPIO_Init+0x2e0>)
 8004424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	43db      	mvns	r3, r3
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4013      	ands	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004448:	4a0a      	ldr	r2, [pc, #40]	; (8004474 <HAL_GPIO_Init+0x2e0>)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	3301      	adds	r3, #1
 8004454:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	f47f ae9f 	bne.w	80041a4 <HAL_GPIO_Init+0x10>
  }
}
 8004466:	bf00      	nop
 8004468:	bf00      	nop
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	4002f400 	.word	0x4002f400
 8004478:	42020000 	.word	0x42020000
 800447c:	42020400 	.word	0x42020400
 8004480:	42020800 	.word	0x42020800
 8004484:	42020c00 	.word	0x42020c00
 8004488:	42021000 	.word	0x42021000
 800448c:	42021400 	.word	0x42021400
 8004490:	42021800 	.word	0x42021800

08004494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	807b      	strh	r3, [r7, #2]
 80044a0:	4613      	mov	r3, r2
 80044a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044a4:	787b      	ldrb	r3, [r7, #1]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044aa:	887a      	ldrh	r2, [r7, #2]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044b0:	e002      	b.n	80044b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044b2:	887a      	ldrh	r2, [r7, #2]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044d6:	887a      	ldrh	r2, [r7, #2]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4013      	ands	r3, r2
 80044dc:	041a      	lsls	r2, r3, #16
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	43d9      	mvns	r1, r3
 80044e2:	887b      	ldrh	r3, [r7, #2]
 80044e4:	400b      	ands	r3, r1
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	619a      	str	r2, [r3, #24]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e081      	b.n	800460e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd f950 	bl	80017c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2224      	movs	r2, #36	; 0x24
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004548:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004558:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d107      	bne.n	8004572 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800456e:	609a      	str	r2, [r3, #8]
 8004570:	e006      	b.n	8004580 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800457e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d104      	bne.n	8004592 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004590:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69d9      	ldr	r1, [r3, #28]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1a      	ldr	r2, [r3, #32]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b20      	cmp	r3, #32
 800462a:	d138      	bne.n	800469e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004636:	2302      	movs	r3, #2
 8004638:	e032      	b.n	80046a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2224      	movs	r2, #36	; 0x24
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0201 	bic.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004668:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0201 	orr.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	e000      	b.n	80046a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800469e:	2302      	movs	r3, #2
  }
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d139      	bne.n	8004736 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e033      	b.n	8004738 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2224      	movs	r2, #36	; 0x24
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 0201 	orr.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	e000      	b.n	8004738 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004736:	2302      	movs	r3, #2
  }
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
 8004760:	e007      	b.n	8004772 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004762:	4b07      	ldr	r3, [pc, #28]	; (8004780 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 0204 	bic.w	r2, r3, #4
 800476a:	4905      	ldr	r1, [pc, #20]	; (8004780 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4313      	orrs	r3, r2
 8004770:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004772:	7bfb      	ldrb	r3, [r7, #15]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	40030400 	.word	0x40030400

08004784 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004788:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <HAL_ICACHE_Enable+0x1c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a04      	ldr	r2, [pc, #16]	; (80047a0 <HAL_ICACHE_Enable+0x1c>)
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	40030400 	.word	0x40030400

080047a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047a6:	b08b      	sub	sp, #44	; 0x2c
 80047a8:	af06      	add	r7, sp, #24
 80047aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e0cb      	b.n	800494e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fd fbae 	bl	8001f2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2203      	movs	r2, #3
 80047d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f006 f859 	bl	800a894 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047e2:	2300      	movs	r3, #0
 80047e4:	73fb      	strb	r3, [r7, #15]
 80047e6:	e040      	b.n	800486a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	440b      	add	r3, r1
 80047f8:	3301      	adds	r3, #1
 80047fa:	2201      	movs	r2, #1
 80047fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	440b      	add	r3, r1
 800480e:	7bfa      	ldrb	r2, [r7, #15]
 8004810:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	440b      	add	r3, r1
 8004822:	3303      	adds	r3, #3
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004828:	7bfa      	ldrb	r2, [r7, #15]
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	440b      	add	r3, r1
 8004836:	3338      	adds	r3, #56	; 0x38
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800483c:	7bfa      	ldrb	r2, [r7, #15]
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	440b      	add	r3, r1
 800484a:	333c      	adds	r3, #60	; 0x3c
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004850:	7bfa      	ldrb	r2, [r7, #15]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	440b      	add	r3, r1
 800485e:	3340      	adds	r3, #64	; 0x40
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	3301      	adds	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
 800486a:	7bfa      	ldrb	r2, [r7, #15]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	429a      	cmp	r2, r3
 8004872:	d3b9      	bcc.n	80047e8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004874:	2300      	movs	r3, #0
 8004876:	73fb      	strb	r3, [r7, #15]
 8004878:	e044      	b.n	8004904 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800487a:	7bfa      	ldrb	r2, [r7, #15]
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	440b      	add	r3, r1
 8004888:	f203 1369 	addw	r3, r3, #361	; 0x169
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004890:	7bfa      	ldrb	r2, [r7, #15]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	440b      	add	r3, r1
 800489e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048a2:	7bfa      	ldrb	r2, [r7, #15]
 80048a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048a6:	7bfa      	ldrb	r2, [r7, #15]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	440b      	add	r3, r1
 80048b4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80048b8:	2200      	movs	r2, #0
 80048ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048bc:	7bfa      	ldrb	r2, [r7, #15]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	440b      	add	r3, r1
 80048ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048d2:	7bfa      	ldrb	r2, [r7, #15]
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	440b      	add	r3, r1
 80048e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048e8:	7bfa      	ldrb	r2, [r7, #15]
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	440b      	add	r3, r1
 80048f6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	3301      	adds	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
 8004904:	7bfa      	ldrb	r2, [r7, #15]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	429a      	cmp	r2, r3
 800490c:	d3b5      	bcc.n	800487a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	687e      	ldr	r6, [r7, #4]
 8004916:	466d      	mov	r5, sp
 8004918:	f106 0410 	add.w	r4, r6, #16
 800491c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800491e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	602b      	str	r3, [r5, #0]
 8004924:	1d33      	adds	r3, r6, #4
 8004926:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004928:	6838      	ldr	r0, [r7, #0]
 800492a:	f005 ffce 	bl	800a8ca <USB_DevInit>

  hpcd->USB_Address = 0U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d102      	bne.n	800494c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f805 	bl	8004956 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004956 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800497a:	b29b      	uxth	r3, r3
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800498e:	b29b      	uxth	r3, r3
 8004990:	f043 0302 	orr.w	r3, r3, #2
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ba:	6013      	str	r3, [r2, #0]
}
 80049bc:	bf00      	nop
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40007000 	.word	0x40007000

080049cc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80049d8:	4618      	mov	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40007000 	.word	0x40007000

080049e8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80049f0:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049f8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80049fa:	f000 f861 	bl	8004ac0 <HAL_PWREx_SMPS_GetEffectiveMode>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a04:	d101      	bne.n	8004a0a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e03e      	b.n	8004a88 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8004a0a:	4b21      	ldr	r3, [pc, #132]	; (8004a90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a16:	d101      	bne.n	8004a1c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e035      	b.n	8004a88 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d101      	bne.n	8004a28 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	e02f      	b.n	8004a88 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004a28:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004a30:	4917      	ldr	r1, [pc, #92]	; (8004a90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8004a38:	4b16      	ldr	r3, [pc, #88]	; (8004a94 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	4a16      	ldr	r2, [pc, #88]	; (8004a98 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004a40:	fba2 2303 	umull	r2, r3, r2, r3
 8004a44:	09db      	lsrs	r3, r3, #7
 8004a46:	2232      	movs	r2, #50	; 0x32
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	08db      	lsrs	r3, r3, #3
 8004a54:	3301      	adds	r3, #1
 8004a56:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a58:	e002      	b.n	8004a60 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6c:	d102      	bne.n	8004a74 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f2      	bne.n	8004a5a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d101      	bne.n	8004a86 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e000      	b.n	8004a88 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40007000 	.word	0x40007000
 8004a94:	20000004 	.word	0x20000004
 8004a98:	0a7c5ac5 	.word	0x0a7c5ac5
 8004a9c:	cccccccd 	.word	0xcccccccd

08004aa0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HAL_PWREx_EnableVddIO2+0x1c>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	4a04      	ldr	r2, [pc, #16]	; (8004abc <HAL_PWREx_EnableVddIO2+0x1c>)
 8004aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aae:	6053      	str	r3, [r2, #4]
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40007000 	.word	0x40007000

08004ac0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8004ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ada:	607b      	str	r3, [r7, #4]
 8004adc:	e00a      	b.n	8004af4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d103      	bne.n	8004af0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8004ae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	e001      	b.n	8004af4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8004af0:	2300      	movs	r3, #0
 8004af2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8004af4:	687b      	ldr	r3, [r7, #4]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40007000 	.word	0x40007000

08004b08 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d102      	bne.n	8004b1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f000 bcc2 	b.w	80054a0 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b1c:	4b99      	ldr	r3, [pc, #612]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 030c 	and.w	r3, r3, #12
 8004b24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b26:	4b97      	ldr	r3, [pc, #604]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80e9 	beq.w	8004d10 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d006      	beq.n	8004b52 <HAL_RCC_OscConfig+0x4a>
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2b0c      	cmp	r3, #12
 8004b48:	f040 8083 	bne.w	8004c52 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d17f      	bne.n	8004c52 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b52:	4b8c      	ldr	r3, [pc, #560]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d006      	beq.n	8004b6c <HAL_RCC_OscConfig+0x64>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f000 bc9a 	b.w	80054a0 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b70:	4b84      	ldr	r3, [pc, #528]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d004      	beq.n	8004b86 <HAL_RCC_OscConfig+0x7e>
 8004b7c:	4b81      	ldr	r3, [pc, #516]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b84:	e005      	b.n	8004b92 <HAL_RCC_OscConfig+0x8a>
 8004b86:	4b7f      	ldr	r3, [pc, #508]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d224      	bcs.n	8004be0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fece 	bl	800593c <RCC_SetFlashLatencyFromMSIRange>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f000 bc7a 	b.w	80054a0 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bac:	4b75      	ldr	r3, [pc, #468]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a74      	ldr	r2, [pc, #464]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004bb2:	f043 0308 	orr.w	r3, r3, #8
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	4b72      	ldr	r3, [pc, #456]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	496f      	ldr	r1, [pc, #444]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bca:	4b6e      	ldr	r3, [pc, #440]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	496a      	ldr	r1, [pc, #424]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	604b      	str	r3, [r1, #4]
 8004bde:	e026      	b.n	8004c2e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004be0:	4b68      	ldr	r3, [pc, #416]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a67      	ldr	r2, [pc, #412]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004be6:	f043 0308 	orr.w	r3, r3, #8
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	4b65      	ldr	r3, [pc, #404]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	4962      	ldr	r1, [pc, #392]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bfe:	4b61      	ldr	r3, [pc, #388]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	495d      	ldr	r1, [pc, #372]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10a      	bne.n	8004c2e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fe8d 	bl	800593c <RCC_SetFlashLatencyFromMSIRange>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f000 bc39 	b.w	80054a0 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c2e:	f000 fe17 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 8004c32:	4603      	mov	r3, r0
 8004c34:	4a54      	ldr	r2, [pc, #336]	; (8004d88 <HAL_RCC_OscConfig+0x280>)
 8004c36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c38:	4b54      	ldr	r3, [pc, #336]	; (8004d8c <HAL_RCC_OscConfig+0x284>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fd f9d5 	bl	8001fec <HAL_InitTick>
 8004c42:	4603      	mov	r3, r0
 8004c44:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d060      	beq.n	8004d0e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	f000 bc27 	b.w	80054a0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d039      	beq.n	8004cce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c5a:	4b4a      	ldr	r3, [pc, #296]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a49      	ldr	r2, [pc, #292]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c66:	f7fd fbad 	bl	80023c4 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c6c:	e00f      	b.n	8004c8e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c6e:	f7fd fba9 	bl	80023c4 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d908      	bls.n	8004c8e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c7c:	4b41      	ldr	r3, [pc, #260]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d102      	bne.n	8004c8e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	f000 bc09 	b.w	80054a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c8e:	4b3d      	ldr	r3, [pc, #244]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0e9      	beq.n	8004c6e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c9a:	4b3a      	ldr	r3, [pc, #232]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a39      	ldr	r2, [pc, #228]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004ca0:	f043 0308 	orr.w	r3, r3, #8
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	4b37      	ldr	r3, [pc, #220]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	4934      	ldr	r1, [pc, #208]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cb8:	4b32      	ldr	r3, [pc, #200]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	492f      	ldr	r1, [pc, #188]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	604b      	str	r3, [r1, #4]
 8004ccc:	e020      	b.n	8004d10 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cce:	4b2d      	ldr	r3, [pc, #180]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a2c      	ldr	r2, [pc, #176]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cda:	f7fd fb73 	bl	80023c4 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ce0:	e00e      	b.n	8004d00 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ce2:	f7fd fb6f 	bl	80023c4 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d907      	bls.n	8004d00 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cf0:	4b24      	ldr	r3, [pc, #144]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e3cf      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d00:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1ea      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x1da>
 8004d0c:	e000      	b.n	8004d10 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d0e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d07e      	beq.n	8004e1a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d005      	beq.n	8004d2e <HAL_RCC_OscConfig+0x226>
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b0c      	cmp	r3, #12
 8004d26:	d10e      	bne.n	8004d46 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d10b      	bne.n	8004d46 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d2e:	4b15      	ldr	r3, [pc, #84]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d06e      	beq.n	8004e18 <HAL_RCC_OscConfig+0x310>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d16a      	bne.n	8004e18 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e3ac      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4e:	d106      	bne.n	8004d5e <HAL_RCC_OscConfig+0x256>
 8004d50:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a0b      	ldr	r2, [pc, #44]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	e024      	b.n	8004da8 <HAL_RCC_OscConfig+0x2a0>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d66:	d113      	bne.n	8004d90 <HAL_RCC_OscConfig+0x288>
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a05      	ldr	r2, [pc, #20]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004d6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a02      	ldr	r2, [pc, #8]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	e012      	b.n	8004da8 <HAL_RCC_OscConfig+0x2a0>
 8004d82:	bf00      	nop
 8004d84:	40021000 	.word	0x40021000
 8004d88:	20000004 	.word	0x20000004
 8004d8c:	20000008 	.word	0x20000008
 8004d90:	4b8b      	ldr	r3, [pc, #556]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a8a      	ldr	r2, [pc, #552]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	4b88      	ldr	r3, [pc, #544]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a87      	ldr	r2, [pc, #540]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d019      	beq.n	8004de4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fd fb08 	bl	80023c4 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004db6:	e00e      	b.n	8004dd6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db8:	f7fd fb04 	bl	80023c4 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b64      	cmp	r3, #100	; 0x64
 8004dc4:	d907      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dc6:	4b7e      	ldr	r3, [pc, #504]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e364      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dd6:	4b7a      	ldr	r3, [pc, #488]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0ea      	beq.n	8004db8 <HAL_RCC_OscConfig+0x2b0>
 8004de2:	e01a      	b.n	8004e1a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fd faee 	bl	80023c4 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dea:	e00e      	b.n	8004e0a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dec:	f7fd faea 	bl	80023c4 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	; 0x64
 8004df8:	d907      	bls.n	8004e0a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dfa:	4b71      	ldr	r3, [pc, #452]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e34a      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e0a:	4b6d      	ldr	r3, [pc, #436]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1ea      	bne.n	8004dec <HAL_RCC_OscConfig+0x2e4>
 8004e16:	e000      	b.n	8004e1a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d06c      	beq.n	8004f00 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d005      	beq.n	8004e38 <HAL_RCC_OscConfig+0x330>
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b0c      	cmp	r3, #12
 8004e30:	d119      	bne.n	8004e66 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d116      	bne.n	8004e66 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e38:	4b61      	ldr	r3, [pc, #388]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <HAL_RCC_OscConfig+0x348>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e327      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e50:	4b5b      	ldr	r3, [pc, #364]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	061b      	lsls	r3, r3, #24
 8004e5e:	4958      	ldr	r1, [pc, #352]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e64:	e04c      	b.n	8004f00 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d029      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e6e:	4b54      	ldr	r3, [pc, #336]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a53      	ldr	r2, [pc, #332]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7a:	f7fd faa3 	bl	80023c4 <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e80:	e00e      	b.n	8004ea0 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e82:	f7fd fa9f 	bl	80023c4 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d907      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e90:	4b4b      	ldr	r3, [pc, #300]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e2ff      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ea0:	4b47      	ldr	r3, [pc, #284]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0ea      	beq.n	8004e82 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eac:	4b44      	ldr	r3, [pc, #272]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	061b      	lsls	r3, r3, #24
 8004eba:	4941      	ldr	r1, [pc, #260]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	604b      	str	r3, [r1, #4]
 8004ec0:	e01e      	b.n	8004f00 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ec2:	4b3f      	ldr	r3, [pc, #252]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a3e      	ldr	r2, [pc, #248]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ece:	f7fd fa79 	bl	80023c4 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ed4:	e00e      	b.n	8004ef4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed6:	f7fd fa75 	bl	80023c4 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d907      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ee4:	4b36      	ldr	r3, [pc, #216]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e2d5      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ef4:	4b32      	ldr	r3, [pc, #200]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1ea      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d062      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d038      	beq.n	8004f86 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d108      	bne.n	8004f2e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004f1c:	4b28      	ldr	r3, [pc, #160]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f22:	4a27      	ldr	r2, [pc, #156]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004f24:	f023 0310 	bic.w	r3, r3, #16
 8004f28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004f2c:	e007      	b.n	8004f3e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004f2e:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f34:	4a22      	ldr	r2, [pc, #136]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004f36:	f043 0310 	orr.w	r3, r3, #16
 8004f3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f3e:	4b20      	ldr	r3, [pc, #128]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f44:	4a1e      	ldr	r2, [pc, #120]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004f46:	f043 0301 	orr.w	r3, r3, #1
 8004f4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4e:	f7fd fa39 	bl	80023c4 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f54:	e00f      	b.n	8004f76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f56:	f7fd fa35 	bl	80023c4 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b07      	cmp	r3, #7
 8004f62:	d908      	bls.n	8004f76 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f64:	4b16      	ldr	r3, [pc, #88]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e294      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f76:	4b12      	ldr	r3, [pc, #72]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0e8      	beq.n	8004f56 <HAL_RCC_OscConfig+0x44e>
 8004f84:	e025      	b.n	8004fd2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f86:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f8c:	4a0c      	ldr	r2, [pc, #48]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004f8e:	f023 0301 	bic.w	r3, r3, #1
 8004f92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f96:	f7fd fa15 	bl	80023c4 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f9c:	e012      	b.n	8004fc4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f9e:	f7fd fa11 	bl	80023c4 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b07      	cmp	r3, #7
 8004faa:	d90b      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fac:	4b04      	ldr	r3, [pc, #16]	; (8004fc0 <HAL_RCC_OscConfig+0x4b8>)
 8004fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d004      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e270      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fc4:	4ba8      	ldr	r3, [pc, #672]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8004fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e5      	bne.n	8004f9e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 812d 	beq.w	800523a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fe4:	4ba0      	ldr	r3, [pc, #640]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10d      	bne.n	800500c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff0:	4b9d      	ldr	r3, [pc, #628]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff4:	4a9c      	ldr	r2, [pc, #624]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8004ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8004ffc:	4b9a      	ldr	r3, [pc, #616]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005008:	2301      	movs	r3, #1
 800500a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800500c:	4b97      	ldr	r3, [pc, #604]	; (800526c <HAL_RCC_OscConfig+0x764>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d11e      	bne.n	8005056 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005018:	4b94      	ldr	r3, [pc, #592]	; (800526c <HAL_RCC_OscConfig+0x764>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a93      	ldr	r2, [pc, #588]	; (800526c <HAL_RCC_OscConfig+0x764>)
 800501e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005022:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005024:	f7fd f9ce 	bl	80023c4 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800502a:	e00e      	b.n	800504a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502c:	f7fd f9ca 	bl	80023c4 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d907      	bls.n	800504a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800503a:	4b8c      	ldr	r3, [pc, #560]	; (800526c <HAL_RCC_OscConfig+0x764>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e22a      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800504a:	4b88      	ldr	r3, [pc, #544]	; (800526c <HAL_RCC_OscConfig+0x764>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0ea      	beq.n	800502c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01f      	beq.n	80050a2 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	d010      	beq.n	8005090 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800506e:	4b7e      	ldr	r3, [pc, #504]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8005070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005074:	4a7c      	ldr	r2, [pc, #496]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8005076:	f043 0304 	orr.w	r3, r3, #4
 800507a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800507e:	4b7a      	ldr	r3, [pc, #488]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005084:	4a78      	ldr	r2, [pc, #480]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8005086:	f043 0301 	orr.w	r3, r3, #1
 800508a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800508e:	e018      	b.n	80050c2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005090:	4b75      	ldr	r3, [pc, #468]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005096:	4a74      	ldr	r2, [pc, #464]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050a0:	e00f      	b.n	80050c2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050a2:	4b71      	ldr	r3, [pc, #452]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 80050a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a8:	4a6f      	ldr	r2, [pc, #444]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 80050aa:	f023 0301 	bic.w	r3, r3, #1
 80050ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050b2:	4b6d      	ldr	r3, [pc, #436]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	4a6b      	ldr	r2, [pc, #428]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 80050ba:	f023 0304 	bic.w	r3, r3, #4
 80050be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d068      	beq.n	800519c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ca:	f7fd f97b 	bl	80023c4 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050d0:	e011      	b.n	80050f6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d2:	f7fd f977 	bl	80023c4 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d908      	bls.n	80050f6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050e4:	4b60      	ldr	r3, [pc, #384]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e1d4      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f6:	4b5c      	ldr	r3, [pc, #368]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0e6      	beq.n	80050d2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510c:	2b00      	cmp	r3, #0
 800510e:	d022      	beq.n	8005156 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005110:	4b55      	ldr	r3, [pc, #340]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8005112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005116:	4a54      	ldr	r2, [pc, #336]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8005118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005120:	e011      	b.n	8005146 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005122:	f7fd f94f 	bl	80023c4 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005130:	4293      	cmp	r3, r2
 8005132:	d908      	bls.n	8005146 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005134:	4b4c      	ldr	r3, [pc, #304]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8005136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e1ac      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005146:	4b48      	ldr	r3, [pc, #288]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0e6      	beq.n	8005122 <HAL_RCC_OscConfig+0x61a>
 8005154:	e068      	b.n	8005228 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005156:	4b44      	ldr	r3, [pc, #272]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8005158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515c:	4a42      	ldr	r2, [pc, #264]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 800515e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005166:	e011      	b.n	800518c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005168:	f7fd f92c 	bl	80023c4 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	; 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d908      	bls.n	800518c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800517a:	4b3b      	ldr	r3, [pc, #236]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 800517c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e189      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800518c:	4b36      	ldr	r3, [pc, #216]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 800518e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e6      	bne.n	8005168 <HAL_RCC_OscConfig+0x660>
 800519a:	e045      	b.n	8005228 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519c:	f7fd f912 	bl	80023c4 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051a2:	e011      	b.n	80051c8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a4:	f7fd f90e 	bl	80023c4 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d908      	bls.n	80051c8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051b6:	4b2c      	ldr	r3, [pc, #176]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 80051b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e16b      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051c8:	4b27      	ldr	r3, [pc, #156]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e6      	bne.n	80051a4 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80051d6:	4b24      	ldr	r3, [pc, #144]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 80051d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d021      	beq.n	8005228 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80051e4:	4b20      	ldr	r3, [pc, #128]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ea:	4a1f      	ldr	r2, [pc, #124]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 80051ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80051f4:	e011      	b.n	800521a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f6:	f7fd f8e5 	bl	80023c4 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	f241 3288 	movw	r2, #5000	; 0x1388
 8005204:	4293      	cmp	r3, r2
 8005206:	d908      	bls.n	800521a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005208:	4b17      	ldr	r3, [pc, #92]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e142      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800521a:	4b13      	ldr	r3, [pc, #76]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 800521c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e6      	bne.n	80051f6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005228:	7ffb      	ldrb	r3, [r7, #31]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d105      	bne.n	800523a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800522e:	4b0e      	ldr	r3, [pc, #56]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	4a0d      	ldr	r2, [pc, #52]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8005234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005238:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d04f      	beq.n	80052e6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	2b00      	cmp	r3, #0
 800524c:	d028      	beq.n	80052a0 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800524e:	4b06      	ldr	r3, [pc, #24]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8005250:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005254:	4a04      	ldr	r2, [pc, #16]	; (8005268 <HAL_RCC_OscConfig+0x760>)
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525e:	f7fd f8b1 	bl	80023c4 <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005264:	e014      	b.n	8005290 <HAL_RCC_OscConfig+0x788>
 8005266:	bf00      	nop
 8005268:	40021000 	.word	0x40021000
 800526c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005270:	f7fd f8a8 	bl	80023c4 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d908      	bls.n	8005290 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800527e:	4b8a      	ldr	r3, [pc, #552]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 8005280:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e107      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005290:	4b85      	ldr	r3, [pc, #532]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 8005292:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0e8      	beq.n	8005270 <HAL_RCC_OscConfig+0x768>
 800529e:	e022      	b.n	80052e6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052a0:	4b81      	ldr	r3, [pc, #516]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 80052a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052a6:	4a80      	ldr	r2, [pc, #512]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b0:	f7fd f888 	bl	80023c4 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052b6:	e00f      	b.n	80052d8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052b8:	f7fd f884 	bl	80023c4 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d908      	bls.n	80052d8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052c6:	4b78      	ldr	r3, [pc, #480]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 80052c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e0e3      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052d8:	4b73      	ldr	r3, [pc, #460]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 80052da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e8      	bne.n	80052b8 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 80d7 	beq.w	800549e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052f0:	4b6d      	ldr	r3, [pc, #436]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 030c 	and.w	r3, r3, #12
 80052f8:	2b0c      	cmp	r3, #12
 80052fa:	f000 8091 	beq.w	8005420 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005302:	2b02      	cmp	r3, #2
 8005304:	d166      	bne.n	80053d4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005306:	4b68      	ldr	r3, [pc, #416]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a67      	ldr	r2, [pc, #412]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 800530c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005312:	f7fd f857 	bl	80023c4 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005318:	e00e      	b.n	8005338 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800531a:	f7fd f853 	bl	80023c4 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d907      	bls.n	8005338 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005328:	4b5f      	ldr	r3, [pc, #380]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e0b3      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005338:	4b5b      	ldr	r3, [pc, #364]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1ea      	bne.n	800531a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005344:	4b58      	ldr	r3, [pc, #352]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	4b58      	ldr	r3, [pc, #352]	; (80054ac <HAL_RCC_OscConfig+0x9a4>)
 800534a:	4013      	ands	r3, r2
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005354:	3a01      	subs	r2, #1
 8005356:	0112      	lsls	r2, r2, #4
 8005358:	4311      	orrs	r1, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800535e:	0212      	lsls	r2, r2, #8
 8005360:	4311      	orrs	r1, r2
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005366:	0852      	lsrs	r2, r2, #1
 8005368:	3a01      	subs	r2, #1
 800536a:	0552      	lsls	r2, r2, #21
 800536c:	4311      	orrs	r1, r2
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005372:	0852      	lsrs	r2, r2, #1
 8005374:	3a01      	subs	r2, #1
 8005376:	0652      	lsls	r2, r2, #25
 8005378:	4311      	orrs	r1, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800537e:	06d2      	lsls	r2, r2, #27
 8005380:	430a      	orrs	r2, r1
 8005382:	4949      	ldr	r1, [pc, #292]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 8005384:	4313      	orrs	r3, r2
 8005386:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005388:	4b47      	ldr	r3, [pc, #284]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a46      	ldr	r2, [pc, #280]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 800538e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005392:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005394:	4b44      	ldr	r3, [pc, #272]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	4a43      	ldr	r2, [pc, #268]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 800539a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800539e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a0:	f7fd f810 	bl	80023c4 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053a6:	e00e      	b.n	80053c6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a8:	f7fd f80c 	bl	80023c4 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d907      	bls.n	80053c6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053b6:	4b3c      	ldr	r3, [pc, #240]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e06c      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053c6:	4b38      	ldr	r3, [pc, #224]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0ea      	beq.n	80053a8 <HAL_RCC_OscConfig+0x8a0>
 80053d2:	e064      	b.n	800549e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d4:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a33      	ldr	r2, [pc, #204]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 80053da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e0:	f7fc fff0 	bl	80023c4 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053e6:	e00e      	b.n	8005406 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e8:	f7fc ffec 	bl	80023c4 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d907      	bls.n	8005406 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053f6:	4b2c      	ldr	r3, [pc, #176]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e04c      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005406:	4b28      	ldr	r3, [pc, #160]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1ea      	bne.n	80053e8 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005412:	4b25      	ldr	r3, [pc, #148]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	4924      	ldr	r1, [pc, #144]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 8005418:	4b25      	ldr	r3, [pc, #148]	; (80054b0 <HAL_RCC_OscConfig+0x9a8>)
 800541a:	4013      	ands	r3, r2
 800541c:	60cb      	str	r3, [r1, #12]
 800541e:	e03e      	b.n	800549e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e039      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800542c:	4b1e      	ldr	r3, [pc, #120]	; (80054a8 <HAL_RCC_OscConfig+0x9a0>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f003 0203 	and.w	r2, r3, #3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	429a      	cmp	r2, r3
 800543e:	d12c      	bne.n	800549a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544a:	3b01      	subs	r3, #1
 800544c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800544e:	429a      	cmp	r2, r3
 8005450:	d123      	bne.n	800549a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800545e:	429a      	cmp	r2, r3
 8005460:	d11b      	bne.n	800549a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800546e:	429a      	cmp	r2, r3
 8005470:	d113      	bne.n	800549a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	085b      	lsrs	r3, r3, #1
 800547e:	3b01      	subs	r3, #1
 8005480:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005482:	429a      	cmp	r2, r3
 8005484:	d109      	bne.n	800549a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005490:	085b      	lsrs	r3, r3, #1
 8005492:	3b01      	subs	r3, #1
 8005494:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005496:	429a      	cmp	r2, r3
 8005498:	d001      	beq.n	800549e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3720      	adds	r7, #32
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40021000 	.word	0x40021000
 80054ac:	019f800c 	.word	0x019f800c
 80054b0:	feeefffc 	.word	0xfeeefffc

080054b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e11c      	b.n	8005706 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054cc:	4b90      	ldr	r3, [pc, #576]	; (8005710 <HAL_RCC_ClockConfig+0x25c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 030f 	and.w	r3, r3, #15
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d910      	bls.n	80054fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054da:	4b8d      	ldr	r3, [pc, #564]	; (8005710 <HAL_RCC_ClockConfig+0x25c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f023 020f 	bic.w	r2, r3, #15
 80054e2:	498b      	ldr	r1, [pc, #556]	; (8005710 <HAL_RCC_ClockConfig+0x25c>)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ea:	4b89      	ldr	r3, [pc, #548]	; (8005710 <HAL_RCC_ClockConfig+0x25c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d001      	beq.n	80054fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e104      	b.n	8005706 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d010      	beq.n	800552a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	4b81      	ldr	r3, [pc, #516]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005514:	429a      	cmp	r2, r3
 8005516:	d908      	bls.n	800552a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005518:	4b7e      	ldr	r3, [pc, #504]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	497b      	ldr	r1, [pc, #492]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 8005526:	4313      	orrs	r3, r2
 8005528:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 8085 	beq.w	8005642 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b03      	cmp	r3, #3
 800553e:	d11f      	bne.n	8005580 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005540:	4b74      	ldr	r3, [pc, #464]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0da      	b.n	8005706 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005550:	f000 fa58 	bl	8005a04 <RCC_GetSysClockFreqFromPLLSource>
 8005554:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	4a6f      	ldr	r2, [pc, #444]	; (8005718 <HAL_RCC_ClockConfig+0x264>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d947      	bls.n	80055ee <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800555e:	4b6d      	ldr	r3, [pc, #436]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d141      	bne.n	80055ee <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800556a:	4b6a      	ldr	r3, [pc, #424]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005572:	4a68      	ldr	r2, [pc, #416]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 8005574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005578:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800557a:	2380      	movs	r3, #128	; 0x80
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	e036      	b.n	80055ee <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d107      	bne.n	8005598 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005588:	4b62      	ldr	r3, [pc, #392]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d115      	bne.n	80055c0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e0b6      	b.n	8005706 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d107      	bne.n	80055b0 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055a0:	4b5c      	ldr	r3, [pc, #368]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d109      	bne.n	80055c0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e0aa      	b.n	8005706 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055b0:	4b58      	ldr	r3, [pc, #352]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0a2      	b.n	8005706 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80055c0:	f000 f8b0 	bl	8005724 <HAL_RCC_GetSysClockFreq>
 80055c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	4a53      	ldr	r2, [pc, #332]	; (8005718 <HAL_RCC_ClockConfig+0x264>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d90f      	bls.n	80055ee <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80055ce:	4b51      	ldr	r3, [pc, #324]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d109      	bne.n	80055ee <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055da:	4b4e      	ldr	r3, [pc, #312]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055e2:	4a4c      	ldr	r2, [pc, #304]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 80055e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055ea:	2380      	movs	r3, #128	; 0x80
 80055ec:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055ee:	4b49      	ldr	r3, [pc, #292]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f023 0203 	bic.w	r2, r3, #3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	4946      	ldr	r1, [pc, #280]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005600:	f7fc fee0 	bl	80023c4 <HAL_GetTick>
 8005604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005606:	e013      	b.n	8005630 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005608:	f7fc fedc 	bl	80023c4 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	f241 3288 	movw	r2, #5000	; 0x1388
 8005616:	4293      	cmp	r3, r2
 8005618:	d90a      	bls.n	8005630 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561a:	4b3e      	ldr	r3, [pc, #248]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 020c 	and.w	r2, r3, #12
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	429a      	cmp	r2, r3
 800562a:	d001      	beq.n	8005630 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e06a      	b.n	8005706 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005630:	4b38      	ldr	r3, [pc, #224]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 020c 	and.w	r2, r3, #12
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	429a      	cmp	r2, r3
 8005640:	d1e2      	bne.n	8005608 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b80      	cmp	r3, #128	; 0x80
 8005646:	d105      	bne.n	8005654 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005648:	4b32      	ldr	r3, [pc, #200]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	4a31      	ldr	r2, [pc, #196]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 800564e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005652:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d010      	beq.n	8005682 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	4b2b      	ldr	r3, [pc, #172]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800566c:	429a      	cmp	r2, r3
 800566e:	d208      	bcs.n	8005682 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005670:	4b28      	ldr	r3, [pc, #160]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	4925      	ldr	r1, [pc, #148]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 800567e:	4313      	orrs	r3, r2
 8005680:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005682:	4b23      	ldr	r3, [pc, #140]	; (8005710 <HAL_RCC_ClockConfig+0x25c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d210      	bcs.n	80056b2 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005690:	4b1f      	ldr	r3, [pc, #124]	; (8005710 <HAL_RCC_ClockConfig+0x25c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f023 020f 	bic.w	r2, r3, #15
 8005698:	491d      	ldr	r1, [pc, #116]	; (8005710 <HAL_RCC_ClockConfig+0x25c>)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	4313      	orrs	r3, r2
 800569e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a0:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <HAL_RCC_ClockConfig+0x25c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d001      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e029      	b.n	8005706 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d008      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056be:	4b15      	ldr	r3, [pc, #84]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	4912      	ldr	r1, [pc, #72]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d009      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056dc:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	490a      	ldr	r1, [pc, #40]	; (8005714 <HAL_RCC_ClockConfig+0x260>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80056f0:	f000 f8b6 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 80056f4:	4603      	mov	r3, r0
 80056f6:	4a09      	ldr	r2, [pc, #36]	; (800571c <HAL_RCC_ClockConfig+0x268>)
 80056f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056fa:	4b09      	ldr	r3, [pc, #36]	; (8005720 <HAL_RCC_ClockConfig+0x26c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fc fc74 	bl	8001fec <HAL_InitTick>
 8005704:	4603      	mov	r3, r0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40022000 	.word	0x40022000
 8005714:	40021000 	.word	0x40021000
 8005718:	04c4b400 	.word	0x04c4b400
 800571c:	20000004 	.word	0x20000004
 8005720:	20000008 	.word	0x20000008

08005724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005724:	b480      	push	{r7}
 8005726:	b089      	sub	sp, #36	; 0x24
 8005728:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	61fb      	str	r3, [r7, #28]
 800572e:	2300      	movs	r3, #0
 8005730:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005732:	4b47      	ldr	r3, [pc, #284]	; (8005850 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 030c 	and.w	r3, r3, #12
 800573a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800573c:	4b44      	ldr	r3, [pc, #272]	; (8005850 <HAL_RCC_GetSysClockFreq+0x12c>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f003 0303 	and.w	r3, r3, #3
 8005744:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <HAL_RCC_GetSysClockFreq+0x34>
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	2b0c      	cmp	r3, #12
 8005750:	d121      	bne.n	8005796 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d11e      	bne.n	8005796 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005758:	4b3d      	ldr	r3, [pc, #244]	; (8005850 <HAL_RCC_GetSysClockFreq+0x12c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d107      	bne.n	8005774 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005764:	4b3a      	ldr	r3, [pc, #232]	; (8005850 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800576a:	0a1b      	lsrs	r3, r3, #8
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	61fb      	str	r3, [r7, #28]
 8005772:	e005      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005774:	4b36      	ldr	r3, [pc, #216]	; (8005850 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	091b      	lsrs	r3, r3, #4
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8005780:	4a34      	ldr	r2, [pc, #208]	; (8005854 <HAL_RCC_GetSysClockFreq+0x130>)
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005788:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10d      	bne.n	80057ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005794:	e00a      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b04      	cmp	r3, #4
 800579a:	d102      	bne.n	80057a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800579c:	4b2e      	ldr	r3, [pc, #184]	; (8005858 <HAL_RCC_GetSysClockFreq+0x134>)
 800579e:	61bb      	str	r3, [r7, #24]
 80057a0:	e004      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d101      	bne.n	80057ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057a8:	4b2c      	ldr	r3, [pc, #176]	; (800585c <HAL_RCC_GetSysClockFreq+0x138>)
 80057aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2b0c      	cmp	r3, #12
 80057b0:	d146      	bne.n	8005840 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80057b2:	4b27      	ldr	r3, [pc, #156]	; (8005850 <HAL_RCC_GetSysClockFreq+0x12c>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057bc:	4b24      	ldr	r3, [pc, #144]	; (8005850 <HAL_RCC_GetSysClockFreq+0x12c>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	091b      	lsrs	r3, r3, #4
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	3301      	adds	r3, #1
 80057c8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d003      	beq.n	80057d8 <HAL_RCC_GetSysClockFreq+0xb4>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d00d      	beq.n	80057f2 <HAL_RCC_GetSysClockFreq+0xce>
 80057d6:	e019      	b.n	800580c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057d8:	4a1f      	ldr	r2, [pc, #124]	; (8005858 <HAL_RCC_GetSysClockFreq+0x134>)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e0:	4a1b      	ldr	r2, [pc, #108]	; (8005850 <HAL_RCC_GetSysClockFreq+0x12c>)
 80057e2:	68d2      	ldr	r2, [r2, #12]
 80057e4:	0a12      	lsrs	r2, r2, #8
 80057e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057ea:	fb02 f303 	mul.w	r3, r2, r3
 80057ee:	617b      	str	r3, [r7, #20]
        break;
 80057f0:	e019      	b.n	8005826 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057f2:	4a1a      	ldr	r2, [pc, #104]	; (800585c <HAL_RCC_GetSysClockFreq+0x138>)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fa:	4a15      	ldr	r2, [pc, #84]	; (8005850 <HAL_RCC_GetSysClockFreq+0x12c>)
 80057fc:	68d2      	ldr	r2, [r2, #12]
 80057fe:	0a12      	lsrs	r2, r2, #8
 8005800:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005804:	fb02 f303 	mul.w	r3, r2, r3
 8005808:	617b      	str	r3, [r7, #20]
        break;
 800580a:	e00c      	b.n	8005826 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	fbb2 f3f3 	udiv	r3, r2, r3
 8005814:	4a0e      	ldr	r2, [pc, #56]	; (8005850 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005816:	68d2      	ldr	r2, [r2, #12]
 8005818:	0a12      	lsrs	r2, r2, #8
 800581a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800581e:	fb02 f303 	mul.w	r3, r2, r3
 8005822:	617b      	str	r3, [r7, #20]
        break;
 8005824:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005826:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	0e5b      	lsrs	r3, r3, #25
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	3301      	adds	r3, #1
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	fbb2 f3f3 	udiv	r3, r2, r3
 800583e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005840:	69bb      	ldr	r3, [r7, #24]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3724      	adds	r7, #36	; 0x24
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40021000 	.word	0x40021000
 8005854:	0800dcfc 	.word	0x0800dcfc
 8005858:	00f42400 	.word	0x00f42400
 800585c:	007a1200 	.word	0x007a1200

08005860 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8005864:	f7ff ff5e 	bl	8005724 <HAL_RCC_GetSysClockFreq>
 8005868:	4602      	mov	r2, r0
 800586a:	4b05      	ldr	r3, [pc, #20]	; (8005880 <HAL_RCC_GetHCLKFreq+0x20>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	091b      	lsrs	r3, r3, #4
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	4903      	ldr	r1, [pc, #12]	; (8005884 <HAL_RCC_GetHCLKFreq+0x24>)
 8005876:	5ccb      	ldrb	r3, [r1, r3]
 8005878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800587c:	4618      	mov	r0, r3
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40021000 	.word	0x40021000
 8005884:	0800dce4 	.word	0x0800dce4

08005888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800588c:	f7ff ffe8 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 8005890:	4602      	mov	r2, r0
 8005892:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	0a1b      	lsrs	r3, r3, #8
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	4903      	ldr	r1, [pc, #12]	; (80058ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800589e:	5ccb      	ldrb	r3, [r1, r3]
 80058a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40021000 	.word	0x40021000
 80058ac:	0800dcf4 	.word	0x0800dcf4

080058b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058b4:	f7ff ffd4 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 80058b8:	4602      	mov	r2, r0
 80058ba:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	0adb      	lsrs	r3, r3, #11
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	4903      	ldr	r1, [pc, #12]	; (80058d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058c6:	5ccb      	ldrb	r3, [r1, r3]
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40021000 	.word	0x40021000
 80058d4:	0800dcf4 	.word	0x0800dcf4

080058d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	220f      	movs	r2, #15
 80058e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80058e8:	4b12      	ldr	r3, [pc, #72]	; (8005934 <HAL_RCC_GetClockConfig+0x5c>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0203 	and.w	r2, r3, #3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80058f4:	4b0f      	ldr	r3, [pc, #60]	; (8005934 <HAL_RCC_GetClockConfig+0x5c>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005900:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <HAL_RCC_GetClockConfig+0x5c>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800590c:	4b09      	ldr	r3, [pc, #36]	; (8005934 <HAL_RCC_GetClockConfig+0x5c>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	08db      	lsrs	r3, r3, #3
 8005912:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <HAL_RCC_GetClockConfig+0x60>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 020f 	and.w	r2, r3, #15
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	601a      	str	r2, [r3, #0]
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40021000 	.word	0x40021000
 8005938:	40022000 	.word	0x40022000

0800593c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005944:	2300      	movs	r3, #0
 8005946:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005948:	4b2c      	ldr	r3, [pc, #176]	; (80059fc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005954:	f7ff f83a 	bl	80049cc <HAL_PWREx_GetVoltageRange>
 8005958:	6138      	str	r0, [r7, #16]
 800595a:	e014      	b.n	8005986 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800595c:	4b27      	ldr	r3, [pc, #156]	; (80059fc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800595e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005960:	4a26      	ldr	r2, [pc, #152]	; (80059fc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005966:	6593      	str	r3, [r2, #88]	; 0x58
 8005968:	4b24      	ldr	r3, [pc, #144]	; (80059fc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800596a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005974:	f7ff f82a 	bl	80049cc <HAL_PWREx_GetVoltageRange>
 8005978:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800597a:	4b20      	ldr	r3, [pc, #128]	; (80059fc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800597c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597e:	4a1f      	ldr	r2, [pc, #124]	; (80059fc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005984:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005992:	d10b      	bne.n	80059ac <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b80      	cmp	r3, #128	; 0x80
 8005998:	d919      	bls.n	80059ce <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2ba0      	cmp	r3, #160	; 0xa0
 800599e:	d902      	bls.n	80059a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059a0:	2302      	movs	r3, #2
 80059a2:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80059a4:	e013      	b.n	80059ce <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059a6:	2301      	movs	r3, #1
 80059a8:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80059aa:	e010      	b.n	80059ce <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b80      	cmp	r3, #128	; 0x80
 80059b0:	d902      	bls.n	80059b8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80059b2:	2303      	movs	r3, #3
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	e00a      	b.n	80059ce <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b80      	cmp	r3, #128	; 0x80
 80059bc:	d102      	bne.n	80059c4 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059be:	2302      	movs	r3, #2
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	e004      	b.n	80059ce <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b70      	cmp	r3, #112	; 0x70
 80059c8:	d101      	bne.n	80059ce <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059ca:	2301      	movs	r3, #1
 80059cc:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80059ce:	4b0c      	ldr	r3, [pc, #48]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f023 020f 	bic.w	r2, r3, #15
 80059d6:	490a      	ldr	r1, [pc, #40]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80059de:	4b08      	ldr	r3, [pc, #32]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d001      	beq.n	80059f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e000      	b.n	80059f2 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40021000 	.word	0x40021000
 8005a00:	40022000 	.word	0x40022000

08005a04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a0a:	4b31      	ldr	r3, [pc, #196]	; (8005ad0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a14:	4b2e      	ldr	r3, [pc, #184]	; (8005ad0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	091b      	lsrs	r3, r3, #4
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	3301      	adds	r3, #1
 8005a20:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d015      	beq.n	8005a54 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d839      	bhi.n	8005aa2 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d01c      	beq.n	8005a6e <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d133      	bne.n	8005aa2 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a3a:	4a26      	ldr	r2, [pc, #152]	; (8005ad4 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a42:	4a23      	ldr	r2, [pc, #140]	; (8005ad0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005a44:	68d2      	ldr	r2, [r2, #12]
 8005a46:	0a12      	lsrs	r2, r2, #8
 8005a48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a4c:	fb02 f303 	mul.w	r3, r2, r3
 8005a50:	613b      	str	r3, [r7, #16]
      break;
 8005a52:	e029      	b.n	8005aa8 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a54:	4a20      	ldr	r2, [pc, #128]	; (8005ad8 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5c:	4a1c      	ldr	r2, [pc, #112]	; (8005ad0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005a5e:	68d2      	ldr	r2, [r2, #12]
 8005a60:	0a12      	lsrs	r2, r2, #8
 8005a62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a66:	fb02 f303 	mul.w	r3, r2, r3
 8005a6a:	613b      	str	r3, [r7, #16]
      break;
 8005a6c:	e01c      	b.n	8005aa8 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a6e:	4b18      	ldr	r3, [pc, #96]	; (8005ad0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d107      	bne.n	8005a8a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a7a:	4b15      	ldr	r3, [pc, #84]	; (8005ad0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a80:	0a1b      	lsrs	r3, r3, #8
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	e005      	b.n	8005a96 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a8a:	4b11      	ldr	r3, [pc, #68]	; (8005ad0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	091b      	lsrs	r3, r3, #4
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8005a96:	4a11      	ldr	r2, [pc, #68]	; (8005adc <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a9e:	613b      	str	r3, [r7, #16]
        break;
 8005aa0:	e002      	b.n	8005aa8 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	613b      	str	r3, [r7, #16]
      break;
 8005aa6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005aa8:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	0e5b      	lsrs	r3, r3, #25
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005ac2:	683b      	ldr	r3, [r7, #0]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	371c      	adds	r7, #28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	00f42400 	.word	0x00f42400
 8005ad8:	007a1200 	.word	0x007a1200
 8005adc:	0800dcfc 	.word	0x0800dcfc

08005ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ae8:	2300      	movs	r3, #0
 8005aea:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005aec:	2300      	movs	r3, #0
 8005aee:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d040      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b00:	2b80      	cmp	r3, #128	; 0x80
 8005b02:	d02a      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b04:	2b80      	cmp	r3, #128	; 0x80
 8005b06:	d825      	bhi.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005b08:	2b60      	cmp	r3, #96	; 0x60
 8005b0a:	d026      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b0c:	2b60      	cmp	r3, #96	; 0x60
 8005b0e:	d821      	bhi.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005b10:	2b40      	cmp	r3, #64	; 0x40
 8005b12:	d006      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005b14:	2b40      	cmp	r3, #64	; 0x40
 8005b16:	d81d      	bhi.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d009      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005b1c:	2b20      	cmp	r3, #32
 8005b1e:	d010      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005b20:	e018      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b22:	4b8f      	ldr	r3, [pc, #572]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	4a8e      	ldr	r2, [pc, #568]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b2c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b2e:	e015      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3304      	adds	r3, #4
 8005b34:	2100      	movs	r1, #0
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fb56 	bl	80061e8 <RCCEx_PLLSAI1_Config>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b40:	e00c      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3320      	adds	r3, #32
 8005b46:	2100      	movs	r1, #0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fc33 	bl	80063b4 <RCCEx_PLLSAI2_Config>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b52:	e003      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	77fb      	strb	r3, [r7, #31]
        break;
 8005b58:	e000      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8005b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b5c:	7ffb      	ldrb	r3, [r7, #31]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10b      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b62:	4b7f      	ldr	r3, [pc, #508]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b68:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b70:	497b      	ldr	r1, [pc, #492]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005b78:	e001      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7a:	7ffb      	ldrb	r3, [r7, #31]
 8005b7c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d047      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b92:	d030      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b98:	d82a      	bhi.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b9e:	d02a      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ba4:	d824      	bhi.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005baa:	d008      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bb0:	d81e      	bhi.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bba:	d010      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005bbc:	e018      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005bbe:	4b68      	ldr	r3, [pc, #416]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	4a67      	ldr	r2, [pc, #412]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc8:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005bca:	e015      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fb08 	bl	80061e8 <RCCEx_PLLSAI1_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005bdc:	e00c      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3320      	adds	r3, #32
 8005be2:	2100      	movs	r1, #0
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fbe5 	bl	80063b4 <RCCEx_PLLSAI2_Config>
 8005bea:	4603      	mov	r3, r0
 8005bec:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005bee:	e003      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	77fb      	strb	r3, [r7, #31]
        break;
 8005bf4:	e000      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8005bf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf8:	7ffb      	ldrb	r3, [r7, #31]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10b      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005bfe:	4b58      	ldr	r3, [pc, #352]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0c:	4954      	ldr	r1, [pc, #336]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005c14:	e001      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c16:	7ffb      	ldrb	r3, [r7, #31]
 8005c18:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80ab 	beq.w	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c2c:	4b4c      	ldr	r3, [pc, #304]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10d      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c38:	4b49      	ldr	r3, [pc, #292]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3c:	4a48      	ldr	r2, [pc, #288]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c42:	6593      	str	r3, [r2, #88]	; 0x58
 8005c44:	4b46      	ldr	r3, [pc, #280]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c50:	2301      	movs	r3, #1
 8005c52:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c54:	4b43      	ldr	r3, [pc, #268]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a42      	ldr	r2, [pc, #264]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c60:	f7fc fbb0 	bl	80023c4 <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c66:	e00f      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c68:	f7fc fbac 	bl	80023c4 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d908      	bls.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c76:	4b3b      	ldr	r3, [pc, #236]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d109      	bne.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8005c86:	e006      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c88:	4b36      	ldr	r3, [pc, #216]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0e9      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005c94:	e000      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8005c96:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8005c98:	7ffb      	ldrb	r3, [r7, #31]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d164      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c9e:	4b30      	ldr	r3, [pc, #192]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca8:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01f      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d019      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cbc:	4b28      	ldr	r3, [pc, #160]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc6:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cc8:	4b25      	ldr	r3, [pc, #148]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cce:	4a24      	ldr	r2, [pc, #144]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cd8:	4b21      	ldr	r3, [pc, #132]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cde:	4a20      	ldr	r2, [pc, #128]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ce8:	4a1d      	ldr	r2, [pc, #116]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d01f      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfa:	f7fc fb63 	bl	80023c4 <HAL_GetTick>
 8005cfe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d00:	e012      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d02:	f7fc fb5f 	bl	80023c4 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d909      	bls.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d14:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8005d26:	e007      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d28:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0e5      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005d36:	e000      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005d38:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8005d3a:	7ffb      	ldrb	r3, [r7, #31]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10c      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d40:	4b07      	ldr	r3, [pc, #28]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d50:	4903      	ldr	r1, [pc, #12]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d58:	e008      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d5a:	7ffb      	ldrb	r3, [r7, #31]
 8005d5c:	77bb      	strb	r3, [r7, #30]
 8005d5e:	e005      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005d60:	40021000 	.word	0x40021000
 8005d64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d68:	7ffb      	ldrb	r3, [r7, #31]
 8005d6a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d105      	bne.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d72:	4b9c      	ldr	r3, [pc, #624]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d76:	4a9b      	ldr	r2, [pc, #620]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d8a:	4b96      	ldr	r3, [pc, #600]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d90:	f023 0203 	bic.w	r2, r3, #3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d98:	4992      	ldr	r1, [pc, #584]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005dac:	4b8d      	ldr	r3, [pc, #564]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db2:	f023 020c 	bic.w	r2, r3, #12
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	498a      	ldr	r1, [pc, #552]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dce:	4b85      	ldr	r3, [pc, #532]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ddc:	4981      	ldr	r1, [pc, #516]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0308 	and.w	r3, r3, #8
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00a      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005df0:	4b7c      	ldr	r3, [pc, #496]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	4979      	ldr	r1, [pc, #484]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0310 	and.w	r3, r3, #16
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e12:	4b74      	ldr	r3, [pc, #464]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e20:	4970      	ldr	r1, [pc, #448]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e34:	4b6b      	ldr	r3, [pc, #428]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e42:	4968      	ldr	r1, [pc, #416]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e56:	4b63      	ldr	r3, [pc, #396]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e64:	495f      	ldr	r1, [pc, #380]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00a      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e78:	4b5a      	ldr	r3, [pc, #360]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e86:	4957      	ldr	r1, [pc, #348]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005e9a:	4b52      	ldr	r3, [pc, #328]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ea8:	494e      	ldr	r1, [pc, #312]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d031      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ec0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ec4:	d00e      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005ec6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005eca:	d814      	bhi.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d015      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ed4:	d10f      	bne.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ed6:	4b43      	ldr	r3, [pc, #268]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	4a42      	ldr	r2, [pc, #264]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005edc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ee0:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005ee2:	e00c      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	2100      	movs	r1, #0
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 f97c 	bl	80061e8 <RCCEx_PLLSAI1_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005ef4:	e003      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	77fb      	strb	r3, [r7, #31]
        break;
 8005efa:	e000      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005efe:	7ffb      	ldrb	r3, [r7, #31]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10b      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f04:	4b37      	ldr	r3, [pc, #220]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f12:	4934      	ldr	r1, [pc, #208]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005f1a:	e001      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1c:	7ffb      	ldrb	r3, [r7, #31]
 8005f1e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f2c:	4b2d      	ldr	r3, [pc, #180]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3a:	492a      	ldr	r1, [pc, #168]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f4e:	4b25      	ldr	r3, [pc, #148]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f5c:	4921      	ldr	r1, [pc, #132]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00a      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f70:	4b1c      	ldr	r3, [pc, #112]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7e:	4919      	ldr	r1, [pc, #100]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f92:	4b14      	ldr	r3, [pc, #80]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005f94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f98:	f023 0203 	bic.w	r2, r3, #3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa0:	4910      	ldr	r1, [pc, #64]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d02b      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fc2:	4908      	ldr	r1, [pc, #32]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fd2:	d109      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fd4:	4b03      	ldr	r3, [pc, #12]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	4a02      	ldr	r2, [pc, #8]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fde:	60d3      	str	r3, [r2, #12]
 8005fe0:	e014      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005fe2:	bf00      	nop
 8005fe4:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ff0:	d10c      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 f8f5 	bl	80061e8 <RCCEx_PLLSAI1_Config>
 8005ffe:	4603      	mov	r3, r0
 8006000:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8006002:	7ffb      	ldrb	r3, [r7, #31]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8006008:	7ffb      	ldrb	r3, [r7, #31]
 800600a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d04a      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800601c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006020:	d108      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8006022:	4b70      	ldr	r3, [pc, #448]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006024:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006028:	4a6e      	ldr	r2, [pc, #440]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800602a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800602e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006032:	e012      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8006034:	4b6b      	ldr	r3, [pc, #428]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006042:	4968      	ldr	r1, [pc, #416]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800604a:	4b66      	ldr	r3, [pc, #408]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800604c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006050:	4a64      	ldr	r2, [pc, #400]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006056:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800605e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006062:	d10d      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3304      	adds	r3, #4
 8006068:	2101      	movs	r1, #1
 800606a:	4618      	mov	r0, r3
 800606c:	f000 f8bc 	bl	80061e8 <RCCEx_PLLSAI1_Config>
 8006070:	4603      	mov	r3, r0
 8006072:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006074:	7ffb      	ldrb	r3, [r7, #31]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d019      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800607a:	7ffb      	ldrb	r3, [r7, #31]
 800607c:	77bb      	strb	r3, [r7, #30]
 800607e:	e016      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006088:	d106      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800608a:	4b56      	ldr	r3, [pc, #344]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	4a55      	ldr	r2, [pc, #340]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006094:	60d3      	str	r3, [r2, #12]
 8006096:	e00a      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800609c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060a0:	d105      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80060a2:	4b50      	ldr	r3, [pc, #320]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	4a4f      	ldr	r2, [pc, #316]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80060a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ac:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d028      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060ba:	4b4a      	ldr	r3, [pc, #296]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80060bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060c8:	4946      	ldr	r1, [pc, #280]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060d8:	d106      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060da:	4b42      	ldr	r3, [pc, #264]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	4a41      	ldr	r2, [pc, #260]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80060e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060e4:	60d3      	str	r3, [r2, #12]
 80060e6:	e011      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060f0:	d10c      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3304      	adds	r3, #4
 80060f6:	2101      	movs	r1, #1
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 f875 	bl	80061e8 <RCCEx_PLLSAI1_Config>
 80060fe:	4603      	mov	r3, r0
 8006100:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006102:	7ffb      	ldrb	r3, [r7, #31]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8006108:	7ffb      	ldrb	r3, [r7, #31]
 800610a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01e      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006118:	4b32      	ldr	r3, [pc, #200]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800611a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006128:	492e      	ldr	r1, [pc, #184]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800612a:	4313      	orrs	r3, r2
 800612c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800613a:	d10c      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3304      	adds	r3, #4
 8006140:	2102      	movs	r1, #2
 8006142:	4618      	mov	r0, r3
 8006144:	f000 f850 	bl	80061e8 <RCCEx_PLLSAI1_Config>
 8006148:	4603      	mov	r3, r0
 800614a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800614c:	7ffb      	ldrb	r3, [r7, #31]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8006152:	7ffb      	ldrb	r3, [r7, #31]
 8006154:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00b      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006162:	4b20      	ldr	r3, [pc, #128]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006164:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006168:	f023 0204 	bic.w	r2, r3, #4
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006172:	491c      	ldr	r1, [pc, #112]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006174:	4313      	orrs	r3, r2
 8006176:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00b      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006186:	4b17      	ldr	r3, [pc, #92]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006188:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800618c:	f023 0218 	bic.w	r2, r3, #24
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006196:	4913      	ldr	r1, [pc, #76]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006198:	4313      	orrs	r3, r2
 800619a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d017      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80061aa:	4b0e      	ldr	r3, [pc, #56]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80061ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ba:	490a      	ldr	r1, [pc, #40]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061cc:	d105      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061ce:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	4a04      	ldr	r2, [pc, #16]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80061d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061d8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80061da:	7fbb      	ldrb	r3, [r7, #30]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3720      	adds	r7, #32
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40021000 	.word	0x40021000

080061e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d018      	beq.n	8006230 <RCCEx_PLLSAI1_Config+0x48>
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d81f      	bhi.n	8006242 <RCCEx_PLLSAI1_Config+0x5a>
 8006202:	2b01      	cmp	r3, #1
 8006204:	d002      	beq.n	800620c <RCCEx_PLLSAI1_Config+0x24>
 8006206:	2b02      	cmp	r3, #2
 8006208:	d009      	beq.n	800621e <RCCEx_PLLSAI1_Config+0x36>
 800620a:	e01a      	b.n	8006242 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800620c:	4b65      	ldr	r3, [pc, #404]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d117      	bne.n	8006248 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800621c:	e014      	b.n	8006248 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800621e:	4b61      	ldr	r3, [pc, #388]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006226:	2b00      	cmp	r3, #0
 8006228:	d110      	bne.n	800624c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800622e:	e00d      	b.n	800624c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006230:	4b5c      	ldr	r3, [pc, #368]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d109      	bne.n	8006250 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006240:	e006      	b.n	8006250 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	73fb      	strb	r3, [r7, #15]
      break;
 8006246:	e004      	b.n	8006252 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006248:	bf00      	nop
 800624a:	e002      	b.n	8006252 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800624c:	bf00      	nop
 800624e:	e000      	b.n	8006252 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006250:	bf00      	nop
  }

  if (status == HAL_OK)
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	2b00      	cmp	r3, #0
 8006256:	f040 809f 	bne.w	8006398 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800625a:	4b52      	ldr	r3, [pc, #328]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a51      	ldr	r2, [pc, #324]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006260:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006266:	f7fc f8ad 	bl	80023c4 <HAL_GetTick>
 800626a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800626c:	e00f      	b.n	800628e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800626e:	f7fc f8a9 	bl	80023c4 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d908      	bls.n	800628e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800627c:	4b49      	ldr	r3, [pc, #292]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d009      	beq.n	800629c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800628c:	e006      	b.n	800629c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800628e:	4b45      	ldr	r3, [pc, #276]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e9      	bne.n	800626e <RCCEx_PLLSAI1_Config+0x86>
 800629a:	e000      	b.n	800629e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 800629c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d179      	bne.n	8006398 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d116      	bne.n	80062d8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062aa:	4b3e      	ldr	r3, [pc, #248]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	4b3e      	ldr	r3, [pc, #248]	; (80063a8 <RCCEx_PLLSAI1_Config+0x1c0>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6892      	ldr	r2, [r2, #8]
 80062b6:	0211      	lsls	r1, r2, #8
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	68d2      	ldr	r2, [r2, #12]
 80062bc:	06d2      	lsls	r2, r2, #27
 80062be:	4311      	orrs	r1, r2
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6852      	ldr	r2, [r2, #4]
 80062c4:	3a01      	subs	r2, #1
 80062c6:	0112      	lsls	r2, r2, #4
 80062c8:	4311      	orrs	r1, r2
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6812      	ldr	r2, [r2, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	4934      	ldr	r1, [pc, #208]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	610b      	str	r3, [r1, #16]
 80062d6:	e033      	b.n	8006340 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d118      	bne.n	8006310 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062de:	4b31      	ldr	r3, [pc, #196]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80062e0:	691a      	ldr	r2, [r3, #16]
 80062e2:	4b32      	ldr	r3, [pc, #200]	; (80063ac <RCCEx_PLLSAI1_Config+0x1c4>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6892      	ldr	r2, [r2, #8]
 80062ea:	0211      	lsls	r1, r2, #8
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6912      	ldr	r2, [r2, #16]
 80062f0:	0852      	lsrs	r2, r2, #1
 80062f2:	3a01      	subs	r2, #1
 80062f4:	0552      	lsls	r2, r2, #21
 80062f6:	4311      	orrs	r1, r2
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6852      	ldr	r2, [r2, #4]
 80062fc:	3a01      	subs	r2, #1
 80062fe:	0112      	lsls	r2, r2, #4
 8006300:	4311      	orrs	r1, r2
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	4926      	ldr	r1, [pc, #152]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800630a:	4313      	orrs	r3, r2
 800630c:	610b      	str	r3, [r1, #16]
 800630e:	e017      	b.n	8006340 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006310:	4b24      	ldr	r3, [pc, #144]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	4b26      	ldr	r3, [pc, #152]	; (80063b0 <RCCEx_PLLSAI1_Config+0x1c8>)
 8006316:	4013      	ands	r3, r2
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6892      	ldr	r2, [r2, #8]
 800631c:	0211      	lsls	r1, r2, #8
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6952      	ldr	r2, [r2, #20]
 8006322:	0852      	lsrs	r2, r2, #1
 8006324:	3a01      	subs	r2, #1
 8006326:	0652      	lsls	r2, r2, #25
 8006328:	4311      	orrs	r1, r2
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6852      	ldr	r2, [r2, #4]
 800632e:	3a01      	subs	r2, #1
 8006330:	0112      	lsls	r2, r2, #4
 8006332:	4311      	orrs	r1, r2
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6812      	ldr	r2, [r2, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	491a      	ldr	r1, [pc, #104]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800633c:	4313      	orrs	r3, r2
 800633e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006340:	4b18      	ldr	r3, [pc, #96]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a17      	ldr	r2, [pc, #92]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006346:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800634a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800634c:	f7fc f83a 	bl	80023c4 <HAL_GetTick>
 8006350:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006352:	e00f      	b.n	8006374 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006354:	f7fc f836 	bl	80023c4 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d908      	bls.n	8006374 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006362:	4b10      	ldr	r3, [pc, #64]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d109      	bne.n	8006382 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006372:	e006      	b.n	8006382 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006374:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0e9      	beq.n	8006354 <RCCEx_PLLSAI1_Config+0x16c>
 8006380:	e000      	b.n	8006384 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8006382:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800638a:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800638c:	691a      	ldr	r2, [r3, #16]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	4904      	ldr	r1, [pc, #16]	; (80063a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006394:	4313      	orrs	r3, r2
 8006396:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	40021000 	.word	0x40021000
 80063a8:	07ff800c 	.word	0x07ff800c
 80063ac:	ff9f800c 	.word	0xff9f800c
 80063b0:	f9ff800c 	.word	0xf9ff800c

080063b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	d018      	beq.n	80063fc <RCCEx_PLLSAI2_Config+0x48>
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d81f      	bhi.n	800640e <RCCEx_PLLSAI2_Config+0x5a>
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d002      	beq.n	80063d8 <RCCEx_PLLSAI2_Config+0x24>
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d009      	beq.n	80063ea <RCCEx_PLLSAI2_Config+0x36>
 80063d6:	e01a      	b.n	800640e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063d8:	4b4a      	ldr	r3, [pc, #296]	; (8006504 <RCCEx_PLLSAI2_Config+0x150>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d117      	bne.n	8006414 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063e8:	e014      	b.n	8006414 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063ea:	4b46      	ldr	r3, [pc, #280]	; (8006504 <RCCEx_PLLSAI2_Config+0x150>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d110      	bne.n	8006418 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063fa:	e00d      	b.n	8006418 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80063fc:	4b41      	ldr	r3, [pc, #260]	; (8006504 <RCCEx_PLLSAI2_Config+0x150>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d109      	bne.n	800641c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800640c:	e006      	b.n	800641c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	73fb      	strb	r3, [r7, #15]
      break;
 8006412:	e004      	b.n	800641e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006414:	bf00      	nop
 8006416:	e002      	b.n	800641e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006418:	bf00      	nop
 800641a:	e000      	b.n	800641e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800641c:	bf00      	nop
  }

  if (status == HAL_OK)
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d169      	bne.n	80064f8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006424:	4b37      	ldr	r3, [pc, #220]	; (8006504 <RCCEx_PLLSAI2_Config+0x150>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a36      	ldr	r2, [pc, #216]	; (8006504 <RCCEx_PLLSAI2_Config+0x150>)
 800642a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800642e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006430:	f7fb ffc8 	bl	80023c4 <HAL_GetTick>
 8006434:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006436:	e00f      	b.n	8006458 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006438:	f7fb ffc4 	bl	80023c4 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d908      	bls.n	8006458 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006446:	4b2f      	ldr	r3, [pc, #188]	; (8006504 <RCCEx_PLLSAI2_Config+0x150>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d009      	beq.n	8006466 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006456:	e006      	b.n	8006466 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006458:	4b2a      	ldr	r3, [pc, #168]	; (8006504 <RCCEx_PLLSAI2_Config+0x150>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e9      	bne.n	8006438 <RCCEx_PLLSAI2_Config+0x84>
 8006464:	e000      	b.n	8006468 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8006466:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d144      	bne.n	80064f8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d115      	bne.n	80064a0 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006474:	4b23      	ldr	r3, [pc, #140]	; (8006504 <RCCEx_PLLSAI2_Config+0x150>)
 8006476:	695a      	ldr	r2, [r3, #20]
 8006478:	4b23      	ldr	r3, [pc, #140]	; (8006508 <RCCEx_PLLSAI2_Config+0x154>)
 800647a:	4013      	ands	r3, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	6892      	ldr	r2, [r2, #8]
 8006480:	0211      	lsls	r1, r2, #8
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	68d2      	ldr	r2, [r2, #12]
 8006486:	06d2      	lsls	r2, r2, #27
 8006488:	4311      	orrs	r1, r2
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6852      	ldr	r2, [r2, #4]
 800648e:	3a01      	subs	r2, #1
 8006490:	0112      	lsls	r2, r2, #4
 8006492:	4311      	orrs	r1, r2
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	491a      	ldr	r1, [pc, #104]	; (8006504 <RCCEx_PLLSAI2_Config+0x150>)
 800649c:	4313      	orrs	r3, r2
 800649e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80064a0:	4b18      	ldr	r3, [pc, #96]	; (8006504 <RCCEx_PLLSAI2_Config+0x150>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a17      	ldr	r2, [pc, #92]	; (8006504 <RCCEx_PLLSAI2_Config+0x150>)
 80064a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ac:	f7fb ff8a 	bl	80023c4 <HAL_GetTick>
 80064b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80064b2:	e00f      	b.n	80064d4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80064b4:	f7fb ff86 	bl	80023c4 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d908      	bls.n	80064d4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80064c2:	4b10      	ldr	r3, [pc, #64]	; (8006504 <RCCEx_PLLSAI2_Config+0x150>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80064d2:	e006      	b.n	80064e2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80064d4:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <RCCEx_PLLSAI2_Config+0x150>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d0e9      	beq.n	80064b4 <RCCEx_PLLSAI2_Config+0x100>
 80064e0:	e000      	b.n	80064e4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80064e2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80064ea:	4b06      	ldr	r3, [pc, #24]	; (8006504 <RCCEx_PLLSAI2_Config+0x150>)
 80064ec:	695a      	ldr	r2, [r3, #20]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	4904      	ldr	r1, [pc, #16]	; (8006504 <RCCEx_PLLSAI2_Config+0x150>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40021000 	.word	0x40021000
 8006508:	07ff800c 	.word	0x07ff800c

0800650c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d066      	beq.n	80065ec <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7fb fa96 	bl	8001a64 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f003 0310 	and.w	r3, r3, #16
 800654a:	2b10      	cmp	r3, #16
 800654c:	d045      	beq.n	80065da <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800654e:	4b2a      	ldr	r3, [pc, #168]	; (80065f8 <HAL_RTC_Init+0xec>)
 8006550:	22ca      	movs	r2, #202	; 0xca
 8006552:	625a      	str	r2, [r3, #36]	; 0x24
 8006554:	4b28      	ldr	r3, [pc, #160]	; (80065f8 <HAL_RTC_Init+0xec>)
 8006556:	2253      	movs	r2, #83	; 0x53
 8006558:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f872 	bl	8006644 <RTC_EnterInitMode>
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d121      	bne.n	80065ae <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800656a:	4b23      	ldr	r3, [pc, #140]	; (80065f8 <HAL_RTC_Init+0xec>)
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	4a22      	ldr	r2, [pc, #136]	; (80065f8 <HAL_RTC_Init+0xec>)
 8006570:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006578:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800657a:	4b1f      	ldr	r3, [pc, #124]	; (80065f8 <HAL_RTC_Init+0xec>)
 800657c:	699a      	ldr	r2, [r3, #24]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6859      	ldr	r1, [r3, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	4319      	orrs	r1, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	430b      	orrs	r3, r1
 800658e:	491a      	ldr	r1, [pc, #104]	; (80065f8 <HAL_RTC_Init+0xec>)
 8006590:	4313      	orrs	r3, r2
 8006592:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	041b      	lsls	r3, r3, #16
 800659e:	4916      	ldr	r1, [pc, #88]	; (80065f8 <HAL_RTC_Init+0xec>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f881 	bl	80066ac <RTC_ExitInitMode>
 80065aa:	4603      	mov	r3, r0
 80065ac:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10e      	bne.n	80065d2 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 80065b4:	4b10      	ldr	r3, [pc, #64]	; (80065f8 <HAL_RTC_Init+0xec>)
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a19      	ldr	r1, [r3, #32]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	4319      	orrs	r1, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	430b      	orrs	r3, r1
 80065cc:	490a      	ldr	r1, [pc, #40]	; (80065f8 <HAL_RTC_Init+0xec>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065d2:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <HAL_RTC_Init+0xec>)
 80065d4:	22ff      	movs	r2, #255	; 0xff
 80065d6:	625a      	str	r2, [r3, #36]	; 0x24
 80065d8:	e001      	b.n	80065de <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80065de:	7bfb      	ldrb	r3, [r7, #15]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d103      	bne.n	80065ec <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	40002800 	.word	0x40002800

080065fc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8006604:	4b0d      	ldr	r3, [pc, #52]	; (800663c <HAL_RTC_WaitForSynchro+0x40>)
 8006606:	4a0e      	ldr	r2, [pc, #56]	; (8006640 <HAL_RTC_WaitForSynchro+0x44>)
 8006608:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800660a:	f7fb fedb 	bl	80023c4 <HAL_GetTick>
 800660e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006610:	e009      	b.n	8006626 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006612:	f7fb fed7 	bl	80023c4 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006620:	d901      	bls.n	8006626 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e006      	b.n	8006634 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006626:	4b05      	ldr	r3, [pc, #20]	; (800663c <HAL_RTC_WaitForSynchro+0x40>)
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0ef      	beq.n	8006612 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	40002800 	.word	0x40002800
 8006640:	0001005c 	.word	0x0001005c

08006644 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006650:	4b15      	ldr	r3, [pc, #84]	; (80066a8 <RTC_EnterInitMode+0x64>)
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	d120      	bne.n	800669e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800665c:	4b12      	ldr	r3, [pc, #72]	; (80066a8 <RTC_EnterInitMode+0x64>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4a11      	ldr	r2, [pc, #68]	; (80066a8 <RTC_EnterInitMode+0x64>)
 8006662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006666:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006668:	f7fb feac 	bl	80023c4 <HAL_GetTick>
 800666c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800666e:	e00d      	b.n	800668c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006670:	f7fb fea8 	bl	80023c4 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800667e:	d905      	bls.n	800668c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2203      	movs	r2, #3
 8006688:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800668c:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <RTC_EnterInitMode+0x64>)
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	d102      	bne.n	800669e <RTC_EnterInitMode+0x5a>
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	2b03      	cmp	r3, #3
 800669c:	d1e8      	bne.n	8006670 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	40002800 	.word	0x40002800

080066ac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80066b8:	4b1a      	ldr	r3, [pc, #104]	; (8006724 <RTC_ExitInitMode+0x78>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	4a19      	ldr	r2, [pc, #100]	; (8006724 <RTC_ExitInitMode+0x78>)
 80066be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066c2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80066c4:	4b17      	ldr	r3, [pc, #92]	; (8006724 <RTC_ExitInitMode+0x78>)
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10c      	bne.n	80066ea <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7ff ff93 	bl	80065fc <HAL_RTC_WaitForSynchro>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01e      	beq.n	800671a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2203      	movs	r2, #3
 80066e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	73fb      	strb	r3, [r7, #15]
 80066e8:	e017      	b.n	800671a <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80066ea:	4b0e      	ldr	r3, [pc, #56]	; (8006724 <RTC_ExitInitMode+0x78>)
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	4a0d      	ldr	r2, [pc, #52]	; (8006724 <RTC_ExitInitMode+0x78>)
 80066f0:	f023 0320 	bic.w	r3, r3, #32
 80066f4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff ff80 	bl	80065fc <HAL_RTC_WaitForSynchro>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2203      	movs	r2, #3
 8006706:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800670e:	4b05      	ldr	r3, [pc, #20]	; (8006724 <RTC_ExitInitMode+0x78>)
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	4a04      	ldr	r2, [pc, #16]	; (8006724 <RTC_ExitInitMode+0x78>)
 8006714:	f043 0320 	orr.w	r3, r3, #32
 8006718:	6193      	str	r3, [r2, #24]
  }

  return status;
 800671a:	7bfb      	ldrb	r3, [r7, #15]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	40002800 	.word	0x40002800

08006728 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	490f      	ldr	r1, [pc, #60]	; (8006778 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 800673c:	4313      	orrs	r3, r2
 800673e:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	490c      	ldr	r1, [pc, #48]	; (800677c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800674a:	4313      	orrs	r3, r2
 800674c:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 800674e:	4b0b      	ldr	r3, [pc, #44]	; (800677c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	6919      	ldr	r1, [r3, #16]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	041b      	lsls	r3, r3, #16
 8006760:	430b      	orrs	r3, r1
 8006762:	4906      	ldr	r1, [pc, #24]	; (800677c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006764:	4313      	orrs	r3, r2
 8006766:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40002800 	.word	0x40002800
 800677c:	40003400 	.word	0x40003400

08006780 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e095      	b.n	80068be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	2b00      	cmp	r3, #0
 8006798:	d108      	bne.n	80067ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067a2:	d009      	beq.n	80067b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	61da      	str	r2, [r3, #28]
 80067aa:	e005      	b.n	80067b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7fb f984 	bl	8001ae0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067f8:	d902      	bls.n	8006800 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]
 80067fe:	e002      	b.n	8006806 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006804:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800680e:	d007      	beq.n	8006820 <HAL_SPI_Init+0xa0>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006818:	d002      	beq.n	8006820 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006830:	431a      	orrs	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	431a      	orrs	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006862:	ea42 0103 	orr.w	r1, r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	0c1b      	lsrs	r3, r3, #16
 800687c:	f003 0204 	and.w	r2, r3, #4
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	f003 0310 	and.w	r3, r3, #16
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688e:	f003 0308 	and.w	r3, r3, #8
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800689c:	ea42 0103 	orr.w	r1, r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b082      	sub	sp, #8
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e049      	b.n	800696c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d106      	bne.n	80068f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7fb f9dd 	bl	8001cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2202      	movs	r2, #2
 80068f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	3304      	adds	r3, #4
 8006902:	4619      	mov	r1, r3
 8006904:	4610      	mov	r0, r2
 8006906:	f000 fed5 	bl	80076b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b01      	cmp	r3, #1
 8006986:	d001      	beq.n	800698c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e04f      	b.n	8006a2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0201 	orr.w	r2, r2, #1
 80069a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a23      	ldr	r2, [pc, #140]	; (8006a38 <HAL_TIM_Base_Start_IT+0xc4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d01d      	beq.n	80069ea <HAL_TIM_Base_Start_IT+0x76>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b6:	d018      	beq.n	80069ea <HAL_TIM_Base_Start_IT+0x76>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a1f      	ldr	r2, [pc, #124]	; (8006a3c <HAL_TIM_Base_Start_IT+0xc8>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d013      	beq.n	80069ea <HAL_TIM_Base_Start_IT+0x76>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1e      	ldr	r2, [pc, #120]	; (8006a40 <HAL_TIM_Base_Start_IT+0xcc>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d00e      	beq.n	80069ea <HAL_TIM_Base_Start_IT+0x76>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1c      	ldr	r2, [pc, #112]	; (8006a44 <HAL_TIM_Base_Start_IT+0xd0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d009      	beq.n	80069ea <HAL_TIM_Base_Start_IT+0x76>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a1b      	ldr	r2, [pc, #108]	; (8006a48 <HAL_TIM_Base_Start_IT+0xd4>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d004      	beq.n	80069ea <HAL_TIM_Base_Start_IT+0x76>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a19      	ldr	r2, [pc, #100]	; (8006a4c <HAL_TIM_Base_Start_IT+0xd8>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d115      	bne.n	8006a16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	4b17      	ldr	r3, [pc, #92]	; (8006a50 <HAL_TIM_Base_Start_IT+0xdc>)
 80069f2:	4013      	ands	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b06      	cmp	r3, #6
 80069fa:	d015      	beq.n	8006a28 <HAL_TIM_Base_Start_IT+0xb4>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a02:	d011      	beq.n	8006a28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0201 	orr.w	r2, r2, #1
 8006a12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a14:	e008      	b.n	8006a28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f042 0201 	orr.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	e000      	b.n	8006a2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	40012c00 	.word	0x40012c00
 8006a3c:	40000400 	.word	0x40000400
 8006a40:	40000800 	.word	0x40000800
 8006a44:	40000c00 	.word	0x40000c00
 8006a48:	40013400 	.word	0x40013400
 8006a4c:	40014000 	.word	0x40014000
 8006a50:	00010007 	.word	0x00010007

08006a54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e049      	b.n	8006afa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f841 	bl	8006b02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4619      	mov	r1, r3
 8006a92:	4610      	mov	r0, r2
 8006a94:	f000 fe0e 	bl	80076b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b0a:	bf00      	nop
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
	...

08006b18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d109      	bne.n	8006b3c <HAL_TIM_PWM_Start+0x24>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	bf14      	ite	ne
 8006b34:	2301      	movne	r3, #1
 8006b36:	2300      	moveq	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	e03c      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x9e>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d109      	bne.n	8006b56 <HAL_TIM_PWM_Start+0x3e>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	bf14      	ite	ne
 8006b4e:	2301      	movne	r3, #1
 8006b50:	2300      	moveq	r3, #0
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	e02f      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x9e>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d109      	bne.n	8006b70 <HAL_TIM_PWM_Start+0x58>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	bf14      	ite	ne
 8006b68:	2301      	movne	r3, #1
 8006b6a:	2300      	moveq	r3, #0
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	e022      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x9e>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b0c      	cmp	r3, #12
 8006b74:	d109      	bne.n	8006b8a <HAL_TIM_PWM_Start+0x72>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	bf14      	ite	ne
 8006b82:	2301      	movne	r3, #1
 8006b84:	2300      	moveq	r3, #0
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	e015      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x9e>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b10      	cmp	r3, #16
 8006b8e:	d109      	bne.n	8006ba4 <HAL_TIM_PWM_Start+0x8c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	bf14      	ite	ne
 8006b9c:	2301      	movne	r3, #1
 8006b9e:	2300      	moveq	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	e008      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x9e>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	bf14      	ite	ne
 8006bb0:	2301      	movne	r3, #1
 8006bb2:	2300      	moveq	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e09c      	b.n	8006cf8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <HAL_TIM_PWM_Start+0xb6>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bcc:	e023      	b.n	8006c16 <HAL_TIM_PWM_Start+0xfe>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d104      	bne.n	8006bde <HAL_TIM_PWM_Start+0xc6>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bdc:	e01b      	b.n	8006c16 <HAL_TIM_PWM_Start+0xfe>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d104      	bne.n	8006bee <HAL_TIM_PWM_Start+0xd6>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bec:	e013      	b.n	8006c16 <HAL_TIM_PWM_Start+0xfe>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b0c      	cmp	r3, #12
 8006bf2:	d104      	bne.n	8006bfe <HAL_TIM_PWM_Start+0xe6>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bfc:	e00b      	b.n	8006c16 <HAL_TIM_PWM_Start+0xfe>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d104      	bne.n	8006c0e <HAL_TIM_PWM_Start+0xf6>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c0c:	e003      	b.n	8006c16 <HAL_TIM_PWM_Start+0xfe>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2202      	movs	r2, #2
 8006c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 fa78 	bl	8008114 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a35      	ldr	r2, [pc, #212]	; (8006d00 <HAL_TIM_PWM_Start+0x1e8>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d013      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x13e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a34      	ldr	r2, [pc, #208]	; (8006d04 <HAL_TIM_PWM_Start+0x1ec>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00e      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x13e>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a32      	ldr	r2, [pc, #200]	; (8006d08 <HAL_TIM_PWM_Start+0x1f0>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d009      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x13e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a31      	ldr	r2, [pc, #196]	; (8006d0c <HAL_TIM_PWM_Start+0x1f4>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d004      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x13e>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a2f      	ldr	r2, [pc, #188]	; (8006d10 <HAL_TIM_PWM_Start+0x1f8>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d101      	bne.n	8006c5a <HAL_TIM_PWM_Start+0x142>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <HAL_TIM_PWM_Start+0x144>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a22      	ldr	r2, [pc, #136]	; (8006d00 <HAL_TIM_PWM_Start+0x1e8>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d01d      	beq.n	8006cb6 <HAL_TIM_PWM_Start+0x19e>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c82:	d018      	beq.n	8006cb6 <HAL_TIM_PWM_Start+0x19e>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a22      	ldr	r2, [pc, #136]	; (8006d14 <HAL_TIM_PWM_Start+0x1fc>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d013      	beq.n	8006cb6 <HAL_TIM_PWM_Start+0x19e>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a21      	ldr	r2, [pc, #132]	; (8006d18 <HAL_TIM_PWM_Start+0x200>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00e      	beq.n	8006cb6 <HAL_TIM_PWM_Start+0x19e>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a1f      	ldr	r2, [pc, #124]	; (8006d1c <HAL_TIM_PWM_Start+0x204>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d009      	beq.n	8006cb6 <HAL_TIM_PWM_Start+0x19e>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a17      	ldr	r2, [pc, #92]	; (8006d04 <HAL_TIM_PWM_Start+0x1ec>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d004      	beq.n	8006cb6 <HAL_TIM_PWM_Start+0x19e>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a15      	ldr	r2, [pc, #84]	; (8006d08 <HAL_TIM_PWM_Start+0x1f0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d115      	bne.n	8006ce2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	4b18      	ldr	r3, [pc, #96]	; (8006d20 <HAL_TIM_PWM_Start+0x208>)
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b06      	cmp	r3, #6
 8006cc6:	d015      	beq.n	8006cf4 <HAL_TIM_PWM_Start+0x1dc>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cce:	d011      	beq.n	8006cf4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0201 	orr.w	r2, r2, #1
 8006cde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce0:	e008      	b.n	8006cf4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0201 	orr.w	r2, r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	e000      	b.n	8006cf6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	40012c00 	.word	0x40012c00
 8006d04:	40013400 	.word	0x40013400
 8006d08:	40014000 	.word	0x40014000
 8006d0c:	40014400 	.word	0x40014400
 8006d10:	40014800 	.word	0x40014800
 8006d14:	40000400 	.word	0x40000400
 8006d18:	40000800 	.word	0x40000800
 8006d1c:	40000c00 	.word	0x40000c00
 8006d20:	00010007 	.word	0x00010007

08006d24 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e049      	b.n	8006dca <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d106      	bne.n	8006d50 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f841 	bl	8006dd2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4619      	mov	r1, r3
 8006d62:	4610      	mov	r0, r2
 8006d64:	f000 fca6 	bl	80076b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b086      	sub	sp, #24
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e097      	b.n	8006f2a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d106      	bne.n	8006e14 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7fa ffe0 	bl	8001dd4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	6812      	ldr	r2, [r2, #0]
 8006e26:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006e2a:	f023 0307 	bic.w	r3, r3, #7
 8006e2e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	3304      	adds	r3, #4
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	f000 fc3a 	bl	80076b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e68:	f023 0303 	bic.w	r3, r3, #3
 8006e6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	689a      	ldr	r2, [r3, #8]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	021b      	lsls	r3, r3, #8
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006e86:	f023 030c 	bic.w	r3, r3, #12
 8006e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	011a      	lsls	r2, r3, #4
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	031b      	lsls	r3, r3, #12
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ec4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006ecc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	011b      	lsls	r3, r3, #4
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d122      	bne.n	8006f8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d11b      	bne.n	8006f8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f06f 0202 	mvn.w	r2, #2
 8006f5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	f003 0303 	and.w	r3, r3, #3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fb7e 	bl	8007676 <HAL_TIM_IC_CaptureCallback>
 8006f7a:	e005      	b.n	8006f88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fb70 	bl	8007662 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fb81 	bl	800768a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	d122      	bne.n	8006fe2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	f003 0304 	and.w	r3, r3, #4
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d11b      	bne.n	8006fe2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f06f 0204 	mvn.w	r2, #4
 8006fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fb54 	bl	8007676 <HAL_TIM_IC_CaptureCallback>
 8006fce:	e005      	b.n	8006fdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fb46 	bl	8007662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fb57 	bl	800768a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	f003 0308 	and.w	r3, r3, #8
 8006fec:	2b08      	cmp	r3, #8
 8006fee:	d122      	bne.n	8007036 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f003 0308 	and.w	r3, r3, #8
 8006ffa:	2b08      	cmp	r3, #8
 8006ffc:	d11b      	bne.n	8007036 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f06f 0208 	mvn.w	r2, #8
 8007006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2204      	movs	r2, #4
 800700c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fb2a 	bl	8007676 <HAL_TIM_IC_CaptureCallback>
 8007022:	e005      	b.n	8007030 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fb1c 	bl	8007662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fb2d 	bl	800768a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f003 0310 	and.w	r3, r3, #16
 8007040:	2b10      	cmp	r3, #16
 8007042:	d122      	bne.n	800708a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	f003 0310 	and.w	r3, r3, #16
 800704e:	2b10      	cmp	r3, #16
 8007050:	d11b      	bne.n	800708a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f06f 0210 	mvn.w	r2, #16
 800705a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2208      	movs	r2, #8
 8007060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fb00 	bl	8007676 <HAL_TIM_IC_CaptureCallback>
 8007076:	e005      	b.n	8007084 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 faf2 	bl	8007662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fb03 	bl	800768a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b01      	cmp	r3, #1
 8007096:	d10e      	bne.n	80070b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d107      	bne.n	80070b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f06f 0201 	mvn.w	r2, #1
 80070ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7fa faaf 	bl	8001614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c0:	2b80      	cmp	r3, #128	; 0x80
 80070c2:	d10e      	bne.n	80070e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ce:	2b80      	cmp	r3, #128	; 0x80
 80070d0:	d107      	bne.n	80070e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 f971 	bl	80083c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f0:	d10e      	bne.n	8007110 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fc:	2b80      	cmp	r3, #128	; 0x80
 80070fe:	d107      	bne.n	8007110 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f001 f964 	bl	80083d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711a:	2b40      	cmp	r3, #64	; 0x40
 800711c:	d10e      	bne.n	800713c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007128:	2b40      	cmp	r3, #64	; 0x40
 800712a:	d107      	bne.n	800713c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fab1 	bl	800769e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b20      	cmp	r3, #32
 8007148:	d10e      	bne.n	8007168 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f003 0320 	and.w	r3, r3, #32
 8007154:	2b20      	cmp	r3, #32
 8007156:	d107      	bne.n	8007168 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0220 	mvn.w	r2, #32
 8007160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 f924 	bl	80083b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007186:	2b01      	cmp	r3, #1
 8007188:	d101      	bne.n	800718e <HAL_TIM_IC_ConfigChannel+0x1e>
 800718a:	2302      	movs	r3, #2
 800718c:	e088      	b.n	80072a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d11b      	bne.n	80071d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80071ac:	f000 fdf2 	bl	8007d94 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699a      	ldr	r2, [r3, #24]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 020c 	bic.w	r2, r2, #12
 80071be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6999      	ldr	r1, [r3, #24]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	619a      	str	r2, [r3, #24]
 80071d2:	e060      	b.n	8007296 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d11c      	bne.n	8007214 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80071ea:	f000 fe70 	bl	8007ece <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	699a      	ldr	r2, [r3, #24]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80071fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6999      	ldr	r1, [r3, #24]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	021a      	lsls	r2, r3, #8
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	619a      	str	r2, [r3, #24]
 8007212:	e040      	b.n	8007296 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b08      	cmp	r3, #8
 8007218:	d11b      	bne.n	8007252 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800722a:	f000 febd 	bl	8007fa8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 020c 	bic.w	r2, r2, #12
 800723c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69d9      	ldr	r1, [r3, #28]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	61da      	str	r2, [r3, #28]
 8007250:	e021      	b.n	8007296 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b0c      	cmp	r3, #12
 8007256:	d11c      	bne.n	8007292 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007268:	f000 feda 	bl	8008020 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	69da      	ldr	r2, [r3, #28]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800727a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	69d9      	ldr	r1, [r3, #28]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	021a      	lsls	r2, r3, #8
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	61da      	str	r2, [r3, #28]
 8007290:	e001      	b.n	8007296 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800729e:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d101      	bne.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072c2:	2302      	movs	r3, #2
 80072c4:	e0ff      	b.n	80074c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b14      	cmp	r3, #20
 80072d2:	f200 80f0 	bhi.w	80074b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80072d6:	a201      	add	r2, pc, #4	; (adr r2, 80072dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072dc:	08007331 	.word	0x08007331
 80072e0:	080074b7 	.word	0x080074b7
 80072e4:	080074b7 	.word	0x080074b7
 80072e8:	080074b7 	.word	0x080074b7
 80072ec:	08007371 	.word	0x08007371
 80072f0:	080074b7 	.word	0x080074b7
 80072f4:	080074b7 	.word	0x080074b7
 80072f8:	080074b7 	.word	0x080074b7
 80072fc:	080073b3 	.word	0x080073b3
 8007300:	080074b7 	.word	0x080074b7
 8007304:	080074b7 	.word	0x080074b7
 8007308:	080074b7 	.word	0x080074b7
 800730c:	080073f3 	.word	0x080073f3
 8007310:	080074b7 	.word	0x080074b7
 8007314:	080074b7 	.word	0x080074b7
 8007318:	080074b7 	.word	0x080074b7
 800731c:	08007435 	.word	0x08007435
 8007320:	080074b7 	.word	0x080074b7
 8007324:	080074b7 	.word	0x080074b7
 8007328:	080074b7 	.word	0x080074b7
 800732c:	08007475 	.word	0x08007475
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68b9      	ldr	r1, [r7, #8]
 8007336:	4618      	mov	r0, r3
 8007338:	f000 fa56 	bl	80077e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699a      	ldr	r2, [r3, #24]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f042 0208 	orr.w	r2, r2, #8
 800734a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	699a      	ldr	r2, [r3, #24]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0204 	bic.w	r2, r2, #4
 800735a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6999      	ldr	r1, [r3, #24]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	691a      	ldr	r2, [r3, #16]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	619a      	str	r2, [r3, #24]
      break;
 800736e:	e0a5      	b.n	80074bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68b9      	ldr	r1, [r7, #8]
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fac6 	bl	8007908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699a      	ldr	r2, [r3, #24]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800738a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	699a      	ldr	r2, [r3, #24]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800739a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6999      	ldr	r1, [r3, #24]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	021a      	lsls	r2, r3, #8
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	619a      	str	r2, [r3, #24]
      break;
 80073b0:	e084      	b.n	80074bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 fb2f 	bl	8007a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69da      	ldr	r2, [r3, #28]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f042 0208 	orr.w	r2, r2, #8
 80073cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69da      	ldr	r2, [r3, #28]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 0204 	bic.w	r2, r2, #4
 80073dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69d9      	ldr	r1, [r3, #28]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	691a      	ldr	r2, [r3, #16]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	61da      	str	r2, [r3, #28]
      break;
 80073f0:	e064      	b.n	80074bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68b9      	ldr	r1, [r7, #8]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 fb97 	bl	8007b2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69da      	ldr	r2, [r3, #28]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800740c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	69da      	ldr	r2, [r3, #28]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800741c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69d9      	ldr	r1, [r3, #28]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	021a      	lsls	r2, r3, #8
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	61da      	str	r2, [r3, #28]
      break;
 8007432:	e043      	b.n	80074bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68b9      	ldr	r1, [r7, #8]
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fbe0 	bl	8007c00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f042 0208 	orr.w	r2, r2, #8
 800744e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0204 	bic.w	r2, r2, #4
 800745e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	691a      	ldr	r2, [r3, #16]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007472:	e023      	b.n	80074bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68b9      	ldr	r1, [r7, #8]
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fc24 	bl	8007cc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800748e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800749e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	021a      	lsls	r2, r3, #8
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074b4:	e002      	b.n	80074bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	75fb      	strb	r3, [r7, #23]
      break;
 80074ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop

080074d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <HAL_TIM_ConfigClockSource+0x1c>
 80074e8:	2302      	movs	r3, #2
 80074ea:	e0b6      	b.n	800765a <HAL_TIM_ConfigClockSource+0x18a>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800750a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800750e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007516:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007528:	d03e      	beq.n	80075a8 <HAL_TIM_ConfigClockSource+0xd8>
 800752a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800752e:	f200 8087 	bhi.w	8007640 <HAL_TIM_ConfigClockSource+0x170>
 8007532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007536:	f000 8086 	beq.w	8007646 <HAL_TIM_ConfigClockSource+0x176>
 800753a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800753e:	d87f      	bhi.n	8007640 <HAL_TIM_ConfigClockSource+0x170>
 8007540:	2b70      	cmp	r3, #112	; 0x70
 8007542:	d01a      	beq.n	800757a <HAL_TIM_ConfigClockSource+0xaa>
 8007544:	2b70      	cmp	r3, #112	; 0x70
 8007546:	d87b      	bhi.n	8007640 <HAL_TIM_ConfigClockSource+0x170>
 8007548:	2b60      	cmp	r3, #96	; 0x60
 800754a:	d050      	beq.n	80075ee <HAL_TIM_ConfigClockSource+0x11e>
 800754c:	2b60      	cmp	r3, #96	; 0x60
 800754e:	d877      	bhi.n	8007640 <HAL_TIM_ConfigClockSource+0x170>
 8007550:	2b50      	cmp	r3, #80	; 0x50
 8007552:	d03c      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0xfe>
 8007554:	2b50      	cmp	r3, #80	; 0x50
 8007556:	d873      	bhi.n	8007640 <HAL_TIM_ConfigClockSource+0x170>
 8007558:	2b40      	cmp	r3, #64	; 0x40
 800755a:	d058      	beq.n	800760e <HAL_TIM_ConfigClockSource+0x13e>
 800755c:	2b40      	cmp	r3, #64	; 0x40
 800755e:	d86f      	bhi.n	8007640 <HAL_TIM_ConfigClockSource+0x170>
 8007560:	2b30      	cmp	r3, #48	; 0x30
 8007562:	d064      	beq.n	800762e <HAL_TIM_ConfigClockSource+0x15e>
 8007564:	2b30      	cmp	r3, #48	; 0x30
 8007566:	d86b      	bhi.n	8007640 <HAL_TIM_ConfigClockSource+0x170>
 8007568:	2b20      	cmp	r3, #32
 800756a:	d060      	beq.n	800762e <HAL_TIM_ConfigClockSource+0x15e>
 800756c:	2b20      	cmp	r3, #32
 800756e:	d867      	bhi.n	8007640 <HAL_TIM_ConfigClockSource+0x170>
 8007570:	2b00      	cmp	r3, #0
 8007572:	d05c      	beq.n	800762e <HAL_TIM_ConfigClockSource+0x15e>
 8007574:	2b10      	cmp	r3, #16
 8007576:	d05a      	beq.n	800762e <HAL_TIM_ConfigClockSource+0x15e>
 8007578:	e062      	b.n	8007640 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800758a:	f000 fda3 	bl	80080d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800759c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	609a      	str	r2, [r3, #8]
      break;
 80075a6:	e04f      	b.n	8007648 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075b8:	f000 fd8c 	bl	80080d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689a      	ldr	r2, [r3, #8]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075ca:	609a      	str	r2, [r3, #8]
      break;
 80075cc:	e03c      	b.n	8007648 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075da:	461a      	mov	r2, r3
 80075dc:	f000 fc48 	bl	8007e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2150      	movs	r1, #80	; 0x50
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 fd57 	bl	800809a <TIM_ITRx_SetConfig>
      break;
 80075ec:	e02c      	b.n	8007648 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075fa:	461a      	mov	r2, r3
 80075fc:	f000 fca4 	bl	8007f48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2160      	movs	r1, #96	; 0x60
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fd47 	bl	800809a <TIM_ITRx_SetConfig>
      break;
 800760c:	e01c      	b.n	8007648 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800761a:	461a      	mov	r2, r3
 800761c:	f000 fc28 	bl	8007e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2140      	movs	r1, #64	; 0x40
 8007626:	4618      	mov	r0, r3
 8007628:	f000 fd37 	bl	800809a <TIM_ITRx_SetConfig>
      break;
 800762c:	e00c      	b.n	8007648 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4619      	mov	r1, r3
 8007638:	4610      	mov	r0, r2
 800763a:	f000 fd2e 	bl	800809a <TIM_ITRx_SetConfig>
      break;
 800763e:	e003      	b.n	8007648 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	73fb      	strb	r3, [r7, #15]
      break;
 8007644:	e000      	b.n	8007648 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007658:	7bfb      	ldrb	r3, [r7, #15]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
	...

080076b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a40      	ldr	r2, [pc, #256]	; (80077c8 <TIM_Base_SetConfig+0x114>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d013      	beq.n	80076f4 <TIM_Base_SetConfig+0x40>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d2:	d00f      	beq.n	80076f4 <TIM_Base_SetConfig+0x40>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a3d      	ldr	r2, [pc, #244]	; (80077cc <TIM_Base_SetConfig+0x118>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d00b      	beq.n	80076f4 <TIM_Base_SetConfig+0x40>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a3c      	ldr	r2, [pc, #240]	; (80077d0 <TIM_Base_SetConfig+0x11c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d007      	beq.n	80076f4 <TIM_Base_SetConfig+0x40>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a3b      	ldr	r2, [pc, #236]	; (80077d4 <TIM_Base_SetConfig+0x120>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d003      	beq.n	80076f4 <TIM_Base_SetConfig+0x40>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a3a      	ldr	r2, [pc, #232]	; (80077d8 <TIM_Base_SetConfig+0x124>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d108      	bne.n	8007706 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a2f      	ldr	r2, [pc, #188]	; (80077c8 <TIM_Base_SetConfig+0x114>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d01f      	beq.n	800774e <TIM_Base_SetConfig+0x9a>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007714:	d01b      	beq.n	800774e <TIM_Base_SetConfig+0x9a>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a2c      	ldr	r2, [pc, #176]	; (80077cc <TIM_Base_SetConfig+0x118>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d017      	beq.n	800774e <TIM_Base_SetConfig+0x9a>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a2b      	ldr	r2, [pc, #172]	; (80077d0 <TIM_Base_SetConfig+0x11c>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d013      	beq.n	800774e <TIM_Base_SetConfig+0x9a>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a2a      	ldr	r2, [pc, #168]	; (80077d4 <TIM_Base_SetConfig+0x120>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d00f      	beq.n	800774e <TIM_Base_SetConfig+0x9a>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a29      	ldr	r2, [pc, #164]	; (80077d8 <TIM_Base_SetConfig+0x124>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d00b      	beq.n	800774e <TIM_Base_SetConfig+0x9a>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a28      	ldr	r2, [pc, #160]	; (80077dc <TIM_Base_SetConfig+0x128>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d007      	beq.n	800774e <TIM_Base_SetConfig+0x9a>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a27      	ldr	r2, [pc, #156]	; (80077e0 <TIM_Base_SetConfig+0x12c>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d003      	beq.n	800774e <TIM_Base_SetConfig+0x9a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a26      	ldr	r2, [pc, #152]	; (80077e4 <TIM_Base_SetConfig+0x130>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d108      	bne.n	8007760 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	4313      	orrs	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a10      	ldr	r2, [pc, #64]	; (80077c8 <TIM_Base_SetConfig+0x114>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d00f      	beq.n	80077ac <TIM_Base_SetConfig+0xf8>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a12      	ldr	r2, [pc, #72]	; (80077d8 <TIM_Base_SetConfig+0x124>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d00b      	beq.n	80077ac <TIM_Base_SetConfig+0xf8>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a11      	ldr	r2, [pc, #68]	; (80077dc <TIM_Base_SetConfig+0x128>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d007      	beq.n	80077ac <TIM_Base_SetConfig+0xf8>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a10      	ldr	r2, [pc, #64]	; (80077e0 <TIM_Base_SetConfig+0x12c>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d003      	beq.n	80077ac <TIM_Base_SetConfig+0xf8>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a0f      	ldr	r2, [pc, #60]	; (80077e4 <TIM_Base_SetConfig+0x130>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d103      	bne.n	80077b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	691a      	ldr	r2, [r3, #16]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	615a      	str	r2, [r3, #20]
}
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	40012c00 	.word	0x40012c00
 80077cc:	40000400 	.word	0x40000400
 80077d0:	40000800 	.word	0x40000800
 80077d4:	40000c00 	.word	0x40000c00
 80077d8:	40013400 	.word	0x40013400
 80077dc:	40014000 	.word	0x40014000
 80077e0:	40014400 	.word	0x40014400
 80077e4:	40014800 	.word	0x40014800

080077e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	f023 0201 	bic.w	r2, r3, #1
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f023 0303 	bic.w	r3, r3, #3
 8007822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	4313      	orrs	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f023 0302 	bic.w	r3, r3, #2
 8007834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	4313      	orrs	r3, r2
 800783e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a2c      	ldr	r2, [pc, #176]	; (80078f4 <TIM_OC1_SetConfig+0x10c>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d00f      	beq.n	8007868 <TIM_OC1_SetConfig+0x80>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a2b      	ldr	r2, [pc, #172]	; (80078f8 <TIM_OC1_SetConfig+0x110>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d00b      	beq.n	8007868 <TIM_OC1_SetConfig+0x80>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a2a      	ldr	r2, [pc, #168]	; (80078fc <TIM_OC1_SetConfig+0x114>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d007      	beq.n	8007868 <TIM_OC1_SetConfig+0x80>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a29      	ldr	r2, [pc, #164]	; (8007900 <TIM_OC1_SetConfig+0x118>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d003      	beq.n	8007868 <TIM_OC1_SetConfig+0x80>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a28      	ldr	r2, [pc, #160]	; (8007904 <TIM_OC1_SetConfig+0x11c>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d10c      	bne.n	8007882 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f023 0308 	bic.w	r3, r3, #8
 800786e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f023 0304 	bic.w	r3, r3, #4
 8007880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a1b      	ldr	r2, [pc, #108]	; (80078f4 <TIM_OC1_SetConfig+0x10c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d00f      	beq.n	80078aa <TIM_OC1_SetConfig+0xc2>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a1a      	ldr	r2, [pc, #104]	; (80078f8 <TIM_OC1_SetConfig+0x110>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00b      	beq.n	80078aa <TIM_OC1_SetConfig+0xc2>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a19      	ldr	r2, [pc, #100]	; (80078fc <TIM_OC1_SetConfig+0x114>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d007      	beq.n	80078aa <TIM_OC1_SetConfig+0xc2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a18      	ldr	r2, [pc, #96]	; (8007900 <TIM_OC1_SetConfig+0x118>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d003      	beq.n	80078aa <TIM_OC1_SetConfig+0xc2>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a17      	ldr	r2, [pc, #92]	; (8007904 <TIM_OC1_SetConfig+0x11c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d111      	bne.n	80078ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	621a      	str	r2, [r3, #32]
}
 80078e8:	bf00      	nop
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	40012c00 	.word	0x40012c00
 80078f8:	40013400 	.word	0x40013400
 80078fc:	40014000 	.word	0x40014000
 8007900:	40014400 	.word	0x40014400
 8007904:	40014800 	.word	0x40014800

08007908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	f023 0210 	bic.w	r2, r3, #16
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800793a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	4313      	orrs	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f023 0320 	bic.w	r3, r3, #32
 8007956:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	4313      	orrs	r3, r2
 8007962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a28      	ldr	r2, [pc, #160]	; (8007a08 <TIM_OC2_SetConfig+0x100>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d003      	beq.n	8007974 <TIM_OC2_SetConfig+0x6c>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a27      	ldr	r2, [pc, #156]	; (8007a0c <TIM_OC2_SetConfig+0x104>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d10d      	bne.n	8007990 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800797a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	011b      	lsls	r3, r3, #4
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	4313      	orrs	r3, r2
 8007986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800798e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a1d      	ldr	r2, [pc, #116]	; (8007a08 <TIM_OC2_SetConfig+0x100>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d00f      	beq.n	80079b8 <TIM_OC2_SetConfig+0xb0>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a1c      	ldr	r2, [pc, #112]	; (8007a0c <TIM_OC2_SetConfig+0x104>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d00b      	beq.n	80079b8 <TIM_OC2_SetConfig+0xb0>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a1b      	ldr	r2, [pc, #108]	; (8007a10 <TIM_OC2_SetConfig+0x108>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d007      	beq.n	80079b8 <TIM_OC2_SetConfig+0xb0>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a1a      	ldr	r2, [pc, #104]	; (8007a14 <TIM_OC2_SetConfig+0x10c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d003      	beq.n	80079b8 <TIM_OC2_SetConfig+0xb0>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a19      	ldr	r2, [pc, #100]	; (8007a18 <TIM_OC2_SetConfig+0x110>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d113      	bne.n	80079e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	4313      	orrs	r3, r2
 80079de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	621a      	str	r2, [r3, #32]
}
 80079fa:	bf00      	nop
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	40012c00 	.word	0x40012c00
 8007a0c:	40013400 	.word	0x40013400
 8007a10:	40014000 	.word	0x40014000
 8007a14:	40014400 	.word	0x40014400
 8007a18:	40014800 	.word	0x40014800

08007a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0303 	bic.w	r3, r3, #3
 8007a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	021b      	lsls	r3, r3, #8
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a27      	ldr	r2, [pc, #156]	; (8007b18 <TIM_OC3_SetConfig+0xfc>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d003      	beq.n	8007a86 <TIM_OC3_SetConfig+0x6a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a26      	ldr	r2, [pc, #152]	; (8007b1c <TIM_OC3_SetConfig+0x100>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d10d      	bne.n	8007aa2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	021b      	lsls	r3, r3, #8
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a1c      	ldr	r2, [pc, #112]	; (8007b18 <TIM_OC3_SetConfig+0xfc>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00f      	beq.n	8007aca <TIM_OC3_SetConfig+0xae>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a1b      	ldr	r2, [pc, #108]	; (8007b1c <TIM_OC3_SetConfig+0x100>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00b      	beq.n	8007aca <TIM_OC3_SetConfig+0xae>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a1a      	ldr	r2, [pc, #104]	; (8007b20 <TIM_OC3_SetConfig+0x104>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d007      	beq.n	8007aca <TIM_OC3_SetConfig+0xae>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a19      	ldr	r2, [pc, #100]	; (8007b24 <TIM_OC3_SetConfig+0x108>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d003      	beq.n	8007aca <TIM_OC3_SetConfig+0xae>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a18      	ldr	r2, [pc, #96]	; (8007b28 <TIM_OC3_SetConfig+0x10c>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d113      	bne.n	8007af2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	011b      	lsls	r3, r3, #4
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	621a      	str	r2, [r3, #32]
}
 8007b0c:	bf00      	nop
 8007b0e:	371c      	adds	r7, #28
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	40012c00 	.word	0x40012c00
 8007b1c:	40013400 	.word	0x40013400
 8007b20:	40014000 	.word	0x40014000
 8007b24:	40014400 	.word	0x40014400
 8007b28:	40014800 	.word	0x40014800

08007b2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b087      	sub	sp, #28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	031b      	lsls	r3, r3, #12
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a18      	ldr	r2, [pc, #96]	; (8007bec <TIM_OC4_SetConfig+0xc0>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d00f      	beq.n	8007bb0 <TIM_OC4_SetConfig+0x84>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a17      	ldr	r2, [pc, #92]	; (8007bf0 <TIM_OC4_SetConfig+0xc4>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d00b      	beq.n	8007bb0 <TIM_OC4_SetConfig+0x84>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a16      	ldr	r2, [pc, #88]	; (8007bf4 <TIM_OC4_SetConfig+0xc8>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d007      	beq.n	8007bb0 <TIM_OC4_SetConfig+0x84>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a15      	ldr	r2, [pc, #84]	; (8007bf8 <TIM_OC4_SetConfig+0xcc>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d003      	beq.n	8007bb0 <TIM_OC4_SetConfig+0x84>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a14      	ldr	r2, [pc, #80]	; (8007bfc <TIM_OC4_SetConfig+0xd0>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d109      	bne.n	8007bc4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	019b      	lsls	r3, r3, #6
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	621a      	str	r2, [r3, #32]
}
 8007bde:	bf00      	nop
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	40012c00 	.word	0x40012c00
 8007bf0:	40013400 	.word	0x40013400
 8007bf4:	40014000 	.word	0x40014000
 8007bf8:	40014400 	.word	0x40014400
 8007bfc:	40014800 	.word	0x40014800

08007c00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	041b      	lsls	r3, r3, #16
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a17      	ldr	r2, [pc, #92]	; (8007cb4 <TIM_OC5_SetConfig+0xb4>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d00f      	beq.n	8007c7a <TIM_OC5_SetConfig+0x7a>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a16      	ldr	r2, [pc, #88]	; (8007cb8 <TIM_OC5_SetConfig+0xb8>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d00b      	beq.n	8007c7a <TIM_OC5_SetConfig+0x7a>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a15      	ldr	r2, [pc, #84]	; (8007cbc <TIM_OC5_SetConfig+0xbc>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d007      	beq.n	8007c7a <TIM_OC5_SetConfig+0x7a>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a14      	ldr	r2, [pc, #80]	; (8007cc0 <TIM_OC5_SetConfig+0xc0>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d003      	beq.n	8007c7a <TIM_OC5_SetConfig+0x7a>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a13      	ldr	r2, [pc, #76]	; (8007cc4 <TIM_OC5_SetConfig+0xc4>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d109      	bne.n	8007c8e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	021b      	lsls	r3, r3, #8
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	621a      	str	r2, [r3, #32]
}
 8007ca8:	bf00      	nop
 8007caa:	371c      	adds	r7, #28
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	40012c00 	.word	0x40012c00
 8007cb8:	40013400 	.word	0x40013400
 8007cbc:	40014000 	.word	0x40014000
 8007cc0:	40014400 	.word	0x40014400
 8007cc4:	40014800 	.word	0x40014800

08007cc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b087      	sub	sp, #28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	021b      	lsls	r3, r3, #8
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	051b      	lsls	r3, r3, #20
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a18      	ldr	r2, [pc, #96]	; (8007d80 <TIM_OC6_SetConfig+0xb8>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d00f      	beq.n	8007d44 <TIM_OC6_SetConfig+0x7c>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a17      	ldr	r2, [pc, #92]	; (8007d84 <TIM_OC6_SetConfig+0xbc>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d00b      	beq.n	8007d44 <TIM_OC6_SetConfig+0x7c>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a16      	ldr	r2, [pc, #88]	; (8007d88 <TIM_OC6_SetConfig+0xc0>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d007      	beq.n	8007d44 <TIM_OC6_SetConfig+0x7c>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a15      	ldr	r2, [pc, #84]	; (8007d8c <TIM_OC6_SetConfig+0xc4>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d003      	beq.n	8007d44 <TIM_OC6_SetConfig+0x7c>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a14      	ldr	r2, [pc, #80]	; (8007d90 <TIM_OC6_SetConfig+0xc8>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d109      	bne.n	8007d58 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	029b      	lsls	r3, r3, #10
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	621a      	str	r2, [r3, #32]
}
 8007d72:	bf00      	nop
 8007d74:	371c      	adds	r7, #28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	40012c00 	.word	0x40012c00
 8007d84:	40013400 	.word	0x40013400
 8007d88:	40014000 	.word	0x40014000
 8007d8c:	40014400 	.word	0x40014400
 8007d90:	40014800 	.word	0x40014800

08007d94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b087      	sub	sp, #28
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
 8007da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	f023 0201 	bic.w	r2, r3, #1
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4a26      	ldr	r2, [pc, #152]	; (8007e58 <TIM_TI1_SetConfig+0xc4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d017      	beq.n	8007df2 <TIM_TI1_SetConfig+0x5e>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dc8:	d013      	beq.n	8007df2 <TIM_TI1_SetConfig+0x5e>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	4a23      	ldr	r2, [pc, #140]	; (8007e5c <TIM_TI1_SetConfig+0xc8>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d00f      	beq.n	8007df2 <TIM_TI1_SetConfig+0x5e>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	4a22      	ldr	r2, [pc, #136]	; (8007e60 <TIM_TI1_SetConfig+0xcc>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00b      	beq.n	8007df2 <TIM_TI1_SetConfig+0x5e>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	4a21      	ldr	r2, [pc, #132]	; (8007e64 <TIM_TI1_SetConfig+0xd0>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d007      	beq.n	8007df2 <TIM_TI1_SetConfig+0x5e>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4a20      	ldr	r2, [pc, #128]	; (8007e68 <TIM_TI1_SetConfig+0xd4>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d003      	beq.n	8007df2 <TIM_TI1_SetConfig+0x5e>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4a1f      	ldr	r2, [pc, #124]	; (8007e6c <TIM_TI1_SetConfig+0xd8>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d101      	bne.n	8007df6 <TIM_TI1_SetConfig+0x62>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e000      	b.n	8007df8 <TIM_TI1_SetConfig+0x64>
 8007df6:	2300      	movs	r3, #0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d008      	beq.n	8007e0e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f023 0303 	bic.w	r3, r3, #3
 8007e02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	617b      	str	r3, [r7, #20]
 8007e0c:	e003      	b.n	8007e16 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f043 0301 	orr.w	r3, r3, #1
 8007e14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	011b      	lsls	r3, r3, #4
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	f023 030a 	bic.w	r3, r3, #10
 8007e30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	f003 030a 	and.w	r3, r3, #10
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	621a      	str	r2, [r3, #32]
}
 8007e4a:	bf00      	nop
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	40012c00 	.word	0x40012c00
 8007e5c:	40000400 	.word	0x40000400
 8007e60:	40000800 	.word	0x40000800
 8007e64:	40000c00 	.word	0x40000c00
 8007e68:	40013400 	.word	0x40013400
 8007e6c:	40014000 	.word	0x40014000

08007e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b087      	sub	sp, #28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	f023 0201 	bic.w	r2, r3, #1
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f023 030a 	bic.w	r3, r3, #10
 8007eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	621a      	str	r2, [r3, #32]
}
 8007ec2:	bf00      	nop
 8007ec4:	371c      	adds	r7, #28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b087      	sub	sp, #28
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	60f8      	str	r0, [r7, #12]
 8007ed6:	60b9      	str	r1, [r7, #8]
 8007ed8:	607a      	str	r2, [r7, #4]
 8007eda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6a1b      	ldr	r3, [r3, #32]
 8007ee0:	f023 0210 	bic.w	r2, r3, #16
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007efa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	021b      	lsls	r3, r3, #8
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	031b      	lsls	r3, r3, #12
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f20:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	011b      	lsls	r3, r3, #4
 8007f26:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	621a      	str	r2, [r3, #32]
}
 8007f3c:	bf00      	nop
 8007f3e:	371c      	adds	r7, #28
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6a1b      	ldr	r3, [r3, #32]
 8007f58:	f023 0210 	bic.w	r2, r3, #16
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	031b      	lsls	r3, r3, #12
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	011b      	lsls	r3, r3, #4
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	621a      	str	r2, [r3, #32]
}
 8007f9c:	bf00      	nop
 8007f9e:	371c      	adds	r7, #28
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b087      	sub	sp, #28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a1b      	ldr	r3, [r3, #32]
 8007fcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	f023 0303 	bic.w	r3, r3, #3
 8007fd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fe4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	011b      	lsls	r3, r3, #4
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	021b      	lsls	r3, r3, #8
 8007ffe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	4313      	orrs	r3, r2
 8008006:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	621a      	str	r2, [r3, #32]
}
 8008014:	bf00      	nop
 8008016:	371c      	adds	r7, #28
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6a1b      	ldr	r3, [r3, #32]
 8008044:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800804c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	4313      	orrs	r3, r2
 8008056:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800805e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	031b      	lsls	r3, r3, #12
 8008064:	b29b      	uxth	r3, r3
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	4313      	orrs	r3, r2
 800806a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008072:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	031b      	lsls	r3, r3, #12
 8008078:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	4313      	orrs	r3, r2
 8008080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	621a      	str	r2, [r3, #32]
}
 800808e:	bf00      	nop
 8008090:	371c      	adds	r7, #28
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800809a:	b480      	push	{r7}
 800809c:	b085      	sub	sp, #20
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80080b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	f043 0307 	orr.w	r3, r3, #7
 80080c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	609a      	str	r2, [r3, #8]
}
 80080c8:	bf00      	nop
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	021a      	lsls	r2, r3, #8
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	431a      	orrs	r2, r3
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	4313      	orrs	r3, r2
 8008100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	609a      	str	r2, [r3, #8]
}
 8008108:	bf00      	nop
 800810a:	371c      	adds	r7, #28
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	f003 031f 	and.w	r3, r3, #31
 8008126:	2201      	movs	r2, #1
 8008128:	fa02 f303 	lsl.w	r3, r2, r3
 800812c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6a1a      	ldr	r2, [r3, #32]
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	43db      	mvns	r3, r3
 8008136:	401a      	ands	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6a1a      	ldr	r2, [r3, #32]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f003 031f 	and.w	r3, r3, #31
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	fa01 f303 	lsl.w	r3, r1, r3
 800814c:	431a      	orrs	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	621a      	str	r2, [r3, #32]
}
 8008152:	bf00      	nop
 8008154:	371c      	adds	r7, #28
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
	...

08008160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008170:	2b01      	cmp	r3, #1
 8008172:	d101      	bne.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008174:	2302      	movs	r3, #2
 8008176:	e068      	b.n	800824a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2202      	movs	r2, #2
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a2e      	ldr	r2, [pc, #184]	; (8008258 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d004      	beq.n	80081ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a2d      	ldr	r2, [pc, #180]	; (800825c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d108      	bne.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a1e      	ldr	r2, [pc, #120]	; (8008258 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d01d      	beq.n	800821e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ea:	d018      	beq.n	800821e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a1b      	ldr	r2, [pc, #108]	; (8008260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d013      	beq.n	800821e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a1a      	ldr	r2, [pc, #104]	; (8008264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d00e      	beq.n	800821e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a18      	ldr	r2, [pc, #96]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d009      	beq.n	800821e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a13      	ldr	r2, [pc, #76]	; (800825c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d004      	beq.n	800821e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a14      	ldr	r2, [pc, #80]	; (800826c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d10c      	bne.n	8008238 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008224:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	4313      	orrs	r3, r2
 800822e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	40012c00 	.word	0x40012c00
 800825c:	40013400 	.word	0x40013400
 8008260:	40000400 	.word	0x40000400
 8008264:	40000800 	.word	0x40000800
 8008268:	40000c00 	.word	0x40000c00
 800826c:	40014000 	.word	0x40014000

08008270 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008284:	2b01      	cmp	r3, #1
 8008286:	d101      	bne.n	800828c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008288:	2302      	movs	r3, #2
 800828a:	e087      	b.n	800839c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	041b      	lsls	r3, r3, #16
 8008302:	4313      	orrs	r3, r2
 8008304:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a27      	ldr	r2, [pc, #156]	; (80083a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d004      	beq.n	800831a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a25      	ldr	r2, [pc, #148]	; (80083ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d106      	bne.n	8008328 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	4313      	orrs	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a1e      	ldr	r2, [pc, #120]	; (80083a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d004      	beq.n	800833c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a1d      	ldr	r2, [pc, #116]	; (80083ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d126      	bne.n	800838a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008346:	051b      	lsls	r3, r3, #20
 8008348:	4313      	orrs	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	4313      	orrs	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008364:	4313      	orrs	r3, r2
 8008366:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a0e      	ldr	r2, [pc, #56]	; (80083a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d004      	beq.n	800837c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a0d      	ldr	r2, [pc, #52]	; (80083ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d106      	bne.n	800838a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008386:	4313      	orrs	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	40012c00 	.word	0x40012c00
 80083ac:	40013400 	.word	0x40013400

080083b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e042      	b.n	8008484 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008404:	2b00      	cmp	r3, #0
 8008406:	d106      	bne.n	8008416 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7f9 fa35 	bl	8001880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2224      	movs	r2, #36	; 0x24
 800841a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f022 0201 	bic.w	r2, r2, #1
 800842c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fbbc 	bl	8008bac <UART_SetConfig>
 8008434:	4603      	mov	r3, r0
 8008436:	2b01      	cmp	r3, #1
 8008438:	d101      	bne.n	800843e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e022      	b.n	8008484 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008442:	2b00      	cmp	r3, #0
 8008444:	d002      	beq.n	800844c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 feb0 	bl	80091ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800845a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689a      	ldr	r2, [r3, #8]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800846a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f042 0201 	orr.w	r2, r2, #1
 800847a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 ff37 	bl	80092f0 <UART_CheckIdleState>
 8008482:	4603      	mov	r3, r0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b08a      	sub	sp, #40	; 0x28
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	4613      	mov	r3, r2
 8008498:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084a0:	2b20      	cmp	r3, #32
 80084a2:	d137      	bne.n	8008514 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d002      	beq.n	80084b0 <HAL_UART_Receive_IT+0x24>
 80084aa:	88fb      	ldrh	r3, [r7, #6]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e030      	b.n	8008516 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a18      	ldr	r2, [pc, #96]	; (8008520 <HAL_UART_Receive_IT+0x94>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d01f      	beq.n	8008504 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d018      	beq.n	8008504 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	e853 3f00 	ldrex	r3, [r3]
 80084de:	613b      	str	r3, [r7, #16]
   return(result);
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80084e6:	627b      	str	r3, [r7, #36]	; 0x24
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	623b      	str	r3, [r7, #32]
 80084f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	69f9      	ldr	r1, [r7, #28]
 80084f6:	6a3a      	ldr	r2, [r7, #32]
 80084f8:	e841 2300 	strex	r3, r2, [r1]
 80084fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e6      	bne.n	80084d2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008504:	88fb      	ldrh	r3, [r7, #6]
 8008506:	461a      	mov	r2, r3
 8008508:	68b9      	ldr	r1, [r7, #8]
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f001 f802 	bl	8009514 <UART_Start_Receive_IT>
 8008510:	4603      	mov	r3, r0
 8008512:	e000      	b.n	8008516 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008514:	2302      	movs	r3, #2
  }
}
 8008516:	4618      	mov	r0, r3
 8008518:	3728      	adds	r7, #40	; 0x28
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	40008000 	.word	0x40008000

08008524 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b0ba      	sub	sp, #232	; 0xe8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800854a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800854e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008552:	4013      	ands	r3, r2
 8008554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800855c:	2b00      	cmp	r3, #0
 800855e:	d11b      	bne.n	8008598 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d015      	beq.n	8008598 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800856c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008570:	f003 0320 	and.w	r3, r3, #32
 8008574:	2b00      	cmp	r3, #0
 8008576:	d105      	bne.n	8008584 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800857c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d009      	beq.n	8008598 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 82e3 	beq.w	8008b54 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	4798      	blx	r3
      }
      return;
 8008596:	e2dd      	b.n	8008b54 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 8123 	beq.w	80087e8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80085a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80085a6:	4b8d      	ldr	r3, [pc, #564]	; (80087dc <HAL_UART_IRQHandler+0x2b8>)
 80085a8:	4013      	ands	r3, r2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d106      	bne.n	80085bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80085ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80085b2:	4b8b      	ldr	r3, [pc, #556]	; (80087e0 <HAL_UART_IRQHandler+0x2bc>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 8116 	beq.w	80087e8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c0:	f003 0301 	and.w	r3, r3, #1
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d011      	beq.n	80085ec <HAL_UART_IRQHandler+0xc8>
 80085c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00b      	beq.n	80085ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2201      	movs	r2, #1
 80085da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e2:	f043 0201 	orr.w	r2, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d011      	beq.n	800861c <HAL_UART_IRQHandler+0xf8>
 80085f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00b      	beq.n	800861c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2202      	movs	r2, #2
 800860a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008612:	f043 0204 	orr.w	r2, r3, #4
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800861c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008620:	f003 0304 	and.w	r3, r3, #4
 8008624:	2b00      	cmp	r3, #0
 8008626:	d011      	beq.n	800864c <HAL_UART_IRQHandler+0x128>
 8008628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00b      	beq.n	800864c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2204      	movs	r2, #4
 800863a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008642:	f043 0202 	orr.w	r2, r3, #2
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800864c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008650:	f003 0308 	and.w	r3, r3, #8
 8008654:	2b00      	cmp	r3, #0
 8008656:	d017      	beq.n	8008688 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800865c:	f003 0320 	and.w	r3, r3, #32
 8008660:	2b00      	cmp	r3, #0
 8008662:	d105      	bne.n	8008670 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008664:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008668:	4b5c      	ldr	r3, [pc, #368]	; (80087dc <HAL_UART_IRQHandler+0x2b8>)
 800866a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00b      	beq.n	8008688 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2208      	movs	r2, #8
 8008676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800867e:	f043 0208 	orr.w	r2, r3, #8
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800868c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008690:	2b00      	cmp	r3, #0
 8008692:	d012      	beq.n	80086ba <HAL_UART_IRQHandler+0x196>
 8008694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00c      	beq.n	80086ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b0:	f043 0220 	orr.w	r2, r3, #32
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 8249 	beq.w	8008b58 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ca:	f003 0320 	and.w	r3, r3, #32
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d013      	beq.n	80086fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d105      	bne.n	80086ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d007      	beq.n	80086fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008700:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870e:	2b40      	cmp	r3, #64	; 0x40
 8008710:	d005      	beq.n	800871e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008716:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800871a:	2b00      	cmp	r3, #0
 800871c:	d054      	beq.n	80087c8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f001 f81a 	bl	8009758 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800872e:	2b40      	cmp	r3, #64	; 0x40
 8008730:	d146      	bne.n	80087c0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3308      	adds	r3, #8
 8008738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800874c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3308      	adds	r3, #8
 800875a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800875e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800876a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800876e:	e841 2300 	strex	r3, r2, [r1]
 8008772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1d9      	bne.n	8008732 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008784:	2b00      	cmp	r3, #0
 8008786:	d017      	beq.n	80087b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800878e:	4a15      	ldr	r2, [pc, #84]	; (80087e4 <HAL_UART_IRQHandler+0x2c0>)
 8008790:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008798:	4618      	mov	r0, r3
 800879a:	f7fb fc9b 	bl	80040d4 <HAL_DMA_Abort_IT>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d019      	beq.n	80087d8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80087b2:	4610      	mov	r0, r2
 80087b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b6:	e00f      	b.n	80087d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f9e1 	bl	8008b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087be:	e00b      	b.n	80087d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f9dd 	bl	8008b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c6:	e007      	b.n	80087d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f9d9 	bl	8008b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80087d6:	e1bf      	b.n	8008b58 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d8:	bf00      	nop
    return;
 80087da:	e1bd      	b.n	8008b58 <HAL_UART_IRQHandler+0x634>
 80087dc:	10000001 	.word	0x10000001
 80087e0:	04000120 	.word	0x04000120
 80087e4:	08009825 	.word	0x08009825

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	f040 8153 	bne.w	8008a98 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f6:	f003 0310 	and.w	r3, r3, #16
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f000 814c 	beq.w	8008a98 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008804:	f003 0310 	and.w	r3, r3, #16
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 8145 	beq.w	8008a98 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2210      	movs	r2, #16
 8008814:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008820:	2b40      	cmp	r3, #64	; 0x40
 8008822:	f040 80bb 	bne.w	800899c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008834:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 818f 	beq.w	8008b5c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008844:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008848:	429a      	cmp	r2, r3
 800884a:	f080 8187 	bcs.w	8008b5c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008854:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0320 	and.w	r3, r3, #32
 8008866:	2b00      	cmp	r3, #0
 8008868:	f040 8087 	bne.w	800897a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008874:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008878:	e853 3f00 	ldrex	r3, [r3]
 800887c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008888:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	461a      	mov	r2, r3
 8008892:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008896:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800889a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088a6:	e841 2300 	strex	r3, r2, [r1]
 80088aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80088ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1da      	bne.n	800886c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	3308      	adds	r3, #8
 80088bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088c8:	f023 0301 	bic.w	r3, r3, #1
 80088cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3308      	adds	r3, #8
 80088d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088e6:	e841 2300 	strex	r3, r2, [r1]
 80088ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1e1      	bne.n	80088b6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3308      	adds	r3, #8
 80088f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088fc:	e853 3f00 	ldrex	r3, [r3]
 8008900:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3308      	adds	r3, #8
 8008912:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008916:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008918:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800891c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e3      	bne.n	80088f2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2220      	movs	r2, #32
 800892e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008948:	f023 0310 	bic.w	r3, r3, #16
 800894c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	461a      	mov	r2, r3
 8008956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800895a:	65bb      	str	r3, [r7, #88]	; 0x58
 800895c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008960:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008962:	e841 2300 	strex	r3, r2, [r1]
 8008966:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e4      	bne.n	8008938 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008974:	4618      	mov	r0, r3
 8008976:	f7fb fb51 	bl	800401c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2202      	movs	r2, #2
 800897e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800898c:	b29b      	uxth	r3, r3
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	b29b      	uxth	r3, r3
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f8fd 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800899a:	e0df      	b.n	8008b5c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 80d1 	beq.w	8008b60 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80089be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f000 80cc 	beq.w	8008b60 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d0:	e853 3f00 	ldrex	r3, [r3]
 80089d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	461a      	mov	r2, r3
 80089e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089ea:	647b      	str	r3, [r7, #68]	; 0x44
 80089ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089f2:	e841 2300 	strex	r3, r2, [r1]
 80089f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1e4      	bne.n	80089c8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	3308      	adds	r3, #8
 8008a04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	e853 3f00 	ldrex	r3, [r3]
 8008a0c:	623b      	str	r3, [r7, #32]
   return(result);
 8008a0e:	6a3b      	ldr	r3, [r7, #32]
 8008a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a14:	f023 0301 	bic.w	r3, r3, #1
 8008a18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	3308      	adds	r3, #8
 8008a22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a26:	633a      	str	r2, [r7, #48]	; 0x30
 8008a28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a2e:	e841 2300 	strex	r3, r2, [r1]
 8008a32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1e1      	bne.n	80089fe <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	e853 3f00 	ldrex	r3, [r3]
 8008a5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 0310 	bic.w	r3, r3, #16
 8008a62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008a70:	61fb      	str	r3, [r7, #28]
 8008a72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	69b9      	ldr	r1, [r7, #24]
 8008a76:	69fa      	ldr	r2, [r7, #28]
 8008a78:	e841 2300 	strex	r3, r2, [r1]
 8008a7c:	617b      	str	r3, [r7, #20]
   return(result);
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e4      	bne.n	8008a4e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a8e:	4619      	mov	r1, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f87f 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a96:	e063      	b.n	8008b60 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00e      	beq.n	8008ac2 <HAL_UART_IRQHandler+0x59e>
 8008aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d008      	beq.n	8008ac2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008ab8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f001 fc10 	bl	800a2e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ac0:	e051      	b.n	8008b66 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d014      	beq.n	8008af8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d105      	bne.n	8008ae6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ade:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d008      	beq.n	8008af8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d03a      	beq.n	8008b64 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	4798      	blx	r3
    }
    return;
 8008af6:	e035      	b.n	8008b64 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d009      	beq.n	8008b18 <HAL_UART_IRQHandler+0x5f4>
 8008b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fe9d 	bl	8009850 <UART_EndTransmit_IT>
    return;
 8008b16:	e026      	b.n	8008b66 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d009      	beq.n	8008b38 <HAL_UART_IRQHandler+0x614>
 8008b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d003      	beq.n	8008b38 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f001 fbe9 	bl	800a308 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b36:	e016      	b.n	8008b66 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d010      	beq.n	8008b66 <HAL_UART_IRQHandler+0x642>
 8008b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	da0c      	bge.n	8008b66 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f001 fbd1 	bl	800a2f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b52:	e008      	b.n	8008b66 <HAL_UART_IRQHandler+0x642>
      return;
 8008b54:	bf00      	nop
 8008b56:	e006      	b.n	8008b66 <HAL_UART_IRQHandler+0x642>
    return;
 8008b58:	bf00      	nop
 8008b5a:	e004      	b.n	8008b66 <HAL_UART_IRQHandler+0x642>
      return;
 8008b5c:	bf00      	nop
 8008b5e:	e002      	b.n	8008b66 <HAL_UART_IRQHandler+0x642>
      return;
 8008b60:	bf00      	nop
 8008b62:	e000      	b.n	8008b66 <HAL_UART_IRQHandler+0x642>
    return;
 8008b64:	bf00      	nop
  }
}
 8008b66:	37e8      	adds	r7, #232	; 0xe8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bb0:	b08c      	sub	sp, #48	; 0x30
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	689a      	ldr	r2, [r3, #8]
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	431a      	orrs	r2, r3
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	4baa      	ldr	r3, [pc, #680]	; (8008e84 <UART_SetConfig+0x2d8>)
 8008bdc:	4013      	ands	r3, r2
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	6812      	ldr	r2, [r2, #0]
 8008be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008be4:	430b      	orrs	r3, r1
 8008be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	68da      	ldr	r2, [r3, #12]
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a9f      	ldr	r2, [pc, #636]	; (8008e88 <UART_SetConfig+0x2dc>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d004      	beq.n	8008c18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c14:	4313      	orrs	r3, r2
 8008c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008c22:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	6812      	ldr	r2, [r2, #0]
 8008c2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c2c:	430b      	orrs	r3, r1
 8008c2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	f023 010f 	bic.w	r1, r3, #15
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	430a      	orrs	r2, r1
 8008c44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a90      	ldr	r2, [pc, #576]	; (8008e8c <UART_SetConfig+0x2e0>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d125      	bne.n	8008c9c <UART_SetConfig+0xf0>
 8008c50:	4b8f      	ldr	r3, [pc, #572]	; (8008e90 <UART_SetConfig+0x2e4>)
 8008c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c56:	f003 0303 	and.w	r3, r3, #3
 8008c5a:	2b03      	cmp	r3, #3
 8008c5c:	d81a      	bhi.n	8008c94 <UART_SetConfig+0xe8>
 8008c5e:	a201      	add	r2, pc, #4	; (adr r2, 8008c64 <UART_SetConfig+0xb8>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008c75 	.word	0x08008c75
 8008c68:	08008c85 	.word	0x08008c85
 8008c6c:	08008c7d 	.word	0x08008c7d
 8008c70:	08008c8d 	.word	0x08008c8d
 8008c74:	2301      	movs	r3, #1
 8008c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c7a:	e116      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c82:	e112      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008c84:	2304      	movs	r3, #4
 8008c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c8a:	e10e      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008c8c:	2308      	movs	r3, #8
 8008c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c92:	e10a      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008c94:	2310      	movs	r3, #16
 8008c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c9a:	e106      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a7c      	ldr	r2, [pc, #496]	; (8008e94 <UART_SetConfig+0x2e8>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d138      	bne.n	8008d18 <UART_SetConfig+0x16c>
 8008ca6:	4b7a      	ldr	r3, [pc, #488]	; (8008e90 <UART_SetConfig+0x2e4>)
 8008ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cac:	f003 030c 	and.w	r3, r3, #12
 8008cb0:	2b0c      	cmp	r3, #12
 8008cb2:	d82d      	bhi.n	8008d10 <UART_SetConfig+0x164>
 8008cb4:	a201      	add	r2, pc, #4	; (adr r2, 8008cbc <UART_SetConfig+0x110>)
 8008cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cba:	bf00      	nop
 8008cbc:	08008cf1 	.word	0x08008cf1
 8008cc0:	08008d11 	.word	0x08008d11
 8008cc4:	08008d11 	.word	0x08008d11
 8008cc8:	08008d11 	.word	0x08008d11
 8008ccc:	08008d01 	.word	0x08008d01
 8008cd0:	08008d11 	.word	0x08008d11
 8008cd4:	08008d11 	.word	0x08008d11
 8008cd8:	08008d11 	.word	0x08008d11
 8008cdc:	08008cf9 	.word	0x08008cf9
 8008ce0:	08008d11 	.word	0x08008d11
 8008ce4:	08008d11 	.word	0x08008d11
 8008ce8:	08008d11 	.word	0x08008d11
 8008cec:	08008d09 	.word	0x08008d09
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cf6:	e0d8      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cfe:	e0d4      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d00:	2304      	movs	r3, #4
 8008d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d06:	e0d0      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d08:	2308      	movs	r3, #8
 8008d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d0e:	e0cc      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d10:	2310      	movs	r3, #16
 8008d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d16:	e0c8      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a5e      	ldr	r2, [pc, #376]	; (8008e98 <UART_SetConfig+0x2ec>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d125      	bne.n	8008d6e <UART_SetConfig+0x1c2>
 8008d22:	4b5b      	ldr	r3, [pc, #364]	; (8008e90 <UART_SetConfig+0x2e4>)
 8008d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d2c:	2b30      	cmp	r3, #48	; 0x30
 8008d2e:	d016      	beq.n	8008d5e <UART_SetConfig+0x1b2>
 8008d30:	2b30      	cmp	r3, #48	; 0x30
 8008d32:	d818      	bhi.n	8008d66 <UART_SetConfig+0x1ba>
 8008d34:	2b20      	cmp	r3, #32
 8008d36:	d00a      	beq.n	8008d4e <UART_SetConfig+0x1a2>
 8008d38:	2b20      	cmp	r3, #32
 8008d3a:	d814      	bhi.n	8008d66 <UART_SetConfig+0x1ba>
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <UART_SetConfig+0x19a>
 8008d40:	2b10      	cmp	r3, #16
 8008d42:	d008      	beq.n	8008d56 <UART_SetConfig+0x1aa>
 8008d44:	e00f      	b.n	8008d66 <UART_SetConfig+0x1ba>
 8008d46:	2300      	movs	r3, #0
 8008d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d4c:	e0ad      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d4e:	2302      	movs	r3, #2
 8008d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d54:	e0a9      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d56:	2304      	movs	r3, #4
 8008d58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d5c:	e0a5      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d5e:	2308      	movs	r3, #8
 8008d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d64:	e0a1      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d66:	2310      	movs	r3, #16
 8008d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d6c:	e09d      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a4a      	ldr	r2, [pc, #296]	; (8008e9c <UART_SetConfig+0x2f0>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d125      	bne.n	8008dc4 <UART_SetConfig+0x218>
 8008d78:	4b45      	ldr	r3, [pc, #276]	; (8008e90 <UART_SetConfig+0x2e4>)
 8008d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d82:	2bc0      	cmp	r3, #192	; 0xc0
 8008d84:	d016      	beq.n	8008db4 <UART_SetConfig+0x208>
 8008d86:	2bc0      	cmp	r3, #192	; 0xc0
 8008d88:	d818      	bhi.n	8008dbc <UART_SetConfig+0x210>
 8008d8a:	2b80      	cmp	r3, #128	; 0x80
 8008d8c:	d00a      	beq.n	8008da4 <UART_SetConfig+0x1f8>
 8008d8e:	2b80      	cmp	r3, #128	; 0x80
 8008d90:	d814      	bhi.n	8008dbc <UART_SetConfig+0x210>
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <UART_SetConfig+0x1f0>
 8008d96:	2b40      	cmp	r3, #64	; 0x40
 8008d98:	d008      	beq.n	8008dac <UART_SetConfig+0x200>
 8008d9a:	e00f      	b.n	8008dbc <UART_SetConfig+0x210>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008da2:	e082      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008da4:	2302      	movs	r3, #2
 8008da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008daa:	e07e      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008dac:	2304      	movs	r3, #4
 8008dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008db2:	e07a      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008db4:	2308      	movs	r3, #8
 8008db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dba:	e076      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008dbc:	2310      	movs	r3, #16
 8008dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dc2:	e072      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a35      	ldr	r2, [pc, #212]	; (8008ea0 <UART_SetConfig+0x2f4>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d12a      	bne.n	8008e24 <UART_SetConfig+0x278>
 8008dce:	4b30      	ldr	r3, [pc, #192]	; (8008e90 <UART_SetConfig+0x2e4>)
 8008dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ddc:	d01a      	beq.n	8008e14 <UART_SetConfig+0x268>
 8008dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008de2:	d81b      	bhi.n	8008e1c <UART_SetConfig+0x270>
 8008de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008de8:	d00c      	beq.n	8008e04 <UART_SetConfig+0x258>
 8008dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dee:	d815      	bhi.n	8008e1c <UART_SetConfig+0x270>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <UART_SetConfig+0x250>
 8008df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008df8:	d008      	beq.n	8008e0c <UART_SetConfig+0x260>
 8008dfa:	e00f      	b.n	8008e1c <UART_SetConfig+0x270>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e02:	e052      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e04:	2302      	movs	r3, #2
 8008e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e0a:	e04e      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e12:	e04a      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e14:	2308      	movs	r3, #8
 8008e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e1a:	e046      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e1c:	2310      	movs	r3, #16
 8008e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e22:	e042      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a17      	ldr	r2, [pc, #92]	; (8008e88 <UART_SetConfig+0x2dc>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d13a      	bne.n	8008ea4 <UART_SetConfig+0x2f8>
 8008e2e:	4b18      	ldr	r3, [pc, #96]	; (8008e90 <UART_SetConfig+0x2e4>)
 8008e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e3c:	d01a      	beq.n	8008e74 <UART_SetConfig+0x2c8>
 8008e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e42:	d81b      	bhi.n	8008e7c <UART_SetConfig+0x2d0>
 8008e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e48:	d00c      	beq.n	8008e64 <UART_SetConfig+0x2b8>
 8008e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e4e:	d815      	bhi.n	8008e7c <UART_SetConfig+0x2d0>
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d003      	beq.n	8008e5c <UART_SetConfig+0x2b0>
 8008e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e58:	d008      	beq.n	8008e6c <UART_SetConfig+0x2c0>
 8008e5a:	e00f      	b.n	8008e7c <UART_SetConfig+0x2d0>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e62:	e022      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e64:	2302      	movs	r3, #2
 8008e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e6a:	e01e      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e6c:	2304      	movs	r3, #4
 8008e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e72:	e01a      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e74:	2308      	movs	r3, #8
 8008e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e7a:	e016      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e7c:	2310      	movs	r3, #16
 8008e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e82:	e012      	b.n	8008eaa <UART_SetConfig+0x2fe>
 8008e84:	cfff69f3 	.word	0xcfff69f3
 8008e88:	40008000 	.word	0x40008000
 8008e8c:	40013800 	.word	0x40013800
 8008e90:	40021000 	.word	0x40021000
 8008e94:	40004400 	.word	0x40004400
 8008e98:	40004800 	.word	0x40004800
 8008e9c:	40004c00 	.word	0x40004c00
 8008ea0:	40005000 	.word	0x40005000
 8008ea4:	2310      	movs	r3, #16
 8008ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4ab0      	ldr	r2, [pc, #704]	; (8009170 <UART_SetConfig+0x5c4>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	f040 809b 	bne.w	8008fec <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008eb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008eba:	2b08      	cmp	r3, #8
 8008ebc:	d827      	bhi.n	8008f0e <UART_SetConfig+0x362>
 8008ebe:	a201      	add	r2, pc, #4	; (adr r2, 8008ec4 <UART_SetConfig+0x318>)
 8008ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec4:	08008ee9 	.word	0x08008ee9
 8008ec8:	08008ef1 	.word	0x08008ef1
 8008ecc:	08008ef9 	.word	0x08008ef9
 8008ed0:	08008f0f 	.word	0x08008f0f
 8008ed4:	08008eff 	.word	0x08008eff
 8008ed8:	08008f0f 	.word	0x08008f0f
 8008edc:	08008f0f 	.word	0x08008f0f
 8008ee0:	08008f0f 	.word	0x08008f0f
 8008ee4:	08008f07 	.word	0x08008f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ee8:	f7fc fcce 	bl	8005888 <HAL_RCC_GetPCLK1Freq>
 8008eec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008eee:	e014      	b.n	8008f1a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ef0:	f7fc fcde 	bl	80058b0 <HAL_RCC_GetPCLK2Freq>
 8008ef4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ef6:	e010      	b.n	8008f1a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ef8:	4b9e      	ldr	r3, [pc, #632]	; (8009174 <UART_SetConfig+0x5c8>)
 8008efa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008efc:	e00d      	b.n	8008f1a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008efe:	f7fc fc11 	bl	8005724 <HAL_RCC_GetSysClockFreq>
 8008f02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f04:	e009      	b.n	8008f1a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f0c:	e005      	b.n	8008f1a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f000 8130 	beq.w	8009182 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	4a94      	ldr	r2, [pc, #592]	; (8009178 <UART_SetConfig+0x5cc>)
 8008f28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f30:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f34:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	4413      	add	r3, r2
 8008f40:	69ba      	ldr	r2, [r7, #24]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d305      	bcc.n	8008f52 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d903      	bls.n	8008f5a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008f58:	e113      	b.n	8009182 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	60bb      	str	r3, [r7, #8]
 8008f60:	60fa      	str	r2, [r7, #12]
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	4a84      	ldr	r2, [pc, #528]	; (8009178 <UART_SetConfig+0x5cc>)
 8008f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	2200      	movs	r2, #0
 8008f70:	603b      	str	r3, [r7, #0]
 8008f72:	607a      	str	r2, [r7, #4]
 8008f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f7c:	f7f7 f972 	bl	8000264 <__aeabi_uldivmod>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4610      	mov	r0, r2
 8008f86:	4619      	mov	r1, r3
 8008f88:	f04f 0200 	mov.w	r2, #0
 8008f8c:	f04f 0300 	mov.w	r3, #0
 8008f90:	020b      	lsls	r3, r1, #8
 8008f92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f96:	0202      	lsls	r2, r0, #8
 8008f98:	6979      	ldr	r1, [r7, #20]
 8008f9a:	6849      	ldr	r1, [r1, #4]
 8008f9c:	0849      	lsrs	r1, r1, #1
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	460c      	mov	r4, r1
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	eb12 0804 	adds.w	r8, r2, r4
 8008fa8:	eb43 0905 	adc.w	r9, r3, r5
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	469a      	mov	sl, r3
 8008fb4:	4693      	mov	fp, r2
 8008fb6:	4652      	mov	r2, sl
 8008fb8:	465b      	mov	r3, fp
 8008fba:	4640      	mov	r0, r8
 8008fbc:	4649      	mov	r1, r9
 8008fbe:	f7f7 f951 	bl	8000264 <__aeabi_uldivmod>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fd0:	d308      	bcc.n	8008fe4 <UART_SetConfig+0x438>
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fd8:	d204      	bcs.n	8008fe4 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6a3a      	ldr	r2, [r7, #32]
 8008fe0:	60da      	str	r2, [r3, #12]
 8008fe2:	e0ce      	b.n	8009182 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008fea:	e0ca      	b.n	8009182 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ff4:	d166      	bne.n	80090c4 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8008ff6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ffa:	2b08      	cmp	r3, #8
 8008ffc:	d827      	bhi.n	800904e <UART_SetConfig+0x4a2>
 8008ffe:	a201      	add	r2, pc, #4	; (adr r2, 8009004 <UART_SetConfig+0x458>)
 8009000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009004:	08009029 	.word	0x08009029
 8009008:	08009031 	.word	0x08009031
 800900c:	08009039 	.word	0x08009039
 8009010:	0800904f 	.word	0x0800904f
 8009014:	0800903f 	.word	0x0800903f
 8009018:	0800904f 	.word	0x0800904f
 800901c:	0800904f 	.word	0x0800904f
 8009020:	0800904f 	.word	0x0800904f
 8009024:	08009047 	.word	0x08009047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009028:	f7fc fc2e 	bl	8005888 <HAL_RCC_GetPCLK1Freq>
 800902c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800902e:	e014      	b.n	800905a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009030:	f7fc fc3e 	bl	80058b0 <HAL_RCC_GetPCLK2Freq>
 8009034:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009036:	e010      	b.n	800905a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009038:	4b4e      	ldr	r3, [pc, #312]	; (8009174 <UART_SetConfig+0x5c8>)
 800903a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800903c:	e00d      	b.n	800905a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800903e:	f7fc fb71 	bl	8005724 <HAL_RCC_GetSysClockFreq>
 8009042:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009044:	e009      	b.n	800905a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800904a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800904c:	e005      	b.n	800905a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800904e:	2300      	movs	r3, #0
 8009050:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009058:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 8090 	beq.w	8009182 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	4a44      	ldr	r2, [pc, #272]	; (8009178 <UART_SetConfig+0x5cc>)
 8009068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800906c:	461a      	mov	r2, r3
 800906e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009070:	fbb3 f3f2 	udiv	r3, r3, r2
 8009074:	005a      	lsls	r2, r3, #1
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	085b      	lsrs	r3, r3, #1
 800907c:	441a      	add	r2, r3
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	fbb2 f3f3 	udiv	r3, r2, r3
 8009086:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	2b0f      	cmp	r3, #15
 800908c:	d916      	bls.n	80090bc <UART_SetConfig+0x510>
 800908e:	6a3b      	ldr	r3, [r7, #32]
 8009090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009094:	d212      	bcs.n	80090bc <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009096:	6a3b      	ldr	r3, [r7, #32]
 8009098:	b29b      	uxth	r3, r3
 800909a:	f023 030f 	bic.w	r3, r3, #15
 800909e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	085b      	lsrs	r3, r3, #1
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	8bfb      	ldrh	r3, [r7, #30]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	8bfa      	ldrh	r2, [r7, #30]
 80090b8:	60da      	str	r2, [r3, #12]
 80090ba:	e062      	b.n	8009182 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80090c2:	e05e      	b.n	8009182 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090c8:	2b08      	cmp	r3, #8
 80090ca:	d828      	bhi.n	800911e <UART_SetConfig+0x572>
 80090cc:	a201      	add	r2, pc, #4	; (adr r2, 80090d4 <UART_SetConfig+0x528>)
 80090ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d2:	bf00      	nop
 80090d4:	080090f9 	.word	0x080090f9
 80090d8:	08009101 	.word	0x08009101
 80090dc:	08009109 	.word	0x08009109
 80090e0:	0800911f 	.word	0x0800911f
 80090e4:	0800910f 	.word	0x0800910f
 80090e8:	0800911f 	.word	0x0800911f
 80090ec:	0800911f 	.word	0x0800911f
 80090f0:	0800911f 	.word	0x0800911f
 80090f4:	08009117 	.word	0x08009117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090f8:	f7fc fbc6 	bl	8005888 <HAL_RCC_GetPCLK1Freq>
 80090fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80090fe:	e014      	b.n	800912a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009100:	f7fc fbd6 	bl	80058b0 <HAL_RCC_GetPCLK2Freq>
 8009104:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009106:	e010      	b.n	800912a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009108:	4b1a      	ldr	r3, [pc, #104]	; (8009174 <UART_SetConfig+0x5c8>)
 800910a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800910c:	e00d      	b.n	800912a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800910e:	f7fc fb09 	bl	8005724 <HAL_RCC_GetSysClockFreq>
 8009112:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009114:	e009      	b.n	800912a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800911a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800911c:	e005      	b.n	800912a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009128:	bf00      	nop
    }

    if (pclk != 0U)
 800912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912c:	2b00      	cmp	r3, #0
 800912e:	d028      	beq.n	8009182 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009134:	4a10      	ldr	r2, [pc, #64]	; (8009178 <UART_SetConfig+0x5cc>)
 8009136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800913a:	461a      	mov	r2, r3
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	085b      	lsrs	r3, r3, #1
 8009148:	441a      	add	r2, r3
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009152:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009154:	6a3b      	ldr	r3, [r7, #32]
 8009156:	2b0f      	cmp	r3, #15
 8009158:	d910      	bls.n	800917c <UART_SetConfig+0x5d0>
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009160:	d20c      	bcs.n	800917c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009162:	6a3b      	ldr	r3, [r7, #32]
 8009164:	b29a      	uxth	r2, r3
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60da      	str	r2, [r3, #12]
 800916c:	e009      	b.n	8009182 <UART_SetConfig+0x5d6>
 800916e:	bf00      	nop
 8009170:	40008000 	.word	0x40008000
 8009174:	00f42400 	.word	0x00f42400
 8009178:	0800dd3c 	.word	0x0800dd3c
      }
      else
      {
        ret = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2201      	movs	r2, #1
 8009186:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	2201      	movs	r2, #1
 800918e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2200      	movs	r2, #0
 8009196:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	2200      	movs	r2, #0
 800919c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800919e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3730      	adds	r7, #48	; 0x30
 80091a6:	46bd      	mov	sp, r7
 80091a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080091ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b8:	f003 0301 	and.w	r3, r3, #1
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00a      	beq.n	80091d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	430a      	orrs	r2, r1
 80091d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091da:	f003 0302 	and.w	r3, r3, #2
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00a      	beq.n	80091f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fc:	f003 0304 	and.w	r3, r3, #4
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00a      	beq.n	800921a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	430a      	orrs	r2, r1
 8009218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921e:	f003 0308 	and.w	r3, r3, #8
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00a      	beq.n	800923c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	430a      	orrs	r2, r1
 800923a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009240:	f003 0310 	and.w	r3, r3, #16
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00a      	beq.n	800925e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	430a      	orrs	r2, r1
 800925c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009262:	f003 0320 	and.w	r3, r3, #32
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	430a      	orrs	r2, r1
 800927e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009288:	2b00      	cmp	r3, #0
 800928a:	d01a      	beq.n	80092c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	430a      	orrs	r2, r1
 80092a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092aa:	d10a      	bne.n	80092c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	430a      	orrs	r2, r1
 80092c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00a      	beq.n	80092e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	430a      	orrs	r2, r1
 80092e2:	605a      	str	r2, [r3, #4]
  }
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b098      	sub	sp, #96	; 0x60
 80092f4:	af02      	add	r7, sp, #8
 80092f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009300:	f7f9 f860 	bl	80023c4 <HAL_GetTick>
 8009304:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0308 	and.w	r3, r3, #8
 8009310:	2b08      	cmp	r3, #8
 8009312:	d12f      	bne.n	8009374 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009314:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800931c:	2200      	movs	r2, #0
 800931e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f88e 	bl	8009444 <UART_WaitOnFlagUntilTimeout>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d022      	beq.n	8009374 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009336:	e853 3f00 	ldrex	r3, [r3]
 800933a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800933c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009342:	653b      	str	r3, [r7, #80]	; 0x50
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	461a      	mov	r2, r3
 800934a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800934c:	647b      	str	r3, [r7, #68]	; 0x44
 800934e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800935a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e6      	bne.n	800932e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2220      	movs	r2, #32
 8009364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	e063      	b.n	800943c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 0304 	and.w	r3, r3, #4
 800937e:	2b04      	cmp	r3, #4
 8009380:	d149      	bne.n	8009416 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009382:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800938a:	2200      	movs	r2, #0
 800938c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f857 	bl	8009444 <UART_WaitOnFlagUntilTimeout>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d03c      	beq.n	8009416 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	e853 3f00 	ldrex	r3, [r3]
 80093a8:	623b      	str	r3, [r7, #32]
   return(result);
 80093aa:	6a3b      	ldr	r3, [r7, #32]
 80093ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	461a      	mov	r2, r3
 80093b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ba:	633b      	str	r3, [r7, #48]	; 0x30
 80093bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093c2:	e841 2300 	strex	r3, r2, [r1]
 80093c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1e6      	bne.n	800939c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3308      	adds	r3, #8
 80093d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	e853 3f00 	ldrex	r3, [r3]
 80093dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f023 0301 	bic.w	r3, r3, #1
 80093e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3308      	adds	r3, #8
 80093ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093ee:	61fa      	str	r2, [r7, #28]
 80093f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f2:	69b9      	ldr	r1, [r7, #24]
 80093f4:	69fa      	ldr	r2, [r7, #28]
 80093f6:	e841 2300 	strex	r3, r2, [r1]
 80093fa:	617b      	str	r3, [r7, #20]
   return(result);
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1e5      	bne.n	80093ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2220      	movs	r2, #32
 8009406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009412:	2303      	movs	r3, #3
 8009414:	e012      	b.n	800943c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2220      	movs	r2, #32
 800941a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2220      	movs	r2, #32
 8009422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3758      	adds	r7, #88	; 0x58
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	603b      	str	r3, [r7, #0]
 8009450:	4613      	mov	r3, r2
 8009452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009454:	e049      	b.n	80094ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945c:	d045      	beq.n	80094ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800945e:	f7f8 ffb1 	bl	80023c4 <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	69ba      	ldr	r2, [r7, #24]
 800946a:	429a      	cmp	r2, r3
 800946c:	d302      	bcc.n	8009474 <UART_WaitOnFlagUntilTimeout+0x30>
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d101      	bne.n	8009478 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009474:	2303      	movs	r3, #3
 8009476:	e048      	b.n	800950a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0304 	and.w	r3, r3, #4
 8009482:	2b00      	cmp	r3, #0
 8009484:	d031      	beq.n	80094ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	69db      	ldr	r3, [r3, #28]
 800948c:	f003 0308 	and.w	r3, r3, #8
 8009490:	2b08      	cmp	r3, #8
 8009492:	d110      	bne.n	80094b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2208      	movs	r2, #8
 800949a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 f95b 	bl	8009758 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2208      	movs	r2, #8
 80094a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e029      	b.n	800950a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	69db      	ldr	r3, [r3, #28]
 80094bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094c4:	d111      	bne.n	80094ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 f941 	bl	8009758 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2220      	movs	r2, #32
 80094da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e00f      	b.n	800950a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	69da      	ldr	r2, [r3, #28]
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	4013      	ands	r3, r2
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	bf0c      	ite	eq
 80094fa:	2301      	moveq	r3, #1
 80094fc:	2300      	movne	r3, #0
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	461a      	mov	r2, r3
 8009502:	79fb      	ldrb	r3, [r7, #7]
 8009504:	429a      	cmp	r2, r3
 8009506:	d0a6      	beq.n	8009456 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009514:	b480      	push	{r7}
 8009516:	b0a3      	sub	sp, #140	; 0x8c
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	4613      	mov	r3, r2
 8009520:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	88fa      	ldrh	r2, [r7, #6]
 800952c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	88fa      	ldrh	r2, [r7, #6]
 8009534:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009546:	d10e      	bne.n	8009566 <UART_Start_Receive_IT+0x52>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d105      	bne.n	800955c <UART_Start_Receive_IT+0x48>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009556:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800955a:	e02d      	b.n	80095b8 <UART_Start_Receive_IT+0xa4>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	22ff      	movs	r2, #255	; 0xff
 8009560:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009564:	e028      	b.n	80095b8 <UART_Start_Receive_IT+0xa4>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10d      	bne.n	800958a <UART_Start_Receive_IT+0x76>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d104      	bne.n	8009580 <UART_Start_Receive_IT+0x6c>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	22ff      	movs	r2, #255	; 0xff
 800957a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800957e:	e01b      	b.n	80095b8 <UART_Start_Receive_IT+0xa4>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	227f      	movs	r2, #127	; 0x7f
 8009584:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009588:	e016      	b.n	80095b8 <UART_Start_Receive_IT+0xa4>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009592:	d10d      	bne.n	80095b0 <UART_Start_Receive_IT+0x9c>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d104      	bne.n	80095a6 <UART_Start_Receive_IT+0x92>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	227f      	movs	r2, #127	; 0x7f
 80095a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80095a4:	e008      	b.n	80095b8 <UART_Start_Receive_IT+0xa4>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	223f      	movs	r2, #63	; 0x3f
 80095aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80095ae:	e003      	b.n	80095b8 <UART_Start_Receive_IT+0xa4>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2222      	movs	r2, #34	; 0x22
 80095c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	3308      	adds	r3, #8
 80095ce:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095d2:	e853 3f00 	ldrex	r3, [r3]
 80095d6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80095d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095da:	f043 0301 	orr.w	r3, r3, #1
 80095de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	3308      	adds	r3, #8
 80095e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80095ec:	673a      	str	r2, [r7, #112]	; 0x70
 80095ee:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80095f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80095f4:	e841 2300 	strex	r3, r2, [r1]
 80095f8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80095fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e3      	bne.n	80095c8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009608:	d14f      	bne.n	80096aa <UART_Start_Receive_IT+0x196>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009610:	88fa      	ldrh	r2, [r7, #6]
 8009612:	429a      	cmp	r2, r3
 8009614:	d349      	bcc.n	80096aa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961e:	d107      	bne.n	8009630 <UART_Start_Receive_IT+0x11c>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d103      	bne.n	8009630 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	4a47      	ldr	r2, [pc, #284]	; (8009748 <UART_Start_Receive_IT+0x234>)
 800962c:	675a      	str	r2, [r3, #116]	; 0x74
 800962e:	e002      	b.n	8009636 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4a46      	ldr	r2, [pc, #280]	; (800974c <UART_Start_Receive_IT+0x238>)
 8009634:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d01a      	beq.n	8009674 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009646:	e853 3f00 	ldrex	r3, [r3]
 800964a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800964c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800964e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009660:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009662:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009664:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009666:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009668:	e841 2300 	strex	r3, r2, [r1]
 800966c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800966e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1e4      	bne.n	800963e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3308      	adds	r3, #8
 800967a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800967e:	e853 3f00 	ldrex	r3, [r3]
 8009682:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800968a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3308      	adds	r3, #8
 8009692:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009694:	64ba      	str	r2, [r7, #72]	; 0x48
 8009696:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009698:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800969a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800969c:	e841 2300 	strex	r3, r2, [r1]
 80096a0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80096a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e5      	bne.n	8009674 <UART_Start_Receive_IT+0x160>
 80096a8:	e046      	b.n	8009738 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096b2:	d107      	bne.n	80096c4 <UART_Start_Receive_IT+0x1b0>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d103      	bne.n	80096c4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4a24      	ldr	r2, [pc, #144]	; (8009750 <UART_Start_Receive_IT+0x23c>)
 80096c0:	675a      	str	r2, [r3, #116]	; 0x74
 80096c2:	e002      	b.n	80096ca <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4a23      	ldr	r2, [pc, #140]	; (8009754 <UART_Start_Receive_IT+0x240>)
 80096c8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d019      	beq.n	8009706 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	e853 3f00 	ldrex	r3, [r3]
 80096de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80096e6:	677b      	str	r3, [r7, #116]	; 0x74
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	461a      	mov	r2, r3
 80096ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096f0:	637b      	str	r3, [r7, #52]	; 0x34
 80096f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096f8:	e841 2300 	strex	r3, r2, [r1]
 80096fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80096fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1e6      	bne.n	80096d2 <UART_Start_Receive_IT+0x1be>
 8009704:	e018      	b.n	8009738 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	e853 3f00 	ldrex	r3, [r3]
 8009712:	613b      	str	r3, [r7, #16]
   return(result);
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	f043 0320 	orr.w	r3, r3, #32
 800971a:	67bb      	str	r3, [r7, #120]	; 0x78
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	461a      	mov	r2, r3
 8009722:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009724:	623b      	str	r3, [r7, #32]
 8009726:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009728:	69f9      	ldr	r1, [r7, #28]
 800972a:	6a3a      	ldr	r2, [r7, #32]
 800972c:	e841 2300 	strex	r3, r2, [r1]
 8009730:	61bb      	str	r3, [r7, #24]
   return(result);
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1e6      	bne.n	8009706 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	378c      	adds	r7, #140	; 0x8c
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	08009f79 	.word	0x08009f79
 800974c:	08009c19 	.word	0x08009c19
 8009750:	08009a61 	.word	0x08009a61
 8009754:	080098a9 	.word	0x080098a9

08009758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009758:	b480      	push	{r7}
 800975a:	b095      	sub	sp, #84	; 0x54
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800976e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009774:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	461a      	mov	r2, r3
 800977c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800977e:	643b      	str	r3, [r7, #64]	; 0x40
 8009780:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009782:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009786:	e841 2300 	strex	r3, r2, [r1]
 800978a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1e6      	bne.n	8009760 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3308      	adds	r3, #8
 8009798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	e853 3f00 	ldrex	r3, [r3]
 80097a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097a8:	f023 0301 	bic.w	r3, r3, #1
 80097ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3308      	adds	r3, #8
 80097b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097be:	e841 2300 	strex	r3, r2, [r1]
 80097c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1e3      	bne.n	8009792 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d118      	bne.n	8009804 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	e853 3f00 	ldrex	r3, [r3]
 80097de:	60bb      	str	r3, [r7, #8]
   return(result);
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	f023 0310 	bic.w	r3, r3, #16
 80097e6:	647b      	str	r3, [r7, #68]	; 0x44
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	461a      	mov	r2, r3
 80097ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097f0:	61bb      	str	r3, [r7, #24]
 80097f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f4:	6979      	ldr	r1, [r7, #20]
 80097f6:	69ba      	ldr	r2, [r7, #24]
 80097f8:	e841 2300 	strex	r3, r2, [r1]
 80097fc:	613b      	str	r3, [r7, #16]
   return(result);
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1e6      	bne.n	80097d2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2220      	movs	r2, #32
 8009808:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009818:	bf00      	nop
 800981a:	3754      	adds	r7, #84	; 0x54
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009830:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	f7ff f99c 	bl	8008b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009848:	bf00      	nop
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b088      	sub	sp, #32
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	e853 3f00 	ldrex	r3, [r3]
 8009864:	60bb      	str	r3, [r7, #8]
   return(result);
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800986c:	61fb      	str	r3, [r7, #28]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	461a      	mov	r2, r3
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	61bb      	str	r3, [r7, #24]
 8009878:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987a:	6979      	ldr	r1, [r7, #20]
 800987c:	69ba      	ldr	r2, [r7, #24]
 800987e:	e841 2300 	strex	r3, r2, [r1]
 8009882:	613b      	str	r3, [r7, #16]
   return(result);
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1e6      	bne.n	8009858 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2220      	movs	r2, #32
 800988e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7ff f967 	bl	8008b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800989e:	bf00      	nop
 80098a0:	3720      	adds	r7, #32
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
	...

080098a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b09c      	sub	sp, #112	; 0x70
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098b6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098c0:	2b22      	cmp	r3, #34	; 0x22
 80098c2:	f040 80be 	bne.w	8009a42 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80098d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80098d4:	b2d9      	uxtb	r1, r3
 80098d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098e0:	400a      	ands	r2, r1
 80098e2:	b2d2      	uxtb	r2, r2
 80098e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ea:	1c5a      	adds	r2, r3, #1
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	3b01      	subs	r3, #1
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009908:	b29b      	uxth	r3, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	f040 80a1 	bne.w	8009a52 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009918:	e853 3f00 	ldrex	r3, [r3]
 800991c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800991e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009920:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009924:	66bb      	str	r3, [r7, #104]	; 0x68
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	461a      	mov	r2, r3
 800992c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800992e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009930:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009932:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009934:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009936:	e841 2300 	strex	r3, r2, [r1]
 800993a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800993c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1e6      	bne.n	8009910 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3308      	adds	r3, #8
 8009948:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994c:	e853 3f00 	ldrex	r3, [r3]
 8009950:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009954:	f023 0301 	bic.w	r3, r3, #1
 8009958:	667b      	str	r3, [r7, #100]	; 0x64
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	3308      	adds	r3, #8
 8009960:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009962:	647a      	str	r2, [r7, #68]	; 0x44
 8009964:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009968:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e5      	bne.n	8009942 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2220      	movs	r2, #32
 800997a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a33      	ldr	r2, [pc, #204]	; (8009a5c <UART_RxISR_8BIT+0x1b4>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d01f      	beq.n	80099d4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d018      	beq.n	80099d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	e853 3f00 	ldrex	r3, [r3]
 80099ae:	623b      	str	r3, [r7, #32]
   return(result);
 80099b0:	6a3b      	ldr	r3, [r7, #32]
 80099b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099b6:	663b      	str	r3, [r7, #96]	; 0x60
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099c0:	633b      	str	r3, [r7, #48]	; 0x30
 80099c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099c8:	e841 2300 	strex	r3, r2, [r1]
 80099cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e6      	bne.n	80099a2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d12e      	bne.n	8009a3a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	e853 3f00 	ldrex	r3, [r3]
 80099ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f023 0310 	bic.w	r3, r3, #16
 80099f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	461a      	mov	r2, r3
 80099fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a00:	61fb      	str	r3, [r7, #28]
 8009a02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a04:	69b9      	ldr	r1, [r7, #24]
 8009a06:	69fa      	ldr	r2, [r7, #28]
 8009a08:	e841 2300 	strex	r3, r2, [r1]
 8009a0c:	617b      	str	r3, [r7, #20]
   return(result);
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1e6      	bne.n	80099e2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	69db      	ldr	r3, [r3, #28]
 8009a1a:	f003 0310 	and.w	r3, r3, #16
 8009a1e:	2b10      	cmp	r3, #16
 8009a20:	d103      	bne.n	8009a2a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2210      	movs	r2, #16
 8009a28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff f8ae 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a38:	e00b      	b.n	8009a52 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7f6 fdd8 	bl	80005f0 <HAL_UART_RxCpltCallback>
}
 8009a40:	e007      	b.n	8009a52 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	699a      	ldr	r2, [r3, #24]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f042 0208 	orr.w	r2, r2, #8
 8009a50:	619a      	str	r2, [r3, #24]
}
 8009a52:	bf00      	nop
 8009a54:	3770      	adds	r7, #112	; 0x70
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	40008000 	.word	0x40008000

08009a60 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b09c      	sub	sp, #112	; 0x70
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a6e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a78:	2b22      	cmp	r3, #34	; 0x22
 8009a7a:	f040 80be 	bne.w	8009bfa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a8c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a8e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009a92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009a96:	4013      	ands	r3, r2
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a9c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa2:	1c9a      	adds	r2, r3, #2
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f040 80a1 	bne.w	8009c0a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ad8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009adc:	667b      	str	r3, [r7, #100]	; 0x64
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ae6:	657b      	str	r3, [r7, #84]	; 0x54
 8009ae8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009aec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009aee:	e841 2300 	strex	r3, r2, [r1]
 8009af2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1e6      	bne.n	8009ac8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3308      	adds	r3, #8
 8009b00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b04:	e853 3f00 	ldrex	r3, [r3]
 8009b08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0c:	f023 0301 	bic.w	r3, r3, #1
 8009b10:	663b      	str	r3, [r7, #96]	; 0x60
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	3308      	adds	r3, #8
 8009b18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b1a:	643a      	str	r2, [r7, #64]	; 0x40
 8009b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b22:	e841 2300 	strex	r3, r2, [r1]
 8009b26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1e5      	bne.n	8009afa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2220      	movs	r2, #32
 8009b32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a33      	ldr	r2, [pc, #204]	; (8009c14 <UART_RxISR_16BIT+0x1b4>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d01f      	beq.n	8009b8c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d018      	beq.n	8009b8c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	e853 3f00 	ldrex	r3, [r3]
 8009b66:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	461a      	mov	r2, r3
 8009b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b7a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b80:	e841 2300 	strex	r3, r2, [r1]
 8009b84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1e6      	bne.n	8009b5a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d12e      	bne.n	8009bf2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	e853 3f00 	ldrex	r3, [r3]
 8009ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	f023 0310 	bic.w	r3, r3, #16
 8009bae:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bb8:	61bb      	str	r3, [r7, #24]
 8009bba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbc:	6979      	ldr	r1, [r7, #20]
 8009bbe:	69ba      	ldr	r2, [r7, #24]
 8009bc0:	e841 2300 	strex	r3, r2, [r1]
 8009bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1e6      	bne.n	8009b9a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	69db      	ldr	r3, [r3, #28]
 8009bd2:	f003 0310 	and.w	r3, r3, #16
 8009bd6:	2b10      	cmp	r3, #16
 8009bd8:	d103      	bne.n	8009be2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2210      	movs	r2, #16
 8009be0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7fe ffd2 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bf0:	e00b      	b.n	8009c0a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7f6 fcfc 	bl	80005f0 <HAL_UART_RxCpltCallback>
}
 8009bf8:	e007      	b.n	8009c0a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	699a      	ldr	r2, [r3, #24]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f042 0208 	orr.w	r2, r2, #8
 8009c08:	619a      	str	r2, [r3, #24]
}
 8009c0a:	bf00      	nop
 8009c0c:	3770      	adds	r7, #112	; 0x70
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	40008000 	.word	0x40008000

08009c18 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b0ac      	sub	sp, #176	; 0xb0
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c26:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	69db      	ldr	r3, [r3, #28]
 8009c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c4e:	2b22      	cmp	r3, #34	; 0x22
 8009c50:	f040 8182 	bne.w	8009f58 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c5a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c5e:	e125      	b.n	8009eac <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c66:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c6a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009c6e:	b2d9      	uxtb	r1, r3
 8009c70:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009c74:	b2da      	uxtb	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c7a:	400a      	ands	r2, r1
 8009c7c:	b2d2      	uxtb	r2, r2
 8009c7e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c84:	1c5a      	adds	r2, r3, #1
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	3b01      	subs	r3, #1
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	69db      	ldr	r3, [r3, #28]
 8009ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009caa:	f003 0307 	and.w	r3, r3, #7
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d053      	beq.n	8009d5a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cb6:	f003 0301 	and.w	r3, r3, #1
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d011      	beq.n	8009ce2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009cbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00b      	beq.n	8009ce2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cd8:	f043 0201 	orr.w	r2, r3, #1
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ce6:	f003 0302 	and.w	r3, r3, #2
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d011      	beq.n	8009d12 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009cee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cf2:	f003 0301 	and.w	r3, r3, #1
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00b      	beq.n	8009d12 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d08:	f043 0204 	orr.w	r2, r3, #4
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d16:	f003 0304 	and.w	r3, r3, #4
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d011      	beq.n	8009d42 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00b      	beq.n	8009d42 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2204      	movs	r2, #4
 8009d30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d38:	f043 0202 	orr.w	r2, r3, #2
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d006      	beq.n	8009d5a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7fe ff17 	bl	8008b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f040 80a2 	bne.w	8009eac <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d70:	e853 3f00 	ldrex	r3, [r3]
 8009d74:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	461a      	mov	r2, r3
 8009d86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d8c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009d90:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009d92:	e841 2300 	strex	r3, r2, [r1]
 8009d96:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1e4      	bne.n	8009d68 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3308      	adds	r3, #8
 8009da4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009da8:	e853 3f00 	ldrex	r3, [r3]
 8009dac:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009db4:	f023 0301 	bic.w	r3, r3, #1
 8009db8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009dc6:	66ba      	str	r2, [r7, #104]	; 0x68
 8009dc8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009dcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009dce:	e841 2300 	strex	r3, r2, [r1]
 8009dd2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009dd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1e1      	bne.n	8009d9e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2220      	movs	r2, #32
 8009dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a5f      	ldr	r2, [pc, #380]	; (8009f70 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d021      	beq.n	8009e3c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d01a      	beq.n	8009e3c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e0e:	e853 3f00 	ldrex	r3, [r3]
 8009e12:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e28:	657b      	str	r3, [r7, #84]	; 0x54
 8009e2a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e30:	e841 2300 	strex	r3, r2, [r1]
 8009e34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1e4      	bne.n	8009e06 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d130      	bne.n	8009ea6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e52:	e853 3f00 	ldrex	r3, [r3]
 8009e56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5a:	f023 0310 	bic.w	r3, r3, #16
 8009e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	461a      	mov	r2, r3
 8009e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8009e6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e74:	e841 2300 	strex	r3, r2, [r1]
 8009e78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1e4      	bne.n	8009e4a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	69db      	ldr	r3, [r3, #28]
 8009e86:	f003 0310 	and.w	r3, r3, #16
 8009e8a:	2b10      	cmp	r3, #16
 8009e8c:	d103      	bne.n	8009e96 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2210      	movs	r2, #16
 8009e94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7fe fe78 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
 8009ea4:	e002      	b.n	8009eac <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7f6 fba2 	bl	80005f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009eac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d006      	beq.n	8009ec2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009eb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009eb8:	f003 0320 	and.w	r3, r3, #32
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f47f aecf 	bne.w	8009c60 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ec8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ecc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d049      	beq.n	8009f68 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009eda:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d242      	bcs.n	8009f68 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eea:	6a3b      	ldr	r3, [r7, #32]
 8009eec:	e853 3f00 	ldrex	r3, [r3]
 8009ef0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3308      	adds	r3, #8
 8009f02:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009f06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f0e:	e841 2300 	strex	r3, r2, [r1]
 8009f12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1e3      	bne.n	8009ee2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a15      	ldr	r2, [pc, #84]	; (8009f74 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009f1e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	e853 3f00 	ldrex	r3, [r3]
 8009f2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	f043 0320 	orr.w	r3, r3, #32
 8009f34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f42:	61bb      	str	r3, [r7, #24]
 8009f44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f46:	6979      	ldr	r1, [r7, #20]
 8009f48:	69ba      	ldr	r2, [r7, #24]
 8009f4a:	e841 2300 	strex	r3, r2, [r1]
 8009f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1e4      	bne.n	8009f20 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f56:	e007      	b.n	8009f68 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	699a      	ldr	r2, [r3, #24]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f042 0208 	orr.w	r2, r2, #8
 8009f66:	619a      	str	r2, [r3, #24]
}
 8009f68:	bf00      	nop
 8009f6a:	37b0      	adds	r7, #176	; 0xb0
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	40008000 	.word	0x40008000
 8009f74:	080098a9 	.word	0x080098a9

08009f78 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b0ae      	sub	sp, #184	; 0xb8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f86:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	69db      	ldr	r3, [r3, #28]
 8009f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fae:	2b22      	cmp	r3, #34	; 0x22
 8009fb0:	f040 8186 	bne.w	800a2c0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009fba:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009fbe:	e129      	b.n	800a214 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009fd2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009fd6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009fda:	4013      	ands	r3, r2
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009fe2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe8:	1c9a      	adds	r2, r3, #2
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	69db      	ldr	r3, [r3, #28]
 800a006:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a00a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a00e:	f003 0307 	and.w	r3, r3, #7
 800a012:	2b00      	cmp	r3, #0
 800a014:	d053      	beq.n	800a0be <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a016:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a01a:	f003 0301 	and.w	r3, r3, #1
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d011      	beq.n	800a046 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00b      	beq.n	800a046 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2201      	movs	r2, #1
 800a034:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a03c:	f043 0201 	orr.w	r2, r3, #1
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a04a:	f003 0302 	and.w	r3, r3, #2
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d011      	beq.n	800a076 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a052:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00b      	beq.n	800a076 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2202      	movs	r2, #2
 800a064:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a06c:	f043 0204 	orr.w	r2, r3, #4
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a076:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a07a:	f003 0304 	and.w	r3, r3, #4
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d011      	beq.n	800a0a6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a082:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a086:	f003 0301 	and.w	r3, r3, #1
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00b      	beq.n	800a0a6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2204      	movs	r2, #4
 800a094:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a09c:	f043 0202 	orr.w	r2, r3, #2
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d006      	beq.n	800a0be <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f7fe fd65 	bl	8008b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f040 80a4 	bne.w	800a214 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0d4:	e853 3f00 	ldrex	r3, [r3]
 800a0d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a0da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a0f2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0fa:	e841 2300 	strex	r3, r2, [r1]
 800a0fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1e2      	bne.n	800a0cc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3308      	adds	r3, #8
 800a10c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a110:	e853 3f00 	ldrex	r3, [r3]
 800a114:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a11c:	f023 0301 	bic.w	r3, r3, #1
 800a120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	3308      	adds	r3, #8
 800a12a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a12e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a130:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a132:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a134:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a136:	e841 2300 	strex	r3, r2, [r1]
 800a13a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a13c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1e1      	bne.n	800a106 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2220      	movs	r2, #32
 800a146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a5f      	ldr	r2, [pc, #380]	; (800a2d8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d021      	beq.n	800a1a4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d01a      	beq.n	800a1a4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a176:	e853 3f00 	ldrex	r3, [r3]
 800a17a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a17c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a17e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a190:	65bb      	str	r3, [r7, #88]	; 0x58
 800a192:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a194:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a196:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a198:	e841 2300 	strex	r3, r2, [r1]
 800a19c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1e4      	bne.n	800a16e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d130      	bne.n	800a20e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ba:	e853 3f00 	ldrex	r3, [r3]
 800a1be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c2:	f023 0310 	bic.w	r3, r3, #16
 800a1c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a1d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1dc:	e841 2300 	strex	r3, r2, [r1]
 800a1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e4      	bne.n	800a1b2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	f003 0310 	and.w	r3, r3, #16
 800a1f2:	2b10      	cmp	r3, #16
 800a1f4:	d103      	bne.n	800a1fe <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2210      	movs	r2, #16
 800a1fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a204:	4619      	mov	r1, r3
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f7fe fcc4 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
 800a20c:	e002      	b.n	800a214 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7f6 f9ee 	bl	80005f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a214:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d006      	beq.n	800a22a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800a21c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a220:	f003 0320 	and.w	r3, r3, #32
 800a224:	2b00      	cmp	r3, #0
 800a226:	f47f aecb 	bne.w	8009fc0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a230:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a234:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d049      	beq.n	800a2d0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a242:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a246:	429a      	cmp	r2, r3
 800a248:	d242      	bcs.n	800a2d0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3308      	adds	r3, #8
 800a250:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a254:	e853 3f00 	ldrex	r3, [r3]
 800a258:	623b      	str	r3, [r7, #32]
   return(result);
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	3308      	adds	r3, #8
 800a26a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a26e:	633a      	str	r2, [r7, #48]	; 0x30
 800a270:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a276:	e841 2300 	strex	r3, r2, [r1]
 800a27a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1e3      	bne.n	800a24a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a15      	ldr	r2, [pc, #84]	; (800a2dc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a286:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	e853 3f00 	ldrex	r3, [r3]
 800a294:	60fb      	str	r3, [r7, #12]
   return(result);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f043 0320 	orr.w	r3, r3, #32
 800a29c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a2aa:	61fb      	str	r3, [r7, #28]
 800a2ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ae:	69b9      	ldr	r1, [r7, #24]
 800a2b0:	69fa      	ldr	r2, [r7, #28]
 800a2b2:	e841 2300 	strex	r3, r2, [r1]
 800a2b6:	617b      	str	r3, [r7, #20]
   return(result);
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1e4      	bne.n	800a288 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2be:	e007      	b.n	800a2d0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	699a      	ldr	r2, [r3, #24]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f042 0208 	orr.w	r2, r2, #8
 800a2ce:	619a      	str	r2, [r3, #24]
}
 800a2d0:	bf00      	nop
 800a2d2:	37b8      	adds	r7, #184	; 0xb8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	40008000 	.word	0x40008000
 800a2dc:	08009a61 	.word	0x08009a61

0800a2e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a310:	bf00      	nop
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d101      	bne.n	800a332 <HAL_UARTEx_DisableFifoMode+0x16>
 800a32e:	2302      	movs	r3, #2
 800a330:	e027      	b.n	800a382 <HAL_UARTEx_DisableFifoMode+0x66>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2224      	movs	r2, #36	; 0x24
 800a33e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f022 0201 	bic.w	r2, r2, #1
 800a358:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a360:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2220      	movs	r2, #32
 800a374:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b084      	sub	sp, #16
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d101      	bne.n	800a3a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	e02d      	b.n	800a402 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2224      	movs	r2, #36	; 0x24
 800a3b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f022 0201 	bic.w	r2, r2, #1
 800a3cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	430a      	orrs	r2, r1
 800a3e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f850 	bl	800a488 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2220      	movs	r2, #32
 800a3f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b084      	sub	sp, #16
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d101      	bne.n	800a422 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a41e:	2302      	movs	r3, #2
 800a420:	e02d      	b.n	800a47e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2224      	movs	r2, #36	; 0x24
 800a42e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f022 0201 	bic.w	r2, r2, #1
 800a448:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	683a      	ldr	r2, [r7, #0]
 800a45a:	430a      	orrs	r2, r1
 800a45c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f812 	bl	800a488 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2220      	movs	r2, #32
 800a470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
	...

0800a488 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a494:	2b00      	cmp	r3, #0
 800a496:	d108      	bne.n	800a4aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a4a8:	e031      	b.n	800a50e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a4aa:	2308      	movs	r3, #8
 800a4ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a4ae:	2308      	movs	r3, #8
 800a4b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	0e5b      	lsrs	r3, r3, #25
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	f003 0307 	and.w	r3, r3, #7
 800a4c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	0f5b      	lsrs	r3, r3, #29
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	f003 0307 	and.w	r3, r3, #7
 800a4d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4d2:	7bbb      	ldrb	r3, [r7, #14]
 800a4d4:	7b3a      	ldrb	r2, [r7, #12]
 800a4d6:	4911      	ldr	r1, [pc, #68]	; (800a51c <UARTEx_SetNbDataToProcess+0x94>)
 800a4d8:	5c8a      	ldrb	r2, [r1, r2]
 800a4da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4de:	7b3a      	ldrb	r2, [r7, #12]
 800a4e0:	490f      	ldr	r1, [pc, #60]	; (800a520 <UARTEx_SetNbDataToProcess+0x98>)
 800a4e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4f0:	7bfb      	ldrb	r3, [r7, #15]
 800a4f2:	7b7a      	ldrb	r2, [r7, #13]
 800a4f4:	4909      	ldr	r1, [pc, #36]	; (800a51c <UARTEx_SetNbDataToProcess+0x94>)
 800a4f6:	5c8a      	ldrb	r2, [r1, r2]
 800a4f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4fc:	7b7a      	ldrb	r2, [r7, #13]
 800a4fe:	4908      	ldr	r1, [pc, #32]	; (800a520 <UARTEx_SetNbDataToProcess+0x98>)
 800a500:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a502:	fb93 f3f2 	sdiv	r3, r3, r2
 800a506:	b29a      	uxth	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a50e:	bf00      	nop
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	0800dd54 	.word	0x0800dd54
 800a520:	0800dd5c 	.word	0x0800dd5c

0800a524 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a524:	b480      	push	{r7}
 800a526:	b08b      	sub	sp, #44	; 0x2c
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	fa93 f3a3 	rbit	r3, r3
 800a53e:	613b      	str	r3, [r7, #16]
  return result;
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d101      	bne.n	800a54e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a54a:	2320      	movs	r3, #32
 800a54c:	e003      	b.n	800a556 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	fab3 f383 	clz	r3, r3
 800a554:	b2db      	uxtb	r3, r3
 800a556:	005b      	lsls	r3, r3, #1
 800a558:	2103      	movs	r1, #3
 800a55a:	fa01 f303 	lsl.w	r3, r1, r3
 800a55e:	43db      	mvns	r3, r3
 800a560:	401a      	ands	r2, r3
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a566:	6a3b      	ldr	r3, [r7, #32]
 800a568:	fa93 f3a3 	rbit	r3, r3
 800a56c:	61fb      	str	r3, [r7, #28]
  return result;
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a578:	2320      	movs	r3, #32
 800a57a:	e003      	b.n	800a584 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	fab3 f383 	clz	r3, r3
 800a582:	b2db      	uxtb	r3, r3
 800a584:	005b      	lsls	r3, r3, #1
 800a586:	6879      	ldr	r1, [r7, #4]
 800a588:	fa01 f303 	lsl.w	r3, r1, r3
 800a58c:	431a      	orrs	r2, r3
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	601a      	str	r2, [r3, #0]
}
 800a592:	bf00      	nop
 800a594:	372c      	adds	r7, #44	; 0x2c
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b085      	sub	sp, #20
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	60f8      	str	r0, [r7, #12]
 800a5a6:	60b9      	str	r1, [r7, #8]
 800a5a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	43db      	mvns	r3, r3
 800a5b2:	401a      	ands	r2, r3
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	6879      	ldr	r1, [r7, #4]
 800a5b8:	fb01 f303 	mul.w	r3, r1, r3
 800a5bc:	431a      	orrs	r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	605a      	str	r2, [r3, #4]
}
 800a5c2:	bf00      	nop
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b08b      	sub	sp, #44	; 0x2c
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	60f8      	str	r0, [r7, #12]
 800a5d6:	60b9      	str	r1, [r7, #8]
 800a5d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	689a      	ldr	r2, [r3, #8]
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	fa93 f3a3 	rbit	r3, r3
 800a5e8:	613b      	str	r3, [r7, #16]
  return result;
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d101      	bne.n	800a5f8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a5f4:	2320      	movs	r3, #32
 800a5f6:	e003      	b.n	800a600 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	fab3 f383 	clz	r3, r3
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	005b      	lsls	r3, r3, #1
 800a602:	2103      	movs	r1, #3
 800a604:	fa01 f303 	lsl.w	r3, r1, r3
 800a608:	43db      	mvns	r3, r3
 800a60a:	401a      	ands	r2, r3
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a610:	6a3b      	ldr	r3, [r7, #32]
 800a612:	fa93 f3a3 	rbit	r3, r3
 800a616:	61fb      	str	r3, [r7, #28]
  return result;
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d101      	bne.n	800a626 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a622:	2320      	movs	r3, #32
 800a624:	e003      	b.n	800a62e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a628:	fab3 f383 	clz	r3, r3
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	005b      	lsls	r3, r3, #1
 800a630:	6879      	ldr	r1, [r7, #4]
 800a632:	fa01 f303 	lsl.w	r3, r1, r3
 800a636:	431a      	orrs	r2, r3
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800a63c:	bf00      	nop
 800a63e:	372c      	adds	r7, #44	; 0x2c
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a648:	b480      	push	{r7}
 800a64a:	b08b      	sub	sp, #44	; 0x2c
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	68da      	ldr	r2, [r3, #12]
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	fa93 f3a3 	rbit	r3, r3
 800a662:	613b      	str	r3, [r7, #16]
  return result;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a66e:	2320      	movs	r3, #32
 800a670:	e003      	b.n	800a67a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	fab3 f383 	clz	r3, r3
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	005b      	lsls	r3, r3, #1
 800a67c:	2103      	movs	r1, #3
 800a67e:	fa01 f303 	lsl.w	r3, r1, r3
 800a682:	43db      	mvns	r3, r3
 800a684:	401a      	ands	r2, r3
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a68a:	6a3b      	ldr	r3, [r7, #32]
 800a68c:	fa93 f3a3 	rbit	r3, r3
 800a690:	61fb      	str	r3, [r7, #28]
  return result;
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a69c:	2320      	movs	r3, #32
 800a69e:	e003      	b.n	800a6a8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a2:	fab3 f383 	clz	r3, r3
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	005b      	lsls	r3, r3, #1
 800a6aa:	6879      	ldr	r1, [r7, #4]
 800a6ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	60da      	str	r2, [r3, #12]
}
 800a6b6:	bf00      	nop
 800a6b8:	372c      	adds	r7, #44	; 0x2c
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a6c2:	b480      	push	{r7}
 800a6c4:	b08b      	sub	sp, #44	; 0x2c
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	60f8      	str	r0, [r7, #12]
 800a6ca:	60b9      	str	r1, [r7, #8]
 800a6cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6a1a      	ldr	r2, [r3, #32]
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	fa93 f3a3 	rbit	r3, r3
 800a6dc:	613b      	str	r3, [r7, #16]
  return result;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d101      	bne.n	800a6ec <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a6e8:	2320      	movs	r3, #32
 800a6ea:	e003      	b.n	800a6f4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	fab3 f383 	clz	r3, r3
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	210f      	movs	r1, #15
 800a6f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a6fc:	43db      	mvns	r3, r3
 800a6fe:	401a      	ands	r2, r3
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a704:	6a3b      	ldr	r3, [r7, #32]
 800a706:	fa93 f3a3 	rbit	r3, r3
 800a70a:	61fb      	str	r3, [r7, #28]
  return result;
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a716:	2320      	movs	r3, #32
 800a718:	e003      	b.n	800a722 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71c:	fab3 f383 	clz	r3, r3
 800a720:	b2db      	uxtb	r3, r3
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	6879      	ldr	r1, [r7, #4]
 800a726:	fa01 f303 	lsl.w	r3, r1, r3
 800a72a:	431a      	orrs	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800a730:	bf00      	nop
 800a732:	372c      	adds	r7, #44	; 0x2c
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b08b      	sub	sp, #44	; 0x2c
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	0a1b      	lsrs	r3, r3, #8
 800a750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	fa93 f3a3 	rbit	r3, r3
 800a758:	613b      	str	r3, [r7, #16]
  return result;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a764:	2320      	movs	r3, #32
 800a766:	e003      	b.n	800a770 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	fab3 f383 	clz	r3, r3
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	210f      	movs	r1, #15
 800a774:	fa01 f303 	lsl.w	r3, r1, r3
 800a778:	43db      	mvns	r3, r3
 800a77a:	401a      	ands	r2, r3
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	0a1b      	lsrs	r3, r3, #8
 800a780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a782:	6a3b      	ldr	r3, [r7, #32]
 800a784:	fa93 f3a3 	rbit	r3, r3
 800a788:	61fb      	str	r3, [r7, #28]
  return result;
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a790:	2b00      	cmp	r3, #0
 800a792:	d101      	bne.n	800a798 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a794:	2320      	movs	r3, #32
 800a796:	e003      	b.n	800a7a0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79a:	fab3 f383 	clz	r3, r3
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	6879      	ldr	r1, [r7, #4]
 800a7a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a7a8:	431a      	orrs	r2, r3
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a7ae:	bf00      	nop
 800a7b0:	372c      	adds	r7, #44	; 0x2c
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr

0800a7ba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b088      	sub	sp, #32
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	fa93 f3a3 	rbit	r3, r3
 800a7d0:	60fb      	str	r3, [r7, #12]
  return result;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d101      	bne.n	800a7e0 <LL_GPIO_Init+0x26>
    return 32U;
 800a7dc:	2320      	movs	r3, #32
 800a7de:	e003      	b.n	800a7e8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	fab3 f383 	clz	r3, r3
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a7ea:	e047      	b.n	800a87c <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	2101      	movs	r1, #1
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d039      	beq.n	800a876 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	2b01      	cmp	r3, #1
 800a808:	d003      	beq.n	800a812 <LL_GPIO_Init+0x58>
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d10d      	bne.n	800a82e <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	461a      	mov	r2, r3
 800a818:	69b9      	ldr	r1, [r7, #24]
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f7ff fed7 	bl	800a5ce <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	461a      	mov	r2, r3
 800a826:	69b9      	ldr	r1, [r7, #24]
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7ff feb8 	bl	800a59e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	461a      	mov	r2, r3
 800a834:	69b9      	ldr	r1, [r7, #24]
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f7ff ff06 	bl	800a648 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	2b02      	cmp	r3, #2
 800a842:	d111      	bne.n	800a868 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	2bff      	cmp	r3, #255	; 0xff
 800a848:	d807      	bhi.n	800a85a <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	461a      	mov	r2, r3
 800a850:	69b9      	ldr	r1, [r7, #24]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7ff ff35 	bl	800a6c2 <LL_GPIO_SetAFPin_0_7>
 800a858:	e006      	b.n	800a868 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	461a      	mov	r2, r3
 800a860:	69b9      	ldr	r1, [r7, #24]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f7ff ff6a 	bl	800a73c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	461a      	mov	r2, r3
 800a86e:	69b9      	ldr	r1, [r7, #24]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f7ff fe57 	bl	800a524 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	3301      	adds	r3, #1
 800a87a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	fa22 f303 	lsr.w	r3, r2, r3
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1b0      	bne.n	800a7ec <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3720      	adds	r7, #32
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a89c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a8a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	43db      	mvns	r3, r3
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	f107 0014 	add.w	r0, r7, #20
 800a8d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	370c      	adds	r7, #12
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	b004      	add	sp, #16
 800a90a:	4770      	bx	lr

0800a90c <__NVIC_SetPriority>:
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	4603      	mov	r3, r0
 800a914:	6039      	str	r1, [r7, #0]
 800a916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	db0a      	blt.n	800a936 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	b2da      	uxtb	r2, r3
 800a924:	490c      	ldr	r1, [pc, #48]	; (800a958 <__NVIC_SetPriority+0x4c>)
 800a926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a92a:	0152      	lsls	r2, r2, #5
 800a92c:	b2d2      	uxtb	r2, r2
 800a92e:	440b      	add	r3, r1
 800a930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a934:	e00a      	b.n	800a94c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	b2da      	uxtb	r2, r3
 800a93a:	4908      	ldr	r1, [pc, #32]	; (800a95c <__NVIC_SetPriority+0x50>)
 800a93c:	79fb      	ldrb	r3, [r7, #7]
 800a93e:	f003 030f 	and.w	r3, r3, #15
 800a942:	3b04      	subs	r3, #4
 800a944:	0152      	lsls	r2, r2, #5
 800a946:	b2d2      	uxtb	r2, r2
 800a948:	440b      	add	r3, r1
 800a94a:	761a      	strb	r2, [r3, #24]
}
 800a94c:	bf00      	nop
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr
 800a958:	e000e100 	.word	0xe000e100
 800a95c:	e000ed00 	.word	0xe000ed00

0800a960 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a964:	4b05      	ldr	r3, [pc, #20]	; (800a97c <SysTick_Handler+0x1c>)
 800a966:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a968:	f001 fb9e 	bl	800c0a8 <xTaskGetSchedulerState>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d001      	beq.n	800a976 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a972:	f001 fff3 	bl	800c95c <xPortSysTickHandler>
  }
}
 800a976:	bf00      	nop
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	e000e010 	.word	0xe000e010

0800a980 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a980:	b580      	push	{r7, lr}
 800a982:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a984:	2100      	movs	r1, #0
 800a986:	f06f 0004 	mvn.w	r0, #4
 800a98a:	f7ff ffbf 	bl	800a90c <__NVIC_SetPriority>
#endif
}
 800a98e:	bf00      	nop
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a99a:	f3ef 8305 	mrs	r3, IPSR
 800a99e:	603b      	str	r3, [r7, #0]
  return(result);
 800a9a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d003      	beq.n	800a9ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a9a6:	f06f 0305 	mvn.w	r3, #5
 800a9aa:	607b      	str	r3, [r7, #4]
 800a9ac:	e00c      	b.n	800a9c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a9ae:	4b0a      	ldr	r3, [pc, #40]	; (800a9d8 <osKernelInitialize+0x44>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d105      	bne.n	800a9c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a9b6:	4b08      	ldr	r3, [pc, #32]	; (800a9d8 <osKernelInitialize+0x44>)
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	607b      	str	r3, [r7, #4]
 800a9c0:	e002      	b.n	800a9c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a9c8:	687b      	ldr	r3, [r7, #4]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	370c      	adds	r7, #12
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	200008f8 	.word	0x200008f8

0800a9dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9e2:	f3ef 8305 	mrs	r3, IPSR
 800a9e6:	603b      	str	r3, [r7, #0]
  return(result);
 800a9e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a9ee:	f06f 0305 	mvn.w	r3, #5
 800a9f2:	607b      	str	r3, [r7, #4]
 800a9f4:	e010      	b.n	800aa18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a9f6:	4b0b      	ldr	r3, [pc, #44]	; (800aa24 <osKernelStart+0x48>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d109      	bne.n	800aa12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a9fe:	f7ff ffbf 	bl	800a980 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aa02:	4b08      	ldr	r3, [pc, #32]	; (800aa24 <osKernelStart+0x48>)
 800aa04:	2202      	movs	r2, #2
 800aa06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aa08:	f000 ff70 	bl	800b8ec <vTaskStartScheduler>
      stat = osOK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	607b      	str	r3, [r7, #4]
 800aa10:	e002      	b.n	800aa18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aa12:	f04f 33ff 	mov.w	r3, #4294967295
 800aa16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aa18:	687b      	ldr	r3, [r7, #4]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	200008f8 	.word	0x200008f8

0800aa28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08e      	sub	sp, #56	; 0x38
 800aa2c:	af04      	add	r7, sp, #16
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aa34:	2300      	movs	r3, #0
 800aa36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa38:	f3ef 8305 	mrs	r3, IPSR
 800aa3c:	617b      	str	r3, [r7, #20]
  return(result);
 800aa3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d17e      	bne.n	800ab42 <osThreadNew+0x11a>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d07b      	beq.n	800ab42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800aa4a:	2380      	movs	r3, #128	; 0x80
 800aa4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aa4e:	2318      	movs	r3, #24
 800aa50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aa52:	2300      	movs	r3, #0
 800aa54:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800aa56:	f04f 33ff 	mov.w	r3, #4294967295
 800aa5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d045      	beq.n	800aaee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <osThreadNew+0x48>
        name = attr->name;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	699b      	ldr	r3, [r3, #24]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d002      	beq.n	800aa7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	699b      	ldr	r3, [r3, #24]
 800aa7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aa7e:	69fb      	ldr	r3, [r7, #28]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d008      	beq.n	800aa96 <osThreadNew+0x6e>
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	2b38      	cmp	r3, #56	; 0x38
 800aa88:	d805      	bhi.n	800aa96 <osThreadNew+0x6e>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	f003 0301 	and.w	r3, r3, #1
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <osThreadNew+0x72>
        return (NULL);
 800aa96:	2300      	movs	r3, #0
 800aa98:	e054      	b.n	800ab44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d003      	beq.n	800aaaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	695b      	ldr	r3, [r3, #20]
 800aaa6:	089b      	lsrs	r3, r3, #2
 800aaa8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00e      	beq.n	800aad0 <osThreadNew+0xa8>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	2b5b      	cmp	r3, #91	; 0x5b
 800aab8:	d90a      	bls.n	800aad0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d006      	beq.n	800aad0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	695b      	ldr	r3, [r3, #20]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d002      	beq.n	800aad0 <osThreadNew+0xa8>
        mem = 1;
 800aaca:	2301      	movs	r3, #1
 800aacc:	61bb      	str	r3, [r7, #24]
 800aace:	e010      	b.n	800aaf2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10c      	bne.n	800aaf2 <osThreadNew+0xca>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d108      	bne.n	800aaf2 <osThreadNew+0xca>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d104      	bne.n	800aaf2 <osThreadNew+0xca>
          mem = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	61bb      	str	r3, [r7, #24]
 800aaec:	e001      	b.n	800aaf2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d110      	bne.n	800ab1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab00:	9202      	str	r2, [sp, #8]
 800ab02:	9301      	str	r3, [sp, #4]
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	6a3a      	ldr	r2, [r7, #32]
 800ab0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f000 fd4c 	bl	800b5ac <xTaskCreateStatic>
 800ab14:	4603      	mov	r3, r0
 800ab16:	613b      	str	r3, [r7, #16]
 800ab18:	e013      	b.n	800ab42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d110      	bne.n	800ab42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ab20:	6a3b      	ldr	r3, [r7, #32]
 800ab22:	b29a      	uxth	r2, r3
 800ab24:	f107 0310 	add.w	r3, r7, #16
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f000 fd7f 	bl	800b636 <xTaskCreate>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d001      	beq.n	800ab42 <osThreadNew+0x11a>
            hTask = NULL;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ab42:	693b      	ldr	r3, [r7, #16]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3728      	adds	r7, #40	; 0x28
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab54:	f3ef 8305 	mrs	r3, IPSR
 800ab58:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d003      	beq.n	800ab68 <osDelay+0x1c>
    stat = osErrorISR;
 800ab60:	f06f 0305 	mvn.w	r3, #5
 800ab64:	60fb      	str	r3, [r7, #12]
 800ab66:	e007      	b.n	800ab78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d002      	beq.n	800ab78 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fe96 	bl	800b8a4 <vTaskDelay>
    }
  }

  return (stat);
 800ab78:	68fb      	ldr	r3, [r7, #12]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
	...

0800ab84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	4a07      	ldr	r2, [pc, #28]	; (800abb0 <vApplicationGetIdleTaskMemory+0x2c>)
 800ab94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	4a06      	ldr	r2, [pc, #24]	; (800abb4 <vApplicationGetIdleTaskMemory+0x30>)
 800ab9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2280      	movs	r2, #128	; 0x80
 800aba0:	601a      	str	r2, [r3, #0]
}
 800aba2:	bf00      	nop
 800aba4:	3714      	adds	r7, #20
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	200008fc 	.word	0x200008fc
 800abb4:	20000958 	.word	0x20000958

0800abb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	4a07      	ldr	r2, [pc, #28]	; (800abe4 <vApplicationGetTimerTaskMemory+0x2c>)
 800abc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	4a06      	ldr	r2, [pc, #24]	; (800abe8 <vApplicationGetTimerTaskMemory+0x30>)
 800abce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abd6:	601a      	str	r2, [r3, #0]
}
 800abd8:	bf00      	nop
 800abda:	3714      	adds	r7, #20
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	20000b58 	.word	0x20000b58
 800abe8:	20000bb4 	.word	0x20000bb4

0800abec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f103 0208 	add.w	r2, r3, #8
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f04f 32ff 	mov.w	r2, #4294967295
 800ac04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f103 0208 	add.w	r2, r3, #8
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f103 0208 	add.w	r2, r3, #8
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ac3a:	bf00      	nop
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac46:	b480      	push	{r7}
 800ac48:	b085      	sub	sp, #20
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	689a      	ldr	r2, [r3, #8]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	683a      	ldr	r2, [r7, #0]
 800ac6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	1c5a      	adds	r2, r3, #1
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	601a      	str	r2, [r3, #0]
}
 800ac82:	bf00      	nop
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr

0800ac8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac8e:	b480      	push	{r7}
 800ac90:	b085      	sub	sp, #20
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca4:	d103      	bne.n	800acae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	60fb      	str	r3, [r7, #12]
 800acac:	e00c      	b.n	800acc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	3308      	adds	r3, #8
 800acb2:	60fb      	str	r3, [r7, #12]
 800acb4:	e002      	b.n	800acbc <vListInsert+0x2e>
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	60fb      	str	r3, [r7, #12]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d2f6      	bcs.n	800acb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	685a      	ldr	r2, [r3, #4]
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	1c5a      	adds	r2, r3, #1
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	601a      	str	r2, [r3, #0]
}
 800acf4:	bf00      	nop
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	6892      	ldr	r2, [r2, #8]
 800ad16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	6852      	ldr	r2, [r2, #4]
 800ad20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d103      	bne.n	800ad34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	689a      	ldr	r2, [r3, #8]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	1e5a      	subs	r2, r3, #1
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3714      	adds	r7, #20
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d102      	bne.n	800ad6e <xQueueGenericReset+0x1a>
 800ad68:	f001 fefe 	bl	800cb68 <ulSetInterruptMask>
 800ad6c:	e7fe      	b.n	800ad6c <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800ad6e:	f001 fdc9 	bl	800c904 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad7a:	68f9      	ldr	r1, [r7, #12]
 800ad7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ad7e:	fb01 f303 	mul.w	r3, r1, r3
 800ad82:	441a      	add	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	68f9      	ldr	r1, [r7, #12]
 800ada2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ada4:	fb01 f303 	mul.w	r3, r1, r3
 800ada8:	441a      	add	r2, r3
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	22ff      	movs	r2, #255	; 0xff
 800adb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	22ff      	movs	r2, #255	; 0xff
 800adba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10e      	bne.n	800ade2 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d014      	beq.n	800adf6 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	3310      	adds	r3, #16
 800add0:	4618      	mov	r0, r3
 800add2:	f000 ffd3 	bl	800bd7c <xTaskRemoveFromEventList>
 800add6:	4603      	mov	r3, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00c      	beq.n	800adf6 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800addc:	f001 fd80 	bl	800c8e0 <vPortYield>
 800ade0:	e009      	b.n	800adf6 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	3310      	adds	r3, #16
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7ff ff00 	bl	800abec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	3324      	adds	r3, #36	; 0x24
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7ff fefb 	bl	800abec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800adf6:	f001 fd97 	bl	800c928 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800adfa:	2301      	movs	r3, #1
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b088      	sub	sp, #32
 800ae08:	af02      	add	r7, sp, #8
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
 800ae10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d102      	bne.n	800ae1e <xQueueGenericCreateStatic+0x1a>
 800ae18:	f001 fea6 	bl	800cb68 <ulSetInterruptMask>
 800ae1c:	e7fe      	b.n	800ae1c <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d102      	bne.n	800ae2a <xQueueGenericCreateStatic+0x26>
 800ae24:	f001 fea0 	bl	800cb68 <ulSetInterruptMask>
 800ae28:	e7fe      	b.n	800ae28 <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d002      	beq.n	800ae36 <xQueueGenericCreateStatic+0x32>
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d001      	beq.n	800ae3a <xQueueGenericCreateStatic+0x36>
 800ae36:	2301      	movs	r3, #1
 800ae38:	e000      	b.n	800ae3c <xQueueGenericCreateStatic+0x38>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d102      	bne.n	800ae46 <xQueueGenericCreateStatic+0x42>
 800ae40:	f001 fe92 	bl	800cb68 <ulSetInterruptMask>
 800ae44:	e7fe      	b.n	800ae44 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d102      	bne.n	800ae52 <xQueueGenericCreateStatic+0x4e>
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <xQueueGenericCreateStatic+0x52>
 800ae52:	2301      	movs	r3, #1
 800ae54:	e000      	b.n	800ae58 <xQueueGenericCreateStatic+0x54>
 800ae56:	2300      	movs	r3, #0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d102      	bne.n	800ae62 <xQueueGenericCreateStatic+0x5e>
 800ae5c:	f001 fe84 	bl	800cb68 <ulSetInterruptMask>
 800ae60:	e7fe      	b.n	800ae60 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ae62:	2350      	movs	r3, #80	; 0x50
 800ae64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	2b50      	cmp	r3, #80	; 0x50
 800ae6a:	d002      	beq.n	800ae72 <xQueueGenericCreateStatic+0x6e>
 800ae6c:	f001 fe7c 	bl	800cb68 <ulSetInterruptMask>
 800ae70:	e7fe      	b.n	800ae70 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae72:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00d      	beq.n	800ae9a <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae86:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	9300      	str	r3, [sp, #0]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	68b9      	ldr	r1, [r7, #8]
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 f805 	bl	800aea4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae9a:	697b      	ldr	r3, [r7, #20]
	}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3718      	adds	r7, #24
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
 800aeb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d103      	bne.n	800aec0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	69ba      	ldr	r2, [r7, #24]
 800aebc:	601a      	str	r2, [r3, #0]
 800aebe:	e002      	b.n	800aec6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aed2:	2101      	movs	r1, #1
 800aed4:	69b8      	ldr	r0, [r7, #24]
 800aed6:	f7ff ff3d 	bl	800ad54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	78fa      	ldrb	r2, [r7, #3]
 800aede:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aee2:	bf00      	nop
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b08a      	sub	sp, #40	; 0x28
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	60f8      	str	r0, [r7, #12]
 800aef2:	60b9      	str	r1, [r7, #8]
 800aef4:	607a      	str	r2, [r7, #4]
 800aef6:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aef8:	2300      	movs	r3, #0
 800aefa:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800af00:	6a3b      	ldr	r3, [r7, #32]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d102      	bne.n	800af0c <xQueueGenericSend+0x22>
 800af06:	f001 fe2f 	bl	800cb68 <ulSetInterruptMask>
 800af0a:	e7fe      	b.n	800af0a <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d103      	bne.n	800af1a <xQueueGenericSend+0x30>
 800af12:	6a3b      	ldr	r3, [r7, #32]
 800af14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af16:	2b00      	cmp	r3, #0
 800af18:	d101      	bne.n	800af1e <xQueueGenericSend+0x34>
 800af1a:	2301      	movs	r3, #1
 800af1c:	e000      	b.n	800af20 <xQueueGenericSend+0x36>
 800af1e:	2300      	movs	r3, #0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d102      	bne.n	800af2a <xQueueGenericSend+0x40>
 800af24:	f001 fe20 	bl	800cb68 <ulSetInterruptMask>
 800af28:	e7fe      	b.n	800af28 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d103      	bne.n	800af38 <xQueueGenericSend+0x4e>
 800af30:	6a3b      	ldr	r3, [r7, #32]
 800af32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af34:	2b01      	cmp	r3, #1
 800af36:	d101      	bne.n	800af3c <xQueueGenericSend+0x52>
 800af38:	2301      	movs	r3, #1
 800af3a:	e000      	b.n	800af3e <xQueueGenericSend+0x54>
 800af3c:	2300      	movs	r3, #0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d102      	bne.n	800af48 <xQueueGenericSend+0x5e>
 800af42:	f001 fe11 	bl	800cb68 <ulSetInterruptMask>
 800af46:	e7fe      	b.n	800af46 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af48:	f001 f8ae 	bl	800c0a8 <xTaskGetSchedulerState>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d102      	bne.n	800af58 <xQueueGenericSend+0x6e>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <xQueueGenericSend+0x72>
 800af58:	2301      	movs	r3, #1
 800af5a:	e000      	b.n	800af5e <xQueueGenericSend+0x74>
 800af5c:	2300      	movs	r3, #0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d102      	bne.n	800af68 <xQueueGenericSend+0x7e>
 800af62:	f001 fe01 	bl	800cb68 <ulSetInterruptMask>
 800af66:	e7fe      	b.n	800af66 <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af68:	f001 fccc 	bl	800c904 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af6c:	6a3b      	ldr	r3, [r7, #32]
 800af6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af70:	6a3b      	ldr	r3, [r7, #32]
 800af72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af74:	429a      	cmp	r2, r3
 800af76:	d302      	bcc.n	800af7e <xQueueGenericSend+0x94>
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d11d      	bne.n	800afba <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af7e:	683a      	ldr	r2, [r7, #0]
 800af80:	68b9      	ldr	r1, [r7, #8]
 800af82:	6a38      	ldr	r0, [r7, #32]
 800af84:	f000 f9a4 	bl	800b2d0 <prvCopyDataToQueue>
 800af88:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af8a:	6a3b      	ldr	r3, [r7, #32]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00a      	beq.n	800afa8 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af92:	6a3b      	ldr	r3, [r7, #32]
 800af94:	3324      	adds	r3, #36	; 0x24
 800af96:	4618      	mov	r0, r3
 800af98:	f000 fef0 	bl	800bd7c <xTaskRemoveFromEventList>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d007      	beq.n	800afb2 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800afa2:	f001 fc9d 	bl	800c8e0 <vPortYield>
 800afa6:	e004      	b.n	800afb2 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800afae:	f001 fc97 	bl	800c8e0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800afb2:	f001 fcb9 	bl	800c928 <vPortExitCritical>
				return pdPASS;
 800afb6:	2301      	movs	r3, #1
 800afb8:	e05c      	b.n	800b074 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d103      	bne.n	800afc8 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800afc0:	f001 fcb2 	bl	800c928 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800afc4:	2300      	movs	r3, #0
 800afc6:	e055      	b.n	800b074 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d106      	bne.n	800afdc <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800afce:	f107 0314 	add.w	r3, r7, #20
 800afd2:	4618      	mov	r0, r3
 800afd4:	f000 ff2e 	bl	800be34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800afd8:	2301      	movs	r3, #1
 800afda:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800afdc:	f001 fca4 	bl	800c928 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800afe0:	f000 fcda 	bl	800b998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800afe4:	f001 fc8e 	bl	800c904 <vPortEnterCritical>
 800afe8:	6a3b      	ldr	r3, [r7, #32]
 800afea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afee:	b25b      	sxtb	r3, r3
 800aff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff4:	d103      	bne.n	800affe <xQueueGenericSend+0x114>
 800aff6:	6a3b      	ldr	r3, [r7, #32]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800affe:	6a3b      	ldr	r3, [r7, #32]
 800b000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b004:	b25b      	sxtb	r3, r3
 800b006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b00a:	d103      	bne.n	800b014 <xQueueGenericSend+0x12a>
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b014:	f001 fc88 	bl	800c928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b018:	1d3a      	adds	r2, r7, #4
 800b01a:	f107 0314 	add.w	r3, r7, #20
 800b01e:	4611      	mov	r1, r2
 800b020:	4618      	mov	r0, r3
 800b022:	f000 ff1d 	bl	800be60 <xTaskCheckForTimeOut>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d11d      	bne.n	800b068 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b02c:	6a38      	ldr	r0, [r7, #32]
 800b02e:	f000 fa47 	bl	800b4c0 <prvIsQueueFull>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d011      	beq.n	800b05c <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b038:	6a3b      	ldr	r3, [r7, #32]
 800b03a:	3310      	adds	r3, #16
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	4611      	mov	r1, r2
 800b040:	4618      	mov	r0, r3
 800b042:	f000 fe5b 	bl	800bcfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b046:	6a38      	ldr	r0, [r7, #32]
 800b048:	f000 f9d2 	bl	800b3f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b04c:	f000 fcb2 	bl	800b9b4 <xTaskResumeAll>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d188      	bne.n	800af68 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 800b056:	f001 fc43 	bl	800c8e0 <vPortYield>
 800b05a:	e785      	b.n	800af68 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b05c:	6a38      	ldr	r0, [r7, #32]
 800b05e:	f000 f9c7 	bl	800b3f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b062:	f000 fca7 	bl	800b9b4 <xTaskResumeAll>
 800b066:	e77f      	b.n	800af68 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b068:	6a38      	ldr	r0, [r7, #32]
 800b06a:	f000 f9c1 	bl	800b3f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b06e:	f000 fca1 	bl	800b9b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b072:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b074:	4618      	mov	r0, r3
 800b076:	3728      	adds	r7, #40	; 0x28
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b08a      	sub	sp, #40	; 0x28
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
 800b088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800b08e:	6a3b      	ldr	r3, [r7, #32]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d102      	bne.n	800b09a <xQueueGenericSendFromISR+0x1e>
 800b094:	f001 fd68 	bl	800cb68 <ulSetInterruptMask>
 800b098:	e7fe      	b.n	800b098 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d103      	bne.n	800b0a8 <xQueueGenericSendFromISR+0x2c>
 800b0a0:	6a3b      	ldr	r3, [r7, #32]
 800b0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d101      	bne.n	800b0ac <xQueueGenericSendFromISR+0x30>
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	e000      	b.n	800b0ae <xQueueGenericSendFromISR+0x32>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d102      	bne.n	800b0b8 <xQueueGenericSendFromISR+0x3c>
 800b0b2:	f001 fd59 	bl	800cb68 <ulSetInterruptMask>
 800b0b6:	e7fe      	b.n	800b0b6 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d103      	bne.n	800b0c6 <xQueueGenericSendFromISR+0x4a>
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d101      	bne.n	800b0ca <xQueueGenericSendFromISR+0x4e>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e000      	b.n	800b0cc <xQueueGenericSendFromISR+0x50>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d102      	bne.n	800b0d6 <xQueueGenericSendFromISR+0x5a>
 800b0d0:	f001 fd4a 	bl	800cb68 <ulSetInterruptMask>
 800b0d4:	e7fe      	b.n	800b0d4 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0d6:	f001 fd47 	bl	800cb68 <ulSetInterruptMask>
 800b0da:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0e0:	6a3b      	ldr	r3, [r7, #32]
 800b0e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d302      	bcc.n	800b0ee <xQueueGenericSendFromISR+0x72>
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	2b02      	cmp	r3, #2
 800b0ec:	d12d      	bne.n	800b14a <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0ee:	6a3b      	ldr	r3, [r7, #32]
 800b0f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0f4:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0f6:	6a3b      	ldr	r3, [r7, #32]
 800b0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0fa:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0fc:	683a      	ldr	r2, [r7, #0]
 800b0fe:	68b9      	ldr	r1, [r7, #8]
 800b100:	6a38      	ldr	r0, [r7, #32]
 800b102:	f000 f8e5 	bl	800b2d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b106:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b10e:	d112      	bne.n	800b136 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b110:	6a3b      	ldr	r3, [r7, #32]
 800b112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b114:	2b00      	cmp	r3, #0
 800b116:	d015      	beq.n	800b144 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b118:	6a3b      	ldr	r3, [r7, #32]
 800b11a:	3324      	adds	r3, #36	; 0x24
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 fe2d 	bl	800bd7c <xTaskRemoveFromEventList>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00d      	beq.n	800b144 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00a      	beq.n	800b144 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2201      	movs	r2, #1
 800b132:	601a      	str	r2, [r3, #0]
 800b134:	e006      	b.n	800b144 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b136:	7efb      	ldrb	r3, [r7, #27]
 800b138:	3301      	adds	r3, #1
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	b25a      	sxtb	r2, r3
 800b13e:	6a3b      	ldr	r3, [r7, #32]
 800b140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b144:	2301      	movs	r3, #1
 800b146:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800b148:	e001      	b.n	800b14e <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800b14e:	69f8      	ldr	r0, [r7, #28]
 800b150:	f001 fd17 	bl	800cb82 <vClearInterruptMask>

	return xReturn;
 800b154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b156:	4618      	mov	r0, r3
 800b158:	3728      	adds	r7, #40	; 0x28
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b08a      	sub	sp, #40	; 0x28
 800b162:	af00      	add	r7, sp, #0
 800b164:	60f8      	str	r0, [r7, #12]
 800b166:	60b9      	str	r1, [r7, #8]
 800b168:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b16a:	2300      	movs	r3, #0
 800b16c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b172:	6a3b      	ldr	r3, [r7, #32]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d102      	bne.n	800b17e <xQueueReceive+0x20>
 800b178:	f001 fcf6 	bl	800cb68 <ulSetInterruptMask>
 800b17c:	e7fe      	b.n	800b17c <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d103      	bne.n	800b18c <xQueueReceive+0x2e>
 800b184:	6a3b      	ldr	r3, [r7, #32]
 800b186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d101      	bne.n	800b190 <xQueueReceive+0x32>
 800b18c:	2301      	movs	r3, #1
 800b18e:	e000      	b.n	800b192 <xQueueReceive+0x34>
 800b190:	2300      	movs	r3, #0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d102      	bne.n	800b19c <xQueueReceive+0x3e>
 800b196:	f001 fce7 	bl	800cb68 <ulSetInterruptMask>
 800b19a:	e7fe      	b.n	800b19a <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b19c:	f000 ff84 	bl	800c0a8 <xTaskGetSchedulerState>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d102      	bne.n	800b1ac <xQueueReceive+0x4e>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <xQueueReceive+0x52>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e000      	b.n	800b1b2 <xQueueReceive+0x54>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d102      	bne.n	800b1bc <xQueueReceive+0x5e>
 800b1b6:	f001 fcd7 	bl	800cb68 <ulSetInterruptMask>
 800b1ba:	e7fe      	b.n	800b1ba <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1bc:	f001 fba2 	bl	800c904 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1c0:	6a3b      	ldr	r3, [r7, #32]
 800b1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c4:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d019      	beq.n	800b200 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1cc:	68b9      	ldr	r1, [r7, #8]
 800b1ce:	6a38      	ldr	r0, [r7, #32]
 800b1d0:	f000 f8e8 	bl	800b3a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	1e5a      	subs	r2, r3, #1
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1dc:	6a3b      	ldr	r3, [r7, #32]
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d009      	beq.n	800b1f8 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
 800b1e6:	3310      	adds	r3, #16
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f000 fdc7 	bl	800bd7c <xTaskRemoveFromEventList>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d001      	beq.n	800b1f8 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b1f4:	f001 fb74 	bl	800c8e0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b1f8:	f001 fb96 	bl	800c928 <vPortExitCritical>
				return pdPASS;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e063      	b.n	800b2c8 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d103      	bne.n	800b20e <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b206:	f001 fb8f 	bl	800c928 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b20a:	2300      	movs	r3, #0
 800b20c:	e05c      	b.n	800b2c8 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b210:	2b00      	cmp	r3, #0
 800b212:	d106      	bne.n	800b222 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b214:	f107 0314 	add.w	r3, r7, #20
 800b218:	4618      	mov	r0, r3
 800b21a:	f000 fe0b 	bl	800be34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b21e:	2301      	movs	r3, #1
 800b220:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b222:	f001 fb81 	bl	800c928 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b226:	f000 fbb7 	bl	800b998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b22a:	f001 fb6b 	bl	800c904 <vPortEnterCritical>
 800b22e:	6a3b      	ldr	r3, [r7, #32]
 800b230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b234:	b25b      	sxtb	r3, r3
 800b236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23a:	d103      	bne.n	800b244 <xQueueReceive+0xe6>
 800b23c:	6a3b      	ldr	r3, [r7, #32]
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b244:	6a3b      	ldr	r3, [r7, #32]
 800b246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b24a:	b25b      	sxtb	r3, r3
 800b24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b250:	d103      	bne.n	800b25a <xQueueReceive+0xfc>
 800b252:	6a3b      	ldr	r3, [r7, #32]
 800b254:	2200      	movs	r2, #0
 800b256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b25a:	f001 fb65 	bl	800c928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b25e:	1d3a      	adds	r2, r7, #4
 800b260:	f107 0314 	add.w	r3, r7, #20
 800b264:	4611      	mov	r1, r2
 800b266:	4618      	mov	r0, r3
 800b268:	f000 fdfa 	bl	800be60 <xTaskCheckForTimeOut>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d11d      	bne.n	800b2ae <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b272:	6a38      	ldr	r0, [r7, #32]
 800b274:	f000 f90e 	bl	800b494 <prvIsQueueEmpty>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d011      	beq.n	800b2a2 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b27e:	6a3b      	ldr	r3, [r7, #32]
 800b280:	3324      	adds	r3, #36	; 0x24
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	4611      	mov	r1, r2
 800b286:	4618      	mov	r0, r3
 800b288:	f000 fd38 	bl	800bcfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b28c:	6a38      	ldr	r0, [r7, #32]
 800b28e:	f000 f8af 	bl	800b3f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b292:	f000 fb8f 	bl	800b9b4 <xTaskResumeAll>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d18f      	bne.n	800b1bc <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 800b29c:	f001 fb20 	bl	800c8e0 <vPortYield>
 800b2a0:	e78c      	b.n	800b1bc <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b2a2:	6a38      	ldr	r0, [r7, #32]
 800b2a4:	f000 f8a4 	bl	800b3f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2a8:	f000 fb84 	bl	800b9b4 <xTaskResumeAll>
 800b2ac:	e786      	b.n	800b1bc <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b2ae:	6a38      	ldr	r0, [r7, #32]
 800b2b0:	f000 f89e 	bl	800b3f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2b4:	f000 fb7e 	bl	800b9b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2b8:	6a38      	ldr	r0, [r7, #32]
 800b2ba:	f000 f8eb 	bl	800b494 <prvIsQueueEmpty>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f43f af7b 	beq.w	800b1bc <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3728      	adds	r7, #40	; 0x28
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d10d      	bne.n	800b30a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d14d      	bne.n	800b392 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 fef2 	bl	800c0e4 <xTaskPriorityDisinherit>
 800b300:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	609a      	str	r2, [r3, #8]
 800b308:	e043      	b.n	800b392 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d119      	bne.n	800b344 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6858      	ldr	r0, [r3, #4]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b318:	461a      	mov	r2, r3
 800b31a:	68b9      	ldr	r1, [r7, #8]
 800b31c:	f001 fea8 	bl	800d070 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	685a      	ldr	r2, [r3, #4]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b328:	441a      	add	r2, r3
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	685a      	ldr	r2, [r3, #4]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	429a      	cmp	r2, r3
 800b338:	d32b      	bcc.n	800b392 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	605a      	str	r2, [r3, #4]
 800b342:	e026      	b.n	800b392 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	68d8      	ldr	r0, [r3, #12]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34c:	461a      	mov	r2, r3
 800b34e:	68b9      	ldr	r1, [r7, #8]
 800b350:	f001 fe8e 	bl	800d070 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	68da      	ldr	r2, [r3, #12]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35c:	425b      	negs	r3, r3
 800b35e:	441a      	add	r2, r3
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	68da      	ldr	r2, [r3, #12]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d207      	bcs.n	800b380 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	689a      	ldr	r2, [r3, #8]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b378:	425b      	negs	r3, r3
 800b37a:	441a      	add	r2, r3
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2b02      	cmp	r3, #2
 800b384:	d105      	bne.n	800b392 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d002      	beq.n	800b392 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	3b01      	subs	r3, #1
 800b390:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	1c5a      	adds	r2, r3, #1
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b39a:	697b      	ldr	r3, [r7, #20]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3718      	adds	r7, #24
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d018      	beq.n	800b3e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	68da      	ldr	r2, [r3, #12]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3be:	441a      	add	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	68da      	ldr	r2, [r3, #12]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d303      	bcc.n	800b3d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68d9      	ldr	r1, [r3, #12]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	6838      	ldr	r0, [r7, #0]
 800b3e4:	f001 fe44 	bl	800d070 <memcpy>
	}
}
 800b3e8:	bf00      	nop
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b3f8:	f001 fa84 	bl	800c904 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b402:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b404:	e011      	b.n	800b42a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d012      	beq.n	800b434 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	3324      	adds	r3, #36	; 0x24
 800b412:	4618      	mov	r0, r3
 800b414:	f000 fcb2 	bl	800bd7c <xTaskRemoveFromEventList>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d001      	beq.n	800b422 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b41e:	f000 fd71 	bl	800bf04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b422:	7bfb      	ldrb	r3, [r7, #15]
 800b424:	3b01      	subs	r3, #1
 800b426:	b2db      	uxtb	r3, r3
 800b428:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	dce9      	bgt.n	800b406 <prvUnlockQueue+0x16>
 800b432:	e000      	b.n	800b436 <prvUnlockQueue+0x46>
					break;
 800b434:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	22ff      	movs	r2, #255	; 0xff
 800b43a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b43e:	f001 fa73 	bl	800c928 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b442:	f001 fa5f 	bl	800c904 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b44c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b44e:	e011      	b.n	800b474 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	691b      	ldr	r3, [r3, #16]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d012      	beq.n	800b47e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	3310      	adds	r3, #16
 800b45c:	4618      	mov	r0, r3
 800b45e:	f000 fc8d 	bl	800bd7c <xTaskRemoveFromEventList>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d001      	beq.n	800b46c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b468:	f000 fd4c 	bl	800bf04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b46c:	7bbb      	ldrb	r3, [r7, #14]
 800b46e:	3b01      	subs	r3, #1
 800b470:	b2db      	uxtb	r3, r3
 800b472:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b474:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	dce9      	bgt.n	800b450 <prvUnlockQueue+0x60>
 800b47c:	e000      	b.n	800b480 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b47e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	22ff      	movs	r2, #255	; 0xff
 800b484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b488:	f001 fa4e 	bl	800c928 <vPortExitCritical>
}
 800b48c:	bf00      	nop
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b49c:	f001 fa32 	bl	800c904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d102      	bne.n	800b4ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	e001      	b.n	800b4b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4b2:	f001 fa39 	bl	800c928 <vPortExitCritical>

	return xReturn;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4c8:	f001 fa1c 	bl	800c904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d102      	bne.n	800b4de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	60fb      	str	r3, [r7, #12]
 800b4dc:	e001      	b.n	800b4e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4e2:	f001 fa21 	bl	800c928 <vPortExitCritical>

	return xReturn;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	60fb      	str	r3, [r7, #12]
 800b4fe:	e014      	b.n	800b52a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b500:	4a0f      	ldr	r2, [pc, #60]	; (800b540 <vQueueAddToRegistry+0x50>)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10b      	bne.n	800b524 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b50c:	490c      	ldr	r1, [pc, #48]	; (800b540 <vQueueAddToRegistry+0x50>)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	683a      	ldr	r2, [r7, #0]
 800b512:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b516:	4a0a      	ldr	r2, [pc, #40]	; (800b540 <vQueueAddToRegistry+0x50>)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	00db      	lsls	r3, r3, #3
 800b51c:	4413      	add	r3, r2
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b522:	e006      	b.n	800b532 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	3301      	adds	r3, #1
 800b528:	60fb      	str	r3, [r7, #12]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2b07      	cmp	r3, #7
 800b52e:	d9e7      	bls.n	800b500 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b530:	bf00      	nop
 800b532:	bf00      	nop
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	20000fb4 	.word	0x20000fb4

0800b544 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b554:	f001 f9d6 	bl	800c904 <vPortEnterCritical>
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b55e:	b25b      	sxtb	r3, r3
 800b560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b564:	d103      	bne.n	800b56e <vQueueWaitForMessageRestricted+0x2a>
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	2200      	movs	r2, #0
 800b56a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b574:	b25b      	sxtb	r3, r3
 800b576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b57a:	d103      	bne.n	800b584 <vQueueWaitForMessageRestricted+0x40>
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b584:	f001 f9d0 	bl	800c928 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d106      	bne.n	800b59e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	3324      	adds	r3, #36	; 0x24
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	68b9      	ldr	r1, [r7, #8]
 800b598:	4618      	mov	r0, r3
 800b59a:	f000 fbcb 	bl	800bd34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b59e:	6978      	ldr	r0, [r7, #20]
 800b5a0:	f7ff ff26 	bl	800b3f0 <prvUnlockQueue>
	}
 800b5a4:	bf00      	nop
 800b5a6:	3718      	adds	r7, #24
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08c      	sub	sp, #48	; 0x30
 800b5b0:	af04      	add	r7, sp, #16
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
 800b5b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d102      	bne.n	800b5c6 <xTaskCreateStatic+0x1a>
 800b5c0:	f001 fad2 	bl	800cb68 <ulSetInterruptMask>
 800b5c4:	e7fe      	b.n	800b5c4 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d102      	bne.n	800b5d2 <xTaskCreateStatic+0x26>
 800b5cc:	f001 facc 	bl	800cb68 <ulSetInterruptMask>
 800b5d0:	e7fe      	b.n	800b5d0 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b5d2:	235c      	movs	r3, #92	; 0x5c
 800b5d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	2b5c      	cmp	r3, #92	; 0x5c
 800b5da:	d002      	beq.n	800b5e2 <xTaskCreateStatic+0x36>
 800b5dc:	f001 fac4 	bl	800cb68 <ulSetInterruptMask>
 800b5e0:	e7fe      	b.n	800b5e0 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b5e2:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d01e      	beq.n	800b628 <xTaskCreateStatic+0x7c>
 800b5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d01b      	beq.n	800b628 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f2:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	2202      	movs	r2, #2
 800b5fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b602:	2300      	movs	r3, #0
 800b604:	9303      	str	r3, [sp, #12]
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	9302      	str	r3, [sp, #8]
 800b60a:	f107 0318 	add.w	r3, r7, #24
 800b60e:	9301      	str	r3, [sp, #4]
 800b610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	68b9      	ldr	r1, [r7, #8]
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f000 f850 	bl	800b6c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b620:	69f8      	ldr	r0, [r7, #28]
 800b622:	f000 f8d7 	bl	800b7d4 <prvAddNewTaskToReadyList>
 800b626:	e001      	b.n	800b62c <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 800b628:	2300      	movs	r3, #0
 800b62a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b62c:	69bb      	ldr	r3, [r7, #24]
	}
 800b62e:	4618      	mov	r0, r3
 800b630:	3720      	adds	r7, #32
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b636:	b580      	push	{r7, lr}
 800b638:	b08c      	sub	sp, #48	; 0x30
 800b63a:	af04      	add	r7, sp, #16
 800b63c:	60f8      	str	r0, [r7, #12]
 800b63e:	60b9      	str	r1, [r7, #8]
 800b640:	603b      	str	r3, [r7, #0]
 800b642:	4613      	mov	r3, r2
 800b644:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b646:	88fb      	ldrh	r3, [r7, #6]
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4618      	mov	r0, r3
 800b64c:	f001 faec 	bl	800cc28 <pvPortMalloc>
 800b650:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00e      	beq.n	800b676 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b658:	205c      	movs	r0, #92	; 0x5c
 800b65a:	f001 fae5 	bl	800cc28 <pvPortMalloc>
 800b65e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d003      	beq.n	800b66e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b666:	69fb      	ldr	r3, [r7, #28]
 800b668:	697a      	ldr	r2, [r7, #20]
 800b66a:	631a      	str	r2, [r3, #48]	; 0x30
 800b66c:	e005      	b.n	800b67a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b66e:	6978      	ldr	r0, [r7, #20]
 800b670:	f001 fb8e 	bl	800cd90 <vPortFree>
 800b674:	e001      	b.n	800b67a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b676:	2300      	movs	r3, #0
 800b678:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d017      	beq.n	800b6b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	2200      	movs	r2, #0
 800b684:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b688:	88fa      	ldrh	r2, [r7, #6]
 800b68a:	2300      	movs	r3, #0
 800b68c:	9303      	str	r3, [sp, #12]
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	9302      	str	r3, [sp, #8]
 800b692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b694:	9301      	str	r3, [sp, #4]
 800b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	68b9      	ldr	r1, [r7, #8]
 800b69e:	68f8      	ldr	r0, [r7, #12]
 800b6a0:	f000 f80e 	bl	800b6c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6a4:	69f8      	ldr	r0, [r7, #28]
 800b6a6:	f000 f895 	bl	800b7d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	61bb      	str	r3, [r7, #24]
 800b6ae:	e002      	b.n	800b6b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b6b6:	69bb      	ldr	r3, [r7, #24]
	}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3720      	adds	r7, #32
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	607a      	str	r2, [r7, #4]
 800b6cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	21a5      	movs	r1, #165	; 0xa5
 800b6da:	f001 fc95 	bl	800d008 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	4413      	add	r3, r2
 800b6ee:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	f023 0307 	bic.w	r3, r3, #7
 800b6f6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	f003 0307 	and.w	r3, r3, #7
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d002      	beq.n	800b708 <prvInitialiseNewTask+0x48>
 800b702:	f001 fa31 	bl	800cb68 <ulSetInterruptMask>
 800b706:	e7fe      	b.n	800b706 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d01f      	beq.n	800b74e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b70e:	2300      	movs	r3, #0
 800b710:	617b      	str	r3, [r7, #20]
 800b712:	e012      	b.n	800b73a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b714:	68ba      	ldr	r2, [r7, #8]
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	4413      	add	r3, r2
 800b71a:	7819      	ldrb	r1, [r3, #0]
 800b71c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	4413      	add	r3, r2
 800b722:	3334      	adds	r3, #52	; 0x34
 800b724:	460a      	mov	r2, r1
 800b726:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	4413      	add	r3, r2
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d006      	beq.n	800b742 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	3301      	adds	r3, #1
 800b738:	617b      	str	r3, [r7, #20]
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	2b0f      	cmp	r3, #15
 800b73e:	d9e9      	bls.n	800b714 <prvInitialiseNewTask+0x54>
 800b740:	e000      	b.n	800b744 <prvInitialiseNewTask+0x84>
			{
				break;
 800b742:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b746:	2200      	movs	r2, #0
 800b748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b74c:	e003      	b.n	800b756 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b750:	2200      	movs	r2, #0
 800b752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b756:	6a3b      	ldr	r3, [r7, #32]
 800b758:	2b37      	cmp	r3, #55	; 0x37
 800b75a:	d901      	bls.n	800b760 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b75c:	2337      	movs	r3, #55	; 0x37
 800b75e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b762:	6a3a      	ldr	r2, [r7, #32]
 800b764:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b768:	6a3a      	ldr	r2, [r7, #32]
 800b76a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76e:	2200      	movs	r2, #0
 800b770:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b774:	3304      	adds	r3, #4
 800b776:	4618      	mov	r0, r3
 800b778:	f7ff fa58 	bl	800ac2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77e:	3318      	adds	r3, #24
 800b780:	4618      	mov	r0, r3
 800b782:	f7ff fa53 	bl	800ac2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b78a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b78c:	6a3b      	ldr	r3, [r7, #32]
 800b78e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b794:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b79a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79e:	2200      	movs	r2, #0
 800b7a0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800b7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	68fa      	ldr	r2, [r7, #12]
 800b7b2:	6938      	ldr	r0, [r7, #16]
 800b7b4:	f001 f902 	bl	800c9bc <pxPortInitialiseStack>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d002      	beq.n	800b7ca <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7ca:	bf00      	nop
 800b7cc:	3718      	adds	r7, #24
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
	...

0800b7d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7dc:	f001 f892 	bl	800c904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7e0:	4b2a      	ldr	r3, [pc, #168]	; (800b88c <prvAddNewTaskToReadyList+0xb8>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	4a29      	ldr	r2, [pc, #164]	; (800b88c <prvAddNewTaskToReadyList+0xb8>)
 800b7e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b7ea:	4b29      	ldr	r3, [pc, #164]	; (800b890 <prvAddNewTaskToReadyList+0xbc>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d109      	bne.n	800b806 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b7f2:	4a27      	ldr	r2, [pc, #156]	; (800b890 <prvAddNewTaskToReadyList+0xbc>)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b7f8:	4b24      	ldr	r3, [pc, #144]	; (800b88c <prvAddNewTaskToReadyList+0xb8>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d110      	bne.n	800b822 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b800:	f000 fb9c 	bl	800bf3c <prvInitialiseTaskLists>
 800b804:	e00d      	b.n	800b822 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b806:	4b23      	ldr	r3, [pc, #140]	; (800b894 <prvAddNewTaskToReadyList+0xc0>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d109      	bne.n	800b822 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b80e:	4b20      	ldr	r3, [pc, #128]	; (800b890 <prvAddNewTaskToReadyList+0xbc>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b818:	429a      	cmp	r2, r3
 800b81a:	d802      	bhi.n	800b822 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b81c:	4a1c      	ldr	r2, [pc, #112]	; (800b890 <prvAddNewTaskToReadyList+0xbc>)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b822:	4b1d      	ldr	r3, [pc, #116]	; (800b898 <prvAddNewTaskToReadyList+0xc4>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	3301      	adds	r3, #1
 800b828:	4a1b      	ldr	r2, [pc, #108]	; (800b898 <prvAddNewTaskToReadyList+0xc4>)
 800b82a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b82c:	4b1a      	ldr	r3, [pc, #104]	; (800b898 <prvAddNewTaskToReadyList+0xc4>)
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b838:	4b18      	ldr	r3, [pc, #96]	; (800b89c <prvAddNewTaskToReadyList+0xc8>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d903      	bls.n	800b848 <prvAddNewTaskToReadyList+0x74>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b844:	4a15      	ldr	r2, [pc, #84]	; (800b89c <prvAddNewTaskToReadyList+0xc8>)
 800b846:	6013      	str	r3, [r2, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b84c:	4613      	mov	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	4413      	add	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4a12      	ldr	r2, [pc, #72]	; (800b8a0 <prvAddNewTaskToReadyList+0xcc>)
 800b856:	441a      	add	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	3304      	adds	r3, #4
 800b85c:	4619      	mov	r1, r3
 800b85e:	4610      	mov	r0, r2
 800b860:	f7ff f9f1 	bl	800ac46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b864:	f001 f860 	bl	800c928 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b868:	4b0a      	ldr	r3, [pc, #40]	; (800b894 <prvAddNewTaskToReadyList+0xc0>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d008      	beq.n	800b882 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b870:	4b07      	ldr	r3, [pc, #28]	; (800b890 <prvAddNewTaskToReadyList+0xbc>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d201      	bcs.n	800b882 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b87e:	f001 f82f 	bl	800c8e0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b882:	bf00      	nop
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	200014c8 	.word	0x200014c8
 800b890:	20000ff4 	.word	0x20000ff4
 800b894:	200014d4 	.word	0x200014d4
 800b898:	200014e4 	.word	0x200014e4
 800b89c:	200014d0 	.word	0x200014d0
 800b8a0:	20000ff8 	.word	0x20000ff8

0800b8a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00f      	beq.n	800b8d6 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b8b6:	4b0c      	ldr	r3, [pc, #48]	; (800b8e8 <vTaskDelay+0x44>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <vTaskDelay+0x20>
 800b8be:	f001 f953 	bl	800cb68 <ulSetInterruptMask>
 800b8c2:	e7fe      	b.n	800b8c2 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 800b8c4:	f000 f868 	bl	800b998 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fc68 	bl	800c1a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b8d0:	f000 f870 	bl	800b9b4 <xTaskResumeAll>
 800b8d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d101      	bne.n	800b8e0 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 800b8dc:	f001 f800 	bl	800c8e0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8e0:	bf00      	nop
 800b8e2:	3710      	adds	r7, #16
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	200014f0 	.word	0x200014f0

0800b8ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b088      	sub	sp, #32
 800b8f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8fa:	463a      	mov	r2, r7
 800b8fc:	1d39      	adds	r1, r7, #4
 800b8fe:	f107 0308 	add.w	r3, r7, #8
 800b902:	4618      	mov	r0, r3
 800b904:	f7ff f93e 	bl	800ab84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	9202      	str	r2, [sp, #8]
 800b910:	9301      	str	r3, [sp, #4]
 800b912:	2300      	movs	r3, #0
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	2300      	movs	r3, #0
 800b918:	460a      	mov	r2, r1
 800b91a:	4919      	ldr	r1, [pc, #100]	; (800b980 <vTaskStartScheduler+0x94>)
 800b91c:	4819      	ldr	r0, [pc, #100]	; (800b984 <vTaskStartScheduler+0x98>)
 800b91e:	f7ff fe45 	bl	800b5ac <xTaskCreateStatic>
 800b922:	4603      	mov	r3, r0
 800b924:	4a18      	ldr	r2, [pc, #96]	; (800b988 <vTaskStartScheduler+0x9c>)
 800b926:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b928:	4b17      	ldr	r3, [pc, #92]	; (800b988 <vTaskStartScheduler+0x9c>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d002      	beq.n	800b936 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b930:	2301      	movs	r3, #1
 800b932:	60fb      	str	r3, [r7, #12]
 800b934:	e001      	b.n	800b93a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b936:	2300      	movs	r3, #0
 800b938:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d102      	bne.n	800b946 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b940:	f000 fc82 	bl	800c248 <xTimerCreateTimerTask>
 800b944:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d10e      	bne.n	800b96a <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800b94c:	f001 f90c 	bl	800cb68 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b950:	4b0e      	ldr	r3, [pc, #56]	; (800b98c <vTaskStartScheduler+0xa0>)
 800b952:	f04f 32ff 	mov.w	r2, #4294967295
 800b956:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b958:	4b0d      	ldr	r3, [pc, #52]	; (800b990 <vTaskStartScheduler+0xa4>)
 800b95a:	2201      	movs	r2, #1
 800b95c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b95e:	4b0d      	ldr	r3, [pc, #52]	; (800b994 <vTaskStartScheduler+0xa8>)
 800b960:	2200      	movs	r2, #0
 800b962:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b964:	f001 f8b4 	bl	800cad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b968:	e006      	b.n	800b978 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b970:	d102      	bne.n	800b978 <vTaskStartScheduler+0x8c>
 800b972:	f001 f8f9 	bl	800cb68 <ulSetInterruptMask>
 800b976:	e7fe      	b.n	800b976 <vTaskStartScheduler+0x8a>
}
 800b978:	bf00      	nop
 800b97a:	3710      	adds	r7, #16
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	0800dc78 	.word	0x0800dc78
 800b984:	0800bf1d 	.word	0x0800bf1d
 800b988:	200014ec 	.word	0x200014ec
 800b98c:	200014e8 	.word	0x200014e8
 800b990:	200014d4 	.word	0x200014d4
 800b994:	200014cc 	.word	0x200014cc

0800b998 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b998:	b480      	push	{r7}
 800b99a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b99c:	4b04      	ldr	r3, [pc, #16]	; (800b9b0 <vTaskSuspendAll+0x18>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	4a03      	ldr	r2, [pc, #12]	; (800b9b0 <vTaskSuspendAll+0x18>)
 800b9a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b9a6:	bf00      	nop
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	200014f0 	.word	0x200014f0

0800b9b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9c2:	4b3b      	ldr	r3, [pc, #236]	; (800bab0 <xTaskResumeAll+0xfc>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d102      	bne.n	800b9d0 <xTaskResumeAll+0x1c>
 800b9ca:	f001 f8cd 	bl	800cb68 <ulSetInterruptMask>
 800b9ce:	e7fe      	b.n	800b9ce <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9d0:	f000 ff98 	bl	800c904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b9d4:	4b36      	ldr	r3, [pc, #216]	; (800bab0 <xTaskResumeAll+0xfc>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	4a35      	ldr	r2, [pc, #212]	; (800bab0 <xTaskResumeAll+0xfc>)
 800b9dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9de:	4b34      	ldr	r3, [pc, #208]	; (800bab0 <xTaskResumeAll+0xfc>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d15c      	bne.n	800baa0 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b9e6:	4b33      	ldr	r3, [pc, #204]	; (800bab4 <xTaskResumeAll+0x100>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d058      	beq.n	800baa0 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9ee:	e02f      	b.n	800ba50 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9f0:	4b31      	ldr	r3, [pc, #196]	; (800bab8 <xTaskResumeAll+0x104>)
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	3318      	adds	r3, #24
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7ff f97f 	bl	800ad00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	3304      	adds	r3, #4
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7ff f97a 	bl	800ad00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba10:	4b2a      	ldr	r3, [pc, #168]	; (800babc <xTaskResumeAll+0x108>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d903      	bls.n	800ba20 <xTaskResumeAll+0x6c>
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1c:	4a27      	ldr	r2, [pc, #156]	; (800babc <xTaskResumeAll+0x108>)
 800ba1e:	6013      	str	r3, [r2, #0]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba24:	4613      	mov	r3, r2
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	4413      	add	r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4a24      	ldr	r2, [pc, #144]	; (800bac0 <xTaskResumeAll+0x10c>)
 800ba2e:	441a      	add	r2, r3
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3304      	adds	r3, #4
 800ba34:	4619      	mov	r1, r3
 800ba36:	4610      	mov	r0, r2
 800ba38:	f7ff f905 	bl	800ac46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba40:	4b20      	ldr	r3, [pc, #128]	; (800bac4 <xTaskResumeAll+0x110>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d302      	bcc.n	800ba50 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800ba4a:	4b1f      	ldr	r3, [pc, #124]	; (800bac8 <xTaskResumeAll+0x114>)
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba50:	4b19      	ldr	r3, [pc, #100]	; (800bab8 <xTaskResumeAll+0x104>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1cb      	bne.n	800b9f0 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d001      	beq.n	800ba62 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba5e:	f000 fb03 	bl	800c068 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba62:	4b1a      	ldr	r3, [pc, #104]	; (800bacc <xTaskResumeAll+0x118>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d010      	beq.n	800ba90 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba6e:	f000 f83f 	bl	800baf0 <xTaskIncrementTick>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 800ba78:	4b13      	ldr	r3, [pc, #76]	; (800bac8 <xTaskResumeAll+0x114>)
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	3b01      	subs	r3, #1
 800ba82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1f1      	bne.n	800ba6e <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 800ba8a:	4b10      	ldr	r3, [pc, #64]	; (800bacc <xTaskResumeAll+0x118>)
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba90:	4b0d      	ldr	r3, [pc, #52]	; (800bac8 <xTaskResumeAll+0x114>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d003      	beq.n	800baa0 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba9c:	f000 ff20 	bl	800c8e0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800baa0:	f000 ff42 	bl	800c928 <vPortExitCritical>

	return xAlreadyYielded;
 800baa4:	68bb      	ldr	r3, [r7, #8]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	200014f0 	.word	0x200014f0
 800bab4:	200014c8 	.word	0x200014c8
 800bab8:	20001488 	.word	0x20001488
 800babc:	200014d0 	.word	0x200014d0
 800bac0:	20000ff8 	.word	0x20000ff8
 800bac4:	20000ff4 	.word	0x20000ff4
 800bac8:	200014dc 	.word	0x200014dc
 800bacc:	200014d8 	.word	0x200014d8

0800bad0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bad6:	4b05      	ldr	r3, [pc, #20]	; (800baec <xTaskGetTickCount+0x1c>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800badc:	687b      	ldr	r3, [r7, #4]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	370c      	adds	r7, #12
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	200014cc 	.word	0x200014cc

0800baf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800baf6:	2300      	movs	r3, #0
 800baf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bafa:	4b4b      	ldr	r3, [pc, #300]	; (800bc28 <xTaskIncrementTick+0x138>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f040 8087 	bne.w	800bc12 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb04:	4b49      	ldr	r3, [pc, #292]	; (800bc2c <xTaskIncrementTick+0x13c>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb0c:	4a47      	ldr	r2, [pc, #284]	; (800bc2c <xTaskIncrementTick+0x13c>)
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d118      	bne.n	800bb4a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb18:	4b45      	ldr	r3, [pc, #276]	; (800bc30 <xTaskIncrementTick+0x140>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d002      	beq.n	800bb28 <xTaskIncrementTick+0x38>
 800bb22:	f001 f821 	bl	800cb68 <ulSetInterruptMask>
 800bb26:	e7fe      	b.n	800bb26 <xTaskIncrementTick+0x36>
 800bb28:	4b41      	ldr	r3, [pc, #260]	; (800bc30 <xTaskIncrementTick+0x140>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	60fb      	str	r3, [r7, #12]
 800bb2e:	4b41      	ldr	r3, [pc, #260]	; (800bc34 <xTaskIncrementTick+0x144>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a3f      	ldr	r2, [pc, #252]	; (800bc30 <xTaskIncrementTick+0x140>)
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	4a3f      	ldr	r2, [pc, #252]	; (800bc34 <xTaskIncrementTick+0x144>)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6013      	str	r3, [r2, #0]
 800bb3c:	4b3e      	ldr	r3, [pc, #248]	; (800bc38 <xTaskIncrementTick+0x148>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	3301      	adds	r3, #1
 800bb42:	4a3d      	ldr	r2, [pc, #244]	; (800bc38 <xTaskIncrementTick+0x148>)
 800bb44:	6013      	str	r3, [r2, #0]
 800bb46:	f000 fa8f 	bl	800c068 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb4a:	4b3c      	ldr	r3, [pc, #240]	; (800bc3c <xTaskIncrementTick+0x14c>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	693a      	ldr	r2, [r7, #16]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d349      	bcc.n	800bbe8 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb54:	4b36      	ldr	r3, [pc, #216]	; (800bc30 <xTaskIncrementTick+0x140>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d104      	bne.n	800bb68 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb5e:	4b37      	ldr	r3, [pc, #220]	; (800bc3c <xTaskIncrementTick+0x14c>)
 800bb60:	f04f 32ff 	mov.w	r2, #4294967295
 800bb64:	601a      	str	r2, [r3, #0]
					break;
 800bb66:	e03f      	b.n	800bbe8 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb68:	4b31      	ldr	r3, [pc, #196]	; (800bc30 <xTaskIncrementTick+0x140>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d203      	bcs.n	800bb88 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb80:	4a2e      	ldr	r2, [pc, #184]	; (800bc3c <xTaskIncrementTick+0x14c>)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb86:	e02f      	b.n	800bbe8 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	3304      	adds	r3, #4
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7ff f8b7 	bl	800ad00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d004      	beq.n	800bba4 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	3318      	adds	r3, #24
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7ff f8ae 	bl	800ad00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba8:	4b25      	ldr	r3, [pc, #148]	; (800bc40 <xTaskIncrementTick+0x150>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d903      	bls.n	800bbb8 <xTaskIncrementTick+0xc8>
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb4:	4a22      	ldr	r2, [pc, #136]	; (800bc40 <xTaskIncrementTick+0x150>)
 800bbb6:	6013      	str	r3, [r2, #0]
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	4413      	add	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	4a1f      	ldr	r2, [pc, #124]	; (800bc44 <xTaskIncrementTick+0x154>)
 800bbc6:	441a      	add	r2, r3
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	3304      	adds	r3, #4
 800bbcc:	4619      	mov	r1, r3
 800bbce:	4610      	mov	r0, r2
 800bbd0:	f7ff f839 	bl	800ac46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd8:	4b1b      	ldr	r3, [pc, #108]	; (800bc48 <xTaskIncrementTick+0x158>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d3b8      	bcc.n	800bb54 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbe6:	e7b5      	b.n	800bb54 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bbe8:	4b17      	ldr	r3, [pc, #92]	; (800bc48 <xTaskIncrementTick+0x158>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbee:	4915      	ldr	r1, [pc, #84]	; (800bc44 <xTaskIncrementTick+0x154>)
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	4413      	add	r3, r2
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	440b      	add	r3, r1
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d901      	bls.n	800bc04 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 800bc00:	2301      	movs	r3, #1
 800bc02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bc04:	4b11      	ldr	r3, [pc, #68]	; (800bc4c <xTaskIncrementTick+0x15c>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d007      	beq.n	800bc1c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	617b      	str	r3, [r7, #20]
 800bc10:	e004      	b.n	800bc1c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bc12:	4b0f      	ldr	r3, [pc, #60]	; (800bc50 <xTaskIncrementTick+0x160>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3301      	adds	r3, #1
 800bc18:	4a0d      	ldr	r2, [pc, #52]	; (800bc50 <xTaskIncrementTick+0x160>)
 800bc1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bc1c:	697b      	ldr	r3, [r7, #20]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3718      	adds	r7, #24
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	200014f0 	.word	0x200014f0
 800bc2c:	200014cc 	.word	0x200014cc
 800bc30:	20001480 	.word	0x20001480
 800bc34:	20001484 	.word	0x20001484
 800bc38:	200014e0 	.word	0x200014e0
 800bc3c:	200014e8 	.word	0x200014e8
 800bc40:	200014d0 	.word	0x200014d0
 800bc44:	20000ff8 	.word	0x20000ff8
 800bc48:	20000ff4 	.word	0x20000ff4
 800bc4c:	200014dc 	.word	0x200014dc
 800bc50:	200014d8 	.word	0x200014d8

0800bc54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc5a:	4b23      	ldr	r3, [pc, #140]	; (800bce8 <vTaskSwitchContext+0x94>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d003      	beq.n	800bc6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc62:	4b22      	ldr	r3, [pc, #136]	; (800bcec <vTaskSwitchContext+0x98>)
 800bc64:	2201      	movs	r2, #1
 800bc66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc68:	e039      	b.n	800bcde <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 800bc6a:	4b20      	ldr	r3, [pc, #128]	; (800bcec <vTaskSwitchContext+0x98>)
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc70:	4b1f      	ldr	r3, [pc, #124]	; (800bcf0 <vTaskSwitchContext+0x9c>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	607b      	str	r3, [r7, #4]
 800bc76:	e008      	b.n	800bc8a <vTaskSwitchContext+0x36>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d102      	bne.n	800bc84 <vTaskSwitchContext+0x30>
 800bc7e:	f000 ff73 	bl	800cb68 <ulSetInterruptMask>
 800bc82:	e7fe      	b.n	800bc82 <vTaskSwitchContext+0x2e>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	3b01      	subs	r3, #1
 800bc88:	607b      	str	r3, [r7, #4]
 800bc8a:	491a      	ldr	r1, [pc, #104]	; (800bcf4 <vTaskSwitchContext+0xa0>)
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	4413      	add	r3, r2
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	440b      	add	r3, r1
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d0ec      	beq.n	800bc78 <vTaskSwitchContext+0x24>
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	4613      	mov	r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	4413      	add	r3, r2
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	4a12      	ldr	r2, [pc, #72]	; (800bcf4 <vTaskSwitchContext+0xa0>)
 800bcaa:	4413      	add	r3, r2
 800bcac:	603b      	str	r3, [r7, #0]
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	685a      	ldr	r2, [r3, #4]
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	605a      	str	r2, [r3, #4]
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	685a      	ldr	r2, [r3, #4]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	3308      	adds	r3, #8
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d104      	bne.n	800bcce <vTaskSwitchContext+0x7a>
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	685a      	ldr	r2, [r3, #4]
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	605a      	str	r2, [r3, #4]
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	4a08      	ldr	r2, [pc, #32]	; (800bcf8 <vTaskSwitchContext+0xa4>)
 800bcd6:	6013      	str	r3, [r2, #0]
 800bcd8:	4a05      	ldr	r2, [pc, #20]	; (800bcf0 <vTaskSwitchContext+0x9c>)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6013      	str	r3, [r2, #0]
}
 800bcde:	bf00      	nop
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	200014f0 	.word	0x200014f0
 800bcec:	200014dc 	.word	0x200014dc
 800bcf0:	200014d0 	.word	0x200014d0
 800bcf4:	20000ff8 	.word	0x20000ff8
 800bcf8:	20000ff4 	.word	0x20000ff4

0800bcfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d102      	bne.n	800bd12 <vTaskPlaceOnEventList+0x16>
 800bd0c:	f000 ff2c 	bl	800cb68 <ulSetInterruptMask>
 800bd10:	e7fe      	b.n	800bd10 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd12:	4b07      	ldr	r3, [pc, #28]	; (800bd30 <vTaskPlaceOnEventList+0x34>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	3318      	adds	r3, #24
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7fe ffb7 	bl	800ac8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd20:	2101      	movs	r1, #1
 800bd22:	6838      	ldr	r0, [r7, #0]
 800bd24:	f000 fa3c 	bl	800c1a0 <prvAddCurrentTaskToDelayedList>
}
 800bd28:	bf00      	nop
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20000ff4 	.word	0x20000ff4

0800bd34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d102      	bne.n	800bd4c <vTaskPlaceOnEventListRestricted+0x18>
 800bd46:	f000 ff0f 	bl	800cb68 <ulSetInterruptMask>
 800bd4a:	e7fe      	b.n	800bd4a <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd4c:	4b0a      	ldr	r3, [pc, #40]	; (800bd78 <vTaskPlaceOnEventListRestricted+0x44>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	3318      	adds	r3, #24
 800bd52:	4619      	mov	r1, r3
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f7fe ff76 	bl	800ac46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d002      	beq.n	800bd66 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 800bd60:	f04f 33ff 	mov.w	r3, #4294967295
 800bd64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd66:	6879      	ldr	r1, [r7, #4]
 800bd68:	68b8      	ldr	r0, [r7, #8]
 800bd6a:	f000 fa19 	bl	800c1a0 <prvAddCurrentTaskToDelayedList>
	}
 800bd6e:	bf00      	nop
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	20000ff4 	.word	0x20000ff4

0800bd7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d102      	bne.n	800bd98 <xTaskRemoveFromEventList+0x1c>
 800bd92:	f000 fee9 	bl	800cb68 <ulSetInterruptMask>
 800bd96:	e7fe      	b.n	800bd96 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	3318      	adds	r3, #24
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7fe ffaf 	bl	800ad00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bda2:	4b1e      	ldr	r3, [pc, #120]	; (800be1c <xTaskRemoveFromEventList+0xa0>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d11d      	bne.n	800bde6 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	3304      	adds	r3, #4
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7fe ffa6 	bl	800ad00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb8:	4b19      	ldr	r3, [pc, #100]	; (800be20 <xTaskRemoveFromEventList+0xa4>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d903      	bls.n	800bdc8 <xTaskRemoveFromEventList+0x4c>
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc4:	4a16      	ldr	r2, [pc, #88]	; (800be20 <xTaskRemoveFromEventList+0xa4>)
 800bdc6:	6013      	str	r3, [r2, #0]
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdcc:	4613      	mov	r3, r2
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	4413      	add	r3, r2
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	4a13      	ldr	r2, [pc, #76]	; (800be24 <xTaskRemoveFromEventList+0xa8>)
 800bdd6:	441a      	add	r2, r3
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	3304      	adds	r3, #4
 800bddc:	4619      	mov	r1, r3
 800bdde:	4610      	mov	r0, r2
 800bde0:	f7fe ff31 	bl	800ac46 <vListInsertEnd>
 800bde4:	e005      	b.n	800bdf2 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	3318      	adds	r3, #24
 800bdea:	4619      	mov	r1, r3
 800bdec:	480e      	ldr	r0, [pc, #56]	; (800be28 <xTaskRemoveFromEventList+0xac>)
 800bdee:	f7fe ff2a 	bl	800ac46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf6:	4b0d      	ldr	r3, [pc, #52]	; (800be2c <xTaskRemoveFromEventList+0xb0>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d905      	bls.n	800be0c <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be00:	2301      	movs	r3, #1
 800be02:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be04:	4b0a      	ldr	r3, [pc, #40]	; (800be30 <xTaskRemoveFromEventList+0xb4>)
 800be06:	2201      	movs	r2, #1
 800be08:	601a      	str	r2, [r3, #0]
 800be0a:	e001      	b.n	800be10 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 800be0c:	2300      	movs	r3, #0
 800be0e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800be10:	68fb      	ldr	r3, [r7, #12]
}
 800be12:	4618      	mov	r0, r3
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	200014f0 	.word	0x200014f0
 800be20:	200014d0 	.word	0x200014d0
 800be24:	20000ff8 	.word	0x20000ff8
 800be28:	20001488 	.word	0x20001488
 800be2c:	20000ff4 	.word	0x20000ff4
 800be30:	200014dc 	.word	0x200014dc

0800be34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be3c:	4b06      	ldr	r3, [pc, #24]	; (800be58 <vTaskInternalSetTimeOutState+0x24>)
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be44:	4b05      	ldr	r3, [pc, #20]	; (800be5c <vTaskInternalSetTimeOutState+0x28>)
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	605a      	str	r2, [r3, #4]
}
 800be4c:	bf00      	nop
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr
 800be58:	200014e0 	.word	0x200014e0
 800be5c:	200014cc 	.word	0x200014cc

0800be60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d102      	bne.n	800be76 <xTaskCheckForTimeOut+0x16>
 800be70:	f000 fe7a 	bl	800cb68 <ulSetInterruptMask>
 800be74:	e7fe      	b.n	800be74 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d102      	bne.n	800be82 <xTaskCheckForTimeOut+0x22>
 800be7c:	f000 fe74 	bl	800cb68 <ulSetInterruptMask>
 800be80:	e7fe      	b.n	800be80 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 800be82:	f000 fd3f 	bl	800c904 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be86:	4b1d      	ldr	r3, [pc, #116]	; (800befc <xTaskCheckForTimeOut+0x9c>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	693a      	ldr	r2, [r7, #16]
 800be92:	1ad3      	subs	r3, r2, r3
 800be94:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9e:	d102      	bne.n	800bea6 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bea0:	2300      	movs	r3, #0
 800bea2:	617b      	str	r3, [r7, #20]
 800bea4:	e023      	b.n	800beee <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	4b15      	ldr	r3, [pc, #84]	; (800bf00 <xTaskCheckForTimeOut+0xa0>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d007      	beq.n	800bec2 <xTaskCheckForTimeOut+0x62>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	693a      	ldr	r2, [r7, #16]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d302      	bcc.n	800bec2 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bebc:	2301      	movs	r3, #1
 800bebe:	617b      	str	r3, [r7, #20]
 800bec0:	e015      	b.n	800beee <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d20b      	bcs.n	800bee4 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	1ad2      	subs	r2, r2, r3
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7ff ffab 	bl	800be34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bede:	2300      	movs	r3, #0
 800bee0:	617b      	str	r3, [r7, #20]
 800bee2:	e004      	b.n	800beee <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	2200      	movs	r2, #0
 800bee8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800beea:	2301      	movs	r3, #1
 800beec:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800beee:	f000 fd1b 	bl	800c928 <vPortExitCritical>

	return xReturn;
 800bef2:	697b      	ldr	r3, [r7, #20]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3718      	adds	r7, #24
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	200014cc 	.word	0x200014cc
 800bf00:	200014e0 	.word	0x200014e0

0800bf04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf04:	b480      	push	{r7}
 800bf06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf08:	4b03      	ldr	r3, [pc, #12]	; (800bf18 <vTaskMissedYield+0x14>)
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	601a      	str	r2, [r3, #0]
}
 800bf0e:	bf00      	nop
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr
 800bf18:	200014dc 	.word	0x200014dc

0800bf1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf24:	f000 f84a 	bl	800bfbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf28:	4b03      	ldr	r3, [pc, #12]	; (800bf38 <prvIdleTask+0x1c>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d9f9      	bls.n	800bf24 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf30:	f000 fcd6 	bl	800c8e0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800bf34:	e7f6      	b.n	800bf24 <prvIdleTask+0x8>
 800bf36:	bf00      	nop
 800bf38:	20000ff8 	.word	0x20000ff8

0800bf3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf42:	2300      	movs	r3, #0
 800bf44:	607b      	str	r3, [r7, #4]
 800bf46:	e00c      	b.n	800bf62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	4413      	add	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	4a12      	ldr	r2, [pc, #72]	; (800bf9c <prvInitialiseTaskLists+0x60>)
 800bf54:	4413      	add	r3, r2
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fe fe48 	bl	800abec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	607b      	str	r3, [r7, #4]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b37      	cmp	r3, #55	; 0x37
 800bf66:	d9ef      	bls.n	800bf48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf68:	480d      	ldr	r0, [pc, #52]	; (800bfa0 <prvInitialiseTaskLists+0x64>)
 800bf6a:	f7fe fe3f 	bl	800abec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf6e:	480d      	ldr	r0, [pc, #52]	; (800bfa4 <prvInitialiseTaskLists+0x68>)
 800bf70:	f7fe fe3c 	bl	800abec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf74:	480c      	ldr	r0, [pc, #48]	; (800bfa8 <prvInitialiseTaskLists+0x6c>)
 800bf76:	f7fe fe39 	bl	800abec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf7a:	480c      	ldr	r0, [pc, #48]	; (800bfac <prvInitialiseTaskLists+0x70>)
 800bf7c:	f7fe fe36 	bl	800abec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf80:	480b      	ldr	r0, [pc, #44]	; (800bfb0 <prvInitialiseTaskLists+0x74>)
 800bf82:	f7fe fe33 	bl	800abec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf86:	4b0b      	ldr	r3, [pc, #44]	; (800bfb4 <prvInitialiseTaskLists+0x78>)
 800bf88:	4a05      	ldr	r2, [pc, #20]	; (800bfa0 <prvInitialiseTaskLists+0x64>)
 800bf8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf8c:	4b0a      	ldr	r3, [pc, #40]	; (800bfb8 <prvInitialiseTaskLists+0x7c>)
 800bf8e:	4a05      	ldr	r2, [pc, #20]	; (800bfa4 <prvInitialiseTaskLists+0x68>)
 800bf90:	601a      	str	r2, [r3, #0]
}
 800bf92:	bf00      	nop
 800bf94:	3708      	adds	r7, #8
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	20000ff8 	.word	0x20000ff8
 800bfa0:	20001458 	.word	0x20001458
 800bfa4:	2000146c 	.word	0x2000146c
 800bfa8:	20001488 	.word	0x20001488
 800bfac:	2000149c 	.word	0x2000149c
 800bfb0:	200014b4 	.word	0x200014b4
 800bfb4:	20001480 	.word	0x20001480
 800bfb8:	20001484 	.word	0x20001484

0800bfbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfc2:	e019      	b.n	800bff8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bfc4:	f000 fc9e 	bl	800c904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfc8:	4b10      	ldr	r3, [pc, #64]	; (800c00c <prvCheckTasksWaitingTermination+0x50>)
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	68db      	ldr	r3, [r3, #12]
 800bfce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	3304      	adds	r3, #4
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7fe fe93 	bl	800ad00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bfda:	4b0d      	ldr	r3, [pc, #52]	; (800c010 <prvCheckTasksWaitingTermination+0x54>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	4a0b      	ldr	r2, [pc, #44]	; (800c010 <prvCheckTasksWaitingTermination+0x54>)
 800bfe2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bfe4:	4b0b      	ldr	r3, [pc, #44]	; (800c014 <prvCheckTasksWaitingTermination+0x58>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	4a0a      	ldr	r2, [pc, #40]	; (800c014 <prvCheckTasksWaitingTermination+0x58>)
 800bfec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bfee:	f000 fc9b 	bl	800c928 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f810 	bl	800c018 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bff8:	4b06      	ldr	r3, [pc, #24]	; (800c014 <prvCheckTasksWaitingTermination+0x58>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1e1      	bne.n	800bfc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c000:	bf00      	nop
 800c002:	bf00      	nop
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	2000149c 	.word	0x2000149c
 800c010:	200014c8 	.word	0x200014c8
 800c014:	200014b0 	.word	0x200014b0

0800c018 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c026:	2b00      	cmp	r3, #0
 800c028:	d108      	bne.n	800c03c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c02e:	4618      	mov	r0, r3
 800c030:	f000 feae 	bl	800cd90 <vPortFree>
				vPortFree( pxTCB );
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 feab 	bl	800cd90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c03a:	e010      	b.n	800c05e <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c042:	2b01      	cmp	r3, #1
 800c044:	d103      	bne.n	800c04e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 fea2 	bl	800cd90 <vPortFree>
	}
 800c04c:	e007      	b.n	800c05e <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c054:	2b02      	cmp	r3, #2
 800c056:	d002      	beq.n	800c05e <prvDeleteTCB+0x46>
 800c058:	f000 fd86 	bl	800cb68 <ulSetInterruptMask>
 800c05c:	e7fe      	b.n	800c05c <prvDeleteTCB+0x44>
	}
 800c05e:	bf00      	nop
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
	...

0800c068 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c06e:	4b0c      	ldr	r3, [pc, #48]	; (800c0a0 <prvResetNextTaskUnblockTime+0x38>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d104      	bne.n	800c082 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c078:	4b0a      	ldr	r3, [pc, #40]	; (800c0a4 <prvResetNextTaskUnblockTime+0x3c>)
 800c07a:	f04f 32ff 	mov.w	r2, #4294967295
 800c07e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c080:	e008      	b.n	800c094 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c082:	4b07      	ldr	r3, [pc, #28]	; (800c0a0 <prvResetNextTaskUnblockTime+0x38>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	4a04      	ldr	r2, [pc, #16]	; (800c0a4 <prvResetNextTaskUnblockTime+0x3c>)
 800c092:	6013      	str	r3, [r2, #0]
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr
 800c0a0:	20001480 	.word	0x20001480
 800c0a4:	200014e8 	.word	0x200014e8

0800c0a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c0ae:	4b0b      	ldr	r3, [pc, #44]	; (800c0dc <xTaskGetSchedulerState+0x34>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d102      	bne.n	800c0bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	607b      	str	r3, [r7, #4]
 800c0ba:	e008      	b.n	800c0ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0bc:	4b08      	ldr	r3, [pc, #32]	; (800c0e0 <xTaskGetSchedulerState+0x38>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d102      	bne.n	800c0ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c0c4:	2302      	movs	r3, #2
 800c0c6:	607b      	str	r3, [r7, #4]
 800c0c8:	e001      	b.n	800c0ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c0ce:	687b      	ldr	r3, [r7, #4]
	}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr
 800c0dc:	200014d4 	.word	0x200014d4
 800c0e0:	200014f0 	.word	0x200014f0

0800c0e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d046      	beq.n	800c188 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c0fa:	4b26      	ldr	r3, [pc, #152]	; (800c194 <xTaskPriorityDisinherit+0xb0>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	429a      	cmp	r2, r3
 800c102:	d002      	beq.n	800c10a <xTaskPriorityDisinherit+0x26>
 800c104:	f000 fd30 	bl	800cb68 <ulSetInterruptMask>
 800c108:	e7fe      	b.n	800c108 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d102      	bne.n	800c118 <xTaskPriorityDisinherit+0x34>
 800c112:	f000 fd29 	bl	800cb68 <ulSetInterruptMask>
 800c116:	e7fe      	b.n	800c116 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c11c:	1e5a      	subs	r2, r3, #1
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d02c      	beq.n	800c188 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c132:	2b00      	cmp	r3, #0
 800c134:	d128      	bne.n	800c188 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	3304      	adds	r3, #4
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fe fde0 	bl	800ad00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c158:	4b0f      	ldr	r3, [pc, #60]	; (800c198 <xTaskPriorityDisinherit+0xb4>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d903      	bls.n	800c168 <xTaskPriorityDisinherit+0x84>
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c164:	4a0c      	ldr	r2, [pc, #48]	; (800c198 <xTaskPriorityDisinherit+0xb4>)
 800c166:	6013      	str	r3, [r2, #0]
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c16c:	4613      	mov	r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	4413      	add	r3, r2
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	4a09      	ldr	r2, [pc, #36]	; (800c19c <xTaskPriorityDisinherit+0xb8>)
 800c176:	441a      	add	r2, r3
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	3304      	adds	r3, #4
 800c17c:	4619      	mov	r1, r3
 800c17e:	4610      	mov	r0, r2
 800c180:	f7fe fd61 	bl	800ac46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c184:	2301      	movs	r3, #1
 800c186:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c188:	68fb      	ldr	r3, [r7, #12]
	}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	20000ff4 	.word	0x20000ff4
 800c198:	200014d0 	.word	0x200014d0
 800c19c:	20000ff8 	.word	0x20000ff8

0800c1a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c1aa:	4b21      	ldr	r3, [pc, #132]	; (800c230 <prvAddCurrentTaskToDelayedList+0x90>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1b0:	4b20      	ldr	r3, [pc, #128]	; (800c234 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	3304      	adds	r3, #4
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fe fda2 	bl	800ad00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c2:	d10a      	bne.n	800c1da <prvAddCurrentTaskToDelayedList+0x3a>
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d007      	beq.n	800c1da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1ca:	4b1a      	ldr	r3, [pc, #104]	; (800c234 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	3304      	adds	r3, #4
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	4819      	ldr	r0, [pc, #100]	; (800c238 <prvAddCurrentTaskToDelayedList+0x98>)
 800c1d4:	f7fe fd37 	bl	800ac46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c1d8:	e026      	b.n	800c228 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4413      	add	r3, r2
 800c1e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c1e2:	4b14      	ldr	r3, [pc, #80]	; (800c234 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c1ea:	68ba      	ldr	r2, [r7, #8]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d209      	bcs.n	800c206 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1f2:	4b12      	ldr	r3, [pc, #72]	; (800c23c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	4b0f      	ldr	r3, [pc, #60]	; (800c234 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	4610      	mov	r0, r2
 800c200:	f7fe fd45 	bl	800ac8e <vListInsert>
}
 800c204:	e010      	b.n	800c228 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c206:	4b0e      	ldr	r3, [pc, #56]	; (800c240 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	4b0a      	ldr	r3, [pc, #40]	; (800c234 <prvAddCurrentTaskToDelayedList+0x94>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	3304      	adds	r3, #4
 800c210:	4619      	mov	r1, r3
 800c212:	4610      	mov	r0, r2
 800c214:	f7fe fd3b 	bl	800ac8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c218:	4b0a      	ldr	r3, [pc, #40]	; (800c244 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68ba      	ldr	r2, [r7, #8]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d202      	bcs.n	800c228 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c222:	4a08      	ldr	r2, [pc, #32]	; (800c244 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	6013      	str	r3, [r2, #0]
}
 800c228:	bf00      	nop
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	200014cc 	.word	0x200014cc
 800c234:	20000ff4 	.word	0x20000ff4
 800c238:	200014b4 	.word	0x200014b4
 800c23c:	20001484 	.word	0x20001484
 800c240:	20001480 	.word	0x20001480
 800c244:	200014e8 	.word	0x200014e8

0800c248 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b088      	sub	sp, #32
 800c24c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c24e:	2300      	movs	r3, #0
 800c250:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c252:	f000 fac7 	bl	800c7e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c256:	4b18      	ldr	r3, [pc, #96]	; (800c2b8 <xTimerCreateTimerTask+0x70>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d020      	beq.n	800c2a0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c25e:	2300      	movs	r3, #0
 800c260:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c262:	2300      	movs	r3, #0
 800c264:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c266:	463a      	mov	r2, r7
 800c268:	1d39      	adds	r1, r7, #4
 800c26a:	f107 0308 	add.w	r3, r7, #8
 800c26e:	4618      	mov	r0, r3
 800c270:	f7fe fca2 	bl	800abb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c274:	6839      	ldr	r1, [r7, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	9202      	str	r2, [sp, #8]
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	2302      	movs	r3, #2
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	2300      	movs	r3, #0
 800c284:	460a      	mov	r2, r1
 800c286:	490d      	ldr	r1, [pc, #52]	; (800c2bc <xTimerCreateTimerTask+0x74>)
 800c288:	480d      	ldr	r0, [pc, #52]	; (800c2c0 <xTimerCreateTimerTask+0x78>)
 800c28a:	f7ff f98f 	bl	800b5ac <xTaskCreateStatic>
 800c28e:	4603      	mov	r3, r0
 800c290:	4a0c      	ldr	r2, [pc, #48]	; (800c2c4 <xTimerCreateTimerTask+0x7c>)
 800c292:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c294:	4b0b      	ldr	r3, [pc, #44]	; (800c2c4 <xTimerCreateTimerTask+0x7c>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d001      	beq.n	800c2a0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800c29c:	2301      	movs	r3, #1
 800c29e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d102      	bne.n	800c2ac <xTimerCreateTimerTask+0x64>
 800c2a6:	f000 fc5f 	bl	800cb68 <ulSetInterruptMask>
 800c2aa:	e7fe      	b.n	800c2aa <xTimerCreateTimerTask+0x62>
	return xReturn;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	20001524 	.word	0x20001524
 800c2bc:	0800dc80 	.word	0x0800dc80
 800c2c0:	0800c3dd 	.word	0x0800c3dd
 800c2c4:	20001528 	.word	0x20001528

0800c2c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b08a      	sub	sp, #40	; 0x28
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
 800c2d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d102      	bne.n	800c2e6 <xTimerGenericCommand+0x1e>
 800c2e0:	f000 fc42 	bl	800cb68 <ulSetInterruptMask>
 800c2e4:	e7fe      	b.n	800c2e4 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c2e6:	4b1a      	ldr	r3, [pc, #104]	; (800c350 <xTimerGenericCommand+0x88>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d02a      	beq.n	800c344 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	2b05      	cmp	r3, #5
 800c2fe:	dc18      	bgt.n	800c332 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c300:	f7ff fed2 	bl	800c0a8 <xTaskGetSchedulerState>
 800c304:	4603      	mov	r3, r0
 800c306:	2b02      	cmp	r3, #2
 800c308:	d109      	bne.n	800c31e <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c30a:	4b11      	ldr	r3, [pc, #68]	; (800c350 <xTimerGenericCommand+0x88>)
 800c30c:	6818      	ldr	r0, [r3, #0]
 800c30e:	f107 0114 	add.w	r1, r7, #20
 800c312:	2300      	movs	r3, #0
 800c314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c316:	f7fe fde8 	bl	800aeea <xQueueGenericSend>
 800c31a:	6278      	str	r0, [r7, #36]	; 0x24
 800c31c:	e012      	b.n	800c344 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c31e:	4b0c      	ldr	r3, [pc, #48]	; (800c350 <xTimerGenericCommand+0x88>)
 800c320:	6818      	ldr	r0, [r3, #0]
 800c322:	f107 0114 	add.w	r1, r7, #20
 800c326:	2300      	movs	r3, #0
 800c328:	2200      	movs	r2, #0
 800c32a:	f7fe fdde 	bl	800aeea <xQueueGenericSend>
 800c32e:	6278      	str	r0, [r7, #36]	; 0x24
 800c330:	e008      	b.n	800c344 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c332:	4b07      	ldr	r3, [pc, #28]	; (800c350 <xTimerGenericCommand+0x88>)
 800c334:	6818      	ldr	r0, [r3, #0]
 800c336:	f107 0114 	add.w	r1, r7, #20
 800c33a:	2300      	movs	r3, #0
 800c33c:	683a      	ldr	r2, [r7, #0]
 800c33e:	f7fe fe9d 	bl	800b07c <xQueueGenericSendFromISR>
 800c342:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c346:	4618      	mov	r0, r3
 800c348:	3728      	adds	r7, #40	; 0x28
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	20001524 	.word	0x20001524

0800c354 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b086      	sub	sp, #24
 800c358:	af02      	add	r7, sp, #8
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c35e:	4b1e      	ldr	r3, [pc, #120]	; (800c3d8 <prvProcessExpiredTimer+0x84>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	3304      	adds	r3, #4
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7fe fcc7 	bl	800ad00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c378:	f003 0304 	and.w	r3, r3, #4
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d01a      	beq.n	800c3b6 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	699a      	ldr	r2, [r3, #24]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	18d1      	adds	r1, r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	683a      	ldr	r2, [r7, #0]
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f000 f8c1 	bl	800c514 <prvInsertTimerInActiveList>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d017      	beq.n	800c3c8 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c398:	2300      	movs	r3, #0
 800c39a:	9300      	str	r3, [sp, #0]
 800c39c:	2300      	movs	r3, #0
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	f7ff ff90 	bl	800c2c8 <xTimerGenericCommand>
 800c3a8:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10b      	bne.n	800c3c8 <prvProcessExpiredTimer+0x74>
 800c3b0:	f000 fbda 	bl	800cb68 <ulSetInterruptMask>
 800c3b4:	e7fe      	b.n	800c3b4 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3bc:	f023 0301 	bic.w	r3, r3, #1
 800c3c0:	b2da      	uxtb	r2, r3
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6a1b      	ldr	r3, [r3, #32]
 800c3cc:	68f8      	ldr	r0, [r7, #12]
 800c3ce:	4798      	blx	r3
}
 800c3d0:	bf00      	nop
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	2000151c 	.word	0x2000151c

0800c3dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3e4:	f107 0308 	add.w	r3, r7, #8
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 f84f 	bl	800c48c <prvGetNextExpireTime>
 800c3ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f000 f803 	bl	800c400 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c3fa:	f000 f8cd 	bl	800c598 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3fe:	e7f1      	b.n	800c3e4 <prvTimerTask+0x8>

0800c400 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c40a:	f7ff fac5 	bl	800b998 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c40e:	f107 0308 	add.w	r3, r7, #8
 800c412:	4618      	mov	r0, r3
 800c414:	f000 f85e 	bl	800c4d4 <prvSampleTimeNow>
 800c418:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d12a      	bne.n	800c476 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d10a      	bne.n	800c43c <prvProcessTimerOrBlockTask+0x3c>
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d806      	bhi.n	800c43c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c42e:	f7ff fac1 	bl	800b9b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c432:	68f9      	ldr	r1, [r7, #12]
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f7ff ff8d 	bl	800c354 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c43a:	e01e      	b.n	800c47a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d008      	beq.n	800c454 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c442:	4b10      	ldr	r3, [pc, #64]	; (800c484 <prvProcessTimerOrBlockTask+0x84>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d101      	bne.n	800c450 <prvProcessTimerOrBlockTask+0x50>
 800c44c:	2301      	movs	r3, #1
 800c44e:	e000      	b.n	800c452 <prvProcessTimerOrBlockTask+0x52>
 800c450:	2300      	movs	r3, #0
 800c452:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c454:	4b0c      	ldr	r3, [pc, #48]	; (800c488 <prvProcessTimerOrBlockTask+0x88>)
 800c456:	6818      	ldr	r0, [r3, #0]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	4619      	mov	r1, r3
 800c462:	f7ff f86f 	bl	800b544 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c466:	f7ff faa5 	bl	800b9b4 <xTaskResumeAll>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d104      	bne.n	800c47a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800c470:	f000 fa36 	bl	800c8e0 <vPortYield>
}
 800c474:	e001      	b.n	800c47a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800c476:	f7ff fa9d 	bl	800b9b4 <xTaskResumeAll>
}
 800c47a:	bf00      	nop
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	20001520 	.word	0x20001520
 800c488:	20001524 	.word	0x20001524

0800c48c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c494:	4b0e      	ldr	r3, [pc, #56]	; (800c4d0 <prvGetNextExpireTime+0x44>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d101      	bne.n	800c4a2 <prvGetNextExpireTime+0x16>
 800c49e:	2201      	movs	r2, #1
 800c4a0:	e000      	b.n	800c4a4 <prvGetNextExpireTime+0x18>
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d105      	bne.n	800c4bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4b0:	4b07      	ldr	r3, [pc, #28]	; (800c4d0 <prvGetNextExpireTime+0x44>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	60fb      	str	r3, [r7, #12]
 800c4ba:	e001      	b.n	800c4c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3714      	adds	r7, #20
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	2000151c 	.word	0x2000151c

0800c4d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c4dc:	f7ff faf8 	bl	800bad0 <xTaskGetTickCount>
 800c4e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c4e2:	4b0b      	ldr	r3, [pc, #44]	; (800c510 <prvSampleTimeNow+0x3c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	68fa      	ldr	r2, [r7, #12]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d205      	bcs.n	800c4f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c4ec:	f000 f91e 	bl	800c72c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	e002      	b.n	800c4fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c4fe:	4a04      	ldr	r2, [pc, #16]	; (800c510 <prvSampleTimeNow+0x3c>)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c504:	68fb      	ldr	r3, [r7, #12]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	2000152c 	.word	0x2000152c

0800c514 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b086      	sub	sp, #24
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
 800c520:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c522:	2300      	movs	r3, #0
 800c524:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c532:	68ba      	ldr	r2, [r7, #8]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	429a      	cmp	r2, r3
 800c538:	d812      	bhi.n	800c560 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	1ad2      	subs	r2, r2, r3
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	699b      	ldr	r3, [r3, #24]
 800c544:	429a      	cmp	r2, r3
 800c546:	d302      	bcc.n	800c54e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c548:	2301      	movs	r3, #1
 800c54a:	617b      	str	r3, [r7, #20]
 800c54c:	e01b      	b.n	800c586 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c54e:	4b10      	ldr	r3, [pc, #64]	; (800c590 <prvInsertTimerInActiveList+0x7c>)
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	3304      	adds	r3, #4
 800c556:	4619      	mov	r1, r3
 800c558:	4610      	mov	r0, r2
 800c55a:	f7fe fb98 	bl	800ac8e <vListInsert>
 800c55e:	e012      	b.n	800c586 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	429a      	cmp	r2, r3
 800c566:	d206      	bcs.n	800c576 <prvInsertTimerInActiveList+0x62>
 800c568:	68ba      	ldr	r2, [r7, #8]
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d302      	bcc.n	800c576 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c570:	2301      	movs	r3, #1
 800c572:	617b      	str	r3, [r7, #20]
 800c574:	e007      	b.n	800c586 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c576:	4b07      	ldr	r3, [pc, #28]	; (800c594 <prvInsertTimerInActiveList+0x80>)
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3304      	adds	r3, #4
 800c57e:	4619      	mov	r1, r3
 800c580:	4610      	mov	r0, r2
 800c582:	f7fe fb84 	bl	800ac8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c586:	697b      	ldr	r3, [r7, #20]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3718      	adds	r7, #24
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	20001520 	.word	0x20001520
 800c594:	2000151c 	.word	0x2000151c

0800c598 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b08c      	sub	sp, #48	; 0x30
 800c59c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c59e:	e0b2      	b.n	800c706 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	da11      	bge.n	800c5ca <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c5a6:	f107 0308 	add.w	r3, r7, #8
 800c5aa:	3304      	adds	r3, #4
 800c5ac:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d102      	bne.n	800c5ba <prvProcessReceivedCommands+0x22>
 800c5b4:	f000 fad8 	bl	800cb68 <ulSetInterruptMask>
 800c5b8:	e7fe      	b.n	800c5b8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5c0:	6850      	ldr	r0, [r2, #4]
 800c5c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5c4:	6892      	ldr	r2, [r2, #8]
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f2c0 809a 	blt.w	800c706 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c5d6:	6a3b      	ldr	r3, [r7, #32]
 800c5d8:	695b      	ldr	r3, [r3, #20]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d004      	beq.n	800c5e8 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5de:	6a3b      	ldr	r3, [r7, #32]
 800c5e0:	3304      	adds	r3, #4
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fe fb8c 	bl	800ad00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5e8:	1d3b      	adds	r3, r7, #4
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7ff ff72 	bl	800c4d4 <prvSampleTimeNow>
 800c5f0:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	2b09      	cmp	r3, #9
 800c5f6:	f200 8085 	bhi.w	800c704 <prvProcessReceivedCommands+0x16c>
 800c5fa:	a201      	add	r2, pc, #4	; (adr r2, 800c600 <prvProcessReceivedCommands+0x68>)
 800c5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c600:	0800c629 	.word	0x0800c629
 800c604:	0800c629 	.word	0x0800c629
 800c608:	0800c629 	.word	0x0800c629
 800c60c:	0800c68d 	.word	0x0800c68d
 800c610:	0800c6a1 	.word	0x0800c6a1
 800c614:	0800c6db 	.word	0x0800c6db
 800c618:	0800c629 	.word	0x0800c629
 800c61c:	0800c629 	.word	0x0800c629
 800c620:	0800c68d 	.word	0x0800c68d
 800c624:	0800c6a1 	.word	0x0800c6a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c628:	6a3b      	ldr	r3, [r7, #32]
 800c62a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c62e:	f043 0301 	orr.w	r3, r3, #1
 800c632:	b2da      	uxtb	r2, r3
 800c634:	6a3b      	ldr	r3, [r7, #32]
 800c636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	6a3b      	ldr	r3, [r7, #32]
 800c63e:	699b      	ldr	r3, [r3, #24]
 800c640:	18d1      	adds	r1, r2, r3
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	69fa      	ldr	r2, [r7, #28]
 800c646:	6a38      	ldr	r0, [r7, #32]
 800c648:	f7ff ff64 	bl	800c514 <prvInsertTimerInActiveList>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d059      	beq.n	800c706 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c652:	6a3b      	ldr	r3, [r7, #32]
 800c654:	6a1b      	ldr	r3, [r3, #32]
 800c656:	6a38      	ldr	r0, [r7, #32]
 800c658:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c65a:	6a3b      	ldr	r3, [r7, #32]
 800c65c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c660:	f003 0304 	and.w	r3, r3, #4
 800c664:	2b00      	cmp	r3, #0
 800c666:	d04e      	beq.n	800c706 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	6a3b      	ldr	r3, [r7, #32]
 800c66c:	699b      	ldr	r3, [r3, #24]
 800c66e:	441a      	add	r2, r3
 800c670:	2300      	movs	r3, #0
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	2300      	movs	r3, #0
 800c676:	2100      	movs	r1, #0
 800c678:	6a38      	ldr	r0, [r7, #32]
 800c67a:	f7ff fe25 	bl	800c2c8 <xTimerGenericCommand>
 800c67e:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d13f      	bne.n	800c706 <prvProcessReceivedCommands+0x16e>
 800c686:	f000 fa6f 	bl	800cb68 <ulSetInterruptMask>
 800c68a:	e7fe      	b.n	800c68a <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c68c:	6a3b      	ldr	r3, [r7, #32]
 800c68e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c692:	f023 0301 	bic.w	r3, r3, #1
 800c696:	b2da      	uxtb	r2, r3
 800c698:	6a3b      	ldr	r3, [r7, #32]
 800c69a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c69e:	e032      	b.n	800c706 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6a0:	6a3b      	ldr	r3, [r7, #32]
 800c6a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6a6:	f043 0301 	orr.w	r3, r3, #1
 800c6aa:	b2da      	uxtb	r2, r3
 800c6ac:	6a3b      	ldr	r3, [r7, #32]
 800c6ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c6b2:	68fa      	ldr	r2, [r7, #12]
 800c6b4:	6a3b      	ldr	r3, [r7, #32]
 800c6b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c6b8:	6a3b      	ldr	r3, [r7, #32]
 800c6ba:	699b      	ldr	r3, [r3, #24]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d102      	bne.n	800c6c6 <prvProcessReceivedCommands+0x12e>
 800c6c0:	f000 fa52 	bl	800cb68 <ulSetInterruptMask>
 800c6c4:	e7fe      	b.n	800c6c4 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c6c6:	6a3b      	ldr	r3, [r7, #32]
 800c6c8:	699a      	ldr	r2, [r3, #24]
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	18d1      	adds	r1, r2, r3
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	69fa      	ldr	r2, [r7, #28]
 800c6d2:	6a38      	ldr	r0, [r7, #32]
 800c6d4:	f7ff ff1e 	bl	800c514 <prvInsertTimerInActiveList>
					break;
 800c6d8:	e015      	b.n	800c706 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c6da:	6a3b      	ldr	r3, [r7, #32]
 800c6dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6e0:	f003 0302 	and.w	r3, r3, #2
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d103      	bne.n	800c6f0 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800c6e8:	6a38      	ldr	r0, [r7, #32]
 800c6ea:	f000 fb51 	bl	800cd90 <vPortFree>
 800c6ee:	e00a      	b.n	800c706 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6f0:	6a3b      	ldr	r3, [r7, #32]
 800c6f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6f6:	f023 0301 	bic.w	r3, r3, #1
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	6a3b      	ldr	r3, [r7, #32]
 800c6fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c702:	e000      	b.n	800c706 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800c704:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c706:	4b08      	ldr	r3, [pc, #32]	; (800c728 <prvProcessReceivedCommands+0x190>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f107 0108 	add.w	r1, r7, #8
 800c70e:	2200      	movs	r2, #0
 800c710:	4618      	mov	r0, r3
 800c712:	f7fe fd24 	bl	800b15e <xQueueReceive>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	f47f af41 	bne.w	800c5a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c71e:	bf00      	nop
 800c720:	bf00      	nop
 800c722:	3728      	adds	r7, #40	; 0x28
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}
 800c728:	20001524 	.word	0x20001524

0800c72c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b088      	sub	sp, #32
 800c730:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c732:	e040      	b.n	800c7b6 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c734:	4b29      	ldr	r3, [pc, #164]	; (800c7dc <prvSwitchTimerLists+0xb0>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c73e:	4b27      	ldr	r3, [pc, #156]	; (800c7dc <prvSwitchTimerLists+0xb0>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68db      	ldr	r3, [r3, #12]
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	3304      	adds	r3, #4
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7fe fad7 	bl	800ad00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	6a1b      	ldr	r3, [r3, #32]
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c760:	f003 0304 	and.w	r3, r3, #4
 800c764:	2b00      	cmp	r3, #0
 800c766:	d026      	beq.n	800c7b6 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	699b      	ldr	r3, [r3, #24]
 800c76c:	693a      	ldr	r2, [r7, #16]
 800c76e:	4413      	add	r3, r2
 800c770:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c772:	68ba      	ldr	r2, [r7, #8]
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	429a      	cmp	r2, r3
 800c778:	d90e      	bls.n	800c798 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	68fa      	ldr	r2, [r7, #12]
 800c784:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c786:	4b15      	ldr	r3, [pc, #84]	; (800c7dc <prvSwitchTimerLists+0xb0>)
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	3304      	adds	r3, #4
 800c78e:	4619      	mov	r1, r3
 800c790:	4610      	mov	r0, r2
 800c792:	f7fe fa7c 	bl	800ac8e <vListInsert>
 800c796:	e00e      	b.n	800c7b6 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c798:	2300      	movs	r3, #0
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	2300      	movs	r3, #0
 800c79e:	693a      	ldr	r2, [r7, #16]
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	f7ff fd90 	bl	800c2c8 <xTimerGenericCommand>
 800c7a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d102      	bne.n	800c7b6 <prvSwitchTimerLists+0x8a>
 800c7b0:	f000 f9da 	bl	800cb68 <ulSetInterruptMask>
 800c7b4:	e7fe      	b.n	800c7b4 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7b6:	4b09      	ldr	r3, [pc, #36]	; (800c7dc <prvSwitchTimerLists+0xb0>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1b9      	bne.n	800c734 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c7c0:	4b06      	ldr	r3, [pc, #24]	; (800c7dc <prvSwitchTimerLists+0xb0>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c7c6:	4b06      	ldr	r3, [pc, #24]	; (800c7e0 <prvSwitchTimerLists+0xb4>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a04      	ldr	r2, [pc, #16]	; (800c7dc <prvSwitchTimerLists+0xb0>)
 800c7cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c7ce:	4a04      	ldr	r2, [pc, #16]	; (800c7e0 <prvSwitchTimerLists+0xb4>)
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	6013      	str	r3, [r2, #0]
}
 800c7d4:	bf00      	nop
 800c7d6:	3718      	adds	r7, #24
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	2000151c 	.word	0x2000151c
 800c7e0:	20001520 	.word	0x20001520

0800c7e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c7ea:	f000 f88b 	bl	800c904 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c7ee:	4b15      	ldr	r3, [pc, #84]	; (800c844 <prvCheckForValidListAndQueue+0x60>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d120      	bne.n	800c838 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c7f6:	4814      	ldr	r0, [pc, #80]	; (800c848 <prvCheckForValidListAndQueue+0x64>)
 800c7f8:	f7fe f9f8 	bl	800abec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c7fc:	4813      	ldr	r0, [pc, #76]	; (800c84c <prvCheckForValidListAndQueue+0x68>)
 800c7fe:	f7fe f9f5 	bl	800abec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c802:	4b13      	ldr	r3, [pc, #76]	; (800c850 <prvCheckForValidListAndQueue+0x6c>)
 800c804:	4a10      	ldr	r2, [pc, #64]	; (800c848 <prvCheckForValidListAndQueue+0x64>)
 800c806:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c808:	4b12      	ldr	r3, [pc, #72]	; (800c854 <prvCheckForValidListAndQueue+0x70>)
 800c80a:	4a10      	ldr	r2, [pc, #64]	; (800c84c <prvCheckForValidListAndQueue+0x68>)
 800c80c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c80e:	2300      	movs	r3, #0
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	4b11      	ldr	r3, [pc, #68]	; (800c858 <prvCheckForValidListAndQueue+0x74>)
 800c814:	4a11      	ldr	r2, [pc, #68]	; (800c85c <prvCheckForValidListAndQueue+0x78>)
 800c816:	2110      	movs	r1, #16
 800c818:	200a      	movs	r0, #10
 800c81a:	f7fe faf3 	bl	800ae04 <xQueueGenericCreateStatic>
 800c81e:	4603      	mov	r3, r0
 800c820:	4a08      	ldr	r2, [pc, #32]	; (800c844 <prvCheckForValidListAndQueue+0x60>)
 800c822:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c824:	4b07      	ldr	r3, [pc, #28]	; (800c844 <prvCheckForValidListAndQueue+0x60>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d005      	beq.n	800c838 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c82c:	4b05      	ldr	r3, [pc, #20]	; (800c844 <prvCheckForValidListAndQueue+0x60>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	490b      	ldr	r1, [pc, #44]	; (800c860 <prvCheckForValidListAndQueue+0x7c>)
 800c832:	4618      	mov	r0, r3
 800c834:	f7fe fe5c 	bl	800b4f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c838:	f000 f876 	bl	800c928 <vPortExitCritical>
}
 800c83c:	bf00      	nop
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	20001524 	.word	0x20001524
 800c848:	200014f4 	.word	0x200014f4
 800c84c:	20001508 	.word	0x20001508
 800c850:	2000151c 	.word	0x2000151c
 800c854:	20001520 	.word	0x20001520
 800c858:	200015d0 	.word	0x200015d0
 800c85c:	20001530 	.word	0x20001530
 800c860:	0800dc88 	.word	0x0800dc88

0800c864 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800c864:	b480      	push	{r7}
 800c866:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c868:	4b0b      	ldr	r3, [pc, #44]	; (800c898 <vPortSetupTimerInterrupt+0x34>)
 800c86a:	2200      	movs	r2, #0
 800c86c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c86e:	4b0b      	ldr	r3, [pc, #44]	; (800c89c <vPortSetupTimerInterrupt+0x38>)
 800c870:	2200      	movs	r2, #0
 800c872:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c874:	4b0a      	ldr	r3, [pc, #40]	; (800c8a0 <vPortSetupTimerInterrupt+0x3c>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a0a      	ldr	r2, [pc, #40]	; (800c8a4 <vPortSetupTimerInterrupt+0x40>)
 800c87a:	fba2 2303 	umull	r2, r3, r2, r3
 800c87e:	099b      	lsrs	r3, r3, #6
 800c880:	4a09      	ldr	r2, [pc, #36]	; (800c8a8 <vPortSetupTimerInterrupt+0x44>)
 800c882:	3b01      	subs	r3, #1
 800c884:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800c886:	4b04      	ldr	r3, [pc, #16]	; (800c898 <vPortSetupTimerInterrupt+0x34>)
 800c888:	2207      	movs	r2, #7
 800c88a:	601a      	str	r2, [r3, #0]
}
 800c88c:	bf00      	nop
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop
 800c898:	e000e010 	.word	0xe000e010
 800c89c:	e000e018 	.word	0xe000e018
 800c8a0:	20000004 	.word	0x20000004
 800c8a4:	10624dd3 	.word	0x10624dd3
 800c8a8:	e000e014 	.word	0xe000e014

0800c8ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 800c8b6:	4b09      	ldr	r3, [pc, #36]	; (800c8dc <prvTaskExitError+0x30>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8be:	d002      	beq.n	800c8c6 <prvTaskExitError+0x1a>
 800c8c0:	f000 f952 	bl	800cb68 <ulSetInterruptMask>
 800c8c4:	e7fe      	b.n	800c8c4 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 800c8c6:	f000 f94f 	bl	800cb68 <ulSetInterruptMask>

	while( ulDummy == 0 )
 800c8ca:	bf00      	nop
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d0fc      	beq.n	800c8cc <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 800c8d2:	bf00      	nop
 800c8d4:	bf00      	nop
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	20000010 	.word	0x20000010

0800c8e0 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c8e4:	4b06      	ldr	r3, [pc, #24]	; (800c900 <vPortYield+0x20>)
 800c8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800c8ec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c8f0:	f3bf 8f6f 	isb	sy
}
 800c8f4:	bf00      	nop
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop
 800c900:	e000ed04 	.word	0xe000ed04

0800c904 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800c904:	b580      	push	{r7, lr}
 800c906:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800c908:	f000 f92e 	bl	800cb68 <ulSetInterruptMask>
	ulCriticalNesting++;
 800c90c:	4b05      	ldr	r3, [pc, #20]	; (800c924 <vPortEnterCritical+0x20>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	3301      	adds	r3, #1
 800c912:	4a04      	ldr	r2, [pc, #16]	; (800c924 <vPortEnterCritical+0x20>)
 800c914:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800c916:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c91a:	f3bf 8f6f 	isb	sy
}
 800c91e:	bf00      	nop
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	20000010 	.word	0x20000010

0800c928 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 800c92c:	4b0a      	ldr	r3, [pc, #40]	; (800c958 <vPortExitCritical+0x30>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d102      	bne.n	800c93a <vPortExitCritical+0x12>
 800c934:	f000 f918 	bl	800cb68 <ulSetInterruptMask>
 800c938:	e7fe      	b.n	800c938 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 800c93a:	4b07      	ldr	r3, [pc, #28]	; (800c958 <vPortExitCritical+0x30>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	3b01      	subs	r3, #1
 800c940:	4a05      	ldr	r2, [pc, #20]	; (800c958 <vPortExitCritical+0x30>)
 800c942:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 800c944:	4b04      	ldr	r3, [pc, #16]	; (800c958 <vPortExitCritical+0x30>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d102      	bne.n	800c952 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 800c94c:	2000      	movs	r0, #0
 800c94e:	f000 f918 	bl	800cb82 <vClearInterruptMask>
	}
}
 800c952:	bf00      	nop
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	20000010 	.word	0x20000010

0800c95c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800c962:	f000 f901 	bl	800cb68 <ulSetInterruptMask>
 800c966:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c968:	f7ff f8c2 	bl	800baf0 <xTaskIncrementTick>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d003      	beq.n	800c97a <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c972:	4b05      	ldr	r3, [pc, #20]	; (800c988 <xPortSysTickHandler+0x2c>)
 800c974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c978:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 f901 	bl	800cb82 <vClearInterruptMask>
}
 800c980:	bf00      	nop
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	e000ed04 	.word	0xe000ed04

0800c98c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	699b      	ldr	r3, [r3, #24]
 800c998:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	3b02      	subs	r3, #2
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 800c9a2:	7afb      	ldrb	r3, [r7, #11]
 800c9a4:	2b02      	cmp	r3, #2
 800c9a6:	d102      	bne.n	800c9ae <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 800c9a8:	f000 f8b2 	bl	800cb10 <vRestoreContextOfFirstTask>
		}
		break;
 800c9ac:	e002      	b.n	800c9b4 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 800c9ae:	f000 f8db 	bl	800cb68 <ulSetInterruptMask>
 800c9b2:	e7fe      	b.n	800c9b2 <vPortSVCHandler_C+0x26>
		}
	}
}
 800c9b4:	bf00      	nop
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	607a      	str	r2, [r7, #4]
 800c9c8:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	3b04      	subs	r3, #4
 800c9ce:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c9d6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	3b04      	subs	r3, #4
 800c9dc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	3b04      	subs	r3, #4
 800c9e8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c9ea:	4a38      	ldr	r2, [pc, #224]	; (800cacc <pxPortInitialiseStack+0x110>)
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	3b04      	subs	r3, #4
 800c9f4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800c9fc:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	3b04      	subs	r3, #4
 800ca02:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800ca0a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	3b04      	subs	r3, #4
 800ca10:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800ca18:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	3b04      	subs	r3, #4
 800ca1e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800ca26:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	3b04      	subs	r3, #4
 800ca2c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 800ca2e:	683a      	ldr	r2, [r7, #0]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	3b04      	subs	r3, #4
 800ca38:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800ca40:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	3b04      	subs	r3, #4
 800ca46:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800ca4e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	3b04      	subs	r3, #4
 800ca54:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800ca5c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3b04      	subs	r3, #4
 800ca62:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800ca6a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	3b04      	subs	r3, #4
 800ca70:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800ca78:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	3b04      	subs	r3, #4
 800ca7e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800ca86:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	3b04      	subs	r3, #4
 800ca8c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800ca94:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	3b04      	subs	r3, #4
 800ca9a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800caa2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	3b04      	subs	r3, #4
 800caa8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800cab0:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	3b04      	subs	r3, #4
 800cab6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 800cab8:	68ba      	ldr	r2, [r7, #8]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 800cabe:	68fb      	ldr	r3, [r7, #12]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr
 800cacc:	0800c8ad 	.word	0x0800c8ad

0800cad0 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cad4:	4b0c      	ldr	r3, [pc, #48]	; (800cb08 <xPortStartScheduler+0x38>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a0b      	ldr	r2, [pc, #44]	; (800cb08 <xPortStartScheduler+0x38>)
 800cada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cade:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cae0:	4b09      	ldr	r3, [pc, #36]	; (800cb08 <xPortStartScheduler+0x38>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a08      	ldr	r2, [pc, #32]	; (800cb08 <xPortStartScheduler+0x38>)
 800cae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800caea:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 800caec:	f7ff feba 	bl	800c864 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 800caf0:	4b06      	ldr	r3, [pc, #24]	; (800cb0c <xPortStartScheduler+0x3c>)
 800caf2:	2200      	movs	r2, #0
 800caf4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 800caf6:	f000 f823 	bl	800cb40 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 800cafa:	f7ff f8ab 	bl	800bc54 <vTaskSwitchContext>
	prvTaskExitError();
 800cafe:	f7ff fed5 	bl	800c8ac <prvTaskExitError>

	/* Should not get here. */
	return 0;
 800cb02:	2300      	movs	r3, #0
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	e000ed20 	.word	0xe000ed20
 800cb0c:	20000010 	.word	0x20000010

0800cb10 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800cb10:	4a07      	ldr	r2, [pc, #28]	; (800cb30 <pxCurrentTCBConst2>)
 800cb12:	6811      	ldr	r1, [r2, #0]
 800cb14:	6808      	ldr	r0, [r1, #0]
 800cb16:	c806      	ldmia	r0!, {r1, r2}
 800cb18:	f381 880b 	msr	PSPLIM, r1
 800cb1c:	2102      	movs	r1, #2
 800cb1e:	f381 8814 	msr	CONTROL, r1
 800cb22:	3020      	adds	r0, #32
 800cb24:	f380 8809 	msr	PSP, r0
 800cb28:	f3bf 8f6f 	isb	sy
 800cb2c:	4710      	bx	r2
 800cb2e:	bf00      	nop

0800cb30 <pxCurrentTCBConst2>:
 800cb30:	20000ff4 	.word	0x20000ff4
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 800cb34:	bf00      	nop
 800cb36:	bf00      	nop
	...

0800cb40 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800cb40:	4807      	ldr	r0, [pc, #28]	; (800cb60 <xVTORConst>)
 800cb42:	6800      	ldr	r0, [r0, #0]
 800cb44:	6800      	ldr	r0, [r0, #0]
 800cb46:	f380 8808 	msr	MSP, r0
 800cb4a:	b662      	cpsie	i
 800cb4c:	b661      	cpsie	f
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	f3bf 8f6f 	isb	sy
 800cb56:	df02      	svc	2
 800cb58:	bf00      	nop
 800cb5a:	bf00      	nop
 800cb5c:	f3af 8000 	nop.w

0800cb60 <xVTORConst>:
 800cb60:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 800cb64:	bf00      	nop
 800cb66:	bf00      	nop

0800cb68 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800cb68:	f3ef 8011 	mrs	r0, BASEPRI
 800cb6c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 800cb70:	f381 8811 	msr	BASEPRI, r1
 800cb74:	f3bf 8f4f 	dsb	sy
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cb7e:	bf00      	nop
 800cb80:	4618      	mov	r0, r3

0800cb82 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800cb82:	f380 8811 	msr	BASEPRI, r0
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	f3bf 8f6f 	isb	sy
 800cb8e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 800cb90:	bf00      	nop
	...

0800cba0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800cba0:	f3ef 8009 	mrs	r0, PSP
 800cba4:	f3ef 820b 	mrs	r2, PSPLIM
 800cba8:	4673      	mov	r3, lr
 800cbaa:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800cbae:	4a10      	ldr	r2, [pc, #64]	; (800cbf0 <pxCurrentTCBConst>)
 800cbb0:	6811      	ldr	r1, [r2, #0]
 800cbb2:	6008      	str	r0, [r1, #0]
 800cbb4:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800cbb8:	f380 8811 	msr	BASEPRI, r0
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	f3bf 8f6f 	isb	sy
 800cbc4:	f7ff f846 	bl	800bc54 <vTaskSwitchContext>
 800cbc8:	f04f 0000 	mov.w	r0, #0
 800cbcc:	f380 8811 	msr	BASEPRI, r0
 800cbd0:	4a07      	ldr	r2, [pc, #28]	; (800cbf0 <pxCurrentTCBConst>)
 800cbd2:	6811      	ldr	r1, [r2, #0]
 800cbd4:	6808      	ldr	r0, [r1, #0]
 800cbd6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800cbda:	f382 880b 	msr	PSPLIM, r2
 800cbde:	f380 8809 	msr	PSP, r0
 800cbe2:	4718      	bx	r3
 800cbe4:	f3af 8000 	nop.w
 800cbe8:	f3af 8000 	nop.w
 800cbec:	f3af 8000 	nop.w

0800cbf0 <pxCurrentTCBConst>:
 800cbf0:	20000ff4 	.word	0x20000ff4
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800cbf4:	bf00      	nop
 800cbf6:	bf00      	nop
	...

0800cc00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800cc00:	f01e 0f04 	tst.w	lr, #4
 800cc04:	bf0c      	ite	eq
 800cc06:	f3ef 8008 	mrseq	r0, MSP
 800cc0a:	f3ef 8009 	mrsne	r0, PSP
 800cc0e:	4904      	ldr	r1, [pc, #16]	; (800cc20 <svchandler_address_const>)
 800cc10:	4708      	bx	r1
 800cc12:	bf00      	nop
 800cc14:	f3af 8000 	nop.w
 800cc18:	f3af 8000 	nop.w
 800cc1c:	f3af 8000 	nop.w

0800cc20 <svchandler_address_const>:
 800cc20:	0800c98d 	.word	0x0800c98d
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 800cc24:	bf00      	nop
 800cc26:	bf00      	nop

0800cc28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b086      	sub	sp, #24
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cc30:	2300      	movs	r3, #0
 800cc32:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800cc34:	f7fe feb0 	bl	800b998 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cc38:	4b4f      	ldr	r3, [pc, #316]	; (800cd78 <pvPortMalloc+0x150>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d101      	bne.n	800cc44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cc40:	f000 f8f8 	bl	800ce34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cc44:	4b4d      	ldr	r3, [pc, #308]	; (800cd7c <pvPortMalloc+0x154>)
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4013      	ands	r3, r2
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f040 8083 	bne.w	800cd58 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d015      	beq.n	800cc84 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800cc58:	2208      	movs	r2, #8
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f003 0307 	and.w	r3, r3, #7
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00c      	beq.n	800cc84 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f023 0307 	bic.w	r3, r3, #7
 800cc70:	3308      	adds	r3, #8
 800cc72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f003 0307 	and.w	r3, r3, #7
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d002      	beq.n	800cc84 <pvPortMalloc+0x5c>
 800cc7e:	f7ff ff73 	bl	800cb68 <ulSetInterruptMask>
 800cc82:	e7fe      	b.n	800cc82 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d066      	beq.n	800cd58 <pvPortMalloc+0x130>
 800cc8a:	4b3d      	ldr	r3, [pc, #244]	; (800cd80 <pvPortMalloc+0x158>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d861      	bhi.n	800cd58 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc94:	4b3b      	ldr	r3, [pc, #236]	; (800cd84 <pvPortMalloc+0x15c>)
 800cc96:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800cc98:	4b3a      	ldr	r3, [pc, #232]	; (800cd84 <pvPortMalloc+0x15c>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc9e:	e004      	b.n	800ccaa <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d903      	bls.n	800ccbc <pvPortMalloc+0x94>
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1f1      	bne.n	800cca0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ccbc:	4b2e      	ldr	r3, [pc, #184]	; (800cd78 <pvPortMalloc+0x150>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	697a      	ldr	r2, [r7, #20]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d048      	beq.n	800cd58 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2208      	movs	r2, #8
 800cccc:	4413      	add	r3, r2
 800ccce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	681a      	ldr	r2, [r3, #0]
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	685a      	ldr	r2, [r3, #4]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	1ad2      	subs	r2, r2, r3
 800cce0:	2308      	movs	r3, #8
 800cce2:	005b      	lsls	r3, r3, #1
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d917      	bls.n	800cd18 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cce8:	697a      	ldr	r2, [r7, #20]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4413      	add	r3, r2
 800ccee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	f003 0307 	and.w	r3, r3, #7
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d002      	beq.n	800cd00 <pvPortMalloc+0xd8>
 800ccfa:	f7ff ff35 	bl	800cb68 <ulSetInterruptMask>
 800ccfe:	e7fe      	b.n	800ccfe <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	685a      	ldr	r2, [r3, #4]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	1ad2      	subs	r2, r2, r3
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd12:	68b8      	ldr	r0, [r7, #8]
 800cd14:	f000 f8f0 	bl	800cef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd18:	4b19      	ldr	r3, [pc, #100]	; (800cd80 <pvPortMalloc+0x158>)
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	1ad3      	subs	r3, r2, r3
 800cd22:	4a17      	ldr	r2, [pc, #92]	; (800cd80 <pvPortMalloc+0x158>)
 800cd24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd26:	4b16      	ldr	r3, [pc, #88]	; (800cd80 <pvPortMalloc+0x158>)
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	4b17      	ldr	r3, [pc, #92]	; (800cd88 <pvPortMalloc+0x160>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d203      	bcs.n	800cd3a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd32:	4b13      	ldr	r3, [pc, #76]	; (800cd80 <pvPortMalloc+0x158>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a14      	ldr	r2, [pc, #80]	; (800cd88 <pvPortMalloc+0x160>)
 800cd38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	685a      	ldr	r2, [r3, #4]
 800cd3e:	4b0f      	ldr	r3, [pc, #60]	; (800cd7c <pvPortMalloc+0x154>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	431a      	orrs	r2, r3
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cd4e:	4b0f      	ldr	r3, [pc, #60]	; (800cd8c <pvPortMalloc+0x164>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	3301      	adds	r3, #1
 800cd54:	4a0d      	ldr	r2, [pc, #52]	; (800cd8c <pvPortMalloc+0x164>)
 800cd56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd58:	f7fe fe2c 	bl	800b9b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f003 0307 	and.w	r3, r3, #7
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d002      	beq.n	800cd6c <pvPortMalloc+0x144>
 800cd66:	f7ff feff 	bl	800cb68 <ulSetInterruptMask>
 800cd6a:	e7fe      	b.n	800cd6a <pvPortMalloc+0x142>
	return pvReturn;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3718      	adds	r7, #24
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	20003628 	.word	0x20003628
 800cd7c:	2000363c 	.word	0x2000363c
 800cd80:	2000362c 	.word	0x2000362c
 800cd84:	20003620 	.word	0x20003620
 800cd88:	20003630 	.word	0x20003630
 800cd8c:	20003634 	.word	0x20003634

0800cd90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d03d      	beq.n	800ce1e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cda2:	2308      	movs	r3, #8
 800cda4:	425b      	negs	r3, r3
 800cda6:	68fa      	ldr	r2, [r7, #12]
 800cda8:	4413      	add	r3, r2
 800cdaa:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	685a      	ldr	r2, [r3, #4]
 800cdb4:	4b1c      	ldr	r3, [pc, #112]	; (800ce28 <vPortFree+0x98>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4013      	ands	r3, r2
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d102      	bne.n	800cdc4 <vPortFree+0x34>
 800cdbe:	f7ff fed3 	bl	800cb68 <ulSetInterruptMask>
 800cdc2:	e7fe      	b.n	800cdc2 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d002      	beq.n	800cdd2 <vPortFree+0x42>
 800cdcc:	f7ff fecc 	bl	800cb68 <ulSetInterruptMask>
 800cdd0:	e7fe      	b.n	800cdd0 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	685a      	ldr	r2, [r3, #4]
 800cdd6:	4b14      	ldr	r3, [pc, #80]	; (800ce28 <vPortFree+0x98>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4013      	ands	r3, r2
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d01e      	beq.n	800ce1e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d11a      	bne.n	800ce1e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	685a      	ldr	r2, [r3, #4]
 800cdec:	4b0e      	ldr	r3, [pc, #56]	; (800ce28 <vPortFree+0x98>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	43db      	mvns	r3, r3
 800cdf2:	401a      	ands	r2, r3
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cdf8:	f7fe fdce 	bl	800b998 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	685a      	ldr	r2, [r3, #4]
 800ce00:	4b0a      	ldr	r3, [pc, #40]	; (800ce2c <vPortFree+0x9c>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4413      	add	r3, r2
 800ce06:	4a09      	ldr	r2, [pc, #36]	; (800ce2c <vPortFree+0x9c>)
 800ce08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce0a:	68b8      	ldr	r0, [r7, #8]
 800ce0c:	f000 f874 	bl	800cef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce10:	4b07      	ldr	r3, [pc, #28]	; (800ce30 <vPortFree+0xa0>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	3301      	adds	r3, #1
 800ce16:	4a06      	ldr	r2, [pc, #24]	; (800ce30 <vPortFree+0xa0>)
 800ce18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ce1a:	f7fe fdcb 	bl	800b9b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce1e:	bf00      	nop
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	2000363c 	.word	0x2000363c
 800ce2c:	2000362c 	.word	0x2000362c
 800ce30:	20003638 	.word	0x20003638

0800ce34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce34:	b480      	push	{r7}
 800ce36:	b085      	sub	sp, #20
 800ce38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce40:	4b27      	ldr	r3, [pc, #156]	; (800cee0 <prvHeapInit+0xac>)
 800ce42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f003 0307 	and.w	r3, r3, #7
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00c      	beq.n	800ce68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	3307      	adds	r3, #7
 800ce52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f023 0307 	bic.w	r3, r3, #7
 800ce5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	1ad3      	subs	r3, r2, r3
 800ce62:	4a1f      	ldr	r2, [pc, #124]	; (800cee0 <prvHeapInit+0xac>)
 800ce64:	4413      	add	r3, r2
 800ce66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce6c:	4a1d      	ldr	r2, [pc, #116]	; (800cee4 <prvHeapInit+0xb0>)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce72:	4b1c      	ldr	r3, [pc, #112]	; (800cee4 <prvHeapInit+0xb0>)
 800ce74:	2200      	movs	r2, #0
 800ce76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	68ba      	ldr	r2, [r7, #8]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce80:	2208      	movs	r2, #8
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	1a9b      	subs	r3, r3, r2
 800ce86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f023 0307 	bic.w	r3, r3, #7
 800ce8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	4a15      	ldr	r2, [pc, #84]	; (800cee8 <prvHeapInit+0xb4>)
 800ce94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce96:	4b14      	ldr	r3, [pc, #80]	; (800cee8 <prvHeapInit+0xb4>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce9e:	4b12      	ldr	r3, [pc, #72]	; (800cee8 <prvHeapInit+0xb4>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	2200      	movs	r2, #0
 800cea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	1ad2      	subs	r2, r2, r3
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ceb4:	4b0c      	ldr	r3, [pc, #48]	; (800cee8 <prvHeapInit+0xb4>)
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	4a0a      	ldr	r2, [pc, #40]	; (800ceec <prvHeapInit+0xb8>)
 800cec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	4a09      	ldr	r2, [pc, #36]	; (800cef0 <prvHeapInit+0xbc>)
 800ceca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cecc:	4b09      	ldr	r3, [pc, #36]	; (800cef4 <prvHeapInit+0xc0>)
 800cece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ced2:	601a      	str	r2, [r3, #0]
}
 800ced4:	bf00      	nop
 800ced6:	3714      	adds	r7, #20
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	20001620 	.word	0x20001620
 800cee4:	20003620 	.word	0x20003620
 800cee8:	20003628 	.word	0x20003628
 800ceec:	20003630 	.word	0x20003630
 800cef0:	2000362c 	.word	0x2000362c
 800cef4:	2000363c 	.word	0x2000363c

0800cef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cef8:	b480      	push	{r7}
 800cefa:	b085      	sub	sp, #20
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf00:	4b28      	ldr	r3, [pc, #160]	; (800cfa4 <prvInsertBlockIntoFreeList+0xac>)
 800cf02:	60fb      	str	r3, [r7, #12]
 800cf04:	e002      	b.n	800cf0c <prvInsertBlockIntoFreeList+0x14>
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	60fb      	str	r3, [r7, #12]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d8f7      	bhi.n	800cf06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	4413      	add	r3, r2
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d108      	bne.n	800cf3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	441a      	add	r2, r3
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	68ba      	ldr	r2, [r7, #8]
 800cf44:	441a      	add	r2, r3
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d118      	bne.n	800cf80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	4b15      	ldr	r3, [pc, #84]	; (800cfa8 <prvInsertBlockIntoFreeList+0xb0>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d00d      	beq.n	800cf76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	685a      	ldr	r2, [r3, #4]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	441a      	add	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	601a      	str	r2, [r3, #0]
 800cf74:	e008      	b.n	800cf88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf76:	4b0c      	ldr	r3, [pc, #48]	; (800cfa8 <prvInsertBlockIntoFreeList+0xb0>)
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	e003      	b.n	800cf88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d002      	beq.n	800cf96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf96:	bf00      	nop
 800cf98:	3714      	adds	r7, #20
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr
 800cfa2:	bf00      	nop
 800cfa4:	20003620 	.word	0x20003620
 800cfa8:	20003628 	.word	0x20003628

0800cfac <siscanf>:
 800cfac:	b40e      	push	{r1, r2, r3}
 800cfae:	b510      	push	{r4, lr}
 800cfb0:	b09f      	sub	sp, #124	; 0x7c
 800cfb2:	f44f 7101 	mov.w	r1, #516	; 0x204
 800cfb6:	ac21      	add	r4, sp, #132	; 0x84
 800cfb8:	f8ad 101c 	strh.w	r1, [sp, #28]
 800cfbc:	9004      	str	r0, [sp, #16]
 800cfbe:	f854 2b04 	ldr.w	r2, [r4], #4
 800cfc2:	9008      	str	r0, [sp, #32]
 800cfc4:	9201      	str	r2, [sp, #4]
 800cfc6:	f7f3 f945 	bl	8000254 <strlen>
 800cfca:	4b0c      	ldr	r3, [pc, #48]	; (800cffc <siscanf+0x50>)
 800cfcc:	a904      	add	r1, sp, #16
 800cfce:	9005      	str	r0, [sp, #20]
 800cfd0:	930d      	str	r3, [sp, #52]	; 0x34
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	9009      	str	r0, [sp, #36]	; 0x24
 800cfd6:	9311      	str	r3, [sp, #68]	; 0x44
 800cfd8:	9316      	str	r3, [sp, #88]	; 0x58
 800cfda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cfde:	4808      	ldr	r0, [pc, #32]	; (800d000 <siscanf+0x54>)
 800cfe0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cfe4:	4623      	mov	r3, r4
 800cfe6:	9a01      	ldr	r2, [sp, #4]
 800cfe8:	6800      	ldr	r0, [r0, #0]
 800cfea:	9403      	str	r4, [sp, #12]
 800cfec:	f000 f9a0 	bl	800d330 <__ssvfiscanf_r>
 800cff0:	b01f      	add	sp, #124	; 0x7c
 800cff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cff6:	b003      	add	sp, #12
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	0800d005 	.word	0x0800d005
 800d000:	20000060 	.word	0x20000060

0800d004 <__seofread>:
 800d004:	2000      	movs	r0, #0
 800d006:	4770      	bx	lr

0800d008 <memset>:
 800d008:	4402      	add	r2, r0
 800d00a:	4603      	mov	r3, r0
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d100      	bne.n	800d012 <memset+0xa>
 800d010:	4770      	bx	lr
 800d012:	f803 1b01 	strb.w	r1, [r3], #1
 800d016:	e7f9      	b.n	800d00c <memset+0x4>

0800d018 <__errno>:
 800d018:	4b01      	ldr	r3, [pc, #4]	; (800d020 <__errno+0x8>)
 800d01a:	6818      	ldr	r0, [r3, #0]
 800d01c:	4770      	bx	lr
 800d01e:	bf00      	nop
 800d020:	20000060 	.word	0x20000060

0800d024 <__libc_init_array>:
 800d024:	b570      	push	{r4, r5, r6, lr}
 800d026:	4d0d      	ldr	r5, [pc, #52]	; (800d05c <__libc_init_array+0x38>)
 800d028:	2600      	movs	r6, #0
 800d02a:	4c0d      	ldr	r4, [pc, #52]	; (800d060 <__libc_init_array+0x3c>)
 800d02c:	1b64      	subs	r4, r4, r5
 800d02e:	10a4      	asrs	r4, r4, #2
 800d030:	42a6      	cmp	r6, r4
 800d032:	d109      	bne.n	800d048 <__libc_init_array+0x24>
 800d034:	4d0b      	ldr	r5, [pc, #44]	; (800d064 <__libc_init_array+0x40>)
 800d036:	2600      	movs	r6, #0
 800d038:	4c0b      	ldr	r4, [pc, #44]	; (800d068 <__libc_init_array+0x44>)
 800d03a:	f000 fdfb 	bl	800dc34 <_init>
 800d03e:	1b64      	subs	r4, r4, r5
 800d040:	10a4      	asrs	r4, r4, #2
 800d042:	42a6      	cmp	r6, r4
 800d044:	d105      	bne.n	800d052 <__libc_init_array+0x2e>
 800d046:	bd70      	pop	{r4, r5, r6, pc}
 800d048:	f855 3b04 	ldr.w	r3, [r5], #4
 800d04c:	3601      	adds	r6, #1
 800d04e:	4798      	blx	r3
 800d050:	e7ee      	b.n	800d030 <__libc_init_array+0xc>
 800d052:	f855 3b04 	ldr.w	r3, [r5], #4
 800d056:	3601      	adds	r6, #1
 800d058:	4798      	blx	r3
 800d05a:	e7f2      	b.n	800d042 <__libc_init_array+0x1e>
 800d05c:	0800de8c 	.word	0x0800de8c
 800d060:	0800de8c 	.word	0x0800de8c
 800d064:	0800de8c 	.word	0x0800de8c
 800d068:	0800de90 	.word	0x0800de90

0800d06c <__retarget_lock_acquire_recursive>:
 800d06c:	4770      	bx	lr

0800d06e <__retarget_lock_release_recursive>:
 800d06e:	4770      	bx	lr

0800d070 <memcpy>:
 800d070:	440a      	add	r2, r1
 800d072:	1e43      	subs	r3, r0, #1
 800d074:	4291      	cmp	r1, r2
 800d076:	d100      	bne.n	800d07a <memcpy+0xa>
 800d078:	4770      	bx	lr
 800d07a:	b510      	push	{r4, lr}
 800d07c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d080:	4291      	cmp	r1, r2
 800d082:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d086:	d1f9      	bne.n	800d07c <memcpy+0xc>
 800d088:	bd10      	pop	{r4, pc}
	...

0800d08c <_free_r>:
 800d08c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d08e:	2900      	cmp	r1, #0
 800d090:	d043      	beq.n	800d11a <_free_r+0x8e>
 800d092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d096:	1f0c      	subs	r4, r1, #4
 800d098:	9001      	str	r0, [sp, #4]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	bfb8      	it	lt
 800d09e:	18e4      	addlt	r4, r4, r3
 800d0a0:	f000 f8e0 	bl	800d264 <__malloc_lock>
 800d0a4:	4a1e      	ldr	r2, [pc, #120]	; (800d120 <_free_r+0x94>)
 800d0a6:	9801      	ldr	r0, [sp, #4]
 800d0a8:	6813      	ldr	r3, [r2, #0]
 800d0aa:	b933      	cbnz	r3, 800d0ba <_free_r+0x2e>
 800d0ac:	6063      	str	r3, [r4, #4]
 800d0ae:	6014      	str	r4, [r2, #0]
 800d0b0:	b003      	add	sp, #12
 800d0b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0b6:	f000 b8db 	b.w	800d270 <__malloc_unlock>
 800d0ba:	42a3      	cmp	r3, r4
 800d0bc:	d908      	bls.n	800d0d0 <_free_r+0x44>
 800d0be:	6825      	ldr	r5, [r4, #0]
 800d0c0:	1961      	adds	r1, r4, r5
 800d0c2:	428b      	cmp	r3, r1
 800d0c4:	bf01      	itttt	eq
 800d0c6:	6819      	ldreq	r1, [r3, #0]
 800d0c8:	685b      	ldreq	r3, [r3, #4]
 800d0ca:	1949      	addeq	r1, r1, r5
 800d0cc:	6021      	streq	r1, [r4, #0]
 800d0ce:	e7ed      	b.n	800d0ac <_free_r+0x20>
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	b10b      	cbz	r3, 800d0da <_free_r+0x4e>
 800d0d6:	42a3      	cmp	r3, r4
 800d0d8:	d9fa      	bls.n	800d0d0 <_free_r+0x44>
 800d0da:	6811      	ldr	r1, [r2, #0]
 800d0dc:	1855      	adds	r5, r2, r1
 800d0de:	42a5      	cmp	r5, r4
 800d0e0:	d10b      	bne.n	800d0fa <_free_r+0x6e>
 800d0e2:	6824      	ldr	r4, [r4, #0]
 800d0e4:	4421      	add	r1, r4
 800d0e6:	1854      	adds	r4, r2, r1
 800d0e8:	6011      	str	r1, [r2, #0]
 800d0ea:	42a3      	cmp	r3, r4
 800d0ec:	d1e0      	bne.n	800d0b0 <_free_r+0x24>
 800d0ee:	681c      	ldr	r4, [r3, #0]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	440c      	add	r4, r1
 800d0f4:	6053      	str	r3, [r2, #4]
 800d0f6:	6014      	str	r4, [r2, #0]
 800d0f8:	e7da      	b.n	800d0b0 <_free_r+0x24>
 800d0fa:	d902      	bls.n	800d102 <_free_r+0x76>
 800d0fc:	230c      	movs	r3, #12
 800d0fe:	6003      	str	r3, [r0, #0]
 800d100:	e7d6      	b.n	800d0b0 <_free_r+0x24>
 800d102:	6825      	ldr	r5, [r4, #0]
 800d104:	1961      	adds	r1, r4, r5
 800d106:	428b      	cmp	r3, r1
 800d108:	bf02      	ittt	eq
 800d10a:	6819      	ldreq	r1, [r3, #0]
 800d10c:	685b      	ldreq	r3, [r3, #4]
 800d10e:	1949      	addeq	r1, r1, r5
 800d110:	6063      	str	r3, [r4, #4]
 800d112:	bf08      	it	eq
 800d114:	6021      	streq	r1, [r4, #0]
 800d116:	6054      	str	r4, [r2, #4]
 800d118:	e7ca      	b.n	800d0b0 <_free_r+0x24>
 800d11a:	b003      	add	sp, #12
 800d11c:	bd30      	pop	{r4, r5, pc}
 800d11e:	bf00      	nop
 800d120:	20003780 	.word	0x20003780

0800d124 <sbrk_aligned>:
 800d124:	b570      	push	{r4, r5, r6, lr}
 800d126:	4e0e      	ldr	r6, [pc, #56]	; (800d160 <sbrk_aligned+0x3c>)
 800d128:	460c      	mov	r4, r1
 800d12a:	4605      	mov	r5, r0
 800d12c:	6831      	ldr	r1, [r6, #0]
 800d12e:	b911      	cbnz	r1, 800d136 <sbrk_aligned+0x12>
 800d130:	f000 fc32 	bl	800d998 <_sbrk_r>
 800d134:	6030      	str	r0, [r6, #0]
 800d136:	4621      	mov	r1, r4
 800d138:	4628      	mov	r0, r5
 800d13a:	f000 fc2d 	bl	800d998 <_sbrk_r>
 800d13e:	1c43      	adds	r3, r0, #1
 800d140:	d00a      	beq.n	800d158 <sbrk_aligned+0x34>
 800d142:	1cc4      	adds	r4, r0, #3
 800d144:	f024 0403 	bic.w	r4, r4, #3
 800d148:	42a0      	cmp	r0, r4
 800d14a:	d007      	beq.n	800d15c <sbrk_aligned+0x38>
 800d14c:	1a21      	subs	r1, r4, r0
 800d14e:	4628      	mov	r0, r5
 800d150:	f000 fc22 	bl	800d998 <_sbrk_r>
 800d154:	3001      	adds	r0, #1
 800d156:	d101      	bne.n	800d15c <sbrk_aligned+0x38>
 800d158:	f04f 34ff 	mov.w	r4, #4294967295
 800d15c:	4620      	mov	r0, r4
 800d15e:	bd70      	pop	{r4, r5, r6, pc}
 800d160:	20003784 	.word	0x20003784

0800d164 <_malloc_r>:
 800d164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d168:	1ccd      	adds	r5, r1, #3
 800d16a:	4607      	mov	r7, r0
 800d16c:	f025 0503 	bic.w	r5, r5, #3
 800d170:	3508      	adds	r5, #8
 800d172:	2d0c      	cmp	r5, #12
 800d174:	bf38      	it	cc
 800d176:	250c      	movcc	r5, #12
 800d178:	2d00      	cmp	r5, #0
 800d17a:	db01      	blt.n	800d180 <_malloc_r+0x1c>
 800d17c:	42a9      	cmp	r1, r5
 800d17e:	d905      	bls.n	800d18c <_malloc_r+0x28>
 800d180:	230c      	movs	r3, #12
 800d182:	2600      	movs	r6, #0
 800d184:	603b      	str	r3, [r7, #0]
 800d186:	4630      	mov	r0, r6
 800d188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d18c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d260 <_malloc_r+0xfc>
 800d190:	f000 f868 	bl	800d264 <__malloc_lock>
 800d194:	f8d8 3000 	ldr.w	r3, [r8]
 800d198:	461c      	mov	r4, r3
 800d19a:	bb5c      	cbnz	r4, 800d1f4 <_malloc_r+0x90>
 800d19c:	4629      	mov	r1, r5
 800d19e:	4638      	mov	r0, r7
 800d1a0:	f7ff ffc0 	bl	800d124 <sbrk_aligned>
 800d1a4:	1c43      	adds	r3, r0, #1
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	d155      	bne.n	800d256 <_malloc_r+0xf2>
 800d1aa:	f8d8 4000 	ldr.w	r4, [r8]
 800d1ae:	4626      	mov	r6, r4
 800d1b0:	2e00      	cmp	r6, #0
 800d1b2:	d145      	bne.n	800d240 <_malloc_r+0xdc>
 800d1b4:	2c00      	cmp	r4, #0
 800d1b6:	d048      	beq.n	800d24a <_malloc_r+0xe6>
 800d1b8:	6823      	ldr	r3, [r4, #0]
 800d1ba:	4631      	mov	r1, r6
 800d1bc:	4638      	mov	r0, r7
 800d1be:	eb04 0903 	add.w	r9, r4, r3
 800d1c2:	f000 fbe9 	bl	800d998 <_sbrk_r>
 800d1c6:	4581      	cmp	r9, r0
 800d1c8:	d13f      	bne.n	800d24a <_malloc_r+0xe6>
 800d1ca:	6821      	ldr	r1, [r4, #0]
 800d1cc:	4638      	mov	r0, r7
 800d1ce:	1a6d      	subs	r5, r5, r1
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	f7ff ffa7 	bl	800d124 <sbrk_aligned>
 800d1d6:	3001      	adds	r0, #1
 800d1d8:	d037      	beq.n	800d24a <_malloc_r+0xe6>
 800d1da:	6823      	ldr	r3, [r4, #0]
 800d1dc:	442b      	add	r3, r5
 800d1de:	6023      	str	r3, [r4, #0]
 800d1e0:	f8d8 3000 	ldr.w	r3, [r8]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d038      	beq.n	800d25a <_malloc_r+0xf6>
 800d1e8:	685a      	ldr	r2, [r3, #4]
 800d1ea:	42a2      	cmp	r2, r4
 800d1ec:	d12b      	bne.n	800d246 <_malloc_r+0xe2>
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	605a      	str	r2, [r3, #4]
 800d1f2:	e00f      	b.n	800d214 <_malloc_r+0xb0>
 800d1f4:	6822      	ldr	r2, [r4, #0]
 800d1f6:	1b52      	subs	r2, r2, r5
 800d1f8:	d41f      	bmi.n	800d23a <_malloc_r+0xd6>
 800d1fa:	2a0b      	cmp	r2, #11
 800d1fc:	d917      	bls.n	800d22e <_malloc_r+0xca>
 800d1fe:	1961      	adds	r1, r4, r5
 800d200:	42a3      	cmp	r3, r4
 800d202:	6025      	str	r5, [r4, #0]
 800d204:	bf18      	it	ne
 800d206:	6059      	strne	r1, [r3, #4]
 800d208:	6863      	ldr	r3, [r4, #4]
 800d20a:	bf08      	it	eq
 800d20c:	f8c8 1000 	streq.w	r1, [r8]
 800d210:	5162      	str	r2, [r4, r5]
 800d212:	604b      	str	r3, [r1, #4]
 800d214:	f104 060b 	add.w	r6, r4, #11
 800d218:	4638      	mov	r0, r7
 800d21a:	f000 f829 	bl	800d270 <__malloc_unlock>
 800d21e:	1d23      	adds	r3, r4, #4
 800d220:	f026 0607 	bic.w	r6, r6, #7
 800d224:	1af2      	subs	r2, r6, r3
 800d226:	d0ae      	beq.n	800d186 <_malloc_r+0x22>
 800d228:	1b9b      	subs	r3, r3, r6
 800d22a:	50a3      	str	r3, [r4, r2]
 800d22c:	e7ab      	b.n	800d186 <_malloc_r+0x22>
 800d22e:	42a3      	cmp	r3, r4
 800d230:	6862      	ldr	r2, [r4, #4]
 800d232:	d1dd      	bne.n	800d1f0 <_malloc_r+0x8c>
 800d234:	f8c8 2000 	str.w	r2, [r8]
 800d238:	e7ec      	b.n	800d214 <_malloc_r+0xb0>
 800d23a:	4623      	mov	r3, r4
 800d23c:	6864      	ldr	r4, [r4, #4]
 800d23e:	e7ac      	b.n	800d19a <_malloc_r+0x36>
 800d240:	4634      	mov	r4, r6
 800d242:	6876      	ldr	r6, [r6, #4]
 800d244:	e7b4      	b.n	800d1b0 <_malloc_r+0x4c>
 800d246:	4613      	mov	r3, r2
 800d248:	e7cc      	b.n	800d1e4 <_malloc_r+0x80>
 800d24a:	230c      	movs	r3, #12
 800d24c:	4638      	mov	r0, r7
 800d24e:	603b      	str	r3, [r7, #0]
 800d250:	f000 f80e 	bl	800d270 <__malloc_unlock>
 800d254:	e797      	b.n	800d186 <_malloc_r+0x22>
 800d256:	6025      	str	r5, [r4, #0]
 800d258:	e7dc      	b.n	800d214 <_malloc_r+0xb0>
 800d25a:	605b      	str	r3, [r3, #4]
 800d25c:	deff      	udf	#255	; 0xff
 800d25e:	bf00      	nop
 800d260:	20003780 	.word	0x20003780

0800d264 <__malloc_lock>:
 800d264:	4801      	ldr	r0, [pc, #4]	; (800d26c <__malloc_lock+0x8>)
 800d266:	f7ff bf01 	b.w	800d06c <__retarget_lock_acquire_recursive>
 800d26a:	bf00      	nop
 800d26c:	2000377c 	.word	0x2000377c

0800d270 <__malloc_unlock>:
 800d270:	4801      	ldr	r0, [pc, #4]	; (800d278 <__malloc_unlock+0x8>)
 800d272:	f7ff befc 	b.w	800d06e <__retarget_lock_release_recursive>
 800d276:	bf00      	nop
 800d278:	2000377c 	.word	0x2000377c

0800d27c <_sungetc_r>:
 800d27c:	b538      	push	{r3, r4, r5, lr}
 800d27e:	1c4b      	adds	r3, r1, #1
 800d280:	4614      	mov	r4, r2
 800d282:	d103      	bne.n	800d28c <_sungetc_r+0x10>
 800d284:	f04f 35ff 	mov.w	r5, #4294967295
 800d288:	4628      	mov	r0, r5
 800d28a:	bd38      	pop	{r3, r4, r5, pc}
 800d28c:	8993      	ldrh	r3, [r2, #12]
 800d28e:	b2cd      	uxtb	r5, r1
 800d290:	f023 0320 	bic.w	r3, r3, #32
 800d294:	8193      	strh	r3, [r2, #12]
 800d296:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d298:	6852      	ldr	r2, [r2, #4]
 800d29a:	b18b      	cbz	r3, 800d2c0 <_sungetc_r+0x44>
 800d29c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	dd08      	ble.n	800d2b4 <_sungetc_r+0x38>
 800d2a2:	6823      	ldr	r3, [r4, #0]
 800d2a4:	1e5a      	subs	r2, r3, #1
 800d2a6:	6022      	str	r2, [r4, #0]
 800d2a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d2ac:	6863      	ldr	r3, [r4, #4]
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	6063      	str	r3, [r4, #4]
 800d2b2:	e7e9      	b.n	800d288 <_sungetc_r+0xc>
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	f000 fb38 	bl	800d92a <__submore>
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	d0f1      	beq.n	800d2a2 <_sungetc_r+0x26>
 800d2be:	e7e1      	b.n	800d284 <_sungetc_r+0x8>
 800d2c0:	6921      	ldr	r1, [r4, #16]
 800d2c2:	6823      	ldr	r3, [r4, #0]
 800d2c4:	b151      	cbz	r1, 800d2dc <_sungetc_r+0x60>
 800d2c6:	4299      	cmp	r1, r3
 800d2c8:	d208      	bcs.n	800d2dc <_sungetc_r+0x60>
 800d2ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d2ce:	42a9      	cmp	r1, r5
 800d2d0:	d104      	bne.n	800d2dc <_sungetc_r+0x60>
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	3201      	adds	r2, #1
 800d2d6:	6023      	str	r3, [r4, #0]
 800d2d8:	6062      	str	r2, [r4, #4]
 800d2da:	e7d5      	b.n	800d288 <_sungetc_r+0xc>
 800d2dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d2e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2e4:	6363      	str	r3, [r4, #52]	; 0x34
 800d2e6:	2303      	movs	r3, #3
 800d2e8:	63a3      	str	r3, [r4, #56]	; 0x38
 800d2ea:	4623      	mov	r3, r4
 800d2ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d2f0:	6023      	str	r3, [r4, #0]
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e7dc      	b.n	800d2b0 <_sungetc_r+0x34>

0800d2f6 <__ssrefill_r>:
 800d2f6:	b510      	push	{r4, lr}
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d2fc:	b169      	cbz	r1, 800d31a <__ssrefill_r+0x24>
 800d2fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d302:	4299      	cmp	r1, r3
 800d304:	d001      	beq.n	800d30a <__ssrefill_r+0x14>
 800d306:	f7ff fec1 	bl	800d08c <_free_r>
 800d30a:	2000      	movs	r0, #0
 800d30c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d30e:	6360      	str	r0, [r4, #52]	; 0x34
 800d310:	6063      	str	r3, [r4, #4]
 800d312:	b113      	cbz	r3, 800d31a <__ssrefill_r+0x24>
 800d314:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d316:	6023      	str	r3, [r4, #0]
 800d318:	bd10      	pop	{r4, pc}
 800d31a:	6923      	ldr	r3, [r4, #16]
 800d31c:	f04f 30ff 	mov.w	r0, #4294967295
 800d320:	6023      	str	r3, [r4, #0]
 800d322:	2300      	movs	r3, #0
 800d324:	6063      	str	r3, [r4, #4]
 800d326:	89a3      	ldrh	r3, [r4, #12]
 800d328:	f043 0320 	orr.w	r3, r3, #32
 800d32c:	81a3      	strh	r3, [r4, #12]
 800d32e:	e7f3      	b.n	800d318 <__ssrefill_r+0x22>

0800d330 <__ssvfiscanf_r>:
 800d330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d334:	460c      	mov	r4, r1
 800d336:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d33a:	2100      	movs	r1, #0
 800d33c:	4606      	mov	r6, r0
 800d33e:	f10d 0804 	add.w	r8, sp, #4
 800d342:	4fa6      	ldr	r7, [pc, #664]	; (800d5dc <__ssvfiscanf_r+0x2ac>)
 800d344:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 800d5e8 <__ssvfiscanf_r+0x2b8>
 800d348:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d34c:	9300      	str	r3, [sp, #0]
 800d34e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d352:	49a3      	ldr	r1, [pc, #652]	; (800d5e0 <__ssvfiscanf_r+0x2b0>)
 800d354:	91a0      	str	r1, [sp, #640]	; 0x280
 800d356:	49a3      	ldr	r1, [pc, #652]	; (800d5e4 <__ssvfiscanf_r+0x2b4>)
 800d358:	91a1      	str	r1, [sp, #644]	; 0x284
 800d35a:	7813      	ldrb	r3, [r2, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f000 815a 	beq.w	800d616 <__ssvfiscanf_r+0x2e6>
 800d362:	5cf9      	ldrb	r1, [r7, r3]
 800d364:	1c55      	adds	r5, r2, #1
 800d366:	f011 0108 	ands.w	r1, r1, #8
 800d36a:	d019      	beq.n	800d3a0 <__ssvfiscanf_r+0x70>
 800d36c:	6863      	ldr	r3, [r4, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	dd0f      	ble.n	800d392 <__ssvfiscanf_r+0x62>
 800d372:	6823      	ldr	r3, [r4, #0]
 800d374:	781a      	ldrb	r2, [r3, #0]
 800d376:	5cba      	ldrb	r2, [r7, r2]
 800d378:	0712      	lsls	r2, r2, #28
 800d37a:	d401      	bmi.n	800d380 <__ssvfiscanf_r+0x50>
 800d37c:	462a      	mov	r2, r5
 800d37e:	e7ec      	b.n	800d35a <__ssvfiscanf_r+0x2a>
 800d380:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d382:	3301      	adds	r3, #1
 800d384:	3201      	adds	r2, #1
 800d386:	6023      	str	r3, [r4, #0]
 800d388:	9245      	str	r2, [sp, #276]	; 0x114
 800d38a:	6862      	ldr	r2, [r4, #4]
 800d38c:	3a01      	subs	r2, #1
 800d38e:	6062      	str	r2, [r4, #4]
 800d390:	e7ec      	b.n	800d36c <__ssvfiscanf_r+0x3c>
 800d392:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d394:	4621      	mov	r1, r4
 800d396:	4630      	mov	r0, r6
 800d398:	4798      	blx	r3
 800d39a:	2800      	cmp	r0, #0
 800d39c:	d0e9      	beq.n	800d372 <__ssvfiscanf_r+0x42>
 800d39e:	e7ed      	b.n	800d37c <__ssvfiscanf_r+0x4c>
 800d3a0:	2b25      	cmp	r3, #37	; 0x25
 800d3a2:	d012      	beq.n	800d3ca <__ssvfiscanf_r+0x9a>
 800d3a4:	469a      	mov	sl, r3
 800d3a6:	6863      	ldr	r3, [r4, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f340 8092 	ble.w	800d4d2 <__ssvfiscanf_r+0x1a2>
 800d3ae:	6822      	ldr	r2, [r4, #0]
 800d3b0:	7813      	ldrb	r3, [r2, #0]
 800d3b2:	4553      	cmp	r3, sl
 800d3b4:	f040 812f 	bne.w	800d616 <__ssvfiscanf_r+0x2e6>
 800d3b8:	6863      	ldr	r3, [r4, #4]
 800d3ba:	3201      	adds	r2, #1
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	6022      	str	r2, [r4, #0]
 800d3c0:	6063      	str	r3, [r4, #4]
 800d3c2:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	9345      	str	r3, [sp, #276]	; 0x114
 800d3c8:	e7d8      	b.n	800d37c <__ssvfiscanf_r+0x4c>
 800d3ca:	9141      	str	r1, [sp, #260]	; 0x104
 800d3cc:	9143      	str	r1, [sp, #268]	; 0x10c
 800d3ce:	7853      	ldrb	r3, [r2, #1]
 800d3d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d3d2:	bf04      	itt	eq
 800d3d4:	2310      	moveq	r3, #16
 800d3d6:	1c95      	addeq	r5, r2, #2
 800d3d8:	f04f 020a 	mov.w	r2, #10
 800d3dc:	bf08      	it	eq
 800d3de:	9341      	streq	r3, [sp, #260]	; 0x104
 800d3e0:	46aa      	mov	sl, r5
 800d3e2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d3e6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d3ea:	2b09      	cmp	r3, #9
 800d3ec:	d91c      	bls.n	800d428 <__ssvfiscanf_r+0xf8>
 800d3ee:	2203      	movs	r2, #3
 800d3f0:	487d      	ldr	r0, [pc, #500]	; (800d5e8 <__ssvfiscanf_r+0x2b8>)
 800d3f2:	f000 fae1 	bl	800d9b8 <memchr>
 800d3f6:	b138      	cbz	r0, 800d408 <__ssvfiscanf_r+0xd8>
 800d3f8:	eba0 0009 	sub.w	r0, r0, r9
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d400:	4655      	mov	r5, sl
 800d402:	4083      	lsls	r3, r0
 800d404:	4313      	orrs	r3, r2
 800d406:	9341      	str	r3, [sp, #260]	; 0x104
 800d408:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d40c:	2b78      	cmp	r3, #120	; 0x78
 800d40e:	d806      	bhi.n	800d41e <__ssvfiscanf_r+0xee>
 800d410:	2b57      	cmp	r3, #87	; 0x57
 800d412:	d810      	bhi.n	800d436 <__ssvfiscanf_r+0x106>
 800d414:	2b25      	cmp	r3, #37	; 0x25
 800d416:	d0c5      	beq.n	800d3a4 <__ssvfiscanf_r+0x74>
 800d418:	d856      	bhi.n	800d4c8 <__ssvfiscanf_r+0x198>
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d064      	beq.n	800d4e8 <__ssvfiscanf_r+0x1b8>
 800d41e:	2303      	movs	r3, #3
 800d420:	9347      	str	r3, [sp, #284]	; 0x11c
 800d422:	230a      	movs	r3, #10
 800d424:	9342      	str	r3, [sp, #264]	; 0x108
 800d426:	e075      	b.n	800d514 <__ssvfiscanf_r+0x1e4>
 800d428:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d42a:	4655      	mov	r5, sl
 800d42c:	fb02 1103 	mla	r1, r2, r3, r1
 800d430:	3930      	subs	r1, #48	; 0x30
 800d432:	9143      	str	r1, [sp, #268]	; 0x10c
 800d434:	e7d4      	b.n	800d3e0 <__ssvfiscanf_r+0xb0>
 800d436:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d43a:	2a20      	cmp	r2, #32
 800d43c:	d8ef      	bhi.n	800d41e <__ssvfiscanf_r+0xee>
 800d43e:	a101      	add	r1, pc, #4	; (adr r1, 800d444 <__ssvfiscanf_r+0x114>)
 800d440:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d444:	0800d4f7 	.word	0x0800d4f7
 800d448:	0800d41f 	.word	0x0800d41f
 800d44c:	0800d41f 	.word	0x0800d41f
 800d450:	0800d555 	.word	0x0800d555
 800d454:	0800d41f 	.word	0x0800d41f
 800d458:	0800d41f 	.word	0x0800d41f
 800d45c:	0800d41f 	.word	0x0800d41f
 800d460:	0800d41f 	.word	0x0800d41f
 800d464:	0800d41f 	.word	0x0800d41f
 800d468:	0800d41f 	.word	0x0800d41f
 800d46c:	0800d41f 	.word	0x0800d41f
 800d470:	0800d56b 	.word	0x0800d56b
 800d474:	0800d551 	.word	0x0800d551
 800d478:	0800d4cf 	.word	0x0800d4cf
 800d47c:	0800d4cf 	.word	0x0800d4cf
 800d480:	0800d4cf 	.word	0x0800d4cf
 800d484:	0800d41f 	.word	0x0800d41f
 800d488:	0800d50d 	.word	0x0800d50d
 800d48c:	0800d41f 	.word	0x0800d41f
 800d490:	0800d41f 	.word	0x0800d41f
 800d494:	0800d41f 	.word	0x0800d41f
 800d498:	0800d41f 	.word	0x0800d41f
 800d49c:	0800d57b 	.word	0x0800d57b
 800d4a0:	0800d549 	.word	0x0800d549
 800d4a4:	0800d4ef 	.word	0x0800d4ef
 800d4a8:	0800d41f 	.word	0x0800d41f
 800d4ac:	0800d41f 	.word	0x0800d41f
 800d4b0:	0800d577 	.word	0x0800d577
 800d4b4:	0800d41f 	.word	0x0800d41f
 800d4b8:	0800d551 	.word	0x0800d551
 800d4bc:	0800d41f 	.word	0x0800d41f
 800d4c0:	0800d41f 	.word	0x0800d41f
 800d4c4:	0800d4f7 	.word	0x0800d4f7
 800d4c8:	3b45      	subs	r3, #69	; 0x45
 800d4ca:	2b02      	cmp	r3, #2
 800d4cc:	d8a7      	bhi.n	800d41e <__ssvfiscanf_r+0xee>
 800d4ce:	2305      	movs	r3, #5
 800d4d0:	e01f      	b.n	800d512 <__ssvfiscanf_r+0x1e2>
 800d4d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d4d4:	4621      	mov	r1, r4
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	4798      	blx	r3
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	f43f af67 	beq.w	800d3ae <__ssvfiscanf_r+0x7e>
 800d4e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	f040 808d 	bne.w	800d602 <__ssvfiscanf_r+0x2d2>
 800d4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ec:	e08f      	b.n	800d60e <__ssvfiscanf_r+0x2de>
 800d4ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d4f0:	f042 0220 	orr.w	r2, r2, #32
 800d4f4:	9241      	str	r2, [sp, #260]	; 0x104
 800d4f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d4f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d4fc:	9241      	str	r2, [sp, #260]	; 0x104
 800d4fe:	2210      	movs	r2, #16
 800d500:	2b6f      	cmp	r3, #111	; 0x6f
 800d502:	9242      	str	r2, [sp, #264]	; 0x108
 800d504:	bf34      	ite	cc
 800d506:	2303      	movcc	r3, #3
 800d508:	2304      	movcs	r3, #4
 800d50a:	e002      	b.n	800d512 <__ssvfiscanf_r+0x1e2>
 800d50c:	2300      	movs	r3, #0
 800d50e:	9342      	str	r3, [sp, #264]	; 0x108
 800d510:	2303      	movs	r3, #3
 800d512:	9347      	str	r3, [sp, #284]	; 0x11c
 800d514:	6863      	ldr	r3, [r4, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	dd3e      	ble.n	800d598 <__ssvfiscanf_r+0x268>
 800d51a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d51c:	0659      	lsls	r1, r3, #25
 800d51e:	d404      	bmi.n	800d52a <__ssvfiscanf_r+0x1fa>
 800d520:	6823      	ldr	r3, [r4, #0]
 800d522:	781a      	ldrb	r2, [r3, #0]
 800d524:	5cba      	ldrb	r2, [r7, r2]
 800d526:	0712      	lsls	r2, r2, #28
 800d528:	d43d      	bmi.n	800d5a6 <__ssvfiscanf_r+0x276>
 800d52a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d52c:	2b02      	cmp	r3, #2
 800d52e:	dc4c      	bgt.n	800d5ca <__ssvfiscanf_r+0x29a>
 800d530:	466b      	mov	r3, sp
 800d532:	4622      	mov	r2, r4
 800d534:	a941      	add	r1, sp, #260	; 0x104
 800d536:	4630      	mov	r0, r6
 800d538:	f000 f872 	bl	800d620 <_scanf_chars>
 800d53c:	2801      	cmp	r0, #1
 800d53e:	d06a      	beq.n	800d616 <__ssvfiscanf_r+0x2e6>
 800d540:	2802      	cmp	r0, #2
 800d542:	f47f af1b 	bne.w	800d37c <__ssvfiscanf_r+0x4c>
 800d546:	e7cb      	b.n	800d4e0 <__ssvfiscanf_r+0x1b0>
 800d548:	2308      	movs	r3, #8
 800d54a:	9342      	str	r3, [sp, #264]	; 0x108
 800d54c:	2304      	movs	r3, #4
 800d54e:	e7e0      	b.n	800d512 <__ssvfiscanf_r+0x1e2>
 800d550:	220a      	movs	r2, #10
 800d552:	e7d5      	b.n	800d500 <__ssvfiscanf_r+0x1d0>
 800d554:	4629      	mov	r1, r5
 800d556:	4640      	mov	r0, r8
 800d558:	f000 f9ae 	bl	800d8b8 <__sccl>
 800d55c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d55e:	4605      	mov	r5, r0
 800d560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d564:	9341      	str	r3, [sp, #260]	; 0x104
 800d566:	2301      	movs	r3, #1
 800d568:	e7d3      	b.n	800d512 <__ssvfiscanf_r+0x1e2>
 800d56a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d56c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d570:	9341      	str	r3, [sp, #260]	; 0x104
 800d572:	2300      	movs	r3, #0
 800d574:	e7cd      	b.n	800d512 <__ssvfiscanf_r+0x1e2>
 800d576:	2302      	movs	r3, #2
 800d578:	e7cb      	b.n	800d512 <__ssvfiscanf_r+0x1e2>
 800d57a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d57c:	06c3      	lsls	r3, r0, #27
 800d57e:	f53f aefd 	bmi.w	800d37c <__ssvfiscanf_r+0x4c>
 800d582:	9b00      	ldr	r3, [sp, #0]
 800d584:	07c0      	lsls	r0, r0, #31
 800d586:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d588:	f103 0104 	add.w	r1, r3, #4
 800d58c:	9100      	str	r1, [sp, #0]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	bf4c      	ite	mi
 800d592:	801a      	strhmi	r2, [r3, #0]
 800d594:	601a      	strpl	r2, [r3, #0]
 800d596:	e6f1      	b.n	800d37c <__ssvfiscanf_r+0x4c>
 800d598:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d59a:	4621      	mov	r1, r4
 800d59c:	4630      	mov	r0, r6
 800d59e:	4798      	blx	r3
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d0ba      	beq.n	800d51a <__ssvfiscanf_r+0x1ea>
 800d5a4:	e79c      	b.n	800d4e0 <__ssvfiscanf_r+0x1b0>
 800d5a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d5a8:	3201      	adds	r2, #1
 800d5aa:	9245      	str	r2, [sp, #276]	; 0x114
 800d5ac:	6862      	ldr	r2, [r4, #4]
 800d5ae:	3a01      	subs	r2, #1
 800d5b0:	2a00      	cmp	r2, #0
 800d5b2:	6062      	str	r2, [r4, #4]
 800d5b4:	dd02      	ble.n	800d5bc <__ssvfiscanf_r+0x28c>
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	6023      	str	r3, [r4, #0]
 800d5ba:	e7b1      	b.n	800d520 <__ssvfiscanf_r+0x1f0>
 800d5bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d5be:	4621      	mov	r1, r4
 800d5c0:	4630      	mov	r0, r6
 800d5c2:	4798      	blx	r3
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	d0ab      	beq.n	800d520 <__ssvfiscanf_r+0x1f0>
 800d5c8:	e78a      	b.n	800d4e0 <__ssvfiscanf_r+0x1b0>
 800d5ca:	2b04      	cmp	r3, #4
 800d5cc:	dc0e      	bgt.n	800d5ec <__ssvfiscanf_r+0x2bc>
 800d5ce:	466b      	mov	r3, sp
 800d5d0:	4622      	mov	r2, r4
 800d5d2:	a941      	add	r1, sp, #260	; 0x104
 800d5d4:	4630      	mov	r0, r6
 800d5d6:	f000 f87d 	bl	800d6d4 <_scanf_i>
 800d5da:	e7af      	b.n	800d53c <__ssvfiscanf_r+0x20c>
 800d5dc:	0800dd84 	.word	0x0800dd84
 800d5e0:	0800d27d 	.word	0x0800d27d
 800d5e4:	0800d2f7 	.word	0x0800d2f7
 800d5e8:	0800dd64 	.word	0x0800dd64
 800d5ec:	4b0b      	ldr	r3, [pc, #44]	; (800d61c <__ssvfiscanf_r+0x2ec>)
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	f43f aec4 	beq.w	800d37c <__ssvfiscanf_r+0x4c>
 800d5f4:	466b      	mov	r3, sp
 800d5f6:	4622      	mov	r2, r4
 800d5f8:	a941      	add	r1, sp, #260	; 0x104
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	f3af 8000 	nop.w
 800d600:	e79c      	b.n	800d53c <__ssvfiscanf_r+0x20c>
 800d602:	89a3      	ldrh	r3, [r4, #12]
 800d604:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d608:	bf18      	it	ne
 800d60a:	f04f 30ff 	movne.w	r0, #4294967295
 800d60e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d616:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d618:	e7f9      	b.n	800d60e <__ssvfiscanf_r+0x2de>
 800d61a:	bf00      	nop
 800d61c:	00000000 	.word	0x00000000

0800d620 <_scanf_chars>:
 800d620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d624:	4615      	mov	r5, r2
 800d626:	688a      	ldr	r2, [r1, #8]
 800d628:	4680      	mov	r8, r0
 800d62a:	460c      	mov	r4, r1
 800d62c:	b932      	cbnz	r2, 800d63c <_scanf_chars+0x1c>
 800d62e:	698a      	ldr	r2, [r1, #24]
 800d630:	2a00      	cmp	r2, #0
 800d632:	bf0c      	ite	eq
 800d634:	2201      	moveq	r2, #1
 800d636:	f04f 32ff 	movne.w	r2, #4294967295
 800d63a:	608a      	str	r2, [r1, #8]
 800d63c:	6822      	ldr	r2, [r4, #0]
 800d63e:	2700      	movs	r7, #0
 800d640:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800d6d0 <_scanf_chars+0xb0>
 800d644:	06d1      	lsls	r1, r2, #27
 800d646:	bf5f      	itttt	pl
 800d648:	681a      	ldrpl	r2, [r3, #0]
 800d64a:	1d11      	addpl	r1, r2, #4
 800d64c:	6019      	strpl	r1, [r3, #0]
 800d64e:	6816      	ldrpl	r6, [r2, #0]
 800d650:	69a0      	ldr	r0, [r4, #24]
 800d652:	b188      	cbz	r0, 800d678 <_scanf_chars+0x58>
 800d654:	2801      	cmp	r0, #1
 800d656:	d107      	bne.n	800d668 <_scanf_chars+0x48>
 800d658:	682a      	ldr	r2, [r5, #0]
 800d65a:	7811      	ldrb	r1, [r2, #0]
 800d65c:	6962      	ldr	r2, [r4, #20]
 800d65e:	5c52      	ldrb	r2, [r2, r1]
 800d660:	b952      	cbnz	r2, 800d678 <_scanf_chars+0x58>
 800d662:	2f00      	cmp	r7, #0
 800d664:	d031      	beq.n	800d6ca <_scanf_chars+0xaa>
 800d666:	e022      	b.n	800d6ae <_scanf_chars+0x8e>
 800d668:	2802      	cmp	r0, #2
 800d66a:	d120      	bne.n	800d6ae <_scanf_chars+0x8e>
 800d66c:	682b      	ldr	r3, [r5, #0]
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d674:	071b      	lsls	r3, r3, #28
 800d676:	d41a      	bmi.n	800d6ae <_scanf_chars+0x8e>
 800d678:	6823      	ldr	r3, [r4, #0]
 800d67a:	3701      	adds	r7, #1
 800d67c:	06da      	lsls	r2, r3, #27
 800d67e:	bf5e      	ittt	pl
 800d680:	682b      	ldrpl	r3, [r5, #0]
 800d682:	781b      	ldrbpl	r3, [r3, #0]
 800d684:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d688:	682a      	ldr	r2, [r5, #0]
 800d68a:	686b      	ldr	r3, [r5, #4]
 800d68c:	3201      	adds	r2, #1
 800d68e:	3b01      	subs	r3, #1
 800d690:	602a      	str	r2, [r5, #0]
 800d692:	68a2      	ldr	r2, [r4, #8]
 800d694:	606b      	str	r3, [r5, #4]
 800d696:	3a01      	subs	r2, #1
 800d698:	60a2      	str	r2, [r4, #8]
 800d69a:	b142      	cbz	r2, 800d6ae <_scanf_chars+0x8e>
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	dcd7      	bgt.n	800d650 <_scanf_chars+0x30>
 800d6a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	4640      	mov	r0, r8
 800d6a8:	4798      	blx	r3
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	d0d0      	beq.n	800d650 <_scanf_chars+0x30>
 800d6ae:	6823      	ldr	r3, [r4, #0]
 800d6b0:	f013 0310 	ands.w	r3, r3, #16
 800d6b4:	d105      	bne.n	800d6c2 <_scanf_chars+0xa2>
 800d6b6:	68e2      	ldr	r2, [r4, #12]
 800d6b8:	3201      	adds	r2, #1
 800d6ba:	60e2      	str	r2, [r4, #12]
 800d6bc:	69a2      	ldr	r2, [r4, #24]
 800d6be:	b102      	cbz	r2, 800d6c2 <_scanf_chars+0xa2>
 800d6c0:	7033      	strb	r3, [r6, #0]
 800d6c2:	6923      	ldr	r3, [r4, #16]
 800d6c4:	2000      	movs	r0, #0
 800d6c6:	443b      	add	r3, r7
 800d6c8:	6123      	str	r3, [r4, #16]
 800d6ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6ce:	bf00      	nop
 800d6d0:	0800dd84 	.word	0x0800dd84

0800d6d4 <_scanf_i>:
 800d6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d8:	4698      	mov	r8, r3
 800d6da:	b087      	sub	sp, #28
 800d6dc:	4b72      	ldr	r3, [pc, #456]	; (800d8a8 <_scanf_i+0x1d4>)
 800d6de:	460c      	mov	r4, r1
 800d6e0:	4682      	mov	sl, r0
 800d6e2:	4616      	mov	r6, r2
 800d6e4:	4627      	mov	r7, r4
 800d6e6:	f04f 0b00 	mov.w	fp, #0
 800d6ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d6ee:	ab03      	add	r3, sp, #12
 800d6f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d6f4:	4b6d      	ldr	r3, [pc, #436]	; (800d8ac <_scanf_i+0x1d8>)
 800d6f6:	69a1      	ldr	r1, [r4, #24]
 800d6f8:	4a6d      	ldr	r2, [pc, #436]	; (800d8b0 <_scanf_i+0x1dc>)
 800d6fa:	2903      	cmp	r1, #3
 800d6fc:	bf18      	it	ne
 800d6fe:	461a      	movne	r2, r3
 800d700:	68a3      	ldr	r3, [r4, #8]
 800d702:	9201      	str	r2, [sp, #4]
 800d704:	1e5a      	subs	r2, r3, #1
 800d706:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d70a:	bf89      	itett	hi
 800d70c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d710:	f04f 0900 	movls.w	r9, #0
 800d714:	eb03 0905 	addhi.w	r9, r3, r5
 800d718:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d71c:	bf88      	it	hi
 800d71e:	60a3      	strhi	r3, [r4, #8]
 800d720:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d724:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d728:	463d      	mov	r5, r7
 800d72a:	6023      	str	r3, [r4, #0]
 800d72c:	6831      	ldr	r1, [r6, #0]
 800d72e:	ab03      	add	r3, sp, #12
 800d730:	2202      	movs	r2, #2
 800d732:	7809      	ldrb	r1, [r1, #0]
 800d734:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d738:	f000 f93e 	bl	800d9b8 <memchr>
 800d73c:	b328      	cbz	r0, 800d78a <_scanf_i+0xb6>
 800d73e:	f1bb 0f01 	cmp.w	fp, #1
 800d742:	d159      	bne.n	800d7f8 <_scanf_i+0x124>
 800d744:	6862      	ldr	r2, [r4, #4]
 800d746:	b92a      	cbnz	r2, 800d754 <_scanf_i+0x80>
 800d748:	6822      	ldr	r2, [r4, #0]
 800d74a:	2308      	movs	r3, #8
 800d74c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d750:	6063      	str	r3, [r4, #4]
 800d752:	6022      	str	r2, [r4, #0]
 800d754:	6822      	ldr	r2, [r4, #0]
 800d756:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d75a:	6022      	str	r2, [r4, #0]
 800d75c:	68a2      	ldr	r2, [r4, #8]
 800d75e:	1e51      	subs	r1, r2, #1
 800d760:	60a1      	str	r1, [r4, #8]
 800d762:	b192      	cbz	r2, 800d78a <_scanf_i+0xb6>
 800d764:	6832      	ldr	r2, [r6, #0]
 800d766:	1c51      	adds	r1, r2, #1
 800d768:	6031      	str	r1, [r6, #0]
 800d76a:	7812      	ldrb	r2, [r2, #0]
 800d76c:	f805 2b01 	strb.w	r2, [r5], #1
 800d770:	6872      	ldr	r2, [r6, #4]
 800d772:	3a01      	subs	r2, #1
 800d774:	2a00      	cmp	r2, #0
 800d776:	6072      	str	r2, [r6, #4]
 800d778:	dc07      	bgt.n	800d78a <_scanf_i+0xb6>
 800d77a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d77e:	4631      	mov	r1, r6
 800d780:	4650      	mov	r0, sl
 800d782:	4790      	blx	r2
 800d784:	2800      	cmp	r0, #0
 800d786:	f040 8085 	bne.w	800d894 <_scanf_i+0x1c0>
 800d78a:	f10b 0b01 	add.w	fp, fp, #1
 800d78e:	f1bb 0f03 	cmp.w	fp, #3
 800d792:	d1cb      	bne.n	800d72c <_scanf_i+0x58>
 800d794:	6863      	ldr	r3, [r4, #4]
 800d796:	b90b      	cbnz	r3, 800d79c <_scanf_i+0xc8>
 800d798:	230a      	movs	r3, #10
 800d79a:	6063      	str	r3, [r4, #4]
 800d79c:	6863      	ldr	r3, [r4, #4]
 800d79e:	f04f 0b00 	mov.w	fp, #0
 800d7a2:	4944      	ldr	r1, [pc, #272]	; (800d8b4 <_scanf_i+0x1e0>)
 800d7a4:	6960      	ldr	r0, [r4, #20]
 800d7a6:	1ac9      	subs	r1, r1, r3
 800d7a8:	f000 f886 	bl	800d8b8 <__sccl>
 800d7ac:	68a3      	ldr	r3, [r4, #8]
 800d7ae:	6822      	ldr	r2, [r4, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d03d      	beq.n	800d830 <_scanf_i+0x15c>
 800d7b4:	6831      	ldr	r1, [r6, #0]
 800d7b6:	6960      	ldr	r0, [r4, #20]
 800d7b8:	f891 c000 	ldrb.w	ip, [r1]
 800d7bc:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d7c0:	2800      	cmp	r0, #0
 800d7c2:	d035      	beq.n	800d830 <_scanf_i+0x15c>
 800d7c4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d7c8:	d124      	bne.n	800d814 <_scanf_i+0x140>
 800d7ca:	0510      	lsls	r0, r2, #20
 800d7cc:	d522      	bpl.n	800d814 <_scanf_i+0x140>
 800d7ce:	f10b 0b01 	add.w	fp, fp, #1
 800d7d2:	f1b9 0f00 	cmp.w	r9, #0
 800d7d6:	d003      	beq.n	800d7e0 <_scanf_i+0x10c>
 800d7d8:	3301      	adds	r3, #1
 800d7da:	f109 39ff 	add.w	r9, r9, #4294967295
 800d7de:	60a3      	str	r3, [r4, #8]
 800d7e0:	6873      	ldr	r3, [r6, #4]
 800d7e2:	3b01      	subs	r3, #1
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	6073      	str	r3, [r6, #4]
 800d7e8:	dd1b      	ble.n	800d822 <_scanf_i+0x14e>
 800d7ea:	6833      	ldr	r3, [r6, #0]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	6033      	str	r3, [r6, #0]
 800d7f0:	68a3      	ldr	r3, [r4, #8]
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	60a3      	str	r3, [r4, #8]
 800d7f6:	e7d9      	b.n	800d7ac <_scanf_i+0xd8>
 800d7f8:	f1bb 0f02 	cmp.w	fp, #2
 800d7fc:	d1ae      	bne.n	800d75c <_scanf_i+0x88>
 800d7fe:	6822      	ldr	r2, [r4, #0]
 800d800:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d804:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d808:	d1bf      	bne.n	800d78a <_scanf_i+0xb6>
 800d80a:	2310      	movs	r3, #16
 800d80c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d810:	6063      	str	r3, [r4, #4]
 800d812:	e7a2      	b.n	800d75a <_scanf_i+0x86>
 800d814:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d818:	6022      	str	r2, [r4, #0]
 800d81a:	780b      	ldrb	r3, [r1, #0]
 800d81c:	f805 3b01 	strb.w	r3, [r5], #1
 800d820:	e7de      	b.n	800d7e0 <_scanf_i+0x10c>
 800d822:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d826:	4631      	mov	r1, r6
 800d828:	4650      	mov	r0, sl
 800d82a:	4798      	blx	r3
 800d82c:	2800      	cmp	r0, #0
 800d82e:	d0df      	beq.n	800d7f0 <_scanf_i+0x11c>
 800d830:	6823      	ldr	r3, [r4, #0]
 800d832:	05d9      	lsls	r1, r3, #23
 800d834:	d50d      	bpl.n	800d852 <_scanf_i+0x17e>
 800d836:	42bd      	cmp	r5, r7
 800d838:	d909      	bls.n	800d84e <_scanf_i+0x17a>
 800d83a:	f105 39ff 	add.w	r9, r5, #4294967295
 800d83e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d842:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d846:	4632      	mov	r2, r6
 800d848:	464d      	mov	r5, r9
 800d84a:	4650      	mov	r0, sl
 800d84c:	4798      	blx	r3
 800d84e:	42bd      	cmp	r5, r7
 800d850:	d028      	beq.n	800d8a4 <_scanf_i+0x1d0>
 800d852:	6822      	ldr	r2, [r4, #0]
 800d854:	f012 0210 	ands.w	r2, r2, #16
 800d858:	d113      	bne.n	800d882 <_scanf_i+0x1ae>
 800d85a:	702a      	strb	r2, [r5, #0]
 800d85c:	4639      	mov	r1, r7
 800d85e:	6863      	ldr	r3, [r4, #4]
 800d860:	4650      	mov	r0, sl
 800d862:	9e01      	ldr	r6, [sp, #4]
 800d864:	47b0      	blx	r6
 800d866:	f8d8 3000 	ldr.w	r3, [r8]
 800d86a:	6821      	ldr	r1, [r4, #0]
 800d86c:	1d1a      	adds	r2, r3, #4
 800d86e:	f011 0f20 	tst.w	r1, #32
 800d872:	f8c8 2000 	str.w	r2, [r8]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	d00f      	beq.n	800d89a <_scanf_i+0x1c6>
 800d87a:	6018      	str	r0, [r3, #0]
 800d87c:	68e3      	ldr	r3, [r4, #12]
 800d87e:	3301      	adds	r3, #1
 800d880:	60e3      	str	r3, [r4, #12]
 800d882:	1bed      	subs	r5, r5, r7
 800d884:	6923      	ldr	r3, [r4, #16]
 800d886:	2000      	movs	r0, #0
 800d888:	445d      	add	r5, fp
 800d88a:	442b      	add	r3, r5
 800d88c:	6123      	str	r3, [r4, #16]
 800d88e:	b007      	add	sp, #28
 800d890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d894:	f04f 0b00 	mov.w	fp, #0
 800d898:	e7ca      	b.n	800d830 <_scanf_i+0x15c>
 800d89a:	07ca      	lsls	r2, r1, #31
 800d89c:	bf4c      	ite	mi
 800d89e:	8018      	strhmi	r0, [r3, #0]
 800d8a0:	6018      	strpl	r0, [r3, #0]
 800d8a2:	e7eb      	b.n	800d87c <_scanf_i+0x1a8>
 800d8a4:	2001      	movs	r0, #1
 800d8a6:	e7f2      	b.n	800d88e <_scanf_i+0x1ba>
 800d8a8:	0800dc90 	.word	0x0800dc90
 800d8ac:	0800dc21 	.word	0x0800dc21
 800d8b0:	0800db39 	.word	0x0800db39
 800d8b4:	0800dd78 	.word	0x0800dd78

0800d8b8 <__sccl>:
 800d8b8:	b570      	push	{r4, r5, r6, lr}
 800d8ba:	780b      	ldrb	r3, [r1, #0]
 800d8bc:	4604      	mov	r4, r0
 800d8be:	3801      	subs	r0, #1
 800d8c0:	2b5e      	cmp	r3, #94	; 0x5e
 800d8c2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d8c6:	bf13      	iteet	ne
 800d8c8:	1c4a      	addne	r2, r1, #1
 800d8ca:	1c8a      	addeq	r2, r1, #2
 800d8cc:	784b      	ldrbeq	r3, [r1, #1]
 800d8ce:	2100      	movne	r1, #0
 800d8d0:	bf08      	it	eq
 800d8d2:	2101      	moveq	r1, #1
 800d8d4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d8d8:	42a8      	cmp	r0, r5
 800d8da:	d1fb      	bne.n	800d8d4 <__sccl+0x1c>
 800d8dc:	b90b      	cbnz	r3, 800d8e2 <__sccl+0x2a>
 800d8de:	1e50      	subs	r0, r2, #1
 800d8e0:	bd70      	pop	{r4, r5, r6, pc}
 800d8e2:	f081 0101 	eor.w	r1, r1, #1
 800d8e6:	4610      	mov	r0, r2
 800d8e8:	54e1      	strb	r1, [r4, r3]
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d8f0:	2d2d      	cmp	r5, #45	; 0x2d
 800d8f2:	d005      	beq.n	800d900 <__sccl+0x48>
 800d8f4:	2d5d      	cmp	r5, #93	; 0x5d
 800d8f6:	d016      	beq.n	800d926 <__sccl+0x6e>
 800d8f8:	2d00      	cmp	r5, #0
 800d8fa:	d0f1      	beq.n	800d8e0 <__sccl+0x28>
 800d8fc:	462b      	mov	r3, r5
 800d8fe:	e7f2      	b.n	800d8e6 <__sccl+0x2e>
 800d900:	7846      	ldrb	r6, [r0, #1]
 800d902:	2e5d      	cmp	r6, #93	; 0x5d
 800d904:	d0fa      	beq.n	800d8fc <__sccl+0x44>
 800d906:	42b3      	cmp	r3, r6
 800d908:	dcf8      	bgt.n	800d8fc <__sccl+0x44>
 800d90a:	3002      	adds	r0, #2
 800d90c:	461a      	mov	r2, r3
 800d90e:	3201      	adds	r2, #1
 800d910:	4296      	cmp	r6, r2
 800d912:	54a1      	strb	r1, [r4, r2]
 800d914:	dcfb      	bgt.n	800d90e <__sccl+0x56>
 800d916:	1af2      	subs	r2, r6, r3
 800d918:	1c5d      	adds	r5, r3, #1
 800d91a:	3a01      	subs	r2, #1
 800d91c:	42b3      	cmp	r3, r6
 800d91e:	bfa8      	it	ge
 800d920:	2200      	movge	r2, #0
 800d922:	18ab      	adds	r3, r5, r2
 800d924:	e7e1      	b.n	800d8ea <__sccl+0x32>
 800d926:	4610      	mov	r0, r2
 800d928:	e7da      	b.n	800d8e0 <__sccl+0x28>

0800d92a <__submore>:
 800d92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d92e:	460c      	mov	r4, r1
 800d930:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d936:	4299      	cmp	r1, r3
 800d938:	d11a      	bne.n	800d970 <__submore+0x46>
 800d93a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d93e:	f7ff fc11 	bl	800d164 <_malloc_r>
 800d942:	b918      	cbnz	r0, 800d94c <__submore+0x22>
 800d944:	f04f 30ff 	mov.w	r0, #4294967295
 800d948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d94c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d950:	6360      	str	r0, [r4, #52]	; 0x34
 800d952:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d956:	63a3      	str	r3, [r4, #56]	; 0x38
 800d958:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d95c:	7083      	strb	r3, [r0, #2]
 800d95e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d962:	7043      	strb	r3, [r0, #1]
 800d964:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d968:	7003      	strb	r3, [r0, #0]
 800d96a:	6020      	str	r0, [r4, #0]
 800d96c:	2000      	movs	r0, #0
 800d96e:	e7eb      	b.n	800d948 <__submore+0x1e>
 800d970:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d972:	0077      	lsls	r7, r6, #1
 800d974:	463a      	mov	r2, r7
 800d976:	f000 f82d 	bl	800d9d4 <_realloc_r>
 800d97a:	4605      	mov	r5, r0
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d0e1      	beq.n	800d944 <__submore+0x1a>
 800d980:	eb00 0806 	add.w	r8, r0, r6
 800d984:	4601      	mov	r1, r0
 800d986:	4632      	mov	r2, r6
 800d988:	4640      	mov	r0, r8
 800d98a:	f7ff fb71 	bl	800d070 <memcpy>
 800d98e:	f8c4 8000 	str.w	r8, [r4]
 800d992:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d996:	e7e9      	b.n	800d96c <__submore+0x42>

0800d998 <_sbrk_r>:
 800d998:	b538      	push	{r3, r4, r5, lr}
 800d99a:	2300      	movs	r3, #0
 800d99c:	4d05      	ldr	r5, [pc, #20]	; (800d9b4 <_sbrk_r+0x1c>)
 800d99e:	4604      	mov	r4, r0
 800d9a0:	4608      	mov	r0, r1
 800d9a2:	602b      	str	r3, [r5, #0]
 800d9a4:	f7f4 fbc0 	bl	8002128 <_sbrk>
 800d9a8:	1c43      	adds	r3, r0, #1
 800d9aa:	d102      	bne.n	800d9b2 <_sbrk_r+0x1a>
 800d9ac:	682b      	ldr	r3, [r5, #0]
 800d9ae:	b103      	cbz	r3, 800d9b2 <_sbrk_r+0x1a>
 800d9b0:	6023      	str	r3, [r4, #0]
 800d9b2:	bd38      	pop	{r3, r4, r5, pc}
 800d9b4:	20003778 	.word	0x20003778

0800d9b8 <memchr>:
 800d9b8:	b2c9      	uxtb	r1, r1
 800d9ba:	4402      	add	r2, r0
 800d9bc:	b510      	push	{r4, lr}
 800d9be:	4290      	cmp	r0, r2
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	d101      	bne.n	800d9c8 <memchr+0x10>
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	e003      	b.n	800d9d0 <memchr+0x18>
 800d9c8:	781c      	ldrb	r4, [r3, #0]
 800d9ca:	3001      	adds	r0, #1
 800d9cc:	428c      	cmp	r4, r1
 800d9ce:	d1f6      	bne.n	800d9be <memchr+0x6>
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	bd10      	pop	{r4, pc}

0800d9d4 <_realloc_r>:
 800d9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d8:	4680      	mov	r8, r0
 800d9da:	4614      	mov	r4, r2
 800d9dc:	460e      	mov	r6, r1
 800d9de:	b921      	cbnz	r1, 800d9ea <_realloc_r+0x16>
 800d9e0:	4611      	mov	r1, r2
 800d9e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e6:	f7ff bbbd 	b.w	800d164 <_malloc_r>
 800d9ea:	b92a      	cbnz	r2, 800d9f8 <_realloc_r+0x24>
 800d9ec:	4625      	mov	r5, r4
 800d9ee:	f7ff fb4d 	bl	800d08c <_free_r>
 800d9f2:	4628      	mov	r0, r5
 800d9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9f8:	f000 f914 	bl	800dc24 <_malloc_usable_size_r>
 800d9fc:	4284      	cmp	r4, r0
 800d9fe:	4607      	mov	r7, r0
 800da00:	d802      	bhi.n	800da08 <_realloc_r+0x34>
 800da02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da06:	d812      	bhi.n	800da2e <_realloc_r+0x5a>
 800da08:	4621      	mov	r1, r4
 800da0a:	4640      	mov	r0, r8
 800da0c:	f7ff fbaa 	bl	800d164 <_malloc_r>
 800da10:	4605      	mov	r5, r0
 800da12:	2800      	cmp	r0, #0
 800da14:	d0ed      	beq.n	800d9f2 <_realloc_r+0x1e>
 800da16:	42bc      	cmp	r4, r7
 800da18:	4622      	mov	r2, r4
 800da1a:	4631      	mov	r1, r6
 800da1c:	bf28      	it	cs
 800da1e:	463a      	movcs	r2, r7
 800da20:	f7ff fb26 	bl	800d070 <memcpy>
 800da24:	4631      	mov	r1, r6
 800da26:	4640      	mov	r0, r8
 800da28:	f7ff fb30 	bl	800d08c <_free_r>
 800da2c:	e7e1      	b.n	800d9f2 <_realloc_r+0x1e>
 800da2e:	4635      	mov	r5, r6
 800da30:	e7df      	b.n	800d9f2 <_realloc_r+0x1e>
	...

0800da34 <_strtol_l.constprop.0>:
 800da34:	2b01      	cmp	r3, #1
 800da36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da3a:	d001      	beq.n	800da40 <_strtol_l.constprop.0+0xc>
 800da3c:	2b24      	cmp	r3, #36	; 0x24
 800da3e:	d906      	bls.n	800da4e <_strtol_l.constprop.0+0x1a>
 800da40:	f7ff faea 	bl	800d018 <__errno>
 800da44:	2316      	movs	r3, #22
 800da46:	6003      	str	r3, [r0, #0]
 800da48:	2000      	movs	r0, #0
 800da4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da4e:	460d      	mov	r5, r1
 800da50:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 800db34 <_strtol_l.constprop.0+0x100>
 800da54:	462e      	mov	r6, r5
 800da56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da5a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800da5e:	f017 0708 	ands.w	r7, r7, #8
 800da62:	d1f7      	bne.n	800da54 <_strtol_l.constprop.0+0x20>
 800da64:	2c2d      	cmp	r4, #45	; 0x2d
 800da66:	d132      	bne.n	800dace <_strtol_l.constprop.0+0x9a>
 800da68:	782c      	ldrb	r4, [r5, #0]
 800da6a:	2701      	movs	r7, #1
 800da6c:	1cb5      	adds	r5, r6, #2
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d05b      	beq.n	800db2a <_strtol_l.constprop.0+0xf6>
 800da72:	2b10      	cmp	r3, #16
 800da74:	d109      	bne.n	800da8a <_strtol_l.constprop.0+0x56>
 800da76:	2c30      	cmp	r4, #48	; 0x30
 800da78:	d107      	bne.n	800da8a <_strtol_l.constprop.0+0x56>
 800da7a:	782c      	ldrb	r4, [r5, #0]
 800da7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800da80:	2c58      	cmp	r4, #88	; 0x58
 800da82:	d14d      	bne.n	800db20 <_strtol_l.constprop.0+0xec>
 800da84:	786c      	ldrb	r4, [r5, #1]
 800da86:	2310      	movs	r3, #16
 800da88:	3502      	adds	r5, #2
 800da8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800da8e:	f04f 0e00 	mov.w	lr, #0
 800da92:	f108 38ff 	add.w	r8, r8, #4294967295
 800da96:	4676      	mov	r6, lr
 800da98:	fbb8 f9f3 	udiv	r9, r8, r3
 800da9c:	fb03 8a19 	mls	sl, r3, r9, r8
 800daa0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800daa4:	f1bc 0f09 	cmp.w	ip, #9
 800daa8:	d816      	bhi.n	800dad8 <_strtol_l.constprop.0+0xa4>
 800daaa:	4664      	mov	r4, ip
 800daac:	42a3      	cmp	r3, r4
 800daae:	dd24      	ble.n	800dafa <_strtol_l.constprop.0+0xc6>
 800dab0:	f1be 3fff 	cmp.w	lr, #4294967295
 800dab4:	d008      	beq.n	800dac8 <_strtol_l.constprop.0+0x94>
 800dab6:	45b1      	cmp	r9, r6
 800dab8:	d31c      	bcc.n	800daf4 <_strtol_l.constprop.0+0xc0>
 800daba:	d101      	bne.n	800dac0 <_strtol_l.constprop.0+0x8c>
 800dabc:	45a2      	cmp	sl, r4
 800dabe:	db19      	blt.n	800daf4 <_strtol_l.constprop.0+0xc0>
 800dac0:	fb06 4603 	mla	r6, r6, r3, r4
 800dac4:	f04f 0e01 	mov.w	lr, #1
 800dac8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dacc:	e7e8      	b.n	800daa0 <_strtol_l.constprop.0+0x6c>
 800dace:	2c2b      	cmp	r4, #43	; 0x2b
 800dad0:	bf04      	itt	eq
 800dad2:	782c      	ldrbeq	r4, [r5, #0]
 800dad4:	1cb5      	addeq	r5, r6, #2
 800dad6:	e7ca      	b.n	800da6e <_strtol_l.constprop.0+0x3a>
 800dad8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dadc:	f1bc 0f19 	cmp.w	ip, #25
 800dae0:	d801      	bhi.n	800dae6 <_strtol_l.constprop.0+0xb2>
 800dae2:	3c37      	subs	r4, #55	; 0x37
 800dae4:	e7e2      	b.n	800daac <_strtol_l.constprop.0+0x78>
 800dae6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800daea:	f1bc 0f19 	cmp.w	ip, #25
 800daee:	d804      	bhi.n	800dafa <_strtol_l.constprop.0+0xc6>
 800daf0:	3c57      	subs	r4, #87	; 0x57
 800daf2:	e7db      	b.n	800daac <_strtol_l.constprop.0+0x78>
 800daf4:	f04f 3eff 	mov.w	lr, #4294967295
 800daf8:	e7e6      	b.n	800dac8 <_strtol_l.constprop.0+0x94>
 800dafa:	f1be 3fff 	cmp.w	lr, #4294967295
 800dafe:	d105      	bne.n	800db0c <_strtol_l.constprop.0+0xd8>
 800db00:	2322      	movs	r3, #34	; 0x22
 800db02:	4646      	mov	r6, r8
 800db04:	6003      	str	r3, [r0, #0]
 800db06:	b942      	cbnz	r2, 800db1a <_strtol_l.constprop.0+0xe6>
 800db08:	4630      	mov	r0, r6
 800db0a:	e79e      	b.n	800da4a <_strtol_l.constprop.0+0x16>
 800db0c:	b107      	cbz	r7, 800db10 <_strtol_l.constprop.0+0xdc>
 800db0e:	4276      	negs	r6, r6
 800db10:	2a00      	cmp	r2, #0
 800db12:	d0f9      	beq.n	800db08 <_strtol_l.constprop.0+0xd4>
 800db14:	f1be 0f00 	cmp.w	lr, #0
 800db18:	d000      	beq.n	800db1c <_strtol_l.constprop.0+0xe8>
 800db1a:	1e69      	subs	r1, r5, #1
 800db1c:	6011      	str	r1, [r2, #0]
 800db1e:	e7f3      	b.n	800db08 <_strtol_l.constprop.0+0xd4>
 800db20:	2430      	movs	r4, #48	; 0x30
 800db22:	2b00      	cmp	r3, #0
 800db24:	d1b1      	bne.n	800da8a <_strtol_l.constprop.0+0x56>
 800db26:	2308      	movs	r3, #8
 800db28:	e7af      	b.n	800da8a <_strtol_l.constprop.0+0x56>
 800db2a:	2c30      	cmp	r4, #48	; 0x30
 800db2c:	d0a5      	beq.n	800da7a <_strtol_l.constprop.0+0x46>
 800db2e:	230a      	movs	r3, #10
 800db30:	e7ab      	b.n	800da8a <_strtol_l.constprop.0+0x56>
 800db32:	bf00      	nop
 800db34:	0800dd84 	.word	0x0800dd84

0800db38 <_strtol_r>:
 800db38:	f7ff bf7c 	b.w	800da34 <_strtol_l.constprop.0>

0800db3c <_strtoul_l.constprop.0>:
 800db3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db40:	4686      	mov	lr, r0
 800db42:	460d      	mov	r5, r1
 800db44:	4f35      	ldr	r7, [pc, #212]	; (800dc1c <_strtoul_l.constprop.0+0xe0>)
 800db46:	4628      	mov	r0, r5
 800db48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db4c:	5d3e      	ldrb	r6, [r7, r4]
 800db4e:	f016 0608 	ands.w	r6, r6, #8
 800db52:	d1f8      	bne.n	800db46 <_strtoul_l.constprop.0+0xa>
 800db54:	2c2d      	cmp	r4, #45	; 0x2d
 800db56:	d130      	bne.n	800dbba <_strtoul_l.constprop.0+0x7e>
 800db58:	782c      	ldrb	r4, [r5, #0]
 800db5a:	2601      	movs	r6, #1
 800db5c:	1c85      	adds	r5, r0, #2
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d057      	beq.n	800dc12 <_strtoul_l.constprop.0+0xd6>
 800db62:	2b10      	cmp	r3, #16
 800db64:	d109      	bne.n	800db7a <_strtoul_l.constprop.0+0x3e>
 800db66:	2c30      	cmp	r4, #48	; 0x30
 800db68:	d107      	bne.n	800db7a <_strtoul_l.constprop.0+0x3e>
 800db6a:	7828      	ldrb	r0, [r5, #0]
 800db6c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800db70:	2858      	cmp	r0, #88	; 0x58
 800db72:	d149      	bne.n	800dc08 <_strtoul_l.constprop.0+0xcc>
 800db74:	786c      	ldrb	r4, [r5, #1]
 800db76:	2310      	movs	r3, #16
 800db78:	3502      	adds	r5, #2
 800db7a:	f04f 38ff 	mov.w	r8, #4294967295
 800db7e:	2700      	movs	r7, #0
 800db80:	fbb8 f8f3 	udiv	r8, r8, r3
 800db84:	fb03 f908 	mul.w	r9, r3, r8
 800db88:	4638      	mov	r0, r7
 800db8a:	ea6f 0909 	mvn.w	r9, r9
 800db8e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800db92:	f1bc 0f09 	cmp.w	ip, #9
 800db96:	d815      	bhi.n	800dbc4 <_strtoul_l.constprop.0+0x88>
 800db98:	4664      	mov	r4, ip
 800db9a:	42a3      	cmp	r3, r4
 800db9c:	dd23      	ble.n	800dbe6 <_strtoul_l.constprop.0+0xaa>
 800db9e:	f1b7 3fff 	cmp.w	r7, #4294967295
 800dba2:	d007      	beq.n	800dbb4 <_strtoul_l.constprop.0+0x78>
 800dba4:	4580      	cmp	r8, r0
 800dba6:	d31b      	bcc.n	800dbe0 <_strtoul_l.constprop.0+0xa4>
 800dba8:	d101      	bne.n	800dbae <_strtoul_l.constprop.0+0x72>
 800dbaa:	45a1      	cmp	r9, r4
 800dbac:	db18      	blt.n	800dbe0 <_strtoul_l.constprop.0+0xa4>
 800dbae:	fb00 4003 	mla	r0, r0, r3, r4
 800dbb2:	2701      	movs	r7, #1
 800dbb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dbb8:	e7e9      	b.n	800db8e <_strtoul_l.constprop.0+0x52>
 800dbba:	2c2b      	cmp	r4, #43	; 0x2b
 800dbbc:	bf04      	itt	eq
 800dbbe:	782c      	ldrbeq	r4, [r5, #0]
 800dbc0:	1c85      	addeq	r5, r0, #2
 800dbc2:	e7cc      	b.n	800db5e <_strtoul_l.constprop.0+0x22>
 800dbc4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dbc8:	f1bc 0f19 	cmp.w	ip, #25
 800dbcc:	d801      	bhi.n	800dbd2 <_strtoul_l.constprop.0+0x96>
 800dbce:	3c37      	subs	r4, #55	; 0x37
 800dbd0:	e7e3      	b.n	800db9a <_strtoul_l.constprop.0+0x5e>
 800dbd2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dbd6:	f1bc 0f19 	cmp.w	ip, #25
 800dbda:	d804      	bhi.n	800dbe6 <_strtoul_l.constprop.0+0xaa>
 800dbdc:	3c57      	subs	r4, #87	; 0x57
 800dbde:	e7dc      	b.n	800db9a <_strtoul_l.constprop.0+0x5e>
 800dbe0:	f04f 37ff 	mov.w	r7, #4294967295
 800dbe4:	e7e6      	b.n	800dbb4 <_strtoul_l.constprop.0+0x78>
 800dbe6:	1c7b      	adds	r3, r7, #1
 800dbe8:	d106      	bne.n	800dbf8 <_strtoul_l.constprop.0+0xbc>
 800dbea:	2322      	movs	r3, #34	; 0x22
 800dbec:	4638      	mov	r0, r7
 800dbee:	f8ce 3000 	str.w	r3, [lr]
 800dbf2:	b932      	cbnz	r2, 800dc02 <_strtoul_l.constprop.0+0xc6>
 800dbf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbf8:	b106      	cbz	r6, 800dbfc <_strtoul_l.constprop.0+0xc0>
 800dbfa:	4240      	negs	r0, r0
 800dbfc:	2a00      	cmp	r2, #0
 800dbfe:	d0f9      	beq.n	800dbf4 <_strtoul_l.constprop.0+0xb8>
 800dc00:	b107      	cbz	r7, 800dc04 <_strtoul_l.constprop.0+0xc8>
 800dc02:	1e69      	subs	r1, r5, #1
 800dc04:	6011      	str	r1, [r2, #0]
 800dc06:	e7f5      	b.n	800dbf4 <_strtoul_l.constprop.0+0xb8>
 800dc08:	2430      	movs	r4, #48	; 0x30
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d1b5      	bne.n	800db7a <_strtoul_l.constprop.0+0x3e>
 800dc0e:	2308      	movs	r3, #8
 800dc10:	e7b3      	b.n	800db7a <_strtoul_l.constprop.0+0x3e>
 800dc12:	2c30      	cmp	r4, #48	; 0x30
 800dc14:	d0a9      	beq.n	800db6a <_strtoul_l.constprop.0+0x2e>
 800dc16:	230a      	movs	r3, #10
 800dc18:	e7af      	b.n	800db7a <_strtoul_l.constprop.0+0x3e>
 800dc1a:	bf00      	nop
 800dc1c:	0800dd84 	.word	0x0800dd84

0800dc20 <_strtoul_r>:
 800dc20:	f7ff bf8c 	b.w	800db3c <_strtoul_l.constprop.0>

0800dc24 <_malloc_usable_size_r>:
 800dc24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc28:	1f18      	subs	r0, r3, #4
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	bfbc      	itt	lt
 800dc2e:	580b      	ldrlt	r3, [r1, r0]
 800dc30:	18c0      	addlt	r0, r0, r3
 800dc32:	4770      	bx	lr

0800dc34 <_init>:
 800dc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc36:	bf00      	nop
 800dc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc3a:	bc08      	pop	{r3}
 800dc3c:	469e      	mov	lr, r3
 800dc3e:	4770      	bx	lr

0800dc40 <_fini>:
 800dc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc42:	bf00      	nop
 800dc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc46:	bc08      	pop	{r3}
 800dc48:	469e      	mov	lr, r3
 800dc4a:	4770      	bx	lr
